
Zigbee_OnOff_Client_Router.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d30  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013c4  08017e70  08017e70  00018e70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019234  08019234  0001a234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801923c  0801923c  0001a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019240  08019240  0001a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000000fc  20000008  08019244  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000104  08019340  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001d4c  20000120  08019351  0001b120  2**4
                  ALLOC
  9 ._user_heap_stack 0001a004  20001e6c  08019351  0001be6c  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  0001b115  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  0001c000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  0001c000  2**2
                  ALLOC
 13 MB_MEM2       00000a76  200300e4  200300e4  0001c000  2**2
                  ALLOC
 14 .debug_line   00040bfe  00000000  00000000  0001b149  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 00000091  00000000  00000000  0005bd47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   0004866e  00000000  00000000  0005bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000086b9  00000000  00000000  000a4446  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004150  00000000  00000000  000acb00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110e78  00000000  00000000  000b0c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000027dc  00000000  00000000  001c1ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f188  00000000  00000000  001c42a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00005fde  00000000  00000000  001f342c  2**0
                  CONTENTS, READONLY
 23 .iar.rtmodel  00000288  00000000  00000000  001f940a  2**0
                  CONTENTS, READONLY
 24 .iar_vfe_header 00000030  00000000  00000000  001f9694  2**2
                  CONTENTS, READONLY
 25 .debug_frame  0000fa70  00000000  00000000  001f96c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00002815  00000000  00000000  00209134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000665  00000000  00000000  0020b949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    00005db7  00000000  00000000  0020bfae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 000014fc  00000000  00000000  00211d65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  00213261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000120 	.word	0x20000120
 800015c:	00000000 	.word	0x00000000
 8000160:	08017e58 	.word	0x08017e58

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000124 	.word	0x20000124
 800017c:	08017e58 	.word	0x08017e58

08000180 <ZbZclClusterGetEndpoint>:
 8000180:	7b80      	ldrb	r0, [r0, #14]
 8000182:	4770      	bx	lr

08000184 <ZbZclClusterSetCallbackArg>:
 8000184:	6541      	str	r1, [r0, #84]	@ 0x54
 8000186:	4770      	bx	lr

08000188 <ZbZclClusterSetMfrCode>:
 8000188:	8201      	strh	r1, [r0, #16]
 800018a:	4770      	bx	lr

0800018c <ZbZclClusterGetClusterId>:
 800018c:	8980      	ldrh	r0, [r0, #12]
 800018e:	4770      	bx	lr

08000190 <ZbZclClusterSetProfileId>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	0004      	movs	r4, r0
 8000194:	000d      	movs	r5, r1
 8000196:	82a5      	strh	r5, [r4, #20]
 8000198:	7ba0      	ldrb	r0, [r4, #14]
 800019a:	28ff      	cmp	r0, #255	@ 0xff
 800019c:	d008      	beq.n	80001b0 <??ZbZclClusterSetProfileId_0>
 800019e:	0020      	movs	r0, r4
 80001a0:	f014 f978 	bl	8014494 <ZbZclClusterUnbind>
 80001a4:	7f23      	ldrb	r3, [r4, #28]
 80001a6:	8aa2      	ldrh	r2, [r4, #20]
 80001a8:	7ba1      	ldrb	r1, [r4, #14]
 80001aa:	0020      	movs	r0, r4
 80001ac:	f014 f92f 	bl	801440e <ZbZclClusterBind>

080001b0 <??ZbZclClusterSetProfileId_0>:
 80001b0:	bd31      	pop	{r0, r4, r5, pc}

080001b2 <ZbZclClusterGetProfileId>:
 80001b2:	b510      	push	{r4, lr}
 80001b4:	0004      	movs	r4, r0
 80001b6:	7ba1      	ldrb	r1, [r4, #14]
 80001b8:	68a0      	ldr	r0, [r4, #8]
 80001ba:	f013 fb88 	bl	80138ce <ZbApsEndpointProfile>
 80001be:	0001      	movs	r1, r0
 80001c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80001c4:	b289      	uxth	r1, r1
 80001c6:	4291      	cmp	r1, r2
 80001c8:	d101      	bne.n	80001ce <??ZbZclClusterGetProfileId_0>
 80001ca:	8aa1      	ldrh	r1, [r4, #20]
 80001cc:	0008      	movs	r0, r1

080001ce <??ZbZclClusterGetProfileId_0>:
 80001ce:	b280      	uxth	r0, r0
 80001d0:	bd10      	pop	{r4, pc}

080001d2 <ZbZclClusterSetMinSecurity>:
 80001d2:	b430      	push	{r4, r5}
 80001d4:	0003      	movs	r3, r0
 80001d6:	2001      	movs	r0, #1
 80001d8:	7d9a      	ldrb	r2, [r3, #22]
 80001da:	f012 0203 	ands.w	r2, r2, #3
 80001de:	2a01      	cmp	r2, #1
 80001e0:	d101      	bne.n	80001e6 <??ZbZclClusterSetMinSecurity_0>
 80001e2:	2401      	movs	r4, #1
 80001e4:	e000      	b.n	80001e8 <??ZbZclClusterSetMinSecurity_1>

080001e6 <??ZbZclClusterSetMinSecurity_0>:
 80001e6:	2400      	movs	r4, #0

080001e8 <??ZbZclClusterSetMinSecurity_1>:
 80001e8:	000a      	movs	r2, r1
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	2aab      	cmp	r2, #171	@ 0xab
 80001ee:	d01d      	beq.n	800022c <??ZbZclClusterSetMinSecurity_2>
 80001f0:	2aac      	cmp	r2, #172	@ 0xac
 80001f2:	d00f      	beq.n	8000214 <??ZbZclClusterSetMinSecurity_3>
 80001f4:	2aaf      	cmp	r2, #175	@ 0xaf
 80001f6:	d123      	bne.n	8000240 <??ZbZclClusterSetMinSecurity_4>

080001f8 <??ZbZclClusterSetMinSecurity_5>:
 80001f8:	8add      	ldrh	r5, [r3, #22]
 80001fa:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80001fe:	4015      	ands	r5, r2
 8000200:	82dd      	strh	r5, [r3, #22]
 8000202:	8add      	ldrh	r5, [r3, #22]
 8000204:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000208:	4015      	ands	r5, r2
 800020a:	82dd      	strh	r5, [r3, #22]
 800020c:	0022      	movs	r2, r4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	2a00      	cmp	r2, #0

08000212 <??ZbZclClusterSetMinSecurity_6>:
 8000212:	e017      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000214 <??ZbZclClusterSetMinSecurity_3>:
 8000214:	8ada      	ldrh	r2, [r3, #22]
 8000216:	f052 0202 	orrs.w	r2, r2, #2
 800021a:	82da      	strh	r2, [r3, #22]
 800021c:	8ada      	ldrh	r2, [r3, #22]
 800021e:	f052 0201 	orrs.w	r2, r2, #1
 8000222:	82da      	strh	r2, [r3, #22]
 8000224:	0022      	movs	r2, r4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	2a00      	cmp	r2, #0

0800022a <??ZbZclClusterSetMinSecurity_8>:
 800022a:	e00b      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

0800022c <??ZbZclClusterSetMinSecurity_2>:
 800022c:	8add      	ldrh	r5, [r3, #22]
 800022e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000232:	4015      	ands	r5, r2
 8000234:	82dd      	strh	r5, [r3, #22]
 8000236:	8ada      	ldrh	r2, [r3, #22]
 8000238:	f052 0201 	orrs.w	r2, r2, #1
 800023c:	82da      	strh	r2, [r3, #22]
 800023e:	e001      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000240 <??ZbZclClusterSetMinSecurity_4>:
 8000240:	2200      	movs	r2, #0
 8000242:	0010      	movs	r0, r2

08000244 <??ZbZclClusterSetMinSecurity_7>:
 8000244:	0002      	movs	r2, r0
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	2a00      	cmp	r2, #0
 800024a:	d000      	beq.n	800024e <??ZbZclClusterSetMinSecurity_9>
 800024c:	7499      	strb	r1, [r3, #18]

0800024e <??ZbZclClusterSetMinSecurity_9>:
 800024e:	b2c0      	uxtb	r0, r0
 8000250:	bc30      	pop	{r4, r5}
 8000252:	4770      	bx	lr

08000254 <ZbZclClusterCheckMinSecurity>:
 8000254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000258:	0004      	movs	r4, r0
 800025a:	000d      	movs	r5, r1
 800025c:	0016      	movs	r6, r2
 800025e:	2700      	movs	r7, #0
 8000260:	7ca0      	ldrb	r0, [r4, #18]
 8000262:	28af      	cmp	r0, #175	@ 0xaf
 8000264:	d102      	bne.n	800026c <??ZbZclClusterCheckMinSecurity_0>
 8000266:	2001      	movs	r0, #1
 8000268:	0007      	movs	r7, r0
 800026a:	e073      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800026c <??ZbZclClusterCheckMinSecurity_0>:
 800026c:	7ca0      	ldrb	r0, [r4, #18]
 800026e:	28ac      	cmp	r0, #172	@ 0xac
 8000270:	d10a      	bne.n	8000288 <??ZbZclClusterCheckMinSecurity_2>
 8000272:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000276:	28ac      	cmp	r0, #172	@ 0xac
 8000278:	d003      	beq.n	8000282 <??ZbZclClusterCheckMinSecurity_3>
 800027a:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 800027e:	28ab      	cmp	r0, #171	@ 0xab
 8000280:	d101      	bne.n	8000286 <??ZbZclClusterCheckMinSecurity_4>

08000282 <??ZbZclClusterCheckMinSecurity_3>:
 8000282:	2001      	movs	r0, #1
 8000284:	0007      	movs	r7, r0

08000286 <??ZbZclClusterCheckMinSecurity_4>:
 8000286:	e065      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000288 <??ZbZclClusterCheckMinSecurity_2>:
 8000288:	7ca0      	ldrb	r0, [r4, #18]
 800028a:	28ab      	cmp	r0, #171	@ 0xab
 800028c:	d162      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>
 800028e:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000292:	28ab      	cmp	r0, #171	@ 0xab
 8000294:	d102      	bne.n	800029c <??ZbZclClusterCheckMinSecurity_6>
 8000296:	2001      	movs	r0, #1
 8000298:	0007      	movs	r7, r0
 800029a:	e05b      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800029c <??ZbZclClusterCheckMinSecurity_6>:
 800029c:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 80002a0:	28ac      	cmp	r0, #172	@ 0xac
 80002a2:	d157      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002a4 <??ZbZclClusterCheckMinSecurity_7>:
 80002a4:	89a0      	ldrh	r0, [r4, #12]
 80002a6:	2819      	cmp	r0, #25
 80002a8:	d114      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002aa:	7f20      	ldrb	r0, [r4, #28]
 80002ac:	2801      	cmp	r0, #1
 80002ae:	d111      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002b0:	0028      	movs	r0, r5
 80002b2:	f013 fb3f 	bl	8013934 <ZbApsAddrIsBcast>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d00b      	beq.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002ba:	7830      	ldrb	r0, [r6, #0]
 80002bc:	2801      	cmp	r0, #1
 80002be:	d108      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c0:	78b0      	ldrb	r0, [r6, #2]
 80002c2:	2801      	cmp	r0, #1
 80002c4:	d105      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c6:	79f0      	ldrb	r0, [r6, #7]
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d102      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002cc:	2001      	movs	r0, #1
 80002ce:	0007      	movs	r7, r0
 80002d0:	e040      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d2 <??ZbZclClusterCheckMinSecurity_9>:
 80002d2:	e03f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d4 <??ZbZclClusterCheckMinSecurity_8>:
 80002d4:	f240 7802 	movw	r8, #1794	@ 0x702
 80002d8:	89a0      	ldrh	r0, [r4, #12]
 80002da:	4540      	cmp	r0, r8
 80002dc:	d11a      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002de:	7f20      	ldrb	r0, [r4, #28]
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d117      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002e4:	7830      	ldrb	r0, [r6, #0]
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d114      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002ea:	79f0      	ldrb	r0, [r6, #7]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d111      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f0:	78b0      	ldrb	r0, [r6, #2]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d10e      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f6:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80002f8:	2802      	cmp	r0, #2
 80002fa:	d30b      	bcc.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002fc:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80002fe:	f000 feb5 	bl	800106c <pletoh16>
 8000302:	0001      	movs	r1, r0
 8000304:	f240 3206 	movw	r2, #774	@ 0x306
 8000308:	b289      	uxth	r1, r1
 800030a:	4291      	cmp	r1, r2
 800030c:	d102      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 800030e:	2101      	movs	r1, #1
 8000310:	000f      	movs	r7, r1
 8000312:	e01f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000314 <??ZbZclClusterCheckMinSecurity_10>:
 8000314:	89a0      	ldrh	r0, [r4, #12]
 8000316:	4540      	cmp	r0, r8
 8000318:	d11b      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 800031a:	7f20      	ldrb	r0, [r4, #28]
 800031c:	2801      	cmp	r0, #1
 800031e:	d118      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 8000320:	7830      	ldrb	r0, [r6, #0]
 8000322:	2800      	cmp	r0, #0
 8000324:	d114      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000326:	79f0      	ldrb	r0, [r6, #7]
 8000328:	2801      	cmp	r0, #1
 800032a:	d111      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800032c:	78b0      	ldrb	r0, [r6, #2]
 800032e:	2801      	cmp	r0, #1
 8000330:	d10e      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000332:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8000334:	2802      	cmp	r0, #2
 8000336:	d30b      	bcc.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000338:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800033a:	f000 fe97 	bl	800106c <pletoh16>
 800033e:	0001      	movs	r1, r0
 8000340:	f240 3206 	movw	r2, #774	@ 0x306
 8000344:	b289      	uxth	r1, r1
 8000346:	4291      	cmp	r1, r2
 8000348:	d102      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800034a:	2101      	movs	r1, #1
 800034c:	000f      	movs	r7, r1
 800034e:	e001      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000350 <??ZbZclClusterCheckMinSecurity_12>:
 8000350:	e000      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000352 <??ZbZclClusterCheckMinSecurity_11>:
 8000352:	e7ff      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000354 <??ZbZclClusterCheckMinSecurity_1>:
 8000354:	0038      	movs	r0, r7
 8000356:	b2c0      	uxtb	r0, r0
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <ZbZclClusterSetTxOptions>:
 800035c:	05ca      	lsls	r2, r1, #23
 800035e:	d400      	bmi.n	8000362 <??ZbZclClusterSetTxOptions_0>

08000360 <??ZbZclClusterSetTxOptions_1>:
 8000360:	82c1      	strh	r1, [r0, #22]

08000362 <??ZbZclClusterSetTxOptions_0>:
 8000362:	4770      	bx	lr

08000364 <ZbZclClusterGetTxOptions>:
 8000364:	8ac0      	ldrh	r0, [r0, #22]
 8000366:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800036a:	4008      	ands	r0, r1
 800036c:	4770      	bx	lr

0800036e <ZbZclTxOptsFromSecurityStatus>:
 800036e:	0001      	movs	r1, r0
 8000370:	2000      	movs	r0, #0
 8000372:	f050 0004 	orrs.w	r0, r0, #4
 8000376:	f050 0008 	orrs.w	r0, r0, #8
 800037a:	000a      	movs	r2, r1
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	2aab      	cmp	r2, #171	@ 0xab
 8000380:	d102      	bne.n	8000388 <??ZbZclTxOptsFromSecurityStatus_0>
 8000382:	f050 0001 	orrs.w	r0, r0, #1
 8000386:	e007      	b.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>

08000388 <??ZbZclTxOptsFromSecurityStatus_0>:
 8000388:	000a      	movs	r2, r1
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	2aac      	cmp	r2, #172	@ 0xac
 800038e:	d103      	bne.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>
 8000390:	f050 0001 	orrs.w	r0, r0, #1
 8000394:	f050 0002 	orrs.w	r0, r0, #2

08000398 <??ZbZclTxOptsFromSecurityStatus_1>:
 8000398:	b280      	uxth	r0, r0
 800039a:	4770      	bx	lr

0800039c <ZbZclClusterGetDirection>:
 800039c:	7f00      	ldrb	r0, [r0, #28]
 800039e:	4770      	bx	lr

080003a0 <ZbZclClusterGetDirectionStr>:
 80003a0:	0001      	movs	r1, r0
 80003a2:	7f08      	ldrb	r0, [r1, #28]
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d003      	beq.n	80003b0 <??ZbZclClusterGetDirectionStr_0>
 80003a8:	2802      	cmp	r0, #2
 80003aa:	d005      	beq.n	80003b8 <??ZbZclClusterGetDirectionStr_1>
 80003ac:	d302      	bcc.n	80003b4 <??ZbZclClusterGetDirectionStr_2>
 80003ae:	e005      	b.n	80003bc <??ZbZclClusterGetDirectionStr_3>

080003b0 <??ZbZclClusterGetDirectionStr_0>:
 80003b0:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <??DataTable1>)
 80003b2:	e004      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b4 <??ZbZclClusterGetDirectionStr_2>:
 80003b4:	4803      	ldr	r0, [pc, #12]	@ (80003c4 <??DataTable1_1>)
 80003b6:	e002      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b8 <??ZbZclClusterGetDirectionStr_1>:
 80003b8:	4803      	ldr	r0, [pc, #12]	@ (80003c8 <??DataTable1_2>)
 80003ba:	e000      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003bc <??ZbZclClusterGetDirectionStr_3>:
 80003bc:	4803      	ldr	r0, [pc, #12]	@ (80003cc <??DataTable1_3>)

080003be <??ZbZclClusterGetDirectionStr_4>:
 80003be:	4770      	bx	lr

080003c0 <??DataTable1>:
 80003c0:	84e8 0801                                   ....

080003c4 <??DataTable1_1>:
 80003c4:	84f0 0801                                   ....

080003c8 <??DataTable1_2>:
 80003c8:	84f8 0801                                   ....

080003cc <??DataTable1_3>:
 80003cc:	8500 0801                                   ....

080003d0 <ZbZclClusterSetDiscoverRoute>:
 80003d0:	7601      	strb	r1, [r0, #24]
 80003d2:	4770      	bx	lr

080003d4 <ZbZclClusterSetRadius>:
 80003d4:	7641      	strb	r1, [r0, #25]
 80003d6:	4770      	bx	lr

080003d8 <ZbZclClusterGetRadius>:
 80003d8:	7e40      	ldrb	r0, [r0, #25]
 80003da:	4770      	bx	lr

080003dc <ZbZclClusterSetMaxAsduLength>:
 80003dc:	b410      	push	{r4}
 80003de:	0002      	movs	r2, r0
 80003e0:	000b      	movs	r3, r1
 80003e2:	0018      	movs	r0, r3
 80003e4:	b280      	uxth	r0, r0
 80003e6:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 80003ea:	42a0      	cmp	r0, r4
 80003ec:	d301      	bcc.n	80003f2 <??ZbZclClusterSetMaxAsduLength_0>
 80003ee:	2000      	movs	r0, #0
 80003f0:	e007      	b.n	8000402 <??ZbZclClusterSetMaxAsduLength_1>

080003f2 <??ZbZclClusterSetMaxAsduLength_0>:
 80003f2:	0018      	movs	r0, r3
 80003f4:	b280      	uxth	r0, r0
 80003f6:	2839      	cmp	r0, #57	@ 0x39
 80003f8:	d201      	bcs.n	80003fe <??ZbZclClusterSetMaxAsduLength_2>
 80003fa:	2039      	movs	r0, #57	@ 0x39
 80003fc:	0003      	movs	r3, r0

080003fe <??ZbZclClusterSetMaxAsduLength_2>:
 80003fe:	8353      	strh	r3, [r2, #26]
 8000400:	2001      	movs	r0, #1

08000402 <??ZbZclClusterSetMaxAsduLength_1>:
 8000402:	bc10      	pop	{r4}
 8000404:	4770      	bx	lr

08000406 <ZbZclClusterGetMaxAsduLength>:
 8000406:	8b40      	ldrh	r0, [r0, #26]
 8000408:	4770      	bx	lr

0800040a <ZbZclClusterInitCommandReq>:
 800040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800040e:	0004      	movs	r4, r0
 8000410:	000d      	movs	r5, r1
 8000412:	2630      	movs	r6, #48	@ 0x30
 8000414:	2700      	movs	r7, #0
 8000416:	46a8      	mov	r8, r5
 8000418:	003a      	movs	r2, r7
 800041a:	0031      	movs	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f005 fb78 	bl	8005b12 <__aeabi_memset>
 8000422:	8aa0      	ldrh	r0, [r4, #20]
 8000424:	8228      	strh	r0, [r5, #16]
 8000426:	89a0      	ldrh	r0, [r4, #12]
 8000428:	8268      	strh	r0, [r5, #18]
 800042a:	7ba0      	ldrb	r0, [r4, #14]
 800042c:	82a8      	strh	r0, [r5, #20]
 800042e:	8ae0      	ldrh	r0, [r4, #22]
 8000430:	82e8      	strh	r0, [r5, #22]
 8000432:	7e20      	ldrb	r0, [r4, #24]
 8000434:	7628      	strb	r0, [r5, #24]
 8000436:	7e60      	ldrb	r0, [r4, #25]
 8000438:	7668      	strb	r0, [r5, #25]
 800043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800043e <ZbZclClusterInitApsdeReq>:
 800043e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000442:	0005      	movs	r5, r0
 8000444:	000e      	movs	r6, r1
 8000446:	0014      	movs	r4, r2
 8000448:	2730      	movs	r7, #48	@ 0x30
 800044a:	f05f 0800 	movs.w	r8, #0
 800044e:	46b1      	mov	r9, r6
 8000450:	4642      	mov	r2, r8
 8000452:	0039      	movs	r1, r7
 8000454:	4648      	mov	r0, r9
 8000456:	f005 fb5c 	bl	8005b12 <__aeabi_memset>
 800045a:	8aa8      	ldrh	r0, [r5, #20]
 800045c:	8230      	strh	r0, [r6, #16]
 800045e:	89a8      	ldrh	r0, [r5, #12]
 8000460:	8270      	strh	r0, [r6, #18]
 8000462:	7ba8      	ldrb	r0, [r5, #14]
 8000464:	82b0      	strh	r0, [r6, #20]
 8000466:	8ae8      	ldrh	r0, [r5, #22]
 8000468:	84b0      	strh	r0, [r6, #36]	@ 0x24
 800046a:	7e28      	ldrb	r0, [r5, #24]
 800046c:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8000470:	7e68      	ldrb	r0, [r5, #25]
 8000472:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8000476:	2c00      	cmp	r4, #0
 8000478:	d00b      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800047a:	8ab0      	ldrh	r0, [r6, #20]
 800047c:	28ff      	cmp	r0, #255	@ 0xff
 800047e:	d101      	bne.n	8000484 <??ZbZclClusterInitApsdeReq_1>
 8000480:	8860      	ldrh	r0, [r4, #2]
 8000482:	82b0      	strh	r0, [r6, #20]

08000484 <??ZbZclClusterInitApsdeReq_1>:
 8000484:	8c20      	ldrh	r0, [r4, #32]
 8000486:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800048a:	4288      	cmp	r0, r1
 800048c:	d001      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800048e:	8c20      	ldrh	r0, [r4, #32]
 8000490:	8230      	strh	r0, [r6, #16]

08000492 <??ZbZclClusterInitApsdeReq_0>:
 8000492:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08000498 <zcl_persist_handle_set>:
 8000498:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	0016      	movs	r6, r2
 80004a2:	f05f 0b00 	movs.w	fp, #0

080004a6 <??zcl_persist_handle_set_0>:
 80004a6:	4658      	mov	r0, fp
 80004a8:	0031      	movs	r1, r6
 80004aa:	b280      	uxth	r0, r0
 80004ac:	b289      	uxth	r1, r1
 80004ae:	4288      	cmp	r0, r1
 80004b0:	d23c      	bcs.n	800052c <??zcl_persist_handle_set_1>
 80004b2:	0030      	movs	r0, r6
 80004b4:	b280      	uxth	r0, r0
 80004b6:	4659      	mov	r1, fp
 80004b8:	b289      	uxth	r1, r1
 80004ba:	1d09      	adds	r1, r1, #4
 80004bc:	4288      	cmp	r0, r1
 80004be:	d201      	bcs.n	80004c4 <??zcl_persist_handle_set_2>
 80004c0:	2087      	movs	r0, #135	@ 0x87
 80004c2:	e034      	b.n	800052e <??zcl_persist_handle_set_3>

080004c4 <??zcl_persist_handle_set_2>:
 80004c4:	4658      	mov	r0, fp
 80004c6:	b280      	uxth	r0, r0
 80004c8:	4428      	add	r0, r5
 80004ca:	f000 fdcf 	bl	800106c <pletoh16>
 80004ce:	0007      	movs	r7, r0
 80004d0:	f11b 0b02 	adds.w	fp, fp, #2
 80004d4:	4658      	mov	r0, fp
 80004d6:	b280      	uxth	r0, r0
 80004d8:	4428      	add	r0, r5
 80004da:	f000 fdc7 	bl	800106c <pletoh16>
 80004de:	4680      	mov	r8, r0
 80004e0:	f11b 0b02 	adds.w	fp, fp, #2
 80004e4:	0030      	movs	r0, r6
 80004e6:	b280      	uxth	r0, r0
 80004e8:	4641      	mov	r1, r8
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fa11 f18b 	uxtah	r1, r1, fp
 80004f0:	4288      	cmp	r0, r1
 80004f2:	da01      	bge.n	80004f8 <??zcl_persist_handle_set_4>
 80004f4:	2087      	movs	r0, #135	@ 0x87
 80004f6:	e01a      	b.n	800052e <??zcl_persist_handle_set_3>

080004f8 <??zcl_persist_handle_set_4>:
 80004f8:	4658      	mov	r0, fp
 80004fa:	b280      	uxth	r0, r0
 80004fc:	4428      	add	r0, r5
 80004fe:	4681      	mov	r9, r0
 8000500:	eb18 0b0b 	adds.w	fp, r8, fp
 8000504:	2006      	movs	r0, #6
 8000506:	9001      	str	r0, [sp, #4]
 8000508:	4640      	mov	r0, r8
 800050a:	b280      	uxth	r0, r0
 800050c:	9000      	str	r0, [sp, #0]
 800050e:	464b      	mov	r3, r9
 8000510:	003a      	movs	r2, r7
 8000512:	b292      	uxth	r2, r2
 8000514:	2100      	movs	r1, #0
 8000516:	0020      	movs	r0, r4
 8000518:	f001 f8cd 	bl	80016b6 <ZbZclAttrWrite>
 800051c:	4682      	mov	sl, r0
 800051e:	4650      	mov	r0, sl
 8000520:	b2c0      	uxtb	r0, r0
 8000522:	2800      	cmp	r0, #0
 8000524:	d0bf      	beq.n	80004a6 <??zcl_persist_handle_set_0>
 8000526:	4650      	mov	r0, sl
 8000528:	b2c0      	uxtb	r0, r0
 800052a:	e000      	b.n	800052e <??zcl_persist_handle_set_3>

0800052c <??zcl_persist_handle_set_1>:
 800052c:	2000      	movs	r0, #0

0800052e <??zcl_persist_handle_set_3>:
 800052e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000532 <ZbZclHandleReadAttr>:
 8000532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000536:	b092      	sub	sp, #72	@ 0x48
 8000538:	0005      	movs	r5, r0
 800053a:	000e      	movs	r6, r1
 800053c:	0017      	movs	r7, r2
 800053e:	f20f 19a4 	addw	r9, pc, #420	@ 0x1a4
 8000542:	2300      	movs	r3, #0
 8000544:	464a      	mov	r2, r9
 8000546:	8b69      	ldrh	r1, [r5, #26]
 8000548:	68a8      	ldr	r0, [r5, #8]
 800054a:	f013 fffb 	bl	8014544 <zb_heap_alloc>
 800054e:	0004      	movs	r4, r0
 8000550:	2c00      	cmp	r4, #0
 8000552:	d106      	bne.n	8000562 <??ZbZclHandleReadAttr_0>
 8000554:	2389      	movs	r3, #137	@ 0x89
 8000556:	0032      	movs	r2, r6
 8000558:	0039      	movs	r1, r7
 800055a:	0028      	movs	r0, r5
 800055c:	f013 fe6a 	bl	8014234 <ZbZclSendDefaultResponse>
 8000560:	e0bd      	b.n	80006de <??ZbZclHandleReadAttr_1>

08000562 <??ZbZclHandleReadAttr_0>:
 8000562:	f05f 0808 	movs.w	r8, #8
 8000566:	f05f 0a00 	movs.w	sl, #0
 800056a:	f10d 0b0c 	add.w	fp, sp, #12
 800056e:	4652      	mov	r2, sl
 8000570:	4641      	mov	r1, r8
 8000572:	4658      	mov	r0, fp
 8000574:	f005 facd 	bl	8005b12 <__aeabi_memset>
 8000578:	2000      	movs	r0, #0
 800057a:	f88d 000c 	strb.w	r0, [sp, #12]
 800057e:	7870      	ldrb	r0, [r6, #1]
 8000580:	f88d 000d 	strb.w	r0, [sp, #13]
 8000584:	78b0      	ldrb	r0, [r6, #2]
 8000586:	2800      	cmp	r0, #0
 8000588:	d101      	bne.n	800058e <??ZbZclHandleReadAttr_2>
 800058a:	2001      	movs	r0, #1
 800058c:	e000      	b.n	8000590 <??ZbZclHandleReadAttr_3>

0800058e <??ZbZclHandleReadAttr_2>:
 800058e:	2000      	movs	r0, #0

08000590 <??ZbZclHandleReadAttr_3>:
 8000590:	f88d 000e 	strb.w	r0, [sp, #14]
 8000594:	2001      	movs	r0, #1
 8000596:	f88d 000f 	strb.w	r0, [sp, #15]
 800059a:	88b0      	ldrh	r0, [r6, #4]
 800059c:	f8ad 0010 	strh.w	r0, [sp, #16]
 80005a0:	79b0      	ldrb	r0, [r6, #6]
 80005a2:	f88d 0012 	strb.w	r0, [sp, #18]
 80005a6:	2001      	movs	r0, #1
 80005a8:	f88d 0013 	strb.w	r0, [sp, #19]
 80005ac:	8b6a      	ldrh	r2, [r5, #26]
 80005ae:	0021      	movs	r1, r4
 80005b0:	a803      	add	r0, sp, #12
 80005b2:	f000 fca5 	bl	8000f00 <ZbZclAppendHeader>
 80005b6:	4680      	mov	r8, r0
 80005b8:	f1b8 0f00 	cmp.w	r8, #0
 80005bc:	d50c      	bpl.n	80005d8 <??ZbZclHandleReadAttr_4>
 80005be:	2300      	movs	r3, #0
 80005c0:	464a      	mov	r2, r9
 80005c2:	0021      	movs	r1, r4
 80005c4:	68a8      	ldr	r0, [r5, #8]
 80005c6:	f013 ffcc 	bl	8014562 <zb_heap_free>
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	0032      	movs	r2, r6
 80005ce:	0039      	movs	r1, r7
 80005d0:	0028      	movs	r0, r5
 80005d2:	f013 fe2f 	bl	8014234 <ZbZclSendDefaultResponse>
 80005d6:	e082      	b.n	80006de <??ZbZclHandleReadAttr_1>

080005d8 <??ZbZclHandleReadAttr_4>:
 80005d8:	46c3      	mov	fp, r8

080005da <??ZbZclHandleReadAttr_5>:
 80005da:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005dc:	2802      	cmp	r0, #2
 80005de:	d353      	bcc.n	8000688 <??ZbZclHandleReadAttr_6>

080005e0 <??ZbZclHandleReadAttr_7>:
 80005e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005e2:	f000 fd43 	bl	800106c <pletoh16>
 80005e6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80005ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005ec:	1c80      	adds	r0, r0, #2
 80005ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80005f0:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005f2:	1e80      	subs	r0, r0, #2
 80005f4:	8538      	strh	r0, [r7, #40]	@ 0x28
 80005f6:	f11b 0004 	adds.w	r0, fp, #4
 80005fa:	8b69      	ldrh	r1, [r5, #26]
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d243      	bcs.n	8000688 <??ZbZclHandleReadAttr_6>

08000600 <??ZbZclHandleReadAttr_8>:
 8000600:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8000604:	eb04 000b 	add.w	r0, r4, fp
 8000608:	f000 fd7c 	bl	8001104 <putle16>
 800060c:	f11b 0b02 	adds.w	fp, fp, #2
 8000610:	2000      	movs	r0, #0
 8000612:	9001      	str	r0, [sp, #4]
 8000614:	8b68      	ldrh	r0, [r5, #26]
 8000616:	ebb0 000b 	subs.w	r0, r0, fp
 800061a:	1e80      	subs	r0, r0, #2
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	eb04 000b 	add.w	r0, r4, fp
 8000622:	1c83      	adds	r3, r0, #2
 8000624:	aa02      	add	r2, sp, #8
 8000626:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800062a:	0028      	movs	r0, r5
 800062c:	f000 fef1 	bl	8001412 <ZbZclAttrRead>
 8000630:	4682      	mov	sl, r0
 8000632:	f804 a00b 	strb.w	sl, [r4, fp]
 8000636:	f11b 0b01 	adds.w	fp, fp, #1
 800063a:	4650      	mov	r0, sl
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	2889      	cmp	r0, #137	@ 0x89
 8000640:	d022      	beq.n	8000688 <??ZbZclHandleReadAttr_6>

08000642 <??ZbZclHandleReadAttr_9>:
 8000642:	4650      	mov	r0, sl
 8000644:	b2c0      	uxtb	r0, r0
 8000646:	2800      	cmp	r0, #0
 8000648:	d1c7      	bne.n	80005da <??ZbZclHandleReadAttr_5>

0800064a <??ZbZclHandleReadAttr_10>:
 800064a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800064e:	f804 000b 	strb.w	r0, [r4, fp]
 8000652:	f11b 0b01 	adds.w	fp, fp, #1
 8000656:	2300      	movs	r3, #0
 8000658:	8b6a      	ldrh	r2, [r5, #26]
 800065a:	ebb2 020b 	subs.w	r2, r2, fp
 800065e:	eb04 010b 	add.w	r1, r4, fp
 8000662:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000666:	f001 fcfc 	bl	8002062 <ZbZclAttrParseLength>
 800066a:	4680      	mov	r8, r0
 800066c:	f1b8 0f00 	cmp.w	r8, #0
 8000670:	d507      	bpl.n	8000682 <??ZbZclHandleReadAttr_11>
 8000672:	f1bb 0b01 	subs.w	fp, fp, #1
 8000676:	2087      	movs	r0, #135	@ 0x87
 8000678:	eb04 010b 	add.w	r1, r4, fp
 800067c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8000680:	e7ab      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000682 <??ZbZclHandleReadAttr_11>:
 8000682:	eb18 0b0b 	adds.w	fp, r8, fp
 8000686:	e7a8      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000688 <??ZbZclHandleReadAttr_6>:
 8000688:	003a      	movs	r2, r7
 800068a:	a906      	add	r1, sp, #24
 800068c:	0028      	movs	r0, r5
 800068e:	f7ff fed6 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000692:	a806      	add	r0, sp, #24
 8000694:	f117 0110 	adds.w	r1, r7, #16
 8000698:	2210      	movs	r2, #16
 800069a:	f016 fcfc 	bl	8017096 <__aeabi_memcpy>
 800069e:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 80006a2:	f7ff fe64 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80006a6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80006aa:	7da8      	ldrb	r0, [r5, #22]
 80006ac:	0700      	lsls	r0, r0, #28
 80006ae:	d406      	bmi.n	80006be <??ZbZclHandleReadAttr_12>
 80006b0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80006b4:	f64f 70f7 	movw	r0, #65527	@ 0xfff7
 80006b8:	4001      	ands	r1, r0
 80006ba:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c

080006be <??ZbZclHandleReadAttr_12>:
 80006be:	940c      	str	r4, [sp, #48]	@ 0x30
 80006c0:	4658      	mov	r0, fp
 80006c2:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	a906      	add	r1, sp, #24
 80006cc:	68a8      	ldr	r0, [r5, #8]
 80006ce:	f013 f8b7 	bl	8013840 <ZbApsdeDataReqCallback>
 80006d2:	2300      	movs	r3, #0
 80006d4:	464a      	mov	r2, r9
 80006d6:	0021      	movs	r1, r4
 80006d8:	68a8      	ldr	r0, [r5, #8]
 80006da:	f013 ff42 	bl	8014562 <zb_heap_free>

080006de <??ZbZclHandleReadAttr_1>:
 80006de:	b013      	add	sp, #76	@ 0x4c
 80006e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006e4 <??DataTable1>:
 80006e4:	0000 0000                                   ....

080006e8 <ZbZclHandleWriteAttr>:
 80006e8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ec:	b0a3      	sub	sp, #140	@ 0x8c
 80006ee:	0016      	movs	r6, r2
 80006f0:	2701      	movs	r7, #1
 80006f2:	2500      	movs	r5, #0
 80006f4:	2400      	movs	r4, #0
 80006f6:	f05f 0800 	movs.w	r8, #0
 80006fa:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80006fc:	79c0      	ldrb	r0, [r0, #7]
 80006fe:	f88d 000a 	strb.w	r0, [sp, #10]
 8000702:	f05f 0900 	movs.w	r9, #0
 8000706:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800070a:	2802      	cmp	r0, #2
 800070c:	d007      	beq.n	800071e <??ZbZclHandleWriteAttr_0>
 800070e:	2803      	cmp	r0, #3
 8000710:	d003      	beq.n	800071a <??ZbZclHandleWriteAttr_1>
 8000712:	2805      	cmp	r0, #5
 8000714:	f000 80c3 	beq.w	800089e <??ZbZclHandleWriteAttr_2>
 8000718:	e116      	b.n	8000948 <??ZbZclHandleWriteAttr_3>

0800071a <??ZbZclHandleWriteAttr_1>:
 800071a:	f059 0901 	orrs.w	r9, r9, #1

0800071e <??ZbZclHandleWriteAttr_0>:
 800071e:	2008      	movs	r0, #8
 8000720:	9001      	str	r0, [sp, #4]
 8000722:	2000      	movs	r0, #0
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	f10d 0b14 	add.w	fp, sp, #20
 800072a:	9a00      	ldr	r2, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	4658      	mov	r0, fp
 8000730:	f005 f9ef 	bl	8005b12 <__aeabi_memset>
 8000734:	2000      	movs	r0, #0
 8000736:	f88d 0014 	strb.w	r0, [sp, #20]
 800073a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800073c:	7840      	ldrb	r0, [r0, #1]
 800073e:	f88d 0015 	strb.w	r0, [sp, #21]
 8000742:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000744:	7880      	ldrb	r0, [r0, #2]
 8000746:	2800      	cmp	r0, #0
 8000748:	d101      	bne.n	800074e <??ZbZclHandleWriteAttr_4>
 800074a:	2001      	movs	r0, #1
 800074c:	e000      	b.n	8000750 <??ZbZclHandleWriteAttr_5>

0800074e <??ZbZclHandleWriteAttr_4>:
 800074e:	2000      	movs	r0, #0

08000750 <??ZbZclHandleWriteAttr_5>:
 8000750:	f88d 0016 	strb.w	r0, [sp, #22]
 8000754:	2001      	movs	r0, #1
 8000756:	f88d 0017 	strb.w	r0, [sp, #23]
 800075a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800075c:	8880      	ldrh	r0, [r0, #4]
 800075e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8000762:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000764:	7980      	ldrb	r0, [r0, #6]
 8000766:	f88d 001a 	strb.w	r0, [sp, #26]
 800076a:	2004      	movs	r0, #4
 800076c:	f88d 001b 	strb.w	r0, [sp, #27]
 8000770:	2239      	movs	r2, #57	@ 0x39
 8000772:	a907      	add	r1, sp, #28
 8000774:	a805      	add	r0, sp, #20
 8000776:	f000 fbc3 	bl	8000f00 <ZbZclAppendHeader>
 800077a:	0005      	movs	r5, r0
 800077c:	2d00      	cmp	r5, #0
 800077e:	d502      	bpl.n	8000786 <??ZbZclHandleWriteAttr_6>
 8000780:	2080      	movs	r0, #128	@ 0x80
 8000782:	4680      	mov	r8, r0
 8000784:	e0e2      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000786 <??ZbZclHandleWriteAttr_6>:
 8000786:	0032      	movs	r2, r6
 8000788:	a916      	add	r1, sp, #88	@ 0x58
 800078a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800078c:	f7ff fe57 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000790:	a816      	add	r0, sp, #88	@ 0x58
 8000792:	f116 0110 	adds.w	r1, r6, #16
 8000796:	2210      	movs	r2, #16
 8000798:	f016 fc7d 	bl	8017096 <__aeabi_memcpy>
 800079c:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 80007a0:	f7ff fde5 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80007a4:	f8ad 007c 	strh.w	r0, [sp, #124]	@ 0x7c
 80007a8:	2000      	movs	r0, #0
 80007aa:	4682      	mov	sl, r0
 80007ac:	2080      	movs	r0, #128	@ 0x80
 80007ae:	0007      	movs	r7, r0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007b6:	2000      	movs	r0, #0
 80007b8:	0004      	movs	r4, r0

080007ba <??ZbZclHandleWriteAttr_8>:
 80007ba:	f11a 0003 	adds.w	r0, sl, #3
 80007be:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80007c0:	4288      	cmp	r0, r1
 80007c2:	d302      	bcc.n	80007ca <??ZbZclHandleWriteAttr_9>
 80007c4:	2080      	movs	r0, #128	@ 0x80
 80007c6:	0007      	movs	r7, r0
 80007c8:	e05c      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007ca <??ZbZclHandleWriteAttr_9>:
 80007ca:	1ce8      	adds	r0, r5, #3
 80007cc:	283a      	cmp	r0, #58	@ 0x3a
 80007ce:	d305      	bcc.n	80007dc <??ZbZclHandleWriteAttr_11>
 80007d0:	2001      	movs	r0, #1
 80007d2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007d6:	2089      	movs	r0, #137	@ 0x89
 80007d8:	0007      	movs	r7, r0
 80007da:	e053      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007dc <??ZbZclHandleWriteAttr_11>:
 80007dc:	2000      	movs	r0, #0
 80007de:	f88d 0008 	strb.w	r0, [sp, #8]
 80007e2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80007e4:	4450      	add	r0, sl
 80007e6:	f000 fc41 	bl	800106c <pletoh16>
 80007ea:	f8ad 000c 	strh.w	r0, [sp, #12]
 80007ee:	f11a 0a02 	adds.w	sl, sl, #2
 80007f2:	4650      	mov	r0, sl
 80007f4:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80007f6:	5c09      	ldrb	r1, [r1, r0]
 80007f8:	f88d 1009 	strb.w	r1, [sp, #9]
 80007fc:	4682      	mov	sl, r0
 80007fe:	f11a 0a01 	adds.w	sl, sl, #1
 8000802:	2300      	movs	r3, #0
 8000804:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8000806:	ebb2 020a 	subs.w	r2, r2, sl
 800080a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800080c:	eb00 010a 	add.w	r1, r0, sl
 8000810:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000814:	f001 fc25 	bl	8002062 <ZbZclAttrParseLength>
 8000818:	9004      	str	r0, [sp, #16]
 800081a:	9804      	ldr	r0, [sp, #16]
 800081c:	2800      	cmp	r0, #0
 800081e:	d50c      	bpl.n	800083a <??ZbZclHandleWriteAttr_12>
 8000820:	1c64      	adds	r4, r4, #1
 8000822:	2087      	movs	r0, #135	@ 0x87
 8000824:	a907      	add	r1, sp, #28
 8000826:	5548      	strb	r0, [r1, r5]
 8000828:	1c6d      	adds	r5, r5, #1
 800082a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800082e:	a807      	add	r0, sp, #28
 8000830:	4428      	add	r0, r5
 8000832:	f000 fc67 	bl	8001104 <putle16>
 8000836:	1cad      	adds	r5, r5, #2
 8000838:	e024      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

0800083a <??ZbZclHandleWriteAttr_12>:
 800083a:	4648      	mov	r0, r9
 800083c:	b280      	uxth	r0, r0
 800083e:	9001      	str	r0, [sp, #4]
 8000840:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000842:	ebb0 000a 	subs.w	r0, r0, sl
 8000846:	9000      	str	r0, [sp, #0]
 8000848:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800084a:	eb00 030a 	add.w	r3, r0, sl
 800084e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000852:	f116 0110 	adds.w	r1, r6, #16
 8000856:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000858:	f000 ff2d 	bl	80016b6 <ZbZclAttrWrite>
 800085c:	0007      	movs	r7, r0
 800085e:	9804      	ldr	r0, [sp, #16]
 8000860:	eb10 0a0a 	adds.w	sl, r0, sl
 8000864:	0038      	movs	r0, r7
 8000866:	b2c0      	uxtb	r0, r0
 8000868:	2800      	cmp	r0, #0
 800086a:	d0a6      	beq.n	80007ba <??ZbZclHandleWriteAttr_8>
 800086c:	1c64      	adds	r4, r4, #1
 800086e:	a807      	add	r0, sp, #28
 8000870:	5547      	strb	r7, [r0, r5]
 8000872:	1c6d      	adds	r5, r5, #1
 8000874:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000878:	a807      	add	r0, sp, #28
 800087a:	4428      	add	r0, r5
 800087c:	f000 fc42 	bl	8001104 <putle16>
 8000880:	1cad      	adds	r5, r5, #2
 8000882:	e79a      	b.n	80007ba <??ZbZclHandleWriteAttr_8>

08000884 <??ZbZclHandleWriteAttr_10>:
 8000884:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000888:	2800      	cmp	r0, #0
 800088a:	d001      	beq.n	8000890 <??ZbZclHandleWriteAttr_13>
 800088c:	46b8      	mov	r8, r7
 800088e:	e05d      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000890 <??ZbZclHandleWriteAttr_13>:
 8000890:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000894:	2802      	cmp	r0, #2
 8000896:	d001      	beq.n	800089c <??ZbZclHandleWriteAttr_14>
 8000898:	2c00      	cmp	r4, #0
 800089a:	d000      	beq.n	800089e <??ZbZclHandleWriteAttr_2>

0800089c <??ZbZclHandleWriteAttr_14>:
 800089c:	e056      	b.n	800094c <??ZbZclHandleWriteAttr_7>

0800089e <??ZbZclHandleWriteAttr_2>:
 800089e:	2000      	movs	r0, #0
 80008a0:	4682      	mov	sl, r0
 80008a2:	f05f 0b00 	movs.w	fp, #0

080008a6 <??ZbZclHandleWriteAttr_15>:
 80008a6:	f11a 0003 	adds.w	r0, sl, #3
 80008aa:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80008ac:	4288      	cmp	r0, r1
 80008ae:	d302      	bcc.n	80008b6 <??ZbZclHandleWriteAttr_16>
 80008b0:	465c      	mov	r4, fp
 80008b2:	1c64      	adds	r4, r4, #1
 80008b4:	e03b      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008b6 <??ZbZclHandleWriteAttr_16>:
 80008b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008b8:	4450      	add	r0, sl
 80008ba:	f000 fbd7 	bl	800106c <pletoh16>
 80008be:	f8ad 000c 	strh.w	r0, [sp, #12]
 80008c2:	f11a 0a02 	adds.w	sl, sl, #2
 80008c6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008c8:	f810 000a 	ldrb.w	r0, [r0, sl]
 80008cc:	f88d 0009 	strb.w	r0, [sp, #9]
 80008d0:	f11a 0a01 	adds.w	sl, sl, #1
 80008d4:	2300      	movs	r3, #0
 80008d6:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 80008d8:	ebb2 020a 	subs.w	r2, r2, sl
 80008dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008de:	eb00 010a 	add.w	r1, r0, sl
 80008e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80008e6:	f001 fbbc 	bl	8002062 <ZbZclAttrParseLength>
 80008ea:	9004      	str	r0, [sp, #16]
 80008ec:	9804      	ldr	r0, [sp, #16]
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d502      	bpl.n	80008f8 <??ZbZclHandleWriteAttr_18>
 80008f2:	465c      	mov	r4, fp
 80008f4:	1c64      	adds	r4, r4, #1
 80008f6:	e01a      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008f8 <??ZbZclHandleWriteAttr_18>:
 80008f8:	2000      	movs	r0, #0
 80008fa:	9001      	str	r0, [sp, #4]
 80008fc:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80008fe:	ebb0 000a 	subs.w	r0, r0, sl
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8000906:	eb00 030a 	add.w	r3, r0, sl
 800090a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800090e:	f116 0110 	adds.w	r1, r6, #16
 8000912:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000914:	f000 fecf 	bl	80016b6 <ZbZclAttrWrite>
 8000918:	0007      	movs	r7, r0
 800091a:	0038      	movs	r0, r7
 800091c:	b2c0      	uxtb	r0, r0
 800091e:	2800      	cmp	r0, #0
 8000920:	d001      	beq.n	8000926 <??ZbZclHandleWriteAttr_19>
 8000922:	f11b 0b01 	adds.w	fp, fp, #1

08000926 <??ZbZclHandleWriteAttr_19>:
 8000926:	9804      	ldr	r0, [sp, #16]
 8000928:	eb10 0a0a 	adds.w	sl, r0, sl
 800092c:	e7bb      	b.n	80008a6 <??ZbZclHandleWriteAttr_15>

0800092e <??ZbZclHandleWriteAttr_17>:
 800092e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000932:	2803      	cmp	r0, #3
 8000934:	d105      	bne.n	8000942 <??ZbZclHandleWriteAttr_20>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d002      	beq.n	8000940 <??ZbZclHandleWriteAttr_21>
 800093a:	2001      	movs	r0, #1
 800093c:	4680      	mov	r8, r0
 800093e:	e005      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000940 <??ZbZclHandleWriteAttr_21>:
 8000940:	e004      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000942 <??ZbZclHandleWriteAttr_20>:
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	4680      	mov	r8, r0
 8000946:	e001      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000948 <??ZbZclHandleWriteAttr_3>:
 8000948:	2081      	movs	r0, #129	@ 0x81
 800094a:	4680      	mov	r8, r0

0800094c <??ZbZclHandleWriteAttr_7>:
 800094c:	4640      	mov	r0, r8
 800094e:	b2c0      	uxtb	r0, r0
 8000950:	2800      	cmp	r0, #0
 8000952:	d00b      	beq.n	800096c <??ZbZclHandleWriteAttr_22>
 8000954:	4640      	mov	r0, r8
 8000956:	b2c0      	uxtb	r0, r0
 8000958:	28ff      	cmp	r0, #255	@ 0xff
 800095a:	d006      	beq.n	800096a <??ZbZclHandleWriteAttr_23>
 800095c:	4643      	mov	r3, r8
 800095e:	b2db      	uxtb	r3, r3
 8000960:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000962:	0031      	movs	r1, r6
 8000964:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000966:	f013 fc65 	bl	8014234 <ZbZclSendDefaultResponse>

0800096a <??ZbZclHandleWriteAttr_23>:
 800096a:	e01a      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

0800096c <??ZbZclHandleWriteAttr_22>:
 800096c:	2c00      	cmp	r4, #0
 800096e:	d10c      	bne.n	800098a <??ZbZclHandleWriteAttr_25>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d106      	bne.n	8000982 <??ZbZclHandleWriteAttr_26>
 8000974:	2301      	movs	r3, #1
 8000976:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000978:	0031      	movs	r1, r6
 800097a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800097c:	f013 fc5a 	bl	8014234 <ZbZclSendDefaultResponse>
 8000980:	e00f      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

08000982 <??ZbZclHandleWriteAttr_26>:
 8000982:	2000      	movs	r0, #0
 8000984:	a907      	add	r1, sp, #28
 8000986:	5548      	strb	r0, [r1, r5]
 8000988:	1c6d      	adds	r5, r5, #1

0800098a <??ZbZclHandleWriteAttr_25>:
 800098a:	a807      	add	r0, sp, #28
 800098c:	901c      	str	r0, [sp, #112]	@ 0x70
 800098e:	0028      	movs	r0, r5
 8000990:	f8ad 0074 	strh.w	r0, [sp, #116]	@ 0x74
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	a916      	add	r1, sp, #88	@ 0x58
 800099a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800099c:	6880      	ldr	r0, [r0, #8]
 800099e:	f012 ff4f 	bl	8013840 <ZbApsdeDataReqCallback>

080009a2 <??ZbZclHandleWriteAttr_24>:
 80009a2:	b025      	add	sp, #148	@ 0x94
 80009a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009a8 <zcl_handle_command>:
 80009a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009ac:	0004      	movs	r4, r0
 80009ae:	000d      	movs	r5, r1
 80009b0:	0016      	movs	r6, r2
 80009b2:	79f7      	ldrb	r7, [r6, #7]
 80009b4:	8868      	ldrh	r0, [r5, #2]
 80009b6:	28ff      	cmp	r0, #255	@ 0xff
 80009b8:	d102      	bne.n	80009c0 <??zcl_handle_command_0>
 80009ba:	f05f 0800 	movs.w	r8, #0
 80009be:	e001      	b.n	80009c4 <??zcl_handle_command_1>

080009c0 <??zcl_handle_command_0>:
 80009c0:	f05f 0801 	movs.w	r8, #1

080009c4 <??zcl_handle_command_1>:
 80009c4:	f115 0110 	adds.w	r1, r5, #16
 80009c8:	68a0      	ldr	r0, [r4, #8]
 80009ca:	f012 ffd6 	bl	801397a <ZbApsAddrIsLocal>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d121      	bne.n	8000a16 <??zcl_handle_command_2>

080009d2 <??zcl_handle_command_3>:
 80009d2:	89a0      	ldrh	r0, [r4, #12]
 80009d4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80009d8:	d01d      	beq.n	8000a16 <??zcl_handle_command_2>

080009da <??zcl_handle_command_4>:
 80009da:	0032      	movs	r2, r6
 80009dc:	0029      	movs	r1, r5
 80009de:	0020      	movs	r0, r4
 80009e0:	f7ff fc38 	bl	8000254 <ZbZclClusterCheckMinSecurity>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d107      	bne.n	80009f8 <??zcl_handle_command_5>
 80009e8:	2301      	movs	r3, #1
 80009ea:	0032      	movs	r2, r6
 80009ec:	0029      	movs	r1, r5
 80009ee:	0020      	movs	r0, r4
 80009f0:	f013 fc20 	bl	8014234 <ZbZclSendDefaultResponse>
 80009f4:	4640      	mov	r0, r8
 80009f6:	e0f7      	b.n	8000be8 <??zcl_handle_command_6>

080009f8 <??zcl_handle_command_5>:
 80009f8:	0032      	movs	r2, r6
 80009fa:	0029      	movs	r1, r5
 80009fc:	68a0      	ldr	r0, [r4, #8]
 80009fe:	f013 fb2c 	bl	801405a <ZbZclDeviceLogCheckAllow>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d107      	bne.n	8000a16 <??zcl_handle_command_2>
 8000a06:	2301      	movs	r3, #1
 8000a08:	0032      	movs	r2, r6
 8000a0a:	0029      	movs	r1, r5
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f013 fc11 	bl	8014234 <ZbZclSendDefaultResponse>
 8000a12:	4640      	mov	r0, r8
 8000a14:	e0e8      	b.n	8000be8 <??zcl_handle_command_6>

08000a16 <??zcl_handle_command_2>:
 8000a16:	7830      	ldrb	r0, [r6, #0]
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d13a      	bne.n	8000a92 <??zcl_handle_command_8>
 8000a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d107      	bne.n	8000a32 <??zcl_handle_command_9>
 8000a22:	2381      	movs	r3, #129	@ 0x81
 8000a24:	0032      	movs	r2, r6
 8000a26:	0029      	movs	r1, r5
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f013 fc03 	bl	8014234 <ZbZclSendDefaultResponse>
 8000a2e:	4640      	mov	r0, r8
 8000a30:	e0da      	b.n	8000be8 <??zcl_handle_command_6>

08000a32 <??zcl_handle_command_9>:
 8000a32:	7870      	ldrb	r0, [r6, #1]
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d00e      	beq.n	8000a56 <??zcl_handle_command_10>
 8000a38:	8a20      	ldrh	r0, [r4, #16]
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d003      	beq.n	8000a46 <??zcl_handle_command_11>
 8000a3e:	8a20      	ldrh	r0, [r4, #16]
 8000a40:	88b1      	ldrh	r1, [r6, #4]
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d012      	beq.n	8000a6c <??zcl_handle_command_12>

08000a46 <??zcl_handle_command_11>:
 8000a46:	2381      	movs	r3, #129	@ 0x81
 8000a48:	0032      	movs	r2, r6
 8000a4a:	0029      	movs	r1, r5
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	f013 fbf1 	bl	8014234 <ZbZclSendDefaultResponse>
 8000a52:	4640      	mov	r0, r8
 8000a54:	e0c8      	b.n	8000be8 <??zcl_handle_command_6>

08000a56 <??zcl_handle_command_10>:
 8000a56:	8a20      	ldrh	r0, [r4, #16]
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d007      	beq.n	8000a6c <??zcl_handle_command_12>
 8000a5c:	2381      	movs	r3, #129	@ 0x81
 8000a5e:	0032      	movs	r2, r6
 8000a60:	0029      	movs	r1, r5
 8000a62:	0020      	movs	r0, r4
 8000a64:	f013 fbe6 	bl	8014234 <ZbZclSendDefaultResponse>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	e0bd      	b.n	8000be8 <??zcl_handle_command_6>

08000a6c <??zcl_handle_command_12>:
 8000a6c:	002a      	movs	r2, r5
 8000a6e:	0031      	movs	r1, r6
 8000a70:	0020      	movs	r0, r4
 8000a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000a74:	4798      	blx	r3
 8000a76:	4681      	mov	r9, r0
 8000a78:	4648      	mov	r0, r9
 8000a7a:	b2c0      	uxtb	r0, r0
 8000a7c:	28ff      	cmp	r0, #255	@ 0xff
 8000a7e:	d006      	beq.n	8000a8e <??zcl_handle_command_13>
 8000a80:	464b      	mov	r3, r9
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	0032      	movs	r2, r6
 8000a86:	0029      	movs	r1, r5
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f013 fbd3 	bl	8014234 <ZbZclSendDefaultResponse>

08000a8e <??zcl_handle_command_13>:
 8000a8e:	4640      	mov	r0, r8
 8000a90:	e0aa      	b.n	8000be8 <??zcl_handle_command_6>

08000a92 <??zcl_handle_command_8>:
 8000a92:	7830      	ldrb	r0, [r6, #0]
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d007      	beq.n	8000aa8 <??zcl_handle_command_14>
 8000a98:	2385      	movs	r3, #133	@ 0x85
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	0029      	movs	r1, r5
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f013 fbc8 	bl	8014234 <ZbZclSendDefaultResponse>
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	e09f      	b.n	8000be8 <??zcl_handle_command_6>

08000aa8 <??zcl_handle_command_14>:
 8000aa8:	0038      	movs	r0, r7
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d01c      	beq.n	8000aea <??zcl_handle_command_15>
 8000ab0:	2801      	cmp	r0, #1
 8000ab2:	d03f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d01e      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d01c      	beq.n	8000af6 <??zcl_handle_command_17>
 8000abc:	2804      	cmp	r0, #4
 8000abe:	d039      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ac0:	2805      	cmp	r0, #5
 8000ac2:	d018      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ac4:	2806      	cmp	r0, #6
 8000ac6:	d01c      	beq.n	8000b02 <??zcl_handle_command_18>
 8000ac8:	2807      	cmp	r0, #7
 8000aca:	d033      	beq.n	8000b34 <??zcl_handle_command_16>
 8000acc:	2808      	cmp	r0, #8
 8000ace:	d01e      	beq.n	8000b0e <??zcl_handle_command_19>
 8000ad0:	2809      	cmp	r0, #9
 8000ad2:	d02f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ad4:	280a      	cmp	r0, #10
 8000ad6:	d020      	beq.n	8000b1a <??zcl_handle_command_20>
 8000ad8:	280b      	cmp	r0, #11
 8000ada:	d02a      	beq.n	8000b32 <??zcl_handle_command_21>
 8000adc:	280c      	cmp	r0, #12
 8000ade:	d022      	beq.n	8000b26 <??zcl_handle_command_22>
 8000ae0:	280d      	cmp	r0, #13
 8000ae2:	d027      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae4:	2810      	cmp	r0, #16
 8000ae6:	d025      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae8:	e025      	b.n	8000b36 <??zcl_handle_command_23>

08000aea <??zcl_handle_command_15>:
 8000aea:	002a      	movs	r2, r5
 8000aec:	0031      	movs	r1, r6
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fd1f 	bl	8000532 <ZbZclHandleReadAttr>
 8000af4:	e077      	b.n	8000be6 <??zcl_handle_command_24>

08000af6 <??zcl_handle_command_17>:
 8000af6:	002a      	movs	r2, r5
 8000af8:	0031      	movs	r1, r6
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff fdf4 	bl	80006e8 <ZbZclHandleWriteAttr>
 8000b00:	e071      	b.n	8000be6 <??zcl_handle_command_24>

08000b02 <??zcl_handle_command_18>:
 8000b02:	002a      	movs	r2, r5
 8000b04:	0031      	movs	r1, r6
 8000b06:	0020      	movs	r0, r4
 8000b08:	f003 f94d 	bl	8003da6 <ZbZclHandleConfigReport>
 8000b0c:	e06b      	b.n	8000be6 <??zcl_handle_command_24>

08000b0e <??zcl_handle_command_19>:
 8000b0e:	002a      	movs	r2, r5
 8000b10:	0031      	movs	r1, r6
 8000b12:	0020      	movs	r0, r4
 8000b14:	f003 fbcb 	bl	80042ae <ZbZclHandleReadReport>
 8000b18:	e065      	b.n	8000be6 <??zcl_handle_command_24>

08000b1a <??zcl_handle_command_20>:
 8000b1a:	002a      	movs	r2, r5
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f003 fcea 	bl	80044f8 <ZbZclHandleReportAttr>
 8000b24:	e05f      	b.n	8000be6 <??zcl_handle_command_24>

08000b26 <??zcl_handle_command_22>:
 8000b26:	002a      	movs	r2, r5
 8000b28:	0031      	movs	r1, r6
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 fb8f 	bl	800124e <ZbZclAttrHandleDiscover>
 8000b30:	e059      	b.n	8000be6 <??zcl_handle_command_24>

08000b32 <??zcl_handle_command_21>:
 8000b32:	e058      	b.n	8000be6 <??zcl_handle_command_24>

08000b34 <??zcl_handle_command_16>:
 8000b34:	e057      	b.n	8000be6 <??zcl_handle_command_24>

08000b36 <??zcl_handle_command_23>:
 8000b36:	7870      	ldrb	r0, [r6, #1]
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d04e      	beq.n	8000bda <??zcl_handle_command_25>
 8000b3c:	88b0      	ldrh	r0, [r6, #4]
 8000b3e:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d141      	bne.n	8000bca <??zcl_handle_command_26>
 8000b46:	f115 0110 	adds.w	r1, r5, #16
 8000b4a:	68a0      	ldr	r0, [r4, #8]
 8000b4c:	f012 ff15 	bl	801397a <ZbApsAddrIsLocal>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d107      	bne.n	8000b64 <??zcl_handle_command_27>
 8000b54:	2381      	movs	r3, #129	@ 0x81
 8000b56:	0032      	movs	r2, r6
 8000b58:	0029      	movs	r1, r5
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f013 fb6a 	bl	8014234 <ZbZclSendDefaultResponse>
 8000b60:	4640      	mov	r0, r8
 8000b62:	e041      	b.n	8000be8 <??zcl_handle_command_6>

08000b64 <??zcl_handle_command_27>:
 8000b64:	0038      	movs	r0, r7
 8000b66:	b2c0      	uxtb	r0, r0
 8000b68:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6a:	d108      	bne.n	8000b7e <??zcl_handle_command_28>
 8000b6c:	78b0      	ldrb	r0, [r6, #2]
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d131      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b72:	002a      	movs	r2, r5
 8000b74:	0031      	movs	r1, r6
 8000b76:	0020      	movs	r0, r4
 8000b78:	f004 fa37 	bl	8004fea <ZbZclHandleGetSceneData>
 8000b7c:	e02b      	b.n	8000bd6 <??zcl_handle_command_29>

08000b7e <??zcl_handle_command_28>:
 8000b7e:	0038      	movs	r0, r7
 8000b80:	b2c0      	uxtb	r0, r0
 8000b82:	28f1      	cmp	r0, #241	@ 0xf1
 8000b84:	d108      	bne.n	8000b98 <??zcl_handle_command_30>
 8000b86:	78b0      	ldrb	r0, [r6, #2]
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d124      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b8c:	002a      	movs	r2, r5
 8000b8e:	0031      	movs	r1, r6
 8000b90:	0020      	movs	r0, r4
 8000b92:	f004 faa9 	bl	80050e8 <ZbZclHandleSetSceneData>
 8000b96:	e01e      	b.n	8000bd6 <??zcl_handle_command_29>

08000b98 <??zcl_handle_command_30>:
 8000b98:	0038      	movs	r0, r7
 8000b9a:	b2c0      	uxtb	r0, r0
 8000b9c:	28f2      	cmp	r0, #242	@ 0xf2
 8000b9e:	d10d      	bne.n	8000bbc <??zcl_handle_command_31>
 8000ba0:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8000ba2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8000ba4:	0020      	movs	r0, r4
 8000ba6:	f7ff fc77 	bl	8000498 <zcl_persist_handle_set>
 8000baa:	4681      	mov	r9, r0
 8000bac:	464b      	mov	r3, r9
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	0032      	movs	r2, r6
 8000bb2:	0029      	movs	r1, r5
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f013 fb3d 	bl	8014234 <ZbZclSendDefaultResponse>
 8000bba:	e00c      	b.n	8000bd6 <??zcl_handle_command_29>

08000bbc <??zcl_handle_command_31>:
 8000bbc:	2381      	movs	r3, #129	@ 0x81
 8000bbe:	0032      	movs	r2, r6
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f013 fb36 	bl	8014234 <ZbZclSendDefaultResponse>
 8000bc8:	e005      	b.n	8000bd6 <??zcl_handle_command_29>

08000bca <??zcl_handle_command_26>:
 8000bca:	2381      	movs	r3, #129	@ 0x81
 8000bcc:	0032      	movs	r2, r6
 8000bce:	0029      	movs	r1, r5
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	f013 fb2f 	bl	8014234 <ZbZclSendDefaultResponse>

08000bd6 <??zcl_handle_command_29>:
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	e006      	b.n	8000be8 <??zcl_handle_command_6>

08000bda <??zcl_handle_command_25>:
 8000bda:	2381      	movs	r3, #129	@ 0x81
 8000bdc:	0032      	movs	r2, r6
 8000bde:	0029      	movs	r1, r5
 8000be0:	0020      	movs	r0, r4
 8000be2:	f013 fb27 	bl	8014234 <ZbZclSendDefaultResponse>

08000be6 <??zcl_handle_command_24>:
 8000be6:	4640      	mov	r0, r8

08000be8 <??zcl_handle_command_6>:
 8000be8:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000bec <zcl_cluster_data_ind>:
 8000bec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000bee:	0004      	movs	r4, r0
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	002e      	movs	r6, r5
 8000bf4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000bf6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f000 f8fe 	bl	8000dfa <ZbZclParseHeader>
 8000bfe:	0007      	movs	r7, r0
 8000c00:	2f00      	cmp	r7, #0
 8000c02:	d501      	bpl.n	8000c08 <??zcl_cluster_data_ind_0>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e00a      	b.n	8000c1e <??zcl_cluster_data_ind_1>

08000c08 <??zcl_cluster_data_ind_0>:
 8000c08:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c0a:	4438      	add	r0, r7
 8000c0c:	6260      	str	r0, [r4, #36]	@ 0x24
 8000c0e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c14:	466a      	mov	r2, sp
 8000c16:	0021      	movs	r1, r4
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f7ff fec5 	bl	80009a8 <zcl_handle_command>

08000c1e <??zcl_cluster_data_ind_1>:
 8000c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000c20 <zcl_cluster_alarm_data_ind>:
 8000c20:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	b098      	sub	sp, #96	@ 0x60
 8000c26:	0004      	movs	r4, r0
 8000c28:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8000c2a:	26ff      	movs	r6, #255	@ 0xff
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000c30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000c32:	a802      	add	r0, sp, #8
 8000c34:	f000 f8e1 	bl	8000dfa <ZbZclParseHeader>
 8000c38:	4680      	mov	r8, r0
 8000c3a:	f1b8 0f00 	cmp.w	r8, #0
 8000c3e:	d501      	bpl.n	8000c44 <??zcl_cluster_alarm_data_ind_0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e0d7      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c44 <??zcl_cluster_alarm_data_ind_0>:
 8000c44:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c46:	ebb0 0008 	subs.w	r0, r0, r8
 8000c4a:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c4c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000c4e:	2809      	cmp	r0, #9
 8000c50:	d001      	beq.n	8000c56 <??zcl_cluster_alarm_data_ind_2>
 8000c52:	2000      	movs	r0, #0
 8000c54:	e0ce      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c56 <??zcl_cluster_alarm_data_ind_2>:
 8000c56:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d001      	beq.n	8000c62 <??zcl_cluster_alarm_data_ind_3>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e0c8      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c62 <??zcl_cluster_alarm_data_ind_3>:
 8000c62:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c66:	2801      	cmp	r0, #1
 8000c68:	d001      	beq.n	8000c6e <??zcl_cluster_alarm_data_ind_4>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e0c2      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c6e <??zcl_cluster_alarm_data_ind_4>:
 8000c6e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d002      	beq.n	8000c7c <??zcl_cluster_alarm_data_ind_5>
 8000c76:	2801      	cmp	r0, #1
 8000c78:	d02a      	beq.n	8000cd0 <??zcl_cluster_alarm_data_ind_6>
 8000c7a:	e03f      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000c7c <??zcl_cluster_alarm_data_ind_5>:
 8000c7c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c7e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8000c82:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c86:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c88:	4440      	add	r0, r8
 8000c8a:	1c40      	adds	r0, r0, #1
 8000c8c:	f000 f9ee 	bl	800106c <pletoh16>
 8000c90:	f8ad 0006 	strh.w	r0, [sp, #6]
 8000c94:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8000c98:	0028      	movs	r0, r5
 8000c9a:	f7ff fa77 	bl	800018c <ZbZclClusterGetClusterId>
 8000c9e:	4581      	cmp	r9, r0
 8000ca0:	d12c      	bne.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ca2 <??zcl_cluster_alarm_data_ind_9>:
 8000ca2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d104      	bne.n	8000cb2 <??zcl_cluster_alarm_data_ind_10>
 8000ca8:	2081      	movs	r0, #129	@ 0x81
 8000caa:	0006      	movs	r6, r0
 8000cac:	2001      	movs	r0, #1
 8000cae:	0007      	movs	r7, r0
 8000cb0:	e024      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cb2 <??zcl_cluster_alarm_data_ind_10>:
 8000cb2:	a802      	add	r0, sp, #8
 8000cb4:	9000      	str	r0, [sp, #0]
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000cbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cc0:	0028      	movs	r0, r5
 8000cc2:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cc6:	47e0      	blx	ip
 8000cc8:	0006      	movs	r6, r0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	0007      	movs	r7, r0
 8000cce:	e015      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cd0 <??zcl_cluster_alarm_data_ind_6>:
 8000cd0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d104      	bne.n	8000ce0 <??zcl_cluster_alarm_data_ind_11>
 8000cd6:	2081      	movs	r0, #129	@ 0x81
 8000cd8:	0006      	movs	r6, r0
 8000cda:	2001      	movs	r0, #1
 8000cdc:	0007      	movs	r7, r0
 8000cde:	e00d      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ce0 <??zcl_cluster_alarm_data_ind_11>:
 8000ce0:	a802      	add	r0, sp, #8
 8000ce2:	9000      	str	r0, [sp, #0]
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	21ff      	movs	r1, #255	@ 0xff
 8000cec:	0028      	movs	r0, r5
 8000cee:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cf2:	47e0      	blx	ip
 8000cf4:	0006      	movs	r6, r0
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e7ff      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cfc <??zcl_cluster_alarm_data_ind_7>:
 8000cfc:	0030      	movs	r0, r6
 8000cfe:	b2c0      	uxtb	r0, r0
 8000d00:	28ff      	cmp	r0, #255	@ 0xff
 8000d02:	d076      	beq.n	8000df2 <??zcl_cluster_alarm_data_ind_12>
 8000d04:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000d08:	f88d 0000 	strb.w	r0, [sp]
 8000d0c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d10:	f88d 0002 	strb.w	r0, [sp, #2]
 8000d14:	f88d 6003 	strb.w	r6, [sp, #3]
 8000d18:	f05f 0a08 	movs.w	sl, #8
 8000d1c:	f05f 0b00 	movs.w	fp, #0
 8000d20:	f10d 0908 	add.w	r9, sp, #8
 8000d24:	465a      	mov	r2, fp
 8000d26:	4651      	mov	r1, sl
 8000d28:	4648      	mov	r0, r9
 8000d2a:	f004 fef2 	bl	8005b12 <__aeabi_memset>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f88d 0008 	strb.w	r0, [sp, #8]
 8000d34:	2000      	movs	r0, #0
 8000d36:	f88d 0009 	strb.w	r0, [sp, #9]
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f88d 000a 	strb.w	r0, [sp, #10]
 8000d40:	2001      	movs	r0, #1
 8000d42:	f88d 000b 	strb.w	r0, [sp, #11]
 8000d46:	2000      	movs	r0, #0
 8000d48:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000d4c:	f89d 0000 	ldrb.w	r0, [sp]
 8000d50:	f88d 000e 	strb.w	r0, [sp, #14]
 8000d54:	200b      	movs	r0, #11
 8000d56:	f88d 000f 	strb.w	r0, [sp, #15]
 8000d5a:	2205      	movs	r2, #5
 8000d5c:	a905      	add	r1, sp, #20
 8000d5e:	a802      	add	r0, sp, #8
 8000d60:	f000 f8ce 	bl	8000f00 <ZbZclAppendHeader>
 8000d64:	4681      	mov	r9, r0
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	d501      	bpl.n	8000d70 <??zcl_cluster_alarm_data_ind_13>
 8000d6c:	2089      	movs	r0, #137	@ 0x89
 8000d6e:	e041      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000d70 <??zcl_cluster_alarm_data_ind_13>:
 8000d70:	a805      	add	r0, sp, #20
 8000d72:	9014      	str	r0, [sp, #80]	@ 0x50
 8000d74:	a814      	add	r0, sp, #80	@ 0x50
 8000d76:	f8c0 9004 	str.w	r9, [r0, #4]
 8000d7a:	f10d 0102 	add.w	r1, sp, #2
 8000d7e:	6081      	str	r1, [r0, #8]
 8000d80:	2002      	movs	r0, #2
 8000d82:	9017      	str	r0, [sp, #92]	@ 0x5c
 8000d84:	2030      	movs	r0, #48	@ 0x30
 8000d86:	9004      	str	r0, [sp, #16]
 8000d88:	f05f 0a00 	movs.w	sl, #0
 8000d8c:	f10d 0b20 	add.w	fp, sp, #32
 8000d90:	4652      	mov	r2, sl
 8000d92:	9904      	ldr	r1, [sp, #16]
 8000d94:	4658      	mov	r0, fp
 8000d96:	f004 febc 	bl	8005b12 <__aeabi_memset>
 8000d9a:	a808      	add	r0, sp, #32
 8000d9c:	f114 0110 	adds.w	r1, r4, #16
 8000da0:	2210      	movs	r2, #16
 8000da2:	f016 f978 	bl	8017096 <__aeabi_memcpy>
 8000da6:	8aa8      	ldrh	r0, [r5, #20]
 8000da8:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8000dac:	2009      	movs	r0, #9
 8000dae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8000db2:	7ba8      	ldrb	r0, [r5, #14]
 8000db4:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000db8:	a814      	add	r0, sp, #80	@ 0x50
 8000dba:	900e      	str	r0, [sp, #56]	@ 0x38
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8000dc2:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8000dc6:	f7ff fad2 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8000dca:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dce:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 8000dd2:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8000dd6:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 8000de0:	2000      	movs	r0, #0
 8000de2:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	a908      	add	r1, sp, #32
 8000dec:	68a8      	ldr	r0, [r5, #8]
 8000dee:	f012 fd27 	bl	8013840 <ZbApsdeDataReqCallback>

08000df2 <??zcl_cluster_alarm_data_ind_12>:
 8000df2:	0038      	movs	r0, r7

08000df4 <??zcl_cluster_alarm_data_ind_1>:
 8000df4:	b019      	add	sp, #100	@ 0x64
 8000df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000dfa <ZbZclParseHeader>:
 8000dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dfe:	0004      	movs	r4, r0
 8000e00:	000d      	movs	r5, r1
 8000e02:	0016      	movs	r6, r2
 8000e04:	2700      	movs	r7, #0
 8000e06:	2e03      	cmp	r6, #3
 8000e08:	d202      	bcs.n	8000e10 <??ZbZclParseHeader_0>
 8000e0a:	f05f 30ff 	movs.w	r0, #4294967295
 8000e0e:	e035      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e10 <??ZbZclParseHeader_0>:
 8000e10:	f05f 0808 	movs.w	r8, #8
 8000e14:	f05f 0900 	movs.w	r9, #0
 8000e18:	46a2      	mov	sl, r4
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	4641      	mov	r1, r8
 8000e1e:	4650      	mov	r0, sl
 8000e20:	f004 fe77 	bl	8005b12 <__aeabi_memset>
 8000e24:	5de8      	ldrb	r0, [r5, r7]
 8000e26:	f010 0003 	ands.w	r0, r0, #3
 8000e2a:	7020      	strb	r0, [r4, #0]
 8000e2c:	5de8      	ldrb	r0, [r5, r7]
 8000e2e:	b2c0      	uxtb	r0, r0
 8000e30:	0880      	lsrs	r0, r0, #2
 8000e32:	f010 0001 	ands.w	r0, r0, #1
 8000e36:	7060      	strb	r0, [r4, #1]
 8000e38:	5de8      	ldrb	r0, [r5, r7]
 8000e3a:	b2c0      	uxtb	r0, r0
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	f010 0001 	ands.w	r0, r0, #1
 8000e42:	70a0      	strb	r0, [r4, #2]
 8000e44:	5de8      	ldrb	r0, [r5, r7]
 8000e46:	b2c0      	uxtb	r0, r0
 8000e48:	0900      	lsrs	r0, r0, #4
 8000e4a:	f010 0001 	ands.w	r0, r0, #1
 8000e4e:	70e0      	strb	r0, [r4, #3]
 8000e50:	1c7f      	adds	r7, r7, #1
 8000e52:	7860      	ldrb	r0, [r4, #1]
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d00a      	beq.n	8000e6e <??ZbZclParseHeader_2>
 8000e58:	2e05      	cmp	r6, #5
 8000e5a:	d202      	bcs.n	8000e62 <??ZbZclParseHeader_3>
 8000e5c:	f05f 30ff 	movs.w	r0, #4294967295
 8000e60:	e00c      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e62 <??ZbZclParseHeader_3>:
 8000e62:	eb05 0007 	add.w	r0, r5, r7
 8000e66:	f000 f901 	bl	800106c <pletoh16>
 8000e6a:	80a0      	strh	r0, [r4, #4]
 8000e6c:	1cbf      	adds	r7, r7, #2

08000e6e <??ZbZclParseHeader_2>:
 8000e6e:	5de8      	ldrb	r0, [r5, r7]
 8000e70:	71a0      	strb	r0, [r4, #6]
 8000e72:	1c7f      	adds	r7, r7, #1
 8000e74:	5de8      	ldrb	r0, [r5, r7]
 8000e76:	71e0      	strb	r0, [r4, #7]
 8000e78:	1c7f      	adds	r7, r7, #1
 8000e7a:	0038      	movs	r0, r7

08000e7c <??ZbZclParseHeader_1>:
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000e80 <ZbZclPrependHeader>:
 8000e80:	b470      	push	{r4, r5, r6}
 8000e82:	0003      	movs	r3, r0
 8000e84:	2400      	movs	r4, #0
 8000e86:	0015      	movs	r5, r2
 8000e88:	2600      	movs	r6, #0
 8000e8a:	7858      	ldrb	r0, [r3, #1]
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d004      	beq.n	8000e9a <??ZbZclPrependHeader_0>
 8000e90:	2a05      	cmp	r2, #5
 8000e92:	d202      	bcs.n	8000e9a <??ZbZclPrependHeader_0>
 8000e94:	f05f 30ff 	movs.w	r0, #4294967295
 8000e98:	e030      	b.n	8000efc <??ZbZclPrependHeader_1>

08000e9a <??ZbZclPrependHeader_0>:
 8000e9a:	2a03      	cmp	r2, #3
 8000e9c:	d202      	bcs.n	8000ea4 <??ZbZclPrependHeader_2>
 8000e9e:	f05f 30ff 	movs.w	r0, #4294967295
 8000ea2:	e02b      	b.n	8000efc <??ZbZclPrependHeader_1>

08000ea4 <??ZbZclPrependHeader_2>:
 8000ea4:	1e6d      	subs	r5, r5, #1
 8000ea6:	79d8      	ldrb	r0, [r3, #7]
 8000ea8:	5548      	strb	r0, [r1, r5]
 8000eaa:	1c76      	adds	r6, r6, #1
 8000eac:	1e6d      	subs	r5, r5, #1
 8000eae:	7998      	ldrb	r0, [r3, #6]
 8000eb0:	5548      	strb	r0, [r1, r5]
 8000eb2:	1c76      	adds	r6, r6, #1
 8000eb4:	7858      	ldrb	r0, [r3, #1]
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d009      	beq.n	8000ece <??ZbZclPrependHeader_3>
 8000eba:	1e6d      	subs	r5, r5, #1
 8000ebc:	8898      	ldrh	r0, [r3, #4]
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	0a00      	lsrs	r0, r0, #8
 8000ec2:	5548      	strb	r0, [r1, r5]
 8000ec4:	1c76      	adds	r6, r6, #1
 8000ec6:	1e6d      	subs	r5, r5, #1
 8000ec8:	8898      	ldrh	r0, [r3, #4]
 8000eca:	5548      	strb	r0, [r1, r5]
 8000ecc:	1c76      	adds	r6, r6, #1

08000ece <??ZbZclPrependHeader_3>:
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	f010 0003 	ands.w	r0, r0, #3
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	7858      	ldrb	r0, [r3, #1]
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d001      	beq.n	8000ee0 <??ZbZclPrependHeader_4>
 8000edc:	f054 0404 	orrs.w	r4, r4, #4

08000ee0 <??ZbZclPrependHeader_4>:
 8000ee0:	7898      	ldrb	r0, [r3, #2]
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	d101      	bne.n	8000eea <??ZbZclPrependHeader_5>
 8000ee6:	f054 0408 	orrs.w	r4, r4, #8

08000eea <??ZbZclPrependHeader_5>:
 8000eea:	78d8      	ldrb	r0, [r3, #3]
 8000eec:	2801      	cmp	r0, #1
 8000eee:	d101      	bne.n	8000ef4 <??ZbZclPrependHeader_6>
 8000ef0:	f054 0410 	orrs.w	r4, r4, #16

08000ef4 <??ZbZclPrependHeader_6>:
 8000ef4:	1e6d      	subs	r5, r5, #1
 8000ef6:	554c      	strb	r4, [r1, r5]
 8000ef8:	1c76      	adds	r6, r6, #1
 8000efa:	0030      	movs	r0, r6

08000efc <??ZbZclPrependHeader_1>:
 8000efc:	bc70      	pop	{r4, r5, r6}
 8000efe:	4770      	bx	lr

08000f00 <ZbZclAppendHeader>:
 8000f00:	b430      	push	{r4, r5}
 8000f02:	0003      	movs	r3, r0
 8000f04:	2400      	movs	r4, #0
 8000f06:	2500      	movs	r5, #0
 8000f08:	7858      	ldrb	r0, [r3, #1]
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d004      	beq.n	8000f18 <??ZbZclAppendHeader_0>
 8000f0e:	2a05      	cmp	r2, #5
 8000f10:	d202      	bcs.n	8000f18 <??ZbZclAppendHeader_0>
 8000f12:	f05f 30ff 	movs.w	r0, #4294967295
 8000f16:	e02b      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f18 <??ZbZclAppendHeader_0>:
 8000f18:	2a03      	cmp	r2, #3
 8000f1a:	d202      	bcs.n	8000f22 <??ZbZclAppendHeader_2>
 8000f1c:	f05f 30ff 	movs.w	r0, #4294967295
 8000f20:	e026      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f22 <??ZbZclAppendHeader_2>:
 8000f22:	7818      	ldrb	r0, [r3, #0]
 8000f24:	f010 0003 	ands.w	r0, r0, #3
 8000f28:	4304      	orrs	r4, r0
 8000f2a:	7858      	ldrb	r0, [r3, #1]
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d001      	beq.n	8000f34 <??ZbZclAppendHeader_3>
 8000f30:	f054 0404 	orrs.w	r4, r4, #4

08000f34 <??ZbZclAppendHeader_3>:
 8000f34:	7898      	ldrb	r0, [r3, #2]
 8000f36:	2801      	cmp	r0, #1
 8000f38:	d101      	bne.n	8000f3e <??ZbZclAppendHeader_4>
 8000f3a:	f054 0408 	orrs.w	r4, r4, #8

08000f3e <??ZbZclAppendHeader_4>:
 8000f3e:	78d8      	ldrb	r0, [r3, #3]
 8000f40:	2801      	cmp	r0, #1
 8000f42:	d101      	bne.n	8000f48 <??ZbZclAppendHeader_5>
 8000f44:	f054 0410 	orrs.w	r4, r4, #16

08000f48 <??ZbZclAppendHeader_5>:
 8000f48:	554c      	strb	r4, [r1, r5]
 8000f4a:	1c6d      	adds	r5, r5, #1
 8000f4c:	7858      	ldrb	r0, [r3, #1]
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d007      	beq.n	8000f62 <??ZbZclAppendHeader_6>
 8000f52:	8898      	ldrh	r0, [r3, #4]
 8000f54:	5548      	strb	r0, [r1, r5]
 8000f56:	1c6d      	adds	r5, r5, #1
 8000f58:	8898      	ldrh	r0, [r3, #4]
 8000f5a:	b280      	uxth	r0, r0
 8000f5c:	0a00      	lsrs	r0, r0, #8
 8000f5e:	5548      	strb	r0, [r1, r5]
 8000f60:	1c6d      	adds	r5, r5, #1

08000f62 <??ZbZclAppendHeader_6>:
 8000f62:	7998      	ldrb	r0, [r3, #6]
 8000f64:	5548      	strb	r0, [r1, r5]
 8000f66:	1c6d      	adds	r5, r5, #1
 8000f68:	79d8      	ldrb	r0, [r3, #7]
 8000f6a:	5548      	strb	r0, [r1, r5]
 8000f6c:	1c6d      	adds	r5, r5, #1
 8000f6e:	0028      	movs	r0, r5

08000f70 <??ZbZclAppendHeader_1>:
 8000f70:	bc30      	pop	{r4, r5}
 8000f72:	4770      	bx	lr

08000f74 <ZbZclOnOffClientAlloc>:
 8000f74:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000f76:	0005      	movs	r5, r0
 8000f78:	000e      	movs	r6, r1
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	9000      	str	r0, [sp, #0]
 8000f7e:	0033      	movs	r3, r6
 8000f80:	b2db      	uxtb	r3, r3
 8000f82:	2206      	movs	r2, #6
 8000f84:	216c      	movs	r1, #108	@ 0x6c
 8000f86:	0028      	movs	r0, r5
 8000f88:	f003 fd45 	bl	8004a16 <ZbZclClusterAlloc>
 8000f8c:	0004      	movs	r4, r0
 8000f8e:	2c00      	cmp	r4, #0
 8000f90:	d101      	bne.n	8000f96 <??ZbZclOnOffClientAlloc_0>
 8000f92:	2000      	movs	r0, #0
 8000f94:	e003      	b.n	8000f9e <??ZbZclOnOffClientAlloc_1>

08000f96 <??ZbZclOnOffClientAlloc_0>:
 8000f96:	0020      	movs	r0, r4
 8000f98:	f003 fdcd 	bl	8004b36 <ZbZclClusterAttach>
 8000f9c:	0020      	movs	r0, r4

08000f9e <??ZbZclOnOffClientAlloc_1>:
 8000f9e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

08000fa0 <onoff_send_req>:
 8000fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa4:	b088      	sub	sp, #32
 8000fa6:	0004      	movs	r4, r0
 8000fa8:	000d      	movs	r5, r1
 8000faa:	0016      	movs	r6, r2
 8000fac:	001f      	movs	r7, r3
 8000fae:	f8dd 8048 	ldr.w	r8, [sp, #72]	@ 0x48
 8000fb2:	f05f 0920 	movs.w	r9, #32
 8000fb6:	f05f 0a00 	movs.w	sl, #0
 8000fba:	46eb      	mov	fp, sp
 8000fbc:	4652      	mov	r2, sl
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	4658      	mov	r0, fp
 8000fc2:	f004 fda6 	bl	8005b12 <__aeabi_memset>
 8000fc6:	4668      	mov	r0, sp
 8000fc8:	0029      	movs	r1, r5
 8000fca:	2210      	movs	r2, #16
 8000fcc:	f016 f863 	bl	8017096 <__aeabi_memcpy>
 8000fd0:	f88d 6010 	strb.w	r6, [sp, #16]
 8000fd4:	0028      	movs	r0, r5
 8000fd6:	f012 fcad 	bl	8013934 <ZbApsAddrIsBcast>
 8000fda:	2800      	cmp	r0, #0
 8000fdc:	d001      	beq.n	8000fe2 <??onoff_send_req_0>
 8000fde:	2001      	movs	r0, #1
 8000fe0:	e000      	b.n	8000fe4 <??onoff_send_req_1>

08000fe2 <??onoff_send_req_0>:
 8000fe2:	2000      	movs	r0, #0

08000fe4 <??onoff_send_req_1>:
 8000fe4:	f88d 0011 	strb.w	r0, [sp, #17]
 8000fe8:	2000      	movs	r0, #0
 8000fea:	9005      	str	r0, [sp, #20]
 8000fec:	2000      	movs	r0, #0
 8000fee:	9006      	str	r0, [sp, #24]
 8000ff0:	4643      	mov	r3, r8
 8000ff2:	003a      	movs	r2, r7
 8000ff4:	4669      	mov	r1, sp
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f013 f954 	bl	80142a4 <ZbZclClusterCommandReq>
 8000ffc:	b009      	add	sp, #36	@ 0x24
 8000ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001002 <ZbZclOnOffClientOnReq>:
 8001002:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001004:	0004      	movs	r4, r0
 8001006:	000d      	movs	r5, r1
 8001008:	0016      	movs	r6, r2
 800100a:	001f      	movs	r7, r3
 800100c:	9700      	str	r7, [sp, #0]
 800100e:	0033      	movs	r3, r6
 8001010:	2201      	movs	r2, #1
 8001012:	0029      	movs	r1, r5
 8001014:	0020      	movs	r0, r4
 8001016:	f7ff ffc3 	bl	8000fa0 <onoff_send_req>
 800101a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800101c <ZbZclOnOffClientOffReq>:
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800101e:	0004      	movs	r4, r0
 8001020:	000d      	movs	r5, r1
 8001022:	0016      	movs	r6, r2
 8001024:	001f      	movs	r7, r3
 8001026:	9700      	str	r7, [sp, #0]
 8001028:	0033      	movs	r3, r6
 800102a:	2200      	movs	r2, #0
 800102c:	0029      	movs	r1, r5
 800102e:	0020      	movs	r0, r4
 8001030:	f7ff ffb6 	bl	8000fa0 <onoff_send_req>
 8001034:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001036 <ZbZclOnOffClientToggleReq>:
 8001036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001038:	0004      	movs	r4, r0
 800103a:	000d      	movs	r5, r1
 800103c:	0016      	movs	r6, r2
 800103e:	001f      	movs	r7, r3
 8001040:	9700      	str	r7, [sp, #0]
 8001042:	0033      	movs	r3, r6
 8001044:	2202      	movs	r2, #2
 8001046:	0029      	movs	r1, r5
 8001048:	0020      	movs	r0, r4
 800104a:	f7ff ffa9 	bl	8000fa0 <onoff_send_req>
 800104e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001050 <is_little_endian>:
 8001050:	b081      	sub	sp, #4
 8001052:	2001      	movs	r0, #1
 8001054:	f8ad 0000 	strh.w	r0, [sp]
 8001058:	4668      	mov	r0, sp
 800105a:	7800      	ldrb	r0, [r0, #0]
 800105c:	2801      	cmp	r0, #1
 800105e:	d101      	bne.n	8001064 <??is_little_endian_0>
 8001060:	2001      	movs	r0, #1
 8001062:	e000      	b.n	8001066 <??is_little_endian_1>

08001064 <??is_little_endian_0>:
 8001064:	2000      	movs	r0, #0

08001066 <??is_little_endian_1>:
 8001066:	b2c0      	uxtb	r0, r0
 8001068:	b001      	add	sp, #4
 800106a:	4770      	bx	lr

0800106c <pletoh16>:
 800106c:	0001      	movs	r1, r0
 800106e:	7808      	ldrb	r0, [r1, #0]
 8001070:	7849      	ldrb	r1, [r1, #1]
 8001072:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8001076:	b280      	uxth	r0, r0
 8001078:	4770      	bx	lr

0800107a <pletoh24>:
 800107a:	b510      	push	{r4, lr}
 800107c:	0004      	movs	r4, r0
 800107e:	0020      	movs	r0, r4
 8001080:	f7ff fff4 	bl	800106c <pletoh16>
 8001084:	b280      	uxth	r0, r0
 8001086:	78a1      	ldrb	r1, [r4, #2]
 8001088:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 800108c:	bd10      	pop	{r4, pc}

0800108e <pletoh32>:
 800108e:	b538      	push	{r3, r4, r5, lr}
 8001090:	0004      	movs	r4, r0
 8001092:	0020      	movs	r0, r4
 8001094:	f7ff ffea 	bl	800106c <pletoh16>
 8001098:	0005      	movs	r5, r0
 800109a:	b2ad      	uxth	r5, r5
 800109c:	1ca0      	adds	r0, r4, #2
 800109e:	f7ff ffe5 	bl	800106c <pletoh16>
 80010a2:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 80010a6:	0028      	movs	r0, r5
 80010a8:	bd32      	pop	{r1, r4, r5, pc}

080010aa <pletoh40>:
 80010aa:	b510      	push	{r4, lr}
 80010ac:	0004      	movs	r4, r0
 80010ae:	0020      	movs	r0, r4
 80010b0:	f7ff ffed 	bl	800108e <pletoh32>
 80010b4:	7921      	ldrb	r1, [r4, #4]
 80010b6:	bd10      	pop	{r4, pc}

080010b8 <pletoh48>:
 80010b8:	b510      	push	{r4, lr}
 80010ba:	0004      	movs	r4, r0
 80010bc:	0020      	movs	r0, r4
 80010be:	f7ff fff4 	bl	80010aa <pletoh40>
 80010c2:	7962      	ldrb	r2, [r4, #5]
 80010c4:	2300      	movs	r3, #0
 80010c6:	0213      	lsls	r3, r2, #8
 80010c8:	2200      	movs	r2, #0
 80010ca:	4310      	orrs	r0, r2
 80010cc:	4319      	orrs	r1, r3
 80010ce:	bd10      	pop	{r4, pc}

080010d0 <pletoh56>:
 80010d0:	b510      	push	{r4, lr}
 80010d2:	0004      	movs	r4, r0
 80010d4:	0020      	movs	r0, r4
 80010d6:	f7ff ffef 	bl	80010b8 <pletoh48>
 80010da:	79a2      	ldrb	r2, [r4, #6]
 80010dc:	2300      	movs	r3, #0
 80010de:	0413      	lsls	r3, r2, #16
 80010e0:	2200      	movs	r2, #0
 80010e2:	4310      	orrs	r0, r2
 80010e4:	4319      	orrs	r1, r3
 80010e6:	bd10      	pop	{r4, pc}

080010e8 <pletoh64>:
 80010e8:	b538      	push	{r3, r4, r5, lr}
 80010ea:	0005      	movs	r5, r0
 80010ec:	0028      	movs	r0, r5
 80010ee:	f7ff ffce 	bl	800108e <pletoh32>
 80010f2:	0004      	movs	r4, r0
 80010f4:	1d28      	adds	r0, r5, #4
 80010f6:	f7ff ffca 	bl	800108e <pletoh32>
 80010fa:	0003      	movs	r3, r0
 80010fc:	0022      	movs	r2, r4
 80010fe:	0010      	movs	r0, r2
 8001100:	0019      	movs	r1, r3
 8001102:	bd34      	pop	{r2, r4, r5, pc}

08001104 <putle16>:
 8001104:	7001      	strb	r1, [r0, #0]
 8001106:	000a      	movs	r2, r1
 8001108:	b292      	uxth	r2, r2
 800110a:	0a12      	lsrs	r2, r2, #8
 800110c:	7042      	strb	r2, [r0, #1]
 800110e:	4770      	bx	lr

08001110 <putle24>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	0004      	movs	r4, r0
 8001114:	000d      	movs	r5, r1
 8001116:	0029      	movs	r1, r5
 8001118:	b289      	uxth	r1, r1
 800111a:	0020      	movs	r0, r4
 800111c:	f7ff fff2 	bl	8001104 <putle16>
 8001120:	0028      	movs	r0, r5
 8001122:	0c00      	lsrs	r0, r0, #16
 8001124:	70a0      	strb	r0, [r4, #2]
 8001126:	bd31      	pop	{r0, r4, r5, pc}

08001128 <putle32>:
 8001128:	b538      	push	{r3, r4, r5, lr}
 800112a:	0004      	movs	r4, r0
 800112c:	000d      	movs	r5, r1
 800112e:	0029      	movs	r1, r5
 8001130:	0020      	movs	r0, r4
 8001132:	f7ff ffed 	bl	8001110 <putle24>
 8001136:	0028      	movs	r0, r5
 8001138:	0e00      	lsrs	r0, r0, #24
 800113a:	70e0      	strb	r0, [r4, #3]
 800113c:	bd31      	pop	{r0, r4, r5, pc}

0800113e <putle40>:
 800113e:	b570      	push	{r4, r5, r6, lr}
 8001140:	0006      	movs	r6, r0
 8001142:	0014      	movs	r4, r2
 8001144:	001d      	movs	r5, r3
 8001146:	0021      	movs	r1, r4
 8001148:	0030      	movs	r0, r6
 800114a:	f7ff ffed 	bl	8001128 <putle32>
 800114e:	7135      	strb	r5, [r6, #4]
 8001150:	bd70      	pop	{r4, r5, r6, pc}

08001152 <putle48>:
 8001152:	b570      	push	{r4, r5, r6, lr}
 8001154:	0006      	movs	r6, r0
 8001156:	0014      	movs	r4, r2
 8001158:	001d      	movs	r5, r3
 800115a:	0022      	movs	r2, r4
 800115c:	002b      	movs	r3, r5
 800115e:	0030      	movs	r0, r6
 8001160:	f7ff ffed 	bl	800113e <putle40>
 8001164:	0020      	movs	r0, r4
 8001166:	0029      	movs	r1, r5
 8001168:	0a08      	lsrs	r0, r1, #8
 800116a:	2100      	movs	r1, #0
 800116c:	7170      	strb	r0, [r6, #5]
 800116e:	bd70      	pop	{r4, r5, r6, pc}

08001170 <putle56>:
 8001170:	b570      	push	{r4, r5, r6, lr}
 8001172:	0006      	movs	r6, r0
 8001174:	0014      	movs	r4, r2
 8001176:	001d      	movs	r5, r3
 8001178:	0022      	movs	r2, r4
 800117a:	002b      	movs	r3, r5
 800117c:	0030      	movs	r0, r6
 800117e:	f7ff ffe8 	bl	8001152 <putle48>
 8001182:	0020      	movs	r0, r4
 8001184:	0029      	movs	r1, r5
 8001186:	0c08      	lsrs	r0, r1, #16
 8001188:	2100      	movs	r1, #0
 800118a:	71b0      	strb	r0, [r6, #6]
 800118c:	bd70      	pop	{r4, r5, r6, pc}

0800118e <putle64>:
 800118e:	b570      	push	{r4, r5, r6, lr}
 8001190:	0006      	movs	r6, r0
 8001192:	0014      	movs	r4, r2
 8001194:	001d      	movs	r5, r3
 8001196:	0022      	movs	r2, r4
 8001198:	002b      	movs	r3, r5
 800119a:	0030      	movs	r0, r6
 800119c:	f7ff ffe8 	bl	8001170 <putle56>
 80011a0:	0020      	movs	r0, r4
 80011a2:	0029      	movs	r1, r5
 80011a4:	0e08      	lsrs	r0, r1, #24
 80011a6:	2100      	movs	r1, #0
 80011a8:	71f0      	strb	r0, [r6, #7]
 80011aa:	bd70      	pop	{r4, r5, r6, pc}

080011ac <ZbZclAttrAddSorted>:
 80011ac:	b430      	push	{r4, r5}
 80011ae:	0002      	movs	r2, r0
 80011b0:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 80011b2:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80011b6:	42a0      	cmp	r0, r4
 80011b8:	d001      	beq.n	80011be <??ZbZclAttrAddSorted_0>
 80011ba:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 80011bc:	e000      	b.n	80011c0 <??ZbZclAttrAddSorted_1>

080011be <??ZbZclAttrAddSorted_0>:
 80011be:	2000      	movs	r0, #0

080011c0 <??ZbZclAttrAddSorted_1>:
 80011c0:	2800      	cmp	r0, #0
 80011c2:	d017      	beq.n	80011f4 <??ZbZclAttrAddSorted_2>
 80011c4:	0003      	movs	r3, r0
 80011c6:	688c      	ldr	r4, [r1, #8]
 80011c8:	8824      	ldrh	r4, [r4, #0]
 80011ca:	689d      	ldr	r5, [r3, #8]
 80011cc:	882d      	ldrh	r5, [r5, #0]
 80011ce:	42ac      	cmp	r4, r5
 80011d0:	d207      	bcs.n	80011e2 <??ZbZclAttrAddSorted_3>
 80011d2:	600b      	str	r3, [r1, #0]
 80011d4:	685c      	ldr	r4, [r3, #4]
 80011d6:	604c      	str	r4, [r1, #4]
 80011d8:	680c      	ldr	r4, [r1, #0]
 80011da:	6061      	str	r1, [r4, #4]
 80011dc:	684c      	ldr	r4, [r1, #4]
 80011de:	6021      	str	r1, [r4, #0]
 80011e0:	e011      	b.n	8001206 <??ZbZclAttrAddSorted_4>

080011e2 <??ZbZclAttrAddSorted_3>:
 80011e2:	6804      	ldr	r4, [r0, #0]
 80011e4:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 80011e8:	42ac      	cmp	r4, r5
 80011ea:	d001      	beq.n	80011f0 <??ZbZclAttrAddSorted_5>
 80011ec:	6800      	ldr	r0, [r0, #0]
 80011ee:	e7e7      	b.n	80011c0 <??ZbZclAttrAddSorted_1>

080011f0 <??ZbZclAttrAddSorted_5>:
 80011f0:	2000      	movs	r0, #0
 80011f2:	e7e5      	b.n	80011c0 <??ZbZclAttrAddSorted_1>

080011f4 <??ZbZclAttrAddSorted_2>:
 80011f4:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80011f8:	600c      	str	r4, [r1, #0]
 80011fa:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80011fc:	604c      	str	r4, [r1, #4]
 80011fe:	680c      	ldr	r4, [r1, #0]
 8001200:	6061      	str	r1, [r4, #4]
 8001202:	684c      	ldr	r4, [r1, #4]
 8001204:	6021      	str	r1, [r4, #0]

08001206 <??ZbZclAttrAddSorted_4>:
 8001206:	bc30      	pop	{r4, r5}
 8001208:	4770      	bx	lr

0800120a <ZbZclAttrFind>:
 800120a:	b430      	push	{r4, r5}
 800120c:	0003      	movs	r3, r0
 800120e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001210:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 8001214:	4290      	cmp	r0, r2
 8001216:	d001      	beq.n	800121c <??ZbZclAttrFind_0>
 8001218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800121a:	e000      	b.n	800121e <??ZbZclAttrFind_1>

0800121c <??ZbZclAttrFind_0>:
 800121c:	2200      	movs	r2, #0

0800121e <??ZbZclAttrFind_1>:
 800121e:	2a00      	cmp	r2, #0
 8001220:	d012      	beq.n	8001248 <??ZbZclAttrFind_2>
 8001222:	0014      	movs	r4, r2
 8001224:	68a0      	ldr	r0, [r4, #8]
 8001226:	8800      	ldrh	r0, [r0, #0]
 8001228:	000d      	movs	r5, r1
 800122a:	b2ad      	uxth	r5, r5
 800122c:	42a8      	cmp	r0, r5
 800122e:	d005      	beq.n	800123c <??ZbZclAttrFind_3>
 8001230:	6810      	ldr	r0, [r2, #0]
 8001232:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 8001236:	42a8      	cmp	r0, r5
 8001238:	d004      	beq.n	8001244 <??ZbZclAttrFind_4>
 800123a:	e001      	b.n	8001240 <??ZbZclAttrFind_5>

0800123c <??ZbZclAttrFind_3>:
 800123c:	0020      	movs	r0, r4
 800123e:	e004      	b.n	800124a <??ZbZclAttrFind_6>

08001240 <??ZbZclAttrFind_5>:
 8001240:	6812      	ldr	r2, [r2, #0]
 8001242:	e7ec      	b.n	800121e <??ZbZclAttrFind_1>

08001244 <??ZbZclAttrFind_4>:
 8001244:	2200      	movs	r2, #0
 8001246:	e7ea      	b.n	800121e <??ZbZclAttrFind_1>

08001248 <??ZbZclAttrFind_2>:
 8001248:	2000      	movs	r0, #0

0800124a <??ZbZclAttrFind_6>:
 800124a:	bc30      	pop	{r4, r5}
 800124c:	4770      	bx	lr

0800124e <ZbZclAttrHandleDiscover>:
 800124e:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001252:	b09f      	sub	sp, #124	@ 0x7c
 8001254:	0004      	movs	r4, r0
 8001256:	000d      	movs	r5, r1
 8001258:	0016      	movs	r6, r2
 800125a:	2708      	movs	r7, #8
 800125c:	f05f 0800 	movs.w	r8, #0
 8001260:	f10d 0908 	add.w	r9, sp, #8
 8001264:	4642      	mov	r2, r8
 8001266:	0039      	movs	r1, r7
 8001268:	4648      	mov	r0, r9
 800126a:	f004 fc52 	bl	8005b12 <__aeabi_memset>
 800126e:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8001270:	2803      	cmp	r0, #3
 8001272:	d206      	bcs.n	8001282 <??ZbZclAttrHandleDiscover_0>
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	002a      	movs	r2, r5
 8001278:	0031      	movs	r1, r6
 800127a:	0020      	movs	r0, r4
 800127c:	f012 ffda 	bl	8014234 <ZbZclSendDefaultResponse>
 8001280:	e070      	b.n	8001364 <??ZbZclAttrHandleDiscover_1>

08001282 <??ZbZclAttrHandleDiscover_0>:
 8001282:	f05f 0800 	movs.w	r8, #0
 8001286:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8001288:	4641      	mov	r1, r8
 800128a:	b2c9      	uxtb	r1, r1
 800128c:	4408      	add	r0, r1
 800128e:	f7ff feed 	bl	800106c <pletoh16>
 8001292:	0007      	movs	r7, r0
 8001294:	f118 0802 	adds.w	r8, r8, #2
 8001298:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800129a:	4641      	mov	r1, r8
 800129c:	b2c9      	uxtb	r1, r1
 800129e:	5c40      	ldrb	r0, [r0, r1]
 80012a0:	f88d 0004 	strb.w	r0, [sp, #4]
 80012a4:	f118 0801 	adds.w	r8, r8, #1
 80012a8:	2000      	movs	r0, #0
 80012aa:	f88d 0008 	strb.w	r0, [sp, #8]
 80012ae:	7868      	ldrb	r0, [r5, #1]
 80012b0:	f88d 0009 	strb.w	r0, [sp, #9]
 80012b4:	78a8      	ldrb	r0, [r5, #2]
 80012b6:	2800      	cmp	r0, #0
 80012b8:	d101      	bne.n	80012be <??ZbZclAttrHandleDiscover_2>
 80012ba:	2001      	movs	r0, #1
 80012bc:	e000      	b.n	80012c0 <??ZbZclAttrHandleDiscover_3>

080012be <??ZbZclAttrHandleDiscover_2>:
 80012be:	2000      	movs	r0, #0

080012c0 <??ZbZclAttrHandleDiscover_3>:
 80012c0:	f88d 000a 	strb.w	r0, [sp, #10]
 80012c4:	2001      	movs	r0, #1
 80012c6:	f88d 000b 	strb.w	r0, [sp, #11]
 80012ca:	88a8      	ldrh	r0, [r5, #4]
 80012cc:	f8ad 000c 	strh.w	r0, [sp, #12]
 80012d0:	79a8      	ldrb	r0, [r5, #6]
 80012d2:	f88d 000e 	strb.w	r0, [sp, #14]
 80012d6:	200d      	movs	r0, #13
 80012d8:	f88d 000f 	strb.w	r0, [sp, #15]
 80012dc:	2239      	movs	r2, #57	@ 0x39
 80012de:	a910      	add	r1, sp, #64	@ 0x40
 80012e0:	a802      	add	r0, sp, #8
 80012e2:	f7ff fe0d 	bl	8000f00 <ZbZclAppendHeader>
 80012e6:	4682      	mov	sl, r0
 80012e8:	f1ba 0f00 	cmp.w	sl, #0
 80012ec:	d506      	bpl.n	80012fc <??ZbZclAttrHandleDiscover_4>
 80012ee:	2380      	movs	r3, #128	@ 0x80
 80012f0:	002a      	movs	r2, r5
 80012f2:	0031      	movs	r1, r6
 80012f4:	0020      	movs	r0, r4
 80012f6:	f012 ff9d 	bl	8014234 <ZbZclSendDefaultResponse>
 80012fa:	e033      	b.n	8001364 <??ZbZclAttrHandleDiscover_1>

080012fc <??ZbZclAttrHandleDiscover_4>:
 80012fc:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 8001300:	9000      	str	r0, [sp, #0]
 8001302:	a810      	add	r0, sp, #64	@ 0x40
 8001304:	eb00 030a 	add.w	r3, r0, sl
 8001308:	aa01      	add	r2, sp, #4
 800130a:	0039      	movs	r1, r7
 800130c:	b289      	uxth	r1, r1
 800130e:	0020      	movs	r0, r4
 8001310:	f000 f82b 	bl	800136a <ZbZclAttrDiscoverGetList>
 8001314:	4681      	mov	r9, r0
 8001316:	eb19 090a 	adds.w	r9, r9, sl
 800131a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800131e:	2800      	cmp	r0, #0
 8001320:	d104      	bne.n	800132c <??ZbZclAttrHandleDiscover_5>
 8001322:	0030      	movs	r0, r6
 8001324:	f012 fb06 	bl	8013934 <ZbApsAddrIsBcast>
 8001328:	2800      	cmp	r0, #0
 800132a:	d11b      	bne.n	8001364 <??ZbZclAttrHandleDiscover_1>

0800132c <??ZbZclAttrHandleDiscover_5>:
 800132c:	0032      	movs	r2, r6
 800132e:	a904      	add	r1, sp, #16
 8001330:	0020      	movs	r0, r4
 8001332:	f7ff f884 	bl	800043e <ZbZclClusterInitApsdeReq>
 8001336:	a804      	add	r0, sp, #16
 8001338:	f116 0110 	adds.w	r1, r6, #16
 800133c:	2210      	movs	r2, #16
 800133e:	f015 feaa 	bl	8017096 <__aeabi_memcpy>
 8001342:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8001346:	f7ff f812 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 800134a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800134e:	a810      	add	r0, sp, #64	@ 0x40
 8001350:	900a      	str	r0, [sp, #40]	@ 0x28
 8001352:	4648      	mov	r0, r9
 8001354:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8001358:	2300      	movs	r3, #0
 800135a:	2200      	movs	r2, #0
 800135c:	a904      	add	r1, sp, #16
 800135e:	68a0      	ldr	r0, [r4, #8]
 8001360:	f012 fa6e 	bl	8013840 <ZbApsdeDataReqCallback>

08001364 <??ZbZclAttrHandleDiscover_1>:
 8001364:	b020      	add	sp, #128	@ 0x80
 8001366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800136a <ZbZclAttrDiscoverGetList>:
 800136a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800136e:	0005      	movs	r5, r0
 8001370:	0016      	movs	r6, r2
 8001372:	001f      	movs	r7, r3
 8001374:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8001378:	f05f 0a00 	movs.w	sl, #0
 800137c:	f05f 0b00 	movs.w	fp, #0
 8001380:	2000      	movs	r0, #0
 8001382:	f807 000b 	strb.w	r0, [r7, fp]
 8001386:	f11b 0b01 	adds.w	fp, fp, #1
 800138a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800138c:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8001390:	4288      	cmp	r0, r1
 8001392:	d001      	beq.n	8001398 <??ZbZclAttrDiscoverGetList_0>
 8001394:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8001396:	e000      	b.n	800139a <??ZbZclAttrDiscoverGetList_1>

08001398 <??ZbZclAttrDiscoverGetList_0>:
 8001398:	2400      	movs	r4, #0

0800139a <??ZbZclAttrDiscoverGetList_1>:
 800139a:	2c00      	cmp	r4, #0
 800139c:	d030      	beq.n	8001400 <??ZbZclAttrDiscoverGetList_2>
 800139e:	46a1      	mov	r9, r4
 80013a0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80013a4:	8800      	ldrh	r0, [r0, #0]
 80013a6:	f8bd 1000 	ldrh.w	r1, [sp]
 80013aa:	4288      	cmp	r0, r1
 80013ac:	d31f      	bcc.n	80013ee <??ZbZclAttrDiscoverGetList_3>

080013ae <??ZbZclAttrDiscoverGetList_4>:
 80013ae:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80013b2:	8880      	ldrh	r0, [r0, #4]
 80013b4:	0400      	lsls	r0, r0, #16
 80013b6:	d41a      	bmi.n	80013ee <??ZbZclAttrDiscoverGetList_3>

080013b8 <??ZbZclAttrDiscoverGetList_5>:
 80013b8:	4650      	mov	r0, sl
 80013ba:	7831      	ldrb	r1, [r6, #0]
 80013bc:	b2c0      	uxtb	r0, r0
 80013be:	4288      	cmp	r0, r1
 80013c0:	d21e      	bcs.n	8001400 <??ZbZclAttrDiscoverGetList_2>

080013c2 <??ZbZclAttrDiscoverGetList_6>:
 80013c2:	f11b 0003 	adds.w	r0, fp, #3
 80013c6:	4580      	cmp	r8, r0
 80013c8:	d31a      	bcc.n	8001400 <??ZbZclAttrDiscoverGetList_2>

080013ca <??ZbZclAttrDiscoverGetList_7>:
 80013ca:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80013ce:	8801      	ldrh	r1, [r0, #0]
 80013d0:	eb07 000b 	add.w	r0, r7, fp
 80013d4:	f7ff fe96 	bl	8001104 <putle16>
 80013d8:	f11b 0b02 	adds.w	fp, fp, #2
 80013dc:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80013e0:	7880      	ldrb	r0, [r0, #2]
 80013e2:	f807 000b 	strb.w	r0, [r7, fp]
 80013e6:	f11b 0b01 	adds.w	fp, fp, #1
 80013ea:	f11a 0a01 	adds.w	sl, sl, #1

080013ee <??ZbZclAttrDiscoverGetList_3>:
 80013ee:	6820      	ldr	r0, [r4, #0]
 80013f0:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80013f4:	4288      	cmp	r0, r1
 80013f6:	d001      	beq.n	80013fc <??ZbZclAttrDiscoverGetList_8>
 80013f8:	6824      	ldr	r4, [r4, #0]
 80013fa:	e7ce      	b.n	800139a <??ZbZclAttrDiscoverGetList_1>

080013fc <??ZbZclAttrDiscoverGetList_8>:
 80013fc:	2400      	movs	r4, #0
 80013fe:	e7cc      	b.n	800139a <??ZbZclAttrDiscoverGetList_1>

08001400 <??ZbZclAttrDiscoverGetList_2>:
 8001400:	2c00      	cmp	r4, #0
 8001402:	d101      	bne.n	8001408 <??ZbZclAttrDiscoverGetList_9>
 8001404:	2001      	movs	r0, #1
 8001406:	7038      	strb	r0, [r7, #0]

08001408 <??ZbZclAttrDiscoverGetList_9>:
 8001408:	f886 a000 	strb.w	sl, [r6]
 800140c:	4658      	mov	r0, fp
 800140e:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001412 <ZbZclAttrRead>:
 8001412:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	4680      	mov	r8, r0
 800141a:	0014      	movs	r4, r2
 800141c:	001d      	movs	r5, r3
 800141e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8001420:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001424:	4640      	mov	r0, r8
 8001426:	f7ff fef0 	bl	800120a <ZbZclAttrFind>
 800142a:	0007      	movs	r7, r0
 800142c:	2f00      	cmp	r7, #0
 800142e:	d101      	bne.n	8001434 <??ZbZclAttrRead_0>
 8001430:	2086      	movs	r0, #134	@ 0x86
 8001432:	e03c      	b.n	80014ae <??ZbZclAttrRead_1>

08001434 <??ZbZclAttrRead_0>:
 8001434:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8001438:	2800      	cmp	r0, #0
 800143a:	d005      	beq.n	8001448 <??ZbZclAttrRead_2>
 800143c:	68b8      	ldr	r0, [r7, #8]
 800143e:	7900      	ldrb	r0, [r0, #4]
 8001440:	0780      	lsls	r0, r0, #30
 8001442:	d401      	bmi.n	8001448 <??ZbZclAttrRead_2>
 8001444:	208c      	movs	r0, #140	@ 0x8c
 8001446:	e032      	b.n	80014ae <??ZbZclAttrRead_1>

08001448 <??ZbZclAttrRead_2>:
 8001448:	2c00      	cmp	r4, #0
 800144a:	d002      	beq.n	8001452 <??ZbZclAttrRead_3>
 800144c:	68b8      	ldr	r0, [r7, #8]
 800144e:	7880      	ldrb	r0, [r0, #2]
 8001450:	7020      	strb	r0, [r4, #0]

08001452 <??ZbZclAttrRead_3>:
 8001452:	2d00      	cmp	r5, #0
 8001454:	d001      	beq.n	800145a <??ZbZclAttrRead_4>
 8001456:	2e00      	cmp	r6, #0
 8001458:	d105      	bne.n	8001466 <??ZbZclAttrRead_5>

0800145a <??ZbZclAttrRead_4>:
 800145a:	2c00      	cmp	r4, #0
 800145c:	d001      	beq.n	8001462 <??ZbZclAttrRead_6>
 800145e:	2000      	movs	r0, #0
 8001460:	e025      	b.n	80014ae <??ZbZclAttrRead_1>

08001462 <??ZbZclAttrRead_6>:
 8001462:	2089      	movs	r0, #137	@ 0x89
 8001464:	e023      	b.n	80014ae <??ZbZclAttrRead_1>

08001466 <??ZbZclAttrRead_5>:
 8001466:	68b8      	ldr	r0, [r7, #8]
 8001468:	7900      	ldrb	r0, [r0, #4]
 800146a:	06c0      	lsls	r0, r0, #27
 800146c:	d519      	bpl.n	80014a2 <??ZbZclAttrRead_7>
 800146e:	f05f 0920 	movs.w	r9, #32
 8001472:	f05f 0a00 	movs.w	sl, #0
 8001476:	46eb      	mov	fp, sp
 8001478:	4652      	mov	r2, sl
 800147a:	4649      	mov	r1, r9
 800147c:	4658      	mov	r0, fp
 800147e:	f004 fb48 	bl	8005b12 <__aeabi_memset>
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	9000      	str	r0, [sp, #0]
 8001486:	2000      	movs	r0, #0
 8001488:	f88d 0004 	strb.w	r0, [sp, #4]
 800148c:	9502      	str	r5, [sp, #8]
 800148e:	9603      	str	r6, [sp, #12]
 8001490:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8001494:	9007      	str	r0, [sp, #28]
 8001496:	466a      	mov	r2, sp
 8001498:	0039      	movs	r1, r7
 800149a:	4640      	mov	r0, r8
 800149c:	f001 fce6 	bl	8002e6c <ZbZclAttrCallbackExec>
 80014a0:	e005      	b.n	80014ae <??ZbZclAttrRead_1>

080014a2 <??ZbZclAttrRead_7>:
 80014a2:	0033      	movs	r3, r6
 80014a4:	002a      	movs	r2, r5
 80014a6:	0039      	movs	r1, r7
 80014a8:	4640      	mov	r0, r8
 80014aa:	f000 f803 	bl	80014b4 <ZbZclAttrDefaultRead>

080014ae <??ZbZclAttrRead_1>:
 80014ae:	b009      	add	sp, #36	@ 0x24
 80014b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080014b4 <ZbZclAttrDefaultRead>:
 80014b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014b8:	0005      	movs	r5, r0
 80014ba:	000e      	movs	r6, r1
 80014bc:	0017      	movs	r7, r2
 80014be:	001c      	movs	r4, r3
 80014c0:	f05f 0800 	movs.w	r8, #0
 80014c4:	f05f 0900 	movs.w	r9, #0
 80014c8:	68b0      	ldr	r0, [r6, #8]
 80014ca:	7880      	ldrb	r0, [r0, #2]
 80014cc:	2808      	cmp	r0, #8
 80014ce:	d065      	beq.n	800159c <??ZbZclAttrDefaultRead_0>
 80014d0:	2809      	cmp	r0, #9
 80014d2:	d06b      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 80014d4:	280a      	cmp	r0, #10
 80014d6:	d071      	beq.n	80015bc <??ZbZclAttrDefaultRead_2>
 80014d8:	280b      	cmp	r0, #11
 80014da:	d077      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 80014dc:	280c      	cmp	r0, #12
 80014de:	d07d      	beq.n	80015dc <??ZbZclAttrDefaultRead_4>
 80014e0:	280d      	cmp	r0, #13
 80014e2:	f000 8083 	beq.w	80015ec <??ZbZclAttrDefaultRead_5>
 80014e6:	280e      	cmp	r0, #14
 80014e8:	f000 8088 	beq.w	80015fc <??ZbZclAttrDefaultRead_6>
 80014ec:	280f      	cmp	r0, #15
 80014ee:	f000 808d 	beq.w	800160c <??ZbZclAttrDefaultRead_7>
 80014f2:	2810      	cmp	r0, #16
 80014f4:	d052      	beq.n	800159c <??ZbZclAttrDefaultRead_0>
 80014f6:	2818      	cmp	r0, #24
 80014f8:	d050      	beq.n	800159c <??ZbZclAttrDefaultRead_0>
 80014fa:	2819      	cmp	r0, #25
 80014fc:	d056      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 80014fe:	281a      	cmp	r0, #26
 8001500:	d05c      	beq.n	80015bc <??ZbZclAttrDefaultRead_2>
 8001502:	281b      	cmp	r0, #27
 8001504:	d062      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 8001506:	281c      	cmp	r0, #28
 8001508:	d068      	beq.n	80015dc <??ZbZclAttrDefaultRead_4>
 800150a:	281d      	cmp	r0, #29
 800150c:	d06e      	beq.n	80015ec <??ZbZclAttrDefaultRead_5>
 800150e:	281e      	cmp	r0, #30
 8001510:	d074      	beq.n	80015fc <??ZbZclAttrDefaultRead_6>
 8001512:	281f      	cmp	r0, #31
 8001514:	d07a      	beq.n	800160c <??ZbZclAttrDefaultRead_7>
 8001516:	2820      	cmp	r0, #32
 8001518:	d040      	beq.n	800159c <??ZbZclAttrDefaultRead_0>
 800151a:	2821      	cmp	r0, #33	@ 0x21
 800151c:	d046      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 800151e:	2822      	cmp	r0, #34	@ 0x22
 8001520:	d04c      	beq.n	80015bc <??ZbZclAttrDefaultRead_2>
 8001522:	2823      	cmp	r0, #35	@ 0x23
 8001524:	d052      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 8001526:	2824      	cmp	r0, #36	@ 0x24
 8001528:	d058      	beq.n	80015dc <??ZbZclAttrDefaultRead_4>
 800152a:	2825      	cmp	r0, #37	@ 0x25
 800152c:	d05e      	beq.n	80015ec <??ZbZclAttrDefaultRead_5>
 800152e:	2826      	cmp	r0, #38	@ 0x26
 8001530:	d064      	beq.n	80015fc <??ZbZclAttrDefaultRead_6>
 8001532:	2827      	cmp	r0, #39	@ 0x27
 8001534:	d06a      	beq.n	800160c <??ZbZclAttrDefaultRead_7>
 8001536:	2828      	cmp	r0, #40	@ 0x28
 8001538:	d030      	beq.n	800159c <??ZbZclAttrDefaultRead_0>
 800153a:	2829      	cmp	r0, #41	@ 0x29
 800153c:	d036      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 800153e:	282a      	cmp	r0, #42	@ 0x2a
 8001540:	d03c      	beq.n	80015bc <??ZbZclAttrDefaultRead_2>
 8001542:	282b      	cmp	r0, #43	@ 0x2b
 8001544:	d042      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 8001546:	282c      	cmp	r0, #44	@ 0x2c
 8001548:	d048      	beq.n	80015dc <??ZbZclAttrDefaultRead_4>
 800154a:	282d      	cmp	r0, #45	@ 0x2d
 800154c:	d04e      	beq.n	80015ec <??ZbZclAttrDefaultRead_5>
 800154e:	282e      	cmp	r0, #46	@ 0x2e
 8001550:	d054      	beq.n	80015fc <??ZbZclAttrDefaultRead_6>
 8001552:	282f      	cmp	r0, #47	@ 0x2f
 8001554:	d05a      	beq.n	800160c <??ZbZclAttrDefaultRead_7>
 8001556:	2830      	cmp	r0, #48	@ 0x30
 8001558:	d020      	beq.n	800159c <??ZbZclAttrDefaultRead_0>
 800155a:	2831      	cmp	r0, #49	@ 0x31
 800155c:	d026      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 800155e:	2838      	cmp	r0, #56	@ 0x38
 8001560:	d024      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 8001562:	2839      	cmp	r0, #57	@ 0x39
 8001564:	d032      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 8001566:	283a      	cmp	r0, #58	@ 0x3a
 8001568:	d050      	beq.n	800160c <??ZbZclAttrDefaultRead_7>
 800156a:	2841      	cmp	r0, #65	@ 0x41
 800156c:	d05e      	beq.n	800162c <??ZbZclAttrDefaultRead_8>
 800156e:	2842      	cmp	r0, #66	@ 0x42
 8001570:	d05c      	beq.n	800162c <??ZbZclAttrDefaultRead_8>
 8001572:	2843      	cmp	r0, #67	@ 0x43
 8001574:	d071      	beq.n	800165a <??ZbZclAttrDefaultRead_9>
 8001576:	2844      	cmp	r0, #68	@ 0x44
 8001578:	d06f      	beq.n	800165a <??ZbZclAttrDefaultRead_9>
 800157a:	28e0      	cmp	r0, #224	@ 0xe0
 800157c:	d026      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 800157e:	28e1      	cmp	r0, #225	@ 0xe1
 8001580:	d024      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 8001582:	28e2      	cmp	r0, #226	@ 0xe2
 8001584:	d022      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 8001586:	28e8      	cmp	r0, #232	@ 0xe8
 8001588:	d010      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 800158a:	28e9      	cmp	r0, #233	@ 0xe9
 800158c:	d00e      	beq.n	80015ac <??ZbZclAttrDefaultRead_1>
 800158e:	28ea      	cmp	r0, #234	@ 0xea
 8001590:	d01c      	beq.n	80015cc <??ZbZclAttrDefaultRead_3>
 8001592:	28f0      	cmp	r0, #240	@ 0xf0
 8001594:	d03a      	beq.n	800160c <??ZbZclAttrDefaultRead_7>
 8001596:	28f1      	cmp	r0, #241	@ 0xf1
 8001598:	d040      	beq.n	800161c <??ZbZclAttrDefaultRead_10>
 800159a:	e078      	b.n	800168e <??ZbZclAttrDefaultRead_11>

0800159c <??ZbZclAttrDefaultRead_0>:
 800159c:	2c00      	cmp	r4, #0
 800159e:	d102      	bne.n	80015a6 <??ZbZclAttrDefaultRead_12>
 80015a0:	2089      	movs	r0, #137	@ 0x89
 80015a2:	4681      	mov	r9, r0
 80015a4:	e075      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015a6 <??ZbZclAttrDefaultRead_12>:
 80015a6:	2001      	movs	r0, #1
 80015a8:	4680      	mov	r8, r0
 80015aa:	e072      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015ac <??ZbZclAttrDefaultRead_1>:
 80015ac:	2c02      	cmp	r4, #2
 80015ae:	d202      	bcs.n	80015b6 <??ZbZclAttrDefaultRead_14>
 80015b0:	2089      	movs	r0, #137	@ 0x89
 80015b2:	4681      	mov	r9, r0
 80015b4:	e06d      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015b6 <??ZbZclAttrDefaultRead_14>:
 80015b6:	2002      	movs	r0, #2
 80015b8:	4680      	mov	r8, r0
 80015ba:	e06a      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015bc <??ZbZclAttrDefaultRead_2>:
 80015bc:	2c03      	cmp	r4, #3
 80015be:	d202      	bcs.n	80015c6 <??ZbZclAttrDefaultRead_15>
 80015c0:	2089      	movs	r0, #137	@ 0x89
 80015c2:	4681      	mov	r9, r0
 80015c4:	e065      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015c6 <??ZbZclAttrDefaultRead_15>:
 80015c6:	2003      	movs	r0, #3
 80015c8:	4680      	mov	r8, r0
 80015ca:	e062      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015cc <??ZbZclAttrDefaultRead_3>:
 80015cc:	2c04      	cmp	r4, #4
 80015ce:	d202      	bcs.n	80015d6 <??ZbZclAttrDefaultRead_16>
 80015d0:	2089      	movs	r0, #137	@ 0x89
 80015d2:	4681      	mov	r9, r0
 80015d4:	e05d      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015d6 <??ZbZclAttrDefaultRead_16>:
 80015d6:	2004      	movs	r0, #4
 80015d8:	4680      	mov	r8, r0
 80015da:	e05a      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015dc <??ZbZclAttrDefaultRead_4>:
 80015dc:	2c05      	cmp	r4, #5
 80015de:	d202      	bcs.n	80015e6 <??ZbZclAttrDefaultRead_17>
 80015e0:	2089      	movs	r0, #137	@ 0x89
 80015e2:	4681      	mov	r9, r0
 80015e4:	e055      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015e6 <??ZbZclAttrDefaultRead_17>:
 80015e6:	2005      	movs	r0, #5
 80015e8:	4680      	mov	r8, r0
 80015ea:	e052      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015ec <??ZbZclAttrDefaultRead_5>:
 80015ec:	2c06      	cmp	r4, #6
 80015ee:	d202      	bcs.n	80015f6 <??ZbZclAttrDefaultRead_18>
 80015f0:	2089      	movs	r0, #137	@ 0x89
 80015f2:	4681      	mov	r9, r0
 80015f4:	e04d      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015f6 <??ZbZclAttrDefaultRead_18>:
 80015f6:	2006      	movs	r0, #6
 80015f8:	4680      	mov	r8, r0
 80015fa:	e04a      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

080015fc <??ZbZclAttrDefaultRead_6>:
 80015fc:	2c07      	cmp	r4, #7
 80015fe:	d202      	bcs.n	8001606 <??ZbZclAttrDefaultRead_19>
 8001600:	2089      	movs	r0, #137	@ 0x89
 8001602:	4681      	mov	r9, r0
 8001604:	e045      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

08001606 <??ZbZclAttrDefaultRead_19>:
 8001606:	2007      	movs	r0, #7
 8001608:	4680      	mov	r8, r0
 800160a:	e042      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

0800160c <??ZbZclAttrDefaultRead_7>:
 800160c:	2c08      	cmp	r4, #8
 800160e:	d202      	bcs.n	8001616 <??ZbZclAttrDefaultRead_20>
 8001610:	2089      	movs	r0, #137	@ 0x89
 8001612:	4681      	mov	r9, r0
 8001614:	e03d      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

08001616 <??ZbZclAttrDefaultRead_20>:
 8001616:	2008      	movs	r0, #8
 8001618:	4680      	mov	r8, r0
 800161a:	e03a      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

0800161c <??ZbZclAttrDefaultRead_10>:
 800161c:	2c10      	cmp	r4, #16
 800161e:	d202      	bcs.n	8001626 <??ZbZclAttrDefaultRead_21>
 8001620:	2089      	movs	r0, #137	@ 0x89
 8001622:	4681      	mov	r9, r0
 8001624:	e035      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

08001626 <??ZbZclAttrDefaultRead_21>:
 8001626:	2010      	movs	r0, #16
 8001628:	4680      	mov	r8, r0
 800162a:	e032      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

0800162c <??ZbZclAttrDefaultRead_8>:
 800162c:	2c00      	cmp	r4, #0
 800162e:	d102      	bne.n	8001636 <??ZbZclAttrDefaultRead_22>
 8001630:	2089      	movs	r0, #137	@ 0x89
 8001632:	4681      	mov	r9, r0
 8001634:	e02d      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

08001636 <??ZbZclAttrDefaultRead_22>:
 8001636:	68f0      	ldr	r0, [r6, #12]
 8001638:	7800      	ldrb	r0, [r0, #0]
 800163a:	0001      	movs	r1, r0
 800163c:	b2c9      	uxtb	r1, r1
 800163e:	29ff      	cmp	r1, #255	@ 0xff
 8001640:	d101      	bne.n	8001646 <??ZbZclAttrDefaultRead_23>
 8001642:	2100      	movs	r1, #0
 8001644:	0008      	movs	r0, r1

08001646 <??ZbZclAttrDefaultRead_23>:
 8001646:	0001      	movs	r1, r0
 8001648:	b2c9      	uxtb	r1, r1
 800164a:	1c49      	adds	r1, r1, #1
 800164c:	4688      	mov	r8, r1
 800164e:	4544      	cmp	r4, r8
 8001650:	d202      	bcs.n	8001658 <??ZbZclAttrDefaultRead_24>
 8001652:	2189      	movs	r1, #137	@ 0x89
 8001654:	4689      	mov	r9, r1
 8001656:	e01c      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

08001658 <??ZbZclAttrDefaultRead_24>:
 8001658:	e01b      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

0800165a <??ZbZclAttrDefaultRead_9>:
 800165a:	2c00      	cmp	r4, #0
 800165c:	d102      	bne.n	8001664 <??ZbZclAttrDefaultRead_25>
 800165e:	2089      	movs	r0, #137	@ 0x89
 8001660:	4681      	mov	r9, r0
 8001662:	e016      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

08001664 <??ZbZclAttrDefaultRead_25>:
 8001664:	68f0      	ldr	r0, [r6, #12]
 8001666:	f7ff fd01 	bl	800106c <pletoh16>
 800166a:	0001      	movs	r1, r0
 800166c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001670:	b289      	uxth	r1, r1
 8001672:	4291      	cmp	r1, r2
 8001674:	d101      	bne.n	800167a <??ZbZclAttrDefaultRead_26>
 8001676:	2100      	movs	r1, #0
 8001678:	0008      	movs	r0, r1

0800167a <??ZbZclAttrDefaultRead_26>:
 800167a:	0001      	movs	r1, r0
 800167c:	b289      	uxth	r1, r1
 800167e:	1c89      	adds	r1, r1, #2
 8001680:	4688      	mov	r8, r1
 8001682:	4544      	cmp	r4, r8
 8001684:	d202      	bcs.n	800168c <??ZbZclAttrDefaultRead_27>
 8001686:	2189      	movs	r1, #137	@ 0x89
 8001688:	4689      	mov	r9, r1
 800168a:	e002      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

0800168c <??ZbZclAttrDefaultRead_27>:
 800168c:	e001      	b.n	8001692 <??ZbZclAttrDefaultRead_13>

0800168e <??ZbZclAttrDefaultRead_11>:
 800168e:	2086      	movs	r0, #134	@ 0x86
 8001690:	4681      	mov	r9, r0

08001692 <??ZbZclAttrDefaultRead_13>:
 8001692:	4648      	mov	r0, r9
 8001694:	b2c0      	uxtb	r0, r0
 8001696:	2800      	cmp	r0, #0
 8001698:	d109      	bne.n	80016ae <??ZbZclAttrDefaultRead_28>
 800169a:	f8cd 8000 	str.w	r8, [sp]
 800169e:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80016a2:	46bb      	mov	fp, r7
 80016a4:	9a00      	ldr	r2, [sp, #0]
 80016a6:	4651      	mov	r1, sl
 80016a8:	4658      	mov	r0, fp
 80016aa:	f015 fcf4 	bl	8017096 <__aeabi_memcpy>

080016ae <??ZbZclAttrDefaultRead_28>:
 80016ae:	4648      	mov	r0, r9
 80016b0:	b2c0      	uxtb	r0, r0
 80016b2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080016b6 <ZbZclAttrWrite>:
 80016b6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016ba:	b096      	sub	sp, #88	@ 0x58
 80016bc:	4680      	mov	r8, r0
 80016be:	4699      	mov	r9, r3
 80016c0:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 80016c4:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80016c6:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80016ca:	4640      	mov	r0, r8
 80016cc:	f7ff fd9d 	bl	800120a <ZbZclAttrFind>
 80016d0:	0006      	movs	r6, r0
 80016d2:	2e00      	cmp	r6, #0
 80016d4:	d101      	bne.n	80016da <??ZbZclAttrWrite_0>
 80016d6:	2086      	movs	r0, #134	@ 0x86
 80016d8:	e0a2      	b.n	8001820 <??ZbZclAttrWrite_1>

080016da <??ZbZclAttrWrite_0>:
 80016da:	68b0      	ldr	r0, [r6, #8]
 80016dc:	7900      	ldrb	r0, [r0, #4]
 80016de:	f010 0001 	ands.w	r0, r0, #1
 80016e2:	b2c0      	uxtb	r0, r0
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d105      	bne.n	80016f4 <??ZbZclAttrWrite_2>
 80016e8:	0038      	movs	r0, r7
 80016ea:	b280      	uxth	r0, r0
 80016ec:	0780      	lsls	r0, r0, #30
 80016ee:	d401      	bmi.n	80016f4 <??ZbZclAttrWrite_2>
 80016f0:	2088      	movs	r0, #136	@ 0x88
 80016f2:	e095      	b.n	8001820 <??ZbZclAttrWrite_1>

080016f4 <??ZbZclAttrWrite_2>:
 80016f4:	2300      	movs	r3, #0
 80016f6:	4652      	mov	r2, sl
 80016f8:	4649      	mov	r1, r9
 80016fa:	68b0      	ldr	r0, [r6, #8]
 80016fc:	7880      	ldrb	r0, [r0, #2]
 80016fe:	f000 fcb0 	bl	8002062 <ZbZclAttrParseLength>
 8001702:	9005      	str	r0, [sp, #20]
 8001704:	9805      	ldr	r0, [sp, #20]
 8001706:	2800      	cmp	r0, #0
 8001708:	d501      	bpl.n	800170e <??ZbZclAttrWrite_3>
 800170a:	2087      	movs	r0, #135	@ 0x87
 800170c:	e088      	b.n	8001820 <??ZbZclAttrWrite_1>

0800170e <??ZbZclAttrWrite_3>:
 800170e:	68b0      	ldr	r0, [r6, #8]
 8001710:	7880      	ldrb	r0, [r0, #2]
 8001712:	f000 ff83 	bl	800261c <ZbZclAttrIsInteger>
 8001716:	2800      	cmp	r0, #0
 8001718:	d026      	beq.n	8001768 <??ZbZclAttrWrite_4>
 800171a:	aa04      	add	r2, sp, #16
 800171c:	4649      	mov	r1, r9
 800171e:	68b0      	ldr	r0, [r6, #8]
 8001720:	7880      	ldrb	r0, [r0, #2]
 8001722:	f000 fe4d 	bl	80023c0 <ZbZclParseInteger>
 8001726:	0004      	movs	r4, r0
 8001728:	000d      	movs	r5, r1
 800172a:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800172e:	2800      	cmp	r0, #0
 8001730:	d002      	beq.n	8001738 <??ZbZclAttrWrite_5>
 8001732:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001736:	e073      	b.n	8001820 <??ZbZclAttrWrite_1>

08001738 <??ZbZclAttrWrite_5>:
 8001738:	68b0      	ldr	r0, [r6, #8]
 800173a:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 800173e:	f004 ff49 	bl	80065d4 <__aeabi_d2lz>
 8001742:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001746:	68b0      	ldr	r0, [r6, #8]
 8001748:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 800174c:	f004 ff42 	bl	80065d4 <__aeabi_d2lz>
 8001750:	e9cd 0100 	strd	r0, r1, [sp]
 8001754:	68b0      	ldr	r0, [r6, #8]
 8001756:	7882      	ldrb	r2, [r0, #2]
 8001758:	0020      	movs	r0, r4
 800175a:	0029      	movs	r1, r5
 800175c:	f000 ff74 	bl	8002648 <ZbZclAttrIntegerRangeCheck>
 8001760:	2800      	cmp	r0, #0
 8001762:	d101      	bne.n	8001768 <??ZbZclAttrWrite_4>
 8001764:	2087      	movs	r0, #135	@ 0x87
 8001766:	e05b      	b.n	8001820 <??ZbZclAttrWrite_1>

08001768 <??ZbZclAttrWrite_4>:
 8001768:	68b0      	ldr	r0, [r6, #8]
 800176a:	7900      	ldrb	r0, [r0, #4]
 800176c:	0680      	lsls	r0, r0, #26
 800176e:	d522      	bpl.n	80017b6 <??ZbZclAttrWrite_6>
 8001770:	2420      	movs	r4, #32
 8001772:	2500      	movs	r5, #0
 8001774:	f10d 0b18 	add.w	fp, sp, #24
 8001778:	002a      	movs	r2, r5
 800177a:	0021      	movs	r1, r4
 800177c:	4658      	mov	r0, fp
 800177e:	f004 f9c8 	bl	8005b12 <__aeabi_memset>
 8001782:	68b0      	ldr	r0, [r6, #8]
 8001784:	9006      	str	r0, [sp, #24]
 8001786:	2001      	movs	r0, #1
 8001788:	f88d 001c 	strb.w	r0, [sp, #28]
 800178c:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800178e:	900c      	str	r0, [sp, #48]	@ 0x30
 8001790:	f8cd 9020 	str.w	r9, [sp, #32]
 8001794:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8001798:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 800179c:	68f0      	ldr	r0, [r6, #12]
 800179e:	900b      	str	r0, [sp, #44]	@ 0x2c
 80017a0:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80017a4:	900d      	str	r0, [sp, #52]	@ 0x34
 80017a6:	aa06      	add	r2, sp, #24
 80017a8:	0031      	movs	r1, r6
 80017aa:	4640      	mov	r0, r8
 80017ac:	f001 fb5e 	bl	8002e6c <ZbZclAttrCallbackExec>
 80017b0:	f88d 0010 	strb.w	r0, [sp, #16]
 80017b4:	e028      	b.n	8001808 <??ZbZclAttrWrite_7>

080017b6 <??ZbZclAttrWrite_6>:
 80017b6:	003b      	movs	r3, r7
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	464a      	mov	r2, r9
 80017bc:	0031      	movs	r1, r6
 80017be:	4640      	mov	r0, r8
 80017c0:	f000 f85e 	bl	8001880 <ZbZclAttrDefaultWrite>
 80017c4:	f88d 0010 	strb.w	r0, [sp, #16]
 80017c8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80017cc:	2800      	cmp	r0, #0
 80017ce:	d11b      	bne.n	8001808 <??ZbZclAttrWrite_7>
 80017d0:	68b0      	ldr	r0, [r6, #8]
 80017d2:	7900      	ldrb	r0, [r0, #4]
 80017d4:	0640      	lsls	r0, r0, #25
 80017d6:	d517      	bpl.n	8001808 <??ZbZclAttrWrite_7>
 80017d8:	2420      	movs	r4, #32
 80017da:	2500      	movs	r5, #0
 80017dc:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 80017e0:	002a      	movs	r2, r5
 80017e2:	0021      	movs	r1, r4
 80017e4:	4658      	mov	r0, fp
 80017e6:	f004 f994 	bl	8005b12 <__aeabi_memset>
 80017ea:	68b0      	ldr	r0, [r6, #8]
 80017ec:	900e      	str	r0, [sp, #56]	@ 0x38
 80017ee:	2002      	movs	r0, #2
 80017f0:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 80017f4:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80017f6:	9014      	str	r0, [sp, #80]	@ 0x50
 80017f8:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80017fc:	9015      	str	r0, [sp, #84]	@ 0x54
 80017fe:	aa0e      	add	r2, sp, #56	@ 0x38
 8001800:	0031      	movs	r1, r6
 8001802:	4640      	mov	r0, r8
 8001804:	f001 fb32 	bl	8002e6c <ZbZclAttrCallbackExec>

08001808 <??ZbZclAttrWrite_7>:
 8001808:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800180c:	2800      	cmp	r0, #0
 800180e:	d002      	beq.n	8001816 <??ZbZclAttrWrite_8>
 8001810:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001814:	e004      	b.n	8001820 <??ZbZclAttrWrite_1>

08001816 <??ZbZclAttrWrite_8>:
 8001816:	0031      	movs	r1, r6
 8001818:	4640      	mov	r0, r8
 800181a:	f000 f804 	bl	8001826 <ZbZclAttrPostWrite>
 800181e:	2000      	movs	r0, #0

08001820 <??ZbZclAttrWrite_1>:
 8001820:	b019      	add	sp, #100	@ 0x64
 8001822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001826 <ZbZclAttrPostWrite>:
 8001826:	b538      	push	{r3, r4, r5, lr}
 8001828:	0005      	movs	r5, r0
 800182a:	000c      	movs	r4, r1
 800182c:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800182e:	2800      	cmp	r0, #0
 8001830:	d004      	beq.n	800183c <??ZbZclAttrPostWrite_0>
 8001832:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001836:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8001838:	f012 faf0 	bl	8013e1c <ZbTimerReset>

0800183c <??ZbZclAttrPostWrite_0>:
 800183c:	2c00      	cmp	r4, #0
 800183e:	d005      	beq.n	800184c <??ZbZclAttrPostWrite_1>
 8001840:	2200      	movs	r2, #0
 8001842:	68a0      	ldr	r0, [r4, #8]
 8001844:	8801      	ldrh	r1, [r0, #0]
 8001846:	0028      	movs	r0, r5
 8001848:	f001 ffcb 	bl	80037e2 <zcl_attr_reporting_check>

0800184c <??ZbZclAttrPostWrite_1>:
 800184c:	bd31      	pop	{r0, r4, r5, pc}

0800184e <ZbZclAttrPersist>:
 800184e:	b570      	push	{r4, r5, r6, lr}
 8001850:	0005      	movs	r5, r0
 8001852:	000e      	movs	r6, r1
 8001854:	0031      	movs	r1, r6
 8001856:	b289      	uxth	r1, r1
 8001858:	0028      	movs	r0, r5
 800185a:	f7ff fcd6 	bl	800120a <ZbZclAttrFind>
 800185e:	0004      	movs	r4, r0
 8001860:	2c00      	cmp	r4, #0
 8001862:	d101      	bne.n	8001868 <??ZbZclAttrPersist_0>
 8001864:	2000      	movs	r0, #0
 8001866:	e00a      	b.n	800187e <??ZbZclAttrPersist_1>

08001868 <??ZbZclAttrPersist_0>:
 8001868:	68a0      	ldr	r0, [r4, #8]
 800186a:	7900      	ldrb	r0, [r0, #4]
 800186c:	0740      	lsls	r0, r0, #29
 800186e:	d401      	bmi.n	8001874 <??ZbZclAttrPersist_2>
 8001870:	2000      	movs	r0, #0
 8001872:	e004      	b.n	800187e <??ZbZclAttrPersist_1>

08001874 <??ZbZclAttrPersist_2>:
 8001874:	0021      	movs	r1, r4
 8001876:	0028      	movs	r0, r5
 8001878:	f7ff ffd5 	bl	8001826 <ZbZclAttrPostWrite>
 800187c:	2001      	movs	r0, #1

0800187e <??ZbZclAttrPersist_1>:
 800187e:	bd70      	pop	{r4, r5, r6, pc}

08001880 <ZbZclAttrDefaultWrite>:
 8001880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001884:	0006      	movs	r6, r0
 8001886:	000f      	movs	r7, r1
 8001888:	0014      	movs	r4, r2
 800188a:	4698      	mov	r8, r3
 800188c:	2500      	movs	r5, #0
 800188e:	f05f 0900 	movs.w	r9, #0
 8001892:	2c00      	cmp	r4, #0
 8001894:	d101      	bne.n	800189a <??ZbZclAttrDefaultWrite_0>
 8001896:	2001      	movs	r0, #1
 8001898:	e0d6      	b.n	8001a48 <??ZbZclAttrDefaultWrite_1>

0800189a <??ZbZclAttrDefaultWrite_0>:
 800189a:	68b8      	ldr	r0, [r7, #8]
 800189c:	7880      	ldrb	r0, [r0, #2]
 800189e:	2808      	cmp	r0, #8
 80018a0:	d062      	beq.n	8001968 <??ZbZclAttrDefaultWrite_2>
 80018a2:	2809      	cmp	r0, #9
 80018a4:	d063      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 80018a6:	280a      	cmp	r0, #10
 80018a8:	d064      	beq.n	8001974 <??ZbZclAttrDefaultWrite_4>
 80018aa:	280b      	cmp	r0, #11
 80018ac:	d065      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 80018ae:	280c      	cmp	r0, #12
 80018b0:	d066      	beq.n	8001980 <??ZbZclAttrDefaultWrite_6>
 80018b2:	280d      	cmp	r0, #13
 80018b4:	d067      	beq.n	8001986 <??ZbZclAttrDefaultWrite_7>
 80018b6:	280e      	cmp	r0, #14
 80018b8:	d068      	beq.n	800198c <??ZbZclAttrDefaultWrite_8>
 80018ba:	280f      	cmp	r0, #15
 80018bc:	d069      	beq.n	8001992 <??ZbZclAttrDefaultWrite_9>
 80018be:	2810      	cmp	r0, #16
 80018c0:	d052      	beq.n	8001968 <??ZbZclAttrDefaultWrite_2>
 80018c2:	2818      	cmp	r0, #24
 80018c4:	d050      	beq.n	8001968 <??ZbZclAttrDefaultWrite_2>
 80018c6:	2819      	cmp	r0, #25
 80018c8:	d051      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 80018ca:	281a      	cmp	r0, #26
 80018cc:	d052      	beq.n	8001974 <??ZbZclAttrDefaultWrite_4>
 80018ce:	281b      	cmp	r0, #27
 80018d0:	d053      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 80018d2:	281c      	cmp	r0, #28
 80018d4:	d054      	beq.n	8001980 <??ZbZclAttrDefaultWrite_6>
 80018d6:	281d      	cmp	r0, #29
 80018d8:	d055      	beq.n	8001986 <??ZbZclAttrDefaultWrite_7>
 80018da:	281e      	cmp	r0, #30
 80018dc:	d056      	beq.n	800198c <??ZbZclAttrDefaultWrite_8>
 80018de:	281f      	cmp	r0, #31
 80018e0:	d057      	beq.n	8001992 <??ZbZclAttrDefaultWrite_9>
 80018e2:	2820      	cmp	r0, #32
 80018e4:	d040      	beq.n	8001968 <??ZbZclAttrDefaultWrite_2>
 80018e6:	2821      	cmp	r0, #33	@ 0x21
 80018e8:	d041      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 80018ea:	2822      	cmp	r0, #34	@ 0x22
 80018ec:	d042      	beq.n	8001974 <??ZbZclAttrDefaultWrite_4>
 80018ee:	2823      	cmp	r0, #35	@ 0x23
 80018f0:	d043      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 80018f2:	2824      	cmp	r0, #36	@ 0x24
 80018f4:	d044      	beq.n	8001980 <??ZbZclAttrDefaultWrite_6>
 80018f6:	2825      	cmp	r0, #37	@ 0x25
 80018f8:	d045      	beq.n	8001986 <??ZbZclAttrDefaultWrite_7>
 80018fa:	2826      	cmp	r0, #38	@ 0x26
 80018fc:	d046      	beq.n	800198c <??ZbZclAttrDefaultWrite_8>
 80018fe:	2827      	cmp	r0, #39	@ 0x27
 8001900:	d047      	beq.n	8001992 <??ZbZclAttrDefaultWrite_9>
 8001902:	2828      	cmp	r0, #40	@ 0x28
 8001904:	d030      	beq.n	8001968 <??ZbZclAttrDefaultWrite_2>
 8001906:	2829      	cmp	r0, #41	@ 0x29
 8001908:	d031      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 800190a:	282a      	cmp	r0, #42	@ 0x2a
 800190c:	d032      	beq.n	8001974 <??ZbZclAttrDefaultWrite_4>
 800190e:	282b      	cmp	r0, #43	@ 0x2b
 8001910:	d033      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 8001912:	282c      	cmp	r0, #44	@ 0x2c
 8001914:	d034      	beq.n	8001980 <??ZbZclAttrDefaultWrite_6>
 8001916:	282d      	cmp	r0, #45	@ 0x2d
 8001918:	d035      	beq.n	8001986 <??ZbZclAttrDefaultWrite_7>
 800191a:	282e      	cmp	r0, #46	@ 0x2e
 800191c:	d036      	beq.n	800198c <??ZbZclAttrDefaultWrite_8>
 800191e:	282f      	cmp	r0, #47	@ 0x2f
 8001920:	d037      	beq.n	8001992 <??ZbZclAttrDefaultWrite_9>
 8001922:	2830      	cmp	r0, #48	@ 0x30
 8001924:	d020      	beq.n	8001968 <??ZbZclAttrDefaultWrite_2>
 8001926:	2831      	cmp	r0, #49	@ 0x31
 8001928:	d021      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 800192a:	2838      	cmp	r0, #56	@ 0x38
 800192c:	d01f      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 800192e:	2839      	cmp	r0, #57	@ 0x39
 8001930:	d023      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 8001932:	283a      	cmp	r0, #58	@ 0x3a
 8001934:	d02d      	beq.n	8001992 <??ZbZclAttrDefaultWrite_9>
 8001936:	2841      	cmp	r0, #65	@ 0x41
 8001938:	d031      	beq.n	800199e <??ZbZclAttrDefaultWrite_10>
 800193a:	2842      	cmp	r0, #66	@ 0x42
 800193c:	d02f      	beq.n	800199e <??ZbZclAttrDefaultWrite_10>
 800193e:	2843      	cmp	r0, #67	@ 0x43
 8001940:	d049      	beq.n	80019d6 <??ZbZclAttrDefaultWrite_11>
 8001942:	2844      	cmp	r0, #68	@ 0x44
 8001944:	d047      	beq.n	80019d6 <??ZbZclAttrDefaultWrite_11>
 8001946:	28e0      	cmp	r0, #224	@ 0xe0
 8001948:	d017      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 800194a:	28e1      	cmp	r0, #225	@ 0xe1
 800194c:	d015      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 800194e:	28e2      	cmp	r0, #226	@ 0xe2
 8001950:	d013      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 8001952:	28e8      	cmp	r0, #232	@ 0xe8
 8001954:	d00b      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 8001956:	28e9      	cmp	r0, #233	@ 0xe9
 8001958:	d009      	beq.n	800196e <??ZbZclAttrDefaultWrite_3>
 800195a:	28ea      	cmp	r0, #234	@ 0xea
 800195c:	d00d      	beq.n	800197a <??ZbZclAttrDefaultWrite_5>
 800195e:	28f0      	cmp	r0, #240	@ 0xf0
 8001960:	d017      	beq.n	8001992 <??ZbZclAttrDefaultWrite_9>
 8001962:	28f1      	cmp	r0, #241	@ 0xf1
 8001964:	d018      	beq.n	8001998 <??ZbZclAttrDefaultWrite_12>
 8001966:	e058      	b.n	8001a1a <??ZbZclAttrDefaultWrite_13>

08001968 <??ZbZclAttrDefaultWrite_2>:
 8001968:	2001      	movs	r0, #1
 800196a:	0005      	movs	r5, r0
 800196c:	e057      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

0800196e <??ZbZclAttrDefaultWrite_3>:
 800196e:	2002      	movs	r0, #2
 8001970:	0005      	movs	r5, r0
 8001972:	e054      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001974 <??ZbZclAttrDefaultWrite_4>:
 8001974:	2003      	movs	r0, #3
 8001976:	0005      	movs	r5, r0
 8001978:	e051      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

0800197a <??ZbZclAttrDefaultWrite_5>:
 800197a:	2004      	movs	r0, #4
 800197c:	0005      	movs	r5, r0
 800197e:	e04e      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001980 <??ZbZclAttrDefaultWrite_6>:
 8001980:	2005      	movs	r0, #5
 8001982:	0005      	movs	r5, r0
 8001984:	e04b      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001986 <??ZbZclAttrDefaultWrite_7>:
 8001986:	2006      	movs	r0, #6
 8001988:	0005      	movs	r5, r0
 800198a:	e048      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

0800198c <??ZbZclAttrDefaultWrite_8>:
 800198c:	2007      	movs	r0, #7
 800198e:	0005      	movs	r5, r0
 8001990:	e045      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001992 <??ZbZclAttrDefaultWrite_9>:
 8001992:	2008      	movs	r0, #8
 8001994:	0005      	movs	r5, r0
 8001996:	e042      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001998 <??ZbZclAttrDefaultWrite_12>:
 8001998:	2010      	movs	r0, #16
 800199a:	0005      	movs	r5, r0
 800199c:	e03f      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

0800199e <??ZbZclAttrDefaultWrite_10>:
 800199e:	6938      	ldr	r0, [r7, #16]
 80019a0:	2800      	cmp	r0, #0
 80019a2:	d102      	bne.n	80019aa <??ZbZclAttrDefaultWrite_15>
 80019a4:	2089      	movs	r0, #137	@ 0x89
 80019a6:	4681      	mov	r9, r0
 80019a8:	e039      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

080019aa <??ZbZclAttrDefaultWrite_15>:
 80019aa:	7820      	ldrb	r0, [r4, #0]
 80019ac:	0001      	movs	r1, r0
 80019ae:	b2c9      	uxtb	r1, r1
 80019b0:	29ff      	cmp	r1, #255	@ 0xff
 80019b2:	d105      	bne.n	80019c0 <??ZbZclAttrDefaultWrite_16>
 80019b4:	21ff      	movs	r1, #255	@ 0xff
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	7011      	strb	r1, [r2, #0]
 80019ba:	2100      	movs	r1, #0
 80019bc:	000d      	movs	r5, r1
 80019be:	e02e      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

080019c0 <??ZbZclAttrDefaultWrite_16>:
 80019c0:	0001      	movs	r1, r0
 80019c2:	b2c9      	uxtb	r1, r1
 80019c4:	1c49      	adds	r1, r1, #1
 80019c6:	000d      	movs	r5, r1
 80019c8:	6939      	ldr	r1, [r7, #16]
 80019ca:	42a9      	cmp	r1, r5
 80019cc:	d202      	bcs.n	80019d4 <??ZbZclAttrDefaultWrite_17>
 80019ce:	2189      	movs	r1, #137	@ 0x89
 80019d0:	4689      	mov	r9, r1
 80019d2:	e024      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

080019d4 <??ZbZclAttrDefaultWrite_17>:
 80019d4:	e023      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

080019d6 <??ZbZclAttrDefaultWrite_11>:
 80019d6:	6938      	ldr	r0, [r7, #16]
 80019d8:	2802      	cmp	r0, #2
 80019da:	d202      	bcs.n	80019e2 <??ZbZclAttrDefaultWrite_18>
 80019dc:	2089      	movs	r0, #137	@ 0x89
 80019de:	4681      	mov	r9, r0
 80019e0:	e01d      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

080019e2 <??ZbZclAttrDefaultWrite_18>:
 80019e2:	0020      	movs	r0, r4
 80019e4:	f7ff fb42 	bl	800106c <pletoh16>
 80019e8:	4682      	mov	sl, r0
 80019ea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80019ee:	4650      	mov	r0, sl
 80019f0:	000a      	movs	r2, r1
 80019f2:	b280      	uxth	r0, r0
 80019f4:	4290      	cmp	r0, r2
 80019f6:	d105      	bne.n	8001a04 <??ZbZclAttrDefaultWrite_19>
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f7ff fb83 	bl	8001104 <putle16>
 80019fe:	2000      	movs	r0, #0
 8001a00:	0005      	movs	r5, r0
 8001a02:	e00c      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001a04 <??ZbZclAttrDefaultWrite_19>:
 8001a04:	4650      	mov	r0, sl
 8001a06:	b280      	uxth	r0, r0
 8001a08:	1c80      	adds	r0, r0, #2
 8001a0a:	0005      	movs	r5, r0
 8001a0c:	6938      	ldr	r0, [r7, #16]
 8001a0e:	42a8      	cmp	r0, r5
 8001a10:	d202      	bcs.n	8001a18 <??ZbZclAttrDefaultWrite_20>
 8001a12:	2089      	movs	r0, #137	@ 0x89
 8001a14:	4681      	mov	r9, r0
 8001a16:	e002      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001a18 <??ZbZclAttrDefaultWrite_20>:
 8001a18:	e001      	b.n	8001a1e <??ZbZclAttrDefaultWrite_14>

08001a1a <??ZbZclAttrDefaultWrite_13>:
 8001a1a:	2086      	movs	r0, #134	@ 0x86
 8001a1c:	4681      	mov	r9, r0

08001a1e <??ZbZclAttrDefaultWrite_14>:
 8001a1e:	4648      	mov	r0, r9
 8001a20:	b2c0      	uxtb	r0, r0
 8001a22:	2800      	cmp	r0, #0
 8001a24:	d10e      	bne.n	8001a44 <??ZbZclAttrDefaultWrite_21>
 8001a26:	4640      	mov	r0, r8
 8001a28:	b280      	uxth	r0, r0
 8001a2a:	07c0      	lsls	r0, r0, #31
 8001a2c:	d40a      	bmi.n	8001a44 <??ZbZclAttrDefaultWrite_21>
 8001a2e:	2d00      	cmp	r5, #0
 8001a30:	d008      	beq.n	8001a44 <??ZbZclAttrDefaultWrite_21>
 8001a32:	9500      	str	r5, [sp, #0]
 8001a34:	46a2      	mov	sl, r4
 8001a36:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8001a3a:	9a00      	ldr	r2, [sp, #0]
 8001a3c:	4651      	mov	r1, sl
 8001a3e:	4658      	mov	r0, fp
 8001a40:	f015 fb29 	bl	8017096 <__aeabi_memcpy>

08001a44 <??ZbZclAttrDefaultWrite_21>:
 8001a44:	4648      	mov	r0, r9
 8001a46:	b2c0      	uxtb	r0, r0

08001a48 <??ZbZclAttrDefaultWrite_1>:
 8001a48:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001a4c <ZbZclAttrDefaultValue>:
 8001a4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a50:	0004      	movs	r4, r0
 8001a52:	4688      	mov	r8, r1
 8001a54:	0015      	movs	r5, r2
 8001a56:	2600      	movs	r6, #0
 8001a58:	f05f 37ff 	movs.w	r7, #4294967295
 8001a5c:	0020      	movs	r0, r4
 8001a5e:	b2c0      	uxtb	r0, r0
 8001a60:	2800      	cmp	r0, #0
 8001a62:	f000 80a1 	beq.w	8001ba8 <??ZbZclAttrDefaultValue_0>
 8001a66:	2808      	cmp	r0, #8
 8001a68:	f000 80e7 	beq.w	8001c3a <??ZbZclAttrDefaultValue_1>
 8001a6c:	2809      	cmp	r0, #9
 8001a6e:	f000 80da 	beq.w	8001c26 <??ZbZclAttrDefaultValue_2>
 8001a72:	280a      	cmp	r0, #10
 8001a74:	f000 80cd 	beq.w	8001c12 <??ZbZclAttrDefaultValue_3>
 8001a78:	280b      	cmp	r0, #11
 8001a7a:	f000 80c0 	beq.w	8001bfe <??ZbZclAttrDefaultValue_4>
 8001a7e:	280c      	cmp	r0, #12
 8001a80:	f000 80b3 	beq.w	8001bea <??ZbZclAttrDefaultValue_5>
 8001a84:	280d      	cmp	r0, #13
 8001a86:	f000 80a6 	beq.w	8001bd6 <??ZbZclAttrDefaultValue_6>
 8001a8a:	280e      	cmp	r0, #14
 8001a8c:	f000 8099 	beq.w	8001bc2 <??ZbZclAttrDefaultValue_7>
 8001a90:	280f      	cmp	r0, #15
 8001a92:	f000 808c 	beq.w	8001bae <??ZbZclAttrDefaultValue_8>
 8001a96:	2810      	cmp	r0, #16
 8001a98:	f000 80db 	beq.w	8001c52 <??ZbZclAttrDefaultValue_9>
 8001a9c:	2818      	cmp	r0, #24
 8001a9e:	f000 8126 	beq.w	8001cee <??ZbZclAttrDefaultValue_10>
 8001aa2:	2819      	cmp	r0, #25
 8001aa4:	f000 8119 	beq.w	8001cda <??ZbZclAttrDefaultValue_11>
 8001aa8:	281a      	cmp	r0, #26
 8001aaa:	f000 810c 	beq.w	8001cc6 <??ZbZclAttrDefaultValue_12>
 8001aae:	281b      	cmp	r0, #27
 8001ab0:	f000 80ff 	beq.w	8001cb2 <??ZbZclAttrDefaultValue_13>
 8001ab4:	281c      	cmp	r0, #28
 8001ab6:	f000 80f2 	beq.w	8001c9e <??ZbZclAttrDefaultValue_14>
 8001aba:	281d      	cmp	r0, #29
 8001abc:	f000 80e5 	beq.w	8001c8a <??ZbZclAttrDefaultValue_15>
 8001ac0:	281e      	cmp	r0, #30
 8001ac2:	f000 80d8 	beq.w	8001c76 <??ZbZclAttrDefaultValue_16>
 8001ac6:	281f      	cmp	r0, #31
 8001ac8:	f000 80cb 	beq.w	8001c62 <??ZbZclAttrDefaultValue_17>
 8001acc:	2820      	cmp	r0, #32
 8001ace:	f000 80b4 	beq.w	8001c3a <??ZbZclAttrDefaultValue_1>
 8001ad2:	2821      	cmp	r0, #33	@ 0x21
 8001ad4:	f000 80a7 	beq.w	8001c26 <??ZbZclAttrDefaultValue_2>
 8001ad8:	2822      	cmp	r0, #34	@ 0x22
 8001ada:	f000 809a 	beq.w	8001c12 <??ZbZclAttrDefaultValue_3>
 8001ade:	2823      	cmp	r0, #35	@ 0x23
 8001ae0:	f000 808d 	beq.w	8001bfe <??ZbZclAttrDefaultValue_4>
 8001ae4:	2824      	cmp	r0, #36	@ 0x24
 8001ae6:	f000 8080 	beq.w	8001bea <??ZbZclAttrDefaultValue_5>
 8001aea:	2825      	cmp	r0, #37	@ 0x25
 8001aec:	d073      	beq.n	8001bd6 <??ZbZclAttrDefaultValue_6>
 8001aee:	2826      	cmp	r0, #38	@ 0x26
 8001af0:	d067      	beq.n	8001bc2 <??ZbZclAttrDefaultValue_7>
 8001af2:	2827      	cmp	r0, #39	@ 0x27
 8001af4:	d05b      	beq.n	8001bae <??ZbZclAttrDefaultValue_8>
 8001af6:	2828      	cmp	r0, #40	@ 0x28
 8001af8:	f000 814b 	beq.w	8001d92 <??ZbZclAttrDefaultValue_18>
 8001afc:	2829      	cmp	r0, #41	@ 0x29
 8001afe:	f000 813e 	beq.w	8001d7e <??ZbZclAttrDefaultValue_19>
 8001b02:	282a      	cmp	r0, #42	@ 0x2a
 8001b04:	f000 8131 	beq.w	8001d6a <??ZbZclAttrDefaultValue_20>
 8001b08:	282b      	cmp	r0, #43	@ 0x2b
 8001b0a:	f000 8124 	beq.w	8001d56 <??ZbZclAttrDefaultValue_21>
 8001b0e:	282c      	cmp	r0, #44	@ 0x2c
 8001b10:	f000 8117 	beq.w	8001d42 <??ZbZclAttrDefaultValue_22>
 8001b14:	282d      	cmp	r0, #45	@ 0x2d
 8001b16:	f000 810a 	beq.w	8001d2e <??ZbZclAttrDefaultValue_23>
 8001b1a:	282e      	cmp	r0, #46	@ 0x2e
 8001b1c:	f000 80fd 	beq.w	8001d1a <??ZbZclAttrDefaultValue_24>
 8001b20:	282f      	cmp	r0, #47	@ 0x2f
 8001b22:	f000 80f0 	beq.w	8001d06 <??ZbZclAttrDefaultValue_25>
 8001b26:	2830      	cmp	r0, #48	@ 0x30
 8001b28:	f000 8087 	beq.w	8001c3a <??ZbZclAttrDefaultValue_1>
 8001b2c:	2831      	cmp	r0, #49	@ 0x31
 8001b2e:	d07a      	beq.n	8001c26 <??ZbZclAttrDefaultValue_2>
 8001b30:	2838      	cmp	r0, #56	@ 0x38
 8001b32:	f000 813a 	beq.w	8001daa <??ZbZclAttrDefaultValue_26>
 8001b36:	2839      	cmp	r0, #57	@ 0x39
 8001b38:	f000 8142 	beq.w	8001dc0 <??ZbZclAttrDefaultValue_27>
 8001b3c:	283a      	cmp	r0, #58	@ 0x3a
 8001b3e:	f000 8149 	beq.w	8001dd4 <??ZbZclAttrDefaultValue_28>
 8001b42:	2841      	cmp	r0, #65	@ 0x41
 8001b44:	f000 8152 	beq.w	8001dec <??ZbZclAttrDefaultValue_29>
 8001b48:	2842      	cmp	r0, #66	@ 0x42
 8001b4a:	f000 8159 	beq.w	8001e00 <??ZbZclAttrDefaultValue_30>
 8001b4e:	2843      	cmp	r0, #67	@ 0x43
 8001b50:	f000 8160 	beq.w	8001e14 <??ZbZclAttrDefaultValue_31>
 8001b54:	2844      	cmp	r0, #68	@ 0x44
 8001b56:	f000 8168 	beq.w	8001e2a <??ZbZclAttrDefaultValue_32>
 8001b5a:	2848      	cmp	r0, #72	@ 0x48
 8001b5c:	f000 818b 	beq.w	8001e76 <??ZbZclAttrDefaultValue_33>
 8001b60:	284c      	cmp	r0, #76	@ 0x4c
 8001b62:	f000 8192 	beq.w	8001e8a <??ZbZclAttrDefaultValue_34>
 8001b66:	2850      	cmp	r0, #80	@ 0x50
 8001b68:	f000 8199 	beq.w	8001e9e <??ZbZclAttrDefaultValue_35>
 8001b6c:	2851      	cmp	r0, #81	@ 0x51
 8001b6e:	f000 81a0 	beq.w	8001eb2 <??ZbZclAttrDefaultValue_36>
 8001b72:	28e0      	cmp	r0, #224	@ 0xe0
 8001b74:	f000 81a7 	beq.w	8001ec6 <??ZbZclAttrDefaultValue_37>
 8001b78:	28e1      	cmp	r0, #225	@ 0xe1
 8001b7a:	f000 81ae 	beq.w	8001eda <??ZbZclAttrDefaultValue_38>
 8001b7e:	28e2      	cmp	r0, #226	@ 0xe2
 8001b80:	f000 81b5 	beq.w	8001eee <??ZbZclAttrDefaultValue_39>
 8001b84:	28e8      	cmp	r0, #232	@ 0xe8
 8001b86:	f000 81bc 	beq.w	8001f02 <??ZbZclAttrDefaultValue_40>
 8001b8a:	28e9      	cmp	r0, #233	@ 0xe9
 8001b8c:	f000 81c3 	beq.w	8001f16 <??ZbZclAttrDefaultValue_41>
 8001b90:	28ea      	cmp	r0, #234	@ 0xea
 8001b92:	f000 81ca 	beq.w	8001f2a <??ZbZclAttrDefaultValue_42>
 8001b96:	28f0      	cmp	r0, #240	@ 0xf0
 8001b98:	f000 8152 	beq.w	8001e40 <??ZbZclAttrDefaultValue_43>
 8001b9c:	28f1      	cmp	r0, #241	@ 0xf1
 8001b9e:	f000 815b 	beq.w	8001e58 <??ZbZclAttrDefaultValue_44>
 8001ba2:	28ff      	cmp	r0, #255	@ 0xff
 8001ba4:	f040 81cb 	bne.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001ba8 <??ZbZclAttrDefaultValue_0>:
 8001ba8:	2000      	movs	r0, #0
 8001baa:	0007      	movs	r7, r0
 8001bac:	e1c7      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001bae <??ZbZclAttrDefaultValue_8>:
 8001bae:	1c70      	adds	r0, r6, #1
 8001bb0:	4285      	cmp	r5, r0
 8001bb2:	f0c0 81c4 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001bb6 <??ZbZclAttrDefaultValue_47>:
 8001bb6:	20ff      	movs	r0, #255	@ 0xff
 8001bb8:	f888 0000 	strb.w	r0, [r8]
 8001bbc:	f118 0801 	adds.w	r8, r8, #1
 8001bc0:	1c76      	adds	r6, r6, #1

08001bc2 <??ZbZclAttrDefaultValue_7>:
 8001bc2:	1c70      	adds	r0, r6, #1
 8001bc4:	4285      	cmp	r5, r0
 8001bc6:	f0c0 81ba 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001bca <??ZbZclAttrDefaultValue_48>:
 8001bca:	20ff      	movs	r0, #255	@ 0xff
 8001bcc:	f888 0000 	strb.w	r0, [r8]
 8001bd0:	f118 0801 	adds.w	r8, r8, #1
 8001bd4:	1c76      	adds	r6, r6, #1

08001bd6 <??ZbZclAttrDefaultValue_6>:
 8001bd6:	1c70      	adds	r0, r6, #1
 8001bd8:	4285      	cmp	r5, r0
 8001bda:	f0c0 81b0 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001bde <??ZbZclAttrDefaultValue_49>:
 8001bde:	20ff      	movs	r0, #255	@ 0xff
 8001be0:	f888 0000 	strb.w	r0, [r8]
 8001be4:	f118 0801 	adds.w	r8, r8, #1
 8001be8:	1c76      	adds	r6, r6, #1

08001bea <??ZbZclAttrDefaultValue_5>:
 8001bea:	1c70      	adds	r0, r6, #1
 8001bec:	4285      	cmp	r5, r0
 8001bee:	f0c0 81a6 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001bf2 <??ZbZclAttrDefaultValue_50>:
 8001bf2:	20ff      	movs	r0, #255	@ 0xff
 8001bf4:	f888 0000 	strb.w	r0, [r8]
 8001bf8:	f118 0801 	adds.w	r8, r8, #1
 8001bfc:	1c76      	adds	r6, r6, #1

08001bfe <??ZbZclAttrDefaultValue_4>:
 8001bfe:	1c70      	adds	r0, r6, #1
 8001c00:	4285      	cmp	r5, r0
 8001c02:	f0c0 819c 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001c06 <??ZbZclAttrDefaultValue_51>:
 8001c06:	20ff      	movs	r0, #255	@ 0xff
 8001c08:	f888 0000 	strb.w	r0, [r8]
 8001c0c:	f118 0801 	adds.w	r8, r8, #1
 8001c10:	1c76      	adds	r6, r6, #1

08001c12 <??ZbZclAttrDefaultValue_3>:
 8001c12:	1c70      	adds	r0, r6, #1
 8001c14:	4285      	cmp	r5, r0
 8001c16:	f0c0 8192 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001c1a <??ZbZclAttrDefaultValue_52>:
 8001c1a:	20ff      	movs	r0, #255	@ 0xff
 8001c1c:	f888 0000 	strb.w	r0, [r8]
 8001c20:	f118 0801 	adds.w	r8, r8, #1
 8001c24:	1c76      	adds	r6, r6, #1

08001c26 <??ZbZclAttrDefaultValue_2>:
 8001c26:	1c70      	adds	r0, r6, #1
 8001c28:	4285      	cmp	r5, r0
 8001c2a:	f0c0 8188 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001c2e <??ZbZclAttrDefaultValue_53>:
 8001c2e:	20ff      	movs	r0, #255	@ 0xff
 8001c30:	f888 0000 	strb.w	r0, [r8]
 8001c34:	f118 0801 	adds.w	r8, r8, #1
 8001c38:	1c76      	adds	r6, r6, #1

08001c3a <??ZbZclAttrDefaultValue_1>:
 8001c3a:	1c70      	adds	r0, r6, #1
 8001c3c:	4285      	cmp	r5, r0
 8001c3e:	f0c0 817e 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001c42 <??ZbZclAttrDefaultValue_54>:
 8001c42:	20ff      	movs	r0, #255	@ 0xff
 8001c44:	f888 0000 	strb.w	r0, [r8]
 8001c48:	f118 0801 	adds.w	r8, r8, #1
 8001c4c:	1c76      	adds	r6, r6, #1
 8001c4e:	0037      	movs	r7, r6
 8001c50:	e175      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001c52 <??ZbZclAttrDefaultValue_9>:
 8001c52:	2000      	movs	r0, #0
 8001c54:	f888 0000 	strb.w	r0, [r8]
 8001c58:	f118 0801 	adds.w	r8, r8, #1
 8001c5c:	2001      	movs	r0, #1
 8001c5e:	0007      	movs	r7, r0
 8001c60:	e16d      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001c62 <??ZbZclAttrDefaultValue_17>:
 8001c62:	1c70      	adds	r0, r6, #1
 8001c64:	4285      	cmp	r5, r0
 8001c66:	f0c0 816a 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001c6a <??ZbZclAttrDefaultValue_55>:
 8001c6a:	2000      	movs	r0, #0
 8001c6c:	f888 0000 	strb.w	r0, [r8]
 8001c70:	f118 0801 	adds.w	r8, r8, #1
 8001c74:	1c76      	adds	r6, r6, #1

08001c76 <??ZbZclAttrDefaultValue_16>:
 8001c76:	1c70      	adds	r0, r6, #1
 8001c78:	4285      	cmp	r5, r0
 8001c7a:	f0c0 8160 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001c7e <??ZbZclAttrDefaultValue_56>:
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f888 0000 	strb.w	r0, [r8]
 8001c84:	f118 0801 	adds.w	r8, r8, #1
 8001c88:	1c76      	adds	r6, r6, #1

08001c8a <??ZbZclAttrDefaultValue_15>:
 8001c8a:	1c70      	adds	r0, r6, #1
 8001c8c:	4285      	cmp	r5, r0
 8001c8e:	f0c0 8156 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001c92 <??ZbZclAttrDefaultValue_57>:
 8001c92:	2000      	movs	r0, #0
 8001c94:	f888 0000 	strb.w	r0, [r8]
 8001c98:	f118 0801 	adds.w	r8, r8, #1
 8001c9c:	1c76      	adds	r6, r6, #1

08001c9e <??ZbZclAttrDefaultValue_14>:
 8001c9e:	1c70      	adds	r0, r6, #1
 8001ca0:	4285      	cmp	r5, r0
 8001ca2:	f0c0 814c 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001ca6 <??ZbZclAttrDefaultValue_58>:
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f888 0000 	strb.w	r0, [r8]
 8001cac:	f118 0801 	adds.w	r8, r8, #1
 8001cb0:	1c76      	adds	r6, r6, #1

08001cb2 <??ZbZclAttrDefaultValue_13>:
 8001cb2:	1c70      	adds	r0, r6, #1
 8001cb4:	4285      	cmp	r5, r0
 8001cb6:	f0c0 8142 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001cba <??ZbZclAttrDefaultValue_59>:
 8001cba:	2000      	movs	r0, #0
 8001cbc:	f888 0000 	strb.w	r0, [r8]
 8001cc0:	f118 0801 	adds.w	r8, r8, #1
 8001cc4:	1c76      	adds	r6, r6, #1

08001cc6 <??ZbZclAttrDefaultValue_12>:
 8001cc6:	1c70      	adds	r0, r6, #1
 8001cc8:	4285      	cmp	r5, r0
 8001cca:	f0c0 8138 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001cce <??ZbZclAttrDefaultValue_60>:
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f888 0000 	strb.w	r0, [r8]
 8001cd4:	f118 0801 	adds.w	r8, r8, #1
 8001cd8:	1c76      	adds	r6, r6, #1

08001cda <??ZbZclAttrDefaultValue_11>:
 8001cda:	1c70      	adds	r0, r6, #1
 8001cdc:	4285      	cmp	r5, r0
 8001cde:	f0c0 812e 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001ce2 <??ZbZclAttrDefaultValue_61>:
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	f888 0000 	strb.w	r0, [r8]
 8001ce8:	f118 0801 	adds.w	r8, r8, #1
 8001cec:	1c76      	adds	r6, r6, #1

08001cee <??ZbZclAttrDefaultValue_10>:
 8001cee:	1c70      	adds	r0, r6, #1
 8001cf0:	4285      	cmp	r5, r0
 8001cf2:	f0c0 8124 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001cf6 <??ZbZclAttrDefaultValue_62>:
 8001cf6:	2000      	movs	r0, #0
 8001cf8:	f888 0000 	strb.w	r0, [r8]
 8001cfc:	f118 0801 	adds.w	r8, r8, #1
 8001d00:	1c76      	adds	r6, r6, #1
 8001d02:	0037      	movs	r7, r6
 8001d04:	e11b      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001d06 <??ZbZclAttrDefaultValue_25>:
 8001d06:	1c70      	adds	r0, r6, #1
 8001d08:	4285      	cmp	r5, r0
 8001d0a:	f0c0 8118 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d0e <??ZbZclAttrDefaultValue_63>:
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f888 0000 	strb.w	r0, [r8]
 8001d14:	f118 0801 	adds.w	r8, r8, #1
 8001d18:	1c76      	adds	r6, r6, #1

08001d1a <??ZbZclAttrDefaultValue_24>:
 8001d1a:	1c70      	adds	r0, r6, #1
 8001d1c:	4285      	cmp	r5, r0
 8001d1e:	f0c0 810e 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d22 <??ZbZclAttrDefaultValue_64>:
 8001d22:	2000      	movs	r0, #0
 8001d24:	f888 0000 	strb.w	r0, [r8]
 8001d28:	f118 0801 	adds.w	r8, r8, #1
 8001d2c:	1c76      	adds	r6, r6, #1

08001d2e <??ZbZclAttrDefaultValue_23>:
 8001d2e:	1c70      	adds	r0, r6, #1
 8001d30:	4285      	cmp	r5, r0
 8001d32:	f0c0 8104 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d36 <??ZbZclAttrDefaultValue_65>:
 8001d36:	2000      	movs	r0, #0
 8001d38:	f888 0000 	strb.w	r0, [r8]
 8001d3c:	f118 0801 	adds.w	r8, r8, #1
 8001d40:	1c76      	adds	r6, r6, #1

08001d42 <??ZbZclAttrDefaultValue_22>:
 8001d42:	1c70      	adds	r0, r6, #1
 8001d44:	4285      	cmp	r5, r0
 8001d46:	f0c0 80fa 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d4a <??ZbZclAttrDefaultValue_66>:
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f888 0000 	strb.w	r0, [r8]
 8001d50:	f118 0801 	adds.w	r8, r8, #1
 8001d54:	1c76      	adds	r6, r6, #1

08001d56 <??ZbZclAttrDefaultValue_21>:
 8001d56:	1c70      	adds	r0, r6, #1
 8001d58:	4285      	cmp	r5, r0
 8001d5a:	f0c0 80f0 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d5e <??ZbZclAttrDefaultValue_67>:
 8001d5e:	2000      	movs	r0, #0
 8001d60:	f888 0000 	strb.w	r0, [r8]
 8001d64:	f118 0801 	adds.w	r8, r8, #1
 8001d68:	1c76      	adds	r6, r6, #1

08001d6a <??ZbZclAttrDefaultValue_20>:
 8001d6a:	1c70      	adds	r0, r6, #1
 8001d6c:	4285      	cmp	r5, r0
 8001d6e:	f0c0 80e6 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d72 <??ZbZclAttrDefaultValue_68>:
 8001d72:	2000      	movs	r0, #0
 8001d74:	f888 0000 	strb.w	r0, [r8]
 8001d78:	f118 0801 	adds.w	r8, r8, #1
 8001d7c:	1c76      	adds	r6, r6, #1

08001d7e <??ZbZclAttrDefaultValue_19>:
 8001d7e:	1c70      	adds	r0, r6, #1
 8001d80:	4285      	cmp	r5, r0
 8001d82:	f0c0 80dc 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d86 <??ZbZclAttrDefaultValue_69>:
 8001d86:	2000      	movs	r0, #0
 8001d88:	f888 0000 	strb.w	r0, [r8]
 8001d8c:	f118 0801 	adds.w	r8, r8, #1
 8001d90:	1c76      	adds	r6, r6, #1

08001d92 <??ZbZclAttrDefaultValue_18>:
 8001d92:	1c70      	adds	r0, r6, #1
 8001d94:	4285      	cmp	r5, r0
 8001d96:	f0c0 80d2 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001d9a <??ZbZclAttrDefaultValue_70>:
 8001d9a:	2080      	movs	r0, #128	@ 0x80
 8001d9c:	f888 0000 	strb.w	r0, [r8]
 8001da0:	f118 0801 	adds.w	r8, r8, #1
 8001da4:	1c76      	adds	r6, r6, #1
 8001da6:	0037      	movs	r7, r6
 8001da8:	e0c9      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001daa <??ZbZclAttrDefaultValue_26>:
 8001daa:	2d02      	cmp	r5, #2
 8001dac:	f0c0 80c7 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001db0 <??ZbZclAttrDefaultValue_71>:
 8001db0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001db4:	4640      	mov	r0, r8
 8001db6:	f7ff f9a5 	bl	8001104 <putle16>
 8001dba:	2002      	movs	r0, #2
 8001dbc:	0007      	movs	r7, r0
 8001dbe:	e0be      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001dc0 <??ZbZclAttrDefaultValue_27>:
 8001dc0:	2d04      	cmp	r5, #4
 8001dc2:	f0c0 80bc 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001dc6 <??ZbZclAttrDefaultValue_72>:
 8001dc6:	495f      	ldr	r1, [pc, #380]	@ (8001f44 <??DataTable1>)
 8001dc8:	4640      	mov	r0, r8
 8001dca:	f7ff f9ad 	bl	8001128 <putle32>
 8001dce:	2004      	movs	r0, #4
 8001dd0:	0007      	movs	r7, r0
 8001dd2:	e0b4      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001dd4 <??ZbZclAttrDefaultValue_28>:
 8001dd4:	2d08      	cmp	r5, #8
 8001dd6:	f0c0 80b2 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001dda <??ZbZclAttrDefaultValue_73>:
 8001dda:	f07f 0201 	mvns.w	r2, #1
 8001dde:	4b5a      	ldr	r3, [pc, #360]	@ (8001f48 <??DataTable1_1>)
 8001de0:	4640      	mov	r0, r8
 8001de2:	f7ff f9d4 	bl	800118e <putle64>
 8001de6:	2008      	movs	r0, #8
 8001de8:	0007      	movs	r7, r0
 8001dea:	e0a8      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001dec <??ZbZclAttrDefaultValue_29>:
 8001dec:	2d02      	cmp	r5, #2
 8001dee:	f0c0 80a6 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001df2 <??ZbZclAttrDefaultValue_74>:
 8001df2:	21ff      	movs	r1, #255	@ 0xff
 8001df4:	4640      	mov	r0, r8
 8001df6:	f7ff f985 	bl	8001104 <putle16>
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	0007      	movs	r7, r0
 8001dfe:	e09e      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e00 <??ZbZclAttrDefaultValue_30>:
 8001e00:	2d02      	cmp	r5, #2
 8001e02:	f0c0 809c 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001e06 <??ZbZclAttrDefaultValue_75>:
 8001e06:	21ff      	movs	r1, #255	@ 0xff
 8001e08:	4640      	mov	r0, r8
 8001e0a:	f7ff f97b 	bl	8001104 <putle16>
 8001e0e:	2002      	movs	r0, #2
 8001e10:	0007      	movs	r7, r0
 8001e12:	e094      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e14 <??ZbZclAttrDefaultValue_31>:
 8001e14:	2d04      	cmp	r5, #4
 8001e16:	f0c0 8092 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001e1a <??ZbZclAttrDefaultValue_76>:
 8001e1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e1e:	4640      	mov	r0, r8
 8001e20:	f7ff f982 	bl	8001128 <putle32>
 8001e24:	2004      	movs	r0, #4
 8001e26:	0007      	movs	r7, r0
 8001e28:	e089      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e2a <??ZbZclAttrDefaultValue_32>:
 8001e2a:	2d04      	cmp	r5, #4
 8001e2c:	f0c0 8087 	bcc.w	8001f3e <??ZbZclAttrDefaultValue_45>

08001e30 <??ZbZclAttrDefaultValue_77>:
 8001e30:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e34:	4640      	mov	r0, r8
 8001e36:	f7ff f977 	bl	8001128 <putle32>
 8001e3a:	2004      	movs	r0, #4
 8001e3c:	0007      	movs	r7, r0
 8001e3e:	e07e      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e40 <??ZbZclAttrDefaultValue_43>:
 8001e40:	2d08      	cmp	r5, #8
 8001e42:	d37c      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e44 <??ZbZclAttrDefaultValue_78>:
 8001e44:	f05f 32ff 	movs.w	r2, #4294967295
 8001e48:	f05f 33ff 	movs.w	r3, #4294967295
 8001e4c:	4640      	mov	r0, r8
 8001e4e:	f7ff f99e 	bl	800118e <putle64>
 8001e52:	2008      	movs	r0, #8
 8001e54:	0007      	movs	r7, r0
 8001e56:	e072      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e58 <??ZbZclAttrDefaultValue_44>:
 8001e58:	2d10      	cmp	r5, #16
 8001e5a:	d370      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e5c <??ZbZclAttrDefaultValue_79>:
 8001e5c:	f05f 0910 	movs.w	r9, #16
 8001e60:	f05f 0a00 	movs.w	sl, #0
 8001e64:	46c3      	mov	fp, r8
 8001e66:	4652      	mov	r2, sl
 8001e68:	4649      	mov	r1, r9
 8001e6a:	4658      	mov	r0, fp
 8001e6c:	f003 fe51 	bl	8005b12 <__aeabi_memset>
 8001e70:	2010      	movs	r0, #16
 8001e72:	0007      	movs	r7, r0
 8001e74:	e063      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e76 <??ZbZclAttrDefaultValue_33>:
 8001e76:	2d02      	cmp	r5, #2
 8001e78:	d361      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e7a <??ZbZclAttrDefaultValue_80>:
 8001e7a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e7e:	4640      	mov	r0, r8
 8001e80:	f7ff f940 	bl	8001104 <putle16>
 8001e84:	2002      	movs	r0, #2
 8001e86:	0007      	movs	r7, r0
 8001e88:	e059      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e8a <??ZbZclAttrDefaultValue_34>:
 8001e8a:	2d02      	cmp	r5, #2
 8001e8c:	d357      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e8e <??ZbZclAttrDefaultValue_81>:
 8001e8e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e92:	4640      	mov	r0, r8
 8001e94:	f7ff f936 	bl	8001104 <putle16>
 8001e98:	2002      	movs	r0, #2
 8001e9a:	0007      	movs	r7, r0
 8001e9c:	e04f      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001e9e <??ZbZclAttrDefaultValue_35>:
 8001e9e:	2d02      	cmp	r5, #2
 8001ea0:	d34d      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001ea2 <??ZbZclAttrDefaultValue_82>:
 8001ea2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	f7ff f92c 	bl	8001104 <putle16>
 8001eac:	2002      	movs	r0, #2
 8001eae:	0007      	movs	r7, r0
 8001eb0:	e045      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001eb2 <??ZbZclAttrDefaultValue_36>:
 8001eb2:	2d02      	cmp	r5, #2
 8001eb4:	d343      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001eb6 <??ZbZclAttrDefaultValue_83>:
 8001eb6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001eba:	4640      	mov	r0, r8
 8001ebc:	f7ff f922 	bl	8001104 <putle16>
 8001ec0:	2002      	movs	r0, #2
 8001ec2:	0007      	movs	r7, r0
 8001ec4:	e03b      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001ec6 <??ZbZclAttrDefaultValue_37>:
 8001ec6:	2d04      	cmp	r5, #4
 8001ec8:	d339      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001eca <??ZbZclAttrDefaultValue_84>:
 8001eca:	f05f 31ff 	movs.w	r1, #4294967295
 8001ece:	4640      	mov	r0, r8
 8001ed0:	f7ff f92a 	bl	8001128 <putle32>
 8001ed4:	2004      	movs	r0, #4
 8001ed6:	0007      	movs	r7, r0
 8001ed8:	e031      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001eda <??ZbZclAttrDefaultValue_38>:
 8001eda:	2d04      	cmp	r5, #4
 8001edc:	d32f      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001ede <??ZbZclAttrDefaultValue_85>:
 8001ede:	f05f 31ff 	movs.w	r1, #4294967295
 8001ee2:	4640      	mov	r0, r8
 8001ee4:	f7ff f920 	bl	8001128 <putle32>
 8001ee8:	2004      	movs	r0, #4
 8001eea:	0007      	movs	r7, r0
 8001eec:	e027      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001eee <??ZbZclAttrDefaultValue_39>:
 8001eee:	2d04      	cmp	r5, #4
 8001ef0:	d325      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001ef2 <??ZbZclAttrDefaultValue_86>:
 8001ef2:	f05f 31ff 	movs.w	r1, #4294967295
 8001ef6:	4640      	mov	r0, r8
 8001ef8:	f7ff f916 	bl	8001128 <putle32>
 8001efc:	2004      	movs	r0, #4
 8001efe:	0007      	movs	r7, r0
 8001f00:	e01d      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001f02 <??ZbZclAttrDefaultValue_40>:
 8001f02:	2d02      	cmp	r5, #2
 8001f04:	d31b      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001f06 <??ZbZclAttrDefaultValue_87>:
 8001f06:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f0a:	4640      	mov	r0, r8
 8001f0c:	f7ff f8fa 	bl	8001104 <putle16>
 8001f10:	2002      	movs	r0, #2
 8001f12:	0007      	movs	r7, r0
 8001f14:	e013      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001f16 <??ZbZclAttrDefaultValue_41>:
 8001f16:	2d02      	cmp	r5, #2
 8001f18:	d311      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001f1a <??ZbZclAttrDefaultValue_88>:
 8001f1a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001f1e:	4640      	mov	r0, r8
 8001f20:	f7ff f8f0 	bl	8001104 <putle16>
 8001f24:	2002      	movs	r0, #2
 8001f26:	0007      	movs	r7, r0
 8001f28:	e009      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001f2a <??ZbZclAttrDefaultValue_42>:
 8001f2a:	2d04      	cmp	r5, #4
 8001f2c:	d307      	bcc.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001f2e <??ZbZclAttrDefaultValue_89>:
 8001f2e:	f05f 31ff 	movs.w	r1, #4294967295
 8001f32:	4640      	mov	r0, r8
 8001f34:	f7ff f8f8 	bl	8001128 <putle32>
 8001f38:	2004      	movs	r0, #4
 8001f3a:	0007      	movs	r7, r0
 8001f3c:	e7ff      	b.n	8001f3e <??ZbZclAttrDefaultValue_45>

08001f3e <??ZbZclAttrDefaultValue_45>:
 8001f3e:	0038      	movs	r0, r7
 8001f40:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f44 <??DataTable1>:
 8001f44:	fffe 00ff                                   ....

08001f48 <??DataTable1_1>:
 8001f48:	ffff 001f                                   ....

08001f4c <ZbZclAttrTypeLength>:
 8001f4c:	0001      	movs	r1, r0
 8001f4e:	0008      	movs	r0, r1
 8001f50:	b2c0      	uxtb	r0, r0
 8001f52:	2800      	cmp	r0, #0
 8001f54:	f000 8081 	beq.w	800205a <??ZbZclAttrTypeLength_0>
 8001f58:	2808      	cmp	r0, #8
 8001f5a:	d06c      	beq.n	8002036 <??ZbZclAttrTypeLength_1>
 8001f5c:	2809      	cmp	r0, #9
 8001f5e:	d06c      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8001f60:	280a      	cmp	r0, #10
 8001f62:	d06c      	beq.n	800203e <??ZbZclAttrTypeLength_3>
 8001f64:	280b      	cmp	r0, #11
 8001f66:	d06c      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8001f68:	280c      	cmp	r0, #12
 8001f6a:	d06c      	beq.n	8002046 <??ZbZclAttrTypeLength_5>
 8001f6c:	280d      	cmp	r0, #13
 8001f6e:	d06c      	beq.n	800204a <??ZbZclAttrTypeLength_6>
 8001f70:	280e      	cmp	r0, #14
 8001f72:	d06c      	beq.n	800204e <??ZbZclAttrTypeLength_7>
 8001f74:	280f      	cmp	r0, #15
 8001f76:	d06c      	beq.n	8002052 <??ZbZclAttrTypeLength_8>
 8001f78:	2810      	cmp	r0, #16
 8001f7a:	d05c      	beq.n	8002036 <??ZbZclAttrTypeLength_1>
 8001f7c:	2818      	cmp	r0, #24
 8001f7e:	d05a      	beq.n	8002036 <??ZbZclAttrTypeLength_1>
 8001f80:	2819      	cmp	r0, #25
 8001f82:	d05a      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8001f84:	281a      	cmp	r0, #26
 8001f86:	d05a      	beq.n	800203e <??ZbZclAttrTypeLength_3>
 8001f88:	281b      	cmp	r0, #27
 8001f8a:	d05a      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8001f8c:	281c      	cmp	r0, #28
 8001f8e:	d05a      	beq.n	8002046 <??ZbZclAttrTypeLength_5>
 8001f90:	281d      	cmp	r0, #29
 8001f92:	d05a      	beq.n	800204a <??ZbZclAttrTypeLength_6>
 8001f94:	281e      	cmp	r0, #30
 8001f96:	d05a      	beq.n	800204e <??ZbZclAttrTypeLength_7>
 8001f98:	281f      	cmp	r0, #31
 8001f9a:	d05a      	beq.n	8002052 <??ZbZclAttrTypeLength_8>
 8001f9c:	2820      	cmp	r0, #32
 8001f9e:	d04a      	beq.n	8002036 <??ZbZclAttrTypeLength_1>
 8001fa0:	2821      	cmp	r0, #33	@ 0x21
 8001fa2:	d04a      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8001fa4:	2822      	cmp	r0, #34	@ 0x22
 8001fa6:	d04a      	beq.n	800203e <??ZbZclAttrTypeLength_3>
 8001fa8:	2823      	cmp	r0, #35	@ 0x23
 8001faa:	d04a      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8001fac:	2824      	cmp	r0, #36	@ 0x24
 8001fae:	d04a      	beq.n	8002046 <??ZbZclAttrTypeLength_5>
 8001fb0:	2825      	cmp	r0, #37	@ 0x25
 8001fb2:	d04a      	beq.n	800204a <??ZbZclAttrTypeLength_6>
 8001fb4:	2826      	cmp	r0, #38	@ 0x26
 8001fb6:	d04a      	beq.n	800204e <??ZbZclAttrTypeLength_7>
 8001fb8:	2827      	cmp	r0, #39	@ 0x27
 8001fba:	d04a      	beq.n	8002052 <??ZbZclAttrTypeLength_8>
 8001fbc:	2828      	cmp	r0, #40	@ 0x28
 8001fbe:	d03a      	beq.n	8002036 <??ZbZclAttrTypeLength_1>
 8001fc0:	2829      	cmp	r0, #41	@ 0x29
 8001fc2:	d03a      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8001fc4:	282a      	cmp	r0, #42	@ 0x2a
 8001fc6:	d03a      	beq.n	800203e <??ZbZclAttrTypeLength_3>
 8001fc8:	282b      	cmp	r0, #43	@ 0x2b
 8001fca:	d03a      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8001fcc:	282c      	cmp	r0, #44	@ 0x2c
 8001fce:	d03a      	beq.n	8002046 <??ZbZclAttrTypeLength_5>
 8001fd0:	282d      	cmp	r0, #45	@ 0x2d
 8001fd2:	d03a      	beq.n	800204a <??ZbZclAttrTypeLength_6>
 8001fd4:	282e      	cmp	r0, #46	@ 0x2e
 8001fd6:	d03a      	beq.n	800204e <??ZbZclAttrTypeLength_7>
 8001fd8:	282f      	cmp	r0, #47	@ 0x2f
 8001fda:	d03a      	beq.n	8002052 <??ZbZclAttrTypeLength_8>
 8001fdc:	2830      	cmp	r0, #48	@ 0x30
 8001fde:	d02a      	beq.n	8002036 <??ZbZclAttrTypeLength_1>
 8001fe0:	2831      	cmp	r0, #49	@ 0x31
 8001fe2:	d02a      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8001fe4:	2838      	cmp	r0, #56	@ 0x38
 8001fe6:	d028      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8001fe8:	2839      	cmp	r0, #57	@ 0x39
 8001fea:	d02a      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8001fec:	283a      	cmp	r0, #58	@ 0x3a
 8001fee:	d030      	beq.n	8002052 <??ZbZclAttrTypeLength_8>
 8001ff0:	2841      	cmp	r0, #65	@ 0x41
 8001ff2:	d032      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8001ff4:	2842      	cmp	r0, #66	@ 0x42
 8001ff6:	d030      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8001ff8:	2843      	cmp	r0, #67	@ 0x43
 8001ffa:	d02e      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8001ffc:	2844      	cmp	r0, #68	@ 0x44
 8001ffe:	d02c      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8002000:	2848      	cmp	r0, #72	@ 0x48
 8002002:	d02a      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8002004:	284c      	cmp	r0, #76	@ 0x4c
 8002006:	d028      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8002008:	2850      	cmp	r0, #80	@ 0x50
 800200a:	d026      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 800200c:	2851      	cmp	r0, #81	@ 0x51
 800200e:	d024      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8002010:	28e0      	cmp	r0, #224	@ 0xe0
 8002012:	d016      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8002014:	28e1      	cmp	r0, #225	@ 0xe1
 8002016:	d014      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8002018:	28e2      	cmp	r0, #226	@ 0xe2
 800201a:	d012      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 800201c:	28e8      	cmp	r0, #232	@ 0xe8
 800201e:	d00c      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8002020:	28e9      	cmp	r0, #233	@ 0xe9
 8002022:	d00a      	beq.n	800203a <??ZbZclAttrTypeLength_2>
 8002024:	28ea      	cmp	r0, #234	@ 0xea
 8002026:	d00c      	beq.n	8002042 <??ZbZclAttrTypeLength_4>
 8002028:	28f0      	cmp	r0, #240	@ 0xf0
 800202a:	d012      	beq.n	8002052 <??ZbZclAttrTypeLength_8>
 800202c:	28f1      	cmp	r0, #241	@ 0xf1
 800202e:	d012      	beq.n	8002056 <??ZbZclAttrTypeLength_9>
 8002030:	28ff      	cmp	r0, #255	@ 0xff
 8002032:	d012      	beq.n	800205a <??ZbZclAttrTypeLength_0>
 8002034:	e013      	b.n	800205e <??ZbZclAttrTypeLength_10>

08002036 <??ZbZclAttrTypeLength_1>:
 8002036:	2001      	movs	r0, #1
 8002038:	e012      	b.n	8002060 <??ZbZclAttrTypeLength_11>

0800203a <??ZbZclAttrTypeLength_2>:
 800203a:	2002      	movs	r0, #2
 800203c:	e010      	b.n	8002060 <??ZbZclAttrTypeLength_11>

0800203e <??ZbZclAttrTypeLength_3>:
 800203e:	2003      	movs	r0, #3
 8002040:	e00e      	b.n	8002060 <??ZbZclAttrTypeLength_11>

08002042 <??ZbZclAttrTypeLength_4>:
 8002042:	2004      	movs	r0, #4
 8002044:	e00c      	b.n	8002060 <??ZbZclAttrTypeLength_11>

08002046 <??ZbZclAttrTypeLength_5>:
 8002046:	2005      	movs	r0, #5
 8002048:	e00a      	b.n	8002060 <??ZbZclAttrTypeLength_11>

0800204a <??ZbZclAttrTypeLength_6>:
 800204a:	2006      	movs	r0, #6
 800204c:	e008      	b.n	8002060 <??ZbZclAttrTypeLength_11>

0800204e <??ZbZclAttrTypeLength_7>:
 800204e:	2007      	movs	r0, #7
 8002050:	e006      	b.n	8002060 <??ZbZclAttrTypeLength_11>

08002052 <??ZbZclAttrTypeLength_8>:
 8002052:	2008      	movs	r0, #8
 8002054:	e004      	b.n	8002060 <??ZbZclAttrTypeLength_11>

08002056 <??ZbZclAttrTypeLength_9>:
 8002056:	2010      	movs	r0, #16
 8002058:	e002      	b.n	8002060 <??ZbZclAttrTypeLength_11>

0800205a <??ZbZclAttrTypeLength_0>:
 800205a:	2000      	movs	r0, #0
 800205c:	e000      	b.n	8002060 <??ZbZclAttrTypeLength_11>

0800205e <??ZbZclAttrTypeLength_10>:
 800205e:	2000      	movs	r0, #0

08002060 <??ZbZclAttrTypeLength_11>:
 8002060:	4770      	bx	lr

08002062 <ZbZclAttrParseLength>:
 8002062:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002066:	0006      	movs	r6, r0
 8002068:	000c      	movs	r4, r1
 800206a:	0015      	movs	r5, r2
 800206c:	001f      	movs	r7, r3
 800206e:	0038      	movs	r0, r7
 8002070:	b2c0      	uxtb	r0, r0
 8002072:	280f      	cmp	r0, #15
 8002074:	d302      	bcc.n	800207c <??ZbZclAttrParseLength_0>
 8002076:	f05f 30ff 	movs.w	r0, #4294967295
 800207a:	e0a1      	b.n	80021c0 <??ZbZclAttrParseLength_1>

0800207c <??ZbZclAttrParseLength_0>:
 800207c:	0030      	movs	r0, r6
 800207e:	b2c0      	uxtb	r0, r0
 8002080:	f7ff ff64 	bl	8001f4c <ZbZclAttrTypeLength>
 8002084:	0001      	movs	r1, r0
 8002086:	2901      	cmp	r1, #1
 8002088:	db06      	blt.n	8002098 <??ZbZclAttrParseLength_2>
 800208a:	428d      	cmp	r5, r1
 800208c:	d202      	bcs.n	8002094 <??ZbZclAttrParseLength_3>
 800208e:	f05f 30ff 	movs.w	r0, #4294967295
 8002092:	e095      	b.n	80021c0 <??ZbZclAttrParseLength_1>

08002094 <??ZbZclAttrParseLength_3>:
 8002094:	0008      	movs	r0, r1
 8002096:	e093      	b.n	80021c0 <??ZbZclAttrParseLength_1>

08002098 <??ZbZclAttrParseLength_2>:
 8002098:	2c00      	cmp	r4, #0
 800209a:	d101      	bne.n	80020a0 <??ZbZclAttrParseLength_4>
 800209c:	0028      	movs	r0, r5
 800209e:	e08f      	b.n	80021c0 <??ZbZclAttrParseLength_1>

080020a0 <??ZbZclAttrParseLength_4>:
 80020a0:	f05f 39ff 	movs.w	r9, #4294967295
 80020a4:	0030      	movs	r0, r6
 80020a6:	b2c0      	uxtb	r0, r0
 80020a8:	3841      	subs	r0, #65	@ 0x41
 80020aa:	2801      	cmp	r0, #1
 80020ac:	d90a      	bls.n	80020c4 <??ZbZclAttrParseLength_5>
 80020ae:	1e80      	subs	r0, r0, #2
 80020b0:	2801      	cmp	r0, #1
 80020b2:	d914      	bls.n	80020de <??ZbZclAttrParseLength_6>
 80020b4:	1f40      	subs	r0, r0, #5
 80020b6:	d027      	beq.n	8002108 <??ZbZclAttrParseLength_7>
 80020b8:	1f00      	subs	r0, r0, #4
 80020ba:	d04b      	beq.n	8002154 <??ZbZclAttrParseLength_8>
 80020bc:	1f00      	subs	r0, r0, #4
 80020be:	2801      	cmp	r0, #1
 80020c0:	d922      	bls.n	8002108 <??ZbZclAttrParseLength_7>
 80020c2:	e074      	b.n	80021ae <??ZbZclAttrParseLength_10>

080020c4 <??ZbZclAttrParseLength_5>:
 80020c4:	2d00      	cmp	r5, #0
 80020c6:	d072      	beq.n	80021ae <??ZbZclAttrParseLength_10>

080020c8 <??ZbZclAttrParseLength_11>:
 80020c8:	7820      	ldrb	r0, [r4, #0]
 80020ca:	28ff      	cmp	r0, #255	@ 0xff
 80020cc:	d102      	bne.n	80020d4 <??ZbZclAttrParseLength_12>
 80020ce:	f05f 0901 	movs.w	r9, #1
 80020d2:	e003      	b.n	80020dc <??ZbZclAttrParseLength_13>

080020d4 <??ZbZclAttrParseLength_12>:
 80020d4:	f894 9000 	ldrb.w	r9, [r4]
 80020d8:	f119 0901 	adds.w	r9, r9, #1

080020dc <??ZbZclAttrParseLength_13>:
 80020dc:	e067      	b.n	80021ae <??ZbZclAttrParseLength_10>

080020de <??ZbZclAttrParseLength_6>:
 80020de:	2d02      	cmp	r5, #2
 80020e0:	d365      	bcc.n	80021ae <??ZbZclAttrParseLength_10>

080020e2 <??ZbZclAttrParseLength_14>:
 80020e2:	0020      	movs	r0, r4
 80020e4:	f7fe ffc2 	bl	800106c <pletoh16>
 80020e8:	4680      	mov	r8, r0
 80020ea:	4640      	mov	r0, r8
 80020ec:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80020f0:	b280      	uxth	r0, r0
 80020f2:	4288      	cmp	r0, r1
 80020f4:	d102      	bne.n	80020fc <??ZbZclAttrParseLength_15>
 80020f6:	f05f 0902 	movs.w	r9, #2
 80020fa:	e004      	b.n	8002106 <??ZbZclAttrParseLength_16>

080020fc <??ZbZclAttrParseLength_15>:
 80020fc:	46c1      	mov	r9, r8
 80020fe:	fa1f f989 	uxth.w	r9, r9
 8002102:	f119 0902 	adds.w	r9, r9, #2

08002106 <??ZbZclAttrParseLength_16>:
 8002106:	e052      	b.n	80021ae <??ZbZclAttrParseLength_10>

08002108 <??ZbZclAttrParseLength_7>:
 8002108:	2d03      	cmp	r5, #3
 800210a:	d350      	bcc.n	80021ae <??ZbZclAttrParseLength_10>

0800210c <??ZbZclAttrParseLength_17>:
 800210c:	7820      	ldrb	r0, [r4, #0]
 800210e:	4683      	mov	fp, r0
 8002110:	1c60      	adds	r0, r4, #1
 8002112:	f7fe ffab 	bl	800106c <pletoh16>
 8002116:	4680      	mov	r8, r0
 8002118:	2003      	movs	r0, #3
 800211a:	4681      	mov	r9, r0

0800211c <??ZbZclAttrParseLength_18>:
 800211c:	4640      	mov	r0, r8
 800211e:	b280      	uxth	r0, r0
 8002120:	2800      	cmp	r0, #0
 8002122:	d016      	beq.n	8002152 <??ZbZclAttrParseLength_19>
 8002124:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8002128:	4640      	mov	r0, r8
 800212a:	b280      	uxth	r0, r0
 800212c:	4550      	cmp	r0, sl
 800212e:	d010      	beq.n	8002152 <??ZbZclAttrParseLength_19>
 8002130:	1c7b      	adds	r3, r7, #1
 8002132:	b2db      	uxtb	r3, r3
 8002134:	ebb5 0209 	subs.w	r2, r5, r9
 8002138:	eb04 0109 	add.w	r1, r4, r9
 800213c:	4658      	mov	r0, fp
 800213e:	b2c0      	uxtb	r0, r0
 8002140:	f7ff ff8f 	bl	8002062 <ZbZclAttrParseLength>
 8002144:	2800      	cmp	r0, #0
 8002146:	d43b      	bmi.n	80021c0 <??ZbZclAttrParseLength_1>

08002148 <??ZbZclAttrParseLength_20>:
 8002148:	eb10 0909 	adds.w	r9, r0, r9
 800214c:	eb1a 0808 	adds.w	r8, sl, r8
 8002150:	e7e4      	b.n	800211c <??ZbZclAttrParseLength_18>

08002152 <??ZbZclAttrParseLength_19>:
 8002152:	e02c      	b.n	80021ae <??ZbZclAttrParseLength_10>

08002154 <??ZbZclAttrParseLength_8>:
 8002154:	2d02      	cmp	r5, #2
 8002156:	d32a      	bcc.n	80021ae <??ZbZclAttrParseLength_10>

08002158 <??ZbZclAttrParseLength_21>:
 8002158:	0020      	movs	r0, r4
 800215a:	f7fe ff87 	bl	800106c <pletoh16>
 800215e:	4680      	mov	r8, r0
 8002160:	2002      	movs	r0, #2
 8002162:	4681      	mov	r9, r0

08002164 <??ZbZclAttrParseLength_22>:
 8002164:	4640      	mov	r0, r8
 8002166:	b280      	uxth	r0, r0
 8002168:	2800      	cmp	r0, #0
 800216a:	d01f      	beq.n	80021ac <??ZbZclAttrParseLength_23>
 800216c:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8002170:	4640      	mov	r0, r8
 8002172:	b280      	uxth	r0, r0
 8002174:	4550      	cmp	r0, sl
 8002176:	d019      	beq.n	80021ac <??ZbZclAttrParseLength_23>
 8002178:	f119 0001 	adds.w	r0, r9, #1
 800217c:	4285      	cmp	r5, r0
 800217e:	d315      	bcc.n	80021ac <??ZbZclAttrParseLength_23>

08002180 <??ZbZclAttrParseLength_24>:
 8002180:	f814 0009 	ldrb.w	r0, [r4, r9]
 8002184:	4683      	mov	fp, r0
 8002186:	f119 0901 	adds.w	r9, r9, #1
 800218a:	1c7b      	adds	r3, r7, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	ebb5 0209 	subs.w	r2, r5, r9
 8002192:	eb04 0109 	add.w	r1, r4, r9
 8002196:	4658      	mov	r0, fp
 8002198:	b2c0      	uxtb	r0, r0
 800219a:	f7ff ff62 	bl	8002062 <ZbZclAttrParseLength>
 800219e:	2800      	cmp	r0, #0
 80021a0:	d404      	bmi.n	80021ac <??ZbZclAttrParseLength_23>

080021a2 <??ZbZclAttrParseLength_25>:
 80021a2:	eb10 0909 	adds.w	r9, r0, r9
 80021a6:	eb1a 0808 	adds.w	r8, sl, r8
 80021aa:	e7db      	b.n	8002164 <??ZbZclAttrParseLength_22>

080021ac <??ZbZclAttrParseLength_23>:
 80021ac:	e7ff      	b.n	80021ae <??ZbZclAttrParseLength_10>

080021ae <??ZbZclAttrParseLength_10>:
 80021ae:	f1b9 0f00 	cmp.w	r9, #0
 80021b2:	d401      	bmi.n	80021b8 <??ZbZclAttrParseLength_26>
 80021b4:	454d      	cmp	r5, r9
 80021b6:	d202      	bcs.n	80021be <??ZbZclAttrParseLength_27>

080021b8 <??ZbZclAttrParseLength_26>:
 80021b8:	f05f 30ff 	movs.w	r0, #4294967295
 80021bc:	e000      	b.n	80021c0 <??ZbZclAttrParseLength_1>

080021be <??ZbZclAttrParseLength_27>:
 80021be:	4648      	mov	r0, r9

080021c0 <??ZbZclAttrParseLength_1>:
 80021c0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080021c4 <ZbZclAttrIsAnalog>:
 80021c4:	0001      	movs	r1, r0
 80021c6:	0008      	movs	r0, r1
 80021c8:	b2c0      	uxtb	r0, r0
 80021ca:	2820      	cmp	r0, #32
 80021cc:	db05      	blt.n	80021da <??ZbZclAttrIsAnalog_0>
 80021ce:	0008      	movs	r0, r1
 80021d0:	b2c0      	uxtb	r0, r0
 80021d2:	2828      	cmp	r0, #40	@ 0x28
 80021d4:	da01      	bge.n	80021da <??ZbZclAttrIsAnalog_0>
 80021d6:	2001      	movs	r0, #1
 80021d8:	e026      	b.n	8002228 <??ZbZclAttrIsAnalog_1>

080021da <??ZbZclAttrIsAnalog_0>:
 80021da:	0008      	movs	r0, r1
 80021dc:	b2c0      	uxtb	r0, r0
 80021de:	2828      	cmp	r0, #40	@ 0x28
 80021e0:	db05      	blt.n	80021ee <??ZbZclAttrIsAnalog_2>
 80021e2:	0008      	movs	r0, r1
 80021e4:	b2c0      	uxtb	r0, r0
 80021e6:	2830      	cmp	r0, #48	@ 0x30
 80021e8:	da01      	bge.n	80021ee <??ZbZclAttrIsAnalog_2>
 80021ea:	2001      	movs	r0, #1
 80021ec:	e01c      	b.n	8002228 <??ZbZclAttrIsAnalog_1>

080021ee <??ZbZclAttrIsAnalog_2>:
 80021ee:	0008      	movs	r0, r1
 80021f0:	b2c0      	uxtb	r0, r0
 80021f2:	2838      	cmp	r0, #56	@ 0x38
 80021f4:	d007      	beq.n	8002206 <??ZbZclAttrIsAnalog_3>
 80021f6:	0008      	movs	r0, r1
 80021f8:	b2c0      	uxtb	r0, r0
 80021fa:	2839      	cmp	r0, #57	@ 0x39
 80021fc:	d003      	beq.n	8002206 <??ZbZclAttrIsAnalog_3>
 80021fe:	0008      	movs	r0, r1
 8002200:	b2c0      	uxtb	r0, r0
 8002202:	283a      	cmp	r0, #58	@ 0x3a
 8002204:	d101      	bne.n	800220a <??ZbZclAttrIsAnalog_4>

08002206 <??ZbZclAttrIsAnalog_3>:
 8002206:	2001      	movs	r0, #1
 8002208:	e00e      	b.n	8002228 <??ZbZclAttrIsAnalog_1>

0800220a <??ZbZclAttrIsAnalog_4>:
 800220a:	0008      	movs	r0, r1
 800220c:	b2c0      	uxtb	r0, r0
 800220e:	28e0      	cmp	r0, #224	@ 0xe0
 8002210:	d007      	beq.n	8002222 <??ZbZclAttrIsAnalog_5>
 8002212:	0008      	movs	r0, r1
 8002214:	b2c0      	uxtb	r0, r0
 8002216:	28e1      	cmp	r0, #225	@ 0xe1
 8002218:	d003      	beq.n	8002222 <??ZbZclAttrIsAnalog_5>
 800221a:	0008      	movs	r0, r1
 800221c:	b2c0      	uxtb	r0, r0
 800221e:	28e2      	cmp	r0, #226	@ 0xe2
 8002220:	d101      	bne.n	8002226 <??ZbZclAttrIsAnalog_6>

08002222 <??ZbZclAttrIsAnalog_5>:
 8002222:	2001      	movs	r0, #1
 8002224:	e000      	b.n	8002228 <??ZbZclAttrIsAnalog_1>

08002226 <??ZbZclAttrIsAnalog_6>:
 8002226:	2000      	movs	r0, #0

08002228 <??ZbZclAttrIsAnalog_1>:
 8002228:	4770      	bx	lr
	...

0800222c <ZbZclAppendInteger>:
 800222c:	b4f0      	push	{r4, r5, r6, r7}
 800222e:	0004      	movs	r4, r0
 8002230:	000d      	movs	r5, r1
 8002232:	9904      	ldr	r1, [sp, #16]
 8002234:	2700      	movs	r7, #0
 8002236:	2600      	movs	r6, #0
 8002238:	0010      	movs	r0, r2
 800223a:	b2c0      	uxtb	r0, r0
 800223c:	2808      	cmp	r0, #8
 800223e:	f000 80b2 	beq.w	80023a6 <??ZbZclAppendInteger_0>
 8002242:	2809      	cmp	r0, #9
 8002244:	f000 80a4 	beq.w	8002390 <??ZbZclAppendInteger_1>
 8002248:	280a      	cmp	r0, #10
 800224a:	f000 8096 	beq.w	800237a <??ZbZclAppendInteger_2>
 800224e:	280b      	cmp	r0, #11
 8002250:	f000 8088 	beq.w	8002364 <??ZbZclAppendInteger_3>
 8002254:	280c      	cmp	r0, #12
 8002256:	d07a      	beq.n	800234e <??ZbZclAppendInteger_4>
 8002258:	280d      	cmp	r0, #13
 800225a:	d06d      	beq.n	8002338 <??ZbZclAppendInteger_5>
 800225c:	280e      	cmp	r0, #14
 800225e:	d060      	beq.n	8002322 <??ZbZclAppendInteger_6>
 8002260:	280f      	cmp	r0, #15
 8002262:	d053      	beq.n	800230c <??ZbZclAppendInteger_7>
 8002264:	2810      	cmp	r0, #16
 8002266:	d042      	beq.n	80022ee <??ZbZclAppendInteger_8>
 8002268:	2818      	cmp	r0, #24
 800226a:	f000 809c 	beq.w	80023a6 <??ZbZclAppendInteger_0>
 800226e:	2819      	cmp	r0, #25
 8002270:	f000 808e 	beq.w	8002390 <??ZbZclAppendInteger_1>
 8002274:	281a      	cmp	r0, #26
 8002276:	f000 8080 	beq.w	800237a <??ZbZclAppendInteger_2>
 800227a:	281b      	cmp	r0, #27
 800227c:	d072      	beq.n	8002364 <??ZbZclAppendInteger_3>
 800227e:	281c      	cmp	r0, #28
 8002280:	d065      	beq.n	800234e <??ZbZclAppendInteger_4>
 8002282:	281d      	cmp	r0, #29
 8002284:	d058      	beq.n	8002338 <??ZbZclAppendInteger_5>
 8002286:	281e      	cmp	r0, #30
 8002288:	d04b      	beq.n	8002322 <??ZbZclAppendInteger_6>
 800228a:	281f      	cmp	r0, #31
 800228c:	d03e      	beq.n	800230c <??ZbZclAppendInteger_7>
 800228e:	2820      	cmp	r0, #32
 8002290:	f000 8089 	beq.w	80023a6 <??ZbZclAppendInteger_0>
 8002294:	2821      	cmp	r0, #33	@ 0x21
 8002296:	d07b      	beq.n	8002390 <??ZbZclAppendInteger_1>
 8002298:	2822      	cmp	r0, #34	@ 0x22
 800229a:	d06e      	beq.n	800237a <??ZbZclAppendInteger_2>
 800229c:	2823      	cmp	r0, #35	@ 0x23
 800229e:	d061      	beq.n	8002364 <??ZbZclAppendInteger_3>
 80022a0:	2824      	cmp	r0, #36	@ 0x24
 80022a2:	d054      	beq.n	800234e <??ZbZclAppendInteger_4>
 80022a4:	2825      	cmp	r0, #37	@ 0x25
 80022a6:	d047      	beq.n	8002338 <??ZbZclAppendInteger_5>
 80022a8:	2826      	cmp	r0, #38	@ 0x26
 80022aa:	d03a      	beq.n	8002322 <??ZbZclAppendInteger_6>
 80022ac:	2827      	cmp	r0, #39	@ 0x27
 80022ae:	d02d      	beq.n	800230c <??ZbZclAppendInteger_7>
 80022b0:	2828      	cmp	r0, #40	@ 0x28
 80022b2:	d078      	beq.n	80023a6 <??ZbZclAppendInteger_0>
 80022b4:	2829      	cmp	r0, #41	@ 0x29
 80022b6:	d06b      	beq.n	8002390 <??ZbZclAppendInteger_1>
 80022b8:	282a      	cmp	r0, #42	@ 0x2a
 80022ba:	d05e      	beq.n	800237a <??ZbZclAppendInteger_2>
 80022bc:	282b      	cmp	r0, #43	@ 0x2b
 80022be:	d051      	beq.n	8002364 <??ZbZclAppendInteger_3>
 80022c0:	282c      	cmp	r0, #44	@ 0x2c
 80022c2:	d044      	beq.n	800234e <??ZbZclAppendInteger_4>
 80022c4:	282d      	cmp	r0, #45	@ 0x2d
 80022c6:	d037      	beq.n	8002338 <??ZbZclAppendInteger_5>
 80022c8:	282e      	cmp	r0, #46	@ 0x2e
 80022ca:	d02a      	beq.n	8002322 <??ZbZclAppendInteger_6>
 80022cc:	282f      	cmp	r0, #47	@ 0x2f
 80022ce:	d01d      	beq.n	800230c <??ZbZclAppendInteger_7>
 80022d0:	2830      	cmp	r0, #48	@ 0x30
 80022d2:	d068      	beq.n	80023a6 <??ZbZclAppendInteger_0>
 80022d4:	2831      	cmp	r0, #49	@ 0x31
 80022d6:	d05b      	beq.n	8002390 <??ZbZclAppendInteger_1>
 80022d8:	28e2      	cmp	r0, #226	@ 0xe2
 80022da:	d043      	beq.n	8002364 <??ZbZclAppendInteger_3>
 80022dc:	28e8      	cmp	r0, #232	@ 0xe8
 80022de:	d057      	beq.n	8002390 <??ZbZclAppendInteger_1>
 80022e0:	28e9      	cmp	r0, #233	@ 0xe9
 80022e2:	d055      	beq.n	8002390 <??ZbZclAppendInteger_1>
 80022e4:	28ea      	cmp	r0, #234	@ 0xea
 80022e6:	d03d      	beq.n	8002364 <??ZbZclAppendInteger_3>
 80022e8:	28f0      	cmp	r0, #240	@ 0xf0
 80022ea:	d00f      	beq.n	800230c <??ZbZclAppendInteger_7>
 80022ec:	e064      	b.n	80023b8 <??ZbZclAppendInteger_9>

080022ee <??ZbZclAppendInteger_8>:
 80022ee:	2900      	cmp	r1, #0
 80022f0:	d102      	bne.n	80022f8 <??ZbZclAppendInteger_10>
 80022f2:	f05f 30ff 	movs.w	r0, #4294967295
 80022f6:	e061      	b.n	80023bc <??ZbZclAppendInteger_11>

080022f8 <??ZbZclAppendInteger_10>:
 80022f8:	2d00      	cmp	r5, #0
 80022fa:	d101      	bne.n	8002300 <??ZbZclAppendInteger_12>
 80022fc:	2c00      	cmp	r4, #0
 80022fe:	d001      	beq.n	8002304 <??ZbZclAppendInteger_13>

08002300 <??ZbZclAppendInteger_12>:
 8002300:	2001      	movs	r0, #1
 8002302:	e000      	b.n	8002306 <??ZbZclAppendInteger_14>

08002304 <??ZbZclAppendInteger_13>:
 8002304:	2000      	movs	r0, #0

08002306 <??ZbZclAppendInteger_14>:
 8002306:	7018      	strb	r0, [r3, #0]
 8002308:	2001      	movs	r0, #1
 800230a:	e057      	b.n	80023bc <??ZbZclAppendInteger_11>

0800230c <??ZbZclAppendInteger_7>:
 800230c:	428f      	cmp	r7, r1
 800230e:	d302      	bcc.n	8002316 <??ZbZclAppendInteger_15>
 8002310:	f05f 30ff 	movs.w	r0, #4294967295
 8002314:	e052      	b.n	80023bc <??ZbZclAppendInteger_11>

08002316 <??ZbZclAppendInteger_15>:
 8002316:	55dc      	strb	r4, [r3, r7]
 8002318:	1c7f      	adds	r7, r7, #1
 800231a:	0a24      	lsrs	r4, r4, #8
 800231c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002320:	0a2d      	lsrs	r5, r5, #8

08002322 <??ZbZclAppendInteger_6>:
 8002322:	428f      	cmp	r7, r1
 8002324:	d302      	bcc.n	800232c <??ZbZclAppendInteger_16>
 8002326:	f05f 30ff 	movs.w	r0, #4294967295
 800232a:	e047      	b.n	80023bc <??ZbZclAppendInteger_11>

0800232c <??ZbZclAppendInteger_16>:
 800232c:	55dc      	strb	r4, [r3, r7]
 800232e:	1c7f      	adds	r7, r7, #1
 8002330:	0a24      	lsrs	r4, r4, #8
 8002332:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002336:	0a2d      	lsrs	r5, r5, #8

08002338 <??ZbZclAppendInteger_5>:
 8002338:	428f      	cmp	r7, r1
 800233a:	d302      	bcc.n	8002342 <??ZbZclAppendInteger_17>
 800233c:	f05f 30ff 	movs.w	r0, #4294967295
 8002340:	e03c      	b.n	80023bc <??ZbZclAppendInteger_11>

08002342 <??ZbZclAppendInteger_17>:
 8002342:	55dc      	strb	r4, [r3, r7]
 8002344:	1c7f      	adds	r7, r7, #1
 8002346:	0a24      	lsrs	r4, r4, #8
 8002348:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800234c:	0a2d      	lsrs	r5, r5, #8

0800234e <??ZbZclAppendInteger_4>:
 800234e:	428f      	cmp	r7, r1
 8002350:	d302      	bcc.n	8002358 <??ZbZclAppendInteger_18>
 8002352:	f05f 30ff 	movs.w	r0, #4294967295
 8002356:	e031      	b.n	80023bc <??ZbZclAppendInteger_11>

08002358 <??ZbZclAppendInteger_18>:
 8002358:	55dc      	strb	r4, [r3, r7]
 800235a:	1c7f      	adds	r7, r7, #1
 800235c:	0a24      	lsrs	r4, r4, #8
 800235e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002362:	0a2d      	lsrs	r5, r5, #8

08002364 <??ZbZclAppendInteger_3>:
 8002364:	428f      	cmp	r7, r1
 8002366:	d302      	bcc.n	800236e <??ZbZclAppendInteger_19>
 8002368:	f05f 30ff 	movs.w	r0, #4294967295
 800236c:	e026      	b.n	80023bc <??ZbZclAppendInteger_11>

0800236e <??ZbZclAppendInteger_19>:
 800236e:	55dc      	strb	r4, [r3, r7]
 8002370:	1c7f      	adds	r7, r7, #1
 8002372:	0a24      	lsrs	r4, r4, #8
 8002374:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002378:	0a2d      	lsrs	r5, r5, #8

0800237a <??ZbZclAppendInteger_2>:
 800237a:	428f      	cmp	r7, r1
 800237c:	d302      	bcc.n	8002384 <??ZbZclAppendInteger_20>
 800237e:	f05f 30ff 	movs.w	r0, #4294967295
 8002382:	e01b      	b.n	80023bc <??ZbZclAppendInteger_11>

08002384 <??ZbZclAppendInteger_20>:
 8002384:	55dc      	strb	r4, [r3, r7]
 8002386:	1c7f      	adds	r7, r7, #1
 8002388:	0a24      	lsrs	r4, r4, #8
 800238a:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800238e:	0a2d      	lsrs	r5, r5, #8

08002390 <??ZbZclAppendInteger_1>:
 8002390:	428f      	cmp	r7, r1
 8002392:	d302      	bcc.n	800239a <??ZbZclAppendInteger_21>
 8002394:	f05f 30ff 	movs.w	r0, #4294967295
 8002398:	e010      	b.n	80023bc <??ZbZclAppendInteger_11>

0800239a <??ZbZclAppendInteger_21>:
 800239a:	55dc      	strb	r4, [r3, r7]
 800239c:	1c7f      	adds	r7, r7, #1
 800239e:	0a24      	lsrs	r4, r4, #8
 80023a0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80023a4:	0a2d      	lsrs	r5, r5, #8

080023a6 <??ZbZclAppendInteger_0>:
 80023a6:	428f      	cmp	r7, r1
 80023a8:	d302      	bcc.n	80023b0 <??ZbZclAppendInteger_22>
 80023aa:	f05f 30ff 	movs.w	r0, #4294967295
 80023ae:	e005      	b.n	80023bc <??ZbZclAppendInteger_11>

080023b0 <??ZbZclAppendInteger_22>:
 80023b0:	55dc      	strb	r4, [r3, r7]
 80023b2:	1c7f      	adds	r7, r7, #1
 80023b4:	0038      	movs	r0, r7
 80023b6:	e001      	b.n	80023bc <??ZbZclAppendInteger_11>

080023b8 <??ZbZclAppendInteger_9>:
 80023b8:	f05f 30ff 	movs.w	r0, #4294967295

080023bc <??ZbZclAppendInteger_11>:
 80023bc:	bcf0      	pop	{r4, r5, r6, r7}
 80023be:	4770      	bx	lr

080023c0 <ZbZclParseInteger>:
 80023c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023c4:	4683      	mov	fp, r0
 80023c6:	000e      	movs	r6, r1
 80023c8:	4692      	mov	sl, r2
 80023ca:	2700      	movs	r7, #0
 80023cc:	2400      	movs	r4, #0
 80023ce:	2500      	movs	r5, #0
 80023d0:	f05f 0800 	movs.w	r8, #0
 80023d4:	f05f 0900 	movs.w	r9, #0
 80023d8:	4658      	mov	r0, fp
 80023da:	b2c0      	uxtb	r0, r0
 80023dc:	f000 f91e 	bl	800261c <ZbZclAttrIsInteger>
 80023e0:	2800      	cmp	r0, #0
 80023e2:	d105      	bne.n	80023f0 <??ZbZclParseInteger_0>
 80023e4:	208d      	movs	r0, #141	@ 0x8d
 80023e6:	f88a 0000 	strb.w	r0, [sl]
 80023ea:	2000      	movs	r0, #0
 80023ec:	2100      	movs	r1, #0
 80023ee:	e113      	b.n	8002618 <??ZbZclParseInteger_1>

080023f0 <??ZbZclParseInteger_0>:
 80023f0:	2000      	movs	r0, #0
 80023f2:	f88a 0000 	strb.w	r0, [sl]
 80023f6:	4658      	mov	r0, fp
 80023f8:	b2c0      	uxtb	r0, r0
 80023fa:	2808      	cmp	r0, #8
 80023fc:	f000 8097 	beq.w	800252e <??ZbZclParseInteger_2>
 8002400:	2809      	cmp	r0, #9
 8002402:	f000 808a 	beq.w	800251a <??ZbZclParseInteger_3>
 8002406:	280a      	cmp	r0, #10
 8002408:	d07d      	beq.n	8002506 <??ZbZclParseInteger_4>
 800240a:	280b      	cmp	r0, #11
 800240c:	d071      	beq.n	80024f2 <??ZbZclParseInteger_5>
 800240e:	280c      	cmp	r0, #12
 8002410:	d065      	beq.n	80024de <??ZbZclParseInteger_6>
 8002412:	280d      	cmp	r0, #13
 8002414:	d059      	beq.n	80024ca <??ZbZclParseInteger_7>
 8002416:	280e      	cmp	r0, #14
 8002418:	d04d      	beq.n	80024b6 <??ZbZclParseInteger_8>
 800241a:	280f      	cmp	r0, #15
 800241c:	d046      	beq.n	80024ac <??ZbZclParseInteger_9>
 800241e:	2810      	cmp	r0, #16
 8002420:	f000 8085 	beq.w	800252e <??ZbZclParseInteger_2>
 8002424:	2818      	cmp	r0, #24
 8002426:	f000 8082 	beq.w	800252e <??ZbZclParseInteger_2>
 800242a:	2819      	cmp	r0, #25
 800242c:	d075      	beq.n	800251a <??ZbZclParseInteger_3>
 800242e:	281a      	cmp	r0, #26
 8002430:	d069      	beq.n	8002506 <??ZbZclParseInteger_4>
 8002432:	281b      	cmp	r0, #27
 8002434:	d05d      	beq.n	80024f2 <??ZbZclParseInteger_5>
 8002436:	281c      	cmp	r0, #28
 8002438:	d051      	beq.n	80024de <??ZbZclParseInteger_6>
 800243a:	281d      	cmp	r0, #29
 800243c:	d045      	beq.n	80024ca <??ZbZclParseInteger_7>
 800243e:	281e      	cmp	r0, #30
 8002440:	d039      	beq.n	80024b6 <??ZbZclParseInteger_8>
 8002442:	281f      	cmp	r0, #31
 8002444:	d032      	beq.n	80024ac <??ZbZclParseInteger_9>
 8002446:	2820      	cmp	r0, #32
 8002448:	d071      	beq.n	800252e <??ZbZclParseInteger_2>
 800244a:	2821      	cmp	r0, #33	@ 0x21
 800244c:	d065      	beq.n	800251a <??ZbZclParseInteger_3>
 800244e:	2822      	cmp	r0, #34	@ 0x22
 8002450:	d059      	beq.n	8002506 <??ZbZclParseInteger_4>
 8002452:	2823      	cmp	r0, #35	@ 0x23
 8002454:	d04d      	beq.n	80024f2 <??ZbZclParseInteger_5>
 8002456:	2824      	cmp	r0, #36	@ 0x24
 8002458:	d041      	beq.n	80024de <??ZbZclParseInteger_6>
 800245a:	2825      	cmp	r0, #37	@ 0x25
 800245c:	d035      	beq.n	80024ca <??ZbZclParseInteger_7>
 800245e:	2826      	cmp	r0, #38	@ 0x26
 8002460:	d029      	beq.n	80024b6 <??ZbZclParseInteger_8>
 8002462:	2827      	cmp	r0, #39	@ 0x27
 8002464:	d022      	beq.n	80024ac <??ZbZclParseInteger_9>
 8002466:	2828      	cmp	r0, #40	@ 0x28
 8002468:	f000 80ac 	beq.w	80025c4 <??ZbZclParseInteger_10>
 800246c:	2829      	cmp	r0, #41	@ 0x29
 800246e:	f000 809f 	beq.w	80025b0 <??ZbZclParseInteger_11>
 8002472:	282a      	cmp	r0, #42	@ 0x2a
 8002474:	f000 8092 	beq.w	800259c <??ZbZclParseInteger_12>
 8002478:	282b      	cmp	r0, #43	@ 0x2b
 800247a:	f000 8085 	beq.w	8002588 <??ZbZclParseInteger_13>
 800247e:	282c      	cmp	r0, #44	@ 0x2c
 8002480:	d078      	beq.n	8002574 <??ZbZclParseInteger_14>
 8002482:	282d      	cmp	r0, #45	@ 0x2d
 8002484:	d06c      	beq.n	8002560 <??ZbZclParseInteger_15>
 8002486:	282e      	cmp	r0, #46	@ 0x2e
 8002488:	d060      	beq.n	800254c <??ZbZclParseInteger_16>
 800248a:	282f      	cmp	r0, #47	@ 0x2f
 800248c:	d059      	beq.n	8002542 <??ZbZclParseInteger_17>
 800248e:	2830      	cmp	r0, #48	@ 0x30
 8002490:	d04d      	beq.n	800252e <??ZbZclParseInteger_2>
 8002492:	2831      	cmp	r0, #49	@ 0x31
 8002494:	d041      	beq.n	800251a <??ZbZclParseInteger_3>
 8002496:	28e2      	cmp	r0, #226	@ 0xe2
 8002498:	d02b      	beq.n	80024f2 <??ZbZclParseInteger_5>
 800249a:	28e8      	cmp	r0, #232	@ 0xe8
 800249c:	d03d      	beq.n	800251a <??ZbZclParseInteger_3>
 800249e:	28e9      	cmp	r0, #233	@ 0xe9
 80024a0:	d03b      	beq.n	800251a <??ZbZclParseInteger_3>
 80024a2:	28ea      	cmp	r0, #234	@ 0xea
 80024a4:	d025      	beq.n	80024f2 <??ZbZclParseInteger_5>
 80024a6:	28f0      	cmp	r0, #240	@ 0xf0
 80024a8:	f040 80b1 	bne.w	800260e <??ZbZclParseInteger_18>

080024ac <??ZbZclParseInteger_9>:
 80024ac:	5df0      	ldrb	r0, [r6, r7]
 80024ae:	2100      	movs	r1, #0
 80024b0:	4304      	orrs	r4, r0
 80024b2:	430d      	orrs	r5, r1
 80024b4:	1c7f      	adds	r7, r7, #1

080024b6 <??ZbZclParseInteger_8>:
 80024b6:	5df0      	ldrb	r0, [r6, r7]
 80024b8:	2100      	movs	r1, #0
 80024ba:	003a      	movs	r2, r7
 80024bc:	b2d2      	uxtb	r2, r2
 80024be:	00d2      	lsls	r2, r2, #3
 80024c0:	f003 fbc6 	bl	8005c50 <__aeabi_llsl>
 80024c4:	4304      	orrs	r4, r0
 80024c6:	430d      	orrs	r5, r1
 80024c8:	1c7f      	adds	r7, r7, #1

080024ca <??ZbZclParseInteger_7>:
 80024ca:	5df0      	ldrb	r0, [r6, r7]
 80024cc:	2100      	movs	r1, #0
 80024ce:	003a      	movs	r2, r7
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	00d2      	lsls	r2, r2, #3
 80024d4:	f003 fbbc 	bl	8005c50 <__aeabi_llsl>
 80024d8:	4304      	orrs	r4, r0
 80024da:	430d      	orrs	r5, r1
 80024dc:	1c7f      	adds	r7, r7, #1

080024de <??ZbZclParseInteger_6>:
 80024de:	5df0      	ldrb	r0, [r6, r7]
 80024e0:	2100      	movs	r1, #0
 80024e2:	003a      	movs	r2, r7
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	00d2      	lsls	r2, r2, #3
 80024e8:	f003 fbb2 	bl	8005c50 <__aeabi_llsl>
 80024ec:	4304      	orrs	r4, r0
 80024ee:	430d      	orrs	r5, r1
 80024f0:	1c7f      	adds	r7, r7, #1

080024f2 <??ZbZclParseInteger_5>:
 80024f2:	5df0      	ldrb	r0, [r6, r7]
 80024f4:	2100      	movs	r1, #0
 80024f6:	003a      	movs	r2, r7
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	00d2      	lsls	r2, r2, #3
 80024fc:	f003 fba8 	bl	8005c50 <__aeabi_llsl>
 8002500:	4304      	orrs	r4, r0
 8002502:	430d      	orrs	r5, r1
 8002504:	1c7f      	adds	r7, r7, #1

08002506 <??ZbZclParseInteger_4>:
 8002506:	5df0      	ldrb	r0, [r6, r7]
 8002508:	2100      	movs	r1, #0
 800250a:	003a      	movs	r2, r7
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	00d2      	lsls	r2, r2, #3
 8002510:	f003 fb9e 	bl	8005c50 <__aeabi_llsl>
 8002514:	4304      	orrs	r4, r0
 8002516:	430d      	orrs	r5, r1
 8002518:	1c7f      	adds	r7, r7, #1

0800251a <??ZbZclParseInteger_3>:
 800251a:	5df0      	ldrb	r0, [r6, r7]
 800251c:	2100      	movs	r1, #0
 800251e:	003a      	movs	r2, r7
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	00d2      	lsls	r2, r2, #3
 8002524:	f003 fb94 	bl	8005c50 <__aeabi_llsl>
 8002528:	4304      	orrs	r4, r0
 800252a:	430d      	orrs	r5, r1
 800252c:	1c7f      	adds	r7, r7, #1

0800252e <??ZbZclParseInteger_2>:
 800252e:	5df0      	ldrb	r0, [r6, r7]
 8002530:	2100      	movs	r1, #0
 8002532:	003a      	movs	r2, r7
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	00d2      	lsls	r2, r2, #3
 8002538:	f003 fb8a 	bl	8005c50 <__aeabi_llsl>
 800253c:	4320      	orrs	r0, r4
 800253e:	4329      	orrs	r1, r5
 8002540:	e06a      	b.n	8002618 <??ZbZclParseInteger_1>

08002542 <??ZbZclParseInteger_17>:
 8002542:	5df0      	ldrb	r0, [r6, r7]
 8002544:	2100      	movs	r1, #0
 8002546:	4304      	orrs	r4, r0
 8002548:	430d      	orrs	r5, r1
 800254a:	1c7f      	adds	r7, r7, #1

0800254c <??ZbZclParseInteger_16>:
 800254c:	5df0      	ldrb	r0, [r6, r7]
 800254e:	2100      	movs	r1, #0
 8002550:	003a      	movs	r2, r7
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	00d2      	lsls	r2, r2, #3
 8002556:	f003 fb7b 	bl	8005c50 <__aeabi_llsl>
 800255a:	4304      	orrs	r4, r0
 800255c:	430d      	orrs	r5, r1
 800255e:	1c7f      	adds	r7, r7, #1

08002560 <??ZbZclParseInteger_15>:
 8002560:	5df0      	ldrb	r0, [r6, r7]
 8002562:	2100      	movs	r1, #0
 8002564:	003a      	movs	r2, r7
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	00d2      	lsls	r2, r2, #3
 800256a:	f003 fb71 	bl	8005c50 <__aeabi_llsl>
 800256e:	4304      	orrs	r4, r0
 8002570:	430d      	orrs	r5, r1
 8002572:	1c7f      	adds	r7, r7, #1

08002574 <??ZbZclParseInteger_14>:
 8002574:	5df0      	ldrb	r0, [r6, r7]
 8002576:	2100      	movs	r1, #0
 8002578:	003a      	movs	r2, r7
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	00d2      	lsls	r2, r2, #3
 800257e:	f003 fb67 	bl	8005c50 <__aeabi_llsl>
 8002582:	4304      	orrs	r4, r0
 8002584:	430d      	orrs	r5, r1
 8002586:	1c7f      	adds	r7, r7, #1

08002588 <??ZbZclParseInteger_13>:
 8002588:	5df0      	ldrb	r0, [r6, r7]
 800258a:	2100      	movs	r1, #0
 800258c:	003a      	movs	r2, r7
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	00d2      	lsls	r2, r2, #3
 8002592:	f003 fb5d 	bl	8005c50 <__aeabi_llsl>
 8002596:	4304      	orrs	r4, r0
 8002598:	430d      	orrs	r5, r1
 800259a:	1c7f      	adds	r7, r7, #1

0800259c <??ZbZclParseInteger_12>:
 800259c:	5df0      	ldrb	r0, [r6, r7]
 800259e:	2100      	movs	r1, #0
 80025a0:	003a      	movs	r2, r7
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	00d2      	lsls	r2, r2, #3
 80025a6:	f003 fb53 	bl	8005c50 <__aeabi_llsl>
 80025aa:	4304      	orrs	r4, r0
 80025ac:	430d      	orrs	r5, r1
 80025ae:	1c7f      	adds	r7, r7, #1

080025b0 <??ZbZclParseInteger_11>:
 80025b0:	5df0      	ldrb	r0, [r6, r7]
 80025b2:	2100      	movs	r1, #0
 80025b4:	003a      	movs	r2, r7
 80025b6:	b2d2      	uxtb	r2, r2
 80025b8:	00d2      	lsls	r2, r2, #3
 80025ba:	f003 fb49 	bl	8005c50 <__aeabi_llsl>
 80025be:	4304      	orrs	r4, r0
 80025c0:	430d      	orrs	r5, r1
 80025c2:	1c7f      	adds	r7, r7, #1

080025c4 <??ZbZclParseInteger_10>:
 80025c4:	5df0      	ldrb	r0, [r6, r7]
 80025c6:	2100      	movs	r1, #0
 80025c8:	003a      	movs	r2, r7
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	00d2      	lsls	r2, r2, #3
 80025ce:	f003 fb3f 	bl	8005c50 <__aeabi_llsl>
 80025d2:	4320      	orrs	r0, r4
 80025d4:	4329      	orrs	r1, r5
 80025d6:	003a      	movs	r2, r7
 80025d8:	1c57      	adds	r7, r2, #1
 80025da:	5cb2      	ldrb	r2, [r6, r2]
 80025dc:	0612      	lsls	r2, r2, #24
 80025de:	d515      	bpl.n	800260c <??ZbZclParseInteger_19>
 80025e0:	2f08      	cmp	r7, #8
 80025e2:	d213      	bcs.n	800260c <??ZbZclParseInteger_19>
 80025e4:	0004      	movs	r4, r0
 80025e6:	000d      	movs	r5, r1
 80025e8:	2001      	movs	r0, #1
 80025ea:	2100      	movs	r1, #0
 80025ec:	f1d7 0208 	rsbs	r2, r7, #8
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	00d2      	lsls	r2, r2, #3
 80025f4:	f003 fb2c 	bl	8005c50 <__aeabi_llsl>
 80025f8:	1e40      	subs	r0, r0, #1
 80025fa:	f171 0100 	sbcs.w	r1, r1, #0
 80025fe:	003a      	movs	r2, r7
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	00d2      	lsls	r2, r2, #3
 8002604:	f003 fb24 	bl	8005c50 <__aeabi_llsl>
 8002608:	4320      	orrs	r0, r4
 800260a:	4329      	orrs	r1, r5

0800260c <??ZbZclParseInteger_19>:
 800260c:	e004      	b.n	8002618 <??ZbZclParseInteger_1>

0800260e <??ZbZclParseInteger_18>:
 800260e:	208d      	movs	r0, #141	@ 0x8d
 8002610:	f88a 0000 	strb.w	r0, [sl]
 8002614:	2000      	movs	r0, #0
 8002616:	2100      	movs	r1, #0

08002618 <??ZbZclParseInteger_1>:
 8002618:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800261c <ZbZclAttrIsInteger>:
 800261c:	0001      	movs	r1, r0
 800261e:	2200      	movs	r2, #0
 8002620:	0008      	movs	r0, r1
 8002622:	b2c0      	uxtb	r0, r0
 8002624:	3808      	subs	r0, #8
 8002626:	2808      	cmp	r0, #8
 8002628:	d909      	bls.n	800263e <??ZbZclAttrIsInteger_0>
 800262a:	3810      	subs	r0, #16
 800262c:	2819      	cmp	r0, #25
 800262e:	d906      	bls.n	800263e <??ZbZclAttrIsInteger_0>
 8002630:	38ca      	subs	r0, #202	@ 0xca
 8002632:	d004      	beq.n	800263e <??ZbZclAttrIsInteger_0>
 8002634:	1f80      	subs	r0, r0, #6
 8002636:	2802      	cmp	r0, #2
 8002638:	d901      	bls.n	800263e <??ZbZclAttrIsInteger_0>
 800263a:	3808      	subs	r0, #8
 800263c:	d101      	bne.n	8002642 <??ZbZclAttrIsInteger_1>

0800263e <??ZbZclAttrIsInteger_0>:
 800263e:	2001      	movs	r0, #1
 8002640:	e000      	b.n	8002644 <??ZbZclAttrIsInteger_2>

08002642 <??ZbZclAttrIsInteger_1>:
 8002642:	2000      	movs	r0, #0

08002644 <??ZbZclAttrIsInteger_2>:
 8002644:	b2c0      	uxtb	r0, r0
 8002646:	4770      	bx	lr

08002648 <ZbZclAttrIntegerRangeCheck>:
 8002648:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800264c:	0004      	movs	r4, r0
 800264e:	000d      	movs	r5, r1
 8002650:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8002654:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 8002658:	0010      	movs	r0, r2
 800265a:	b2c0      	uxtb	r0, r0
 800265c:	2810      	cmp	r0, #16
 800265e:	d045      	beq.n	80026ec <??ZbZclAttrIntegerRangeCheck_0>
 8002660:	2818      	cmp	r0, #24
 8002662:	d051      	beq.n	8002708 <??ZbZclAttrIntegerRangeCheck_1>
 8002664:	2819      	cmp	r0, #25
 8002666:	d060      	beq.n	800272a <??ZbZclAttrIntegerRangeCheck_2>
 8002668:	281a      	cmp	r0, #26
 800266a:	d072      	beq.n	8002752 <??ZbZclAttrIntegerRangeCheck_3>
 800266c:	281b      	cmp	r0, #27
 800266e:	f000 8086 	beq.w	800277e <??ZbZclAttrIntegerRangeCheck_4>
 8002672:	281c      	cmp	r0, #28
 8002674:	f000 8098 	beq.w	80027a8 <??ZbZclAttrIntegerRangeCheck_5>
 8002678:	281d      	cmp	r0, #29
 800267a:	f000 80a7 	beq.w	80027cc <??ZbZclAttrIntegerRangeCheck_6>
 800267e:	281e      	cmp	r0, #30
 8002680:	f000 80b9 	beq.w	80027f6 <??ZbZclAttrIntegerRangeCheck_7>
 8002684:	281f      	cmp	r0, #31
 8002686:	f000 80cd 	beq.w	8002824 <??ZbZclAttrIntegerRangeCheck_8>
 800268a:	2820      	cmp	r0, #32
 800268c:	d03c      	beq.n	8002708 <??ZbZclAttrIntegerRangeCheck_1>
 800268e:	2821      	cmp	r0, #33	@ 0x21
 8002690:	d04b      	beq.n	800272a <??ZbZclAttrIntegerRangeCheck_2>
 8002692:	2822      	cmp	r0, #34	@ 0x22
 8002694:	d05d      	beq.n	8002752 <??ZbZclAttrIntegerRangeCheck_3>
 8002696:	2823      	cmp	r0, #35	@ 0x23
 8002698:	d071      	beq.n	800277e <??ZbZclAttrIntegerRangeCheck_4>
 800269a:	2824      	cmp	r0, #36	@ 0x24
 800269c:	f000 8084 	beq.w	80027a8 <??ZbZclAttrIntegerRangeCheck_5>
 80026a0:	2825      	cmp	r0, #37	@ 0x25
 80026a2:	f000 8093 	beq.w	80027cc <??ZbZclAttrIntegerRangeCheck_6>
 80026a6:	2826      	cmp	r0, #38	@ 0x26
 80026a8:	f000 80a5 	beq.w	80027f6 <??ZbZclAttrIntegerRangeCheck_7>
 80026ac:	2827      	cmp	r0, #39	@ 0x27
 80026ae:	f000 80b9 	beq.w	8002824 <??ZbZclAttrIntegerRangeCheck_8>
 80026b2:	2828      	cmp	r0, #40	@ 0x28
 80026b4:	f000 80c1 	beq.w	800283a <??ZbZclAttrIntegerRangeCheck_9>
 80026b8:	2829      	cmp	r0, #41	@ 0x29
 80026ba:	f000 80d9 	beq.w	8002870 <??ZbZclAttrIntegerRangeCheck_10>
 80026be:	282a      	cmp	r0, #42	@ 0x2a
 80026c0:	f000 80f0 	beq.w	80028a4 <??ZbZclAttrIntegerRangeCheck_11>
 80026c4:	282b      	cmp	r0, #43	@ 0x2b
 80026c6:	f000 8107 	beq.w	80028d8 <??ZbZclAttrIntegerRangeCheck_12>
 80026ca:	282c      	cmp	r0, #44	@ 0x2c
 80026cc:	f000 8120 	beq.w	8002910 <??ZbZclAttrIntegerRangeCheck_13>
 80026d0:	282d      	cmp	r0, #45	@ 0x2d
 80026d2:	f000 8136 	beq.w	8002942 <??ZbZclAttrIntegerRangeCheck_14>
 80026d6:	282e      	cmp	r0, #46	@ 0x2e
 80026d8:	f000 814b 	beq.w	8002972 <??ZbZclAttrIntegerRangeCheck_15>
 80026dc:	282f      	cmp	r0, #47	@ 0x2f
 80026de:	f000 8160 	beq.w	80029a2 <??ZbZclAttrIntegerRangeCheck_16>
 80026e2:	2830      	cmp	r0, #48	@ 0x30
 80026e4:	d010      	beq.n	8002708 <??ZbZclAttrIntegerRangeCheck_1>
 80026e6:	2831      	cmp	r0, #49	@ 0x31
 80026e8:	d01f      	beq.n	800272a <??ZbZclAttrIntegerRangeCheck_2>
 80026ea:	e164      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080026ec <??ZbZclAttrIntegerRangeCheck_0>:
 80026ec:	2d00      	cmp	r5, #0
 80026ee:	d103      	bne.n	80026f8 <??ZbZclAttrIntegerRangeCheck_18>
 80026f0:	2cff      	cmp	r4, #255	@ 0xff
 80026f2:	d101      	bne.n	80026f8 <??ZbZclAttrIntegerRangeCheck_18>
 80026f4:	2001      	movs	r0, #1
 80026f6:	e176      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080026f8 <??ZbZclAttrIntegerRangeCheck_18>:
 80026f8:	2d00      	cmp	r5, #0
 80026fa:	db04      	blt.n	8002706 <??ZbZclAttrIntegerRangeCheck_20>
 80026fc:	dc01      	bgt.n	8002702 <??ZbZclAttrIntegerRangeCheck_21>
 80026fe:	2c02      	cmp	r4, #2
 8002700:	d301      	bcc.n	8002706 <??ZbZclAttrIntegerRangeCheck_20>

08002702 <??ZbZclAttrIntegerRangeCheck_21>:
 8002702:	2000      	movs	r0, #0
 8002704:	e16f      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002706 <??ZbZclAttrIntegerRangeCheck_20>:
 8002706:	e156      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

08002708 <??ZbZclAttrIntegerRangeCheck_1>:
 8002708:	2d00      	cmp	r5, #0
 800270a:	d103      	bne.n	8002714 <??ZbZclAttrIntegerRangeCheck_23>
 800270c:	2cff      	cmp	r4, #255	@ 0xff
 800270e:	d101      	bne.n	8002714 <??ZbZclAttrIntegerRangeCheck_23>
 8002710:	2001      	movs	r0, #1
 8002712:	e168      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002714 <??ZbZclAttrIntegerRangeCheck_23>:
 8002714:	2d00      	cmp	r5, #0
 8002716:	d405      	bmi.n	8002724 <??ZbZclAttrIntegerRangeCheck_24>
 8002718:	2d00      	cmp	r5, #0
 800271a:	db05      	blt.n	8002728 <??ZbZclAttrIntegerRangeCheck_25>
 800271c:	dc02      	bgt.n	8002724 <??ZbZclAttrIntegerRangeCheck_24>
 800271e:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002722:	d301      	bcc.n	8002728 <??ZbZclAttrIntegerRangeCheck_25>

08002724 <??ZbZclAttrIntegerRangeCheck_24>:
 8002724:	2000      	movs	r0, #0
 8002726:	e15e      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002728 <??ZbZclAttrIntegerRangeCheck_25>:
 8002728:	e145      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

0800272a <??ZbZclAttrIntegerRangeCheck_2>:
 800272a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800272e:	2100      	movs	r1, #0
 8002730:	428d      	cmp	r5, r1
 8002732:	d103      	bne.n	800273c <??ZbZclAttrIntegerRangeCheck_27>
 8002734:	4284      	cmp	r4, r0
 8002736:	d101      	bne.n	800273c <??ZbZclAttrIntegerRangeCheck_27>
 8002738:	2001      	movs	r0, #1
 800273a:	e154      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

0800273c <??ZbZclAttrIntegerRangeCheck_27>:
 800273c:	2d00      	cmp	r5, #0
 800273e:	d405      	bmi.n	800274c <??ZbZclAttrIntegerRangeCheck_28>
 8002740:	2d00      	cmp	r5, #0
 8002742:	db05      	blt.n	8002750 <??ZbZclAttrIntegerRangeCheck_29>
 8002744:	dc02      	bgt.n	800274c <??ZbZclAttrIntegerRangeCheck_28>
 8002746:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800274a:	d301      	bcc.n	8002750 <??ZbZclAttrIntegerRangeCheck_29>

0800274c <??ZbZclAttrIntegerRangeCheck_28>:
 800274c:	2000      	movs	r0, #0
 800274e:	e14a      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002750 <??ZbZclAttrIntegerRangeCheck_29>:
 8002750:	e131      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

08002752 <??ZbZclAttrIntegerRangeCheck_3>:
 8002752:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 8002756:	2100      	movs	r1, #0
 8002758:	428d      	cmp	r5, r1
 800275a:	d103      	bne.n	8002764 <??ZbZclAttrIntegerRangeCheck_31>
 800275c:	4284      	cmp	r4, r0
 800275e:	d101      	bne.n	8002764 <??ZbZclAttrIntegerRangeCheck_31>
 8002760:	2001      	movs	r0, #1
 8002762:	e140      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002764 <??ZbZclAttrIntegerRangeCheck_31>:
 8002764:	2d00      	cmp	r5, #0
 8002766:	d407      	bmi.n	8002778 <??ZbZclAttrIntegerRangeCheck_32>
 8002768:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 800276c:	2100      	movs	r1, #0
 800276e:	428d      	cmp	r5, r1
 8002770:	db04      	blt.n	800277c <??ZbZclAttrIntegerRangeCheck_33>
 8002772:	dc01      	bgt.n	8002778 <??ZbZclAttrIntegerRangeCheck_32>
 8002774:	4284      	cmp	r4, r0
 8002776:	d301      	bcc.n	800277c <??ZbZclAttrIntegerRangeCheck_33>

08002778 <??ZbZclAttrIntegerRangeCheck_32>:
 8002778:	2000      	movs	r0, #0
 800277a:	e134      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

0800277c <??ZbZclAttrIntegerRangeCheck_33>:
 800277c:	e11b      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

0800277e <??ZbZclAttrIntegerRangeCheck_4>:
 800277e:	f05f 30ff 	movs.w	r0, #4294967295
 8002782:	2100      	movs	r1, #0
 8002784:	428d      	cmp	r5, r1
 8002786:	d103      	bne.n	8002790 <??ZbZclAttrIntegerRangeCheck_35>
 8002788:	4284      	cmp	r4, r0
 800278a:	d101      	bne.n	8002790 <??ZbZclAttrIntegerRangeCheck_35>
 800278c:	2001      	movs	r0, #1
 800278e:	e12a      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002790 <??ZbZclAttrIntegerRangeCheck_35>:
 8002790:	2d00      	cmp	r5, #0
 8002792:	d406      	bmi.n	80027a2 <??ZbZclAttrIntegerRangeCheck_36>
 8002794:	2000      	movs	r0, #0
 8002796:	2101      	movs	r1, #1
 8002798:	428d      	cmp	r5, r1
 800279a:	db04      	blt.n	80027a6 <??ZbZclAttrIntegerRangeCheck_37>
 800279c:	dc01      	bgt.n	80027a2 <??ZbZclAttrIntegerRangeCheck_36>
 800279e:	4284      	cmp	r4, r0
 80027a0:	d301      	bcc.n	80027a6 <??ZbZclAttrIntegerRangeCheck_37>

080027a2 <??ZbZclAttrIntegerRangeCheck_36>:
 80027a2:	2000      	movs	r0, #0
 80027a4:	e11f      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080027a6 <??ZbZclAttrIntegerRangeCheck_37>:
 80027a6:	e106      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080027a8 <??ZbZclAttrIntegerRangeCheck_5>:
 80027a8:	2dff      	cmp	r5, #255	@ 0xff
 80027aa:	d104      	bne.n	80027b6 <??ZbZclAttrIntegerRangeCheck_39>
 80027ac:	f1b4 3fff 	cmp.w	r4, #4294967295
 80027b0:	d101      	bne.n	80027b6 <??ZbZclAttrIntegerRangeCheck_39>
 80027b2:	2001      	movs	r0, #1
 80027b4:	e117      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080027b6 <??ZbZclAttrIntegerRangeCheck_39>:
 80027b6:	2d00      	cmp	r5, #0
 80027b8:	d405      	bmi.n	80027c6 <??ZbZclAttrIntegerRangeCheck_40>
 80027ba:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80027be:	db04      	blt.n	80027ca <??ZbZclAttrIntegerRangeCheck_41>
 80027c0:	dc01      	bgt.n	80027c6 <??ZbZclAttrIntegerRangeCheck_40>
 80027c2:	2c00      	cmp	r4, #0
 80027c4:	d301      	bcc.n	80027ca <??ZbZclAttrIntegerRangeCheck_41>

080027c6 <??ZbZclAttrIntegerRangeCheck_40>:
 80027c6:	2000      	movs	r0, #0
 80027c8:	e10d      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080027ca <??ZbZclAttrIntegerRangeCheck_41>:
 80027ca:	e0f4      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080027cc <??ZbZclAttrIntegerRangeCheck_6>:
 80027cc:	f05f 30ff 	movs.w	r0, #4294967295
 80027d0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80027d4:	428d      	cmp	r5, r1
 80027d6:	d103      	bne.n	80027e0 <??ZbZclAttrIntegerRangeCheck_43>
 80027d8:	4284      	cmp	r4, r0
 80027da:	d101      	bne.n	80027e0 <??ZbZclAttrIntegerRangeCheck_43>
 80027dc:	2001      	movs	r0, #1
 80027de:	e102      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080027e0 <??ZbZclAttrIntegerRangeCheck_43>:
 80027e0:	2d00      	cmp	r5, #0
 80027e2:	d405      	bmi.n	80027f0 <??ZbZclAttrIntegerRangeCheck_44>
 80027e4:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80027e8:	db04      	blt.n	80027f4 <??ZbZclAttrIntegerRangeCheck_45>
 80027ea:	dc01      	bgt.n	80027f0 <??ZbZclAttrIntegerRangeCheck_44>
 80027ec:	2c00      	cmp	r4, #0
 80027ee:	d301      	bcc.n	80027f4 <??ZbZclAttrIntegerRangeCheck_45>

080027f0 <??ZbZclAttrIntegerRangeCheck_44>:
 80027f0:	2000      	movs	r0, #0
 80027f2:	e0f8      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080027f4 <??ZbZclAttrIntegerRangeCheck_45>:
 80027f4:	e0df      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080027f6 <??ZbZclAttrIntegerRangeCheck_7>:
 80027f6:	f05f 30ff 	movs.w	r0, #4294967295
 80027fa:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 80027fe:	428d      	cmp	r5, r1
 8002800:	d103      	bne.n	800280a <??ZbZclAttrIntegerRangeCheck_47>
 8002802:	4284      	cmp	r4, r0
 8002804:	d101      	bne.n	800280a <??ZbZclAttrIntegerRangeCheck_47>
 8002806:	2001      	movs	r0, #1
 8002808:	e0ed      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

0800280a <??ZbZclAttrIntegerRangeCheck_47>:
 800280a:	2d00      	cmp	r5, #0
 800280c:	d407      	bmi.n	800281e <??ZbZclAttrIntegerRangeCheck_48>
 800280e:	2000      	movs	r0, #0
 8002810:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 8002814:	428d      	cmp	r5, r1
 8002816:	db04      	blt.n	8002822 <??ZbZclAttrIntegerRangeCheck_49>
 8002818:	dc01      	bgt.n	800281e <??ZbZclAttrIntegerRangeCheck_48>
 800281a:	4284      	cmp	r4, r0
 800281c:	d301      	bcc.n	8002822 <??ZbZclAttrIntegerRangeCheck_49>

0800281e <??ZbZclAttrIntegerRangeCheck_48>:
 800281e:	2000      	movs	r0, #0
 8002820:	e0e1      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002822 <??ZbZclAttrIntegerRangeCheck_49>:
 8002822:	e0c8      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

08002824 <??ZbZclAttrIntegerRangeCheck_8>:
 8002824:	f05f 30ff 	movs.w	r0, #4294967295
 8002828:	f05f 31ff 	movs.w	r1, #4294967295
 800282c:	428d      	cmp	r5, r1
 800282e:	d103      	bne.n	8002838 <??ZbZclAttrIntegerRangeCheck_51>
 8002830:	4284      	cmp	r4, r0
 8002832:	d101      	bne.n	8002838 <??ZbZclAttrIntegerRangeCheck_51>
 8002834:	2001      	movs	r0, #1
 8002836:	e0d6      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002838 <??ZbZclAttrIntegerRangeCheck_51>:
 8002838:	e0bd      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

0800283a <??ZbZclAttrIntegerRangeCheck_9>:
 800283a:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 800283e:	f05f 31ff 	movs.w	r1, #4294967295
 8002842:	428d      	cmp	r5, r1
 8002844:	d103      	bne.n	800284e <??ZbZclAttrIntegerRangeCheck_52>
 8002846:	4284      	cmp	r4, r0
 8002848:	d101      	bne.n	800284e <??ZbZclAttrIntegerRangeCheck_52>
 800284a:	2001      	movs	r0, #1
 800284c:	e0cb      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

0800284e <??ZbZclAttrIntegerRangeCheck_52>:
 800284e:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8002852:	f05f 31ff 	movs.w	r1, #4294967295
 8002856:	428d      	cmp	r5, r1
 8002858:	db07      	blt.n	800286a <??ZbZclAttrIntegerRangeCheck_53>
 800285a:	dc01      	bgt.n	8002860 <??ZbZclAttrIntegerRangeCheck_54>
 800285c:	4284      	cmp	r4, r0
 800285e:	d304      	bcc.n	800286a <??ZbZclAttrIntegerRangeCheck_53>

08002860 <??ZbZclAttrIntegerRangeCheck_54>:
 8002860:	2d00      	cmp	r5, #0
 8002862:	db04      	blt.n	800286e <??ZbZclAttrIntegerRangeCheck_55>
 8002864:	dc01      	bgt.n	800286a <??ZbZclAttrIntegerRangeCheck_53>
 8002866:	2c80      	cmp	r4, #128	@ 0x80
 8002868:	d301      	bcc.n	800286e <??ZbZclAttrIntegerRangeCheck_55>

0800286a <??ZbZclAttrIntegerRangeCheck_53>:
 800286a:	2000      	movs	r0, #0
 800286c:	e0bb      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

0800286e <??ZbZclAttrIntegerRangeCheck_55>:
 800286e:	e0a2      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

08002870 <??ZbZclAttrIntegerRangeCheck_10>:
 8002870:	485e      	ldr	r0, [pc, #376]	@ (80029ec <??DataTable1>)
 8002872:	f05f 31ff 	movs.w	r1, #4294967295
 8002876:	428d      	cmp	r5, r1
 8002878:	d103      	bne.n	8002882 <??ZbZclAttrIntegerRangeCheck_57>
 800287a:	4284      	cmp	r4, r0
 800287c:	d101      	bne.n	8002882 <??ZbZclAttrIntegerRangeCheck_57>
 800287e:	2001      	movs	r0, #1
 8002880:	e0b1      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002882 <??ZbZclAttrIntegerRangeCheck_57>:
 8002882:	485a      	ldr	r0, [pc, #360]	@ (80029ec <??DataTable1>)
 8002884:	f05f 31ff 	movs.w	r1, #4294967295
 8002888:	428d      	cmp	r5, r1
 800288a:	db08      	blt.n	800289e <??ZbZclAttrIntegerRangeCheck_58>
 800288c:	dc01      	bgt.n	8002892 <??ZbZclAttrIntegerRangeCheck_59>
 800288e:	4284      	cmp	r4, r0
 8002890:	d305      	bcc.n	800289e <??ZbZclAttrIntegerRangeCheck_58>

08002892 <??ZbZclAttrIntegerRangeCheck_59>:
 8002892:	2d00      	cmp	r5, #0
 8002894:	db05      	blt.n	80028a2 <??ZbZclAttrIntegerRangeCheck_60>
 8002896:	dc02      	bgt.n	800289e <??ZbZclAttrIntegerRangeCheck_58>
 8002898:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800289c:	d301      	bcc.n	80028a2 <??ZbZclAttrIntegerRangeCheck_60>

0800289e <??ZbZclAttrIntegerRangeCheck_58>:
 800289e:	2000      	movs	r0, #0
 80028a0:	e0a1      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080028a2 <??ZbZclAttrIntegerRangeCheck_60>:
 80028a2:	e088      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080028a4 <??ZbZclAttrIntegerRangeCheck_11>:
 80028a4:	4852      	ldr	r0, [pc, #328]	@ (80029f0 <??DataTable1_1>)
 80028a6:	f05f 31ff 	movs.w	r1, #4294967295
 80028aa:	428d      	cmp	r5, r1
 80028ac:	d103      	bne.n	80028b6 <??ZbZclAttrIntegerRangeCheck_62>
 80028ae:	4284      	cmp	r4, r0
 80028b0:	d101      	bne.n	80028b6 <??ZbZclAttrIntegerRangeCheck_62>
 80028b2:	2001      	movs	r0, #1
 80028b4:	e097      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080028b6 <??ZbZclAttrIntegerRangeCheck_62>:
 80028b6:	484e      	ldr	r0, [pc, #312]	@ (80029f0 <??DataTable1_1>)
 80028b8:	f05f 31ff 	movs.w	r1, #4294967295
 80028bc:	428d      	cmp	r5, r1
 80028be:	db08      	blt.n	80028d2 <??ZbZclAttrIntegerRangeCheck_63>
 80028c0:	dc01      	bgt.n	80028c6 <??ZbZclAttrIntegerRangeCheck_64>
 80028c2:	4284      	cmp	r4, r0
 80028c4:	d305      	bcc.n	80028d2 <??ZbZclAttrIntegerRangeCheck_63>

080028c6 <??ZbZclAttrIntegerRangeCheck_64>:
 80028c6:	2d00      	cmp	r5, #0
 80028c8:	db05      	blt.n	80028d6 <??ZbZclAttrIntegerRangeCheck_65>
 80028ca:	dc02      	bgt.n	80028d2 <??ZbZclAttrIntegerRangeCheck_63>
 80028cc:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80028d0:	d301      	bcc.n	80028d6 <??ZbZclAttrIntegerRangeCheck_65>

080028d2 <??ZbZclAttrIntegerRangeCheck_63>:
 80028d2:	2000      	movs	r0, #0
 80028d4:	e087      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080028d6 <??ZbZclAttrIntegerRangeCheck_65>:
 80028d6:	e06e      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080028d8 <??ZbZclAttrIntegerRangeCheck_12>:
 80028d8:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80028dc:	f05f 31ff 	movs.w	r1, #4294967295
 80028e0:	428d      	cmp	r5, r1
 80028e2:	d103      	bne.n	80028ec <??ZbZclAttrIntegerRangeCheck_67>
 80028e4:	4284      	cmp	r4, r0
 80028e6:	d101      	bne.n	80028ec <??ZbZclAttrIntegerRangeCheck_67>
 80028e8:	2001      	movs	r0, #1
 80028ea:	e07c      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080028ec <??ZbZclAttrIntegerRangeCheck_67>:
 80028ec:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80028f0:	f05f 31ff 	movs.w	r1, #4294967295
 80028f4:	428d      	cmp	r5, r1
 80028f6:	db08      	blt.n	800290a <??ZbZclAttrIntegerRangeCheck_68>
 80028f8:	dc01      	bgt.n	80028fe <??ZbZclAttrIntegerRangeCheck_69>
 80028fa:	4284      	cmp	r4, r0
 80028fc:	d305      	bcc.n	800290a <??ZbZclAttrIntegerRangeCheck_68>

080028fe <??ZbZclAttrIntegerRangeCheck_69>:
 80028fe:	2d00      	cmp	r5, #0
 8002900:	db05      	blt.n	800290e <??ZbZclAttrIntegerRangeCheck_70>
 8002902:	dc02      	bgt.n	800290a <??ZbZclAttrIntegerRangeCheck_68>
 8002904:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 8002908:	d301      	bcc.n	800290e <??ZbZclAttrIntegerRangeCheck_70>

0800290a <??ZbZclAttrIntegerRangeCheck_68>:
 800290a:	2000      	movs	r0, #0
 800290c:	e06b      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

0800290e <??ZbZclAttrIntegerRangeCheck_70>:
 800290e:	e052      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

08002910 <??ZbZclAttrIntegerRangeCheck_13>:
 8002910:	2000      	movs	r0, #0
 8002912:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 8002916:	428d      	cmp	r5, r1
 8002918:	d103      	bne.n	8002922 <??ZbZclAttrIntegerRangeCheck_72>
 800291a:	4284      	cmp	r4, r0
 800291c:	d101      	bne.n	8002922 <??ZbZclAttrIntegerRangeCheck_72>
 800291e:	2001      	movs	r0, #1
 8002920:	e061      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002922 <??ZbZclAttrIntegerRangeCheck_72>:
 8002922:	2000      	movs	r0, #0
 8002924:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 8002928:	428d      	cmp	r5, r1
 800292a:	db07      	blt.n	800293c <??ZbZclAttrIntegerRangeCheck_73>
 800292c:	dc01      	bgt.n	8002932 <??ZbZclAttrIntegerRangeCheck_74>
 800292e:	4284      	cmp	r4, r0
 8002930:	d304      	bcc.n	800293c <??ZbZclAttrIntegerRangeCheck_73>

08002932 <??ZbZclAttrIntegerRangeCheck_74>:
 8002932:	2d80      	cmp	r5, #128	@ 0x80
 8002934:	db04      	blt.n	8002940 <??ZbZclAttrIntegerRangeCheck_75>
 8002936:	dc01      	bgt.n	800293c <??ZbZclAttrIntegerRangeCheck_73>
 8002938:	2c00      	cmp	r4, #0
 800293a:	d301      	bcc.n	8002940 <??ZbZclAttrIntegerRangeCheck_75>

0800293c <??ZbZclAttrIntegerRangeCheck_73>:
 800293c:	2000      	movs	r0, #0
 800293e:	e052      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002940 <??ZbZclAttrIntegerRangeCheck_75>:
 8002940:	e039      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

08002942 <??ZbZclAttrIntegerRangeCheck_14>:
 8002942:	2000      	movs	r0, #0
 8002944:	4929      	ldr	r1, [pc, #164]	@ (80029ec <??DataTable1>)
 8002946:	428d      	cmp	r5, r1
 8002948:	d103      	bne.n	8002952 <??ZbZclAttrIntegerRangeCheck_77>
 800294a:	4284      	cmp	r4, r0
 800294c:	d101      	bne.n	8002952 <??ZbZclAttrIntegerRangeCheck_77>
 800294e:	2001      	movs	r0, #1
 8002950:	e049      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002952 <??ZbZclAttrIntegerRangeCheck_77>:
 8002952:	2000      	movs	r0, #0
 8002954:	4925      	ldr	r1, [pc, #148]	@ (80029ec <??DataTable1>)
 8002956:	428d      	cmp	r5, r1
 8002958:	db08      	blt.n	800296c <??ZbZclAttrIntegerRangeCheck_78>
 800295a:	dc01      	bgt.n	8002960 <??ZbZclAttrIntegerRangeCheck_79>
 800295c:	4284      	cmp	r4, r0
 800295e:	d305      	bcc.n	800296c <??ZbZclAttrIntegerRangeCheck_78>

08002960 <??ZbZclAttrIntegerRangeCheck_79>:
 8002960:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8002964:	db04      	blt.n	8002970 <??ZbZclAttrIntegerRangeCheck_80>
 8002966:	dc01      	bgt.n	800296c <??ZbZclAttrIntegerRangeCheck_78>
 8002968:	2c00      	cmp	r4, #0
 800296a:	d301      	bcc.n	8002970 <??ZbZclAttrIntegerRangeCheck_80>

0800296c <??ZbZclAttrIntegerRangeCheck_78>:
 800296c:	2000      	movs	r0, #0
 800296e:	e03a      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002970 <??ZbZclAttrIntegerRangeCheck_80>:
 8002970:	e021      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

08002972 <??ZbZclAttrIntegerRangeCheck_15>:
 8002972:	2000      	movs	r0, #0
 8002974:	491e      	ldr	r1, [pc, #120]	@ (80029f0 <??DataTable1_1>)
 8002976:	428d      	cmp	r5, r1
 8002978:	d103      	bne.n	8002982 <??ZbZclAttrIntegerRangeCheck_82>
 800297a:	4284      	cmp	r4, r0
 800297c:	d101      	bne.n	8002982 <??ZbZclAttrIntegerRangeCheck_82>
 800297e:	2001      	movs	r0, #1
 8002980:	e031      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

08002982 <??ZbZclAttrIntegerRangeCheck_82>:
 8002982:	2000      	movs	r0, #0
 8002984:	491a      	ldr	r1, [pc, #104]	@ (80029f0 <??DataTable1_1>)
 8002986:	428d      	cmp	r5, r1
 8002988:	db08      	blt.n	800299c <??ZbZclAttrIntegerRangeCheck_83>
 800298a:	dc01      	bgt.n	8002990 <??ZbZclAttrIntegerRangeCheck_84>
 800298c:	4284      	cmp	r4, r0
 800298e:	d305      	bcc.n	800299c <??ZbZclAttrIntegerRangeCheck_83>

08002990 <??ZbZclAttrIntegerRangeCheck_84>:
 8002990:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 8002994:	db04      	blt.n	80029a0 <??ZbZclAttrIntegerRangeCheck_85>
 8002996:	dc01      	bgt.n	800299c <??ZbZclAttrIntegerRangeCheck_83>
 8002998:	2c00      	cmp	r4, #0
 800299a:	d301      	bcc.n	80029a0 <??ZbZclAttrIntegerRangeCheck_85>

0800299c <??ZbZclAttrIntegerRangeCheck_83>:
 800299c:	2000      	movs	r0, #0
 800299e:	e022      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080029a0 <??ZbZclAttrIntegerRangeCheck_85>:
 80029a0:	e009      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080029a2 <??ZbZclAttrIntegerRangeCheck_16>:
 80029a2:	2000      	movs	r0, #0
 80029a4:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 80029a8:	428d      	cmp	r5, r1
 80029aa:	d103      	bne.n	80029b4 <??ZbZclAttrIntegerRangeCheck_87>
 80029ac:	4284      	cmp	r4, r0
 80029ae:	d101      	bne.n	80029b4 <??ZbZclAttrIntegerRangeCheck_87>
 80029b0:	2001      	movs	r0, #1
 80029b2:	e018      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080029b4 <??ZbZclAttrIntegerRangeCheck_87>:
 80029b4:	e7ff      	b.n	80029b6 <??ZbZclAttrIntegerRangeCheck_17>

080029b6 <??ZbZclAttrIntegerRangeCheck_17>:
 80029b6:	ea56 0008 	orrs.w	r0, r6, r8
 80029ba:	ea57 0109 	orrs.w	r1, r7, r9
 80029be:	2900      	cmp	r1, #0
 80029c0:	d103      	bne.n	80029ca <??ZbZclAttrIntegerRangeCheck_88>
 80029c2:	2800      	cmp	r0, #0
 80029c4:	d101      	bne.n	80029ca <??ZbZclAttrIntegerRangeCheck_88>
 80029c6:	2001      	movs	r0, #1
 80029c8:	e00d      	b.n	80029e6 <??ZbZclAttrIntegerRangeCheck_19>

080029ca <??ZbZclAttrIntegerRangeCheck_88>:
 80029ca:	42bd      	cmp	r5, r7
 80029cc:	db09      	blt.n	80029e2 <??ZbZclAttrIntegerRangeCheck_89>
 80029ce:	dc01      	bgt.n	80029d4 <??ZbZclAttrIntegerRangeCheck_90>
 80029d0:	42b4      	cmp	r4, r6
 80029d2:	d306      	bcc.n	80029e2 <??ZbZclAttrIntegerRangeCheck_89>

080029d4 <??ZbZclAttrIntegerRangeCheck_90>:
 80029d4:	45a9      	cmp	r9, r5
 80029d6:	db04      	blt.n	80029e2 <??ZbZclAttrIntegerRangeCheck_89>
 80029d8:	dc01      	bgt.n	80029de <??ZbZclAttrIntegerRangeCheck_91>
 80029da:	45a0      	cmp	r8, r4
 80029dc:	d301      	bcc.n	80029e2 <??ZbZclAttrIntegerRangeCheck_89>

080029de <??ZbZclAttrIntegerRangeCheck_91>:
 80029de:	2001      	movs	r0, #1
 80029e0:	e000      	b.n	80029e4 <??ZbZclAttrIntegerRangeCheck_92>

080029e2 <??ZbZclAttrIntegerRangeCheck_89>:
 80029e2:	2000      	movs	r0, #0

080029e4 <??ZbZclAttrIntegerRangeCheck_92>:
 80029e4:	b2c0      	uxtb	r0, r0

080029e6 <??ZbZclAttrIntegerRangeCheck_19>:
 80029e6:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80029ea:	4770      	bx	lr

080029ec <??DataTable1>:
 80029ec:	8000 ffff                                   ....

080029f0 <??DataTable1_1>:
 80029f0:	0000 ff80                                   ....

080029f4 <ZbZclAttrIntegerRead>:
 80029f4:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80029f8:	b085      	sub	sp, #20
 80029fa:	0006      	movs	r6, r0
 80029fc:	000f      	movs	r7, r1
 80029fe:	0015      	movs	r5, r2
 8002a00:	001c      	movs	r4, r3
 8002a02:	2000      	movs	r0, #0
 8002a04:	f88d 0009 	strb.w	r0, [sp, #9]
 8002a08:	f05f 0808 	movs.w	r8, #8
 8002a0c:	f05f 0900 	movs.w	r9, #0
 8002a10:	f10d 0a0c 	add.w	sl, sp, #12
 8002a14:	464a      	mov	r2, r9
 8002a16:	4641      	mov	r1, r8
 8002a18:	4650      	mov	r0, sl
 8002a1a:	f003 f87a 	bl	8005b12 <__aeabi_memset>
 8002a1e:	2000      	movs	r0, #0
 8002a20:	9001      	str	r0, [sp, #4]
 8002a22:	2008      	movs	r0, #8
 8002a24:	9000      	str	r0, [sp, #0]
 8002a26:	ab03      	add	r3, sp, #12
 8002a28:	f10d 0209 	add.w	r2, sp, #9
 8002a2c:	0039      	movs	r1, r7
 8002a2e:	b289      	uxth	r1, r1
 8002a30:	0030      	movs	r0, r6
 8002a32:	f7fe fcee 	bl	8001412 <ZbZclAttrRead>
 8002a36:	f88d 0008 	strb.w	r0, [sp, #8]
 8002a3a:	2c00      	cmp	r4, #0
 8002a3c:	d002      	beq.n	8002a44 <??ZbZclAttrIntegerRead_0>
 8002a3e:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002a42:	7020      	strb	r0, [r4, #0]

08002a44 <??ZbZclAttrIntegerRead_0>:
 8002a44:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	d002      	beq.n	8002a52 <??ZbZclAttrIntegerRead_1>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	e01a      	b.n	8002a88 <??ZbZclAttrIntegerRead_2>

08002a52 <??ZbZclAttrIntegerRead_1>:
 8002a52:	aa02      	add	r2, sp, #8
 8002a54:	a903      	add	r1, sp, #12
 8002a56:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002a5a:	f7ff fcb1 	bl	80023c0 <ZbZclParseInteger>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	000b      	movs	r3, r1
 8002a62:	2c00      	cmp	r4, #0
 8002a64:	d002      	beq.n	8002a6c <??ZbZclAttrIntegerRead_3>
 8002a66:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002a6a:	7020      	strb	r0, [r4, #0]

08002a6c <??ZbZclAttrIntegerRead_3>:
 8002a6c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002a70:	2800      	cmp	r0, #0
 8002a72:	d002      	beq.n	8002a7a <??ZbZclAttrIntegerRead_4>
 8002a74:	2000      	movs	r0, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	e006      	b.n	8002a88 <??ZbZclAttrIntegerRead_2>

08002a7a <??ZbZclAttrIntegerRead_4>:
 8002a7a:	2d00      	cmp	r5, #0
 8002a7c:	d002      	beq.n	8002a84 <??ZbZclAttrIntegerRead_5>
 8002a7e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002a82:	7028      	strb	r0, [r5, #0]

08002a84 <??ZbZclAttrIntegerRead_5>:
 8002a84:	0010      	movs	r0, r2
 8002a86:	0019      	movs	r1, r3

08002a88 <??ZbZclAttrIntegerRead_2>:
 8002a88:	b006      	add	sp, #24
 8002a8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a8e <ZbZclAttrIntegerWrite>:
 8002a8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a92:	b087      	sub	sp, #28
 8002a94:	4680      	mov	r8, r0
 8002a96:	4689      	mov	r9, r1
 8002a98:	0014      	movs	r4, r2
 8002a9a:	001d      	movs	r5, r3
 8002a9c:	f1b8 0f00 	cmp.w	r8, #0
 8002aa0:	d101      	bne.n	8002aa6 <??ZbZclAttrIntegerWrite_0>
 8002aa2:	2087      	movs	r0, #135	@ 0x87
 8002aa4:	e042      	b.n	8002b2c <??ZbZclAttrIntegerWrite_1>

08002aa6 <??ZbZclAttrIntegerWrite_0>:
 8002aa6:	ab04      	add	r3, sp, #16
 8002aa8:	f10d 0211 	add.w	r2, sp, #17
 8002aac:	4649      	mov	r1, r9
 8002aae:	b289      	uxth	r1, r1
 8002ab0:	4640      	mov	r0, r8
 8002ab2:	f7ff ff9f 	bl	80029f4 <ZbZclAttrIntegerRead>
 8002ab6:	0006      	movs	r6, r0
 8002ab8:	000f      	movs	r7, r1
 8002aba:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002abe:	2800      	cmp	r0, #0
 8002ac0:	d002      	beq.n	8002ac8 <??ZbZclAttrIntegerWrite_2>
 8002ac2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002ac6:	e031      	b.n	8002b2c <??ZbZclAttrIntegerWrite_1>

08002ac8 <??ZbZclAttrIntegerWrite_2>:
 8002ac8:	42af      	cmp	r7, r5
 8002aca:	d103      	bne.n	8002ad4 <??ZbZclAttrIntegerWrite_3>
 8002acc:	42a6      	cmp	r6, r4
 8002ace:	d101      	bne.n	8002ad4 <??ZbZclAttrIntegerWrite_3>
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e02b      	b.n	8002b2c <??ZbZclAttrIntegerWrite_1>

08002ad4 <??ZbZclAttrIntegerWrite_3>:
 8002ad4:	2000      	movs	r0, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002adc:	2000      	movs	r0, #0
 8002ade:	2100      	movs	r1, #0
 8002ae0:	e9cd 0100 	strd	r0, r1, [sp]
 8002ae4:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002ae8:	0020      	movs	r0, r4
 8002aea:	0029      	movs	r1, r5
 8002aec:	f7ff fdac 	bl	8002648 <ZbZclAttrIntegerRangeCheck>
 8002af0:	2800      	cmp	r0, #0
 8002af2:	d101      	bne.n	8002af8 <??ZbZclAttrIntegerWrite_4>
 8002af4:	2087      	movs	r0, #135	@ 0x87
 8002af6:	e019      	b.n	8002b2c <??ZbZclAttrIntegerWrite_1>

08002af8 <??ZbZclAttrIntegerWrite_4>:
 8002af8:	0022      	movs	r2, r4
 8002afa:	002b      	movs	r3, r5
 8002afc:	a805      	add	r0, sp, #20
 8002afe:	f7fe fb46 	bl	800118e <putle64>
 8002b02:	2002      	movs	r0, #2
 8002b04:	9001      	str	r0, [sp, #4]
 8002b06:	2008      	movs	r0, #8
 8002b08:	9000      	str	r0, [sp, #0]
 8002b0a:	ab05      	add	r3, sp, #20
 8002b0c:	464a      	mov	r2, r9
 8002b0e:	b292      	uxth	r2, r2
 8002b10:	2100      	movs	r1, #0
 8002b12:	4640      	mov	r0, r8
 8002b14:	f7fe fdcf 	bl	80016b6 <ZbZclAttrWrite>
 8002b18:	f88d 0010 	strb.w	r0, [sp, #16]
 8002b1c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002b20:	2800      	cmp	r0, #0
 8002b22:	d002      	beq.n	8002b2a <??ZbZclAttrIntegerWrite_5>
 8002b24:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002b28:	e000      	b.n	8002b2c <??ZbZclAttrIntegerWrite_1>

08002b2a <??ZbZclAttrIntegerWrite_5>:
 8002b2a:	2000      	movs	r0, #0

08002b2c <??ZbZclAttrIntegerWrite_1>:
 8002b2c:	b007      	add	sp, #28
 8002b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002b32 <ZbZclAttrIntegerIncrement>:
 8002b32:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	468b      	mov	fp, r1
 8002b3a:	0016      	movs	r6, r2
 8002b3c:	001f      	movs	r7, r3
 8002b3e:	f05f 0a00 	movs.w	sl, #0
 8002b42:	466b      	mov	r3, sp
 8002b44:	f10d 0201 	add.w	r2, sp, #1
 8002b48:	4659      	mov	r1, fp
 8002b4a:	b289      	uxth	r1, r1
 8002b4c:	9804      	ldr	r0, [sp, #16]
 8002b4e:	f7ff ff51 	bl	80029f4 <ZbZclAttrIntegerRead>
 8002b52:	0002      	movs	r2, r0
 8002b54:	000b      	movs	r3, r1
 8002b56:	f89d 0000 	ldrb.w	r0, [sp]
 8002b5a:	2800      	cmp	r0, #0
 8002b5c:	d002      	beq.n	8002b64 <??ZbZclAttrIntegerIncrement_0>
 8002b5e:	f89d 0000 	ldrb.w	r0, [sp]
 8002b62:	e03e      	b.n	8002be2 <??ZbZclAttrIntegerIncrement_1>

08002b64 <??ZbZclAttrIntegerIncrement_0>:
 8002b64:	eb12 0806 	adds.w	r8, r2, r6
 8002b68:	eb53 0907 	adcs.w	r9, r3, r7
 8002b6c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002b70:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002b74:	f7ff f9ea 	bl	8001f4c <ZbZclAttrTypeLength>
 8002b78:	9001      	str	r0, [sp, #4]
 8002b7a:	9801      	ldr	r0, [sp, #4]
 8002b7c:	2801      	cmp	r0, #1
 8002b7e:	d017      	beq.n	8002bb0 <??ZbZclAttrIntegerIncrement_2>
 8002b80:	2802      	cmp	r0, #2
 8002b82:	d00b      	beq.n	8002b9c <??ZbZclAttrIntegerIncrement_3>
 8002b84:	2804      	cmp	r0, #4
 8002b86:	d002      	beq.n	8002b8e <??ZbZclAttrIntegerIncrement_4>
 8002b88:	2808      	cmp	r0, #8
 8002b8a:	d118      	bne.n	8002bbe <??ZbZclAttrIntegerIncrement_5>

08002b8c <??ZbZclAttrIntegerIncrement_6>:
 8002b8c:	e019      	b.n	8002bc2 <??ZbZclAttrIntegerIncrement_7>

08002b8e <??ZbZclAttrIntegerIncrement_4>:
 8002b8e:	f038 0000 	bics.w	r0, r8, #0
 8002b92:	f039 31ff 	bics.w	r1, r9, #4294967295
 8002b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002b9a:	e012      	b.n	8002bc2 <??ZbZclAttrIntegerIncrement_7>

08002b9c <??ZbZclAttrIntegerIncrement_3>:
 8002b9c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	ea18 0000 	ands.w	r0, r8, r0
 8002ba6:	ea19 0101 	ands.w	r1, r9, r1
 8002baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002bae:	e008      	b.n	8002bc2 <??ZbZclAttrIntegerIncrement_7>

08002bb0 <??ZbZclAttrIntegerIncrement_2>:
 8002bb0:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8002bb4:	f019 0100 	ands.w	r1, r9, #0
 8002bb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002bbc:	e001      	b.n	8002bc2 <??ZbZclAttrIntegerIncrement_7>

08002bbe <??ZbZclAttrIntegerIncrement_5>:
 8002bbe:	2001      	movs	r0, #1
 8002bc0:	4682      	mov	sl, r0

08002bc2 <??ZbZclAttrIntegerIncrement_7>:
 8002bc2:	4650      	mov	r0, sl
 8002bc4:	b2c0      	uxtb	r0, r0
 8002bc6:	2800      	cmp	r0, #0
 8002bc8:	d001      	beq.n	8002bce <??ZbZclAttrIntegerIncrement_8>
 8002bca:	2086      	movs	r0, #134	@ 0x86
 8002bcc:	e009      	b.n	8002be2 <??ZbZclAttrIntegerIncrement_1>

08002bce <??ZbZclAttrIntegerIncrement_8>:
 8002bce:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002bd2:	0022      	movs	r2, r4
 8002bd4:	002b      	movs	r3, r5
 8002bd6:	4659      	mov	r1, fp
 8002bd8:	b289      	uxth	r1, r1
 8002bda:	9804      	ldr	r0, [sp, #16]
 8002bdc:	f7ff ff57 	bl	8002a8e <ZbZclAttrIntegerWrite>
 8002be0:	2000      	movs	r0, #0

08002be2 <??ZbZclAttrIntegerIncrement_1>:
 8002be2:	b005      	add	sp, #20
 8002be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002be8 <ZbZclAttrEuiRead>:
 8002be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002bec:	b084      	sub	sp, #16
 8002bee:	0005      	movs	r5, r0
 8002bf0:	000e      	movs	r6, r1
 8002bf2:	0014      	movs	r4, r2
 8002bf4:	f05f 0808 	movs.w	r8, #8
 8002bf8:	f05f 0900 	movs.w	r9, #0
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	464a      	mov	r2, r9
 8002c00:	4641      	mov	r1, r8
 8002c02:	0038      	movs	r0, r7
 8002c04:	f002 ff85 	bl	8005b12 <__aeabi_memset>
 8002c08:	2000      	movs	r0, #0
 8002c0a:	9001      	str	r0, [sp, #4]
 8002c0c:	2008      	movs	r0, #8
 8002c0e:	9000      	str	r0, [sp, #0]
 8002c10:	ab02      	add	r3, sp, #8
 8002c12:	2200      	movs	r2, #0
 8002c14:	0031      	movs	r1, r6
 8002c16:	b289      	uxth	r1, r1
 8002c18:	0028      	movs	r0, r5
 8002c1a:	f7fe fbfa 	bl	8001412 <ZbZclAttrRead>
 8002c1e:	0007      	movs	r7, r0
 8002c20:	2c00      	cmp	r4, #0
 8002c22:	d000      	beq.n	8002c26 <??ZbZclAttrEuiRead_0>
 8002c24:	7027      	strb	r7, [r4, #0]

08002c26 <??ZbZclAttrEuiRead_0>:
 8002c26:	0038      	movs	r0, r7
 8002c28:	b2c0      	uxtb	r0, r0
 8002c2a:	2800      	cmp	r0, #0
 8002c2c:	d002      	beq.n	8002c34 <??ZbZclAttrEuiRead_1>
 8002c2e:	2000      	movs	r0, #0
 8002c30:	2100      	movs	r1, #0
 8002c32:	e002      	b.n	8002c3a <??ZbZclAttrEuiRead_2>

08002c34 <??ZbZclAttrEuiRead_1>:
 8002c34:	a802      	add	r0, sp, #8
 8002c36:	f7fe fa57 	bl	80010e8 <pletoh64>

08002c3a <??ZbZclAttrEuiRead_2>:
 8002c3a:	b005      	add	sp, #20
 8002c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002c40 <ZbZclAttrEuiWrite>:
 8002c40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c44:	b085      	sub	sp, #20
 8002c46:	4680      	mov	r8, r0
 8002c48:	4689      	mov	r9, r1
 8002c4a:	0014      	movs	r4, r2
 8002c4c:	001d      	movs	r5, r3
 8002c4e:	f1b8 0f00 	cmp.w	r8, #0
 8002c52:	d101      	bne.n	8002c58 <??ZbZclAttrEuiWrite_0>
 8002c54:	2087      	movs	r0, #135	@ 0x87
 8002c56:	e02e      	b.n	8002cb6 <??ZbZclAttrEuiWrite_1>

08002c58 <??ZbZclAttrEuiWrite_0>:
 8002c58:	aa02      	add	r2, sp, #8
 8002c5a:	4649      	mov	r1, r9
 8002c5c:	b289      	uxth	r1, r1
 8002c5e:	4640      	mov	r0, r8
 8002c60:	f7ff ffc2 	bl	8002be8 <ZbZclAttrEuiRead>
 8002c64:	0006      	movs	r6, r0
 8002c66:	000f      	movs	r7, r1
 8002c68:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002c6c:	2800      	cmp	r0, #0
 8002c6e:	d002      	beq.n	8002c76 <??ZbZclAttrEuiWrite_2>
 8002c70:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002c74:	e01f      	b.n	8002cb6 <??ZbZclAttrEuiWrite_1>

08002c76 <??ZbZclAttrEuiWrite_2>:
 8002c76:	42af      	cmp	r7, r5
 8002c78:	d103      	bne.n	8002c82 <??ZbZclAttrEuiWrite_3>
 8002c7a:	42a6      	cmp	r6, r4
 8002c7c:	d101      	bne.n	8002c82 <??ZbZclAttrEuiWrite_3>
 8002c7e:	2000      	movs	r0, #0
 8002c80:	e019      	b.n	8002cb6 <??ZbZclAttrEuiWrite_1>

08002c82 <??ZbZclAttrEuiWrite_3>:
 8002c82:	0022      	movs	r2, r4
 8002c84:	002b      	movs	r3, r5
 8002c86:	a803      	add	r0, sp, #12
 8002c88:	f7fe fa81 	bl	800118e <putle64>
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	9001      	str	r0, [sp, #4]
 8002c90:	2008      	movs	r0, #8
 8002c92:	9000      	str	r0, [sp, #0]
 8002c94:	ab03      	add	r3, sp, #12
 8002c96:	464a      	mov	r2, r9
 8002c98:	b292      	uxth	r2, r2
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4640      	mov	r0, r8
 8002c9e:	f7fe fd0a 	bl	80016b6 <ZbZclAttrWrite>
 8002ca2:	f88d 0008 	strb.w	r0, [sp, #8]
 8002ca6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002caa:	2800      	cmp	r0, #0
 8002cac:	d002      	beq.n	8002cb4 <??ZbZclAttrEuiWrite_4>
 8002cae:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002cb2:	e000      	b.n	8002cb6 <??ZbZclAttrEuiWrite_1>

08002cb4 <??ZbZclAttrEuiWrite_4>:
 8002cb4:	2000      	movs	r0, #0

08002cb6 <??ZbZclAttrEuiWrite_1>:
 8002cb6:	b005      	add	sp, #20
 8002cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002cbc <ZbZclAttrAppendList>:
 8002cbc:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc0:	b089      	sub	sp, #36	@ 0x24
 8002cc2:	0007      	movs	r7, r0
 8002cc4:	000e      	movs	r6, r1
 8002cc6:	68b8      	ldr	r0, [r7, #8]
 8002cc8:	9008      	str	r0, [sp, #32]
 8002cca:	2e00      	cmp	r6, #0
 8002ccc:	d002      	beq.n	8002cd4 <??ZbZclAttrAppendList_0>
 8002cce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002cd0:	2800      	cmp	r0, #0
 8002cd2:	d101      	bne.n	8002cd8 <??ZbZclAttrAppendList_1>

08002cd4 <??ZbZclAttrAppendList_0>:
 8002cd4:	2000      	movs	r0, #0
 8002cd6:	e0c6      	b.n	8002e66 <??ZbZclAttrAppendList_2>

08002cd8 <??ZbZclAttrAppendList_1>:
 8002cd8:	f05f 0800 	movs.w	r8, #0

08002cdc <??ZbZclAttrAppendList_3>:
 8002cdc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002cde:	4580      	cmp	r8, r0
 8002ce0:	f080 80bd 	bcs.w	8002e5e <??ZbZclAttrAppendList_4>
 8002ce4:	f05f 0928 	movs.w	r9, #40	@ 0x28
 8002ce8:	fb09 f008 	mul.w	r0, r9, r8
 8002cec:	4430      	add	r0, r6
 8002cee:	7900      	ldrb	r0, [r0, #4]
 8002cf0:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 8002cf4:	d007      	beq.n	8002d06 <??ZbZclAttrAppendList_5>
 8002cf6:	fb09 f008 	mul.w	r0, r9, r8
 8002cfa:	4430      	add	r0, r6
 8002cfc:	68c0      	ldr	r0, [r0, #12]
 8002cfe:	2800      	cmp	r0, #0
 8002d00:	d101      	bne.n	8002d06 <??ZbZclAttrAppendList_5>
 8002d02:	2001      	movs	r0, #1
 8002d04:	e0af      	b.n	8002e66 <??ZbZclAttrAppendList_2>

08002d06 <??ZbZclAttrAppendList_5>:
 8002d06:	fb09 f008 	mul.w	r0, r9, r8
 8002d0a:	5a31      	ldrh	r1, [r6, r0]
 8002d0c:	0038      	movs	r0, r7
 8002d0e:	f7fe fa7c 	bl	800120a <ZbZclAttrFind>
 8002d12:	0005      	movs	r5, r0
 8002d14:	2d00      	cmp	r5, #0
 8002d16:	d003      	beq.n	8002d20 <??ZbZclAttrAppendList_6>
 8002d18:	0029      	movs	r1, r5
 8002d1a:	0038      	movs	r0, r7
 8002d1c:	f000 f8b6 	bl	8002e8c <ZbZclAttrFreeAttr>

08002d20 <??ZbZclAttrAppendList_6>:
 8002d20:	2418      	movs	r4, #24
 8002d22:	f05f 0a00 	movs.w	sl, #0
 8002d26:	f10d 0b04 	add.w	fp, sp, #4
 8002d2a:	4652      	mov	r2, sl
 8002d2c:	0021      	movs	r1, r4
 8002d2e:	4658      	mov	r0, fp
 8002d30:	f002 feef 	bl	8005b12 <__aeabi_memset>
 8002d34:	a801      	add	r0, sp, #4
 8002d36:	9001      	str	r0, [sp, #4]
 8002d38:	a801      	add	r0, sp, #4
 8002d3a:	9002      	str	r0, [sp, #8]
 8002d3c:	fb09 f008 	mul.w	r0, r9, r8
 8002d40:	4430      	add	r0, r6
 8002d42:	9003      	str	r0, [sp, #12]
 8002d44:	fb09 f008 	mul.w	r0, r9, r8
 8002d48:	4430      	add	r0, r6
 8002d4a:	7900      	ldrb	r0, [r0, #4]
 8002d4c:	0780      	lsls	r0, r0, #30
 8002d4e:	d50b      	bpl.n	8002d68 <??ZbZclAttrAppendList_7>
 8002d50:	fb09 f008 	mul.w	r0, r9, r8
 8002d54:	4430      	add	r0, r6
 8002d56:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8002d58:	f8ad 001a 	strh.w	r0, [sp, #26]
 8002d5c:	fb09 f008 	mul.w	r0, r9, r8
 8002d60:	4430      	add	r0, r6
 8002d62:	8c00      	ldrh	r0, [r0, #32]
 8002d64:	f8ad 0018 	strh.w	r0, [sp, #24]

08002d68 <??ZbZclAttrAppendList_7>:
 8002d68:	fb09 f008 	mul.w	r0, r9, r8
 8002d6c:	4430      	add	r0, r6
 8002d6e:	7900      	ldrb	r0, [r0, #4]
 8002d70:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 8002d74:	2830      	cmp	r0, #48	@ 0x30
 8002d76:	d108      	bne.n	8002d8a <??ZbZclAttrAppendList_8>
 8002d78:	2000      	movs	r0, #0
 8002d7a:	9000      	str	r0, [sp, #0]
 8002d7c:	fb09 f908 	mul.w	r9, r9, r8
 8002d80:	eb06 0009 	add.w	r0, r6, r9
 8002d84:	6880      	ldr	r0, [r0, #8]
 8002d86:	9005      	str	r0, [sp, #20]
 8002d88:	e034      	b.n	8002df4 <??ZbZclAttrAppendList_9>

08002d8a <??ZbZclAttrAppendList_8>:
 8002d8a:	fb09 f008 	mul.w	r0, r9, r8
 8002d8e:	4430      	add	r0, r6
 8002d90:	6880      	ldr	r0, [r0, #8]
 8002d92:	2800      	cmp	r0, #0
 8002d94:	d01f      	beq.n	8002dd6 <??ZbZclAttrAppendList_10>
 8002d96:	fb09 f908 	mul.w	r9, r9, r8
 8002d9a:	eb06 0009 	add.w	r0, r6, r9
 8002d9e:	6880      	ldr	r0, [r0, #8]
 8002da0:	9005      	str	r0, [sp, #20]
 8002da2:	9803      	ldr	r0, [sp, #12]
 8002da4:	7880      	ldrb	r0, [r0, #2]
 8002da6:	2841      	cmp	r0, #65	@ 0x41
 8002da8:	d003      	beq.n	8002db2 <??ZbZclAttrAppendList_11>
 8002daa:	9803      	ldr	r0, [sp, #12]
 8002dac:	7880      	ldrb	r0, [r0, #2]
 8002dae:	2842      	cmp	r0, #66	@ 0x42
 8002db0:	d103      	bne.n	8002dba <??ZbZclAttrAppendList_12>

08002db2 <??ZbZclAttrAppendList_11>:
 8002db2:	9805      	ldr	r0, [sp, #20]
 8002db4:	1c40      	adds	r0, r0, #1
 8002db6:	9005      	str	r0, [sp, #20]
 8002db8:	e00a      	b.n	8002dd0 <??ZbZclAttrAppendList_13>

08002dba <??ZbZclAttrAppendList_12>:
 8002dba:	9803      	ldr	r0, [sp, #12]
 8002dbc:	7880      	ldrb	r0, [r0, #2]
 8002dbe:	2843      	cmp	r0, #67	@ 0x43
 8002dc0:	d003      	beq.n	8002dca <??ZbZclAttrAppendList_14>
 8002dc2:	9803      	ldr	r0, [sp, #12]
 8002dc4:	7880      	ldrb	r0, [r0, #2]
 8002dc6:	2844      	cmp	r0, #68	@ 0x44
 8002dc8:	d102      	bne.n	8002dd0 <??ZbZclAttrAppendList_13>

08002dca <??ZbZclAttrAppendList_14>:
 8002dca:	9805      	ldr	r0, [sp, #20]
 8002dcc:	1c80      	adds	r0, r0, #2
 8002dce:	9005      	str	r0, [sp, #20]

08002dd0 <??ZbZclAttrAppendList_13>:
 8002dd0:	9805      	ldr	r0, [sp, #20]
 8002dd2:	9000      	str	r0, [sp, #0]
 8002dd4:	e00e      	b.n	8002df4 <??ZbZclAttrAppendList_9>

08002dd6 <??ZbZclAttrAppendList_10>:
 8002dd6:	fb09 f908 	mul.w	r9, r9, r8
 8002dda:	eb06 0009 	add.w	r0, r6, r9
 8002dde:	7880      	ldrb	r0, [r0, #2]
 8002de0:	f7ff f8b4 	bl	8001f4c <ZbZclAttrTypeLength>
 8002de4:	9005      	str	r0, [sp, #20]
 8002de6:	9805      	ldr	r0, [sp, #20]
 8002de8:	2800      	cmp	r0, #0
 8002dea:	d101      	bne.n	8002df0 <??ZbZclAttrAppendList_15>
 8002dec:	208d      	movs	r0, #141	@ 0x8d
 8002dee:	e03a      	b.n	8002e66 <??ZbZclAttrAppendList_2>

08002df0 <??ZbZclAttrAppendList_15>:
 8002df0:	9805      	ldr	r0, [sp, #20]
 8002df2:	9000      	str	r0, [sp, #0]

08002df4 <??ZbZclAttrAppendList_9>:
 8002df4:	2300      	movs	r3, #0
 8002df6:	a236      	add	r2, pc, #216	@ (adr r2, 8002ed0 <??DataTable1>)
 8002df8:	9900      	ldr	r1, [sp, #0]
 8002dfa:	3118      	adds	r1, #24
 8002dfc:	9808      	ldr	r0, [sp, #32]
 8002dfe:	f011 fba1 	bl	8014544 <zb_heap_alloc>
 8002e02:	0004      	movs	r4, r0
 8002e04:	2c00      	cmp	r4, #0
 8002e06:	d101      	bne.n	8002e0c <??ZbZclAttrAppendList_16>
 8002e08:	2089      	movs	r0, #137	@ 0x89
 8002e0a:	e02c      	b.n	8002e66 <??ZbZclAttrAppendList_2>

08002e0c <??ZbZclAttrAppendList_16>:
 8002e0c:	2518      	movs	r5, #24
 8002e0e:	f10d 0904 	add.w	r9, sp, #4
 8002e12:	46a2      	mov	sl, r4
 8002e14:	002a      	movs	r2, r5
 8002e16:	4649      	mov	r1, r9
 8002e18:	4650      	mov	r0, sl
 8002e1a:	f014 f93c 	bl	8017096 <__aeabi_memcpy>
 8002e1e:	9800      	ldr	r0, [sp, #0]
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d00c      	beq.n	8002e3e <??ZbZclAttrAppendList_17>
 8002e24:	f114 0018 	adds.w	r0, r4, #24
 8002e28:	60e0      	str	r0, [r4, #12]
 8002e2a:	9800      	ldr	r0, [sp, #0]
 8002e2c:	9007      	str	r0, [sp, #28]
 8002e2e:	2500      	movs	r5, #0
 8002e30:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8002e34:	002a      	movs	r2, r5
 8002e36:	9907      	ldr	r1, [sp, #28]
 8002e38:	4648      	mov	r0, r9
 8002e3a:	f002 fe6a 	bl	8005b12 <__aeabi_memset>

08002e3e <??ZbZclAttrAppendList_17>:
 8002e3e:	0021      	movs	r1, r4
 8002e40:	0038      	movs	r0, r7
 8002e42:	f7fe f9b3 	bl	80011ac <ZbZclAttrAddSorted>
 8002e46:	68e0      	ldr	r0, [r4, #12]
 8002e48:	2800      	cmp	r0, #0
 8002e4a:	d005      	beq.n	8002e58 <??ZbZclAttrAppendList_18>
 8002e4c:	6922      	ldr	r2, [r4, #16]
 8002e4e:	68e1      	ldr	r1, [r4, #12]
 8002e50:	68a0      	ldr	r0, [r4, #8]
 8002e52:	7880      	ldrb	r0, [r0, #2]
 8002e54:	f7fe fdfa 	bl	8001a4c <ZbZclAttrDefaultValue>

08002e58 <??ZbZclAttrAppendList_18>:
 8002e58:	f118 0801 	adds.w	r8, r8, #1
 8002e5c:	e73e      	b.n	8002cdc <??ZbZclAttrAppendList_3>

08002e5e <??ZbZclAttrAppendList_4>:
 8002e5e:	0038      	movs	r0, r7
 8002e60:	f000 ff3a 	bl	8003cd8 <zcl_reporting_create_default_reports>
 8002e64:	2000      	movs	r0, #0

08002e66 <??ZbZclAttrAppendList_2>:
 8002e66:	b00b      	add	sp, #44	@ 0x2c
 8002e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002e6c <ZbZclAttrCallbackExec>:
 8002e6c:	b570      	push	{r4, r5, r6, lr}
 8002e6e:	0004      	movs	r4, r0
 8002e70:	000d      	movs	r5, r1
 8002e72:	0016      	movs	r6, r2
 8002e74:	68a8      	ldr	r0, [r5, #8]
 8002e76:	68c0      	ldr	r0, [r0, #12]
 8002e78:	2800      	cmp	r0, #0
 8002e7a:	d005      	beq.n	8002e88 <??ZbZclAttrCallbackExec_0>
 8002e7c:	0031      	movs	r1, r6
 8002e7e:	0020      	movs	r0, r4
 8002e80:	68aa      	ldr	r2, [r5, #8]
 8002e82:	68d2      	ldr	r2, [r2, #12]
 8002e84:	4790      	blx	r2
 8002e86:	e000      	b.n	8002e8a <??ZbZclAttrCallbackExec_1>

08002e88 <??ZbZclAttrCallbackExec_0>:
 8002e88:	2001      	movs	r0, #1

08002e8a <??ZbZclAttrCallbackExec_1>:
 8002e8a:	bd70      	pop	{r4, r5, r6, pc}

08002e8c <ZbZclAttrFreeAttr>:
 8002e8c:	b538      	push	{r3, r4, r5, lr}
 8002e8e:	0004      	movs	r4, r0
 8002e90:	000d      	movs	r5, r1
 8002e92:	68a8      	ldr	r0, [r5, #8]
 8002e94:	7900      	ldrb	r0, [r0, #4]
 8002e96:	0780      	lsls	r0, r0, #30
 8002e98:	d50b      	bpl.n	8002eb2 <??ZbZclAttrFreeAttr_0>
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	68a8      	ldr	r0, [r5, #8]
 8002e9e:	8801      	ldrh	r1, [r0, #0]
 8002ea0:	0020      	movs	r0, r4
 8002ea2:	f000 fdfd 	bl	8003aa0 <zcl_cluster_attr_report_delete>
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	68a8      	ldr	r0, [r5, #8]
 8002eaa:	8801      	ldrh	r1, [r0, #0]
 8002eac:	0020      	movs	r0, r4
 8002eae:	f000 fdf7 	bl	8003aa0 <zcl_cluster_attr_report_delete>

08002eb2 <??ZbZclAttrFreeAttr_0>:
 8002eb2:	6868      	ldr	r0, [r5, #4]
 8002eb4:	6829      	ldr	r1, [r5, #0]
 8002eb6:	6048      	str	r0, [r1, #4]
 8002eb8:	6828      	ldr	r0, [r5, #0]
 8002eba:	6869      	ldr	r1, [r5, #4]
 8002ebc:	6008      	str	r0, [r1, #0]
 8002ebe:	602d      	str	r5, [r5, #0]
 8002ec0:	606d      	str	r5, [r5, #4]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	a202      	add	r2, pc, #8	@ (adr r2, 8002ed0 <??DataTable1>)
 8002ec6:	0029      	movs	r1, r5
 8002ec8:	68a0      	ldr	r0, [r4, #8]
 8002eca:	f011 fb4a 	bl	8014562 <zb_heap_free>
 8002ece:	bd31      	pop	{r0, r4, r5, pc}

08002ed0 <??DataTable1>:
 8002ed0:	0000 0000                                   ....

08002ed4 <ZbZclAttrFreeList>:
 8002ed4:	b570      	push	{r4, r5, r6, lr}
 8002ed6:	0005      	movs	r5, r0

08002ed8 <??ZbZclAttrFreeList_0>:
 8002ed8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002eda:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002ede:	4288      	cmp	r0, r1
 8002ee0:	d001      	beq.n	8002ee6 <??ZbZclAttrFreeList_1>
 8002ee2:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8002ee4:	e000      	b.n	8002ee8 <??ZbZclAttrFreeList_2>

08002ee6 <??ZbZclAttrFreeList_1>:
 8002ee6:	2400      	movs	r4, #0

08002ee8 <??ZbZclAttrFreeList_2>:
 8002ee8:	2c00      	cmp	r4, #0
 8002eea:	d005      	beq.n	8002ef8 <??ZbZclAttrFreeList_3>

08002eec <??ZbZclAttrFreeList_4>:
 8002eec:	0026      	movs	r6, r4
 8002eee:	0031      	movs	r1, r6
 8002ef0:	0028      	movs	r0, r5
 8002ef2:	f7ff ffcb 	bl	8002e8c <ZbZclAttrFreeAttr>
 8002ef6:	e7ef      	b.n	8002ed8 <??ZbZclAttrFreeList_0>

08002ef8 <??ZbZclAttrFreeList_3>:
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002efc <zcl_reporting_send_conf>:
 8002efc:	000b      	movs	r3, r1
 8002efe:	7e02      	ldrb	r2, [r0, #24]
 8002f00:	2a00      	cmp	r2, #0
 8002f02:	d004      	beq.n	8002f0e <??zcl_reporting_send_conf_0>
 8002f04:	7e02      	ldrb	r2, [r0, #24]
 8002f06:	2aa4      	cmp	r2, #164	@ 0xa4
 8002f08:	d001      	beq.n	8002f0e <??zcl_reporting_send_conf_0>
 8002f0a:	7e02      	ldrb	r2, [r0, #24]
 8002f0c:	2aa3      	cmp	r2, #163	@ 0xa3

08002f0e <??zcl_reporting_send_conf_0>:
 8002f0e:	4770      	bx	lr

08002f10 <report_command_timer>:
 8002f10:	b570      	push	{r4, r5, r6, lr}
 8002f12:	0004      	movs	r4, r0
 8002f14:	000d      	movs	r5, r1
 8002f16:	002e      	movs	r6, r5
 8002f18:	f116 0108 	adds.w	r1, r6, #8
 8002f1c:	6830      	ldr	r0, [r6, #0]
 8002f1e:	f000 f852 	bl	8002fc6 <zcl_reporting_send_report>
 8002f22:	6870      	ldr	r0, [r6, #4]
 8002f24:	f010 ff46 	bl	8013db4 <ZbTimerFree>
 8002f28:	2300      	movs	r3, #0
 8002f2a:	a2cf      	add	r2, pc, #828	@ (adr r2, 8003268 <??DataTable4>)
 8002f2c:	0031      	movs	r1, r6
 8002f2e:	6830      	ldr	r0, [r6, #0]
 8002f30:	6880      	ldr	r0, [r0, #8]
 8002f32:	f011 fb16 	bl	8014562 <zb_heap_free>
 8002f36:	bd70      	pop	{r4, r5, r6, pc}

08002f38 <zcl_reporting_queue_report>:
 8002f38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3c:	0006      	movs	r6, r0
 8002f3e:	000f      	movs	r7, r1
 8002f40:	0014      	movs	r4, r2
 8002f42:	2c00      	cmp	r4, #0
 8002f44:	d104      	bne.n	8002f50 <??zcl_reporting_queue_report_0>
 8002f46:	0039      	movs	r1, r7
 8002f48:	0030      	movs	r0, r6
 8002f4a:	f000 f83c 	bl	8002fc6 <zcl_reporting_send_report>
 8002f4e:	e037      	b.n	8002fc0 <??zcl_reporting_queue_report_1>

08002f50 <??zcl_reporting_queue_report_0>:
 8002f50:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8002f54:	2300      	movs	r3, #0
 8002f56:	4642      	mov	r2, r8
 8002f58:	2198      	movs	r1, #152	@ 0x98
 8002f5a:	68b0      	ldr	r0, [r6, #8]
 8002f5c:	f011 faf2 	bl	8014544 <zb_heap_alloc>
 8002f60:	0005      	movs	r5, r0
 8002f62:	2d00      	cmp	r5, #0
 8002f64:	d101      	bne.n	8002f6a <??zcl_reporting_queue_report_2>
 8002f66:	2000      	movs	r0, #0
 8002f68:	e02b      	b.n	8002fc2 <??zcl_reporting_queue_report_3>

08002f6a <??zcl_reporting_queue_report_2>:
 8002f6a:	f05f 0998 	movs.w	r9, #152	@ 0x98
 8002f6e:	f05f 0a00 	movs.w	sl, #0
 8002f72:	46ab      	mov	fp, r5
 8002f74:	4652      	mov	r2, sl
 8002f76:	4649      	mov	r1, r9
 8002f78:	4658      	mov	r0, fp
 8002f7a:	f002 fdca 	bl	8005b12 <__aeabi_memset>
 8002f7e:	002a      	movs	r2, r5
 8002f80:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 8003c1c <??DataTable9>
 8002f84:	68b0      	ldr	r0, [r6, #8]
 8002f86:	f010 fec3 	bl	8013d10 <ZbTimerAlloc>
 8002f8a:	6068      	str	r0, [r5, #4]
 8002f8c:	6868      	ldr	r0, [r5, #4]
 8002f8e:	2800      	cmp	r0, #0
 8002f90:	d107      	bne.n	8002fa2 <??zcl_reporting_queue_report_4>
 8002f92:	2300      	movs	r3, #0
 8002f94:	4642      	mov	r2, r8
 8002f96:	0029      	movs	r1, r5
 8002f98:	68b0      	ldr	r0, [r6, #8]
 8002f9a:	f011 fae2 	bl	8014562 <zb_heap_free>
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	e00f      	b.n	8002fc2 <??zcl_reporting_queue_report_3>

08002fa2 <??zcl_reporting_queue_report_4>:
 8002fa2:	602e      	str	r6, [r5, #0]
 8002fa4:	f05f 0890 	movs.w	r8, #144	@ 0x90
 8002fa8:	46b9      	mov	r9, r7
 8002faa:	f115 0a08 	adds.w	sl, r5, #8
 8002fae:	4642      	mov	r2, r8
 8002fb0:	4649      	mov	r1, r9
 8002fb2:	4650      	mov	r0, sl
 8002fb4:	f014 f86f 	bl	8017096 <__aeabi_memcpy>
 8002fb8:	0021      	movs	r1, r4
 8002fba:	6868      	ldr	r0, [r5, #4]
 8002fbc:	f010 ff2e 	bl	8013e1c <ZbTimerReset>

08002fc0 <??zcl_reporting_queue_report_1>:
 8002fc0:	2001      	movs	r0, #1

08002fc2 <??zcl_reporting_queue_report_3>:
 8002fc2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002fc6 <zcl_reporting_send_report>:
 8002fc6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fca:	b0cc      	sub	sp, #304	@ 0x130
 8002fcc:	0005      	movs	r5, r0
 8002fce:	000e      	movs	r6, r1
 8002fd0:	2400      	movs	r4, #0
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f88d 0004 	strb.w	r0, [sp, #4]
 8002fd8:	8a28      	ldrh	r0, [r5, #16]
 8002fda:	2800      	cmp	r0, #0
 8002fdc:	d001      	beq.n	8002fe2 <??zcl_reporting_send_report_0>
 8002fde:	2001      	movs	r0, #1
 8002fe0:	e000      	b.n	8002fe4 <??zcl_reporting_send_report_1>

08002fe2 <??zcl_reporting_send_report_0>:
 8002fe2:	2000      	movs	r0, #0

08002fe4 <??zcl_reporting_send_report_1>:
 8002fe4:	f88d 0005 	strb.w	r0, [sp, #5]
 8002fe8:	8a28      	ldrh	r0, [r5, #16]
 8002fea:	f8ad 0008 	strh.w	r0, [sp, #8]
 8002fee:	7f28      	ldrb	r0, [r5, #28]
 8002ff0:	2800      	cmp	r0, #0
 8002ff2:	d103      	bne.n	8002ffc <??zcl_reporting_send_report_2>
 8002ff4:	2001      	movs	r0, #1
 8002ff6:	f88d 0006 	strb.w	r0, [sp, #6]
 8002ffa:	e002      	b.n	8003002 <??zcl_reporting_send_report_3>

08002ffc <??zcl_reporting_send_report_2>:
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f88d 0006 	strb.w	r0, [sp, #6]

08003002 <??zcl_reporting_send_report_3>:
 8003002:	2001      	movs	r0, #1
 8003004:	f88d 0007 	strb.w	r0, [sp, #7]
 8003008:	f011 f890 	bl	801412c <ZbZclGetNextSeqnum>
 800300c:	f88d 000a 	strb.w	r0, [sp, #10]
 8003010:	200a      	movs	r0, #10
 8003012:	f88d 000b 	strb.w	r0, [sp, #11]
 8003016:	2205      	movs	r2, #5
 8003018:	a903      	add	r1, sp, #12
 800301a:	a801      	add	r0, sp, #4
 800301c:	f7fd ff70 	bl	8000f00 <ZbZclAppendHeader>
 8003020:	0007      	movs	r7, r0
 8003022:	2f01      	cmp	r7, #1
 8003024:	f2c0 8093 	blt.w	800314e <??zcl_reporting_send_report_4>

08003028 <??zcl_reporting_send_report_5>:
 8003028:	a91a      	add	r1, sp, #104	@ 0x68
 800302a:	a803      	add	r0, sp, #12
 800302c:	0022      	movs	r2, r4
 800302e:	b2d2      	uxtb	r2, r2
 8003030:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8003034:	0038      	movs	r0, r7
 8003036:	b2c0      	uxtb	r0, r0
 8003038:	aa1a      	add	r2, sp, #104	@ 0x68
 800303a:	0023      	movs	r3, r4
 800303c:	b2db      	uxtb	r3, r3
 800303e:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8003042:	6050      	str	r0, [r2, #4]
 8003044:	1c64      	adds	r4, r4, #1
 8003046:	2000      	movs	r0, #0
 8003048:	4680      	mov	r8, r0

0800304a <??zcl_reporting_send_report_6>:
 800304a:	f1b8 0f0c 	cmp.w	r8, #12
 800304e:	d22e      	bcs.n	80030ae <??zcl_reporting_send_report_7>
 8003050:	220c      	movs	r2, #12
 8003052:	fb02 f008 	mul.w	r0, r2, r8
 8003056:	4430      	add	r0, r6
 8003058:	7a00      	ldrb	r0, [r0, #8]
 800305a:	2800      	cmp	r0, #0
 800305c:	d027      	beq.n	80030ae <??zcl_reporting_send_report_7>

0800305e <??zcl_reporting_send_report_8>:
 800305e:	fb02 f008 	mul.w	r0, r2, r8
 8003062:	4430      	add	r0, r6
 8003064:	3009      	adds	r0, #9
 8003066:	0023      	movs	r3, r4
 8003068:	b2db      	uxtb	r3, r3
 800306a:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 800306e:	2003      	movs	r0, #3
 8003070:	ab1a      	add	r3, sp, #104	@ 0x68
 8003072:	46a4      	mov	ip, r4
 8003074:	fa5f fc8c 	uxtb.w	ip, ip
 8003078:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 800307c:	6058      	str	r0, [r3, #4]
 800307e:	1c64      	adds	r4, r4, #1
 8003080:	fb02 f008 	mul.w	r0, r2, r8
 8003084:	4430      	add	r0, r6
 8003086:	6840      	ldr	r0, [r0, #4]
 8003088:	0023      	movs	r3, r4
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8003090:	fb02 f208 	mul.w	r2, r2, r8
 8003094:	eb06 0002 	add.w	r0, r6, r2
 8003098:	7a00      	ldrb	r0, [r0, #8]
 800309a:	aa1a      	add	r2, sp, #104	@ 0x68
 800309c:	0023      	movs	r3, r4
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80030a4:	6050      	str	r0, [r2, #4]
 80030a6:	1c64      	adds	r4, r4, #1
 80030a8:	f118 0801 	adds.w	r8, r8, #1
 80030ac:	e7cd      	b.n	800304a <??zcl_reporting_send_report_6>

080030ae <??zcl_reporting_send_report_7>:
 80030ae:	2200      	movs	r2, #0
 80030b0:	a906      	add	r1, sp, #24
 80030b2:	0028      	movs	r0, r5
 80030b4:	f7fd f9c3 	bl	800043e <ZbZclClusterInitApsdeReq>
 80030b8:	a806      	add	r0, sp, #24
 80030ba:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8003c24 <??DataTable9_2>
 80030be:	6809      	ldr	r1, [r1, #0]
 80030c0:	2210      	movs	r2, #16
 80030c2:	f013 ffe8 	bl	8017096 <__aeabi_memcpy>
 80030c6:	2001      	movs	r0, #1
 80030c8:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80030cc:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80030d0:	f050 0004 	orrs.w	r0, r0, #4
 80030d4:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80030d8:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80030dc:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 80030e0:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80030e4:	7ca8      	ldrb	r0, [r5, #18]
 80030e6:	28ab      	cmp	r0, #171	@ 0xab
 80030e8:	d005      	beq.n	80030f6 <??zcl_reporting_send_report_9>
 80030ea:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80030ee:	f050 0002 	orrs.w	r0, r0, #2
 80030f2:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

080030f6 <??zcl_reporting_send_report_9>:
 80030f6:	2001      	movs	r0, #1
 80030f8:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 80030fc:	2000      	movs	r0, #0
 80030fe:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 8003102:	a81a      	add	r0, sp, #104	@ 0x68
 8003104:	900c      	str	r0, [sp, #48]	@ 0x30
 8003106:	0020      	movs	r0, r4
 8003108:	b2c0      	uxtb	r0, r0
 800310a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800310e:	68ab      	ldr	r3, [r5, #8]
 8003110:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8003c28 <??DataTable9_3>
 8003114:	a906      	add	r1, sp, #24
 8003116:	68a8      	ldr	r0, [r5, #8]
 8003118:	f010 fb92 	bl	8013840 <ZbApsdeDataReqCallback>
 800311c:	f88d 0000 	strb.w	r0, [sp]
 8003120:	f89d 0000 	ldrb.w	r0, [sp]
 8003124:	2800      	cmp	r0, #0
 8003126:	d012      	beq.n	800314e <??zcl_reporting_send_report_4>
 8003128:	f05f 0920 	movs.w	r9, #32
 800312c:	f05f 0a00 	movs.w	sl, #0
 8003130:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8003134:	4652      	mov	r2, sl
 8003136:	4649      	mov	r1, r9
 8003138:	4658      	mov	r0, fp
 800313a:	f002 fcea 	bl	8005b12 <__aeabi_memset>
 800313e:	f89d 0000 	ldrb.w	r0, [sp]
 8003142:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 8003146:	68a9      	ldr	r1, [r5, #8]
 8003148:	a812      	add	r0, sp, #72	@ 0x48
 800314a:	f7ff fed7 	bl	8002efc <zcl_reporting_send_conf>

0800314e <??zcl_reporting_send_report_4>:
 800314e:	f05f 0900 	movs.w	r9, #0

08003152 <??zcl_reporting_send_report_10>:
 8003152:	f1b9 0f0c 	cmp.w	r9, #12
 8003156:	d21e      	bcs.n	8003196 <??zcl_reporting_send_report_11>
 8003158:	f05f 080c 	movs.w	r8, #12
 800315c:	fb08 f009 	mul.w	r0, r8, r9
 8003160:	4430      	add	r0, r6
 8003162:	6840      	ldr	r0, [r0, #4]
 8003164:	2800      	cmp	r0, #0
 8003166:	d016      	beq.n	8003196 <??zcl_reporting_send_report_11>

08003168 <??zcl_reporting_send_report_12>:
 8003168:	2300      	movs	r3, #0
 800316a:	a23f      	add	r2, pc, #252	@ (adr r2, 8003268 <??DataTable4>)
 800316c:	fb08 f009 	mul.w	r0, r8, r9
 8003170:	4430      	add	r0, r6
 8003172:	6841      	ldr	r1, [r0, #4]
 8003174:	68a8      	ldr	r0, [r5, #8]
 8003176:	f011 f9f4 	bl	8014562 <zb_heap_free>
 800317a:	2000      	movs	r0, #0
 800317c:	fb08 f109 	mul.w	r1, r8, r9
 8003180:	4431      	add	r1, r6
 8003182:	6048      	str	r0, [r1, #4]
 8003184:	2000      	movs	r0, #0
 8003186:	fb08 f809 	mul.w	r8, r8, r9
 800318a:	eb06 0108 	add.w	r1, r6, r8
 800318e:	7208      	strb	r0, [r1, #8]
 8003190:	f119 0901 	adds.w	r9, r9, #1
 8003194:	e7dd      	b.n	8003152 <??zcl_reporting_send_report_10>

08003196 <??zcl_reporting_send_report_11>:
 8003196:	b04d      	add	sp, #308	@ 0x134
 8003198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800319c <zcl_report_check_time>:
 800319c:	4281      	cmp	r1, r0
 800319e:	d201      	bcs.n	80031a4 <??zcl_report_check_time_0>
 80031a0:	0008      	movs	r0, r1
 80031a2:	e7ff      	b.n	80031a4 <??zcl_report_check_time_0>

080031a4 <??zcl_report_check_time_0>:
 80031a4:	4770      	bx	lr

080031a6 <zcl_report_kick>:
 80031a6:	b538      	push	{r3, r4, r5, lr}
 80031a8:	0004      	movs	r4, r0
 80031aa:	000d      	movs	r5, r1
 80031ac:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80031ae:	2800      	cmp	r0, #0
 80031b0:	d101      	bne.n	80031b6 <??zcl_report_kick_0>
 80031b2:	2000      	movs	r0, #0
 80031b4:	e00d      	b.n	80031d2 <??zcl_report_kick_1>

080031b6 <??zcl_report_kick_0>:
 80031b6:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80031ba:	2800      	cmp	r0, #0
 80031bc:	d001      	beq.n	80031c2 <??zcl_report_kick_2>
 80031be:	2001      	movs	r0, #1
 80031c0:	e007      	b.n	80031d2 <??zcl_report_kick_1>

080031c2 <??zcl_report_kick_2>:
 80031c2:	2001      	movs	r0, #1
 80031c4:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 80031c8:	0029      	movs	r1, r5
 80031ca:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80031cc:	f010 fe26 	bl	8013e1c <ZbTimerReset>
 80031d0:	2001      	movs	r0, #1

080031d2 <??zcl_report_kick_1>:
 80031d2:	bd32      	pop	{r1, r4, r5, pc}

080031d4 <ZbZclAttrReportKick>:
 80031d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031d6:	0004      	movs	r4, r0
 80031d8:	000d      	movs	r5, r1
 80031da:	0016      	movs	r6, r2
 80031dc:	001f      	movs	r7, r3
 80031de:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80031e0:	2800      	cmp	r0, #0
 80031e2:	d001      	beq.n	80031e8 <??ZbZclAttrReportKick_0>
 80031e4:	2001      	movs	r0, #1
 80031e6:	e010      	b.n	800320a <??ZbZclAttrReportKick_1>

080031e8 <??ZbZclAttrReportKick_0>:
 80031e8:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 80031ec:	6426      	str	r6, [r4, #64]	@ 0x40
 80031ee:	6467      	str	r7, [r4, #68]	@ 0x44
 80031f0:	2100      	movs	r1, #0
 80031f2:	0020      	movs	r0, r4
 80031f4:	f7ff ffd7 	bl	80031a6 <zcl_report_kick>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d105      	bne.n	8003208 <??ZbZclAttrReportKick_2>
 80031fc:	2000      	movs	r0, #0
 80031fe:	6420      	str	r0, [r4, #64]	@ 0x40
 8003200:	2000      	movs	r0, #0
 8003202:	6460      	str	r0, [r4, #68]	@ 0x44
 8003204:	2001      	movs	r0, #1
 8003206:	e000      	b.n	800320a <??ZbZclAttrReportKick_1>

08003208 <??ZbZclAttrReportKick_2>:
 8003208:	2000      	movs	r0, #0

0800320a <??ZbZclAttrReportKick_1>:
 800320a:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

0800320c <zcl_report_append_attr>:
 800320c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003210:	0004      	movs	r4, r0
 8003212:	000d      	movs	r5, r1
 8003214:	0016      	movs	r6, r2
 8003216:	001f      	movs	r7, r3
 8003218:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800321c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8003220:	2300      	movs	r3, #0
 8003222:	a211      	add	r2, pc, #68	@ (adr r2, 8003268 <??DataTable4>)
 8003224:	4649      	mov	r1, r9
 8003226:	0020      	movs	r0, r4
 8003228:	f011 f98c 	bl	8014544 <zb_heap_alloc>
 800322c:	6068      	str	r0, [r5, #4]
 800322e:	6868      	ldr	r0, [r5, #4]
 8003230:	2800      	cmp	r0, #0
 8003232:	d101      	bne.n	8003238 <??zcl_report_append_attr_0>
 8003234:	2000      	movs	r0, #0
 8003236:	e014      	b.n	8003262 <??zcl_report_append_attr_1>

08003238 <??zcl_report_append_attr_0>:
 8003238:	f8cd 9000 	str.w	r9, [sp]
 800323c:	46c2      	mov	sl, r8
 800323e:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8003242:	9a00      	ldr	r2, [sp, #0]
 8003244:	4651      	mov	r1, sl
 8003246:	4658      	mov	r0, fp
 8003248:	f013 ff25 	bl	8017096 <__aeabi_memcpy>
 800324c:	f885 9008 	strb.w	r9, [r5, #8]
 8003250:	802e      	strh	r6, [r5, #0]
 8003252:	0031      	movs	r1, r6
 8003254:	b289      	uxth	r1, r1
 8003256:	f115 0009 	adds.w	r0, r5, #9
 800325a:	f7fd ff53 	bl	8001104 <putle16>
 800325e:	72ef      	strb	r7, [r5, #11]
 8003260:	2001      	movs	r0, #1

08003262 <??zcl_report_append_attr_1>:
 8003262:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08003268 <??DataTable4>:
 8003268:	0000 0000                                   ....

0800326c <zcl_cluster_report_check_timeout>:
 800326c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003270:	0006      	movs	r6, r0
 8003272:	000f      	movs	r7, r1
 8003274:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8003276:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 800327a:	4288      	cmp	r0, r1
 800327c:	d001      	beq.n	8003282 <??zcl_cluster_report_check_timeout_0>
 800327e:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8003280:	e000      	b.n	8003284 <??zcl_cluster_report_check_timeout_1>

08003282 <??zcl_cluster_report_check_timeout_0>:
 8003282:	2000      	movs	r0, #0

08003284 <??zcl_cluster_report_check_timeout_1>:
 8003284:	2800      	cmp	r0, #0
 8003286:	d101      	bne.n	800328c <??zcl_cluster_report_check_timeout_2>
 8003288:	2000      	movs	r0, #0
 800328a:	e042      	b.n	8003312 <??zcl_cluster_report_check_timeout_3>

0800328c <??zcl_cluster_report_check_timeout_2>:
 800328c:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800328e:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8003292:	4288      	cmp	r0, r1
 8003294:	d001      	beq.n	800329a <??zcl_cluster_report_check_timeout_4>
 8003296:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 8003298:	e000      	b.n	800329c <??zcl_cluster_report_check_timeout_5>

0800329a <??zcl_cluster_report_check_timeout_4>:
 800329a:	2500      	movs	r5, #0

0800329c <??zcl_cluster_report_check_timeout_5>:
 800329c:	2d00      	cmp	r5, #0
 800329e:	d037      	beq.n	8003310 <??zcl_cluster_report_check_timeout_6>
 80032a0:	46a8      	mov	r8, r5
 80032a2:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80032a6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80032aa:	4288      	cmp	r0, r1
 80032ac:	d027      	beq.n	80032fe <??zcl_cluster_report_check_timeout_7>

080032ae <??zcl_cluster_report_check_timeout_8>:
 80032ae:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 80032b2:	2800      	cmp	r0, #0
 80032b4:	d00e      	beq.n	80032d4 <??zcl_cluster_report_check_timeout_9>
 80032b6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80032ba:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 80032be:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032c2:	fb00 1909 	mla	r9, r0, r9, r1
 80032c6:	4649      	mov	r1, r9
 80032c8:	0038      	movs	r0, r7
 80032ca:	f010 fdd7 	bl	8013e7c <ZbTimeoutRemaining>
 80032ce:	0004      	movs	r4, r0
 80032d0:	2c00      	cmp	r4, #0
 80032d2:	d114      	bne.n	80032fe <??zcl_cluster_report_check_timeout_7>

080032d4 <??zcl_cluster_report_check_timeout_9>:
 80032d4:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80032d8:	2800      	cmp	r0, #0
 80032da:	d010      	beq.n	80032fe <??zcl_cluster_report_check_timeout_7>

080032dc <??zcl_cluster_report_check_timeout_10>:
 80032dc:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80032e0:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 80032e4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80032e8:	fb00 1909 	mla	r9, r0, r9, r1
 80032ec:	4649      	mov	r1, r9
 80032ee:	0038      	movs	r0, r7
 80032f0:	f010 fdc4 	bl	8013e7c <ZbTimeoutRemaining>
 80032f4:	0004      	movs	r4, r0
 80032f6:	2c00      	cmp	r4, #0
 80032f8:	d101      	bne.n	80032fe <??zcl_cluster_report_check_timeout_7>

080032fa <??zcl_cluster_report_check_timeout_11>:
 80032fa:	2001      	movs	r0, #1
 80032fc:	e009      	b.n	8003312 <??zcl_cluster_report_check_timeout_3>

080032fe <??zcl_cluster_report_check_timeout_7>:
 80032fe:	6828      	ldr	r0, [r5, #0]
 8003300:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8003304:	4288      	cmp	r0, r1
 8003306:	d001      	beq.n	800330c <??zcl_cluster_report_check_timeout_12>
 8003308:	682d      	ldr	r5, [r5, #0]
 800330a:	e7c7      	b.n	800329c <??zcl_cluster_report_check_timeout_5>

0800330c <??zcl_cluster_report_check_timeout_12>:
 800330c:	2500      	movs	r5, #0
 800330e:	e7c5      	b.n	800329c <??zcl_cluster_report_check_timeout_5>

08003310 <??zcl_cluster_report_check_timeout_6>:
 8003310:	2000      	movs	r0, #0

08003312 <??zcl_cluster_report_check_timeout_3>:
 8003312:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08003318 <zcl_cluster_reports_timer>:
 8003318:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800331c:	b081      	sub	sp, #4
 800331e:	ed2d 8b04 	vpush	{d8-d9}
 8003322:	b0b0      	sub	sp, #192	@ 0xc0
 8003324:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 8003326:	9003      	str	r0, [sp, #12]
 8003328:	2000      	movs	r0, #0
 800332a:	9005      	str	r0, [sp, #20]
 800332c:	2000      	movs	r0, #0
 800332e:	9007      	str	r0, [sp, #28]
 8003330:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8003c2c <??DataTable9_4>
 8003334:	9006      	str	r0, [sp, #24]
 8003336:	2000      	movs	r0, #0
 8003338:	f88d 0010 	strb.w	r0, [sp, #16]
 800333c:	f05f 0b00 	movs.w	fp, #0
 8003340:	9803      	ldr	r0, [sp, #12]
 8003342:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8003346:	f88d 000b 	strb.w	r0, [sp, #11]
 800334a:	2000      	movs	r0, #0
 800334c:	f88d 000a 	strb.w	r0, [sp, #10]
 8003350:	2000      	movs	r0, #0
 8003352:	9903      	ldr	r1, [sp, #12]
 8003354:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 8003358:	2000      	movs	r0, #0
 800335a:	9903      	ldr	r1, [sp, #12]
 800335c:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8003360:	9803      	ldr	r0, [sp, #12]
 8003362:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003364:	9903      	ldr	r1, [sp, #12]
 8003366:	3130      	adds	r1, #48	@ 0x30
 8003368:	4288      	cmp	r0, r1
 800336a:	d002      	beq.n	8003372 <??zcl_cluster_reports_timer_1>
 800336c:	9803      	ldr	r0, [sp, #12]
 800336e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003370:	e000      	b.n	8003374 <??zcl_cluster_reports_timer_2>

08003372 <??zcl_cluster_reports_timer_1>:
 8003372:	2000      	movs	r0, #0

08003374 <??zcl_cluster_reports_timer_2>:
 8003374:	2800      	cmp	r0, #0
 8003376:	f000 81f7 	beq.w	8003768 <??zcl_cluster_reports_timer_3>

0800337a <??zcl_cluster_reports_timer_4>:
 800337a:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800337c:	f010 fe5a 	bl	8014034 <ZbZclUptime>
 8003380:	9009      	str	r0, [sp, #36]	@ 0x24
 8003382:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003384:	9803      	ldr	r0, [sp, #12]
 8003386:	f7ff ff71 	bl	800326c <zcl_cluster_report_check_timeout>
 800338a:	2800      	cmp	r0, #0
 800338c:	d004      	beq.n	8003398 <??zcl_cluster_reports_timer_5>
 800338e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003390:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 8003394:	900b      	str	r0, [sp, #44]	@ 0x2c
 8003396:	e001      	b.n	800339c <??zcl_cluster_reports_timer_6>

08003398 <??zcl_cluster_reports_timer_5>:
 8003398:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800339a:	900b      	str	r0, [sp, #44]	@ 0x2c

0800339c <??zcl_cluster_reports_timer_6>:
 800339c:	2490      	movs	r4, #144	@ 0x90
 800339e:	2500      	movs	r5, #0
 80033a0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80033a4:	002a      	movs	r2, r5
 80033a6:	0021      	movs	r1, r4
 80033a8:	4640      	mov	r0, r8
 80033aa:	f002 fbb2 	bl	8005b12 <__aeabi_memset>
 80033ae:	2000      	movs	r0, #0
 80033b0:	4682      	mov	sl, r0
 80033b2:	2000      	movs	r0, #0
 80033b4:	f88d 0008 	strb.w	r0, [sp, #8]
 80033b8:	9803      	ldr	r0, [sp, #12]
 80033ba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80033bc:	9903      	ldr	r1, [sp, #12]
 80033be:	3130      	adds	r1, #48	@ 0x30
 80033c0:	4288      	cmp	r0, r1
 80033c2:	d002      	beq.n	80033ca <??zcl_cluster_reports_timer_7>
 80033c4:	9803      	ldr	r0, [sp, #12]
 80033c6:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80033c8:	e000      	b.n	80033cc <??zcl_cluster_reports_timer_8>

080033ca <??zcl_cluster_reports_timer_7>:
 80033ca:	2600      	movs	r6, #0

080033cc <??zcl_cluster_reports_timer_8>:
 80033cc:	2e00      	cmp	r6, #0
 80033ce:	f000 817b 	beq.w	80036c8 <??zcl_cluster_reports_timer_9>
 80033d2:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80033d6:	f88d 0009 	strb.w	r0, [sp, #9]
 80033da:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8003c2c <??DataTable9_4>
 80033de:	900a      	str	r0, [sp, #40]	@ 0x28
 80033e0:	0037      	movs	r7, r6
 80033e2:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80033e4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033e8:	4288      	cmp	r0, r1
 80033ea:	f000 8164 	beq.w	80036b6 <??zcl_cluster_reports_timer_10>

080033ee <??zcl_cluster_reports_timer_11>:
 80033ee:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d116      	bne.n	8003424 <??zcl_cluster_reports_timer_12>
 80033f6:	8c38      	ldrh	r0, [r7, #32]
 80033f8:	2800      	cmp	r0, #0
 80033fa:	d013      	beq.n	8003424 <??zcl_cluster_reports_timer_12>
 80033fc:	6939      	ldr	r1, [r7, #16]
 80033fe:	8c3c      	ldrh	r4, [r7, #32]
 8003400:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003404:	fb00 1404 	mla	r4, r0, r4, r1
 8003408:	0021      	movs	r1, r4
 800340a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800340c:	f010 fd36 	bl	8013e7c <ZbTimeoutRemaining>
 8003410:	9008      	str	r0, [sp, #32]
 8003412:	9808      	ldr	r0, [sp, #32]
 8003414:	2800      	cmp	r0, #0
 8003416:	d005      	beq.n	8003424 <??zcl_cluster_reports_timer_12>
 8003418:	9908      	ldr	r1, [sp, #32]
 800341a:	9806      	ldr	r0, [sp, #24]
 800341c:	f7ff febe 	bl	800319c <zcl_report_check_time>
 8003420:	9006      	str	r0, [sp, #24]
 8003422:	e148      	b.n	80036b6 <??zcl_cluster_reports_timer_10>

08003424 <??zcl_cluster_reports_timer_12>:
 8003424:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003428:	2800      	cmp	r0, #0
 800342a:	d115      	bne.n	8003458 <??zcl_cluster_reports_timer_13>
 800342c:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 800342e:	2800      	cmp	r0, #0
 8003430:	d012      	beq.n	8003458 <??zcl_cluster_reports_timer_13>
 8003432:	6939      	ldr	r1, [r7, #16]
 8003434:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 8003436:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800343a:	fb00 1404 	mla	r4, r0, r4, r1
 800343e:	0021      	movs	r1, r4
 8003440:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003442:	f010 fd1b 	bl	8013e7c <ZbTimeoutRemaining>
 8003446:	900a      	str	r0, [sp, #40]	@ 0x28
 8003448:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800344a:	2800      	cmp	r0, #0
 800344c:	d104      	bne.n	8003458 <??zcl_cluster_reports_timer_13>
 800344e:	2001      	movs	r0, #1
 8003450:	f88d 0009 	strb.w	r0, [sp, #9]
 8003454:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003456:	6138      	str	r0, [r7, #16]

08003458 <??zcl_cluster_reports_timer_13>:
 8003458:	9803      	ldr	r0, [sp, #12]
 800345a:	8982      	ldrh	r2, [r0, #12]
 800345c:	9803      	ldr	r0, [sp, #12]
 800345e:	7b81      	ldrb	r1, [r0, #14]
 8003460:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003462:	f010 fb52 	bl	8013b0a <ZbApsBindSrcExists>
 8003466:	2800      	cmp	r0, #0
 8003468:	d105      	bne.n	8003476 <??zcl_cluster_reports_timer_14>
 800346a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800346c:	9806      	ldr	r0, [sp, #24]
 800346e:	f7ff fe95 	bl	800319c <zcl_report_check_time>
 8003472:	9006      	str	r0, [sp, #24]
 8003474:	e11f      	b.n	80036b6 <??zcl_cluster_reports_timer_10>

08003476 <??zcl_cluster_reports_timer_14>:
 8003476:	9805      	ldr	r0, [sp, #20]
 8003478:	2800      	cmp	r0, #0
 800347a:	d10b      	bne.n	8003494 <??zcl_cluster_reports_timer_15>
 800347c:	2300      	movs	r3, #0
 800347e:	a28a      	add	r2, pc, #552	@ (adr r2, 80036a8 <??zcl_cluster_reports_timer_0>)
 8003480:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003484:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003486:	f011 f85d 	bl	8014544 <zb_heap_alloc>
 800348a:	9005      	str	r0, [sp, #20]
 800348c:	9805      	ldr	r0, [sp, #20]
 800348e:	2800      	cmp	r0, #0
 8003490:	f000 816a 	beq.w	8003768 <??zcl_cluster_reports_timer_3>

08003494 <??zcl_cluster_reports_timer_15>:
 8003494:	2000      	movs	r0, #0
 8003496:	9001      	str	r0, [sp, #4]
 8003498:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800349c:	9000      	str	r0, [sp, #0]
 800349e:	9b05      	ldr	r3, [sp, #20]
 80034a0:	f10d 0211 	add.w	r2, sp, #17
 80034a4:	89b9      	ldrh	r1, [r7, #12]
 80034a6:	9803      	ldr	r0, [sp, #12]
 80034a8:	f7fd ffb3 	bl	8001412 <ZbZclAttrRead>
 80034ac:	2800      	cmp	r0, #0
 80034ae:	d003      	beq.n	80034b8 <??zcl_cluster_reports_timer_16>
 80034b0:	0038      	movs	r0, r7
 80034b2:	f000 fb0a 	bl	8003aca <zcl_reporting_disable>
 80034b6:	e094      	b.n	80035e2 <??zcl_cluster_reports_timer_17>

080034b8 <??zcl_cluster_reports_timer_16>:
 80034b8:	2300      	movs	r3, #0
 80034ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80034be:	9905      	ldr	r1, [sp, #20]
 80034c0:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80034c4:	f7fe fdcd 	bl	8002062 <ZbZclAttrParseLength>
 80034c8:	9007      	str	r0, [sp, #28]
 80034ca:	9807      	ldr	r0, [sp, #28]
 80034cc:	2800      	cmp	r0, #0
 80034ce:	d503      	bpl.n	80034d8 <??zcl_cluster_reports_timer_18>
 80034d0:	0038      	movs	r0, r7
 80034d2:	f000 fafa 	bl	8003aca <zcl_reporting_disable>
 80034d6:	e084      	b.n	80035e2 <??zcl_cluster_reports_timer_17>

080034d8 <??zcl_cluster_reports_timer_18>:
 80034d8:	9807      	ldr	r0, [sp, #28]
 80034da:	2800      	cmp	r0, #0
 80034dc:	f000 8081 	beq.w	80035e2 <??zcl_cluster_reports_timer_17>

080034e0 <??zcl_cluster_reports_timer_19>:
 80034e0:	7bb8      	ldrb	r0, [r7, #14]
 80034e2:	2838      	cmp	r0, #56	@ 0x38
 80034e4:	db37      	blt.n	8003556 <??zcl_cluster_reports_timer_20>
 80034e6:	7bb8      	ldrb	r0, [r7, #14]
 80034e8:	283b      	cmp	r0, #59	@ 0x3b
 80034ea:	da34      	bge.n	8003556 <??zcl_cluster_reports_timer_20>
 80034ec:	f10d 0201 	add.w	r2, sp, #1
 80034f0:	9905      	ldr	r1, [sp, #20]
 80034f2:	7bb8      	ldrb	r0, [r7, #14]
 80034f4:	f001 ffd1 	bl	800549a <ZbZclParseFloat>
 80034f8:	eeb0 8a40 	vmov.f32	s16, s0
 80034fc:	eef0 8a60 	vmov.f32	s17, s1
 8003500:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003504:	2800      	cmp	r0, #0
 8003506:	d003      	beq.n	8003510 <??zcl_cluster_reports_timer_21>
 8003508:	0038      	movs	r0, r7
 800350a:	f000 fade 	bl	8003aca <zcl_reporting_disable>
 800350e:	e068      	b.n	80035e2 <??zcl_cluster_reports_timer_17>

08003510 <??zcl_cluster_reports_timer_21>:
 8003510:	ec51 0b18 	vmov	r0, r1, d8
 8003514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003518:	f002 fbaa 	bl	8005c70 <__aeabi_dsub>
 800351c:	ec41 0b19 	vmov	d9, r0, r1
 8003520:	ec51 0b19 	vmov	r0, r1, d9
 8003524:	2200      	movs	r2, #0
 8003526:	2300      	movs	r3, #0
 8003528:	f002 ffba 	bl	80064a0 <__aeabi_cdcmpeq>
 800352c:	d205      	bcs.n	800353a <??zcl_cluster_reports_timer_22>
 800352e:	ec51 0b19 	vmov	r0, r1, d9
 8003532:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003536:	ec41 0b19 	vmov	d9, r0, r1

0800353a <??zcl_cluster_reports_timer_22>:
 800353a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800353e:	2800      	cmp	r0, #0
 8003540:	d106      	bne.n	8003550 <??zcl_cluster_reports_timer_23>
 8003542:	ec51 0b19 	vmov	r0, r1, d9
 8003546:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800354a:	f002 ffa9 	bl	80064a0 <__aeabi_cdcmpeq>
 800354e:	d348      	bcc.n	80035e2 <??zcl_cluster_reports_timer_17>

08003550 <??zcl_cluster_reports_timer_23>:
 8003550:	ed87 8b06 	vstr	d8, [r7, #24]
 8003554:	e040      	b.n	80035d8 <??zcl_cluster_reports_timer_24>

08003556 <??zcl_cluster_reports_timer_20>:
 8003556:	7bb8      	ldrb	r0, [r7, #14]
 8003558:	f7fe fe34 	bl	80021c4 <ZbZclAttrIsAnalog>
 800355c:	2800      	cmp	r0, #0
 800355e:	d02b      	beq.n	80035b8 <??zcl_cluster_reports_timer_25>
 8003560:	466a      	mov	r2, sp
 8003562:	9905      	ldr	r1, [sp, #20]
 8003564:	7bb8      	ldrb	r0, [r7, #14]
 8003566:	f7fe ff2b 	bl	80023c0 <ZbZclParseInteger>
 800356a:	0004      	movs	r4, r0
 800356c:	000d      	movs	r5, r1
 800356e:	f89d 0000 	ldrb.w	r0, [sp]
 8003572:	2800      	cmp	r0, #0
 8003574:	d003      	beq.n	800357e <??zcl_cluster_reports_timer_26>
 8003576:	0038      	movs	r0, r7
 8003578:	f000 faa7 	bl	8003aca <zcl_reporting_disable>
 800357c:	e031      	b.n	80035e2 <??zcl_cluster_reports_timer_17>

0800357e <??zcl_cluster_reports_timer_26>:
 800357e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003582:	ebb4 0800 	subs.w	r8, r4, r0
 8003586:	eb75 0901 	sbcs.w	r9, r5, r1
 800358a:	f1b9 0f00 	cmp.w	r9, #0
 800358e:	d503      	bpl.n	8003598 <??zcl_cluster_reports_timer_27>
 8003590:	f1d8 0800 	rsbs	r8, r8, #0
 8003594:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

08003598 <??zcl_cluster_reports_timer_27>:
 8003598:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800359c:	2800      	cmp	r0, #0
 800359e:	d108      	bne.n	80035b2 <??zcl_cluster_reports_timer_28>
 80035a0:	4640      	mov	r0, r8
 80035a2:	4649      	mov	r1, r9
 80035a4:	f002 fcee 	bl	8005f84 <__aeabi_l2d>
 80035a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ac:	f002 ff78 	bl	80064a0 <__aeabi_cdcmpeq>
 80035b0:	d317      	bcc.n	80035e2 <??zcl_cluster_reports_timer_17>

080035b2 <??zcl_cluster_reports_timer_28>:
 80035b2:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80035b6:	e00f      	b.n	80035d8 <??zcl_cluster_reports_timer_24>

080035b8 <??zcl_cluster_reports_timer_25>:
 80035b8:	9a07      	ldr	r2, [sp, #28]
 80035ba:	9905      	ldr	r1, [sp, #20]
 80035bc:	2000      	movs	r0, #0
 80035be:	f010 ffdf 	bl	8014580 <WpanCrc>
 80035c2:	0001      	movs	r1, r0
 80035c4:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80035c8:	2800      	cmp	r0, #0
 80035ca:	d104      	bne.n	80035d6 <??zcl_cluster_reports_timer_29>
 80035cc:	8b38      	ldrh	r0, [r7, #24]
 80035ce:	000a      	movs	r2, r1
 80035d0:	b292      	uxth	r2, r2
 80035d2:	4290      	cmp	r0, r2
 80035d4:	d005      	beq.n	80035e2 <??zcl_cluster_reports_timer_17>

080035d6 <??zcl_cluster_reports_timer_29>:
 80035d6:	8339      	strh	r1, [r7, #24]

080035d8 <??zcl_cluster_reports_timer_24>:
 80035d8:	2001      	movs	r0, #1
 80035da:	f88d 0009 	strb.w	r0, [sp, #9]
 80035de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80035e0:	6138      	str	r0, [r7, #16]

080035e2 <??zcl_cluster_reports_timer_17>:
 80035e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80035e6:	2800      	cmp	r0, #0
 80035e8:	d060      	beq.n	80036ac <??zcl_cluster_reports_timer_30>
 80035ea:	9807      	ldr	r0, [sp, #28]
 80035ec:	2800      	cmp	r0, #0
 80035ee:	d05d      	beq.n	80036ac <??zcl_cluster_reports_timer_30>
 80035f0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80035f4:	1c40      	adds	r0, r0, #1
 80035f6:	f88d 0010 	strb.w	r0, [sp, #16]
 80035fa:	4650      	mov	r0, sl
 80035fc:	b2c0      	uxtb	r0, r0
 80035fe:	280c      	cmp	r0, #12
 8003600:	d007      	beq.n	8003612 <??zcl_cluster_reports_timer_31>
 8003602:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003606:	9907      	ldr	r1, [sp, #28]
 8003608:	fa51 f080 	uxtab	r0, r1, r0
 800360c:	1cc0      	adds	r0, r0, #3
 800360e:	2837      	cmp	r0, #55	@ 0x37
 8003610:	d314      	bcc.n	800363c <??zcl_cluster_reports_timer_32>

08003612 <??zcl_cluster_reports_timer_31>:
 8003612:	465a      	mov	r2, fp
 8003614:	a90c      	add	r1, sp, #48	@ 0x30
 8003616:	9803      	ldr	r0, [sp, #12]
 8003618:	f7ff fc8e 	bl	8002f38 <zcl_reporting_queue_report>
 800361c:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 8003620:	2490      	movs	r4, #144	@ 0x90
 8003622:	2500      	movs	r5, #0
 8003624:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8003628:	002a      	movs	r2, r5
 800362a:	0021      	movs	r1, r4
 800362c:	4640      	mov	r0, r8
 800362e:	f002 fa70 	bl	8005b12 <__aeabi_memset>
 8003632:	2000      	movs	r0, #0
 8003634:	4682      	mov	sl, r0
 8003636:	2000      	movs	r0, #0
 8003638:	f88d 0008 	strb.w	r0, [sp, #8]

0800363c <??zcl_cluster_reports_timer_32>:
 800363c:	9807      	ldr	r0, [sp, #28]
 800363e:	9001      	str	r0, [sp, #4]
 8003640:	9805      	ldr	r0, [sp, #20]
 8003642:	9000      	str	r0, [sp, #0]
 8003644:	7bbb      	ldrb	r3, [r7, #14]
 8003646:	89ba      	ldrh	r2, [r7, #12]
 8003648:	a90c      	add	r1, sp, #48	@ 0x30
 800364a:	4654      	mov	r4, sl
 800364c:	b2e4      	uxtb	r4, r4
 800364e:	200c      	movs	r0, #12
 8003650:	4344      	muls	r4, r0
 8003652:	4421      	add	r1, r4
 8003654:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003656:	f7ff fdd9 	bl	800320c <zcl_report_append_attr>
 800365a:	2800      	cmp	r0, #0
 800365c:	d02b      	beq.n	80036b6 <??zcl_cluster_reports_timer_10>

0800365e <??zcl_cluster_reports_timer_33>:
 800365e:	f11a 0a01 	adds.w	sl, sl, #1
 8003662:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8003666:	9807      	ldr	r0, [sp, #28]
 8003668:	1841      	adds	r1, r0, r1
 800366a:	1cc9      	adds	r1, r1, #3
 800366c:	f88d 1008 	strb.w	r1, [sp, #8]
 8003670:	8c38      	ldrh	r0, [r7, #32]
 8003672:	2800      	cmp	r0, #0
 8003674:	d005      	beq.n	8003682 <??zcl_cluster_reports_timer_34>
 8003676:	8c39      	ldrh	r1, [r7, #32]
 8003678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800367c:	4341      	muls	r1, r0
 800367e:	9108      	str	r1, [sp, #32]
 8003680:	e00b      	b.n	800369a <??zcl_cluster_reports_timer_35>

08003682 <??zcl_cluster_reports_timer_34>:
 8003682:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8003684:	2800      	cmp	r0, #0
 8003686:	d005      	beq.n	8003694 <??zcl_cluster_reports_timer_36>
 8003688:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800368a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800368e:	4341      	muls	r1, r0
 8003690:	9108      	str	r1, [sp, #32]
 8003692:	e002      	b.n	800369a <??zcl_cluster_reports_timer_35>

08003694 <??zcl_cluster_reports_timer_36>:
 8003694:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8003c2c <??DataTable9_4>
 8003698:	9008      	str	r0, [sp, #32]

0800369a <??zcl_cluster_reports_timer_35>:
 800369a:	9908      	ldr	r1, [sp, #32]
 800369c:	9806      	ldr	r0, [sp, #24]
 800369e:	f7ff fd7d 	bl	800319c <zcl_report_check_time>
 80036a2:	9006      	str	r0, [sp, #24]
 80036a4:	e007      	b.n	80036b6 <??zcl_cluster_reports_timer_10>
 80036a6:	bf00      	nop

080036a8 <??zcl_cluster_reports_timer_0>:
 80036a8:	0000 0000                                   ....

080036ac <??zcl_cluster_reports_timer_30>:
 80036ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80036ae:	9806      	ldr	r0, [sp, #24]
 80036b0:	f7ff fd74 	bl	800319c <zcl_report_check_time>
 80036b4:	9006      	str	r0, [sp, #24]

080036b6 <??zcl_cluster_reports_timer_10>:
 80036b6:	6830      	ldr	r0, [r6, #0]
 80036b8:	9903      	ldr	r1, [sp, #12]
 80036ba:	3130      	adds	r1, #48	@ 0x30
 80036bc:	4288      	cmp	r0, r1
 80036be:	d001      	beq.n	80036c4 <??zcl_cluster_reports_timer_37>
 80036c0:	6836      	ldr	r6, [r6, #0]
 80036c2:	e683      	b.n	80033cc <??zcl_cluster_reports_timer_8>

080036c4 <??zcl_cluster_reports_timer_37>:
 80036c4:	2600      	movs	r6, #0
 80036c6:	e681      	b.n	80033cc <??zcl_cluster_reports_timer_8>

080036c8 <??zcl_cluster_reports_timer_9>:
 80036c8:	9805      	ldr	r0, [sp, #20]
 80036ca:	2800      	cmp	r0, #0
 80036cc:	d04c      	beq.n	8003768 <??zcl_cluster_reports_timer_3>
 80036ce:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80036d2:	2800      	cmp	r0, #0
 80036d4:	d042      	beq.n	800375c <??zcl_cluster_reports_timer_38>
 80036d6:	2001      	movs	r0, #1
 80036d8:	9007      	str	r0, [sp, #28]
 80036da:	2001      	movs	r0, #1
 80036dc:	9905      	ldr	r1, [sp, #20]
 80036de:	7008      	strb	r0, [r1, #0]
 80036e0:	4650      	mov	r0, sl
 80036e2:	b2c0      	uxtb	r0, r0
 80036e4:	280c      	cmp	r0, #12
 80036e6:	d007      	beq.n	80036f8 <??zcl_cluster_reports_timer_39>
 80036e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80036ec:	9907      	ldr	r1, [sp, #28]
 80036ee:	fa51 f080 	uxtab	r0, r1, r0
 80036f2:	1cc0      	adds	r0, r0, #3
 80036f4:	2837      	cmp	r0, #55	@ 0x37
 80036f6:	d314      	bcc.n	8003722 <??zcl_cluster_reports_timer_40>

080036f8 <??zcl_cluster_reports_timer_39>:
 80036f8:	465a      	mov	r2, fp
 80036fa:	a90c      	add	r1, sp, #48	@ 0x30
 80036fc:	9803      	ldr	r0, [sp, #12]
 80036fe:	f7ff fc1b 	bl	8002f38 <zcl_reporting_queue_report>
 8003702:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 8003706:	2490      	movs	r4, #144	@ 0x90
 8003708:	2500      	movs	r5, #0
 800370a:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 800370e:	002a      	movs	r2, r5
 8003710:	0021      	movs	r1, r4
 8003712:	4640      	mov	r0, r8
 8003714:	f002 f9fd 	bl	8005b12 <__aeabi_memset>
 8003718:	2000      	movs	r0, #0
 800371a:	4682      	mov	sl, r0
 800371c:	2000      	movs	r0, #0
 800371e:	f88d 0008 	strb.w	r0, [sp, #8]

08003722 <??zcl_cluster_reports_timer_40>:
 8003722:	9807      	ldr	r0, [sp, #28]
 8003724:	9001      	str	r0, [sp, #4]
 8003726:	9805      	ldr	r0, [sp, #20]
 8003728:	9000      	str	r0, [sp, #0]
 800372a:	2330      	movs	r3, #48	@ 0x30
 800372c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003730:	a90c      	add	r1, sp, #48	@ 0x30
 8003732:	4654      	mov	r4, sl
 8003734:	b2e4      	uxtb	r4, r4
 8003736:	200c      	movs	r0, #12
 8003738:	4344      	muls	r4, r0
 800373a:	4421      	add	r1, r4
 800373c:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800373e:	f7ff fd65 	bl	800320c <zcl_report_append_attr>
 8003742:	2800      	cmp	r0, #0
 8003744:	d001      	beq.n	800374a <??zcl_cluster_reports_timer_41>
 8003746:	f11a 0a01 	adds.w	sl, sl, #1

0800374a <??zcl_cluster_reports_timer_41>:
 800374a:	4650      	mov	r0, sl
 800374c:	b2c0      	uxtb	r0, r0
 800374e:	2800      	cmp	r0, #0
 8003750:	d004      	beq.n	800375c <??zcl_cluster_reports_timer_38>
 8003752:	465a      	mov	r2, fp
 8003754:	a90c      	add	r1, sp, #48	@ 0x30
 8003756:	9803      	ldr	r0, [sp, #12]
 8003758:	f7ff fbee 	bl	8002f38 <zcl_reporting_queue_report>

0800375c <??zcl_cluster_reports_timer_38>:
 800375c:	2300      	movs	r3, #0
 800375e:	a2ba      	add	r2, pc, #744	@ (adr r2, 8003a48 <??DataTable7>)
 8003760:	9905      	ldr	r1, [sp, #20]
 8003762:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003764:	f010 fefd 	bl	8014562 <zb_heap_free>

08003768 <??zcl_cluster_reports_timer_3>:
 8003768:	9806      	ldr	r0, [sp, #24]
 800376a:	28c8      	cmp	r0, #200	@ 0xc8
 800376c:	d201      	bcs.n	8003772 <??zcl_cluster_reports_timer_42>
 800376e:	20c8      	movs	r0, #200	@ 0xc8
 8003770:	9006      	str	r0, [sp, #24]

08003772 <??zcl_cluster_reports_timer_42>:
 8003772:	9803      	ldr	r0, [sp, #12]
 8003774:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 8003776:	2800      	cmp	r0, #0
 8003778:	d00c      	beq.n	8003794 <??zcl_cluster_reports_timer_43>
 800377a:	9803      	ldr	r0, [sp, #12]
 800377c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800377e:	9906      	ldr	r1, [sp, #24]
 8003780:	9803      	ldr	r0, [sp, #12]
 8003782:	9b03      	ldr	r3, [sp, #12]
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	4798      	blx	r3
 8003788:	2000      	movs	r0, #0
 800378a:	9903      	ldr	r1, [sp, #12]
 800378c:	6408      	str	r0, [r1, #64]	@ 0x40
 800378e:	2000      	movs	r0, #0
 8003790:	9903      	ldr	r1, [sp, #12]
 8003792:	6448      	str	r0, [r1, #68]	@ 0x44

08003794 <??zcl_cluster_reports_timer_43>:
 8003794:	2301      	movs	r3, #1
 8003796:	f10d 020a 	add.w	r2, sp, #10
 800379a:	f240 410c 	movw	r1, #1036	@ 0x40c
 800379e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80037a0:	f010 fc1e 	bl	8013fe0 <ZbNwkGet>
 80037a4:	2800      	cmp	r0, #0
 80037a6:	d002      	beq.n	80037ae <??zcl_cluster_reports_timer_44>
 80037a8:	2000      	movs	r0, #0
 80037aa:	f88d 000a 	strb.w	r0, [sp, #10]

080037ae <??zcl_cluster_reports_timer_44>:
 80037ae:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80037b2:	2800      	cmp	r0, #0
 80037b4:	d110      	bne.n	80037d8 <??zcl_cluster_reports_timer_45>
 80037b6:	9803      	ldr	r0, [sp, #12]
 80037b8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80037ba:	9903      	ldr	r1, [sp, #12]
 80037bc:	3130      	adds	r1, #48	@ 0x30
 80037be:	4288      	cmp	r0, r1
 80037c0:	d002      	beq.n	80037c8 <??zcl_cluster_reports_timer_46>
 80037c2:	9803      	ldr	r0, [sp, #12]
 80037c4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80037c6:	e000      	b.n	80037ca <??zcl_cluster_reports_timer_47>

080037c8 <??zcl_cluster_reports_timer_46>:
 80037c8:	2000      	movs	r0, #0

080037ca <??zcl_cluster_reports_timer_47>:
 80037ca:	2800      	cmp	r0, #0
 80037cc:	d004      	beq.n	80037d8 <??zcl_cluster_reports_timer_45>
 80037ce:	9906      	ldr	r1, [sp, #24]
 80037d0:	9803      	ldr	r0, [sp, #12]
 80037d2:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80037d4:	f010 fb22 	bl	8013e1c <ZbTimerReset>

080037d8 <??zcl_cluster_reports_timer_45>:
 80037d8:	b030      	add	sp, #192	@ 0xc0
 80037da:	ecbd 8b04 	vpop	{d8-d9}
 80037de:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080037e2 <zcl_attr_reporting_check>:
 80037e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037e4:	0005      	movs	r5, r0
 80037e6:	000e      	movs	r6, r1
 80037e8:	0017      	movs	r7, r2
 80037ea:	2000      	movs	r0, #0
 80037ec:	f88d 0000 	strb.w	r0, [sp]
 80037f0:	2301      	movs	r3, #1
 80037f2:	466a      	mov	r2, sp
 80037f4:	f240 410c 	movw	r1, #1036	@ 0x40c
 80037f8:	68a8      	ldr	r0, [r5, #8]
 80037fa:	f010 fbf1 	bl	8013fe0 <ZbNwkGet>
 80037fe:	2800      	cmp	r0, #0
 8003800:	d002      	beq.n	8003808 <??zcl_attr_reporting_check_0>
 8003802:	2000      	movs	r0, #0
 8003804:	f88d 0000 	strb.w	r0, [sp]

08003808 <??zcl_attr_reporting_check_0>:
 8003808:	f89d 0000 	ldrb.w	r0, [sp]
 800380c:	2800      	cmp	r0, #0
 800380e:	d10d      	bne.n	800382c <??zcl_attr_reporting_check_1>
 8003810:	003a      	movs	r2, r7
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	0031      	movs	r1, r6
 8003816:	b289      	uxth	r1, r1
 8003818:	0028      	movs	r0, r5
 800381a:	f000 f81a 	bl	8003852 <zcl_reporting_find>
 800381e:	0004      	movs	r4, r0
 8003820:	2c00      	cmp	r4, #0
 8003822:	d003      	beq.n	800382c <??zcl_attr_reporting_check_1>
 8003824:	21c8      	movs	r1, #200	@ 0xc8
 8003826:	0028      	movs	r0, r5
 8003828:	f7ff fcbd 	bl	80031a6 <zcl_report_kick>

0800382c <??zcl_attr_reporting_check_1>:
 800382c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800382e <ZbZclReportCleanup>:
 800382e:	b570      	push	{r4, r5, r6, lr}
 8003830:	0005      	movs	r5, r0

08003832 <??ZbZclReportCleanup_0>:
 8003832:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003834:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 8003838:	4288      	cmp	r0, r1
 800383a:	d001      	beq.n	8003840 <??ZbZclReportCleanup_1>
 800383c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800383e:	e000      	b.n	8003842 <??ZbZclReportCleanup_2>

08003840 <??ZbZclReportCleanup_1>:
 8003840:	2400      	movs	r4, #0

08003842 <??ZbZclReportCleanup_2>:
 8003842:	2c00      	cmp	r4, #0
 8003844:	d004      	beq.n	8003850 <??ZbZclReportCleanup_3>

08003846 <??ZbZclReportCleanup_4>:
 8003846:	0026      	movs	r6, r4
 8003848:	0030      	movs	r0, r6
 800384a:	f000 f8ff 	bl	8003a4c <zcl_reporting_delete>
 800384e:	e7f0      	b.n	8003832 <??ZbZclReportCleanup_0>

08003850 <??ZbZclReportCleanup_3>:
 8003850:	bd70      	pop	{r4, r5, r6, pc}

08003852 <zcl_reporting_find>:
 8003852:	b470      	push	{r4, r5, r6}
 8003854:	0004      	movs	r4, r0
 8003856:	000b      	movs	r3, r1
 8003858:	0010      	movs	r0, r2
 800385a:	b2c0      	uxtb	r0, r0
 800385c:	2801      	cmp	r0, #1
 800385e:	d101      	bne.n	8003864 <??zcl_reporting_find_0>
 8003860:	2000      	movs	r0, #0
 8003862:	e01c      	b.n	800389e <??zcl_reporting_find_1>

08003864 <??zcl_reporting_find_0>:
 8003864:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003866:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 800386a:	4288      	cmp	r0, r1
 800386c:	d001      	beq.n	8003872 <??zcl_reporting_find_2>
 800386e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003870:	e000      	b.n	8003874 <??zcl_reporting_find_3>

08003872 <??zcl_reporting_find_2>:
 8003872:	2100      	movs	r1, #0

08003874 <??zcl_reporting_find_3>:
 8003874:	2900      	cmp	r1, #0
 8003876:	d011      	beq.n	800389c <??zcl_reporting_find_4>
 8003878:	000d      	movs	r5, r1
 800387a:	89a8      	ldrh	r0, [r5, #12]
 800387c:	001e      	movs	r6, r3
 800387e:	b2b6      	uxth	r6, r6
 8003880:	42b0      	cmp	r0, r6
 8003882:	d005      	beq.n	8003890 <??zcl_reporting_find_5>
 8003884:	6808      	ldr	r0, [r1, #0]
 8003886:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 800388a:	42b0      	cmp	r0, r6
 800388c:	d004      	beq.n	8003898 <??zcl_reporting_find_6>
 800388e:	e001      	b.n	8003894 <??zcl_reporting_find_7>

08003890 <??zcl_reporting_find_5>:
 8003890:	0028      	movs	r0, r5
 8003892:	e004      	b.n	800389e <??zcl_reporting_find_1>

08003894 <??zcl_reporting_find_7>:
 8003894:	6809      	ldr	r1, [r1, #0]
 8003896:	e7ed      	b.n	8003874 <??zcl_reporting_find_3>

08003898 <??zcl_reporting_find_6>:
 8003898:	2100      	movs	r1, #0
 800389a:	e7eb      	b.n	8003874 <??zcl_reporting_find_3>

0800389c <??zcl_reporting_find_4>:
 800389c:	2000      	movs	r0, #0

0800389e <??zcl_reporting_find_1>:
 800389e:	bc70      	pop	{r4, r5, r6}
 80038a0:	4770      	bx	lr

080038a2 <zcl_reporting_stack_event>:
 80038a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a6:	0006      	movs	r6, r0
 80038a8:	000f      	movs	r7, r1
 80038aa:	4690      	mov	r8, r2
 80038ac:	4699      	mov	r9, r3
 80038ae:	46ca      	mov	sl, r9
 80038b0:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 80038b4:	d001      	beq.n	80038ba <??zcl_reporting_stack_event_0>
 80038b6:	2000      	movs	r0, #0
 80038b8:	e01b      	b.n	80038f2 <??zcl_reporting_stack_event_1>

080038ba <??zcl_reporting_stack_event_0>:
 80038ba:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 80038be:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 80038c2:	4288      	cmp	r0, r1
 80038c4:	d002      	beq.n	80038cc <??zcl_reporting_stack_event_2>
 80038c6:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 80038ca:	e000      	b.n	80038ce <??zcl_reporting_stack_event_3>

080038cc <??zcl_reporting_stack_event_2>:
 80038cc:	2400      	movs	r4, #0

080038ce <??zcl_reporting_stack_event_3>:
 80038ce:	2c00      	cmp	r4, #0
 80038d0:	d00e      	beq.n	80038f0 <??zcl_reporting_stack_event_4>
 80038d2:	0025      	movs	r5, r4
 80038d4:	2201      	movs	r2, #1
 80038d6:	0029      	movs	r1, r5
 80038d8:	0030      	movs	r0, r6
 80038da:	f000 f947 	bl	8003b6c <zcl_reporting_reset_defaults>
 80038de:	6820      	ldr	r0, [r4, #0]
 80038e0:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 80038e4:	4288      	cmp	r0, r1
 80038e6:	d001      	beq.n	80038ec <??zcl_reporting_stack_event_5>
 80038e8:	6824      	ldr	r4, [r4, #0]
 80038ea:	e7f0      	b.n	80038ce <??zcl_reporting_stack_event_3>

080038ec <??zcl_reporting_stack_event_5>:
 80038ec:	2400      	movs	r4, #0
 80038ee:	e7ee      	b.n	80038ce <??zcl_reporting_stack_event_3>

080038f0 <??zcl_reporting_stack_event_4>:
 80038f0:	2000      	movs	r0, #0

080038f2 <??zcl_reporting_stack_event_1>:
 80038f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080038f6 <zcl_reporting_save_curr_val>:
 80038f6:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80038fa:	0005      	movs	r5, r0
 80038fc:	000e      	movs	r6, r1
 80038fe:	68af      	ldr	r7, [r5, #8]
 8003900:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 8003904:	2300      	movs	r3, #0
 8003906:	464a      	mov	r2, r9
 8003908:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800390c:	0038      	movs	r0, r7
 800390e:	f010 fe19 	bl	8014544 <zb_heap_alloc>
 8003912:	0004      	movs	r4, r0
 8003914:	2c00      	cmp	r4, #0
 8003916:	d101      	bne.n	800391c <??zcl_reporting_save_curr_val_0>
 8003918:	2089      	movs	r0, #137	@ 0x89
 800391a:	e05d      	b.n	80039d8 <??zcl_reporting_save_curr_val_1>

0800391c <??zcl_reporting_save_curr_val_0>:
 800391c:	2001      	movs	r0, #1
 800391e:	9001      	str	r0, [sp, #4]
 8003920:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003924:	9000      	str	r0, [sp, #0]
 8003926:	0023      	movs	r3, r4
 8003928:	f10d 0209 	add.w	r2, sp, #9
 800392c:	89b1      	ldrh	r1, [r6, #12]
 800392e:	0028      	movs	r0, r5
 8003930:	f7fd fd6f 	bl	8001412 <ZbZclAttrRead>
 8003934:	f88d 0008 	strb.w	r0, [sp, #8]
 8003938:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800393c:	2800      	cmp	r0, #0
 800393e:	d002      	beq.n	8003946 <??zcl_reporting_save_curr_val_2>
 8003940:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003944:	e048      	b.n	80039d8 <??zcl_reporting_save_curr_val_1>

08003946 <??zcl_reporting_save_curr_val_2>:
 8003946:	7bb0      	ldrb	r0, [r6, #14]
 8003948:	f89d 1009 	ldrb.w	r1, [sp, #9]
 800394c:	4288      	cmp	r0, r1
 800394e:	d001      	beq.n	8003954 <??zcl_reporting_save_curr_val_3>
 8003950:	208d      	movs	r0, #141	@ 0x8d
 8003952:	e041      	b.n	80039d8 <??zcl_reporting_save_curr_val_1>

08003954 <??zcl_reporting_save_curr_val_3>:
 8003954:	2300      	movs	r3, #0
 8003956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800395a:	0021      	movs	r1, r4
 800395c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003960:	f7fe fb7f 	bl	8002062 <ZbZclAttrParseLength>
 8003964:	4680      	mov	r8, r0
 8003966:	f1b8 0f00 	cmp.w	r8, #0
 800396a:	d501      	bpl.n	8003970 <??zcl_reporting_save_curr_val_4>
 800396c:	2089      	movs	r0, #137	@ 0x89
 800396e:	e033      	b.n	80039d8 <??zcl_reporting_save_curr_val_1>

08003970 <??zcl_reporting_save_curr_val_4>:
 8003970:	7bb0      	ldrb	r0, [r6, #14]
 8003972:	f7fe fc27 	bl	80021c4 <ZbZclAttrIsAnalog>
 8003976:	2800      	cmp	r0, #0
 8003978:	d106      	bne.n	8003988 <??zcl_reporting_save_curr_val_5>
 800397a:	4642      	mov	r2, r8
 800397c:	0021      	movs	r1, r4
 800397e:	2000      	movs	r0, #0
 8003980:	f010 fdfe 	bl	8014580 <WpanCrc>
 8003984:	8330      	strh	r0, [r6, #24]
 8003986:	e020      	b.n	80039ca <??zcl_reporting_save_curr_val_6>

08003988 <??zcl_reporting_save_curr_val_5>:
 8003988:	7bb0      	ldrb	r0, [r6, #14]
 800398a:	f002 f8ab 	bl	8005ae4 <ZbZclAttrIsFloat>
 800398e:	2800      	cmp	r0, #0
 8003990:	d00d      	beq.n	80039ae <??zcl_reporting_save_curr_val_7>
 8003992:	aa02      	add	r2, sp, #8
 8003994:	0021      	movs	r1, r4
 8003996:	7bb0      	ldrb	r0, [r6, #14]
 8003998:	f001 fd7f 	bl	800549a <ZbZclParseFloat>
 800399c:	ed86 0b06 	vstr	d0, [r6, #24]
 80039a0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d010      	beq.n	80039ca <??zcl_reporting_save_curr_val_6>
 80039a8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80039ac:	e014      	b.n	80039d8 <??zcl_reporting_save_curr_val_1>

080039ae <??zcl_reporting_save_curr_val_7>:
 80039ae:	aa02      	add	r2, sp, #8
 80039b0:	0021      	movs	r1, r4
 80039b2:	7bb0      	ldrb	r0, [r6, #14]
 80039b4:	f7fe fd04 	bl	80023c0 <ZbZclParseInteger>
 80039b8:	e9c6 0106 	strd	r0, r1, [r6, #24]
 80039bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d002      	beq.n	80039ca <??zcl_reporting_save_curr_val_6>
 80039c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80039c8:	e006      	b.n	80039d8 <??zcl_reporting_save_curr_val_1>

080039ca <??zcl_reporting_save_curr_val_6>:
 80039ca:	2300      	movs	r3, #0
 80039cc:	464a      	mov	r2, r9
 80039ce:	0021      	movs	r1, r4
 80039d0:	0038      	movs	r0, r7
 80039d2:	f010 fdc6 	bl	8014562 <zb_heap_free>
 80039d6:	2000      	movs	r0, #0

080039d8 <??zcl_reporting_save_curr_val_1>:
 80039d8:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

080039dc <zcl_reporting_create_new>:
 80039dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	0006      	movs	r6, r0
 80039e2:	000f      	movs	r7, r1
 80039e4:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80039e8:	2200      	movs	r2, #0
 80039ea:	89b9      	ldrh	r1, [r7, #12]
 80039ec:	0030      	movs	r0, r6
 80039ee:	f7ff ff30 	bl	8003852 <zcl_reporting_find>
 80039f2:	0005      	movs	r5, r0
 80039f4:	2d00      	cmp	r5, #0
 80039f6:	d001      	beq.n	80039fc <??zcl_reporting_create_new_0>
 80039f8:	0028      	movs	r0, r5
 80039fa:	e023      	b.n	8003a44 <??zcl_reporting_create_new_1>

080039fc <??zcl_reporting_create_new_0>:
 80039fc:	2300      	movs	r3, #0
 80039fe:	a212      	add	r2, pc, #72	@ (adr r2, 8003a48 <??DataTable7>)
 8003a00:	2138      	movs	r1, #56	@ 0x38
 8003a02:	4640      	mov	r0, r8
 8003a04:	f010 fd9e 	bl	8014544 <zb_heap_alloc>
 8003a08:	0004      	movs	r4, r0
 8003a0a:	2c00      	cmp	r4, #0
 8003a0c:	d101      	bne.n	8003a12 <??zcl_reporting_create_new_2>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e018      	b.n	8003a44 <??zcl_reporting_create_new_1>

08003a12 <??zcl_reporting_create_new_2>:
 8003a12:	2538      	movs	r5, #56	@ 0x38
 8003a14:	46b9      	mov	r9, r7
 8003a16:	46a2      	mov	sl, r4
 8003a18:	002a      	movs	r2, r5
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	4650      	mov	r0, sl
 8003a1e:	f013 fb3a 	bl	8017096 <__aeabi_memcpy>
 8003a22:	6024      	str	r4, [r4, #0]
 8003a24:	6064      	str	r4, [r4, #4]
 8003a26:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 8003a2a:	6020      	str	r0, [r4, #0]
 8003a2c:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8003a2e:	6060      	str	r0, [r4, #4]
 8003a30:	6820      	ldr	r0, [r4, #0]
 8003a32:	6044      	str	r4, [r0, #4]
 8003a34:	6860      	ldr	r0, [r4, #4]
 8003a36:	6004      	str	r4, [r0, #0]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	0021      	movs	r1, r4
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	f000 f895 	bl	8003b6c <zcl_reporting_reset_defaults>
 8003a42:	0020      	movs	r0, r4

08003a44 <??zcl_reporting_create_new_1>:
 8003a44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003a48 <??DataTable7>:
 8003a48:	0000 0000                                   ....

08003a4c <zcl_reporting_delete>:
 8003a4c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003a4e:	0004      	movs	r4, r0
 8003a50:	68a5      	ldr	r5, [r4, #8]
 8003a52:	68ae      	ldr	r6, [r5, #8]
 8003a54:	2000      	movs	r0, #0
 8003a56:	f88d 0000 	strb.w	r0, [sp]
 8003a5a:	6860      	ldr	r0, [r4, #4]
 8003a5c:	6821      	ldr	r1, [r4, #0]
 8003a5e:	6048      	str	r0, [r1, #4]
 8003a60:	6820      	ldr	r0, [r4, #0]
 8003a62:	6861      	ldr	r1, [r4, #4]
 8003a64:	6008      	str	r0, [r1, #0]
 8003a66:	6024      	str	r4, [r4, #0]
 8003a68:	6064      	str	r4, [r4, #4]
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	a26c      	add	r2, pc, #432	@ (adr r2, 8003c20 <??DataTable9_1>)
 8003a6e:	0021      	movs	r1, r4
 8003a70:	0030      	movs	r0, r6
 8003a72:	f010 fd76 	bl	8014562 <zb_heap_free>
 8003a76:	2301      	movs	r3, #1
 8003a78:	466a      	mov	r2, sp
 8003a7a:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003a7e:	0030      	movs	r0, r6
 8003a80:	f010 faae 	bl	8013fe0 <ZbNwkGet>
 8003a84:	2800      	cmp	r0, #0
 8003a86:	d002      	beq.n	8003a8e <??zcl_reporting_delete_0>
 8003a88:	2000      	movs	r0, #0
 8003a8a:	f88d 0000 	strb.w	r0, [sp]

08003a8e <??zcl_reporting_delete_0>:
 8003a8e:	f89d 0000 	ldrb.w	r0, [sp]
 8003a92:	2800      	cmp	r0, #0
 8003a94:	d103      	bne.n	8003a9e <??zcl_reporting_delete_1>
 8003a96:	21c8      	movs	r1, #200	@ 0xc8
 8003a98:	0028      	movs	r0, r5
 8003a9a:	f7ff fb84 	bl	80031a6 <zcl_report_kick>

08003a9e <??zcl_reporting_delete_1>:
 8003a9e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003aa0 <zcl_cluster_attr_report_delete>:
 8003aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aa2:	0005      	movs	r5, r0
 8003aa4:	000e      	movs	r6, r1
 8003aa6:	0017      	movs	r7, r2
 8003aa8:	003a      	movs	r2, r7
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	0031      	movs	r1, r6
 8003aae:	b289      	uxth	r1, r1
 8003ab0:	0028      	movs	r0, r5
 8003ab2:	f7ff fece 	bl	8003852 <zcl_reporting_find>
 8003ab6:	0004      	movs	r4, r0
 8003ab8:	2c00      	cmp	r4, #0
 8003aba:	d101      	bne.n	8003ac0 <??zcl_cluster_attr_report_delete_0>
 8003abc:	2000      	movs	r0, #0
 8003abe:	e003      	b.n	8003ac8 <??zcl_cluster_attr_report_delete_1>

08003ac0 <??zcl_cluster_attr_report_delete_0>:
 8003ac0:	0020      	movs	r0, r4
 8003ac2:	f7ff ffc3 	bl	8003a4c <zcl_reporting_delete>
 8003ac6:	2001      	movs	r0, #1

08003ac8 <??zcl_cluster_attr_report_delete_1>:
 8003ac8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003aca <zcl_reporting_disable>:
 8003aca:	b538      	push	{r3, r4, r5, lr}
 8003acc:	0004      	movs	r4, r0
 8003ace:	68a0      	ldr	r0, [r4, #8]
 8003ad0:	6885      	ldr	r5, [r0, #8]
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	f88d 0000 	strb.w	r0, [sp]
 8003ad8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003adc:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003ade:	2000      	movs	r0, #0
 8003ae0:	8420      	strh	r0, [r4, #32]
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	466a      	mov	r2, sp
 8003ae6:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003aea:	0028      	movs	r0, r5
 8003aec:	f010 fa78 	bl	8013fe0 <ZbNwkGet>
 8003af0:	2800      	cmp	r0, #0
 8003af2:	d002      	beq.n	8003afa <??zcl_reporting_disable_0>
 8003af4:	2000      	movs	r0, #0
 8003af6:	f88d 0000 	strb.w	r0, [sp]

08003afa <??zcl_reporting_disable_0>:
 8003afa:	f89d 0000 	ldrb.w	r0, [sp]
 8003afe:	2800      	cmp	r0, #0
 8003b00:	d103      	bne.n	8003b0a <??zcl_reporting_disable_1>
 8003b02:	21c8      	movs	r1, #200	@ 0xc8
 8003b04:	68a0      	ldr	r0, [r4, #8]
 8003b06:	f7ff fb4e 	bl	80031a6 <zcl_report_kick>

08003b0a <??zcl_reporting_disable_1>:
 8003b0a:	bd31      	pop	{r0, r4, r5, pc}

08003b0c <zcl_reporting_check_default_intvl>:
 8003b0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b10:	880a      	ldrh	r2, [r1, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d00e      	beq.n	8003b34 <??zcl_reporting_check_default_intvl_0>
 8003b16:	880a      	ldrh	r2, [r1, #0]
 8003b18:	2a00      	cmp	r2, #0
 8003b1a:	d00b      	beq.n	8003b34 <??zcl_reporting_check_default_intvl_0>
 8003b1c:	880a      	ldrh	r2, [r1, #0]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d102      	bne.n	8003b28 <??zcl_reporting_check_default_intvl_1>
 8003b22:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003b26:	800a      	strh	r2, [r1, #0]

08003b28 <??zcl_reporting_check_default_intvl_1>:
 8003b28:	880a      	ldrh	r2, [r1, #0]
 8003b2a:	8803      	ldrh	r3, [r0, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d201      	bcs.n	8003b34 <??zcl_reporting_check_default_intvl_0>
 8003b30:	2200      	movs	r2, #0
 8003b32:	8002      	strh	r2, [r0, #0]

08003b34 <??zcl_reporting_check_default_intvl_0>:
 8003b34:	4770      	bx	lr

08003b36 <zcl_reporting_config_attr_defaults>:
 8003b36:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003b38:	0004      	movs	r4, r0
 8003b3a:	000d      	movs	r5, r1
 8003b3c:	0016      	movs	r6, r2
 8003b3e:	8aa8      	ldrh	r0, [r5, #20]
 8003b40:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003b44:	8ae8      	ldrh	r0, [r5, #22]
 8003b46:	f8ad 0000 	strh.w	r0, [sp]
 8003b4a:	4669      	mov	r1, sp
 8003b4c:	f10d 0002 	add.w	r0, sp, #2
 8003b50:	f7ff ffdc 	bl	8003b0c <zcl_reporting_check_default_intvl>
 8003b54:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8003b58:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8003b5a:	f8bd 0000 	ldrh.w	r0, [sp]
 8003b5e:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8003b60:	2200      	movs	r2, #0
 8003b62:	0031      	movs	r1, r6
 8003b64:	0020      	movs	r0, r4
 8003b66:	f000 f801 	bl	8003b6c <zcl_reporting_reset_defaults>
 8003b6a:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003b6c <zcl_reporting_reset_defaults>:
 8003b6c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003b6e:	0004      	movs	r4, r0
 8003b70:	000d      	movs	r5, r1
 8003b72:	0016      	movs	r6, r2
 8003b74:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8003b76:	8428      	strh	r0, [r5, #32]
 8003b78:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8003b7a:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003b7c:	8c28      	ldrh	r0, [r5, #32]
 8003b7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b82:	4288      	cmp	r0, r1
 8003b84:	d106      	bne.n	8003b94 <??zcl_reporting_reset_defaults_0>
 8003b86:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003b88:	2800      	cmp	r0, #0
 8003b8a:	d103      	bne.n	8003b94 <??zcl_reporting_reset_defaults_0>
 8003b8c:	203d      	movs	r0, #61	@ 0x3d
 8003b8e:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003b90:	2000      	movs	r0, #0
 8003b92:	8428      	strh	r0, [r5, #32]

08003b94 <??zcl_reporting_reset_defaults_0>:
 8003b94:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8003b98:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8003b9c:	0020      	movs	r0, r4
 8003b9e:	f010 fa49 	bl	8014034 <ZbZclUptime>
 8003ba2:	6128      	str	r0, [r5, #16]
 8003ba4:	0030      	movs	r0, r6
 8003ba6:	b2c0      	uxtb	r0, r0
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	d013      	beq.n	8003bd4 <??zcl_reporting_reset_defaults_1>
 8003bac:	2301      	movs	r3, #1
 8003bae:	466a      	mov	r2, sp
 8003bb0:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003bb4:	0020      	movs	r0, r4
 8003bb6:	f010 fa13 	bl	8013fe0 <ZbNwkGet>
 8003bba:	2800      	cmp	r0, #0
 8003bbc:	d002      	beq.n	8003bc4 <??zcl_reporting_reset_defaults_2>
 8003bbe:	2000      	movs	r0, #0
 8003bc0:	f88d 0000 	strb.w	r0, [sp]

08003bc4 <??zcl_reporting_reset_defaults_2>:
 8003bc4:	f89d 0000 	ldrb.w	r0, [sp]
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	d103      	bne.n	8003bd4 <??zcl_reporting_reset_defaults_1>
 8003bcc:	21c8      	movs	r1, #200	@ 0xc8
 8003bce:	68a8      	ldr	r0, [r5, #8]
 8003bd0:	f7ff fae9 	bl	80031a6 <zcl_report_kick>

08003bd4 <??zcl_reporting_reset_defaults_1>:
 8003bd4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003bd6 <zcl_reporting_epsilon_default>:
 8003bd6:	b538      	push	{r3, r4, r5, lr}
 8003bd8:	0004      	movs	r4, r0
 8003bda:	000d      	movs	r5, r1
 8003bdc:	0028      	movs	r0, r5
 8003bde:	b2c0      	uxtb	r0, r0
 8003be0:	2838      	cmp	r0, #56	@ 0x38
 8003be2:	db09      	blt.n	8003bf8 <??zcl_reporting_epsilon_default_0>
 8003be4:	0028      	movs	r0, r5
 8003be6:	b2c0      	uxtb	r0, r0
 8003be8:	283b      	cmp	r0, #59	@ 0x3b
 8003bea:	da05      	bge.n	8003bf8 <??zcl_reporting_epsilon_default_0>
 8003bec:	2000      	movs	r0, #0
 8003bee:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 80047c0 <??DataTable11>
 8003bf2:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8003bf6:	e00f      	b.n	8003c18 <??zcl_reporting_epsilon_default_1>

08003bf8 <??zcl_reporting_epsilon_default_0>:
 8003bf8:	0028      	movs	r0, r5
 8003bfa:	b2c0      	uxtb	r0, r0
 8003bfc:	f7fe fae2 	bl	80021c4 <ZbZclAttrIsAnalog>
 8003c00:	2800      	cmp	r0, #0
 8003c02:	d005      	beq.n	8003c10 <??zcl_reporting_epsilon_default_2>
 8003c04:	2000      	movs	r0, #0
 8003c06:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 80047c0 <??DataTable11>
 8003c0a:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8003c0e:	e003      	b.n	8003c18 <??zcl_reporting_epsilon_default_1>

08003c10 <??zcl_reporting_epsilon_default_2>:
 8003c10:	2000      	movs	r0, #0
 8003c12:	2100      	movs	r1, #0
 8003c14:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003c18 <??zcl_reporting_epsilon_default_1>:
 8003c18:	bd31      	pop	{r0, r4, r5, pc}
	...

08003c1c <??DataTable9>:
 8003c1c:	2f11 0800                                   ./..

08003c20 <??DataTable9_1>:
 8003c20:	0000 0000                                   ....

08003c24 <??DataTable9_2>:
 8003c24:	0094 2000                                   ... 

08003c28 <??DataTable9_3>:
 8003c28:	2efd 0800                                   ....

08003c2c <??DataTable9_4>:
 8003c2c:	ee80 0036                                   ..6.

08003c30 <zcl_reporting_epsilon_check>:
 8003c30:	b510      	push	{r4, lr}
 8003c32:	0004      	movs	r4, r0
 8003c34:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c38:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003c3a:	4281      	cmp	r1, r0
 8003c3c:	d101      	bne.n	8003c42 <??zcl_reporting_epsilon_check_0>
 8003c3e:	2001      	movs	r0, #1
 8003c40:	e049      	b.n	8003cd6 <??zcl_reporting_epsilon_check_1>

08003c42 <??zcl_reporting_epsilon_check_0>:
 8003c42:	8c21      	ldrh	r1, [r4, #32]
 8003c44:	4281      	cmp	r1, r0
 8003c46:	d104      	bne.n	8003c52 <??zcl_reporting_epsilon_check_2>
 8003c48:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8003c4a:	2800      	cmp	r0, #0
 8003c4c:	d101      	bne.n	8003c52 <??zcl_reporting_epsilon_check_2>
 8003c4e:	2001      	movs	r0, #1
 8003c50:	e041      	b.n	8003cd6 <??zcl_reporting_epsilon_check_1>

08003c52 <??zcl_reporting_epsilon_check_2>:
 8003c52:	7ba0      	ldrb	r0, [r4, #14]
 8003c54:	2838      	cmp	r0, #56	@ 0x38
 8003c56:	db1d      	blt.n	8003c94 <??zcl_reporting_epsilon_check_3>
 8003c58:	7ba0      	ldrb	r0, [r4, #14]
 8003c5a:	283b      	cmp	r0, #59	@ 0x3b
 8003c5c:	da1a      	bge.n	8003c94 <??zcl_reporting_epsilon_check_3>
 8003c5e:	8c20      	ldrh	r0, [r4, #32]
 8003c60:	2800      	cmp	r0, #0
 8003c62:	d108      	bne.n	8003c76 <??zcl_reporting_epsilon_check_4>
 8003c64:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8003c68:	2000      	movs	r0, #0
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	f002 fc18 	bl	80064a0 <__aeabi_cdcmpeq>
 8003c70:	d101      	bne.n	8003c76 <??zcl_reporting_epsilon_check_4>
 8003c72:	2000      	movs	r0, #0
 8003c74:	e02f      	b.n	8003cd6 <??zcl_reporting_epsilon_check_1>

08003c76 <??zcl_reporting_epsilon_check_4>:
 8003c76:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f002 fc0f 	bl	80064a0 <__aeabi_cdcmpeq>
 8003c82:	d205      	bcs.n	8003c90 <??zcl_reporting_epsilon_check_5>
 8003c84:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003c88:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003c8c:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003c90 <??zcl_reporting_epsilon_check_5>:
 8003c90:	2001      	movs	r0, #1
 8003c92:	e020      	b.n	8003cd6 <??zcl_reporting_epsilon_check_1>

08003c94 <??zcl_reporting_epsilon_check_3>:
 8003c94:	7ba0      	ldrb	r0, [r4, #14]
 8003c96:	f7fe fa95 	bl	80021c4 <ZbZclAttrIsAnalog>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d01a      	beq.n	8003cd4 <??zcl_reporting_epsilon_check_6>
 8003c9e:	8c20      	ldrh	r0, [r4, #32]
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	d108      	bne.n	8003cb6 <??zcl_reporting_epsilon_check_7>
 8003ca4:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8003ca8:	2000      	movs	r0, #0
 8003caa:	2100      	movs	r1, #0
 8003cac:	f002 fbf8 	bl	80064a0 <__aeabi_cdcmpeq>
 8003cb0:	d101      	bne.n	8003cb6 <??zcl_reporting_epsilon_check_7>
 8003cb2:	2000      	movs	r0, #0
 8003cb4:	e00f      	b.n	8003cd6 <??zcl_reporting_epsilon_check_1>

08003cb6 <??zcl_reporting_epsilon_check_7>:
 8003cb6:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003cba:	2200      	movs	r2, #0
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	f002 fbef 	bl	80064a0 <__aeabi_cdcmpeq>
 8003cc2:	d205      	bcs.n	8003cd0 <??zcl_reporting_epsilon_check_8>
 8003cc4:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003cc8:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003ccc:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003cd0 <??zcl_reporting_epsilon_check_8>:
 8003cd0:	2001      	movs	r0, #1
 8003cd2:	e000      	b.n	8003cd6 <??zcl_reporting_epsilon_check_1>

08003cd4 <??zcl_reporting_epsilon_check_6>:
 8003cd4:	2001      	movs	r0, #1

08003cd6 <??zcl_reporting_epsilon_check_1>:
 8003cd6:	bd10      	pop	{r4, pc}

08003cd8 <zcl_reporting_create_default_reports>:
 8003cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cdc:	b090      	sub	sp, #64	@ 0x40
 8003cde:	0005      	movs	r5, r0
 8003ce0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003ce2:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8003ce6:	4288      	cmp	r0, r1
 8003ce8:	d001      	beq.n	8003cee <??zcl_reporting_create_default_reports_0>
 8003cea:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8003cec:	e000      	b.n	8003cf0 <??zcl_reporting_create_default_reports_1>

08003cee <??zcl_reporting_create_default_reports_0>:
 8003cee:	2400      	movs	r4, #0

08003cf0 <??zcl_reporting_create_default_reports_1>:
 8003cf0:	2c00      	cmp	r4, #0
 8003cf2:	d054      	beq.n	8003d9e <??zcl_reporting_create_default_reports_2>
 8003cf4:	0026      	movs	r6, r4
 8003cf6:	68b0      	ldr	r0, [r6, #8]
 8003cf8:	7900      	ldrb	r0, [r0, #4]
 8003cfa:	0780      	lsls	r0, r0, #30
 8003cfc:	d546      	bpl.n	8003d8c <??zcl_reporting_create_default_reports_3>

08003cfe <??zcl_reporting_create_default_reports_4>:
 8003cfe:	2200      	movs	r2, #0
 8003d00:	68b0      	ldr	r0, [r6, #8]
 8003d02:	8801      	ldrh	r1, [r0, #0]
 8003d04:	0028      	movs	r0, r5
 8003d06:	f7ff fda4 	bl	8003852 <zcl_reporting_find>
 8003d0a:	9001      	str	r0, [sp, #4]
 8003d0c:	9801      	ldr	r0, [sp, #4]
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d13c      	bne.n	8003d8c <??zcl_reporting_create_default_reports_3>

08003d12 <??zcl_reporting_create_default_reports_5>:
 8003d12:	2738      	movs	r7, #56	@ 0x38
 8003d14:	f05f 0800 	movs.w	r8, #0
 8003d18:	f10d 0908 	add.w	r9, sp, #8
 8003d1c:	4642      	mov	r2, r8
 8003d1e:	0039      	movs	r1, r7
 8003d20:	4648      	mov	r0, r9
 8003d22:	f001 fef6 	bl	8005b12 <__aeabi_memset>
 8003d26:	68b0      	ldr	r0, [r6, #8]
 8003d28:	8800      	ldrh	r0, [r0, #0]
 8003d2a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003d2e:	9504      	str	r5, [sp, #16]
 8003d30:	68b0      	ldr	r0, [r6, #8]
 8003d32:	7880      	ldrb	r0, [r0, #2]
 8003d34:	f88d 0016 	strb.w	r0, [sp, #22]
 8003d38:	68b0      	ldr	r0, [r6, #8]
 8003d3a:	7881      	ldrb	r1, [r0, #2]
 8003d3c:	a802      	add	r0, sp, #8
 8003d3e:	f7ff ff4a 	bl	8003bd6 <zcl_reporting_epsilon_default>
 8003d42:	f05f 0908 	movs.w	r9, #8
 8003d46:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8003d4a:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8003d4e:	464a      	mov	r2, r9
 8003d50:	4651      	mov	r1, sl
 8003d52:	4658      	mov	r0, fp
 8003d54:	f013 f99f 	bl	8017096 <__aeabi_memcpy>
 8003d58:	aa02      	add	r2, sp, #8
 8003d5a:	0031      	movs	r1, r6
 8003d5c:	68a8      	ldr	r0, [r5, #8]
 8003d5e:	f7ff feea 	bl	8003b36 <zcl_reporting_config_attr_defaults>
 8003d62:	a902      	add	r1, sp, #8
 8003d64:	0028      	movs	r0, r5
 8003d66:	f7ff fdc6 	bl	80038f6 <zcl_reporting_save_curr_val>
 8003d6a:	f88d 0000 	strb.w	r0, [sp]
 8003d6e:	f89d 0000 	ldrb.w	r0, [sp]
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d002      	beq.n	8003d7c <??zcl_reporting_create_default_reports_6>
 8003d76:	f89d 0000 	ldrb.w	r0, [sp]
 8003d7a:	e011      	b.n	8003da0 <??zcl_reporting_create_default_reports_7>

08003d7c <??zcl_reporting_create_default_reports_6>:
 8003d7c:	a902      	add	r1, sp, #8
 8003d7e:	0028      	movs	r0, r5
 8003d80:	f7ff fe2c 	bl	80039dc <zcl_reporting_create_new>
 8003d84:	2800      	cmp	r0, #0
 8003d86:	d101      	bne.n	8003d8c <??zcl_reporting_create_default_reports_3>
 8003d88:	2089      	movs	r0, #137	@ 0x89
 8003d8a:	e009      	b.n	8003da0 <??zcl_reporting_create_default_reports_7>

08003d8c <??zcl_reporting_create_default_reports_3>:
 8003d8c:	6820      	ldr	r0, [r4, #0]
 8003d8e:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8003d92:	4288      	cmp	r0, r1
 8003d94:	d001      	beq.n	8003d9a <??zcl_reporting_create_default_reports_8>
 8003d96:	6824      	ldr	r4, [r4, #0]
 8003d98:	e7aa      	b.n	8003cf0 <??zcl_reporting_create_default_reports_1>

08003d9a <??zcl_reporting_create_default_reports_8>:
 8003d9a:	2400      	movs	r4, #0
 8003d9c:	e7a8      	b.n	8003cf0 <??zcl_reporting_create_default_reports_1>

08003d9e <??zcl_reporting_create_default_reports_2>:
 8003d9e:	2000      	movs	r0, #0

08003da0 <??zcl_reporting_create_default_reports_7>:
 8003da0:	b011      	add	sp, #68	@ 0x44
 8003da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003da6 <ZbZclHandleConfigReport>:
 8003da6:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	b0c8      	sub	sp, #288	@ 0x120
 8003dac:	0004      	movs	r4, r0
 8003dae:	0015      	movs	r5, r2
 8003db0:	68a0      	ldr	r0, [r4, #8]
 8003db2:	9001      	str	r0, [sp, #4]
 8003db4:	2700      	movs	r7, #0
 8003db6:	2000      	movs	r0, #0
 8003db8:	f88d 0003 	strb.w	r0, [sp, #3]
 8003dbc:	2600      	movs	r6, #0
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f88d 0002 	strb.w	r0, [sp, #2]
 8003dc4:	f05f 0808 	movs.w	r8, #8
 8003dc8:	f05f 0900 	movs.w	r9, #0
 8003dcc:	f10d 0a0c 	add.w	sl, sp, #12
 8003dd0:	464a      	mov	r2, r9
 8003dd2:	4641      	mov	r1, r8
 8003dd4:	4650      	mov	r0, sl
 8003dd6:	f001 fe9c 	bl	8005b12 <__aeabi_memset>
 8003dda:	2000      	movs	r0, #0
 8003ddc:	f88d 000c 	strb.w	r0, [sp, #12]
 8003de0:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003de2:	7840      	ldrb	r0, [r0, #1]
 8003de4:	f88d 000d 	strb.w	r0, [sp, #13]
 8003de8:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003dea:	7880      	ldrb	r0, [r0, #2]
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d003      	beq.n	8003df8 <??ZbZclHandleConfigReport_0>
 8003df0:	2000      	movs	r0, #0
 8003df2:	f88d 000e 	strb.w	r0, [sp, #14]
 8003df6:	e002      	b.n	8003dfe <??ZbZclHandleConfigReport_1>

08003df8 <??ZbZclHandleConfigReport_0>:
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f88d 000e 	strb.w	r0, [sp, #14]

08003dfe <??ZbZclHandleConfigReport_1>:
 8003dfe:	2001      	movs	r0, #1
 8003e00:	f88d 000f 	strb.w	r0, [sp, #15]
 8003e04:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003e06:	8880      	ldrh	r0, [r0, #4]
 8003e08:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003e0c:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003e0e:	7980      	ldrb	r0, [r0, #6]
 8003e10:	f88d 0012 	strb.w	r0, [sp, #18]
 8003e14:	2007      	movs	r0, #7
 8003e16:	f88d 0013 	strb.w	r0, [sp, #19]
 8003e1a:	2205      	movs	r2, #5
 8003e1c:	a916      	add	r1, sp, #88	@ 0x58
 8003e1e:	a803      	add	r0, sp, #12
 8003e20:	f7fd f86e 	bl	8000f00 <ZbZclAppendHeader>
 8003e24:	9005      	str	r0, [sp, #20]
 8003e26:	9805      	ldr	r0, [sp, #20]
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	d506      	bpl.n	8003e3a <??ZbZclHandleConfigReport_2>
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003e30:	0029      	movs	r1, r5
 8003e32:	0020      	movs	r0, r4
 8003e34:	f010 f9fe 	bl	8014234 <ZbZclSendDefaultResponse>
 8003e38:	e236      	b.n	80042a8 <??ZbZclHandleConfigReport_3>

08003e3a <??ZbZclHandleConfigReport_2>:
 8003e3a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003e3c:	4286      	cmp	r6, r0
 8003e3e:	f080 81b4 	bcs.w	80041aa <??ZbZclHandleConfigReport_4>
 8003e42:	f05f 0900 	movs.w	r9, #0
 8003e46:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8003e4a:	f05f 0a00 	movs.w	sl, #0
 8003e4e:	f10d 0b18 	add.w	fp, sp, #24
 8003e52:	4652      	mov	r2, sl
 8003e54:	4641      	mov	r1, r8
 8003e56:	4658      	mov	r0, fp
 8003e58:	f001 fe5b 	bl	8005b12 <__aeabi_memset>
 8003e5c:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003e5e:	1cf1      	adds	r1, r6, #3
 8003e60:	4288      	cmp	r0, r1
 8003e62:	d206      	bcs.n	8003e72 <??ZbZclHandleConfigReport_5>
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003e68:	0029      	movs	r1, r5
 8003e6a:	0020      	movs	r0, r4
 8003e6c:	f010 f9e2 	bl	8014234 <ZbZclSendDefaultResponse>
 8003e70:	e21a      	b.n	80042a8 <??ZbZclHandleConfigReport_3>

08003e72 <??ZbZclHandleConfigReport_5>:
 8003e72:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003e74:	5d80      	ldrb	r0, [r0, r6]
 8003e76:	f88d 0001 	strb.w	r0, [sp, #1]
 8003e7a:	1c76      	adds	r6, r6, #1
 8003e7c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003e7e:	4430      	add	r0, r6
 8003e80:	f7fd f8f4 	bl	800106c <pletoh16>
 8003e84:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8003e88:	1cb6      	adds	r6, r6, #2
 8003e8a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003e8e:	2800      	cmp	r0, #0
 8003e90:	f040 8159 	bne.w	8004146 <??ZbZclHandleConfigReport_6>
 8003e94:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003e96:	1cb1      	adds	r1, r6, #2
 8003e98:	4288      	cmp	r0, r1
 8003e9a:	d206      	bcs.n	8003eaa <??ZbZclHandleConfigReport_7>
 8003e9c:	2380      	movs	r3, #128	@ 0x80
 8003e9e:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003ea0:	0029      	movs	r1, r5
 8003ea2:	0020      	movs	r0, r4
 8003ea4:	f010 f9c6 	bl	8014234 <ZbZclSendDefaultResponse>
 8003ea8:	e1fe      	b.n	80042a8 <??ZbZclHandleConfigReport_3>

08003eaa <??ZbZclHandleConfigReport_7>:
 8003eaa:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003eac:	1c71      	adds	r1, r6, #1
 8003eae:	4288      	cmp	r0, r1
 8003eb0:	f0c0 808f 	bcc.w	8003fd2 <??ZbZclHandleConfigReport_19>

08003eb4 <??ZbZclHandleConfigReport_9>:
 8003eb4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003eb6:	5d80      	ldrb	r0, [r0, r6]
 8003eb8:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8003ebc:	1c76      	adds	r6, r6, #1
 8003ebe:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003ec0:	1cb1      	adds	r1, r6, #2
 8003ec2:	4288      	cmp	r0, r1
 8003ec4:	f0c0 8085 	bcc.w	8003fd2 <??ZbZclHandleConfigReport_19>

08003ec8 <??ZbZclHandleConfigReport_10>:
 8003ec8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003eca:	4430      	add	r0, r6
 8003ecc:	f7fd f8ce 	bl	800106c <pletoh16>
 8003ed0:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8003ed4:	1cb6      	adds	r6, r6, #2
 8003ed6:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003ed8:	1cb1      	adds	r1, r6, #2
 8003eda:	4288      	cmp	r0, r1
 8003edc:	d379      	bcc.n	8003fd2 <??ZbZclHandleConfigReport_19>

08003ede <??ZbZclHandleConfigReport_11>:
 8003ede:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003ee0:	4430      	add	r0, r6
 8003ee2:	f7fd f8c3 	bl	800106c <pletoh16>
 8003ee6:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8003eea:	1cb6      	adds	r6, r6, #2
 8003eec:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003eee:	1c71      	adds	r1, r6, #1
 8003ef0:	4288      	cmp	r0, r1
 8003ef2:	d36e      	bcc.n	8003fd2 <??ZbZclHandleConfigReport_19>

08003ef4 <??ZbZclHandleConfigReport_12>:
 8003ef4:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003ef8:	2848      	cmp	r0, #72	@ 0x48
 8003efa:	d00b      	beq.n	8003f14 <??ZbZclHandleConfigReport_13>
 8003efc:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f00:	284c      	cmp	r0, #76	@ 0x4c
 8003f02:	d007      	beq.n	8003f14 <??ZbZclHandleConfigReport_13>
 8003f04:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f08:	2850      	cmp	r0, #80	@ 0x50
 8003f0a:	d003      	beq.n	8003f14 <??ZbZclHandleConfigReport_13>
 8003f0c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f10:	2851      	cmp	r0, #81	@ 0x51
 8003f12:	d103      	bne.n	8003f1c <??ZbZclHandleConfigReport_14>

08003f14 <??ZbZclHandleConfigReport_13>:
 8003f14:	208c      	movs	r0, #140	@ 0x8c
 8003f16:	f88d 0000 	strb.w	r0, [sp]
 8003f1a:	e12e      	b.n	800417a <??ZbZclHandleConfigReport_15>

08003f1c <??ZbZclHandleConfigReport_14>:
 8003f1c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f20:	2838      	cmp	r0, #56	@ 0x38
 8003f22:	db29      	blt.n	8003f78 <??ZbZclHandleConfigReport_16>
 8003f24:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f28:	283b      	cmp	r0, #59	@ 0x3b
 8003f2a:	da25      	bge.n	8003f78 <??ZbZclHandleConfigReport_16>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8003f30:	1b92      	subs	r2, r2, r6
 8003f32:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003f34:	eb00 0106 	add.w	r1, r0, r6
 8003f38:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f3c:	f7fe f891 	bl	8002062 <ZbZclAttrParseLength>
 8003f40:	9002      	str	r0, [sp, #8]
 8003f42:	9802      	ldr	r0, [sp, #8]
 8003f44:	2800      	cmp	r0, #0
 8003f46:	d503      	bpl.n	8003f50 <??ZbZclHandleConfigReport_17>
 8003f48:	2085      	movs	r0, #133	@ 0x85
 8003f4a:	f88d 0000 	strb.w	r0, [sp]
 8003f4e:	e114      	b.n	800417a <??ZbZclHandleConfigReport_15>

08003f50 <??ZbZclHandleConfigReport_17>:
 8003f50:	466a      	mov	r2, sp
 8003f52:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003f54:	eb00 0106 	add.w	r1, r0, r6
 8003f58:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f5c:	f001 fa9d 	bl	800549a <ZbZclParseFloat>
 8003f60:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8003f64:	f89d 0000 	ldrb.w	r0, [sp]
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	f040 8106 	bne.w	800417a <??ZbZclHandleConfigReport_15>

08003f6e <??ZbZclHandleConfigReport_18>:
 8003f6e:	9802      	ldr	r0, [sp, #8]
 8003f70:	1986      	adds	r6, r0, r6
 8003f72:	2001      	movs	r0, #1
 8003f74:	4681      	mov	r9, r0
 8003f76:	e02c      	b.n	8003fd2 <??ZbZclHandleConfigReport_19>

08003f78 <??ZbZclHandleConfigReport_16>:
 8003f78:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f7c:	f7fe f922 	bl	80021c4 <ZbZclAttrIsAnalog>
 8003f80:	2800      	cmp	r0, #0
 8003f82:	d026      	beq.n	8003fd2 <??ZbZclHandleConfigReport_19>
 8003f84:	2300      	movs	r3, #0
 8003f86:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8003f88:	1b92      	subs	r2, r2, r6
 8003f8a:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003f8c:	eb00 0106 	add.w	r1, r0, r6
 8003f90:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f94:	f7fe f865 	bl	8002062 <ZbZclAttrParseLength>
 8003f98:	9002      	str	r0, [sp, #8]
 8003f9a:	9802      	ldr	r0, [sp, #8]
 8003f9c:	2800      	cmp	r0, #0
 8003f9e:	d503      	bpl.n	8003fa8 <??ZbZclHandleConfigReport_20>
 8003fa0:	2085      	movs	r0, #133	@ 0x85
 8003fa2:	f88d 0000 	strb.w	r0, [sp]
 8003fa6:	e0e8      	b.n	800417a <??ZbZclHandleConfigReport_15>

08003fa8 <??ZbZclHandleConfigReport_20>:
 8003fa8:	466a      	mov	r2, sp
 8003faa:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003fac:	eb00 0106 	add.w	r1, r0, r6
 8003fb0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003fb4:	f7fe fa04 	bl	80023c0 <ZbZclParseInteger>
 8003fb8:	f001 ffe4 	bl	8005f84 <__aeabi_l2d>
 8003fbc:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003fc0:	f89d 0000 	ldrb.w	r0, [sp]
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	f040 80d8 	bne.w	800417a <??ZbZclHandleConfigReport_15>

08003fca <??ZbZclHandleConfigReport_21>:
 8003fca:	9802      	ldr	r0, [sp, #8]
 8003fcc:	1986      	adds	r6, r0, r6
 8003fce:	2001      	movs	r0, #1
 8003fd0:	4681      	mov	r9, r0

08003fd2 <??ZbZclHandleConfigReport_19>:
 8003fd2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8003fd6:	0020      	movs	r0, r4
 8003fd8:	f7fd f917 	bl	800120a <ZbZclAttrFind>
 8003fdc:	4682      	mov	sl, r0
 8003fde:	f1ba 0f00 	cmp.w	sl, #0
 8003fe2:	d103      	bne.n	8003fec <??ZbZclHandleConfigReport_22>
 8003fe4:	2086      	movs	r0, #134	@ 0x86
 8003fe6:	f88d 0000 	strb.w	r0, [sp]
 8003fea:	e0c6      	b.n	800417a <??ZbZclHandleConfigReport_15>

08003fec <??ZbZclHandleConfigReport_22>:
 8003fec:	f8da 0008 	ldr.w	r0, [sl, #8]
 8003ff0:	8880      	ldrh	r0, [r0, #4]
 8003ff2:	0400      	lsls	r0, r0, #16
 8003ff4:	d503      	bpl.n	8003ffe <??ZbZclHandleConfigReport_23>
 8003ff6:	2086      	movs	r0, #134	@ 0x86
 8003ff8:	f88d 0000 	strb.w	r0, [sp]
 8003ffc:	e0bd      	b.n	800417a <??ZbZclHandleConfigReport_15>

08003ffe <??ZbZclHandleConfigReport_23>:
 8003ffe:	f8da 0008 	ldr.w	r0, [sl, #8]
 8004002:	7900      	ldrb	r0, [r0, #4]
 8004004:	0780      	lsls	r0, r0, #30
 8004006:	d403      	bmi.n	8004010 <??ZbZclHandleConfigReport_24>
 8004008:	208c      	movs	r0, #140	@ 0x8c
 800400a:	f88d 0000 	strb.w	r0, [sp]
 800400e:	e0b4      	b.n	800417a <??ZbZclHandleConfigReport_15>

08004010 <??ZbZclHandleConfigReport_24>:
 8004010:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8004014:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8004018:	4558      	cmp	r0, fp
 800401a:	d101      	bne.n	8004020 <??ZbZclHandleConfigReport_25>
 800401c:	2000      	movs	r0, #0
 800401e:	4681      	mov	r9, r0

08004020 <??ZbZclHandleConfigReport_25>:
 8004020:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8004024:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8004028:	0020      	movs	r0, r4
 800402a:	f7ff fc12 	bl	8003852 <zcl_reporting_find>
 800402e:	4680      	mov	r8, r0
 8004030:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8004034:	4558      	cmp	r0, fp
 8004036:	d11b      	bne.n	8004070 <??ZbZclHandleConfigReport_26>
 8004038:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 800403c:	2800      	cmp	r0, #0
 800403e:	d117      	bne.n	8004070 <??ZbZclHandleConfigReport_26>
 8004040:	2000      	movs	r0, #0
 8004042:	4681      	mov	r9, r0
 8004044:	f1b8 0f00 	cmp.w	r8, #0
 8004048:	d00d      	beq.n	8004066 <??ZbZclHandleConfigReport_27>
 800404a:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 800404e:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004052:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 8004056:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 800405a:	2200      	movs	r2, #0
 800405c:	a906      	add	r1, sp, #24
 800405e:	9801      	ldr	r0, [sp, #4]
 8004060:	f7ff fd84 	bl	8003b6c <zcl_reporting_reset_defaults>
 8004064:	e004      	b.n	8004070 <??ZbZclHandleConfigReport_26>

08004066 <??ZbZclHandleConfigReport_27>:
 8004066:	aa06      	add	r2, sp, #24
 8004068:	4651      	mov	r1, sl
 800406a:	9801      	ldr	r0, [sp, #4]
 800406c:	f7ff fd63 	bl	8003b36 <zcl_reporting_config_attr_defaults>

08004070 <??ZbZclHandleConfigReport_26>:
 8004070:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8004074:	f8da 1008 	ldr.w	r1, [sl, #8]
 8004078:	7889      	ldrb	r1, [r1, #2]
 800407a:	4288      	cmp	r0, r1
 800407c:	d003      	beq.n	8004086 <??ZbZclHandleConfigReport_28>
 800407e:	208d      	movs	r0, #141	@ 0x8d
 8004080:	f88d 0000 	strb.w	r0, [sp]
 8004084:	e079      	b.n	800417a <??ZbZclHandleConfigReport_15>

08004086 <??ZbZclHandleConfigReport_28>:
 8004086:	f1b8 0f00 	cmp.w	r8, #0
 800408a:	d021      	beq.n	80040d0 <??ZbZclHandleConfigReport_29>
 800408c:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8004090:	f8a8 0020 	strh.w	r0, [r8, #32]
 8004094:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8004098:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 800409c:	4648      	mov	r0, r9
 800409e:	b2c0      	uxtb	r0, r0
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d00c      	beq.n	80040be <??ZbZclHandleConfigReport_30>
 80040a4:	a806      	add	r0, sp, #24
 80040a6:	f7ff fdc3 	bl	8003c30 <zcl_reporting_epsilon_check>
 80040aa:	2800      	cmp	r0, #0
 80040ac:	d103      	bne.n	80040b6 <??ZbZclHandleConfigReport_31>
 80040ae:	2085      	movs	r0, #133	@ 0x85
 80040b0:	f88d 0000 	strb.w	r0, [sp]
 80040b4:	e061      	b.n	800417a <??ZbZclHandleConfigReport_15>

080040b6 <??ZbZclHandleConfigReport_31>:
 80040b6:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 80040ba:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

080040be <??ZbZclHandleConfigReport_30>:
 80040be:	9801      	ldr	r0, [sp, #4]
 80040c0:	f00f ffb8 	bl	8014034 <ZbZclUptime>
 80040c4:	f8c8 0010 	str.w	r0, [r8, #16]
 80040c8:	2001      	movs	r0, #1
 80040ca:	f88d 0002 	strb.w	r0, [sp, #2]
 80040ce:	e6b4      	b.n	8003e3a <??ZbZclHandleConfigReport_2>

080040d0 <??ZbZclHandleConfigReport_29>:
 80040d0:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80040d4:	4558      	cmp	r0, fp
 80040d6:	f43f aeb0 	beq.w	8003e3a <??ZbZclHandleConfigReport_2>

080040da <??ZbZclHandleConfigReport_32>:
 80040da:	9408      	str	r4, [sp, #32]
 80040dc:	4648      	mov	r0, r9
 80040de:	b2c0      	uxtb	r0, r0
 80040e0:	2800      	cmp	r0, #0
 80040e2:	d008      	beq.n	80040f6 <??ZbZclHandleConfigReport_33>
 80040e4:	a806      	add	r0, sp, #24
 80040e6:	f7ff fda3 	bl	8003c30 <zcl_reporting_epsilon_check>
 80040ea:	2800      	cmp	r0, #0
 80040ec:	d108      	bne.n	8004100 <??ZbZclHandleConfigReport_34>
 80040ee:	2085      	movs	r0, #133	@ 0x85
 80040f0:	f88d 0000 	strb.w	r0, [sp]
 80040f4:	e041      	b.n	800417a <??ZbZclHandleConfigReport_15>

080040f6 <??ZbZclHandleConfigReport_33>:
 80040f6:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 80040fa:	a806      	add	r0, sp, #24
 80040fc:	f7ff fd6b 	bl	8003bd6 <zcl_reporting_epsilon_default>

08004100 <??ZbZclHandleConfigReport_34>:
 8004100:	2008      	movs	r0, #8
 8004102:	9015      	str	r0, [sp, #84]	@ 0x54
 8004104:	a810      	add	r0, sp, #64	@ 0x40
 8004106:	9014      	str	r0, [sp, #80]	@ 0x50
 8004108:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 800410c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800410e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004110:	4658      	mov	r0, fp
 8004112:	f012 ffc0 	bl	8017096 <__aeabi_memcpy>
 8004116:	a906      	add	r1, sp, #24
 8004118:	0020      	movs	r0, r4
 800411a:	f7ff fbec 	bl	80038f6 <zcl_reporting_save_curr_val>
 800411e:	f88d 0000 	strb.w	r0, [sp]
 8004122:	f89d 0000 	ldrb.w	r0, [sp]
 8004126:	2800      	cmp	r0, #0
 8004128:	d127      	bne.n	800417a <??ZbZclHandleConfigReport_15>

0800412a <??ZbZclHandleConfigReport_35>:
 800412a:	a906      	add	r1, sp, #24
 800412c:	0020      	movs	r0, r4
 800412e:	f7ff fc55 	bl	80039dc <zcl_reporting_create_new>
 8004132:	2800      	cmp	r0, #0
 8004134:	d103      	bne.n	800413e <??ZbZclHandleConfigReport_36>
 8004136:	2189      	movs	r1, #137	@ 0x89
 8004138:	f88d 1000 	strb.w	r1, [sp]
 800413c:	e01d      	b.n	800417a <??ZbZclHandleConfigReport_15>

0800413e <??ZbZclHandleConfigReport_36>:
 800413e:	2101      	movs	r1, #1
 8004140:	f88d 1002 	strb.w	r1, [sp, #2]
 8004144:	e679      	b.n	8003e3a <??ZbZclHandleConfigReport_2>

08004146 <??ZbZclHandleConfigReport_6>:
 8004146:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800414a:	2801      	cmp	r0, #1
 800414c:	d10e      	bne.n	800416c <??ZbZclHandleConfigReport_37>
 800414e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8004150:	1cb1      	adds	r1, r6, #2
 8004152:	4288      	cmp	r0, r1
 8004154:	d206      	bcs.n	8004164 <??ZbZclHandleConfigReport_38>
 8004156:	2380      	movs	r3, #128	@ 0x80
 8004158:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800415a:	0029      	movs	r1, r5
 800415c:	0020      	movs	r0, r4
 800415e:	f010 f869 	bl	8014234 <ZbZclSendDefaultResponse>
 8004162:	e0a1      	b.n	80042a8 <??ZbZclHandleConfigReport_3>

08004164 <??ZbZclHandleConfigReport_38>:
 8004164:	208c      	movs	r0, #140	@ 0x8c
 8004166:	f88d 0000 	strb.w	r0, [sp]
 800416a:	e006      	b.n	800417a <??ZbZclHandleConfigReport_15>

0800416c <??ZbZclHandleConfigReport_37>:
 800416c:	2380      	movs	r3, #128	@ 0x80
 800416e:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8004170:	0029      	movs	r1, r5
 8004172:	0020      	movs	r0, r4
 8004174:	f010 f85e 	bl	8014234 <ZbZclSendDefaultResponse>
 8004178:	e096      	b.n	80042a8 <??ZbZclHandleConfigReport_3>

0800417a <??ZbZclHandleConfigReport_15>:
 800417a:	f89d 0000 	ldrb.w	r0, [sp]
 800417e:	f88d 0003 	strb.w	r0, [sp, #3]
 8004182:	1d38      	adds	r0, r7, #4
 8004184:	2837      	cmp	r0, #55	@ 0x37
 8004186:	d210      	bcs.n	80041aa <??ZbZclHandleConfigReport_4>

08004188 <??ZbZclHandleConfigReport_39>:
 8004188:	a83a      	add	r0, sp, #232	@ 0xe8
 800418a:	f89d 1000 	ldrb.w	r1, [sp]
 800418e:	55c1      	strb	r1, [r0, r7]
 8004190:	1c7f      	adds	r7, r7, #1
 8004192:	f89d 1001 	ldrb.w	r1, [sp, #1]
 8004196:	55c1      	strb	r1, [r0, r7]
 8004198:	1c7f      	adds	r7, r7, #1
 800419a:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800419e:	a83a      	add	r0, sp, #232	@ 0xe8
 80041a0:	4438      	add	r0, r7
 80041a2:	f7fc ffaf 	bl	8001104 <putle16>
 80041a6:	1cbf      	adds	r7, r7, #2
 80041a8:	e647      	b.n	8003e3a <??ZbZclHandleConfigReport_2>

080041aa <??ZbZclHandleConfigReport_4>:
 80041aa:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80041ae:	2800      	cmp	r0, #0
 80041b0:	d105      	bne.n	80041be <??ZbZclHandleConfigReport_40>
 80041b2:	2000      	movs	r0, #0
 80041b4:	2100      	movs	r1, #0
 80041b6:	aa3a      	add	r2, sp, #232	@ 0xe8
 80041b8:	5411      	strb	r1, [r2, r0]
 80041ba:	1c40      	adds	r0, r0, #1
 80041bc:	0007      	movs	r7, r0

080041be <??ZbZclHandleConfigReport_40>:
 80041be:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80041c2:	2800      	cmp	r0, #0
 80041c4:	d127      	bne.n	8004216 <??ZbZclHandleConfigReport_41>
 80041c6:	f05f 0920 	movs.w	r9, #32
 80041ca:	f05f 0800 	movs.w	r8, #0
 80041ce:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80041d2:	4642      	mov	r2, r8
 80041d4:	4649      	mov	r1, r9
 80041d6:	4650      	mov	r0, sl
 80041d8:	f001 fc9b 	bl	8005b12 <__aeabi_memset>
 80041dc:	9801      	ldr	r0, [sp, #4]
 80041de:	f00f fa19 	bl	8013614 <ZbExtendedAddress>
 80041e2:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80041e6:	8868      	ldrh	r0, [r5, #2]
 80041e8:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 80041ec:	89a0      	ldrh	r0, [r4, #12]
 80041ee:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 80041f2:	2003      	movs	r0, #3
 80041f4:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80041f8:	8a68      	ldrh	r0, [r5, #18]
 80041fa:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 80041fe:	8ae8      	ldrh	r0, [r5, #22]
 8004200:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 8004204:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 8004208:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 800420c:	aa30      	add	r2, sp, #192	@ 0xc0
 800420e:	a918      	add	r1, sp, #96	@ 0x60
 8004210:	9801      	ldr	r0, [sp, #4]
 8004212:	f00f fc4a 	bl	8013aaa <ZbApsmeBindReq>

08004216 <??ZbZclHandleConfigReport_41>:
 8004216:	2200      	movs	r2, #0
 8004218:	a924      	add	r1, sp, #144	@ 0x90
 800421a:	0020      	movs	r0, r4
 800421c:	f7fc f90f 	bl	800043e <ZbZclClusterInitApsdeReq>
 8004220:	a824      	add	r0, sp, #144	@ 0x90
 8004222:	f115 0110 	adds.w	r1, r5, #16
 8004226:	2210      	movs	r2, #16
 8004228:	f012 ff35 	bl	8017096 <__aeabi_memcpy>
 800422c:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8004230:	f7fc f89d 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8004234:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8004238:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 800423c:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8004240:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8004244:	2001      	movs	r0, #1
 8004246:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 800424a:	2000      	movs	r0, #0
 800424c:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 8004250:	a816      	add	r0, sp, #88	@ 0x58
 8004252:	9020      	str	r0, [sp, #128]	@ 0x80
 8004254:	a820      	add	r0, sp, #128	@ 0x80
 8004256:	9905      	ldr	r1, [sp, #20]
 8004258:	6041      	str	r1, [r0, #4]
 800425a:	a93a      	add	r1, sp, #232	@ 0xe8
 800425c:	6081      	str	r1, [r0, #8]
 800425e:	60c7      	str	r7, [r0, #12]
 8004260:	a820      	add	r0, sp, #128	@ 0x80
 8004262:	902a      	str	r0, [sp, #168]	@ 0xa8
 8004264:	2002      	movs	r0, #2
 8004266:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 800426a:	2300      	movs	r3, #0
 800426c:	2200      	movs	r2, #0
 800426e:	a924      	add	r1, sp, #144	@ 0x90
 8004270:	9801      	ldr	r0, [sp, #4]
 8004272:	f00f fae5 	bl	8013840 <ZbApsdeDataReqCallback>
 8004276:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800427a:	2800      	cmp	r0, #0
 800427c:	d014      	beq.n	80042a8 <??ZbZclHandleConfigReport_3>
 800427e:	2301      	movs	r3, #1
 8004280:	f10d 0201 	add.w	r2, sp, #1
 8004284:	f240 410c 	movw	r1, #1036	@ 0x40c
 8004288:	9801      	ldr	r0, [sp, #4]
 800428a:	f00f fea9 	bl	8013fe0 <ZbNwkGet>
 800428e:	2800      	cmp	r0, #0
 8004290:	d002      	beq.n	8004298 <??ZbZclHandleConfigReport_43>
 8004292:	2000      	movs	r0, #0
 8004294:	f88d 0001 	strb.w	r0, [sp, #1]

08004298 <??ZbZclHandleConfigReport_43>:
 8004298:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800429c:	2800      	cmp	r0, #0
 800429e:	d103      	bne.n	80042a8 <??ZbZclHandleConfigReport_3>
 80042a0:	21c8      	movs	r1, #200	@ 0xc8
 80042a2:	0020      	movs	r0, r4
 80042a4:	f7fe ff7f 	bl	80031a6 <zcl_report_kick>

080042a8 <??ZbZclHandleConfigReport_3>:
 80042a8:	b049      	add	sp, #292	@ 0x124
 80042aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080042ae <ZbZclHandleReadReport>:
 80042ae:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042b2:	b09a      	sub	sp, #104	@ 0x68
 80042b4:	4680      	mov	r8, r0
 80042b6:	4691      	mov	r9, r2
 80042b8:	f05f 0a00 	movs.w	sl, #0
 80042bc:	2300      	movs	r3, #0
 80042be:	a28d      	add	r2, pc, #564	@ (adr r2, 80044f4 <??DataTable10>)
 80042c0:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 80042c4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80042c8:	f010 f93c 	bl	8014544 <zb_heap_alloc>
 80042cc:	0007      	movs	r7, r0
 80042ce:	2f00      	cmp	r7, #0
 80042d0:	d106      	bne.n	80042e0 <??ZbZclHandleReadReport_0>
 80042d2:	2389      	movs	r3, #137	@ 0x89
 80042d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80042d6:	4649      	mov	r1, r9
 80042d8:	4640      	mov	r0, r8
 80042da:	f00f ffab 	bl	8014234 <ZbZclSendDefaultResponse>
 80042de:	e105      	b.n	80044ec <??ZbZclHandleReadReport_1>

080042e0 <??ZbZclHandleReadReport_0>:
 80042e0:	2408      	movs	r4, #8
 80042e2:	2500      	movs	r5, #0
 80042e4:	ae01      	add	r6, sp, #4
 80042e6:	002a      	movs	r2, r5
 80042e8:	0021      	movs	r1, r4
 80042ea:	0030      	movs	r0, r6
 80042ec:	f001 fc11 	bl	8005b12 <__aeabi_memset>
 80042f0:	2000      	movs	r0, #0
 80042f2:	f88d 0004 	strb.w	r0, [sp, #4]
 80042f6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80042f8:	7840      	ldrb	r0, [r0, #1]
 80042fa:	f88d 0005 	strb.w	r0, [sp, #5]
 80042fe:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004300:	7880      	ldrb	r0, [r0, #2]
 8004302:	2800      	cmp	r0, #0
 8004304:	d103      	bne.n	800430e <??ZbZclHandleReadReport_2>
 8004306:	2001      	movs	r0, #1
 8004308:	f88d 0006 	strb.w	r0, [sp, #6]
 800430c:	e002      	b.n	8004314 <??ZbZclHandleReadReport_3>

0800430e <??ZbZclHandleReadReport_2>:
 800430e:	2000      	movs	r0, #0
 8004310:	f88d 0006 	strb.w	r0, [sp, #6]

08004314 <??ZbZclHandleReadReport_3>:
 8004314:	2001      	movs	r0, #1
 8004316:	f88d 0007 	strb.w	r0, [sp, #7]
 800431a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800431c:	8880      	ldrh	r0, [r0, #4]
 800431e:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004322:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004324:	7980      	ldrb	r0, [r0, #6]
 8004326:	f88d 000a 	strb.w	r0, [sp, #10]
 800432a:	2009      	movs	r0, #9
 800432c:	f88d 000b 	strb.w	r0, [sp, #11]
 8004330:	2205      	movs	r2, #5
 8004332:	0039      	movs	r1, r7
 8004334:	a801      	add	r0, sp, #4
 8004336:	f7fc fde3 	bl	8000f00 <ZbZclAppendHeader>
 800433a:	0004      	movs	r4, r0
 800433c:	2c00      	cmp	r4, #0
 800433e:	d506      	bpl.n	800434e <??ZbZclHandleReadReport_4>
 8004340:	2380      	movs	r3, #128	@ 0x80
 8004342:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004344:	4649      	mov	r1, r9
 8004346:	4640      	mov	r0, r8
 8004348:	f00f ff74 	bl	8014234 <ZbZclSendDefaultResponse>
 800434c:	e0ce      	b.n	80044ec <??ZbZclHandleReadReport_1>

0800434e <??ZbZclHandleReadReport_4>:
 800434e:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8004352:	4582      	cmp	sl, r0
 8004354:	f080 80a1 	bcs.w	800449a <??ZbZclHandleReadReport_5>
 8004358:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 800435c:	f11a 0103 	adds.w	r1, sl, #3
 8004360:	4288      	cmp	r0, r1
 8004362:	d206      	bcs.n	8004372 <??ZbZclHandleReadReport_6>
 8004364:	2380      	movs	r3, #128	@ 0x80
 8004366:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004368:	4649      	mov	r1, r9
 800436a:	4640      	mov	r0, r8
 800436c:	f00f ff62 	bl	8014234 <ZbZclSendDefaultResponse>
 8004370:	e0bc      	b.n	80044ec <??ZbZclHandleReadReport_1>

08004372 <??ZbZclHandleReadReport_6>:
 8004372:	4650      	mov	r0, sl
 8004374:	f110 0a01 	adds.w	sl, r0, #1
 8004378:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 800437c:	5c08      	ldrb	r0, [r1, r0]
 800437e:	2800      	cmp	r0, #0
 8004380:	d003      	beq.n	800438a <??ZbZclHandleReadReport_7>
 8004382:	2001      	movs	r0, #1
 8004384:	f88d 0000 	strb.w	r0, [sp]
 8004388:	e002      	b.n	8004390 <??ZbZclHandleReadReport_8>

0800438a <??ZbZclHandleReadReport_7>:
 800438a:	2000      	movs	r0, #0
 800438c:	f88d 0000 	strb.w	r0, [sp]

08004390 <??ZbZclHandleReadReport_8>:
 8004390:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8004394:	4450      	add	r0, sl
 8004396:	f7fc fe69 	bl	800106c <pletoh16>
 800439a:	f8ad 0002 	strh.w	r0, [sp, #2]
 800439e:	f11a 0a02 	adds.w	sl, sl, #2
 80043a2:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80043a6:	4640      	mov	r0, r8
 80043a8:	f7fc ff2f 	bl	800120a <ZbZclAttrFind>
 80043ac:	0006      	movs	r6, r0
 80043ae:	2e00      	cmp	r6, #0
 80043b0:	d102      	bne.n	80043b8 <??ZbZclHandleReadReport_9>
 80043b2:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 80043b6:	e05c      	b.n	8004472 <??ZbZclHandleReadReport_10>

080043b8 <??ZbZclHandleReadReport_9>:
 80043b8:	68b0      	ldr	r0, [r6, #8]
 80043ba:	7900      	ldrb	r0, [r0, #4]
 80043bc:	0780      	lsls	r0, r0, #30
 80043be:	d402      	bmi.n	80043c6 <??ZbZclHandleReadReport_11>
 80043c0:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 80043c4:	e055      	b.n	8004472 <??ZbZclHandleReadReport_10>

080043c6 <??ZbZclHandleReadReport_11>:
 80043c6:	f89d 2000 	ldrb.w	r2, [sp]
 80043ca:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80043ce:	4640      	mov	r0, r8
 80043d0:	f7ff fa3f 	bl	8003852 <zcl_reporting_find>
 80043d4:	0005      	movs	r5, r0
 80043d6:	2d00      	cmp	r5, #0
 80043d8:	d102      	bne.n	80043e0 <??ZbZclHandleReadReport_12>
 80043da:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80043de:	e048      	b.n	8004472 <??ZbZclHandleReadReport_10>

080043e0 <??ZbZclHandleReadReport_12>:
 80043e0:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80043e2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80043e6:	4288      	cmp	r0, r1
 80043e8:	d102      	bne.n	80043f0 <??ZbZclHandleReadReport_13>
 80043ea:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80043ee:	e040      	b.n	8004472 <??ZbZclHandleReadReport_10>

080043f0 <??ZbZclHandleReadReport_13>:
 80043f0:	2020      	movs	r0, #32
 80043f2:	9005      	str	r0, [sp, #20]
 80043f4:	2000      	movs	r0, #0
 80043f6:	9004      	str	r0, [sp, #16]
 80043f8:	f10d 0b18 	add.w	fp, sp, #24
 80043fc:	9a04      	ldr	r2, [sp, #16]
 80043fe:	9905      	ldr	r1, [sp, #20]
 8004400:	4658      	mov	r0, fp
 8004402:	f001 fb86 	bl	8005b12 <__aeabi_memset>
 8004406:	f89d 0000 	ldrb.w	r0, [sp]
 800440a:	2800      	cmp	r0, #0
 800440c:	d003      	beq.n	8004416 <??ZbZclHandleReadReport_14>
 800440e:	2001      	movs	r0, #1
 8004410:	f88d 0018 	strb.w	r0, [sp, #24]
 8004414:	e002      	b.n	800441c <??ZbZclHandleReadReport_15>

08004416 <??ZbZclHandleReadReport_14>:
 8004416:	2000      	movs	r0, #0
 8004418:	f88d 0018 	strb.w	r0, [sp, #24]

0800441c <??ZbZclHandleReadReport_15>:
 800441c:	89a8      	ldrh	r0, [r5, #12]
 800441e:	f8ad 001a 	strh.w	r0, [sp, #26]
 8004422:	7ba8      	ldrb	r0, [r5, #14]
 8004424:	f88d 001c 	strb.w	r0, [sp, #28]
 8004428:	8c28      	ldrh	r0, [r5, #32]
 800442a:	f8ad 001e 	strh.w	r0, [sp, #30]
 800442e:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8004430:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004434:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 8004438:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 800443c:	2000      	movs	r0, #0
 800443e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8004442:	2000      	movs	r0, #0
 8004444:	5538      	strb	r0, [r7, r4]
 8004446:	1c64      	adds	r4, r4, #1
 8004448:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 800444c:	0020      	movs	r0, r4
 800444e:	b280      	uxth	r0, r0
 8004450:	1a12      	subs	r2, r2, r0
 8004452:	eb07 0104 	add.w	r1, r7, r4
 8004456:	a806      	add	r0, sp, #24
 8004458:	f000 f896 	bl	8004588 <zcl_append_report_config_record>
 800445c:	9003      	str	r0, [sp, #12]
 800445e:	9803      	ldr	r0, [sp, #12]
 8004460:	2800      	cmp	r0, #0
 8004462:	d503      	bpl.n	800446c <??ZbZclHandleReadReport_16>
 8004464:	1e64      	subs	r4, r4, #1
 8004466:	f05f 0b01 	movs.w	fp, #1
 800446a:	e002      	b.n	8004472 <??ZbZclHandleReadReport_10>

0800446c <??ZbZclHandleReadReport_16>:
 800446c:	9803      	ldr	r0, [sp, #12]
 800446e:	1904      	adds	r4, r0, r4
 8004470:	e76d      	b.n	800434e <??ZbZclHandleReadReport_4>

08004472 <??ZbZclHandleReadReport_10>:
 8004472:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 8004476:	1ce1      	adds	r1, r4, #3
 8004478:	4288      	cmp	r0, r1
 800447a:	d30e      	bcc.n	800449a <??ZbZclHandleReadReport_5>

0800447c <??ZbZclHandleReadReport_17>:
 800447c:	f807 b004 	strb.w	fp, [r7, r4]
 8004480:	1c64      	adds	r4, r4, #1
 8004482:	f89d 0000 	ldrb.w	r0, [sp]
 8004486:	5538      	strb	r0, [r7, r4]
 8004488:	1c64      	adds	r4, r4, #1
 800448a:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800448e:	eb07 0004 	add.w	r0, r7, r4
 8004492:	f7fc fe37 	bl	8001104 <putle16>
 8004496:	1ca4      	adds	r4, r4, #2
 8004498:	e759      	b.n	800434e <??ZbZclHandleReadReport_4>

0800449a <??ZbZclHandleReadReport_5>:
 800449a:	464a      	mov	r2, r9
 800449c:	a90e      	add	r1, sp, #56	@ 0x38
 800449e:	4640      	mov	r0, r8
 80044a0:	f7fb ffcd 	bl	800043e <ZbZclClusterInitApsdeReq>
 80044a4:	a80e      	add	r0, sp, #56	@ 0x38
 80044a6:	f119 0110 	adds.w	r1, r9, #16
 80044aa:	2210      	movs	r2, #16
 80044ac:	f012 fdf3 	bl	8017096 <__aeabi_memcpy>
 80044b0:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 80044b4:	f7fb ff5b 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80044b8:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80044bc:	2001      	movs	r0, #1
 80044be:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 80044c2:	2000      	movs	r0, #0
 80044c4:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 80044c8:	9714      	str	r7, [sp, #80]	@ 0x50
 80044ca:	0020      	movs	r0, r4
 80044cc:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80044d0:	2300      	movs	r3, #0
 80044d2:	2200      	movs	r2, #0
 80044d4:	a90e      	add	r1, sp, #56	@ 0x38
 80044d6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80044da:	f00f f9b1 	bl	8013840 <ZbApsdeDataReqCallback>
 80044de:	2300      	movs	r3, #0
 80044e0:	a204      	add	r2, pc, #16	@ (adr r2, 80044f4 <??DataTable10>)
 80044e2:	0039      	movs	r1, r7
 80044e4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80044e8:	f010 f83b 	bl	8014562 <zb_heap_free>

080044ec <??ZbZclHandleReadReport_1>:
 80044ec:	b01b      	add	sp, #108	@ 0x6c
 80044ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080044f4 <??DataTable10>:
 80044f4:	0000 0000                                   ....

080044f8 <ZbZclHandleReportAttr>:
 80044f8:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044fc:	0004      	movs	r4, r0
 80044fe:	000d      	movs	r5, r1
 8004500:	0016      	movs	r6, r2
 8004502:	f05f 0a00 	movs.w	sl, #0
 8004506:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8004508:	2800      	cmp	r0, #0
 800450a:	d03b      	beq.n	8004584 <??ZbZclHandleReportAttr_0>

0800450c <??ZbZclHandleReportAttr_1>:
 800450c:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800450e:	4651      	mov	r1, sl
 8004510:	b289      	uxth	r1, r1
 8004512:	1cc9      	adds	r1, r1, #3
 8004514:	4288      	cmp	r0, r1
 8004516:	d335      	bcc.n	8004584 <??ZbZclHandleReportAttr_0>

08004518 <??ZbZclHandleReportAttr_3>:
 8004518:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800451a:	4651      	mov	r1, sl
 800451c:	b289      	uxth	r1, r1
 800451e:	4408      	add	r0, r1
 8004520:	f7fc fda4 	bl	800106c <pletoh16>
 8004524:	0007      	movs	r7, r0
 8004526:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004528:	4651      	mov	r1, sl
 800452a:	b289      	uxth	r1, r1
 800452c:	4408      	add	r0, r1
 800452e:	7880      	ldrb	r0, [r0, #2]
 8004530:	4680      	mov	r8, r0
 8004532:	f11a 0a03 	adds.w	sl, sl, #3
 8004536:	2300      	movs	r3, #0
 8004538:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800453a:	4650      	mov	r0, sl
 800453c:	b280      	uxth	r0, r0
 800453e:	1a12      	subs	r2, r2, r0
 8004540:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004542:	4651      	mov	r1, sl
 8004544:	b289      	uxth	r1, r1
 8004546:	4401      	add	r1, r0
 8004548:	4640      	mov	r0, r8
 800454a:	b2c0      	uxtb	r0, r0
 800454c:	f7fd fd89 	bl	8002062 <ZbZclAttrParseLength>
 8004550:	4681      	mov	r9, r0
 8004552:	f1b9 0f00 	cmp.w	r9, #0
 8004556:	d415      	bmi.n	8004584 <??ZbZclHandleReportAttr_0>

08004558 <??ZbZclHandleReportAttr_4>:
 8004558:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800455a:	ebb0 000a 	subs.w	r0, r0, sl
 800455e:	b280      	uxth	r0, r0
 8004560:	9001      	str	r0, [sp, #4]
 8004562:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004564:	4651      	mov	r1, sl
 8004566:	b289      	uxth	r1, r1
 8004568:	4408      	add	r0, r1
 800456a:	9000      	str	r0, [sp, #0]
 800456c:	4643      	mov	r3, r8
 800456e:	b2db      	uxtb	r3, r3
 8004570:	003a      	movs	r2, r7
 8004572:	b292      	uxth	r2, r2
 8004574:	0031      	movs	r1, r6
 8004576:	0020      	movs	r0, r4
 8004578:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 800457c:	47e0      	blx	ip
 800457e:	eb19 0a0a 	adds.w	sl, r9, sl
 8004582:	e7c3      	b.n	800450c <??ZbZclHandleReportAttr_1>

08004584 <??ZbZclHandleReportAttr_0>:
 8004584:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

08004588 <zcl_append_report_config_record>:
 8004588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800458c:	0005      	movs	r5, r0
 800458e:	000e      	movs	r6, r1
 8004590:	4690      	mov	r8, r2
 8004592:	2700      	movs	r7, #0
 8004594:	7828      	ldrb	r0, [r5, #0]
 8004596:	2800      	cmp	r0, #0
 8004598:	d003      	beq.n	80045a2 <??zcl_append_report_config_record_0>
 800459a:	2801      	cmp	r0, #1
 800459c:	f000 80f4 	beq.w	8004788 <??zcl_append_report_config_record_1>
 80045a0:	e108      	b.n	80047b4 <??zcl_append_report_config_record_2>

080045a2 <??zcl_append_report_config_record_0>:
 80045a2:	7928      	ldrb	r0, [r5, #4]
 80045a4:	f001 fa9e 	bl	8005ae4 <ZbZclAttrIsFloat>
 80045a8:	2800      	cmp	r0, #0
 80045aa:	d002      	beq.n	80045b2 <??zcl_append_report_config_record_3>
 80045ac:	2001      	movs	r0, #1
 80045ae:	4681      	mov	r9, r0
 80045b0:	e009      	b.n	80045c6 <??zcl_append_report_config_record_4>

080045b2 <??zcl_append_report_config_record_3>:
 80045b2:	7928      	ldrb	r0, [r5, #4]
 80045b4:	f7fd fe06 	bl	80021c4 <ZbZclAttrIsAnalog>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d002      	beq.n	80045c2 <??zcl_append_report_config_record_5>
 80045bc:	2001      	movs	r0, #1
 80045be:	4681      	mov	r9, r0
 80045c0:	e001      	b.n	80045c6 <??zcl_append_report_config_record_4>

080045c2 <??zcl_append_report_config_record_5>:
 80045c2:	2000      	movs	r0, #0
 80045c4:	4681      	mov	r9, r0

080045c6 <??zcl_append_report_config_record_4>:
 80045c6:	f1b8 0f08 	cmp.w	r8, #8
 80045ca:	d202      	bcs.n	80045d2 <??zcl_append_report_config_record_6>
 80045cc:	f05f 30ff 	movs.w	r0, #4294967295
 80045d0:	e0f3      	b.n	80047ba <??zcl_append_report_config_record_7>

080045d2 <??zcl_append_report_config_record_6>:
 80045d2:	7828      	ldrb	r0, [r5, #0]
 80045d4:	55f0      	strb	r0, [r6, r7]
 80045d6:	1c7f      	adds	r7, r7, #1
 80045d8:	8869      	ldrh	r1, [r5, #2]
 80045da:	eb06 0007 	add.w	r0, r6, r7
 80045de:	f7fc fd91 	bl	8001104 <putle16>
 80045e2:	1cbf      	adds	r7, r7, #2
 80045e4:	7928      	ldrb	r0, [r5, #4]
 80045e6:	55f0      	strb	r0, [r6, r7]
 80045e8:	1c7f      	adds	r7, r7, #1
 80045ea:	88e9      	ldrh	r1, [r5, #6]
 80045ec:	eb06 0007 	add.w	r0, r6, r7
 80045f0:	f7fc fd88 	bl	8001104 <putle16>
 80045f4:	1cbf      	adds	r7, r7, #2
 80045f6:	8929      	ldrh	r1, [r5, #8]
 80045f8:	eb06 0007 	add.w	r0, r6, r7
 80045fc:	f7fc fd82 	bl	8001104 <putle16>
 8004600:	1cbf      	adds	r7, r7, #2
 8004602:	4648      	mov	r0, r9
 8004604:	b2c0      	uxtb	r0, r0
 8004606:	2800      	cmp	r0, #0
 8004608:	f000 80bd 	beq.w	8004786 <??zcl_append_report_config_record_8>
 800460c:	7928      	ldrb	r0, [r5, #4]
 800460e:	f7fd fc9d 	bl	8001f4c <ZbZclAttrTypeLength>
 8004612:	0004      	movs	r4, r0
 8004614:	2c00      	cmp	r4, #0
 8004616:	d101      	bne.n	800461c <??zcl_append_report_config_record_9>
 8004618:	2001      	movs	r0, #1
 800461a:	e0ce      	b.n	80047ba <??zcl_append_report_config_record_7>

0800461c <??zcl_append_report_config_record_9>:
 800461c:	2c01      	cmp	r4, #1
 800461e:	d00e      	beq.n	800463e <??zcl_append_report_config_record_10>
 8004620:	f0c0 80af 	bcc.w	8004782 <??zcl_append_report_config_record_11>
 8004624:	2c03      	cmp	r4, #3
 8004626:	d02f      	beq.n	8004688 <??zcl_append_report_config_record_12>
 8004628:	d319      	bcc.n	800465e <??zcl_append_report_config_record_13>
 800462a:	2c05      	cmp	r4, #5
 800462c:	d054      	beq.n	80046d8 <??zcl_append_report_config_record_14>
 800462e:	d33f      	bcc.n	80046b0 <??zcl_append_report_config_record_15>
 8004630:	2c07      	cmp	r4, #7
 8004632:	d07c      	beq.n	800472e <??zcl_append_report_config_record_16>
 8004634:	d365      	bcc.n	8004702 <??zcl_append_report_config_record_17>
 8004636:	2c08      	cmp	r4, #8
 8004638:	f000 808e 	beq.w	8004758 <??zcl_append_report_config_record_18>
 800463c:	e0a1      	b.n	8004782 <??zcl_append_report_config_record_11>

0800463e <??zcl_append_report_config_record_10>:
 800463e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004642:	2201      	movs	r2, #1
 8004644:	4b5f      	ldr	r3, [pc, #380]	@ (80047c4 <??DataTable11_1>)
 8004646:	f001 ff23 	bl	8006490 <__aeabi_cdrcmple>
 800464a:	d801      	bhi.n	8004650 <??zcl_append_report_config_record_19>
 800464c:	2001      	movs	r0, #1
 800464e:	e0b4      	b.n	80047ba <??zcl_append_report_config_record_7>

08004650 <??zcl_append_report_config_record_19>:
 8004650:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004654:	f001 ff5e 	bl	8006514 <__aeabi_d2iz>
 8004658:	55f0      	strb	r0, [r6, r7]
 800465a:	1c7f      	adds	r7, r7, #1
 800465c:	e093      	b.n	8004786 <??zcl_append_report_config_record_8>

0800465e <??zcl_append_report_config_record_13>:
 800465e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004662:	2201      	movs	r2, #1
 8004664:	4b58      	ldr	r3, [pc, #352]	@ (80047c8 <??DataTable11_2>)
 8004666:	f001 ff13 	bl	8006490 <__aeabi_cdrcmple>
 800466a:	d801      	bhi.n	8004670 <??zcl_append_report_config_record_20>
 800466c:	2001      	movs	r0, #1
 800466e:	e0a4      	b.n	80047ba <??zcl_append_report_config_record_7>

08004670 <??zcl_append_report_config_record_20>:
 8004670:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004674:	f001 ff4e 	bl	8006514 <__aeabi_d2iz>
 8004678:	0001      	movs	r1, r0
 800467a:	b289      	uxth	r1, r1
 800467c:	eb06 0007 	add.w	r0, r6, r7
 8004680:	f7fc fd40 	bl	8001104 <putle16>
 8004684:	1cbf      	adds	r7, r7, #2
 8004686:	e07e      	b.n	8004786 <??zcl_append_report_config_record_8>

08004688 <??zcl_append_report_config_record_12>:
 8004688:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800468c:	4a4f      	ldr	r2, [pc, #316]	@ (80047cc <??DataTable11_3>)
 800468e:	4b50      	ldr	r3, [pc, #320]	@ (80047d0 <??DataTable11_4>)
 8004690:	f001 fefe 	bl	8006490 <__aeabi_cdrcmple>
 8004694:	d801      	bhi.n	800469a <??zcl_append_report_config_record_21>
 8004696:	2001      	movs	r0, #1
 8004698:	e08f      	b.n	80047ba <??zcl_append_report_config_record_7>

0800469a <??zcl_append_report_config_record_21>:
 800469a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800469e:	f001 ff61 	bl	8006564 <__aeabi_d2uiz>
 80046a2:	0001      	movs	r1, r0
 80046a4:	eb06 0007 	add.w	r0, r6, r7
 80046a8:	f7fc fd32 	bl	8001110 <putle24>
 80046ac:	1cff      	adds	r7, r7, #3
 80046ae:	e06a      	b.n	8004786 <??zcl_append_report_config_record_8>

080046b0 <??zcl_append_report_config_record_15>:
 80046b0:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80046b4:	4a47      	ldr	r2, [pc, #284]	@ (80047d4 <??DataTable11_5>)
 80046b6:	4b48      	ldr	r3, [pc, #288]	@ (80047d8 <??DataTable11_6>)
 80046b8:	f001 feea 	bl	8006490 <__aeabi_cdrcmple>
 80046bc:	d801      	bhi.n	80046c2 <??zcl_append_report_config_record_22>
 80046be:	2001      	movs	r0, #1
 80046c0:	e07b      	b.n	80047ba <??zcl_append_report_config_record_7>

080046c2 <??zcl_append_report_config_record_22>:
 80046c2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80046c6:	f001 ff4d 	bl	8006564 <__aeabi_d2uiz>
 80046ca:	0001      	movs	r1, r0
 80046cc:	eb06 0007 	add.w	r0, r6, r7
 80046d0:	f7fc fd2a 	bl	8001128 <putle32>
 80046d4:	1d3f      	adds	r7, r7, #4
 80046d6:	e056      	b.n	8004786 <??zcl_append_report_config_record_8>

080046d8 <??zcl_append_report_config_record_14>:
 80046d8:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80046dc:	4a3f      	ldr	r2, [pc, #252]	@ (80047dc <??DataTable11_7>)
 80046de:	4b40      	ldr	r3, [pc, #256]	@ (80047e0 <??DataTable11_8>)
 80046e0:	f001 fed6 	bl	8006490 <__aeabi_cdrcmple>
 80046e4:	d801      	bhi.n	80046ea <??zcl_append_report_config_record_23>
 80046e6:	2001      	movs	r0, #1
 80046e8:	e067      	b.n	80047ba <??zcl_append_report_config_record_7>

080046ea <??zcl_append_report_config_record_23>:
 80046ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80046ee:	f001 ff89 	bl	8006604 <__aeabi_d2ulz>
 80046f2:	0002      	movs	r2, r0
 80046f4:	000b      	movs	r3, r1
 80046f6:	eb06 0007 	add.w	r0, r6, r7
 80046fa:	f7fc fd20 	bl	800113e <putle40>
 80046fe:	1d7f      	adds	r7, r7, #5
 8004700:	e041      	b.n	8004786 <??zcl_append_report_config_record_8>

08004702 <??zcl_append_report_config_record_17>:
 8004702:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004706:	f07f 021e 	mvns.w	r2, #30
 800470a:	4b36      	ldr	r3, [pc, #216]	@ (80047e4 <??DataTable11_9>)
 800470c:	f001 fec0 	bl	8006490 <__aeabi_cdrcmple>
 8004710:	d801      	bhi.n	8004716 <??zcl_append_report_config_record_24>
 8004712:	2001      	movs	r0, #1
 8004714:	e051      	b.n	80047ba <??zcl_append_report_config_record_7>

08004716 <??zcl_append_report_config_record_24>:
 8004716:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800471a:	f001 ff73 	bl	8006604 <__aeabi_d2ulz>
 800471e:	0002      	movs	r2, r0
 8004720:	000b      	movs	r3, r1
 8004722:	eb06 0007 	add.w	r0, r6, r7
 8004726:	f7fc fd14 	bl	8001152 <putle48>
 800472a:	1dbf      	adds	r7, r7, #6
 800472c:	e02b      	b.n	8004786 <??zcl_append_report_config_record_8>

0800472e <??zcl_append_report_config_record_16>:
 800472e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004732:	2201      	movs	r2, #1
 8004734:	4b2c      	ldr	r3, [pc, #176]	@ (80047e8 <??DataTable11_10>)
 8004736:	f001 feab 	bl	8006490 <__aeabi_cdrcmple>
 800473a:	d801      	bhi.n	8004740 <??zcl_append_report_config_record_25>
 800473c:	2001      	movs	r0, #1
 800473e:	e03c      	b.n	80047ba <??zcl_append_report_config_record_7>

08004740 <??zcl_append_report_config_record_25>:
 8004740:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004744:	f001 ff5e 	bl	8006604 <__aeabi_d2ulz>
 8004748:	0002      	movs	r2, r0
 800474a:	000b      	movs	r3, r1
 800474c:	eb06 0007 	add.w	r0, r6, r7
 8004750:	f7fc fd0e 	bl	8001170 <putle56>
 8004754:	1dff      	adds	r7, r7, #7
 8004756:	e016      	b.n	8004786 <??zcl_append_report_config_record_8>

08004758 <??zcl_append_report_config_record_18>:
 8004758:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800475c:	2201      	movs	r2, #1
 800475e:	4b23      	ldr	r3, [pc, #140]	@ (80047ec <??DataTable11_11>)
 8004760:	f001 fe96 	bl	8006490 <__aeabi_cdrcmple>
 8004764:	d801      	bhi.n	800476a <??zcl_append_report_config_record_26>
 8004766:	2001      	movs	r0, #1
 8004768:	e027      	b.n	80047ba <??zcl_append_report_config_record_7>

0800476a <??zcl_append_report_config_record_26>:
 800476a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800476e:	f001 ff49 	bl	8006604 <__aeabi_d2ulz>
 8004772:	0002      	movs	r2, r0
 8004774:	000b      	movs	r3, r1
 8004776:	eb06 0007 	add.w	r0, r6, r7
 800477a:	f7fc fd08 	bl	800118e <putle64>
 800477e:	3708      	adds	r7, #8
 8004780:	e001      	b.n	8004786 <??zcl_append_report_config_record_8>

08004782 <??zcl_append_report_config_record_11>:
 8004782:	2001      	movs	r0, #1
 8004784:	e019      	b.n	80047ba <??zcl_append_report_config_record_7>

08004786 <??zcl_append_report_config_record_8>:
 8004786:	e017      	b.n	80047b8 <??zcl_append_report_config_record_27>

08004788 <??zcl_append_report_config_record_1>:
 8004788:	f1b8 0f08 	cmp.w	r8, #8
 800478c:	d202      	bcs.n	8004794 <??zcl_append_report_config_record_28>
 800478e:	f05f 30ff 	movs.w	r0, #4294967295
 8004792:	e012      	b.n	80047ba <??zcl_append_report_config_record_7>

08004794 <??zcl_append_report_config_record_28>:
 8004794:	7828      	ldrb	r0, [r5, #0]
 8004796:	55f0      	strb	r0, [r6, r7]
 8004798:	1c7f      	adds	r7, r7, #1
 800479a:	8869      	ldrh	r1, [r5, #2]
 800479c:	eb06 0007 	add.w	r0, r6, r7
 80047a0:	f7fc fcb0 	bl	8001104 <putle16>
 80047a4:	1cbf      	adds	r7, r7, #2
 80047a6:	8b29      	ldrh	r1, [r5, #24]
 80047a8:	eb06 0007 	add.w	r0, r6, r7
 80047ac:	f7fc fcaa 	bl	8001104 <putle16>
 80047b0:	1cbf      	adds	r7, r7, #2
 80047b2:	e001      	b.n	80047b8 <??zcl_append_report_config_record_27>

080047b4 <??zcl_append_report_config_record_2>:
 80047b4:	2001      	movs	r0, #1
 80047b6:	e000      	b.n	80047ba <??zcl_append_report_config_record_7>

080047b8 <??zcl_append_report_config_record_27>:
 80047b8:	0038      	movs	r0, r7

080047ba <??zcl_append_report_config_record_7>:
 80047ba:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080047c0 <??DataTable11>:
 80047c0:	0000 3ff0                                   ...?

080047c4 <??DataTable11_1>:
 80047c4:	e000 406f                                   ..o@

080047c8 <??DataTable11_2>:
 80047c8:	ffe0 40ef                                   ...@

080047cc <??DataTable11_3>:
 80047cc:	0001 e000                                   ....

080047d0 <??DataTable11_4>:
 80047d0:	ffff 416f                                   ..oA

080047d4 <??DataTable11_5>:
 80047d4:	0001 ffe0                                   ....

080047d8 <??DataTable11_6>:
 80047d8:	ffff 41ef                                   ...A

080047dc <??DataTable11_7>:
 80047dc:	e001 ffff                                   ....

080047e0 <??DataTable11_8>:
 80047e0:	ffff 426f                                   ..oB

080047e4 <??DataTable11_9>:
 80047e4:	ffff 42ef                                   ...B

080047e8 <??DataTable11_10>:
 80047e8:	0000 4370                                   ..pC

080047ec <??DataTable11_11>:
 80047ec:	0000 43f0                                   ...C

080047f0 <ZbZclAttrReportConfigReq>:
 80047f0:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	b09b      	sub	sp, #108	@ 0x6c
 80047f6:	0004      	movs	r4, r0
 80047f8:	000d      	movs	r5, r1
 80047fa:	001e      	movs	r6, r3
 80047fc:	2700      	movs	r7, #0
 80047fe:	7c28      	ldrb	r0, [r5, #16]
 8004800:	2800      	cmp	r0, #0
 8004802:	d002      	beq.n	800480a <??ZbZclAttrReportConfigReq_0>
 8004804:	7c28      	ldrb	r0, [r5, #16]
 8004806:	2807      	cmp	r0, #7
 8004808:	d301      	bcc.n	800480e <??ZbZclAttrReportConfigReq_1>

0800480a <??ZbZclAttrReportConfigReq_0>:
 800480a:	2001      	movs	r0, #1
 800480c:	e059      	b.n	80048c2 <??ZbZclAttrReportConfigReq_2>

0800480e <??ZbZclAttrReportConfigReq_1>:
 800480e:	f05f 0800 	movs.w	r8, #0

08004812 <??ZbZclAttrReportConfigReq_3>:
 8004812:	7c28      	ldrb	r0, [r5, #16]
 8004814:	4580      	cmp	r8, r0
 8004816:	d215      	bcs.n	8004844 <??ZbZclAttrReportConfigReq_4>
 8004818:	ea5f 1048 	movs.w	r0, r8, lsl #5
 800481c:	4428      	add	r0, r5
 800481e:	f110 0918 	adds.w	r9, r0, #24
 8004822:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 8004826:	a80c      	add	r0, sp, #48	@ 0x30
 8004828:	eb00 0107 	add.w	r1, r0, r7
 800482c:	4648      	mov	r0, r9
 800482e:	f7ff feab 	bl	8004588 <zcl_append_report_config_record>
 8004832:	0001      	movs	r1, r0
 8004834:	2901      	cmp	r1, #1
 8004836:	da01      	bge.n	800483c <??ZbZclAttrReportConfigReq_5>
 8004838:	2001      	movs	r0, #1
 800483a:	e042      	b.n	80048c2 <??ZbZclAttrReportConfigReq_2>

0800483c <??ZbZclAttrReportConfigReq_5>:
 800483c:	19cf      	adds	r7, r1, r7
 800483e:	f118 0801 	adds.w	r8, r8, #1
 8004842:	e7e6      	b.n	8004812 <??ZbZclAttrReportConfigReq_3>

08004844 <??ZbZclAttrReportConfigReq_4>:
 8004844:	f05f 0930 	movs.w	r9, #48	@ 0x30
 8004848:	f05f 0a00 	movs.w	sl, #0
 800484c:	46eb      	mov	fp, sp
 800484e:	4652      	mov	r2, sl
 8004850:	4649      	mov	r1, r9
 8004852:	4658      	mov	r0, fp
 8004854:	f001 f95d 	bl	8005b12 <__aeabi_memset>
 8004858:	2000      	movs	r0, #0
 800485a:	f88d 001a 	strb.w	r0, [sp, #26]
 800485e:	8a20      	ldrh	r0, [r4, #16]
 8004860:	2800      	cmp	r0, #0
 8004862:	d001      	beq.n	8004868 <??ZbZclAttrReportConfigReq_6>
 8004864:	2001      	movs	r0, #1
 8004866:	e000      	b.n	800486a <??ZbZclAttrReportConfigReq_7>

08004868 <??ZbZclAttrReportConfigReq_6>:
 8004868:	2000      	movs	r0, #0

0800486a <??ZbZclAttrReportConfigReq_7>:
 800486a:	f88d 001b 	strb.w	r0, [sp, #27]
 800486e:	8a20      	ldrh	r0, [r4, #16]
 8004870:	f8ad 001e 	strh.w	r0, [sp, #30]
 8004874:	2006      	movs	r0, #6
 8004876:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800487a:	f00f fc57 	bl	801412c <ZbZclGetNextSeqnum>
 800487e:	f88d 0020 	strb.w	r0, [sp, #32]
 8004882:	4668      	mov	r0, sp
 8004884:	0029      	movs	r1, r5
 8004886:	2210      	movs	r2, #16
 8004888:	f012 fc05 	bl	8017096 <__aeabi_memcpy>
 800488c:	8aa0      	ldrh	r0, [r4, #20]
 800488e:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004892:	89a0      	ldrh	r0, [r4, #12]
 8004894:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004898:	7ba0      	ldrb	r0, [r4, #14]
 800489a:	f8ad 0014 	strh.w	r0, [sp, #20]
 800489e:	8ae0      	ldrh	r0, [r4, #22]
 80048a0:	f8ad 0016 	strh.w	r0, [sp, #22]
 80048a4:	7e20      	ldrb	r0, [r4, #24]
 80048a6:	f88d 0018 	strb.w	r0, [sp, #24]
 80048aa:	7e60      	ldrb	r0, [r4, #25]
 80048ac:	f88d 0019 	strb.w	r0, [sp, #25]
 80048b0:	a80c      	add	r0, sp, #48	@ 0x30
 80048b2:	9009      	str	r0, [sp, #36]	@ 0x24
 80048b4:	970a      	str	r7, [sp, #40]	@ 0x28
 80048b6:	0033      	movs	r3, r6
 80048b8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80048ba:	4669      	mov	r1, sp
 80048bc:	68a0      	ldr	r0, [r4, #8]
 80048be:	f00f fc60 	bl	8014182 <ZbZclCommandReq>

080048c2 <??ZbZclAttrReportConfigReq_2>:
 80048c2:	b01d      	add	sp, #116	@ 0x74
 80048c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048c8 <ZbZclAttrReportReadReq>:
 80048c8:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048cc:	b09b      	sub	sp, #108	@ 0x6c
 80048ce:	0005      	movs	r5, r0
 80048d0:	000e      	movs	r6, r1
 80048d2:	001f      	movs	r7, r3
 80048d4:	2400      	movs	r4, #0
 80048d6:	7c30      	ldrb	r0, [r6, #16]
 80048d8:	2800      	cmp	r0, #0
 80048da:	d002      	beq.n	80048e2 <??ZbZclAttrReportReadReq_0>
 80048dc:	7c30      	ldrb	r0, [r6, #16]
 80048de:	2807      	cmp	r0, #7
 80048e0:	d301      	bcc.n	80048e6 <??ZbZclAttrReportReadReq_1>

080048e2 <??ZbZclAttrReportReadReq_0>:
 80048e2:	2001      	movs	r0, #1
 80048e4:	e050      	b.n	8004988 <??ZbZclAttrReportReadReq_2>

080048e6 <??ZbZclAttrReportReadReq_1>:
 80048e6:	f05f 0800 	movs.w	r8, #0

080048ea <??ZbZclAttrReportReadReq_3>:
 80048ea:	7c30      	ldrb	r0, [r6, #16]
 80048ec:	4580      	cmp	r8, r0
 80048ee:	d217      	bcs.n	8004920 <??ZbZclAttrReportReadReq_4>
 80048f0:	1ce0      	adds	r0, r4, #3
 80048f2:	283a      	cmp	r0, #58	@ 0x3a
 80048f4:	d301      	bcc.n	80048fa <??ZbZclAttrReportReadReq_5>
 80048f6:	2001      	movs	r0, #1
 80048f8:	e046      	b.n	8004988 <??ZbZclAttrReportReadReq_2>

080048fa <??ZbZclAttrReportReadReq_5>:
 80048fa:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80048fe:	4430      	add	r0, r6
 8004900:	7e00      	ldrb	r0, [r0, #24]
 8004902:	a90c      	add	r1, sp, #48	@ 0x30
 8004904:	5508      	strb	r0, [r1, r4]
 8004906:	1c64      	adds	r4, r4, #1
 8004908:	ea5f 1048 	movs.w	r0, r8, lsl #5
 800490c:	4430      	add	r0, r6
 800490e:	8b41      	ldrh	r1, [r0, #26]
 8004910:	a80c      	add	r0, sp, #48	@ 0x30
 8004912:	4420      	add	r0, r4
 8004914:	f7fc fbf6 	bl	8001104 <putle16>
 8004918:	1ca4      	adds	r4, r4, #2
 800491a:	f118 0801 	adds.w	r8, r8, #1
 800491e:	e7e4      	b.n	80048ea <??ZbZclAttrReportReadReq_3>

08004920 <??ZbZclAttrReportReadReq_4>:
 8004920:	f05f 0930 	movs.w	r9, #48	@ 0x30
 8004924:	f05f 0a00 	movs.w	sl, #0
 8004928:	46eb      	mov	fp, sp
 800492a:	4652      	mov	r2, sl
 800492c:	4649      	mov	r1, r9
 800492e:	4658      	mov	r0, fp
 8004930:	f001 f8ef 	bl	8005b12 <__aeabi_memset>
 8004934:	2000      	movs	r0, #0
 8004936:	f88d 001a 	strb.w	r0, [sp, #26]
 800493a:	2008      	movs	r0, #8
 800493c:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004940:	f00f fbf4 	bl	801412c <ZbZclGetNextSeqnum>
 8004944:	f88d 0020 	strb.w	r0, [sp, #32]
 8004948:	4668      	mov	r0, sp
 800494a:	0031      	movs	r1, r6
 800494c:	2210      	movs	r2, #16
 800494e:	f012 fba2 	bl	8017096 <__aeabi_memcpy>
 8004952:	8aa8      	ldrh	r0, [r5, #20]
 8004954:	f8ad 0010 	strh.w	r0, [sp, #16]
 8004958:	89a8      	ldrh	r0, [r5, #12]
 800495a:	f8ad 0012 	strh.w	r0, [sp, #18]
 800495e:	7ba8      	ldrb	r0, [r5, #14]
 8004960:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004964:	8ae8      	ldrh	r0, [r5, #22]
 8004966:	f8ad 0016 	strh.w	r0, [sp, #22]
 800496a:	7e28      	ldrb	r0, [r5, #24]
 800496c:	f88d 0018 	strb.w	r0, [sp, #24]
 8004970:	7e68      	ldrb	r0, [r5, #25]
 8004972:	f88d 0019 	strb.w	r0, [sp, #25]
 8004976:	a80c      	add	r0, sp, #48	@ 0x30
 8004978:	9009      	str	r0, [sp, #36]	@ 0x24
 800497a:	940a      	str	r4, [sp, #40]	@ 0x28
 800497c:	003b      	movs	r3, r7
 800497e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004980:	4669      	mov	r1, sp
 8004982:	68a8      	ldr	r0, [r5, #8]
 8004984:	f00f fbfd 	bl	8014182 <ZbZclCommandReq>

08004988 <??ZbZclAttrReportReadReq_2>:
 8004988:	b01d      	add	sp, #116	@ 0x74
 800498a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800498e <ZbZclAttrReportConfigDefault>:
 800498e:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004992:	0007      	movs	r7, r0
 8004994:	4688      	mov	r8, r1
 8004996:	4691      	mov	r9, r2
 8004998:	469a      	mov	sl, r3
 800499a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800499c:	4641      	mov	r1, r8
 800499e:	b289      	uxth	r1, r1
 80049a0:	0038      	movs	r0, r7
 80049a2:	f7fc fc32 	bl	800120a <ZbZclAttrFind>
 80049a6:	0005      	movs	r5, r0
 80049a8:	2d00      	cmp	r5, #0
 80049aa:	d101      	bne.n	80049b0 <??ZbZclAttrReportConfigDefault_0>
 80049ac:	2086      	movs	r0, #134	@ 0x86
 80049ae:	e02b      	b.n	8004a08 <??ZbZclAttrReportConfigDefault_1>

080049b0 <??ZbZclAttrReportConfigDefault_0>:
 80049b0:	68a8      	ldr	r0, [r5, #8]
 80049b2:	7900      	ldrb	r0, [r0, #4]
 80049b4:	0780      	lsls	r0, r0, #30
 80049b6:	d401      	bmi.n	80049bc <??ZbZclAttrReportConfigDefault_2>
 80049b8:	208c      	movs	r0, #140	@ 0x8c
 80049ba:	e025      	b.n	8004a08 <??ZbZclAttrReportConfigDefault_1>

080049bc <??ZbZclAttrReportConfigDefault_2>:
 80049bc:	2200      	movs	r2, #0
 80049be:	4641      	mov	r1, r8
 80049c0:	b289      	uxth	r1, r1
 80049c2:	0038      	movs	r0, r7
 80049c4:	f7fe ff45 	bl	8003852 <zcl_reporting_find>
 80049c8:	0006      	movs	r6, r0
 80049ca:	2e00      	cmp	r6, #0
 80049cc:	d101      	bne.n	80049d2 <??ZbZclAttrReportConfigDefault_3>
 80049ce:	208b      	movs	r0, #139	@ 0x8b
 80049d0:	e01a      	b.n	8004a08 <??ZbZclAttrReportConfigDefault_1>

080049d2 <??ZbZclAttrReportConfigDefault_3>:
 80049d2:	f8ad 9002 	strh.w	r9, [sp, #2]
 80049d6:	f8ad a000 	strh.w	sl, [sp]
 80049da:	4669      	mov	r1, sp
 80049dc:	f10d 0002 	add.w	r0, sp, #2
 80049e0:	f7ff f894 	bl	8003b0c <zcl_reporting_check_default_intvl>
 80049e4:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80049e8:	84b0      	strh	r0, [r6, #36]	@ 0x24
 80049ea:	f8bd 0000 	ldrh.w	r0, [sp]
 80049ee:	84f0      	strh	r0, [r6, #38]	@ 0x26
 80049f0:	2c00      	cmp	r4, #0
 80049f2:	d003      	beq.n	80049fc <??ZbZclAttrReportConfigDefault_4>
 80049f4:	ed94 0b00 	vldr	d0, [r4]
 80049f8:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

080049fc <??ZbZclAttrReportConfigDefault_4>:
 80049fc:	2201      	movs	r2, #1
 80049fe:	0031      	movs	r1, r6
 8004a00:	68b8      	ldr	r0, [r7, #8]
 8004a02:	f7ff f8b3 	bl	8003b6c <zcl_reporting_reset_defaults>
 8004a06:	2000      	movs	r0, #0

08004a08 <??ZbZclAttrReportConfigDefault_1>:
 8004a08:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08004a0c <ZbZclClusterReportCallbackAttach>:
 8004a0c:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8004a0e:	4770      	bx	lr

08004a10 <zcl_cluster_command_dummy>:
 8004a10:	0003      	movs	r3, r0
 8004a12:	20ff      	movs	r0, #255	@ 0xff
 8004a14:	4770      	bx	lr

08004a16 <ZbZclClusterAlloc>:
 8004a16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a1a:	0006      	movs	r6, r0
 8004a1c:	000f      	movs	r7, r1
 8004a1e:	4698      	mov	r8, r3
 8004a20:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8004a22:	2f6c      	cmp	r7, #108	@ 0x6c
 8004a24:	d201      	bcs.n	8004a2a <??ZbZclClusterAlloc_0>
 8004a26:	2000      	movs	r0, #0
 8004a28:	e083      	b.n	8004b32 <??ZbZclClusterAlloc_1>

08004a2a <??ZbZclClusterAlloc_0>:
 8004a2a:	f20f 2914 	addw	r9, pc, #532	@ 0x214
 8004a2e:	2300      	movs	r3, #0
 8004a30:	464a      	mov	r2, r9
 8004a32:	0039      	movs	r1, r7
 8004a34:	0030      	movs	r0, r6
 8004a36:	f00f fd85 	bl	8014544 <zb_heap_alloc>
 8004a3a:	0004      	movs	r4, r0
 8004a3c:	2c00      	cmp	r4, #0
 8004a3e:	d101      	bne.n	8004a44 <??ZbZclClusterAlloc_2>
 8004a40:	2000      	movs	r0, #0
 8004a42:	e076      	b.n	8004b32 <??ZbZclClusterAlloc_1>

08004a44 <??ZbZclClusterAlloc_2>:
 8004a44:	9701      	str	r7, [sp, #4]
 8004a46:	f05f 0a00 	movs.w	sl, #0
 8004a4a:	46a3      	mov	fp, r4
 8004a4c:	4652      	mov	r2, sl
 8004a4e:	9901      	ldr	r1, [sp, #4]
 8004a50:	4658      	mov	r0, fp
 8004a52:	f001 f85e 	bl	8005b12 <__aeabi_memset>
 8004a56:	6024      	str	r4, [r4, #0]
 8004a58:	6064      	str	r4, [r4, #4]
 8004a5a:	60a6      	str	r6, [r4, #8]
 8004a5c:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004a60:	81a0      	strh	r0, [r4, #12]
 8004a62:	f884 800e 	strb.w	r8, [r4, #14]
 8004a66:	2000      	movs	r0, #0
 8004a68:	8220      	strh	r0, [r4, #16]
 8004a6a:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8004a6e:	82a0      	strh	r0, [r4, #20]
 8004a70:	200f      	movs	r0, #15
 8004a72:	82e0      	strh	r0, [r4, #22]
 8004a74:	2001      	movs	r0, #1
 8004a76:	7620      	strb	r0, [r4, #24]
 8004a78:	2000      	movs	r0, #0
 8004a7a:	7660      	strb	r0, [r4, #25]
 8004a7c:	2039      	movs	r0, #57	@ 0x39
 8004a7e:	8360      	strh	r0, [r4, #26]
 8004a80:	7725      	strb	r5, [r4, #28]
 8004a82:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8004a86:	6260      	str	r0, [r4, #36]	@ 0x24
 8004a88:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 8004a8c:	62a0      	str	r0, [r4, #40]	@ 0x28
 8004a8e:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8004a92:	6320      	str	r0, [r4, #48]	@ 0x30
 8004a94:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 8004a98:	6360      	str	r0, [r4, #52]	@ 0x34
 8004a9a:	9400      	str	r4, [sp, #0]
 8004a9c:	f8df 33d4 	ldr.w	r3, [pc, #980]	@ 8004e74 <??DataTable5_1>
 8004aa0:	2281      	movs	r2, #129	@ 0x81
 8004aa2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004aa6:	0030      	movs	r0, r6
 8004aa8:	f00f f876 	bl	8013b98 <ZbMsgFilterRegister>
 8004aac:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8004aae:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8004ab0:	2800      	cmp	r0, #0
 8004ab2:	d104      	bne.n	8004abe <??ZbZclClusterAlloc_3>
 8004ab4:	0020      	movs	r0, r4
 8004ab6:	f000 f870 	bl	8004b9a <ZbZclClusterFree>
 8004aba:	2000      	movs	r0, #0
 8004abc:	e039      	b.n	8004b32 <??ZbZclClusterAlloc_1>

08004abe <??ZbZclClusterAlloc_3>:
 8004abe:	0022      	movs	r2, r4
 8004ac0:	f8df 13b4 	ldr.w	r1, [pc, #948]	@ 8004e78 <??DataTable5_2>
 8004ac4:	0030      	movs	r0, r6
 8004ac6:	f00f f923 	bl	8013d10 <ZbTimerAlloc>
 8004aca:	63a0      	str	r0, [r4, #56]	@ 0x38
 8004acc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8004ace:	2800      	cmp	r0, #0
 8004ad0:	d104      	bne.n	8004adc <??ZbZclClusterAlloc_4>
 8004ad2:	0020      	movs	r0, r4
 8004ad4:	f000 f861 	bl	8004b9a <ZbZclClusterFree>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e02a      	b.n	8004b32 <??ZbZclClusterAlloc_1>

08004adc <??ZbZclClusterAlloc_4>:
 8004adc:	0022      	movs	r2, r4
 8004ade:	f20f 1125 	addw	r1, pc, #293	@ 0x125
 8004ae2:	0030      	movs	r0, r6
 8004ae4:	f00f f914 	bl	8013d10 <ZbTimerAlloc>
 8004ae8:	6520      	str	r0, [r4, #80]	@ 0x50
 8004aea:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8004aec:	2800      	cmp	r0, #0
 8004aee:	d104      	bne.n	8004afa <??ZbZclClusterAlloc_5>
 8004af0:	0020      	movs	r0, r4
 8004af2:	f000 f852 	bl	8004b9a <ZbZclClusterFree>
 8004af6:	2000      	movs	r0, #0
 8004af8:	e01b      	b.n	8004b32 <??ZbZclClusterAlloc_1>

08004afa <??ZbZclClusterAlloc_5>:
 8004afa:	21ac      	movs	r1, #172	@ 0xac
 8004afc:	0020      	movs	r0, r4
 8004afe:	f7fb fb68 	bl	80001d2 <ZbZclClusterSetMinSecurity>
 8004b02:	2201      	movs	r2, #1
 8004b04:	f8df 1374 	ldr.w	r1, [pc, #884]	@ 8004e7c <??DataTable5_3>
 8004b08:	0020      	movs	r0, r4
 8004b0a:	f7fe f8d7 	bl	8002cbc <ZbZclAttrAppendList>
 8004b0e:	2800      	cmp	r0, #0
 8004b10:	d007      	beq.n	8004b22 <??ZbZclClusterAlloc_6>
 8004b12:	2300      	movs	r3, #0
 8004b14:	464a      	mov	r2, r9
 8004b16:	0021      	movs	r1, r4
 8004b18:	0030      	movs	r0, r6
 8004b1a:	f00f fd22 	bl	8014562 <zb_heap_free>
 8004b1e:	2000      	movs	r0, #0
 8004b20:	e007      	b.n	8004b32 <??ZbZclClusterAlloc_1>

08004b22 <??ZbZclClusterAlloc_6>:
 8004b22:	2201      	movs	r2, #1
 8004b24:	2300      	movs	r3, #0
 8004b26:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8004b2a:	0020      	movs	r0, r4
 8004b2c:	f7fd ffaf 	bl	8002a8e <ZbZclAttrIntegerWrite>
 8004b30:	0020      	movs	r0, r4

08004b32 <??ZbZclClusterAlloc_1>:
 8004b32:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004b36 <ZbZclClusterAttach>:
 8004b36:	b510      	push	{r4, lr}
 8004b38:	0004      	movs	r4, r0
 8004b3a:	7ba0      	ldrb	r0, [r4, #14]
 8004b3c:	28ff      	cmp	r0, #255	@ 0xff
 8004b3e:	d104      	bne.n	8004b4a <??ZbZclClusterAttach_0>
 8004b40:	89a0      	ldrh	r0, [r4, #12]
 8004b42:	2800      	cmp	r0, #0
 8004b44:	d001      	beq.n	8004b4a <??ZbZclClusterAttach_0>
 8004b46:	89a0      	ldrh	r0, [r4, #12]
 8004b48:	280a      	cmp	r0, #10

08004b4a <??ZbZclClusterAttach_0>:
 8004b4a:	7ba0      	ldrb	r0, [r4, #14]
 8004b4c:	28ff      	cmp	r0, #255	@ 0xff
 8004b4e:	d00b      	beq.n	8004b68 <??ZbZclClusterAttach_1>
 8004b50:	7f23      	ldrb	r3, [r4, #28]
 8004b52:	8aa2      	ldrh	r2, [r4, #20]
 8004b54:	7ba1      	ldrb	r1, [r4, #14]
 8004b56:	0020      	movs	r0, r4
 8004b58:	f00f fc59 	bl	801440e <ZbZclClusterBind>
 8004b5c:	0001      	movs	r1, r0
 8004b5e:	b2c9      	uxtb	r1, r1
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d001      	beq.n	8004b68 <??ZbZclClusterAttach_1>
 8004b64:	b2c0      	uxtb	r0, r0
 8004b66:	e005      	b.n	8004b74 <??ZbZclClusterAttach_2>

08004b68 <??ZbZclClusterAttach_1>:
 8004b68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004b6a:	2800      	cmp	r0, #0
 8004b6c:	d101      	bne.n	8004b72 <??ZbZclClusterAttach_3>
 8004b6e:	48c4      	ldr	r0, [pc, #784]	@ (8004e80 <??DataTable5_4>)
 8004b70:	65a0      	str	r0, [r4, #88]	@ 0x58

08004b72 <??ZbZclClusterAttach_3>:
 8004b72:	2000      	movs	r0, #0

08004b74 <??ZbZclClusterAttach_2>:
 8004b74:	bd10      	pop	{r4, pc}

08004b76 <ZbZclClusterDetach>:
 8004b76:	b510      	push	{r4, lr}
 8004b78:	0004      	movs	r4, r0
 8004b7a:	68a0      	ldr	r0, [r4, #8]
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d00b      	beq.n	8004b98 <??ZbZclClusterDetach_0>

08004b80 <??ZbZclClusterDetach_1>:
 8004b80:	0020      	movs	r0, r4
 8004b82:	f00f fc87 	bl	8014494 <ZbZclClusterUnbind>
 8004b86:	0020      	movs	r0, r4
 8004b88:	f00f fcb0 	bl	80144ec <ZbZclClusterRemoveAlarmResetHandler>
 8004b8c:	7ba0      	ldrb	r0, [r4, #14]
 8004b8e:	28ff      	cmp	r0, #255	@ 0xff
 8004b90:	d002      	beq.n	8004b98 <??ZbZclClusterDetach_0>
 8004b92:	0020      	movs	r0, r4
 8004b94:	f00f fc06 	bl	80143a4 <ZbZclClusterEndpointRemove>

08004b98 <??ZbZclClusterDetach_0>:
 8004b98:	bd10      	pop	{r4, pc}

08004b9a <ZbZclClusterFree>:
 8004b9a:	b538      	push	{r3, r4, r5, lr}
 8004b9c:	0005      	movs	r5, r0
 8004b9e:	68ac      	ldr	r4, [r5, #8]
 8004ba0:	2c00      	cmp	r4, #0
 8004ba2:	d02d      	beq.n	8004c00 <??ZbZclClusterFree_0>

08004ba4 <??ZbZclClusterFree_1>:
 8004ba4:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004ba6:	2800      	cmp	r0, #0
 8004ba8:	d004      	beq.n	8004bb4 <??ZbZclClusterFree_2>
 8004baa:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8004bac:	f00f f902 	bl	8013db4 <ZbTimerFree>
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	6528      	str	r0, [r5, #80]	@ 0x50

08004bb4 <??ZbZclClusterFree_2>:
 8004bb4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d004      	beq.n	8004bc4 <??ZbZclClusterFree_3>
 8004bba:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8004bbc:	f00f f8fa 	bl	8013db4 <ZbTimerFree>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	63a8      	str	r0, [r5, #56]	@ 0x38

08004bc4 <??ZbZclClusterFree_3>:
 8004bc4:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d005      	beq.n	8004bd6 <??ZbZclClusterFree_4>
 8004bca:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8004bcc:	0020      	movs	r0, r4
 8004bce:	f00f f847 	bl	8013c60 <ZbMsgFilterRemove>
 8004bd2:	2000      	movs	r0, #0
 8004bd4:	62e8      	str	r0, [r5, #44]	@ 0x2c

08004bd6 <??ZbZclClusterFree_4>:
 8004bd6:	0028      	movs	r0, r5
 8004bd8:	f7fe fe29 	bl	800382e <ZbZclReportCleanup>
 8004bdc:	0028      	movs	r0, r5
 8004bde:	f7ff ffca 	bl	8004b76 <ZbZclClusterDetach>
 8004be2:	0028      	movs	r0, r5
 8004be4:	f7fe f976 	bl	8002ed4 <ZbZclAttrFreeList>
 8004be8:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8004bea:	2800      	cmp	r0, #0
 8004bec:	d002      	beq.n	8004bf4 <??ZbZclClusterFree_5>
 8004bee:	0028      	movs	r0, r5
 8004bf0:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 8004bf2:	4788      	blx	r1

08004bf4 <??ZbZclClusterFree_5>:
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	a212      	add	r2, pc, #72	@ (adr r2, 8004c40 <??DataTable4>)
 8004bf8:	0029      	movs	r1, r5
 8004bfa:	0020      	movs	r0, r4
 8004bfc:	f00f fcb1 	bl	8014562 <zb_heap_free>

08004c00 <??ZbZclClusterFree_0>:
 8004c00:	bd31      	pop	{r0, r4, r5, pc}
	...

08004c04 <zcl_cluster_persist_timer>:
 8004c04:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004c06:	0005      	movs	r5, r0
 8004c08:	000e      	movs	r6, r1
 8004c0a:	0037      	movs	r7, r6
 8004c0c:	a902      	add	r1, sp, #8
 8004c0e:	0038      	movs	r0, r7
 8004c10:	f000 f818 	bl	8004c44 <zcl_persist_read_attrs>
 8004c14:	0004      	movs	r4, r0
 8004c16:	2c00      	cmp	r4, #0
 8004c18:	d010      	beq.n	8004c3c <??zcl_cluster_persist_timer_0>
 8004c1a:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8004c1e:	9001      	str	r0, [sp, #4]
 8004c20:	9400      	str	r4, [sp, #0]
 8004c22:	7bbb      	ldrb	r3, [r7, #14]
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	7f3a      	ldrb	r2, [r7, #28]
 8004c28:	89b9      	ldrh	r1, [r7, #12]
 8004c2a:	68b8      	ldr	r0, [r7, #8]
 8004c2c:	f000 f92a 	bl	8004e84 <zcl_persist_send_cache>
 8004c30:	2300      	movs	r3, #0
 8004c32:	a203      	add	r2, pc, #12	@ (adr r2, 8004c40 <??DataTable4>)
 8004c34:	0021      	movs	r1, r4
 8004c36:	68b8      	ldr	r0, [r7, #8]
 8004c38:	f00f fc93 	bl	8014562 <zb_heap_free>

08004c3c <??zcl_cluster_persist_timer_0>:
 8004c3c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

08004c40 <??DataTable4>:
 8004c40:	0000 0000                                   ....

08004c44 <zcl_persist_read_attrs>:
 8004c44:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c48:	b08c      	sub	sp, #48	@ 0x30
 8004c4a:	0007      	movs	r7, r0
 8004c4c:	f05f 0b00 	movs.w	fp, #0
 8004c50:	f05f 0900 	movs.w	r9, #0
 8004c54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c56:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004c5a:	4288      	cmp	r0, r1
 8004c5c:	d001      	beq.n	8004c62 <??zcl_persist_read_attrs_0>
 8004c5e:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004c60:	e000      	b.n	8004c64 <??zcl_persist_read_attrs_1>

08004c62 <??zcl_persist_read_attrs_0>:
 8004c62:	2400      	movs	r4, #0

08004c64 <??zcl_persist_read_attrs_1>:
 8004c64:	2c00      	cmp	r4, #0
 8004c66:	d01e      	beq.n	8004ca6 <??zcl_persist_read_attrs_2>
 8004c68:	46a0      	mov	r8, r4
 8004c6a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004c6e:	7900      	ldrb	r0, [r0, #4]
 8004c70:	0740      	lsls	r0, r0, #29
 8004c72:	d50f      	bpl.n	8004c94 <??zcl_persist_read_attrs_3>

08004c74 <??zcl_persist_read_attrs_4>:
 8004c74:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004c78:	2800      	cmp	r0, #0
 8004c7a:	d004      	beq.n	8004c86 <??zcl_persist_read_attrs_5>
 8004c7c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004c80:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8004c84:	d300      	bcc.n	8004c88 <??zcl_persist_read_attrs_6>

08004c86 <??zcl_persist_read_attrs_5>:
 8004c86:	e005      	b.n	8004c94 <??zcl_persist_read_attrs_3>

08004c88 <??zcl_persist_read_attrs_6>:
 8004c88:	f119 0904 	adds.w	r9, r9, #4
 8004c8c:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8004c90:	eb10 0909 	adds.w	r9, r0, r9

08004c94 <??zcl_persist_read_attrs_3>:
 8004c94:	6820      	ldr	r0, [r4, #0]
 8004c96:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004c9a:	4288      	cmp	r0, r1
 8004c9c:	d001      	beq.n	8004ca2 <??zcl_persist_read_attrs_7>
 8004c9e:	6824      	ldr	r4, [r4, #0]
 8004ca0:	e7e0      	b.n	8004c64 <??zcl_persist_read_attrs_1>

08004ca2 <??zcl_persist_read_attrs_7>:
 8004ca2:	2400      	movs	r4, #0
 8004ca4:	e7de      	b.n	8004c64 <??zcl_persist_read_attrs_1>

08004ca6 <??zcl_persist_read_attrs_2>:
 8004ca6:	4648      	mov	r0, r9
 8004ca8:	b280      	uxth	r0, r0
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d101      	bne.n	8004cb2 <??zcl_persist_read_attrs_8>
 8004cae:	2000      	movs	r0, #0
 8004cb0:	e0db      	b.n	8004e6a <??zcl_persist_read_attrs_9>

08004cb2 <??zcl_persist_read_attrs_8>:
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	a26e      	add	r2, pc, #440	@ (adr r2, 8004e70 <??DataTable5>)
 8004cb6:	4649      	mov	r1, r9
 8004cb8:	b289      	uxth	r1, r1
 8004cba:	68b8      	ldr	r0, [r7, #8]
 8004cbc:	f00f fc42 	bl	8014544 <zb_heap_alloc>
 8004cc0:	0005      	movs	r5, r0
 8004cc2:	2d00      	cmp	r5, #0
 8004cc4:	d101      	bne.n	8004cca <??zcl_persist_read_attrs_10>
 8004cc6:	2000      	movs	r0, #0
 8004cc8:	e0cf      	b.n	8004e6a <??zcl_persist_read_attrs_9>

08004cca <??zcl_persist_read_attrs_10>:
 8004cca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ccc:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004cd0:	4288      	cmp	r0, r1
 8004cd2:	d001      	beq.n	8004cd8 <??zcl_persist_read_attrs_11>
 8004cd4:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8004cd6:	e000      	b.n	8004cda <??zcl_persist_read_attrs_12>

08004cd8 <??zcl_persist_read_attrs_11>:
 8004cd8:	2400      	movs	r4, #0

08004cda <??zcl_persist_read_attrs_12>:
 8004cda:	2c00      	cmp	r4, #0
 8004cdc:	f000 80c1 	beq.w	8004e62 <??zcl_persist_read_attrs_13>
 8004ce0:	46a0      	mov	r8, r4
 8004ce2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004ce6:	7900      	ldrb	r0, [r0, #4]
 8004ce8:	0740      	lsls	r0, r0, #29
 8004cea:	f140 80b1 	bpl.w	8004e50 <??zcl_persist_read_attrs_14>

08004cee <??zcl_persist_read_attrs_15>:
 8004cee:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004cf2:	7900      	ldrb	r0, [r0, #4]
 8004cf4:	06c0      	lsls	r0, r0, #27
 8004cf6:	d566      	bpl.n	8004dc6 <??zcl_persist_read_attrs_16>
 8004cf8:	4658      	mov	r0, fp
 8004cfa:	b280      	uxth	r0, r0
 8004cfc:	4428      	add	r0, r5
 8004cfe:	1d00      	adds	r0, r0, #4
 8004d00:	9001      	str	r0, [sp, #4]
 8004d02:	4649      	mov	r1, r9
 8004d04:	b289      	uxth	r1, r1
 8004d06:	4658      	mov	r0, fp
 8004d08:	b280      	uxth	r0, r0
 8004d0a:	1a09      	subs	r1, r1, r0
 8004d0c:	1f08      	subs	r0, r1, #4
 8004d0e:	f8ad 0000 	strh.w	r0, [sp]
 8004d12:	2020      	movs	r0, #32
 8004d14:	9003      	str	r0, [sp, #12]
 8004d16:	2000      	movs	r0, #0
 8004d18:	9002      	str	r0, [sp, #8]
 8004d1a:	f10d 0a10 	add.w	sl, sp, #16
 8004d1e:	9a02      	ldr	r2, [sp, #8]
 8004d20:	9903      	ldr	r1, [sp, #12]
 8004d22:	4650      	mov	r0, sl
 8004d24:	f000 fef5 	bl	8005b12 <__aeabi_memset>
 8004d28:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004d2c:	9004      	str	r0, [sp, #16]
 8004d2e:	2000      	movs	r0, #0
 8004d30:	f88d 0014 	strb.w	r0, [sp, #20]
 8004d34:	9801      	ldr	r0, [sp, #4]
 8004d36:	9006      	str	r0, [sp, #24]
 8004d38:	f8bd 0000 	ldrh.w	r0, [sp]
 8004d3c:	9007      	str	r0, [sp, #28]
 8004d3e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8004d40:	900b      	str	r0, [sp, #44]	@ 0x2c
 8004d42:	aa04      	add	r2, sp, #16
 8004d44:	4641      	mov	r1, r8
 8004d46:	0038      	movs	r0, r7
 8004d48:	f7fe f890 	bl	8002e6c <ZbZclAttrCallbackExec>
 8004d4c:	4682      	mov	sl, r0
 8004d4e:	4650      	mov	r0, sl
 8004d50:	b2c0      	uxtb	r0, r0
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d17c      	bne.n	8004e50 <??zcl_persist_read_attrs_14>

08004d56 <??zcl_persist_read_attrs_17>:
 8004d56:	2300      	movs	r3, #0
 8004d58:	f8bd 2000 	ldrh.w	r2, [sp]
 8004d5c:	9901      	ldr	r1, [sp, #4]
 8004d5e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004d62:	7880      	ldrb	r0, [r0, #2]
 8004d64:	f7fd f97d 	bl	8002062 <ZbZclAttrParseLength>
 8004d68:	0006      	movs	r6, r0
 8004d6a:	2e01      	cmp	r6, #1
 8004d6c:	db02      	blt.n	8004d74 <??zcl_persist_read_attrs_18>
 8004d6e:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 8004d72:	db00      	blt.n	8004d76 <??zcl_persist_read_attrs_19>

08004d74 <??zcl_persist_read_attrs_18>:
 8004d74:	e06c      	b.n	8004e50 <??zcl_persist_read_attrs_14>

08004d76 <??zcl_persist_read_attrs_19>:
 8004d76:	4648      	mov	r0, r9
 8004d78:	b280      	uxth	r0, r0
 8004d7a:	4659      	mov	r1, fp
 8004d7c:	b289      	uxth	r1, r1
 8004d7e:	fa11 f186 	uxtah	r1, r1, r6
 8004d82:	1d09      	adds	r1, r1, #4
 8004d84:	4288      	cmp	r0, r1
 8004d86:	d207      	bcs.n	8004d98 <??zcl_persist_read_attrs_20>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	a239      	add	r2, pc, #228	@ (adr r2, 8004e70 <??DataTable5>)
 8004d8c:	0029      	movs	r1, r5
 8004d8e:	68b8      	ldr	r0, [r7, #8]
 8004d90:	f00f fbe7 	bl	8014562 <zb_heap_free>
 8004d94:	2000      	movs	r0, #0
 8004d96:	e068      	b.n	8004e6a <??zcl_persist_read_attrs_9>

08004d98 <??zcl_persist_read_attrs_20>:
 8004d98:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004d9c:	8801      	ldrh	r1, [r0, #0]
 8004d9e:	4658      	mov	r0, fp
 8004da0:	b280      	uxth	r0, r0
 8004da2:	4428      	add	r0, r5
 8004da4:	f7fc f9ae 	bl	8001104 <putle16>
 8004da8:	f11b 0b02 	adds.w	fp, fp, #2
 8004dac:	0030      	movs	r0, r6
 8004dae:	0001      	movs	r1, r0
 8004db0:	b289      	uxth	r1, r1
 8004db2:	4658      	mov	r0, fp
 8004db4:	b280      	uxth	r0, r0
 8004db6:	4428      	add	r0, r5
 8004db8:	f7fc f9a4 	bl	8001104 <putle16>
 8004dbc:	f11b 0b02 	adds.w	fp, fp, #2
 8004dc0:	eb16 0b0b 	adds.w	fp, r6, fp
 8004dc4:	e044      	b.n	8004e50 <??zcl_persist_read_attrs_14>

08004dc6 <??zcl_persist_read_attrs_16>:
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8004dcc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8004dd0:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004dd4:	7880      	ldrb	r0, [r0, #2]
 8004dd6:	f7fd f944 	bl	8002062 <ZbZclAttrParseLength>
 8004dda:	0006      	movs	r6, r0
 8004ddc:	2e01      	cmp	r6, #1
 8004dde:	db02      	blt.n	8004de6 <??zcl_persist_read_attrs_21>
 8004de0:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 8004de4:	db00      	blt.n	8004de8 <??zcl_persist_read_attrs_22>

08004de6 <??zcl_persist_read_attrs_21>:
 8004de6:	e033      	b.n	8004e50 <??zcl_persist_read_attrs_14>

08004de8 <??zcl_persist_read_attrs_22>:
 8004de8:	4648      	mov	r0, r9
 8004dea:	b280      	uxth	r0, r0
 8004dec:	4659      	mov	r1, fp
 8004dee:	b289      	uxth	r1, r1
 8004df0:	fa11 f186 	uxtah	r1, r1, r6
 8004df4:	1d09      	adds	r1, r1, #4
 8004df6:	4288      	cmp	r0, r1
 8004df8:	d207      	bcs.n	8004e0a <??zcl_persist_read_attrs_23>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	a21c      	add	r2, pc, #112	@ (adr r2, 8004e70 <??DataTable5>)
 8004dfe:	0029      	movs	r1, r5
 8004e00:	68b8      	ldr	r0, [r7, #8]
 8004e02:	f00f fbae 	bl	8014562 <zb_heap_free>
 8004e06:	2000      	movs	r0, #0
 8004e08:	e02f      	b.n	8004e6a <??zcl_persist_read_attrs_9>

08004e0a <??zcl_persist_read_attrs_23>:
 8004e0a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8004e0e:	8801      	ldrh	r1, [r0, #0]
 8004e10:	4658      	mov	r0, fp
 8004e12:	b280      	uxth	r0, r0
 8004e14:	4428      	add	r0, r5
 8004e16:	f7fc f975 	bl	8001104 <putle16>
 8004e1a:	f11b 0b02 	adds.w	fp, fp, #2
 8004e1e:	0030      	movs	r0, r6
 8004e20:	0001      	movs	r1, r0
 8004e22:	b289      	uxth	r1, r1
 8004e24:	4658      	mov	r0, fp
 8004e26:	b280      	uxth	r0, r0
 8004e28:	4428      	add	r0, r5
 8004e2a:	f7fc f96b 	bl	8001104 <putle16>
 8004e2e:	f11b 0b02 	adds.w	fp, fp, #2
 8004e32:	9601      	str	r6, [sp, #4]
 8004e34:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8004e38:	9000      	str	r0, [sp, #0]
 8004e3a:	4658      	mov	r0, fp
 8004e3c:	b280      	uxth	r0, r0
 8004e3e:	eb05 0a00 	add.w	sl, r5, r0
 8004e42:	9a01      	ldr	r2, [sp, #4]
 8004e44:	9900      	ldr	r1, [sp, #0]
 8004e46:	4650      	mov	r0, sl
 8004e48:	f012 f925 	bl	8017096 <__aeabi_memcpy>
 8004e4c:	eb16 0b0b 	adds.w	fp, r6, fp

08004e50 <??zcl_persist_read_attrs_14>:
 8004e50:	6820      	ldr	r0, [r4, #0]
 8004e52:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 8004e56:	4288      	cmp	r0, r1
 8004e58:	d001      	beq.n	8004e5e <??zcl_persist_read_attrs_24>
 8004e5a:	6824      	ldr	r4, [r4, #0]
 8004e5c:	e73d      	b.n	8004cda <??zcl_persist_read_attrs_12>

08004e5e <??zcl_persist_read_attrs_24>:
 8004e5e:	2400      	movs	r4, #0
 8004e60:	e73b      	b.n	8004cda <??zcl_persist_read_attrs_12>

08004e62 <??zcl_persist_read_attrs_13>:
 8004e62:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8004e64:	f8a0 b000 	strh.w	fp, [r0]
 8004e68:	0028      	movs	r0, r5

08004e6a <??zcl_persist_read_attrs_9>:
 8004e6a:	b00d      	add	sp, #52	@ 0x34
 8004e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e70 <??DataTable5>:
 8004e70:	0000 0000                                   ....

08004e74 <??DataTable5_1>:
 8004e74:	38a3 0800                                   .8..

08004e78 <??DataTable5_2>:
 8004e78:	3319 0800                                   .3..

08004e7c <??DataTable5_3>:
 8004e7c:	8508 0801                                   ....

08004e80 <??DataTable5_4>:
 8004e80:	4a11 0800                                   .J..

08004e84 <zcl_persist_send_cache>:
 8004e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	b098      	sub	sp, #96	@ 0x60
 8004e8a:	0005      	movs	r5, r0
 8004e8c:	001e      	movs	r6, r3
 8004e8e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8004e90:	f05f 0900 	movs.w	r9, #0
 8004e94:	0030      	movs	r0, r6
 8004e96:	b280      	uxth	r0, r0
 8004e98:	28ff      	cmp	r0, #255	@ 0xff
 8004e9a:	d101      	bne.n	8004ea0 <??zcl_persist_send_cache_0>
 8004e9c:	2085      	movs	r0, #133	@ 0x85
 8004e9e:	e0a1      	b.n	8004fe4 <??zcl_persist_send_cache_1>

08004ea0 <??zcl_persist_send_cache_0>:
 8004ea0:	0020      	movs	r0, r4
 8004ea2:	b280      	uxth	r0, r0
 8004ea4:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 8004ea8:	4288      	cmp	r0, r1
 8004eaa:	d301      	bcc.n	8004eb0 <??zcl_persist_send_cache_2>
 8004eac:	2089      	movs	r0, #137	@ 0x89
 8004eae:	e099      	b.n	8004fe4 <??zcl_persist_send_cache_1>

08004eb0 <??zcl_persist_send_cache_2>:
 8004eb0:	f05f 0a08 	movs.w	sl, #8
 8004eb4:	f05f 0b00 	movs.w	fp, #0
 8004eb8:	466f      	mov	r7, sp
 8004eba:	465a      	mov	r2, fp
 8004ebc:	4651      	mov	r1, sl
 8004ebe:	0038      	movs	r0, r7
 8004ec0:	f000 fe27 	bl	8005b12 <__aeabi_memset>
 8004ec4:	2001      	movs	r0, #1
 8004ec6:	f88d 0000 	strb.w	r0, [sp]
 8004eca:	2001      	movs	r0, #1
 8004ecc:	f88d 0001 	strb.w	r0, [sp, #1]
 8004ed0:	2000      	movs	r0, #0
 8004ed2:	f88d 0002 	strb.w	r0, [sp, #2]
 8004ed6:	2001      	movs	r0, #1
 8004ed8:	f88d 0003 	strb.w	r0, [sp, #3]
 8004edc:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 8004ee0:	f8ad 8004 	strh.w	r8, [sp, #4]
 8004ee4:	f00f f922 	bl	801412c <ZbZclGetNextSeqnum>
 8004ee8:	f88d 0006 	strb.w	r0, [sp, #6]
 8004eec:	2000      	movs	r0, #0
 8004eee:	f88d 0007 	strb.w	r0, [sp, #7]
 8004ef2:	2205      	movs	r2, #5
 8004ef4:	a904      	add	r1, sp, #16
 8004ef6:	4668      	mov	r0, sp
 8004ef8:	f7fc f802 	bl	8000f00 <ZbZclAppendHeader>
 8004efc:	0007      	movs	r7, r0
 8004efe:	2f00      	cmp	r7, #0
 8004f00:	d501      	bpl.n	8004f06 <??zcl_persist_send_cache_3>
 8004f02:	2085      	movs	r0, #133	@ 0x85
 8004f04:	e06e      	b.n	8004fe4 <??zcl_persist_send_cache_1>

08004f06 <??zcl_persist_send_cache_3>:
 8004f06:	f10d 0a48 	add.w	sl, sp, #72	@ 0x48
 8004f0a:	a804      	add	r0, sp, #16
 8004f0c:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8004f10:	a812      	add	r0, sp, #72	@ 0x48
 8004f12:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8004f16:	6047      	str	r7, [r0, #4]
 8004f18:	f119 0901 	adds.w	r9, r9, #1
 8004f1c:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8004f20:	a802      	add	r0, sp, #8
 8004f22:	f7fc f8ef 	bl	8001104 <putle16>
 8004f26:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 8004f2a:	f88d 000a 	strb.w	r0, [sp, #10]
 8004f2e:	a802      	add	r0, sp, #8
 8004f30:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8004f34:	2003      	movs	r0, #3
 8004f36:	a912      	add	r1, sp, #72	@ 0x48
 8004f38:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8004f3c:	6048      	str	r0, [r1, #4]
 8004f3e:	f119 0901 	adds.w	r9, r9, #1
 8004f42:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8004f44:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8004f48:	0020      	movs	r0, r4
 8004f4a:	b280      	uxth	r0, r0
 8004f4c:	a912      	add	r1, sp, #72	@ 0x48
 8004f4e:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8004f52:	6048      	str	r0, [r1, #4]
 8004f54:	f119 0901 	adds.w	r9, r9, #1
 8004f58:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f5c:	f05f 0a30 	movs.w	sl, #48	@ 0x30
 8004f60:	f05f 0900 	movs.w	r9, #0
 8004f64:	f10d 0b18 	add.w	fp, sp, #24
 8004f68:	464a      	mov	r2, r9
 8004f6a:	4651      	mov	r1, sl
 8004f6c:	4658      	mov	r0, fp
 8004f6e:	f000 fdd0 	bl	8005b12 <__aeabi_memset>
 8004f72:	2003      	movs	r0, #3
 8004f74:	f88d 0018 	strb.w	r0, [sp, #24]
 8004f78:	0028      	movs	r0, r5
 8004f7a:	f00e fb4b 	bl	8013614 <ZbExtendedAddress>
 8004f7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004f82:	20ff      	movs	r0, #255	@ 0xff
 8004f84:	f8ad 001a 	strh.w	r0, [sp, #26]
 8004f88:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004f8c:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 8004f90:	f8ad 802a 	strh.w	r8, [sp, #42]	@ 0x2a
 8004f94:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8004f98:	a812      	add	r0, sp, #72	@ 0x48
 8004f9a:	900c      	str	r0, [sp, #48]	@ 0x30
 8004f9c:	9803      	ldr	r0, [sp, #12]
 8004f9e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 8004fa8:	2000      	movs	r0, #0
 8004faa:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 8004fae:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004fb2:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004fb6:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8004fba:	f050 0008 	orrs.w	r0, r0, #8
 8004fbe:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004fc2:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8004fc6:	f050 0004 	orrs.w	r0, r0, #4
 8004fca:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	a906      	add	r1, sp, #24
 8004fd4:	0028      	movs	r0, r5
 8004fd6:	f00e fc33 	bl	8013840 <ZbApsdeDataReqCallback>
 8004fda:	2800      	cmp	r0, #0
 8004fdc:	d001      	beq.n	8004fe2 <??zcl_persist_send_cache_4>
 8004fde:	2001      	movs	r0, #1
 8004fe0:	e000      	b.n	8004fe4 <??zcl_persist_send_cache_1>

08004fe2 <??zcl_persist_send_cache_4>:
 8004fe2:	2000      	movs	r0, #0

08004fe4 <??zcl_persist_send_cache_1>:
 8004fe4:	b01b      	add	sp, #108	@ 0x6c
 8004fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004fea <ZbZclHandleGetSceneData>:
 8004fea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fee:	b0a2      	sub	sp, #136	@ 0x88
 8004ff0:	0004      	movs	r4, r0
 8004ff2:	000d      	movs	r5, r1
 8004ff4:	0016      	movs	r6, r2
 8004ff6:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	d106      	bne.n	800500a <??ZbZclHandleGetSceneData_0>
 8004ffc:	2381      	movs	r3, #129	@ 0x81
 8004ffe:	002a      	movs	r2, r5
 8005000:	0031      	movs	r1, r6
 8005002:	0020      	movs	r0, r4
 8005004:	f00f f916 	bl	8014234 <ZbZclSendDefaultResponse>
 8005008:	e06b      	b.n	80050e2 <??ZbZclHandleGetSceneData_1>

0800500a <??ZbZclHandleGetSceneData_0>:
 800500a:	2708      	movs	r7, #8
 800500c:	f05f 0800 	movs.w	r8, #0
 8005010:	46e9      	mov	r9, sp
 8005012:	4642      	mov	r2, r8
 8005014:	0039      	movs	r1, r7
 8005016:	4648      	mov	r0, r9
 8005018:	f000 fd7b 	bl	8005b12 <__aeabi_memset>
 800501c:	2000      	movs	r0, #0
 800501e:	f88d 0000 	strb.w	r0, [sp]
 8005022:	2001      	movs	r0, #1
 8005024:	f88d 0001 	strb.w	r0, [sp, #1]
 8005028:	78a8      	ldrb	r0, [r5, #2]
 800502a:	2800      	cmp	r0, #0
 800502c:	d103      	bne.n	8005036 <??ZbZclHandleGetSceneData_2>
 800502e:	2001      	movs	r0, #1
 8005030:	f88d 0002 	strb.w	r0, [sp, #2]
 8005034:	e002      	b.n	800503c <??ZbZclHandleGetSceneData_3>

08005036 <??ZbZclHandleGetSceneData_2>:
 8005036:	2000      	movs	r0, #0
 8005038:	f88d 0002 	strb.w	r0, [sp, #2]

0800503c <??ZbZclHandleGetSceneData_3>:
 800503c:	2001      	movs	r0, #1
 800503e:	f88d 0003 	strb.w	r0, [sp, #3]
 8005042:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8005046:	f8ad 0004 	strh.w	r0, [sp, #4]
 800504a:	79a8      	ldrb	r0, [r5, #6]
 800504c:	f88d 0006 	strb.w	r0, [sp, #6]
 8005050:	20f0      	movs	r0, #240	@ 0xf0
 8005052:	f88d 0007 	strb.w	r0, [sp, #7]
 8005056:	8b62      	ldrh	r2, [r4, #26]
 8005058:	a90e      	add	r1, sp, #56	@ 0x38
 800505a:	4668      	mov	r0, sp
 800505c:	f7fb ff50 	bl	8000f00 <ZbZclAppendHeader>
 8005060:	0007      	movs	r7, r0
 8005062:	2f00      	cmp	r7, #0
 8005064:	d506      	bpl.n	8005074 <??ZbZclHandleGetSceneData_4>
 8005066:	2380      	movs	r3, #128	@ 0x80
 8005068:	002a      	movs	r2, r5
 800506a:	0031      	movs	r1, r6
 800506c:	0020      	movs	r0, r4
 800506e:	f00f f8e1 	bl	8014234 <ZbZclSendDefaultResponse>
 8005072:	e036      	b.n	80050e2 <??ZbZclHandleGetSceneData_1>

08005074 <??ZbZclHandleGetSceneData_4>:
 8005074:	46b9      	mov	r9, r7
 8005076:	f1d9 024d 	rsbs	r2, r9, #77	@ 0x4d
 800507a:	b2d2      	uxtb	r2, r2
 800507c:	a80e      	add	r0, sp, #56	@ 0x38
 800507e:	eb00 0109 	add.w	r1, r0, r9
 8005082:	0020      	movs	r0, r4
 8005084:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005086:	4798      	blx	r3
 8005088:	4680      	mov	r8, r0
 800508a:	4640      	mov	r0, r8
 800508c:	b2c0      	uxtb	r0, r0
 800508e:	2800      	cmp	r0, #0
 8005090:	d106      	bne.n	80050a0 <??ZbZclHandleGetSceneData_5>
 8005092:	2381      	movs	r3, #129	@ 0x81
 8005094:	002a      	movs	r2, r5
 8005096:	0031      	movs	r1, r6
 8005098:	0020      	movs	r0, r4
 800509a:	f00f f8cb 	bl	8014234 <ZbZclSendDefaultResponse>
 800509e:	e020      	b.n	80050e2 <??ZbZclHandleGetSceneData_1>

080050a0 <??ZbZclHandleGetSceneData_5>:
 80050a0:	fa59 f988 	uxtab	r9, r9, r8
 80050a4:	0032      	movs	r2, r6
 80050a6:	a902      	add	r1, sp, #8
 80050a8:	0020      	movs	r0, r4
 80050aa:	f7fb f9c8 	bl	800043e <ZbZclClusterInitApsdeReq>
 80050ae:	a802      	add	r0, sp, #8
 80050b0:	f116 0110 	adds.w	r1, r6, #16
 80050b4:	2210      	movs	r2, #16
 80050b6:	f011 ffee 	bl	8017096 <__aeabi_memcpy>
 80050ba:	2000      	movs	r0, #0
 80050bc:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 80050c0:	2000      	movs	r0, #0
 80050c2:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 80050c6:	2000      	movs	r0, #0
 80050c8:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
 80050cc:	a80e      	add	r0, sp, #56	@ 0x38
 80050ce:	9008      	str	r0, [sp, #32]
 80050d0:	4648      	mov	r0, r9
 80050d2:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 80050d6:	2300      	movs	r3, #0
 80050d8:	2200      	movs	r2, #0
 80050da:	a902      	add	r1, sp, #8
 80050dc:	68a0      	ldr	r0, [r4, #8]
 80050de:	f00e fbaf 	bl	8013840 <ZbApsdeDataReqCallback>

080050e2 <??ZbZclHandleGetSceneData_1>:
 80050e2:	b023      	add	sp, #140	@ 0x8c
 80050e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080050e8 <ZbZclHandleSetSceneData>:
 80050e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050ec:	b0a4      	sub	sp, #144	@ 0x90
 80050ee:	0004      	movs	r4, r0
 80050f0:	000d      	movs	r5, r1
 80050f2:	0016      	movs	r6, r2
 80050f4:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d106      	bne.n	8005108 <??ZbZclHandleSetSceneData_0>
 80050fa:	2381      	movs	r3, #129	@ 0x81
 80050fc:	002a      	movs	r2, r5
 80050fe:	0031      	movs	r1, r6
 8005100:	0020      	movs	r0, r4
 8005102:	f00f f897 	bl	8014234 <ZbZclSendDefaultResponse>
 8005106:	e086      	b.n	8005216 <??ZbZclHandleSetSceneData_1>

08005108 <??ZbZclHandleSetSceneData_0>:
 8005108:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800510a:	2805      	cmp	r0, #5
 800510c:	da06      	bge.n	800511c <??ZbZclHandleSetSceneData_2>
 800510e:	2380      	movs	r3, #128	@ 0x80
 8005110:	002a      	movs	r2, r5
 8005112:	0031      	movs	r1, r6
 8005114:	0020      	movs	r0, r4
 8005116:	f00f f88d 	bl	8014234 <ZbZclSendDefaultResponse>
 800511a:	e07c      	b.n	8005216 <??ZbZclHandleSetSceneData_1>

0800511c <??ZbZclHandleSetSceneData_2>:
 800511c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800511e:	f7fb ffb6 	bl	800108e <pletoh32>
 8005122:	0007      	movs	r7, r0
 8005124:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005126:	7900      	ldrb	r0, [r0, #4]
 8005128:	f88d 0000 	strb.w	r0, [sp]
 800512c:	f89d 0000 	ldrb.w	r0, [sp]
 8005130:	1d40      	adds	r0, r0, #5
 8005132:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005134:	4288      	cmp	r0, r1
 8005136:	d206      	bcs.n	8005146 <??ZbZclHandleSetSceneData_3>
 8005138:	2380      	movs	r3, #128	@ 0x80
 800513a:	002a      	movs	r2, r5
 800513c:	0031      	movs	r1, r6
 800513e:	0020      	movs	r0, r4
 8005140:	f00f f878 	bl	8014234 <ZbZclSendDefaultResponse>
 8005144:	e067      	b.n	8005216 <??ZbZclHandleSetSceneData_1>

08005146 <??ZbZclHandleSetSceneData_3>:
 8005146:	003b      	movs	r3, r7
 8005148:	b29b      	uxth	r3, r3
 800514a:	f89d 2000 	ldrb.w	r2, [sp]
 800514e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005150:	1d41      	adds	r1, r0, #5
 8005152:	0020      	movs	r0, r4
 8005154:	f8d4 c064 	ldr.w	ip, [r4, #100]	@ 0x64
 8005158:	47e0      	blx	ip
 800515a:	4680      	mov	r8, r0
 800515c:	f05f 0908 	movs.w	r9, #8
 8005160:	f05f 0a00 	movs.w	sl, #0
 8005164:	f10d 0b04 	add.w	fp, sp, #4
 8005168:	4652      	mov	r2, sl
 800516a:	4649      	mov	r1, r9
 800516c:	4658      	mov	r0, fp
 800516e:	f000 fcd0 	bl	8005b12 <__aeabi_memset>
 8005172:	2000      	movs	r0, #0
 8005174:	f88d 0004 	strb.w	r0, [sp, #4]
 8005178:	2001      	movs	r0, #1
 800517a:	f88d 0005 	strb.w	r0, [sp, #5]
 800517e:	78a8      	ldrb	r0, [r5, #2]
 8005180:	2800      	cmp	r0, #0
 8005182:	d103      	bne.n	800518c <??ZbZclHandleSetSceneData_4>
 8005184:	2001      	movs	r0, #1
 8005186:	f88d 0006 	strb.w	r0, [sp, #6]
 800518a:	e002      	b.n	8005192 <??ZbZclHandleSetSceneData_5>

0800518c <??ZbZclHandleSetSceneData_4>:
 800518c:	2000      	movs	r0, #0
 800518e:	f88d 0006 	strb.w	r0, [sp, #6]

08005192 <??ZbZclHandleSetSceneData_5>:
 8005192:	2001      	movs	r0, #1
 8005194:	f88d 0007 	strb.w	r0, [sp, #7]
 8005198:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 800519c:	f8ad 0008 	strh.w	r0, [sp, #8]
 80051a0:	79a8      	ldrb	r0, [r5, #6]
 80051a2:	f88d 000a 	strb.w	r0, [sp, #10]
 80051a6:	20f1      	movs	r0, #241	@ 0xf1
 80051a8:	f88d 000b 	strb.w	r0, [sp, #11]
 80051ac:	8b62      	ldrh	r2, [r4, #26]
 80051ae:	a910      	add	r1, sp, #64	@ 0x40
 80051b0:	a801      	add	r0, sp, #4
 80051b2:	f7fb fea5 	bl	8000f00 <ZbZclAppendHeader>
 80051b6:	4681      	mov	r9, r0
 80051b8:	f1b9 0f00 	cmp.w	r9, #0
 80051bc:	d506      	bpl.n	80051cc <??ZbZclHandleSetSceneData_6>
 80051be:	2380      	movs	r3, #128	@ 0x80
 80051c0:	002a      	movs	r2, r5
 80051c2:	0031      	movs	r1, r6
 80051c4:	0020      	movs	r0, r4
 80051c6:	f00f f835 	bl	8014234 <ZbZclSendDefaultResponse>
 80051ca:	e024      	b.n	8005216 <??ZbZclHandleSetSceneData_1>

080051cc <??ZbZclHandleSetSceneData_6>:
 80051cc:	46ca      	mov	sl, r9
 80051ce:	a810      	add	r0, sp, #64	@ 0x40
 80051d0:	f800 800a 	strb.w	r8, [r0, sl]
 80051d4:	f11a 0a01 	adds.w	sl, sl, #1
 80051d8:	0032      	movs	r2, r6
 80051da:	a904      	add	r1, sp, #16
 80051dc:	0020      	movs	r0, r4
 80051de:	f7fb f92e 	bl	800043e <ZbZclClusterInitApsdeReq>
 80051e2:	a804      	add	r0, sp, #16
 80051e4:	f116 0110 	adds.w	r1, r6, #16
 80051e8:	2210      	movs	r2, #16
 80051ea:	f011 ff54 	bl	8017096 <__aeabi_memcpy>
 80051ee:	2000      	movs	r0, #0
 80051f0:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80051f4:	2000      	movs	r0, #0
 80051f6:	f88d 0036 	strb.w	r0, [sp, #54]	@ 0x36
 80051fa:	2000      	movs	r0, #0
 80051fc:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 8005200:	a810      	add	r0, sp, #64	@ 0x40
 8005202:	900a      	str	r0, [sp, #40]	@ 0x28
 8005204:	4650      	mov	r0, sl
 8005206:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800520a:	2300      	movs	r3, #0
 800520c:	2200      	movs	r2, #0
 800520e:	a904      	add	r1, sp, #16
 8005210:	68a0      	ldr	r0, [r4, #8]
 8005212:	f00e fb15 	bl	8013840 <ZbApsdeDataReqCallback>

08005216 <??ZbZclHandleSetSceneData_1>:
 8005216:	b025      	add	sp, #148	@ 0x94
 8005218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800521c <ZbZclAppendFloat>:
 800521c:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005220:	b081      	sub	sp, #4
 8005222:	ed2d 8b04 	vpush	{d8-d9}
 8005226:	b084      	sub	sp, #16
 8005228:	eeb0 8a40 	vmov.f32	s16, s0
 800522c:	eef0 8a60 	vmov.f32	s17, s1
 8005230:	000e      	movs	r6, r1
 8005232:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8005236:	2838      	cmp	r0, #56	@ 0x38
 8005238:	d149      	bne.n	80052ce <??ZbZclAppendFloat_0>
 800523a:	2400      	movs	r4, #0
 800523c:	2510      	movs	r5, #16
 800523e:	f07f 070e 	mvns.w	r7, #14
 8005242:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005244:	2802      	cmp	r0, #2
 8005246:	d202      	bcs.n	800524e <??ZbZclAppendFloat_1>
 8005248:	f05f 30ff 	movs.w	r0, #4294967295
 800524c:	e120      	b.n	8005490 <??ZbZclAppendFloat_2>

0800524e <??ZbZclAppendFloat_1>:
 800524e:	003a      	movs	r2, r7
 8005250:	0029      	movs	r1, r5
 8005252:	4668      	mov	r0, sp
 8005254:	eeb0 0a48 	vmov.f32	s0, s16
 8005258:	eef0 0a68 	vmov.f32	s1, s17
 800525c:	f000 fb08 	bl	8005870 <ZbZclFloatFrexp>
 8005260:	eeb0 9a40 	vmov.f32	s18, s0
 8005264:	eef0 9a60 	vmov.f32	s19, s1
 8005268:	f8dd 8000 	ldr.w	r8, [sp]
 800526c:	ebb8 0807 	subs.w	r8, r8, r7
 8005270:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8005274:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 8005278:	ec51 0b19 	vmov	r0, r1, d9
 800527c:	2200      	movs	r2, #0
 800527e:	2300      	movs	r3, #0
 8005280:	f001 f90e 	bl	80064a0 <__aeabi_cdcmpeq>
 8005284:	d210      	bcs.n	80052a8 <??ZbZclAppendFloat_3>
 8005286:	ec51 0b19 	vmov	r0, r1, d9
 800528a:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800528e:	f001 f941 	bl	8006514 <__aeabi_d2iz>
 8005292:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005296:	fb10 f101 	smulbb	r1, r0, r1
 800529a:	0589      	lsls	r1, r1, #22
 800529c:	0d89      	lsrs	r1, r1, #22
 800529e:	ea58 0101 	orrs.w	r1, r8, r1
 80052a2:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 80052a6:	e00b      	b.n	80052c0 <??ZbZclAppendFloat_4>

080052a8 <??ZbZclAppendFloat_3>:
 80052a8:	ec51 0b19 	vmov	r0, r1, d9
 80052ac:	f001 f932 	bl	8006514 <__aeabi_d2iz>
 80052b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80052b4:	fb10 f101 	smulbb	r1, r0, r1
 80052b8:	0589      	lsls	r1, r1, #22
 80052ba:	0d89      	lsrs	r1, r1, #22
 80052bc:	ea58 0101 	orrs.w	r1, r8, r1

080052c0 <??ZbZclAppendFloat_4>:
 80052c0:	7031      	strb	r1, [r6, #0]
 80052c2:	0008      	movs	r0, r1
 80052c4:	b280      	uxth	r0, r0
 80052c6:	0a00      	lsrs	r0, r0, #8
 80052c8:	7070      	strb	r0, [r6, #1]
 80052ca:	2002      	movs	r0, #2
 80052cc:	e0e0      	b.n	8005490 <??ZbZclAppendFloat_2>

080052ce <??ZbZclAppendFloat_0>:
 80052ce:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 80052d2:	2839      	cmp	r0, #57	@ 0x39
 80052d4:	d14e      	bne.n	8005374 <??ZbZclAppendFloat_5>
 80052d6:	2400      	movs	r4, #0
 80052d8:	2580      	movs	r5, #128	@ 0x80
 80052da:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 80052de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80052e0:	2804      	cmp	r0, #4
 80052e2:	d202      	bcs.n	80052ea <??ZbZclAppendFloat_6>
 80052e4:	f05f 30ff 	movs.w	r0, #4294967295
 80052e8:	e0d2      	b.n	8005490 <??ZbZclAppendFloat_2>

080052ea <??ZbZclAppendFloat_6>:
 80052ea:	003a      	movs	r2, r7
 80052ec:	0029      	movs	r1, r5
 80052ee:	4668      	mov	r0, sp
 80052f0:	eeb0 0a48 	vmov.f32	s0, s16
 80052f4:	eef0 0a68 	vmov.f32	s1, s17
 80052f8:	f000 faba 	bl	8005870 <ZbZclFloatFrexp>
 80052fc:	eeb0 9a40 	vmov.f32	s18, s0
 8005300:	eef0 9a60 	vmov.f32	s19, s1
 8005304:	f8dd 8000 	ldr.w	r8, [sp]
 8005308:	ebb8 0807 	subs.w	r8, r8, r7
 800530c:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 8005310:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 8005314:	ec51 0b19 	vmov	r0, r1, d9
 8005318:	2200      	movs	r2, #0
 800531a:	2300      	movs	r3, #0
 800531c:	f001 f8c0 	bl	80064a0 <__aeabi_cdcmpeq>
 8005320:	d210      	bcs.n	8005344 <??ZbZclAppendFloat_7>
 8005322:	ec51 0b19 	vmov	r0, r1, d9
 8005326:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800532a:	f001 f91b 	bl	8006564 <__aeabi_d2uiz>
 800532e:	0001      	movs	r1, r0
 8005330:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8005334:	4341      	muls	r1, r0
 8005336:	0249      	lsls	r1, r1, #9
 8005338:	0a49      	lsrs	r1, r1, #9
 800533a:	ea58 0101 	orrs.w	r1, r8, r1
 800533e:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 8005342:	e00b      	b.n	800535c <??ZbZclAppendFloat_8>

08005344 <??ZbZclAppendFloat_7>:
 8005344:	ec51 0b19 	vmov	r0, r1, d9
 8005348:	f001 f90c 	bl	8006564 <__aeabi_d2uiz>
 800534c:	0001      	movs	r1, r0
 800534e:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8005352:	4341      	muls	r1, r0
 8005354:	0249      	lsls	r1, r1, #9
 8005356:	0a49      	lsrs	r1, r1, #9
 8005358:	ea58 0101 	orrs.w	r1, r8, r1

0800535c <??ZbZclAppendFloat_8>:
 800535c:	7031      	strb	r1, [r6, #0]
 800535e:	0008      	movs	r0, r1
 8005360:	0a00      	lsrs	r0, r0, #8
 8005362:	7070      	strb	r0, [r6, #1]
 8005364:	0008      	movs	r0, r1
 8005366:	0c00      	lsrs	r0, r0, #16
 8005368:	70b0      	strb	r0, [r6, #2]
 800536a:	0008      	movs	r0, r1
 800536c:	0e00      	lsrs	r0, r0, #24
 800536e:	70f0      	strb	r0, [r6, #3]
 8005370:	2004      	movs	r0, #4
 8005372:	e08d      	b.n	8005490 <??ZbZclAppendFloat_2>

08005374 <??ZbZclAppendFloat_5>:
 8005374:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8005378:	283a      	cmp	r0, #58	@ 0x3a
 800537a:	f040 8087 	bne.w	800548c <??ZbZclAppendFloat_9>
 800537e:	2400      	movs	r4, #0
 8005380:	2500      	movs	r5, #0
 8005382:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8005386:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8005acc <??DataTable3>
 800538a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800538c:	2808      	cmp	r0, #8
 800538e:	d202      	bcs.n	8005396 <??ZbZclAppendFloat_10>
 8005390:	f05f 30ff 	movs.w	r0, #4294967295
 8005394:	e07c      	b.n	8005490 <??ZbZclAppendFloat_2>

08005396 <??ZbZclAppendFloat_10>:
 8005396:	4642      	mov	r2, r8
 8005398:	0039      	movs	r1, r7
 800539a:	4668      	mov	r0, sp
 800539c:	eeb0 0a48 	vmov.f32	s0, s16
 80053a0:	eef0 0a68 	vmov.f32	s1, s17
 80053a4:	f000 fa64 	bl	8005870 <ZbZclFloatFrexp>
 80053a8:	eeb0 9a40 	vmov.f32	s18, s0
 80053ac:	eef0 9a60 	vmov.f32	s19, s1
 80053b0:	9800      	ldr	r0, [sp, #0]
 80053b2:	17c1      	asrs	r1, r0, #31
 80053b4:	ea5f 79e8 	movs.w	r9, r8, asr #31
 80053b8:	ebb0 0008 	subs.w	r0, r0, r8
 80053bc:	eb71 0109 	sbcs.w	r1, r1, r9
 80053c0:	0501      	lsls	r1, r0, #20
 80053c2:	2000      	movs	r0, #0
 80053c4:	2200      	movs	r2, #0
 80053c6:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 8005ad0 <??DataTable3_1>
 80053ca:	4010      	ands	r0, r2
 80053cc:	4019      	ands	r1, r3
 80053ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053d2:	ec51 0b19 	vmov	r0, r1, d9
 80053d6:	2200      	movs	r2, #0
 80053d8:	2300      	movs	r3, #0
 80053da:	f001 f861 	bl	80064a0 <__aeabi_cdcmpeq>
 80053de:	d21f      	bcs.n	8005420 <??ZbZclAppendFloat_11>
 80053e0:	ec51 0b19 	vmov	r0, r1, d9
 80053e4:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80053e8:	f001 f90c 	bl	8006604 <__aeabi_d2ulz>
 80053ec:	2200      	movs	r2, #0
 80053ee:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 80053f2:	fba2 ab00 	umull	sl, fp, r2, r0
 80053f6:	fb02 bb01 	mla	fp, r2, r1, fp
 80053fa:	fb03 bb00 	mla	fp, r3, r0, fp
 80053fe:	f05f 30ff 	movs.w	r0, #4294967295
 8005402:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8005ad4 <??DataTable3_2>
 8005406:	ea1a 0000 	ands.w	r0, sl, r0
 800540a:	ea1b 0101 	ands.w	r1, fp, r1
 800540e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005412:	4310      	orrs	r0, r2
 8005414:	4319      	orrs	r1, r3
 8005416:	f050 0200 	orrs.w	r2, r0, #0
 800541a:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 800541e:	e018      	b.n	8005452 <??ZbZclAppendFloat_12>

08005420 <??ZbZclAppendFloat_11>:
 8005420:	ec51 0b19 	vmov	r0, r1, d9
 8005424:	f001 f8ee 	bl	8006604 <__aeabi_d2ulz>
 8005428:	2200      	movs	r2, #0
 800542a:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 800542e:	fba2 ab00 	umull	sl, fp, r2, r0
 8005432:	fb02 bb01 	mla	fp, r2, r1, fp
 8005436:	fb03 bb00 	mla	fp, r3, r0, fp
 800543a:	f05f 30ff 	movs.w	r0, #4294967295
 800543e:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8005ad4 <??DataTable3_2>
 8005442:	ea1a 0000 	ands.w	r0, sl, r0
 8005446:	ea1b 0101 	ands.w	r1, fp, r1
 800544a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800544e:	4302      	orrs	r2, r0
 8005450:	430b      	orrs	r3, r1

08005452 <??ZbZclAppendFloat_12>:
 8005452:	7032      	strb	r2, [r6, #0]
 8005454:	0010      	movs	r0, r2
 8005456:	b280      	uxth	r0, r0
 8005458:	0a00      	lsrs	r0, r0, #8
 800545a:	7070      	strb	r0, [r6, #1]
 800545c:	0010      	movs	r0, r2
 800545e:	0c00      	lsrs	r0, r0, #16
 8005460:	70b0      	strb	r0, [r6, #2]
 8005462:	0010      	movs	r0, r2
 8005464:	0e00      	lsrs	r0, r0, #24
 8005466:	70f0      	strb	r0, [r6, #3]
 8005468:	7133      	strb	r3, [r6, #4]
 800546a:	0010      	movs	r0, r2
 800546c:	0019      	movs	r1, r3
 800546e:	0a08      	lsrs	r0, r1, #8
 8005470:	2100      	movs	r1, #0
 8005472:	7170      	strb	r0, [r6, #5]
 8005474:	0010      	movs	r0, r2
 8005476:	0019      	movs	r1, r3
 8005478:	0c08      	lsrs	r0, r1, #16
 800547a:	2100      	movs	r1, #0
 800547c:	71b0      	strb	r0, [r6, #6]
 800547e:	0010      	movs	r0, r2
 8005480:	0019      	movs	r1, r3
 8005482:	0e08      	lsrs	r0, r1, #24
 8005484:	2100      	movs	r1, #0
 8005486:	71f0      	strb	r0, [r6, #7]
 8005488:	2008      	movs	r0, #8
 800548a:	e001      	b.n	8005490 <??ZbZclAppendFloat_2>

0800548c <??ZbZclAppendFloat_9>:
 800548c:	f05f 30ff 	movs.w	r0, #4294967295

08005490 <??ZbZclAppendFloat_2>:
 8005490:	b004      	add	sp, #16
 8005492:	ecbd 8b04 	vpop	{d8-d9}
 8005496:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800549a <ZbZclParseFloat>:
 800549a:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549e:	ed2d 8b02 	vpush	{d8}
 80054a2:	000e      	movs	r6, r1
 80054a4:	4691      	mov	r9, r2
 80054a6:	2000      	movs	r0, #0
 80054a8:	f889 0000 	strb.w	r0, [r9]
 80054ac:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80054b0:	2838      	cmp	r0, #56	@ 0x38
 80054b2:	d006      	beq.n	80054c2 <??ZbZclParseFloat_0>
 80054b4:	f0c0 8138 	bcc.w	8005728 <??ZbZclParseFloat_1>
 80054b8:	283a      	cmp	r0, #58	@ 0x3a
 80054ba:	f000 80ad 	beq.w	8005618 <??ZbZclParseFloat_2>
 80054be:	d354      	bcc.n	800556a <??ZbZclParseFloat_3>
 80054c0:	e132      	b.n	8005728 <??ZbZclParseFloat_1>

080054c2 <??ZbZclParseFloat_0>:
 80054c2:	0030      	movs	r0, r6
 80054c4:	f7fb fdd2 	bl	800106c <pletoh16>
 80054c8:	0004      	movs	r4, r0
 80054ca:	0020      	movs	r0, r4
 80054cc:	b280      	uxth	r0, r0
 80054ce:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 80054d2:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 80054d6:	d121      	bne.n	800551c <??ZbZclParseFloat_4>
 80054d8:	05a0      	lsls	r0, r4, #22
 80054da:	d008      	beq.n	80054ee <??ZbZclParseFloat_5>
 80054dc:	2000      	movs	r0, #0
 80054de:	2100      	movs	r1, #0
 80054e0:	2200      	movs	r2, #0
 80054e2:	2300      	movs	r3, #0
 80054e4:	f000 fea6 	bl	8006234 <__aeabi_ddiv>
 80054e8:	ec41 0b10 	vmov	d0, r0, r1
 80054ec:	e127      	b.n	800573e <??ZbZclParseFloat_6>

080054ee <??ZbZclParseFloat_5>:
 80054ee:	0420      	lsls	r0, r4, #16
 80054f0:	d50a      	bpl.n	8005508 <??ZbZclParseFloat_7>
 80054f2:	2000      	movs	r0, #0
 80054f4:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 8005ad8 <??DataTable3_3>
 80054f8:	2200      	movs	r2, #0
 80054fa:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80054fe:	f000 fe99 	bl	8006234 <__aeabi_ddiv>
 8005502:	ec41 0b10 	vmov	d0, r0, r1
 8005506:	e008      	b.n	800551a <??ZbZclParseFloat_8>

08005508 <??ZbZclParseFloat_7>:
 8005508:	2000      	movs	r0, #0
 800550a:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 8005ad8 <??DataTable3_3>
 800550e:	2200      	movs	r2, #0
 8005510:	2300      	movs	r3, #0
 8005512:	f000 fe8f 	bl	8006234 <__aeabi_ddiv>
 8005516:	ec41 0b10 	vmov	d0, r0, r1

0800551a <??ZbZclParseFloat_8>:
 800551a:	e110      	b.n	800573e <??ZbZclParseFloat_6>

0800551c <??ZbZclParseFloat_4>:
 800551c:	f3c4 2884 	ubfx	r8, r4, #10, #5
 8005520:	4645      	mov	r5, r8
 8005522:	b2ad      	uxth	r5, r5
 8005524:	3d0f      	subs	r5, #15
 8005526:	3d0a      	subs	r5, #10
 8005528:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 800552c:	d004      	beq.n	8005538 <??ZbZclParseFloat_9>
 800552e:	05a7      	lsls	r7, r4, #22
 8005530:	0dbf      	lsrs	r7, r7, #22
 8005532:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 8005536:	e002      	b.n	800553e <??ZbZclParseFloat_10>

08005538 <??ZbZclParseFloat_9>:
 8005538:	1c6d      	adds	r5, r5, #1
 800553a:	05a7      	lsls	r7, r4, #22
 800553c:	0dbf      	lsrs	r7, r7, #22

0800553e <??ZbZclParseFloat_10>:
 800553e:	0038      	movs	r0, r7
 8005540:	b280      	uxth	r0, r0
 8005542:	f000 fcd3 	bl	8005eec <__aeabi_ui2d>
 8005546:	ec41 0b18 	vmov	d8, r0, r1
 800554a:	0420      	lsls	r0, r4, #16
 800554c:	d505      	bpl.n	800555a <??ZbZclParseFloat_11>
 800554e:	ec51 0b18 	vmov	r0, r1, d8
 8005552:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005556:	ec41 0b18 	vmov	d8, r0, r1

0800555a <??ZbZclParseFloat_11>:
 800555a:	0028      	movs	r0, r5
 800555c:	eeb0 0a48 	vmov.f32	s0, s16
 8005560:	eef0 0a68 	vmov.f32	s1, s17
 8005564:	f000 f8ef 	bl	8005746 <ZbZclFloatLdexp>
 8005568:	e0e9      	b.n	800573e <??ZbZclParseFloat_6>

0800556a <??ZbZclParseFloat_3>:
 800556a:	0030      	movs	r0, r6
 800556c:	f7fb fd8f 	bl	800108e <pletoh32>
 8005570:	0004      	movs	r4, r0
 8005572:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 8005576:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800557a:	d121      	bne.n	80055c0 <??ZbZclParseFloat_12>
 800557c:	0260      	lsls	r0, r4, #9
 800557e:	d008      	beq.n	8005592 <??ZbZclParseFloat_13>
 8005580:	2000      	movs	r0, #0
 8005582:	2100      	movs	r1, #0
 8005584:	2200      	movs	r2, #0
 8005586:	2300      	movs	r3, #0
 8005588:	f000 fe54 	bl	8006234 <__aeabi_ddiv>
 800558c:	ec41 0b10 	vmov	d0, r0, r1
 8005590:	e0d5      	b.n	800573e <??ZbZclParseFloat_6>

08005592 <??ZbZclParseFloat_13>:
 8005592:	2c00      	cmp	r4, #0
 8005594:	d50a      	bpl.n	80055ac <??ZbZclParseFloat_14>
 8005596:	2000      	movs	r0, #0
 8005598:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 8005ad8 <??DataTable3_3>
 800559c:	2200      	movs	r2, #0
 800559e:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 80055a2:	f000 fe47 	bl	8006234 <__aeabi_ddiv>
 80055a6:	ec41 0b10 	vmov	d0, r0, r1
 80055aa:	e008      	b.n	80055be <??ZbZclParseFloat_15>

080055ac <??ZbZclParseFloat_14>:
 80055ac:	2000      	movs	r0, #0
 80055ae:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 8005ad8 <??DataTable3_3>
 80055b2:	2200      	movs	r2, #0
 80055b4:	2300      	movs	r3, #0
 80055b6:	f000 fe3d 	bl	8006234 <__aeabi_ddiv>
 80055ba:	ec41 0b10 	vmov	d0, r0, r1

080055be <??ZbZclParseFloat_15>:
 80055be:	e0be      	b.n	800573e <??ZbZclParseFloat_6>

080055c0 <??ZbZclParseFloat_12>:
 80055c0:	0025      	movs	r5, r4
 80055c2:	0ded      	lsrs	r5, r5, #23
 80055c4:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 80055c8:	002f      	movs	r7, r5
 80055ca:	b2bf      	uxth	r7, r7
 80055cc:	3f7f      	subs	r7, #127	@ 0x7f
 80055ce:	3f17      	subs	r7, #23
 80055d0:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 80055d4:	d006      	beq.n	80055e4 <??ZbZclParseFloat_16>
 80055d6:	ea5f 2844 	movs.w	r8, r4, lsl #9
 80055da:	ea5f 2858 	movs.w	r8, r8, lsr #9
 80055de:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 80055e2:	e004      	b.n	80055ee <??ZbZclParseFloat_17>

080055e4 <??ZbZclParseFloat_16>:
 80055e4:	1c7f      	adds	r7, r7, #1
 80055e6:	ea5f 2844 	movs.w	r8, r4, lsl #9
 80055ea:	ea5f 2858 	movs.w	r8, r8, lsr #9

080055ee <??ZbZclParseFloat_17>:
 80055ee:	4640      	mov	r0, r8
 80055f0:	f000 fc7c 	bl	8005eec <__aeabi_ui2d>
 80055f4:	ec41 0b18 	vmov	d8, r0, r1
 80055f8:	2c00      	cmp	r4, #0
 80055fa:	d505      	bpl.n	8005608 <??ZbZclParseFloat_18>
 80055fc:	ec51 0b18 	vmov	r0, r1, d8
 8005600:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005604:	ec41 0b18 	vmov	d8, r0, r1

08005608 <??ZbZclParseFloat_18>:
 8005608:	0038      	movs	r0, r7
 800560a:	eeb0 0a48 	vmov.f32	s0, s16
 800560e:	eef0 0a68 	vmov.f32	s1, s17
 8005612:	f000 f898 	bl	8005746 <ZbZclFloatLdexp>
 8005616:	e092      	b.n	800573e <??ZbZclParseFloat_6>

08005618 <??ZbZclParseFloat_2>:
 8005618:	0030      	movs	r0, r6
 800561a:	f7fb fd65 	bl	80010e8 <pletoh64>
 800561e:	0004      	movs	r4, r0
 8005620:	000d      	movs	r5, r1
 8005622:	2000      	movs	r0, #0
 8005624:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 8005ad0 <??DataTable3_1>
 8005628:	ea14 0200 	ands.w	r2, r4, r0
 800562c:	ea15 0301 	ands.w	r3, r5, r1
 8005630:	f05f 0a00 	movs.w	sl, #0
 8005634:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 8005ad0 <??DataTable3_1>
 8005638:	455b      	cmp	r3, fp
 800563a:	d131      	bne.n	80056a0 <??ZbZclParseFloat_19>
 800563c:	4552      	cmp	r2, sl
 800563e:	d12f      	bne.n	80056a0 <??ZbZclParseFloat_19>
 8005640:	f05f 30ff 	movs.w	r0, #4294967295
 8005644:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8005ad4 <??DataTable3_2>
 8005648:	4020      	ands	r0, r4
 800564a:	4029      	ands	r1, r5
 800564c:	2900      	cmp	r1, #0
 800564e:	d101      	bne.n	8005654 <??ZbZclParseFloat_20>
 8005650:	2800      	cmp	r0, #0
 8005652:	d008      	beq.n	8005666 <??ZbZclParseFloat_21>

08005654 <??ZbZclParseFloat_20>:
 8005654:	2000      	movs	r0, #0
 8005656:	2100      	movs	r1, #0
 8005658:	2200      	movs	r2, #0
 800565a:	2300      	movs	r3, #0
 800565c:	f000 fdea 	bl	8006234 <__aeabi_ddiv>
 8005660:	ec41 0b10 	vmov	d0, r0, r1
 8005664:	e06b      	b.n	800573e <??ZbZclParseFloat_6>

08005666 <??ZbZclParseFloat_21>:
 8005666:	f014 0000 	ands.w	r0, r4, #0
 800566a:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 800566e:	2900      	cmp	r1, #0
 8005670:	d101      	bne.n	8005676 <??ZbZclParseFloat_22>
 8005672:	2800      	cmp	r0, #0
 8005674:	d00a      	beq.n	800568c <??ZbZclParseFloat_23>

08005676 <??ZbZclParseFloat_22>:
 8005676:	2000      	movs	r0, #0
 8005678:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 8005ad8 <??DataTable3_3>
 800567c:	2200      	movs	r2, #0
 800567e:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8005682:	f000 fdd7 	bl	8006234 <__aeabi_ddiv>
 8005686:	ec41 0b10 	vmov	d0, r0, r1
 800568a:	e008      	b.n	800569e <??ZbZclParseFloat_24>

0800568c <??ZbZclParseFloat_23>:
 800568c:	2000      	movs	r0, #0
 800568e:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 8005ad8 <??DataTable3_3>
 8005692:	2200      	movs	r2, #0
 8005694:	2300      	movs	r3, #0
 8005696:	f000 fdcd 	bl	8006234 <__aeabi_ddiv>
 800569a:	ec41 0b10 	vmov	d0, r0, r1

0800569e <??ZbZclParseFloat_24>:
 800569e:	e04e      	b.n	800573e <??ZbZclParseFloat_6>

080056a0 <??ZbZclParseFloat_19>:
 80056a0:	0022      	movs	r2, r4
 80056a2:	002b      	movs	r3, r5
 80056a4:	0d1a      	lsrs	r2, r3, #20
 80056a6:	2300      	movs	r3, #0
 80056a8:	4690      	mov	r8, r2
 80056aa:	ea5f 5848 	movs.w	r8, r8, lsl #21
 80056ae:	ea5f 5858 	movs.w	r8, r8, lsr #21
 80056b2:	4647      	mov	r7, r8
 80056b4:	b2bf      	uxth	r7, r7
 80056b6:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 80056ba:	3f34      	subs	r7, #52	@ 0x34
 80056bc:	4020      	ands	r0, r4
 80056be:	4029      	ands	r1, r5
 80056c0:	2900      	cmp	r1, #0
 80056c2:	d101      	bne.n	80056c8 <??ZbZclParseFloat_25>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d00a      	beq.n	80056de <??ZbZclParseFloat_26>

080056c8 <??ZbZclParseFloat_25>:
 80056c8:	f05f 30ff 	movs.w	r0, #4294967295
 80056cc:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8005ad4 <??DataTable3_2>
 80056d0:	4020      	ands	r0, r4
 80056d2:	4029      	ands	r1, r5
 80056d4:	f110 0a00 	adds.w	sl, r0, #0
 80056d8:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 80056dc:	e008      	b.n	80056f0 <??ZbZclParseFloat_27>

080056de <??ZbZclParseFloat_26>:
 80056de:	1c7f      	adds	r7, r7, #1
 80056e0:	f05f 30ff 	movs.w	r0, #4294967295
 80056e4:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8005ad4 <??DataTable3_2>
 80056e8:	ea14 0a00 	ands.w	sl, r4, r0
 80056ec:	ea15 0b01 	ands.w	fp, r5, r1

080056f0 <??ZbZclParseFloat_27>:
 80056f0:	4650      	mov	r0, sl
 80056f2:	4659      	mov	r1, fp
 80056f4:	f000 fc3e 	bl	8005f74 <__aeabi_ul2d>
 80056f8:	ec41 0b18 	vmov	d8, r0, r1
 80056fc:	f014 0000 	ands.w	r0, r4, #0
 8005700:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8005704:	2900      	cmp	r1, #0
 8005706:	d101      	bne.n	800570c <??ZbZclParseFloat_28>
 8005708:	2800      	cmp	r0, #0
 800570a:	d005      	beq.n	8005718 <??ZbZclParseFloat_29>

0800570c <??ZbZclParseFloat_28>:
 800570c:	ec51 0b18 	vmov	r0, r1, d8
 8005710:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005714:	ec41 0b18 	vmov	d8, r0, r1

08005718 <??ZbZclParseFloat_29>:
 8005718:	0038      	movs	r0, r7
 800571a:	eeb0 0a48 	vmov.f32	s0, s16
 800571e:	eef0 0a68 	vmov.f32	s1, s17
 8005722:	f000 f810 	bl	8005746 <ZbZclFloatLdexp>
 8005726:	e00a      	b.n	800573e <??ZbZclParseFloat_6>

08005728 <??ZbZclParseFloat_1>:
 8005728:	208d      	movs	r0, #141	@ 0x8d
 800572a:	f889 0000 	strb.w	r0, [r9]
 800572e:	2000      	movs	r0, #0
 8005730:	2100      	movs	r1, #0
 8005732:	2200      	movs	r2, #0
 8005734:	2300      	movs	r3, #0
 8005736:	f000 fd7d 	bl	8006234 <__aeabi_ddiv>
 800573a:	ec41 0b10 	vmov	d0, r0, r1

0800573e <??ZbZclParseFloat_6>:
 800573e:	ecbd 8b02 	vpop	{d8}
 8005742:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005746 <ZbZclFloatLdexp>:
 8005746:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	ed2d 8b04 	vpush	{d8-d9}
 800574e:	b084      	sub	sp, #16
 8005750:	eeb0 8a40 	vmov.f32	s16, s0
 8005754:	eef0 8a60 	vmov.f32	s17, s1
 8005758:	0006      	movs	r6, r0
 800575a:	2730      	movs	r7, #48	@ 0x30
 800575c:	ec53 2b18 	vmov	r2, r3, d8
 8005760:	ec51 0b18 	vmov	r0, r1, d8
 8005764:	f000 fe9c 	bl	80064a0 <__aeabi_cdcmpeq>
 8005768:	d10c      	bne.n	8005784 <??ZbZclFloatLdexp_0>
 800576a:	ec53 2b18 	vmov	r2, r3, d8
 800576e:	ec51 0b18 	vmov	r0, r1, d8
 8005772:	f000 fa7f 	bl	8005c74 <__adddf3>
 8005776:	0002      	movs	r2, r0
 8005778:	000b      	movs	r3, r1
 800577a:	ec51 0b18 	vmov	r0, r1, d8
 800577e:	f000 fe8f 	bl	80064a0 <__aeabi_cdcmpeq>
 8005782:	d104      	bne.n	800578e <??ZbZclFloatLdexp_1>

08005784 <??ZbZclFloatLdexp_0>:
 8005784:	eeb0 0a48 	vmov.f32	s0, s16
 8005788:	eef0 0a68 	vmov.f32	s1, s17
 800578c:	e06b      	b.n	8005866 <??ZbZclFloatLdexp_2>

0800578e <??ZbZclFloatLdexp_1>:
 800578e:	2e01      	cmp	r6, #1
 8005790:	db2c      	blt.n	80057ec <??ZbZclFloatLdexp_3>
 8005792:	2401      	movs	r4, #1
 8005794:	2500      	movs	r5, #0
 8005796:	0020      	movs	r0, r4
 8005798:	0029      	movs	r1, r5
 800579a:	003a      	movs	r2, r7
 800579c:	f000 fa58 	bl	8005c50 <__aeabi_llsl>
 80057a0:	4680      	mov	r8, r0
 80057a2:	4689      	mov	r9, r1
 80057a4:	4640      	mov	r0, r8
 80057a6:	4649      	mov	r1, r9
 80057a8:	f000 fbe4 	bl	8005f74 <__aeabi_ul2d>
 80057ac:	ec41 0b19 	vmov	d9, r0, r1

080057b0 <??ZbZclFloatLdexp_4>:
 80057b0:	42be      	cmp	r6, r7
 80057b2:	db09      	blt.n	80057c8 <??ZbZclFloatLdexp_5>
 80057b4:	ec51 0b18 	vmov	r0, r1, d8
 80057b8:	ec53 2b19 	vmov	r2, r3, d9
 80057bc:	f000 fc10 	bl	8005fe0 <__aeabi_dmul>
 80057c0:	ec41 0b18 	vmov	d8, r0, r1
 80057c4:	1bf6      	subs	r6, r6, r7
 80057c6:	e7f3      	b.n	80057b0 <??ZbZclFloatLdexp_4>

080057c8 <??ZbZclFloatLdexp_5>:
 80057c8:	0020      	movs	r0, r4
 80057ca:	0029      	movs	r1, r5
 80057cc:	0032      	movs	r2, r6
 80057ce:	f000 fa3f 	bl	8005c50 <__aeabi_llsl>
 80057d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057da:	f000 fbcb 	bl	8005f74 <__aeabi_ul2d>
 80057de:	ec53 2b18 	vmov	r2, r3, d8
 80057e2:	f000 fbfd 	bl	8005fe0 <__aeabi_dmul>
 80057e6:	ec41 0b18 	vmov	d8, r0, r1
 80057ea:	e038      	b.n	800585e <??ZbZclFloatLdexp_6>

080057ec <??ZbZclFloatLdexp_3>:
 80057ec:	2e00      	cmp	r6, #0
 80057ee:	d536      	bpl.n	800585e <??ZbZclFloatLdexp_6>
 80057f0:	2401      	movs	r4, #1
 80057f2:	2500      	movs	r5, #0
 80057f4:	0020      	movs	r0, r4
 80057f6:	0029      	movs	r1, r5
 80057f8:	003a      	movs	r2, r7
 80057fa:	f000 fa29 	bl	8005c50 <__aeabi_llsl>
 80057fe:	4682      	mov	sl, r0
 8005800:	468b      	mov	fp, r1
 8005802:	4650      	mov	r0, sl
 8005804:	4659      	mov	r1, fp
 8005806:	f000 fbb5 	bl	8005f74 <__aeabi_ul2d>
 800580a:	0002      	movs	r2, r0
 800580c:	000b      	movs	r3, r1
 800580e:	2000      	movs	r0, #0
 8005810:	49b1      	ldr	r1, [pc, #708]	@ (8005ad8 <??DataTable3_3>)
 8005812:	f000 fd0f 	bl	8006234 <__aeabi_ddiv>
 8005816:	ec41 0b19 	vmov	d9, r0, r1
 800581a:	f1d6 0800 	rsbs	r8, r6, #0

0800581e <??ZbZclFloatLdexp_7>:
 800581e:	45b8      	cmp	r8, r7
 8005820:	db0a      	blt.n	8005838 <??ZbZclFloatLdexp_8>
 8005822:	ec53 2b18 	vmov	r2, r3, d8
 8005826:	ec51 0b19 	vmov	r0, r1, d9
 800582a:	f000 fbd9 	bl	8005fe0 <__aeabi_dmul>
 800582e:	ec41 0b18 	vmov	d8, r0, r1
 8005832:	ebb8 0807 	subs.w	r8, r8, r7
 8005836:	e7f2      	b.n	800581e <??ZbZclFloatLdexp_7>

08005838 <??ZbZclFloatLdexp_8>:
 8005838:	0020      	movs	r0, r4
 800583a:	0029      	movs	r1, r5
 800583c:	4642      	mov	r2, r8
 800583e:	f000 fa07 	bl	8005c50 <__aeabi_llsl>
 8005842:	e9cd 0100 	strd	r0, r1, [sp]
 8005846:	e9dd 0100 	ldrd	r0, r1, [sp]
 800584a:	f000 fb93 	bl	8005f74 <__aeabi_ul2d>
 800584e:	0002      	movs	r2, r0
 8005850:	000b      	movs	r3, r1
 8005852:	ec51 0b18 	vmov	r0, r1, d8
 8005856:	f000 fced 	bl	8006234 <__aeabi_ddiv>
 800585a:	ec41 0b18 	vmov	d8, r0, r1

0800585e <??ZbZclFloatLdexp_6>:
 800585e:	eeb0 0a48 	vmov.f32	s0, s16
 8005862:	eef0 0a68 	vmov.f32	s1, s17

08005866 <??ZbZclFloatLdexp_2>:
 8005866:	b004      	add	sp, #16
 8005868:	ecbd 8b04 	vpop	{d8-d9}
 800586c:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005870 <ZbZclFloatFrexp>:
 8005870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	ed2d 8b06 	vpush	{d8-d10}
 8005878:	b086      	sub	sp, #24
 800587a:	eeb0 8a40 	vmov.f32	s16, s0
 800587e:	eef0 8a60 	vmov.f32	s17, s1
 8005882:	4682      	mov	sl, r0
 8005884:	000e      	movs	r6, r1
 8005886:	4693      	mov	fp, r2
 8005888:	2730      	movs	r7, #48	@ 0x30
 800588a:	f05f 0800 	movs.w	r8, #0
 800588e:	f05f 0901 	movs.w	r9, #1
 8005892:	eeb0 9a48 	vmov.f32	s18, s16
 8005896:	eef0 9a68 	vmov.f32	s19, s17
 800589a:	ec51 0b18 	vmov	r0, r1, d8
 800589e:	2200      	movs	r2, #0
 80058a0:	2300      	movs	r3, #0
 80058a2:	f000 fdfd 	bl	80064a0 <__aeabi_cdcmpeq>
 80058a6:	d208      	bcs.n	80058ba <??ZbZclFloatFrexp_0>
 80058a8:	f05f 30ff 	movs.w	r0, #4294967295
 80058ac:	4681      	mov	r9, r0
 80058ae:	ec51 0b19 	vmov	r0, r1, d9
 80058b2:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 80058b6:	ec41 0b19 	vmov	d9, r0, r1

080058ba <??ZbZclFloatFrexp_0>:
 80058ba:	ec53 2b19 	vmov	r2, r3, d9
 80058be:	ec51 0b19 	vmov	r0, r1, d9
 80058c2:	f000 fded 	bl	80064a0 <__aeabi_cdcmpeq>
 80058c6:	d00b      	beq.n	80058e0 <??ZbZclFloatFrexp_1>
 80058c8:	f8ca 6000 	str.w	r6, [sl]
 80058cc:	4648      	mov	r0, r9
 80058ce:	f000 fb1d 	bl	8005f0c <__aeabi_i2d>
 80058d2:	2200      	movs	r2, #0
 80058d4:	4b81      	ldr	r3, [pc, #516]	@ (8005adc <??DataTable3_4>)
 80058d6:	f000 fb83 	bl	8005fe0 <__aeabi_dmul>
 80058da:	ec41 0b10 	vmov	d0, r0, r1
 80058de:	e0ef      	b.n	8005ac0 <??ZbZclFloatFrexp_2>

080058e0 <??ZbZclFloatFrexp_1>:
 80058e0:	2000      	movs	r0, #0
 80058e2:	497d      	ldr	r1, [pc, #500]	@ (8005ad8 <??DataTable3_3>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	2300      	movs	r3, #0
 80058e8:	f000 fca4 	bl	8006234 <__aeabi_ddiv>
 80058ec:	ec53 2b19 	vmov	r2, r3, d9
 80058f0:	f000 fdd6 	bl	80064a0 <__aeabi_cdcmpeq>
 80058f4:	d00b      	beq.n	800590e <??ZbZclFloatFrexp_3>
 80058f6:	2000      	movs	r0, #0
 80058f8:	4977      	ldr	r1, [pc, #476]	@ (8005ad8 <??DataTable3_3>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8005900:	f000 fc98 	bl	8006234 <__aeabi_ddiv>
 8005904:	ec53 2b19 	vmov	r2, r3, d9
 8005908:	f000 fdca 	bl	80064a0 <__aeabi_cdcmpeq>
 800590c:	d107      	bne.n	800591e <??ZbZclFloatFrexp_4>

0800590e <??ZbZclFloatFrexp_3>:
 800590e:	f8ca 6000 	str.w	r6, [sl]
 8005912:	4648      	mov	r0, r9
 8005914:	f000 fafa 	bl	8005f0c <__aeabi_i2d>
 8005918:	ec41 0b10 	vmov	d0, r0, r1
 800591c:	e0d0      	b.n	8005ac0 <??ZbZclFloatFrexp_2>

0800591e <??ZbZclFloatFrexp_4>:
 800591e:	ec53 2b19 	vmov	r2, r3, d9
 8005922:	ec51 0b19 	vmov	r0, r1, d9
 8005926:	f000 f9a5 	bl	8005c74 <__adddf3>
 800592a:	ec53 2b19 	vmov	r2, r3, d9
 800592e:	f000 fdb7 	bl	80064a0 <__aeabi_cdcmpeq>
 8005932:	d10b      	bne.n	800594c <??ZbZclFloatFrexp_5>
 8005934:	f8ca b000 	str.w	fp, [sl]
 8005938:	4648      	mov	r0, r9
 800593a:	f000 fae7 	bl	8005f0c <__aeabi_i2d>
 800593e:	2200      	movs	r2, #0
 8005940:	2300      	movs	r3, #0
 8005942:	f000 fb4d 	bl	8005fe0 <__aeabi_dmul>
 8005946:	ec41 0b10 	vmov	d0, r0, r1
 800594a:	e0b9      	b.n	8005ac0 <??ZbZclFloatFrexp_2>

0800594c <??ZbZclFloatFrexp_5>:
 800594c:	ec51 0b19 	vmov	r0, r1, d9
 8005950:	2200      	movs	r2, #0
 8005952:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 8005956:	f000 fd9b 	bl	8006490 <__aeabi_cdrcmple>
 800595a:	d854      	bhi.n	8005a06 <??ZbZclFloatFrexp_6>
 800595c:	2001      	movs	r0, #1
 800595e:	2100      	movs	r1, #0
 8005960:	003a      	movs	r2, r7
 8005962:	f000 f975 	bl	8005c50 <__aeabi_llsl>
 8005966:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800596a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800596e:	f000 fb01 	bl	8005f74 <__aeabi_ul2d>
 8005972:	0002      	movs	r2, r0
 8005974:	000b      	movs	r3, r1
 8005976:	2000      	movs	r0, #0
 8005978:	4957      	ldr	r1, [pc, #348]	@ (8005ad8 <??DataTable3_3>)
 800597a:	f000 fc5b 	bl	8006234 <__aeabi_ddiv>
 800597e:	ec41 0b1a 	vmov	d10, r0, r1
 8005982:	2002      	movs	r0, #2
 8005984:	2100      	movs	r1, #0
 8005986:	003a      	movs	r2, r7
 8005988:	f000 f962 	bl	8005c50 <__aeabi_llsl>
 800598c:	e9cd 0100 	strd	r0, r1, [sp]

08005990 <??ZbZclFloatFrexp_7>:
 8005990:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005994:	f000 faee 	bl	8005f74 <__aeabi_ul2d>
 8005998:	0002      	movs	r2, r0
 800599a:	000b      	movs	r3, r1
 800599c:	ec51 0b19 	vmov	r0, r1, d9
 80059a0:	f000 fd76 	bl	8006490 <__aeabi_cdrcmple>
 80059a4:	d813      	bhi.n	80059ce <??ZbZclFloatFrexp_8>
 80059a6:	ec53 2b19 	vmov	r2, r3, d9
 80059aa:	ec51 0b1a 	vmov	r0, r1, d10
 80059ae:	f000 fb17 	bl	8005fe0 <__aeabi_dmul>
 80059b2:	ec41 0b19 	vmov	d9, r0, r1
 80059b6:	eb17 0808 	adds.w	r8, r7, r8
 80059ba:	45b0      	cmp	r8, r6
 80059bc:	dbe8      	blt.n	8005990 <??ZbZclFloatFrexp_7>
 80059be:	f8ca 6000 	str.w	r6, [sl]
 80059c2:	4648      	mov	r0, r9
 80059c4:	f000 faa2 	bl	8005f0c <__aeabi_i2d>
 80059c8:	ec41 0b10 	vmov	d0, r0, r1
 80059cc:	e078      	b.n	8005ac0 <??ZbZclFloatFrexp_2>

080059ce <??ZbZclFloatFrexp_8>:
 80059ce:	ec51 0b19 	vmov	r0, r1, d9
 80059d2:	2200      	movs	r2, #0
 80059d4:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 80059d8:	f000 fd5a 	bl	8006490 <__aeabi_cdrcmple>
 80059dc:	d865      	bhi.n	8005aaa <??ZbZclFloatFrexp_9>
 80059de:	ec53 2b19 	vmov	r2, r3, d9
 80059e2:	2000      	movs	r0, #0
 80059e4:	493e      	ldr	r1, [pc, #248]	@ (8005ae0 <??DataTable3_5>)
 80059e6:	f000 fafb 	bl	8005fe0 <__aeabi_dmul>
 80059ea:	ec41 0b19 	vmov	d9, r0, r1
 80059ee:	f118 0801 	adds.w	r8, r8, #1
 80059f2:	45b0      	cmp	r8, r6
 80059f4:	dbeb      	blt.n	80059ce <??ZbZclFloatFrexp_8>
 80059f6:	f8ca 6000 	str.w	r6, [sl]
 80059fa:	4648      	mov	r0, r9
 80059fc:	f000 fa86 	bl	8005f0c <__aeabi_i2d>
 8005a00:	ec41 0b10 	vmov	d0, r0, r1
 8005a04:	e05c      	b.n	8005ac0 <??ZbZclFloatFrexp_2>

08005a06 <??ZbZclFloatFrexp_6>:
 8005a06:	ec51 0b19 	vmov	r0, r1, d9
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	4b32      	ldr	r3, [pc, #200]	@ (8005ad8 <??DataTable3_3>)
 8005a0e:	f000 fd47 	bl	80064a0 <__aeabi_cdcmpeq>
 8005a12:	d24a      	bcs.n	8005aaa <??ZbZclFloatFrexp_9>
 8005a14:	2401      	movs	r4, #1
 8005a16:	2500      	movs	r5, #0
 8005a18:	0020      	movs	r0, r4
 8005a1a:	0029      	movs	r1, r5
 8005a1c:	003a      	movs	r2, r7
 8005a1e:	f000 f917 	bl	8005c50 <__aeabi_llsl>
 8005a22:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a2a:	f000 faa3 	bl	8005f74 <__aeabi_ul2d>
 8005a2e:	ec41 0b1a 	vmov	d10, r0, r1
 8005a32:	0020      	movs	r0, r4
 8005a34:	0029      	movs	r1, r5
 8005a36:	003a      	movs	r2, r7
 8005a38:	f000 f90a 	bl	8005c50 <__aeabi_llsl>
 8005a3c:	e9cd 0100 	strd	r0, r1, [sp]

08005a40 <??ZbZclFloatFrexp_10>:
 8005a40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a44:	f000 fa96 	bl	8005f74 <__aeabi_ul2d>
 8005a48:	0002      	movs	r2, r0
 8005a4a:	000b      	movs	r3, r1
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	4922      	ldr	r1, [pc, #136]	@ (8005ad8 <??DataTable3_3>)
 8005a50:	f000 fbf0 	bl	8006234 <__aeabi_ddiv>
 8005a54:	0002      	movs	r2, r0
 8005a56:	000b      	movs	r3, r1
 8005a58:	ec51 0b18 	vmov	r0, r1, d8
 8005a5c:	f000 fd20 	bl	80064a0 <__aeabi_cdcmpeq>
 8005a60:	d20e      	bcs.n	8005a80 <??ZbZclFloatFrexp_11>
 8005a62:	ebb8 0007 	subs.w	r0, r8, r7
 8005a66:	4583      	cmp	fp, r0
 8005a68:	da0a      	bge.n	8005a80 <??ZbZclFloatFrexp_11>

08005a6a <??ZbZclFloatFrexp_12>:
 8005a6a:	ec53 2b19 	vmov	r2, r3, d9
 8005a6e:	ec51 0b1a 	vmov	r0, r1, d10
 8005a72:	f000 fab5 	bl	8005fe0 <__aeabi_dmul>
 8005a76:	ec41 0b19 	vmov	d9, r0, r1
 8005a7a:	ebb8 0807 	subs.w	r8, r8, r7
 8005a7e:	e7df      	b.n	8005a40 <??ZbZclFloatFrexp_10>

08005a80 <??ZbZclFloatFrexp_11>:
 8005a80:	ec51 0b19 	vmov	r0, r1, d9
 8005a84:	2200      	movs	r2, #0
 8005a86:	4b14      	ldr	r3, [pc, #80]	@ (8005ad8 <??DataTable3_3>)
 8005a88:	f000 fd0a 	bl	80064a0 <__aeabi_cdcmpeq>
 8005a8c:	d20d      	bcs.n	8005aaa <??ZbZclFloatFrexp_9>
 8005a8e:	f1b8 0801 	subs.w	r8, r8, #1
 8005a92:	45d8      	cmp	r8, fp
 8005a94:	d009      	beq.n	8005aaa <??ZbZclFloatFrexp_9>

08005a96 <??ZbZclFloatFrexp_13>:
 8005a96:	ec53 2b19 	vmov	r2, r3, d9
 8005a9a:	2000      	movs	r0, #0
 8005a9c:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 8005aa0:	f000 fa9e 	bl	8005fe0 <__aeabi_dmul>
 8005aa4:	ec41 0b19 	vmov	d9, r0, r1
 8005aa8:	e7ea      	b.n	8005a80 <??ZbZclFloatFrexp_11>

08005aaa <??ZbZclFloatFrexp_9>:
 8005aaa:	f8ca 8000 	str.w	r8, [sl]
 8005aae:	4648      	mov	r0, r9
 8005ab0:	f000 fa2c 	bl	8005f0c <__aeabi_i2d>
 8005ab4:	ec53 2b19 	vmov	r2, r3, d9
 8005ab8:	f000 fa92 	bl	8005fe0 <__aeabi_dmul>
 8005abc:	ec41 0b10 	vmov	d0, r0, r1

08005ac0 <??ZbZclFloatFrexp_2>:
 8005ac0:	b006      	add	sp, #24
 8005ac2:	ecbd 8b06 	vpop	{d8-d10}
 8005ac6:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005acc <??DataTable3>:
 8005acc:	fc01 ffff                                   ....

08005ad0 <??DataTable3_1>:
 8005ad0:	0000 7ff0                                   ....

08005ad4 <??DataTable3_2>:
 8005ad4:	ffff 000f                                   ....

08005ad8 <??DataTable3_3>:
 8005ad8:	0000 3ff0                                   ...?

08005adc <??DataTable3_4>:
 8005adc:	0000 3ff8                                   ...?

08005ae0 <??DataTable3_5>:
 8005ae0:	0000 3fe0                                   ...?

08005ae4 <ZbZclAttrIsFloat>:
 8005ae4:	0001      	movs	r1, r0
 8005ae6:	0008      	movs	r0, r1
 8005ae8:	b2c0      	uxtb	r0, r0
 8005aea:	2838      	cmp	r0, #56	@ 0x38
 8005aec:	db05      	blt.n	8005afa <??ZbZclAttrIsFloat_0>
 8005aee:	0008      	movs	r0, r1
 8005af0:	b2c0      	uxtb	r0, r0
 8005af2:	283b      	cmp	r0, #59	@ 0x3b
 8005af4:	da01      	bge.n	8005afa <??ZbZclAttrIsFloat_0>
 8005af6:	2001      	movs	r0, #1
 8005af8:	e000      	b.n	8005afc <??ZbZclAttrIsFloat_1>

08005afa <??ZbZclAttrIsFloat_0>:
 8005afa:	2000      	movs	r0, #0

08005afc <??ZbZclAttrIsFloat_1>:
 8005afc:	4770      	bx	lr

08005afe <strcmp>:
 8005afe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b06:	2a01      	cmp	r2, #1
 8005b08:	bf28      	it	cs
 8005b0a:	429a      	cmpcs	r2, r3
 8005b0c:	d0f7      	beq.n	8005afe <strcmp>
 8005b0e:	1ad0      	subs	r0, r2, r3
 8005b10:	4770      	bx	lr

08005b12 <__aeabi_memset>:
 8005b12:	b470      	push	{r4, r5, r6}
 8005b14:	0784      	lsls	r4, r0, #30
 8005b16:	d046      	beq.n	8005ba6 <__aeabi_memset+0x94>
 8005b18:	1e4c      	subs	r4, r1, #1
 8005b1a:	2900      	cmp	r1, #0
 8005b1c:	d041      	beq.n	8005ba2 <__aeabi_memset+0x90>
 8005b1e:	b2d5      	uxtb	r5, r2
 8005b20:	4603      	mov	r3, r0
 8005b22:	e002      	b.n	8005b2a <__aeabi_memset+0x18>
 8005b24:	1e61      	subs	r1, r4, #1
 8005b26:	b3e4      	cbz	r4, 8005ba2 <__aeabi_memset+0x90>
 8005b28:	460c      	mov	r4, r1
 8005b2a:	f803 5b01 	strb.w	r5, [r3], #1
 8005b2e:	0799      	lsls	r1, r3, #30
 8005b30:	d1f8      	bne.n	8005b24 <__aeabi_memset+0x12>
 8005b32:	2c03      	cmp	r4, #3
 8005b34:	d92e      	bls.n	8005b94 <__aeabi_memset+0x82>
 8005b36:	b2d5      	uxtb	r5, r2
 8005b38:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005b3c:	2c0f      	cmp	r4, #15
 8005b3e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005b42:	d919      	bls.n	8005b78 <__aeabi_memset+0x66>
 8005b44:	4626      	mov	r6, r4
 8005b46:	f103 0110 	add.w	r1, r3, #16
 8005b4a:	3e10      	subs	r6, #16
 8005b4c:	2e0f      	cmp	r6, #15
 8005b4e:	f841 5c10 	str.w	r5, [r1, #-16]
 8005b52:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005b56:	f841 5c08 	str.w	r5, [r1, #-8]
 8005b5a:	f841 5c04 	str.w	r5, [r1, #-4]
 8005b5e:	f101 0110 	add.w	r1, r1, #16
 8005b62:	d8f2      	bhi.n	8005b4a <__aeabi_memset+0x38>
 8005b64:	f1a4 0110 	sub.w	r1, r4, #16
 8005b68:	f021 010f 	bic.w	r1, r1, #15
 8005b6c:	f004 040f 	and.w	r4, r4, #15
 8005b70:	3110      	adds	r1, #16
 8005b72:	2c03      	cmp	r4, #3
 8005b74:	440b      	add	r3, r1
 8005b76:	d90d      	bls.n	8005b94 <__aeabi_memset+0x82>
 8005b78:	461e      	mov	r6, r3
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	3904      	subs	r1, #4
 8005b7e:	2903      	cmp	r1, #3
 8005b80:	f846 5b04 	str.w	r5, [r6], #4
 8005b84:	d8fa      	bhi.n	8005b7c <__aeabi_memset+0x6a>
 8005b86:	1f21      	subs	r1, r4, #4
 8005b88:	f021 0103 	bic.w	r1, r1, #3
 8005b8c:	3104      	adds	r1, #4
 8005b8e:	440b      	add	r3, r1
 8005b90:	f004 0403 	and.w	r4, r4, #3
 8005b94:	b12c      	cbz	r4, 8005ba2 <__aeabi_memset+0x90>
 8005b96:	b2d2      	uxtb	r2, r2
 8005b98:	441c      	add	r4, r3
 8005b9a:	f803 2b01 	strb.w	r2, [r3], #1
 8005b9e:	42a3      	cmp	r3, r4
 8005ba0:	d1fb      	bne.n	8005b9a <__aeabi_memset+0x88>
 8005ba2:	bc70      	pop	{r4, r5, r6}
 8005ba4:	4770      	bx	lr
 8005ba6:	460c      	mov	r4, r1
 8005ba8:	4603      	mov	r3, r0
 8005baa:	e7c2      	b.n	8005b32 <__aeabi_memset+0x20>
 8005bac:	0000      	movs	r0, r0
	...

08005bb0 <memchr>:
 8005bb0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005bb4:	2a10      	cmp	r2, #16
 8005bb6:	db2b      	blt.n	8005c10 <memchr+0x60>
 8005bb8:	f010 0f07 	tst.w	r0, #7
 8005bbc:	d008      	beq.n	8005bd0 <memchr+0x20>
 8005bbe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005bc2:	3a01      	subs	r2, #1
 8005bc4:	428b      	cmp	r3, r1
 8005bc6:	d02d      	beq.n	8005c24 <memchr+0x74>
 8005bc8:	f010 0f07 	tst.w	r0, #7
 8005bcc:	b342      	cbz	r2, 8005c20 <memchr+0x70>
 8005bce:	d1f6      	bne.n	8005bbe <memchr+0xe>
 8005bd0:	b4f0      	push	{r4, r5, r6, r7}
 8005bd2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005bd6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005bda:	f022 0407 	bic.w	r4, r2, #7
 8005bde:	f07f 0700 	mvns.w	r7, #0
 8005be2:	2300      	movs	r3, #0
 8005be4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005be8:	3c08      	subs	r4, #8
 8005bea:	ea85 0501 	eor.w	r5, r5, r1
 8005bee:	ea86 0601 	eor.w	r6, r6, r1
 8005bf2:	fa85 f547 	uadd8	r5, r5, r7
 8005bf6:	faa3 f587 	sel	r5, r3, r7
 8005bfa:	fa86 f647 	uadd8	r6, r6, r7
 8005bfe:	faa5 f687 	sel	r6, r5, r7
 8005c02:	b98e      	cbnz	r6, 8005c28 <memchr+0x78>
 8005c04:	d1ee      	bne.n	8005be4 <memchr+0x34>
 8005c06:	bcf0      	pop	{r4, r5, r6, r7}
 8005c08:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005c0c:	f002 0207 	and.w	r2, r2, #7
 8005c10:	b132      	cbz	r2, 8005c20 <memchr+0x70>
 8005c12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005c16:	3a01      	subs	r2, #1
 8005c18:	ea83 0301 	eor.w	r3, r3, r1
 8005c1c:	b113      	cbz	r3, 8005c24 <memchr+0x74>
 8005c1e:	d1f8      	bne.n	8005c12 <memchr+0x62>
 8005c20:	2000      	movs	r0, #0
 8005c22:	4770      	bx	lr
 8005c24:	3801      	subs	r0, #1
 8005c26:	4770      	bx	lr
 8005c28:	2d00      	cmp	r5, #0
 8005c2a:	bf06      	itte	eq
 8005c2c:	4635      	moveq	r5, r6
 8005c2e:	3803      	subeq	r0, #3
 8005c30:	3807      	subne	r0, #7
 8005c32:	f015 0f01 	tst.w	r5, #1
 8005c36:	d107      	bne.n	8005c48 <memchr+0x98>
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005c3e:	bf02      	ittt	eq
 8005c40:	3001      	addeq	r0, #1
 8005c42:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8005c46:	3001      	addeq	r0, #1
 8005c48:	bcf0      	pop	{r4, r5, r6, r7}
 8005c4a:	3801      	subs	r0, #1
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop

08005c50 <__aeabi_llsl>:
 8005c50:	4091      	lsls	r1, r2
 8005c52:	0003      	movs	r3, r0
 8005c54:	4090      	lsls	r0, r2
 8005c56:	469c      	mov	ip, r3
 8005c58:	3a20      	subs	r2, #32
 8005c5a:	4093      	lsls	r3, r2
 8005c5c:	4319      	orrs	r1, r3
 8005c5e:	4252      	negs	r2, r2
 8005c60:	4663      	mov	r3, ip
 8005c62:	40d3      	lsrs	r3, r2
 8005c64:	4319      	orrs	r1, r3
 8005c66:	4770      	bx	lr

08005c68 <__aeabi_drsub>:
 8005c68:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005c6c:	e002      	b.n	8005c74 <__adddf3>
 8005c6e:	bf00      	nop

08005c70 <__aeabi_dsub>:
 8005c70:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005c74 <__adddf3>:
 8005c74:	b530      	push	{r4, r5, lr}
 8005c76:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005c7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005c7e:	ea94 0f05 	teq	r4, r5
 8005c82:	bf08      	it	eq
 8005c84:	ea90 0f02 	teqeq	r0, r2
 8005c88:	bf1f      	itttt	ne
 8005c8a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005c8e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005c92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005c96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005c9a:	f000 80e2 	beq.w	8005e62 <__adddf3+0x1ee>
 8005c9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005ca2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005ca6:	bfb8      	it	lt
 8005ca8:	426d      	neglt	r5, r5
 8005caa:	dd0c      	ble.n	8005cc6 <__adddf3+0x52>
 8005cac:	442c      	add	r4, r5
 8005cae:	ea80 0202 	eor.w	r2, r0, r2
 8005cb2:	ea81 0303 	eor.w	r3, r1, r3
 8005cb6:	ea82 0000 	eor.w	r0, r2, r0
 8005cba:	ea83 0101 	eor.w	r1, r3, r1
 8005cbe:	ea80 0202 	eor.w	r2, r0, r2
 8005cc2:	ea81 0303 	eor.w	r3, r1, r3
 8005cc6:	2d36      	cmp	r5, #54	@ 0x36
 8005cc8:	bf88      	it	hi
 8005cca:	bd30      	pophi	{r4, r5, pc}
 8005ccc:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8005cd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005cd4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8005cd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005cdc:	d002      	beq.n	8005ce4 <__adddf3+0x70>
 8005cde:	4240      	negs	r0, r0
 8005ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005ce4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8005ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005cec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005cf0:	d002      	beq.n	8005cf8 <__adddf3+0x84>
 8005cf2:	4252      	negs	r2, r2
 8005cf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005cf8:	ea94 0f05 	teq	r4, r5
 8005cfc:	f000 80a7 	beq.w	8005e4e <__adddf3+0x1da>
 8005d00:	f1a4 0401 	sub.w	r4, r4, #1
 8005d04:	f1d5 0e20 	rsbs	lr, r5, #32
 8005d08:	db0d      	blt.n	8005d26 <__adddf3+0xb2>
 8005d0a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005d0e:	fa22 f205 	lsr.w	r2, r2, r5
 8005d12:	1880      	adds	r0, r0, r2
 8005d14:	f141 0100 	adc.w	r1, r1, #0
 8005d18:	fa03 f20e 	lsl.w	r2, r3, lr
 8005d1c:	1880      	adds	r0, r0, r2
 8005d1e:	fa43 f305 	asr.w	r3, r3, r5
 8005d22:	4159      	adcs	r1, r3
 8005d24:	e00e      	b.n	8005d44 <__adddf3+0xd0>
 8005d26:	f1a5 0520 	sub.w	r5, r5, #32
 8005d2a:	f10e 0e20 	add.w	lr, lr, #32
 8005d2e:	2a01      	cmp	r2, #1
 8005d30:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005d34:	bf28      	it	cs
 8005d36:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005d3a:	fa43 f305 	asr.w	r3, r3, r5
 8005d3e:	18c0      	adds	r0, r0, r3
 8005d40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005d44:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005d48:	d507      	bpl.n	8005d5a <__adddf3+0xe6>
 8005d4a:	f04f 0e00 	mov.w	lr, #0
 8005d4e:	f1dc 0c00 	rsbs	ip, ip, #0
 8005d52:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005d56:	eb6e 0101 	sbc.w	r1, lr, r1
 8005d5a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005d5e:	d31b      	bcc.n	8005d98 <__adddf3+0x124>
 8005d60:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005d64:	d30c      	bcc.n	8005d80 <__adddf3+0x10c>
 8005d66:	0849      	lsrs	r1, r1, #1
 8005d68:	ea5f 0030 	movs.w	r0, r0, rrx
 8005d6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005d70:	f104 0401 	add.w	r4, r4, #1
 8005d74:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005d78:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8005d7c:	f080 809a 	bcs.w	8005eb4 <__adddf3+0x240>
 8005d80:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8005d84:	bf08      	it	eq
 8005d86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005d8a:	f150 0000 	adcs.w	r0, r0, #0
 8005d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005d92:	ea41 0105 	orr.w	r1, r1, r5
 8005d96:	bd30      	pop	{r4, r5, pc}
 8005d98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005d9c:	4140      	adcs	r0, r0
 8005d9e:	eb41 0101 	adc.w	r1, r1, r1
 8005da2:	3c01      	subs	r4, #1
 8005da4:	bf28      	it	cs
 8005da6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8005daa:	d2e9      	bcs.n	8005d80 <__adddf3+0x10c>
 8005dac:	f091 0f00 	teq	r1, #0
 8005db0:	bf04      	itt	eq
 8005db2:	4601      	moveq	r1, r0
 8005db4:	2000      	moveq	r0, #0
 8005db6:	fab1 f381 	clz	r3, r1
 8005dba:	bf08      	it	eq
 8005dbc:	3320      	addeq	r3, #32
 8005dbe:	f1a3 030b 	sub.w	r3, r3, #11
 8005dc2:	f1b3 0220 	subs.w	r2, r3, #32
 8005dc6:	da0c      	bge.n	8005de2 <__adddf3+0x16e>
 8005dc8:	320c      	adds	r2, #12
 8005dca:	dd08      	ble.n	8005dde <__adddf3+0x16a>
 8005dcc:	f102 0c14 	add.w	ip, r2, #20
 8005dd0:	f1c2 020c 	rsb	r2, r2, #12
 8005dd4:	fa01 f00c 	lsl.w	r0, r1, ip
 8005dd8:	fa21 f102 	lsr.w	r1, r1, r2
 8005ddc:	e00c      	b.n	8005df8 <__adddf3+0x184>
 8005dde:	f102 0214 	add.w	r2, r2, #20
 8005de2:	bfd8      	it	le
 8005de4:	f1c2 0c20 	rsble	ip, r2, #32
 8005de8:	fa01 f102 	lsl.w	r1, r1, r2
 8005dec:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005df0:	bfdc      	itt	le
 8005df2:	ea41 010c 	orrle.w	r1, r1, ip
 8005df6:	4090      	lslle	r0, r2
 8005df8:	1ae4      	subs	r4, r4, r3
 8005dfa:	bfa2      	ittt	ge
 8005dfc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005e00:	4329      	orrge	r1, r5
 8005e02:	bd30      	popge	{r4, r5, pc}
 8005e04:	ea6f 0404 	mvn.w	r4, r4
 8005e08:	3c1f      	subs	r4, #31
 8005e0a:	da1c      	bge.n	8005e46 <__adddf3+0x1d2>
 8005e0c:	340c      	adds	r4, #12
 8005e0e:	dc0e      	bgt.n	8005e2e <__adddf3+0x1ba>
 8005e10:	f104 0414 	add.w	r4, r4, #20
 8005e14:	f1c4 0220 	rsb	r2, r4, #32
 8005e18:	fa20 f004 	lsr.w	r0, r0, r4
 8005e1c:	fa01 f302 	lsl.w	r3, r1, r2
 8005e20:	ea40 0003 	orr.w	r0, r0, r3
 8005e24:	fa21 f304 	lsr.w	r3, r1, r4
 8005e28:	ea45 0103 	orr.w	r1, r5, r3
 8005e2c:	bd30      	pop	{r4, r5, pc}
 8005e2e:	f1c4 040c 	rsb	r4, r4, #12
 8005e32:	f1c4 0220 	rsb	r2, r4, #32
 8005e36:	fa20 f002 	lsr.w	r0, r0, r2
 8005e3a:	fa01 f304 	lsl.w	r3, r1, r4
 8005e3e:	ea40 0003 	orr.w	r0, r0, r3
 8005e42:	4629      	mov	r1, r5
 8005e44:	bd30      	pop	{r4, r5, pc}
 8005e46:	fa21 f004 	lsr.w	r0, r1, r4
 8005e4a:	4629      	mov	r1, r5
 8005e4c:	bd30      	pop	{r4, r5, pc}
 8005e4e:	f094 0f00 	teq	r4, #0
 8005e52:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005e56:	bf06      	itte	eq
 8005e58:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8005e5c:	3401      	addeq	r4, #1
 8005e5e:	3d01      	subne	r5, #1
 8005e60:	e74e      	b.n	8005d00 <__adddf3+0x8c>
 8005e62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005e66:	bf18      	it	ne
 8005e68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005e6c:	d029      	beq.n	8005ec2 <__adddf3+0x24e>
 8005e6e:	ea94 0f05 	teq	r4, r5
 8005e72:	bf08      	it	eq
 8005e74:	ea90 0f02 	teqeq	r0, r2
 8005e78:	d005      	beq.n	8005e86 <__adddf3+0x212>
 8005e7a:	ea54 0c00 	orrs.w	ip, r4, r0
 8005e7e:	bf04      	itt	eq
 8005e80:	4619      	moveq	r1, r3
 8005e82:	4610      	moveq	r0, r2
 8005e84:	bd30      	pop	{r4, r5, pc}
 8005e86:	ea91 0f03 	teq	r1, r3
 8005e8a:	bf1e      	ittt	ne
 8005e8c:	2100      	movne	r1, #0
 8005e8e:	2000      	movne	r0, #0
 8005e90:	bd30      	popne	{r4, r5, pc}
 8005e92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8005e96:	d105      	bne.n	8005ea4 <__adddf3+0x230>
 8005e98:	0040      	lsls	r0, r0, #1
 8005e9a:	4149      	adcs	r1, r1
 8005e9c:	bf28      	it	cs
 8005e9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8005ea2:	bd30      	pop	{r4, r5, pc}
 8005ea4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8005ea8:	bf3c      	itt	cc
 8005eaa:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8005eae:	bd30      	popcc	{r4, r5, pc}
 8005eb0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005eb4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8005eb8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005ebc:	f04f 0000 	mov.w	r0, #0
 8005ec0:	bd30      	pop	{r4, r5, pc}
 8005ec2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005ec6:	bf1a      	itte	ne
 8005ec8:	4619      	movne	r1, r3
 8005eca:	4610      	movne	r0, r2
 8005ecc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005ed0:	bf1c      	itt	ne
 8005ed2:	460b      	movne	r3, r1
 8005ed4:	4602      	movne	r2, r0
 8005ed6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005eda:	bf06      	itte	eq
 8005edc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005ee0:	ea91 0f03 	teqeq	r1, r3
 8005ee4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8005ee8:	bd30      	pop	{r4, r5, pc}
 8005eea:	bf00      	nop

08005eec <__aeabi_ui2d>:
 8005eec:	f090 0f00 	teq	r0, #0
 8005ef0:	bf04      	itt	eq
 8005ef2:	2100      	moveq	r1, #0
 8005ef4:	4770      	bxeq	lr
 8005ef6:	b530      	push	{r4, r5, lr}
 8005ef8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005efc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005f00:	f04f 0500 	mov.w	r5, #0
 8005f04:	f04f 0100 	mov.w	r1, #0
 8005f08:	e750      	b.n	8005dac <__adddf3+0x138>
 8005f0a:	bf00      	nop

08005f0c <__aeabi_i2d>:
 8005f0c:	f090 0f00 	teq	r0, #0
 8005f10:	bf04      	itt	eq
 8005f12:	2100      	moveq	r1, #0
 8005f14:	4770      	bxeq	lr
 8005f16:	b530      	push	{r4, r5, lr}
 8005f18:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005f1c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005f20:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8005f24:	bf48      	it	mi
 8005f26:	4240      	negmi	r0, r0
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	e73e      	b.n	8005dac <__adddf3+0x138>
 8005f2e:	bf00      	nop

08005f30 <__aeabi_f2d>:
 8005f30:	0042      	lsls	r2, r0, #1
 8005f32:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005f36:	ea4f 0131 	mov.w	r1, r1, rrx
 8005f3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8005f3e:	bf1f      	itttt	ne
 8005f40:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8005f44:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8005f48:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8005f4c:	4770      	bxne	lr
 8005f4e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8005f52:	bf08      	it	eq
 8005f54:	4770      	bxeq	lr
 8005f56:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8005f5a:	bf04      	itt	eq
 8005f5c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8005f60:	4770      	bxeq	lr
 8005f62:	b530      	push	{r4, r5, lr}
 8005f64:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8005f68:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005f6c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005f70:	e71c      	b.n	8005dac <__adddf3+0x138>
 8005f72:	bf00      	nop

08005f74 <__aeabi_ul2d>:
 8005f74:	ea50 0201 	orrs.w	r2, r0, r1
 8005f78:	bf08      	it	eq
 8005f7a:	4770      	bxeq	lr
 8005f7c:	b530      	push	{r4, r5, lr}
 8005f7e:	f04f 0500 	mov.w	r5, #0
 8005f82:	e00a      	b.n	8005f9a <__aeabi_l2d+0x16>

08005f84 <__aeabi_l2d>:
 8005f84:	ea50 0201 	orrs.w	r2, r0, r1
 8005f88:	bf08      	it	eq
 8005f8a:	4770      	bxeq	lr
 8005f8c:	b530      	push	{r4, r5, lr}
 8005f8e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8005f92:	d502      	bpl.n	8005f9a <__aeabi_l2d+0x16>
 8005f94:	4240      	negs	r0, r0
 8005f96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005f9a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8005f9e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005fa2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8005fa6:	f43f aed8 	beq.w	8005d5a <__adddf3+0xe6>
 8005faa:	f04f 0203 	mov.w	r2, #3
 8005fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005fb2:	bf18      	it	ne
 8005fb4:	3203      	addne	r2, #3
 8005fb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8005fba:	bf18      	it	ne
 8005fbc:	3203      	addne	r2, #3
 8005fbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005fc2:	f1c2 0320 	rsb	r3, r2, #32
 8005fc6:	fa00 fc03 	lsl.w	ip, r0, r3
 8005fca:	fa20 f002 	lsr.w	r0, r0, r2
 8005fce:	fa01 fe03 	lsl.w	lr, r1, r3
 8005fd2:	ea40 000e 	orr.w	r0, r0, lr
 8005fd6:	fa21 f102 	lsr.w	r1, r1, r2
 8005fda:	4414      	add	r4, r2
 8005fdc:	e6bd      	b.n	8005d5a <__adddf3+0xe6>
 8005fde:	bf00      	nop

08005fe0 <__aeabi_dmul>:
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005fe6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8005fea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005fee:	bf1d      	ittte	ne
 8005ff0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005ff4:	ea94 0f0c 	teqne	r4, ip
 8005ff8:	ea95 0f0c 	teqne	r5, ip
 8005ffc:	f000 f8de 	bleq	80061bc <__aeabi_dmul+0x1dc>
 8006000:	442c      	add	r4, r5
 8006002:	ea81 0603 	eor.w	r6, r1, r3
 8006006:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800600a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800600e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006012:	bf18      	it	ne
 8006014:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006018:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800601c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006020:	d038      	beq.n	8006094 <__aeabi_dmul+0xb4>
 8006022:	fba0 ce02 	umull	ip, lr, r0, r2
 8006026:	f04f 0500 	mov.w	r5, #0
 800602a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800602e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8006032:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006036:	f04f 0600 	mov.w	r6, #0
 800603a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800603e:	f09c 0f00 	teq	ip, #0
 8006042:	bf18      	it	ne
 8006044:	f04e 0e01 	orrne.w	lr, lr, #1
 8006048:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800604c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8006050:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8006054:	d204      	bcs.n	8006060 <__aeabi_dmul+0x80>
 8006056:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800605a:	416d      	adcs	r5, r5
 800605c:	eb46 0606 	adc.w	r6, r6, r6
 8006060:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006064:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006068:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800606c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006070:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006074:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8006078:	bf88      	it	hi
 800607a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800607e:	d81e      	bhi.n	80060be <__aeabi_dmul+0xde>
 8006080:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8006084:	bf08      	it	eq
 8006086:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800608a:	f150 0000 	adcs.w	r0, r0, #0
 800608e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006092:	bd70      	pop	{r4, r5, r6, pc}
 8006094:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8006098:	ea46 0101 	orr.w	r1, r6, r1
 800609c:	ea40 0002 	orr.w	r0, r0, r2
 80060a0:	ea81 0103 	eor.w	r1, r1, r3
 80060a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80060a8:	bfc2      	ittt	gt
 80060aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80060ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80060b2:	bd70      	popgt	{r4, r5, r6, pc}
 80060b4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80060b8:	f04f 0e00 	mov.w	lr, #0
 80060bc:	3c01      	subs	r4, #1
 80060be:	f300 80ab 	bgt.w	8006218 <__aeabi_dmul+0x238>
 80060c2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80060c6:	bfde      	ittt	le
 80060c8:	2000      	movle	r0, #0
 80060ca:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80060ce:	bd70      	pople	{r4, r5, r6, pc}
 80060d0:	f1c4 0400 	rsb	r4, r4, #0
 80060d4:	3c20      	subs	r4, #32
 80060d6:	da35      	bge.n	8006144 <__aeabi_dmul+0x164>
 80060d8:	340c      	adds	r4, #12
 80060da:	dc1b      	bgt.n	8006114 <__aeabi_dmul+0x134>
 80060dc:	f104 0414 	add.w	r4, r4, #20
 80060e0:	f1c4 0520 	rsb	r5, r4, #32
 80060e4:	fa00 f305 	lsl.w	r3, r0, r5
 80060e8:	fa20 f004 	lsr.w	r0, r0, r4
 80060ec:	fa01 f205 	lsl.w	r2, r1, r5
 80060f0:	ea40 0002 	orr.w	r0, r0, r2
 80060f4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80060f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80060fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006100:	fa21 f604 	lsr.w	r6, r1, r4
 8006104:	eb42 0106 	adc.w	r1, r2, r6
 8006108:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800610c:	bf08      	it	eq
 800610e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	f1c4 040c 	rsb	r4, r4, #12
 8006118:	f1c4 0520 	rsb	r5, r4, #32
 800611c:	fa00 f304 	lsl.w	r3, r0, r4
 8006120:	fa20 f005 	lsr.w	r0, r0, r5
 8006124:	fa01 f204 	lsl.w	r2, r1, r4
 8006128:	ea40 0002 	orr.w	r0, r0, r2
 800612c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006130:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006134:	f141 0100 	adc.w	r1, r1, #0
 8006138:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800613c:	bf08      	it	eq
 800613e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006142:	bd70      	pop	{r4, r5, r6, pc}
 8006144:	f1c4 0520 	rsb	r5, r4, #32
 8006148:	fa00 f205 	lsl.w	r2, r0, r5
 800614c:	ea4e 0e02 	orr.w	lr, lr, r2
 8006150:	fa20 f304 	lsr.w	r3, r0, r4
 8006154:	fa01 f205 	lsl.w	r2, r1, r5
 8006158:	ea43 0302 	orr.w	r3, r3, r2
 800615c:	fa21 f004 	lsr.w	r0, r1, r4
 8006160:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006164:	fa21 f204 	lsr.w	r2, r1, r4
 8006168:	ea20 0002 	bic.w	r0, r0, r2
 800616c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006170:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006174:	bf08      	it	eq
 8006176:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800617a:	bd70      	pop	{r4, r5, r6, pc}
 800617c:	f094 0f00 	teq	r4, #0
 8006180:	d10f      	bne.n	80061a2 <__aeabi_dmul+0x1c2>
 8006182:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8006186:	0040      	lsls	r0, r0, #1
 8006188:	eb41 0101 	adc.w	r1, r1, r1
 800618c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006190:	bf08      	it	eq
 8006192:	3c01      	subeq	r4, #1
 8006194:	d0f7      	beq.n	8006186 <__aeabi_dmul+0x1a6>
 8006196:	ea41 0106 	orr.w	r1, r1, r6
 800619a:	f095 0f00 	teq	r5, #0
 800619e:	bf18      	it	ne
 80061a0:	4770      	bxne	lr
 80061a2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80061a6:	0052      	lsls	r2, r2, #1
 80061a8:	eb43 0303 	adc.w	r3, r3, r3
 80061ac:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80061b0:	bf08      	it	eq
 80061b2:	3d01      	subeq	r5, #1
 80061b4:	d0f7      	beq.n	80061a6 <__aeabi_dmul+0x1c6>
 80061b6:	ea43 0306 	orr.w	r3, r3, r6
 80061ba:	4770      	bx	lr
 80061bc:	ea94 0f0c 	teq	r4, ip
 80061c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80061c4:	bf18      	it	ne
 80061c6:	ea95 0f0c 	teqne	r5, ip
 80061ca:	d00c      	beq.n	80061e6 <__aeabi_dmul+0x206>
 80061cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80061d0:	bf18      	it	ne
 80061d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80061d6:	d1d1      	bne.n	800617c <__aeabi_dmul+0x19c>
 80061d8:	ea81 0103 	eor.w	r1, r1, r3
 80061dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80061e0:	f04f 0000 	mov.w	r0, #0
 80061e4:	bd70      	pop	{r4, r5, r6, pc}
 80061e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80061ea:	bf06      	itte	eq
 80061ec:	4610      	moveq	r0, r2
 80061ee:	4619      	moveq	r1, r3
 80061f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80061f4:	d019      	beq.n	800622a <__aeabi_dmul+0x24a>
 80061f6:	ea94 0f0c 	teq	r4, ip
 80061fa:	d102      	bne.n	8006202 <__aeabi_dmul+0x222>
 80061fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006200:	d113      	bne.n	800622a <__aeabi_dmul+0x24a>
 8006202:	ea95 0f0c 	teq	r5, ip
 8006206:	d105      	bne.n	8006214 <__aeabi_dmul+0x234>
 8006208:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800620c:	bf1c      	itt	ne
 800620e:	4610      	movne	r0, r2
 8006210:	4619      	movne	r1, r3
 8006212:	d10a      	bne.n	800622a <__aeabi_dmul+0x24a>
 8006214:	ea81 0103 	eor.w	r1, r1, r3
 8006218:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800621c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8006220:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006224:	f04f 0000 	mov.w	r0, #0
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800622e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8006232:	bd70      	pop	{r4, r5, r6, pc}

08006234 <__aeabi_ddiv>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800623a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800623e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006242:	bf1d      	ittte	ne
 8006244:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006248:	ea94 0f0c 	teqne	r4, ip
 800624c:	ea95 0f0c 	teqne	r5, ip
 8006250:	f000 f8a7 	bleq	80063a2 <__aeabi_ddiv+0x16e>
 8006254:	eba4 0405 	sub.w	r4, r4, r5
 8006258:	ea81 0e03 	eor.w	lr, r1, r3
 800625c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006260:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006264:	f000 8088 	beq.w	8006378 <__aeabi_ddiv+0x144>
 8006268:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800626c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8006270:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006274:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006278:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800627c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006280:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006284:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006288:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800628c:	429d      	cmp	r5, r3
 800628e:	bf08      	it	eq
 8006290:	4296      	cmpeq	r6, r2
 8006292:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8006296:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800629a:	d202      	bcs.n	80062a2 <__aeabi_ddiv+0x6e>
 800629c:	085b      	lsrs	r3, r3, #1
 800629e:	ea4f 0232 	mov.w	r2, r2, rrx
 80062a2:	1ab6      	subs	r6, r6, r2
 80062a4:	eb65 0503 	sbc.w	r5, r5, r3
 80062a8:	085b      	lsrs	r3, r3, #1
 80062aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80062ae:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80062b2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80062b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80062ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80062be:	bf22      	ittt	cs
 80062c0:	1ab6      	subcs	r6, r6, r2
 80062c2:	4675      	movcs	r5, lr
 80062c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80062c8:	085b      	lsrs	r3, r3, #1
 80062ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80062ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80062d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80062d6:	bf22      	ittt	cs
 80062d8:	1ab6      	subcs	r6, r6, r2
 80062da:	4675      	movcs	r5, lr
 80062dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80062e0:	085b      	lsrs	r3, r3, #1
 80062e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80062e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80062ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80062ee:	bf22      	ittt	cs
 80062f0:	1ab6      	subcs	r6, r6, r2
 80062f2:	4675      	movcs	r5, lr
 80062f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80062f8:	085b      	lsrs	r3, r3, #1
 80062fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80062fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8006302:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006306:	bf22      	ittt	cs
 8006308:	1ab6      	subcs	r6, r6, r2
 800630a:	4675      	movcs	r5, lr
 800630c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006310:	ea55 0e06 	orrs.w	lr, r5, r6
 8006314:	d018      	beq.n	8006348 <__aeabi_ddiv+0x114>
 8006316:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800631a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800631e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8006322:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006326:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800632a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800632e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8006332:	d1c0      	bne.n	80062b6 <__aeabi_ddiv+0x82>
 8006334:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006338:	d10b      	bne.n	8006352 <__aeabi_ddiv+0x11e>
 800633a:	ea41 0100 	orr.w	r1, r1, r0
 800633e:	f04f 0000 	mov.w	r0, #0
 8006342:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8006346:	e7b6      	b.n	80062b6 <__aeabi_ddiv+0x82>
 8006348:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800634c:	bf04      	itt	eq
 800634e:	4301      	orreq	r1, r0
 8006350:	2000      	moveq	r0, #0
 8006352:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8006356:	bf88      	it	hi
 8006358:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800635c:	f63f aeaf 	bhi.w	80060be <__aeabi_dmul+0xde>
 8006360:	ebb5 0c03 	subs.w	ip, r5, r3
 8006364:	bf04      	itt	eq
 8006366:	ebb6 0c02 	subseq.w	ip, r6, r2
 800636a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800636e:	f150 0000 	adcs.w	r0, r0, #0
 8006372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800637c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006380:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006384:	bfc2      	ittt	gt
 8006386:	ebd4 050c 	rsbsgt	r5, r4, ip
 800638a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800638e:	bd70      	popgt	{r4, r5, r6, pc}
 8006390:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006394:	f04f 0e00 	mov.w	lr, #0
 8006398:	3c01      	subs	r4, #1
 800639a:	e690      	b.n	80060be <__aeabi_dmul+0xde>
 800639c:	ea45 0e06 	orr.w	lr, r5, r6
 80063a0:	e68d      	b.n	80060be <__aeabi_dmul+0xde>
 80063a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80063a6:	ea94 0f0c 	teq	r4, ip
 80063aa:	bf08      	it	eq
 80063ac:	ea95 0f0c 	teqeq	r5, ip
 80063b0:	f43f af3b 	beq.w	800622a <__aeabi_dmul+0x24a>
 80063b4:	ea94 0f0c 	teq	r4, ip
 80063b8:	d10a      	bne.n	80063d0 <__aeabi_ddiv+0x19c>
 80063ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80063be:	f47f af34 	bne.w	800622a <__aeabi_dmul+0x24a>
 80063c2:	ea95 0f0c 	teq	r5, ip
 80063c6:	f47f af25 	bne.w	8006214 <__aeabi_dmul+0x234>
 80063ca:	4610      	mov	r0, r2
 80063cc:	4619      	mov	r1, r3
 80063ce:	e72c      	b.n	800622a <__aeabi_dmul+0x24a>
 80063d0:	ea95 0f0c 	teq	r5, ip
 80063d4:	d106      	bne.n	80063e4 <__aeabi_ddiv+0x1b0>
 80063d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80063da:	f43f aefd 	beq.w	80061d8 <__aeabi_dmul+0x1f8>
 80063de:	4610      	mov	r0, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	e722      	b.n	800622a <__aeabi_dmul+0x24a>
 80063e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80063e8:	bf18      	it	ne
 80063ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80063ee:	f47f aec5 	bne.w	800617c <__aeabi_dmul+0x19c>
 80063f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80063f6:	f47f af0d 	bne.w	8006214 <__aeabi_dmul+0x234>
 80063fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80063fe:	f47f aeeb 	bne.w	80061d8 <__aeabi_dmul+0x1f8>
 8006402:	e712      	b.n	800622a <__aeabi_dmul+0x24a>

08006404 <__gedf2>:
 8006404:	f04f 3cff 	mov.w	ip, #4294967295
 8006408:	e006      	b.n	8006418 <__cmpdf2+0x4>
 800640a:	bf00      	nop

0800640c <__ledf2>:
 800640c:	f04f 0c01 	mov.w	ip, #1
 8006410:	e002      	b.n	8006418 <__cmpdf2+0x4>
 8006412:	bf00      	nop

08006414 <__cmpdf2>:
 8006414:	f04f 0c01 	mov.w	ip, #1
 8006418:	f84d cd04 	str.w	ip, [sp, #-4]!
 800641c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8006420:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006424:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8006428:	bf18      	it	ne
 800642a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800642e:	d01b      	beq.n	8006468 <__cmpdf2+0x54>
 8006430:	b001      	add	sp, #4
 8006432:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8006436:	bf0c      	ite	eq
 8006438:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800643c:	ea91 0f03 	teqne	r1, r3
 8006440:	bf02      	ittt	eq
 8006442:	ea90 0f02 	teqeq	r0, r2
 8006446:	2000      	moveq	r0, #0
 8006448:	4770      	bxeq	lr
 800644a:	f110 0f00 	cmn.w	r0, #0
 800644e:	ea91 0f03 	teq	r1, r3
 8006452:	bf58      	it	pl
 8006454:	4299      	cmppl	r1, r3
 8006456:	bf08      	it	eq
 8006458:	4290      	cmpeq	r0, r2
 800645a:	bf2c      	ite	cs
 800645c:	17d8      	asrcs	r0, r3, #31
 800645e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8006462:	f040 0001 	orr.w	r0, r0, #1
 8006466:	4770      	bx	lr
 8006468:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800646c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006470:	d102      	bne.n	8006478 <__cmpdf2+0x64>
 8006472:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8006476:	d107      	bne.n	8006488 <__cmpdf2+0x74>
 8006478:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800647c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006480:	d1d6      	bne.n	8006430 <__cmpdf2+0x1c>
 8006482:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006486:	d0d3      	beq.n	8006430 <__cmpdf2+0x1c>
 8006488:	f85d 0b04 	ldr.w	r0, [sp], #4
 800648c:	4770      	bx	lr
 800648e:	bf00      	nop

08006490 <__aeabi_cdrcmple>:
 8006490:	4684      	mov	ip, r0
 8006492:	4610      	mov	r0, r2
 8006494:	4662      	mov	r2, ip
 8006496:	468c      	mov	ip, r1
 8006498:	4619      	mov	r1, r3
 800649a:	4663      	mov	r3, ip
 800649c:	e000      	b.n	80064a0 <__aeabi_cdcmpeq>
 800649e:	bf00      	nop

080064a0 <__aeabi_cdcmpeq>:
 80064a0:	b501      	push	{r0, lr}
 80064a2:	f7ff ffb7 	bl	8006414 <__cmpdf2>
 80064a6:	2800      	cmp	r0, #0
 80064a8:	bf48      	it	mi
 80064aa:	f110 0f00 	cmnmi.w	r0, #0
 80064ae:	bd01      	pop	{r0, pc}

080064b0 <__aeabi_dcmpeq>:
 80064b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80064b4:	f7ff fff4 	bl	80064a0 <__aeabi_cdcmpeq>
 80064b8:	bf0c      	ite	eq
 80064ba:	2001      	moveq	r0, #1
 80064bc:	2000      	movne	r0, #0
 80064be:	f85d fb08 	ldr.w	pc, [sp], #8
 80064c2:	bf00      	nop

080064c4 <__aeabi_dcmplt>:
 80064c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80064c8:	f7ff ffea 	bl	80064a0 <__aeabi_cdcmpeq>
 80064cc:	bf34      	ite	cc
 80064ce:	2001      	movcc	r0, #1
 80064d0:	2000      	movcs	r0, #0
 80064d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80064d6:	bf00      	nop

080064d8 <__aeabi_dcmple>:
 80064d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80064dc:	f7ff ffe0 	bl	80064a0 <__aeabi_cdcmpeq>
 80064e0:	bf94      	ite	ls
 80064e2:	2001      	movls	r0, #1
 80064e4:	2000      	movhi	r0, #0
 80064e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80064ea:	bf00      	nop

080064ec <__aeabi_dcmpge>:
 80064ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80064f0:	f7ff ffce 	bl	8006490 <__aeabi_cdrcmple>
 80064f4:	bf94      	ite	ls
 80064f6:	2001      	movls	r0, #1
 80064f8:	2000      	movhi	r0, #0
 80064fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80064fe:	bf00      	nop

08006500 <__aeabi_dcmpgt>:
 8006500:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006504:	f7ff ffc4 	bl	8006490 <__aeabi_cdrcmple>
 8006508:	bf34      	ite	cc
 800650a:	2001      	movcc	r0, #1
 800650c:	2000      	movcs	r0, #0
 800650e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006512:	bf00      	nop

08006514 <__aeabi_d2iz>:
 8006514:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006518:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800651c:	d215      	bcs.n	800654a <__aeabi_d2iz+0x36>
 800651e:	d511      	bpl.n	8006544 <__aeabi_d2iz+0x30>
 8006520:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006524:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006528:	d912      	bls.n	8006550 <__aeabi_d2iz+0x3c>
 800652a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800652e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006532:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006536:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800653a:	fa23 f002 	lsr.w	r0, r3, r2
 800653e:	bf18      	it	ne
 8006540:	4240      	negne	r0, r0
 8006542:	4770      	bx	lr
 8006544:	f04f 0000 	mov.w	r0, #0
 8006548:	4770      	bx	lr
 800654a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800654e:	d105      	bne.n	800655c <__aeabi_d2iz+0x48>
 8006550:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8006554:	bf08      	it	eq
 8006556:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800655a:	4770      	bx	lr
 800655c:	f04f 0000 	mov.w	r0, #0
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop

08006564 <__aeabi_d2uiz>:
 8006564:	004a      	lsls	r2, r1, #1
 8006566:	d211      	bcs.n	800658c <__aeabi_d2uiz+0x28>
 8006568:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800656c:	d211      	bcs.n	8006592 <__aeabi_d2uiz+0x2e>
 800656e:	d50d      	bpl.n	800658c <__aeabi_d2uiz+0x28>
 8006570:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8006574:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8006578:	d40e      	bmi.n	8006598 <__aeabi_d2uiz+0x34>
 800657a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800657e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006582:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006586:	fa23 f002 	lsr.w	r0, r3, r2
 800658a:	4770      	bx	lr
 800658c:	f04f 0000 	mov.w	r0, #0
 8006590:	4770      	bx	lr
 8006592:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006596:	d102      	bne.n	800659e <__aeabi_d2uiz+0x3a>
 8006598:	f04f 30ff 	mov.w	r0, #4294967295
 800659c:	4770      	bx	lr
 800659e:	f04f 0000 	mov.w	r0, #0
 80065a2:	4770      	bx	lr

080065a4 <__aeabi_uldivmod>:
 80065a4:	b953      	cbnz	r3, 80065bc <__aeabi_uldivmod+0x18>
 80065a6:	b94a      	cbnz	r2, 80065bc <__aeabi_uldivmod+0x18>
 80065a8:	2900      	cmp	r1, #0
 80065aa:	bf08      	it	eq
 80065ac:	2800      	cmpeq	r0, #0
 80065ae:	bf1c      	itt	ne
 80065b0:	f04f 31ff 	movne.w	r1, #4294967295
 80065b4:	f04f 30ff 	movne.w	r0, #4294967295
 80065b8:	f000 b9a0 	b.w	80068fc <__aeabi_idiv0>
 80065bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80065c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80065c4:	f000 f83c 	bl	8006640 <__udivmoddi4>
 80065c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80065cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d0:	b004      	add	sp, #16
 80065d2:	4770      	bx	lr

080065d4 <__aeabi_d2lz>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	2200      	movs	r2, #0
 80065d8:	2300      	movs	r3, #0
 80065da:	4604      	mov	r4, r0
 80065dc:	460d      	mov	r5, r1
 80065de:	f7ff ff71 	bl	80064c4 <__aeabi_dcmplt>
 80065e2:	b928      	cbnz	r0, 80065f0 <__aeabi_d2lz+0x1c>
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80065ec:	f000 b80a 	b.w	8006604 <__aeabi_d2ulz>
 80065f0:	4620      	mov	r0, r4
 80065f2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 80065f6:	f000 f805 	bl	8006604 <__aeabi_d2ulz>
 80065fa:	4240      	negs	r0, r0
 80065fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006600:	bd38      	pop	{r3, r4, r5, pc}
 8006602:	bf00      	nop

08006604 <__aeabi_d2ulz>:
 8006604:	b5d0      	push	{r4, r6, r7, lr}
 8006606:	4b0c      	ldr	r3, [pc, #48]	@ (8006638 <__aeabi_d2ulz+0x34>)
 8006608:	2200      	movs	r2, #0
 800660a:	4606      	mov	r6, r0
 800660c:	460f      	mov	r7, r1
 800660e:	f7ff fce7 	bl	8005fe0 <__aeabi_dmul>
 8006612:	f7ff ffa7 	bl	8006564 <__aeabi_d2uiz>
 8006616:	4604      	mov	r4, r0
 8006618:	f7ff fc68 	bl	8005eec <__aeabi_ui2d>
 800661c:	4b07      	ldr	r3, [pc, #28]	@ (800663c <__aeabi_d2ulz+0x38>)
 800661e:	2200      	movs	r2, #0
 8006620:	f7ff fcde 	bl	8005fe0 <__aeabi_dmul>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4630      	mov	r0, r6
 800662a:	4639      	mov	r1, r7
 800662c:	f7ff fb20 	bl	8005c70 <__aeabi_dsub>
 8006630:	f7ff ff98 	bl	8006564 <__aeabi_d2uiz>
 8006634:	4621      	mov	r1, r4
 8006636:	bdd0      	pop	{r4, r6, r7, pc}
 8006638:	3df00000 	.word	0x3df00000
 800663c:	41f00000 	.word	0x41f00000

08006640 <__udivmoddi4>:
 8006640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006644:	9d08      	ldr	r5, [sp, #32]
 8006646:	460c      	mov	r4, r1
 8006648:	2b00      	cmp	r3, #0
 800664a:	d14e      	bne.n	80066ea <__udivmoddi4+0xaa>
 800664c:	4694      	mov	ip, r2
 800664e:	458c      	cmp	ip, r1
 8006650:	4686      	mov	lr, r0
 8006652:	fab2 f282 	clz	r2, r2
 8006656:	d962      	bls.n	800671e <__udivmoddi4+0xde>
 8006658:	b14a      	cbz	r2, 800666e <__udivmoddi4+0x2e>
 800665a:	f1c2 0320 	rsb	r3, r2, #32
 800665e:	4091      	lsls	r1, r2
 8006660:	fa20 f303 	lsr.w	r3, r0, r3
 8006664:	fa0c fc02 	lsl.w	ip, ip, r2
 8006668:	4319      	orrs	r1, r3
 800666a:	fa00 fe02 	lsl.w	lr, r0, r2
 800666e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8006672:	fa1f f68c 	uxth.w	r6, ip
 8006676:	fbb1 f4f7 	udiv	r4, r1, r7
 800667a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800667e:	fb07 1114 	mls	r1, r7, r4, r1
 8006682:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006686:	fb04 f106 	mul.w	r1, r4, r6
 800668a:	4299      	cmp	r1, r3
 800668c:	d90a      	bls.n	80066a4 <__udivmoddi4+0x64>
 800668e:	eb1c 0303 	adds.w	r3, ip, r3
 8006692:	f104 30ff 	add.w	r0, r4, #4294967295
 8006696:	f080 8112 	bcs.w	80068be <__udivmoddi4+0x27e>
 800669a:	4299      	cmp	r1, r3
 800669c:	f240 810f 	bls.w	80068be <__udivmoddi4+0x27e>
 80066a0:	3c02      	subs	r4, #2
 80066a2:	4463      	add	r3, ip
 80066a4:	1a59      	subs	r1, r3, r1
 80066a6:	fa1f f38e 	uxth.w	r3, lr
 80066aa:	fbb1 f0f7 	udiv	r0, r1, r7
 80066ae:	fb07 1110 	mls	r1, r7, r0, r1
 80066b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80066b6:	fb00 f606 	mul.w	r6, r0, r6
 80066ba:	429e      	cmp	r6, r3
 80066bc:	d90a      	bls.n	80066d4 <__udivmoddi4+0x94>
 80066be:	eb1c 0303 	adds.w	r3, ip, r3
 80066c2:	f100 31ff 	add.w	r1, r0, #4294967295
 80066c6:	f080 80fc 	bcs.w	80068c2 <__udivmoddi4+0x282>
 80066ca:	429e      	cmp	r6, r3
 80066cc:	f240 80f9 	bls.w	80068c2 <__udivmoddi4+0x282>
 80066d0:	4463      	add	r3, ip
 80066d2:	3802      	subs	r0, #2
 80066d4:	1b9b      	subs	r3, r3, r6
 80066d6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80066da:	2100      	movs	r1, #0
 80066dc:	b11d      	cbz	r5, 80066e6 <__udivmoddi4+0xa6>
 80066de:	40d3      	lsrs	r3, r2
 80066e0:	2200      	movs	r2, #0
 80066e2:	e9c5 3200 	strd	r3, r2, [r5]
 80066e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066ea:	428b      	cmp	r3, r1
 80066ec:	d905      	bls.n	80066fa <__udivmoddi4+0xba>
 80066ee:	b10d      	cbz	r5, 80066f4 <__udivmoddi4+0xb4>
 80066f0:	e9c5 0100 	strd	r0, r1, [r5]
 80066f4:	2100      	movs	r1, #0
 80066f6:	4608      	mov	r0, r1
 80066f8:	e7f5      	b.n	80066e6 <__udivmoddi4+0xa6>
 80066fa:	fab3 f183 	clz	r1, r3
 80066fe:	2900      	cmp	r1, #0
 8006700:	d146      	bne.n	8006790 <__udivmoddi4+0x150>
 8006702:	42a3      	cmp	r3, r4
 8006704:	d302      	bcc.n	800670c <__udivmoddi4+0xcc>
 8006706:	4290      	cmp	r0, r2
 8006708:	f0c0 80f0 	bcc.w	80068ec <__udivmoddi4+0x2ac>
 800670c:	1a86      	subs	r6, r0, r2
 800670e:	eb64 0303 	sbc.w	r3, r4, r3
 8006712:	2001      	movs	r0, #1
 8006714:	2d00      	cmp	r5, #0
 8006716:	d0e6      	beq.n	80066e6 <__udivmoddi4+0xa6>
 8006718:	e9c5 6300 	strd	r6, r3, [r5]
 800671c:	e7e3      	b.n	80066e6 <__udivmoddi4+0xa6>
 800671e:	2a00      	cmp	r2, #0
 8006720:	f040 8090 	bne.w	8006844 <__udivmoddi4+0x204>
 8006724:	eba1 040c 	sub.w	r4, r1, ip
 8006728:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800672c:	fa1f f78c 	uxth.w	r7, ip
 8006730:	2101      	movs	r1, #1
 8006732:	fbb4 f6f8 	udiv	r6, r4, r8
 8006736:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800673a:	fb08 4416 	mls	r4, r8, r6, r4
 800673e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006742:	fb07 f006 	mul.w	r0, r7, r6
 8006746:	4298      	cmp	r0, r3
 8006748:	d908      	bls.n	800675c <__udivmoddi4+0x11c>
 800674a:	eb1c 0303 	adds.w	r3, ip, r3
 800674e:	f106 34ff 	add.w	r4, r6, #4294967295
 8006752:	d202      	bcs.n	800675a <__udivmoddi4+0x11a>
 8006754:	4298      	cmp	r0, r3
 8006756:	f200 80cd 	bhi.w	80068f4 <__udivmoddi4+0x2b4>
 800675a:	4626      	mov	r6, r4
 800675c:	1a1c      	subs	r4, r3, r0
 800675e:	fa1f f38e 	uxth.w	r3, lr
 8006762:	fbb4 f0f8 	udiv	r0, r4, r8
 8006766:	fb08 4410 	mls	r4, r8, r0, r4
 800676a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800676e:	fb00 f707 	mul.w	r7, r0, r7
 8006772:	429f      	cmp	r7, r3
 8006774:	d908      	bls.n	8006788 <__udivmoddi4+0x148>
 8006776:	eb1c 0303 	adds.w	r3, ip, r3
 800677a:	f100 34ff 	add.w	r4, r0, #4294967295
 800677e:	d202      	bcs.n	8006786 <__udivmoddi4+0x146>
 8006780:	429f      	cmp	r7, r3
 8006782:	f200 80b0 	bhi.w	80068e6 <__udivmoddi4+0x2a6>
 8006786:	4620      	mov	r0, r4
 8006788:	1bdb      	subs	r3, r3, r7
 800678a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800678e:	e7a5      	b.n	80066dc <__udivmoddi4+0x9c>
 8006790:	f1c1 0620 	rsb	r6, r1, #32
 8006794:	408b      	lsls	r3, r1
 8006796:	fa22 f706 	lsr.w	r7, r2, r6
 800679a:	431f      	orrs	r7, r3
 800679c:	fa20 fc06 	lsr.w	ip, r0, r6
 80067a0:	fa04 f301 	lsl.w	r3, r4, r1
 80067a4:	ea43 030c 	orr.w	r3, r3, ip
 80067a8:	40f4      	lsrs	r4, r6
 80067aa:	fa00 f801 	lsl.w	r8, r0, r1
 80067ae:	0c38      	lsrs	r0, r7, #16
 80067b0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80067b4:	fbb4 fef0 	udiv	lr, r4, r0
 80067b8:	fa1f fc87 	uxth.w	ip, r7
 80067bc:	fb00 441e 	mls	r4, r0, lr, r4
 80067c0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80067c4:	fb0e f90c 	mul.w	r9, lr, ip
 80067c8:	45a1      	cmp	r9, r4
 80067ca:	fa02 f201 	lsl.w	r2, r2, r1
 80067ce:	d90a      	bls.n	80067e6 <__udivmoddi4+0x1a6>
 80067d0:	193c      	adds	r4, r7, r4
 80067d2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80067d6:	f080 8084 	bcs.w	80068e2 <__udivmoddi4+0x2a2>
 80067da:	45a1      	cmp	r9, r4
 80067dc:	f240 8081 	bls.w	80068e2 <__udivmoddi4+0x2a2>
 80067e0:	f1ae 0e02 	sub.w	lr, lr, #2
 80067e4:	443c      	add	r4, r7
 80067e6:	eba4 0409 	sub.w	r4, r4, r9
 80067ea:	fa1f f983 	uxth.w	r9, r3
 80067ee:	fbb4 f3f0 	udiv	r3, r4, r0
 80067f2:	fb00 4413 	mls	r4, r0, r3, r4
 80067f6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80067fa:	fb03 fc0c 	mul.w	ip, r3, ip
 80067fe:	45a4      	cmp	ip, r4
 8006800:	d907      	bls.n	8006812 <__udivmoddi4+0x1d2>
 8006802:	193c      	adds	r4, r7, r4
 8006804:	f103 30ff 	add.w	r0, r3, #4294967295
 8006808:	d267      	bcs.n	80068da <__udivmoddi4+0x29a>
 800680a:	45a4      	cmp	ip, r4
 800680c:	d965      	bls.n	80068da <__udivmoddi4+0x29a>
 800680e:	3b02      	subs	r3, #2
 8006810:	443c      	add	r4, r7
 8006812:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8006816:	fba0 9302 	umull	r9, r3, r0, r2
 800681a:	eba4 040c 	sub.w	r4, r4, ip
 800681e:	429c      	cmp	r4, r3
 8006820:	46ce      	mov	lr, r9
 8006822:	469c      	mov	ip, r3
 8006824:	d351      	bcc.n	80068ca <__udivmoddi4+0x28a>
 8006826:	d04e      	beq.n	80068c6 <__udivmoddi4+0x286>
 8006828:	b155      	cbz	r5, 8006840 <__udivmoddi4+0x200>
 800682a:	ebb8 030e 	subs.w	r3, r8, lr
 800682e:	eb64 040c 	sbc.w	r4, r4, ip
 8006832:	fa04 f606 	lsl.w	r6, r4, r6
 8006836:	40cb      	lsrs	r3, r1
 8006838:	431e      	orrs	r6, r3
 800683a:	40cc      	lsrs	r4, r1
 800683c:	e9c5 6400 	strd	r6, r4, [r5]
 8006840:	2100      	movs	r1, #0
 8006842:	e750      	b.n	80066e6 <__udivmoddi4+0xa6>
 8006844:	f1c2 0320 	rsb	r3, r2, #32
 8006848:	fa20 f103 	lsr.w	r1, r0, r3
 800684c:	fa0c fc02 	lsl.w	ip, ip, r2
 8006850:	fa24 f303 	lsr.w	r3, r4, r3
 8006854:	4094      	lsls	r4, r2
 8006856:	430c      	orrs	r4, r1
 8006858:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800685c:	fa00 fe02 	lsl.w	lr, r0, r2
 8006860:	fa1f f78c 	uxth.w	r7, ip
 8006864:	fbb3 f0f8 	udiv	r0, r3, r8
 8006868:	fb08 3110 	mls	r1, r8, r0, r3
 800686c:	0c23      	lsrs	r3, r4, #16
 800686e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006872:	fb00 f107 	mul.w	r1, r0, r7
 8006876:	4299      	cmp	r1, r3
 8006878:	d908      	bls.n	800688c <__udivmoddi4+0x24c>
 800687a:	eb1c 0303 	adds.w	r3, ip, r3
 800687e:	f100 36ff 	add.w	r6, r0, #4294967295
 8006882:	d22c      	bcs.n	80068de <__udivmoddi4+0x29e>
 8006884:	4299      	cmp	r1, r3
 8006886:	d92a      	bls.n	80068de <__udivmoddi4+0x29e>
 8006888:	3802      	subs	r0, #2
 800688a:	4463      	add	r3, ip
 800688c:	1a5b      	subs	r3, r3, r1
 800688e:	b2a4      	uxth	r4, r4
 8006890:	fbb3 f1f8 	udiv	r1, r3, r8
 8006894:	fb08 3311 	mls	r3, r8, r1, r3
 8006898:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800689c:	fb01 f307 	mul.w	r3, r1, r7
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d908      	bls.n	80068b6 <__udivmoddi4+0x276>
 80068a4:	eb1c 0404 	adds.w	r4, ip, r4
 80068a8:	f101 36ff 	add.w	r6, r1, #4294967295
 80068ac:	d213      	bcs.n	80068d6 <__udivmoddi4+0x296>
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	d911      	bls.n	80068d6 <__udivmoddi4+0x296>
 80068b2:	3902      	subs	r1, #2
 80068b4:	4464      	add	r4, ip
 80068b6:	1ae4      	subs	r4, r4, r3
 80068b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80068bc:	e739      	b.n	8006732 <__udivmoddi4+0xf2>
 80068be:	4604      	mov	r4, r0
 80068c0:	e6f0      	b.n	80066a4 <__udivmoddi4+0x64>
 80068c2:	4608      	mov	r0, r1
 80068c4:	e706      	b.n	80066d4 <__udivmoddi4+0x94>
 80068c6:	45c8      	cmp	r8, r9
 80068c8:	d2ae      	bcs.n	8006828 <__udivmoddi4+0x1e8>
 80068ca:	ebb9 0e02 	subs.w	lr, r9, r2
 80068ce:	eb63 0c07 	sbc.w	ip, r3, r7
 80068d2:	3801      	subs	r0, #1
 80068d4:	e7a8      	b.n	8006828 <__udivmoddi4+0x1e8>
 80068d6:	4631      	mov	r1, r6
 80068d8:	e7ed      	b.n	80068b6 <__udivmoddi4+0x276>
 80068da:	4603      	mov	r3, r0
 80068dc:	e799      	b.n	8006812 <__udivmoddi4+0x1d2>
 80068de:	4630      	mov	r0, r6
 80068e0:	e7d4      	b.n	800688c <__udivmoddi4+0x24c>
 80068e2:	46d6      	mov	lr, sl
 80068e4:	e77f      	b.n	80067e6 <__udivmoddi4+0x1a6>
 80068e6:	4463      	add	r3, ip
 80068e8:	3802      	subs	r0, #2
 80068ea:	e74d      	b.n	8006788 <__udivmoddi4+0x148>
 80068ec:	4606      	mov	r6, r0
 80068ee:	4623      	mov	r3, r4
 80068f0:	4608      	mov	r0, r1
 80068f2:	e70f      	b.n	8006714 <__udivmoddi4+0xd4>
 80068f4:	3e02      	subs	r6, #2
 80068f6:	4463      	add	r3, ip
 80068f8:	e730      	b.n	800675c <__udivmoddi4+0x11c>
 80068fa:	bf00      	nop

080068fc <__aeabi_idiv0>:
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop

08006900 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006900:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006902:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006904:	3304      	adds	r3, #4

08006906 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006906:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006908:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800690a:	d3f9      	bcc.n	8006900 <CopyDataInit>
  bx lr
 800690c:	4770      	bx	lr

0800690e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800690e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006910:	3004      	adds	r0, #4

08006912 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006912:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006914:	d3fb      	bcc.n	800690e <FillZerobss>
  bx lr
 8006916:	4770      	bx	lr

08006918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006918:	480c      	ldr	r0, [pc, #48]	@ (800694c <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 800691a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800691c:	f005 f98c 	bl	800bc38 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006920:	480b      	ldr	r0, [pc, #44]	@ (8006950 <LoopForever+0x8>)
 8006922:	490c      	ldr	r1, [pc, #48]	@ (8006954 <LoopForever+0xc>)
 8006924:	4a0c      	ldr	r2, [pc, #48]	@ (8006958 <LoopForever+0x10>)
 8006926:	2300      	movs	r3, #0
 8006928:	f7ff ffed 	bl	8006906 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 800692c:	480b      	ldr	r0, [pc, #44]	@ (800695c <LoopForever+0x14>)
 800692e:	490c      	ldr	r1, [pc, #48]	@ (8006960 <LoopForever+0x18>)
 8006930:	2300      	movs	r3, #0
 8006932:	f7ff ffee 	bl	8006912 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006936:	480b      	ldr	r0, [pc, #44]	@ (8006964 <LoopForever+0x1c>)
 8006938:	490b      	ldr	r1, [pc, #44]	@ (8006968 <LoopForever+0x20>)
 800693a:	2300      	movs	r3, #0
 800693c:	f7ff ffe9 	bl	8006912 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006940:	f010 fb82 	bl	8017048 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006944:	f001 fbb4 	bl	80080b0 <main>

08006948 <LoopForever>:

LoopForever:
  b LoopForever
 8006948:	e7fe      	b.n	8006948 <LoopForever>
 800694a:	0000      	.short	0x0000
  ldr   r0, =_estack
 800694c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006950:	20000008 	.word	0x20000008
 8006954:	20000104 	.word	0x20000104
 8006958:	08019244 	.word	0x08019244
  INIT_BSS _sbss, _ebss
 800695c:	20000120 	.word	0x20000120
 8006960:	20001e6c 	.word	0x20001e6c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006964:	200300e4 	.word	0x200300e4
 8006968:	20030b5a 	.word	0x20030b5a

0800696c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800696c:	e7fe      	b.n	800696c <ADC1_IRQHandler>
	...

08006970 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8006970:	b480      	push	{r7}
 8006972:	b083      	sub	sp, #12
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8006978:	4b07      	ldr	r3, [pc, #28]	@ (8006998 <LL_C2_PWR_SetPowerMode+0x28>)
 800697a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800697e:	f023 0207 	bic.w	r2, r3, #7
 8006982:	4905      	ldr	r1, [pc, #20]	@ (8006998 <LL_C2_PWR_SetPowerMode+0x28>)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4313      	orrs	r3, r2
 8006988:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800698c:	bf00      	nop
 800698e:	370c      	adds	r7, #12
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr
 8006998:	58000400 	.word	0x58000400

0800699c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80069a4:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80069a6:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80069aa:	4905      	ldr	r1, [pc, #20]	@ (80069c0 <LL_EXTI_EnableIT_32_63+0x24>)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	58000800 	.word	0x58000800

080069c4 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 80069cc:	4b06      	ldr	r3, [pc, #24]	@ (80069e8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80069ce:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80069d2:	4905      	ldr	r1, [pc, #20]	@ (80069e8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 30d0 	str.w	r3, [r1, #208]	@ 0xd0
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr
 80069e8:	58000800 	.word	0x58000800

080069ec <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80069f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069f8:	4a0a      	ldr	r2, [pc, #40]	@ (8006a24 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80069fa:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80069fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006a06:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	021b      	lsls	r3, r3, #8
 8006a0e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a12:	4313      	orrs	r3, r2
 8006a14:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr
 8006a24:	cafecafe 	.word	0xcafecafe

08006a28 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8006a28:	b480      	push	{r7}
 8006a2a:	b083      	sub	sp, #12
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8006a30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006a3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	608b      	str	r3, [r1, #8]
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a68:	bf00      	nop
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a70:	4770      	bx	lr

08006a72 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8006a72:	b480      	push	{r7}
 8006a74:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006a76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006a7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006a8a:	bf00      	nop
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8006a98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006aa0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006aa4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006aa8:	d101      	bne.n	8006aae <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e000      	b.n	8006ab0 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8006aba:	b480      	push	{r7}
 8006abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8006abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006ac2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006ac6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006aca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006ace:	d101      	bne.n	8006ad4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8006ad0:	2301      	movs	r3, #1
 8006ad2:	e000      	b.n	8006ad6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006ae8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006aec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006aee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4313      	orrs	r3, r2
 8006af6:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006af8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006afc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4013      	ands	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b04:	68fb      	ldr	r3, [r7, #12]
}
 8006b06:	bf00      	nop
 8006b08:	3714      	adds	r7, #20
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr

08006b12 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006b12:	b480      	push	{r7}
 8006b14:	b083      	sub	sp, #12
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	685a      	ldr	r2, [r3, #4]
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	041b      	lsls	r3, r3, #16
 8006b24:	431a      	orrs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	605a      	str	r2, [r3, #4]
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	605a      	str	r2, [r3, #4]
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
 8006b60:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	041b      	lsls	r3, r3, #16
 8006b6a:	431a      	orrs	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	615a      	str	r2, [r3, #20]
}
 8006b70:	bf00      	nop
 8006b72:	370c      	adds	r7, #12
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695a      	ldr	r2, [r3, #20]
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	615a      	str	r2, [r3, #20]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr

08006b9e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006b9e:	b480      	push	{r7}
 8006ba0:	b083      	sub	sp, #12
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	6078      	str	r0, [r7, #4]
 8006ba6:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	609a      	str	r2, [r3, #8]
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
 8006bc2:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	619a      	str	r2, [r3, #24]
}
 8006bca:	bf00      	nop
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd4:	4770      	bx	lr

08006bd6 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	b083      	sub	sp, #12
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	22ff      	movs	r2, #255	@ 0xff
 8006be2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b083      	sub	sp, #12
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	22ca      	movs	r2, #202	@ 0xca
 8006bfc:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2253      	movs	r2, #83	@ 0x53
 8006c02:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b083      	sub	sp, #12
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f023 0207 	bic.w	r2, r3, #7
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	431a      	orrs	r2, r3
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	609a      	str	r2, [r3, #8]
}
 8006c2a:	bf00      	nop
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c34:	4770      	bx	lr
	...

08006c38 <MX_APPE_Config>:
EXTI_HandleTypeDef exti_handle;
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8006c3c:	4b04      	ldr	r3, [pc, #16]	@ (8006c50 <MX_APPE_Config+0x18>)
 8006c3e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006c42:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8006c44:	f000 f877 	bl	8006d36 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8006c48:	f000 f8c6 	bl	8006dd8 <Config_HSE>

  return;
 8006c4c:	bf00      	nop
}
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	58004000 	.word	0x58004000

08006c54 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8006c58:	f000 f8d2 	bl	8006e00 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8006c5c:	f000 f8ea 	bl	8006e34 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8006c60:	4908      	ldr	r1, [pc, #32]	@ (8006c84 <MX_APPE_Init+0x30>)
 8006c62:	2000      	movs	r0, #0
 8006c64:	f000 ff48 	bl	8007af8 <HW_TS_Init>

/* USER CODE BEGIN MX_APPE_Init_1 */
  Init_Debug();
 8006c68:	f000 f8a6 	bl	8006db8 <Init_Debug>
  
  LCD_DisplayInit();
 8006c6c:	f000 f9b6 	bl	8006fdc <LCD_DisplayInit>

  Led_Init();
 8006c70:	f000 f97e 	bl	8006f70 <Led_Init>
  //Initialize user buttons
  Button_Init();
 8006c74:	f000 f9a9 	bl	8006fca <Button_Init>
  RxUART_Init();
 8006c78:	f000 faac 	bl	80071d4 <RxUART_Init>
  
/* USER CODE END MX_APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8006c7c:	f000 f8e8 	bl	8006e50 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN MX_APPE_Init_2 */

/* USER CODE END MX_APPE_Init_2 */
   return;
 8006c80:	bf00      	nop
}
 8006c82:	bd80      	pop	{r7, pc}
 8006c84:	20000330 	.word	0x20000330

08006c88 <Init_Smps>:

void Init_Smps(void)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8006c8c:	bf00      	nop
}
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <Init_Exti>:

void Init_Exti(void)
{
 8006c96:	b580      	push	{r7, lr}
 8006c98:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8006c9a:	2050      	movs	r0, #80	@ 0x50
 8006c9c:	f7ff fe7e 	bl	800699c <LL_EXTI_EnableIT_32_63>

  return;
 8006ca0:	bf00      	nop
}
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <LED_Deinit>:
 * @brief  LED Deinitialisation to avoid conflict with LCD display
 * @param  None
 * @retval None
 */
void LED_Deinit(void)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b086      	sub	sp, #24
 8006ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure = {0};
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	609a      	str	r2, [r3, #8]
 8006cb4:	60da      	str	r2, [r3, #12]
 8006cb6:	611a      	str	r2, [r3, #16]
  
  /* RGB Led de-init */
  BSP_PWM_LED_DeInit();
 8006cb8:	f004 f804 	bl	800acc4 <BSP_PWM_LED_DeInit>
 
  /* configure SPIx MOSI for LCD */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 8006cbc:	2380      	movs	r3, #128	@ 0x80
 8006cbe:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 8006ccc:	2305      	movs	r3, #5
 8006cce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006cd8:	f005 fe92 	bl	800ca00 <HAL_GPIO_Init>
}
 8006cdc:	bf00      	nop
 8006cde:	3718      	adds	r7, #24
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <LED_Off>:
 * @brief  Wrapper for RGB LED off to avoid conflict with LCD Display
 * @param  None
 * @retval None
 */
void LED_Off(void)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  BSP_PWM_LED_Init();
 8006ce8:	f003 ff8e 	bl	800ac08 <BSP_PWM_LED_Init>
  BSP_PWM_LED_Off();
 8006cec:	f004 f822 	bl	800ad34 <BSP_PWM_LED_Off>
  LED_Deinit();
 8006cf0:	f7ff ffd8 	bl	8006ca4 <LED_Deinit>
}
 8006cf4:	bf00      	nop
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <LED_Set_rgb>:
 * @brief  Wrapper to set RGB LED to avoid conflict with LCD Display
 * @param  None
 * @retval None
 */
void LED_Set_rgb(uint8_t r, uint8_t g, uint8_t b)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	4603      	mov	r3, r0
 8006d00:	71fb      	strb	r3, [r7, #7]
 8006d02:	460b      	mov	r3, r1
 8006d04:	71bb      	strb	r3, [r7, #6]
 8006d06:	4613      	mov	r3, r2
 8006d08:	717b      	strb	r3, [r7, #5]
  aPwmLedGsData_TypeDef aPwmLedGsData;
  
  BSP_PWM_LED_Init();
 8006d0a:	f003 ff7d 	bl	800ac08 <BSP_PWM_LED_Init>
  HAL_Delay(50);
 8006d0e:	2032      	movs	r0, #50	@ 0x32
 8006d10:	f001 fb18 	bl	8008344 <HAL_Delay>
  aPwmLedGsData[PWM_LED_RED] = r;
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	733b      	strb	r3, [r7, #12]
  aPwmLedGsData[PWM_LED_GREEN] = g;
 8006d18:	79bb      	ldrb	r3, [r7, #6]
 8006d1a:	737b      	strb	r3, [r7, #13]
  aPwmLedGsData[PWM_LED_BLUE] = b;
 8006d1c:	797b      	ldrb	r3, [r7, #5]
 8006d1e:	73bb      	strb	r3, [r7, #14]
  BSP_PWM_LED_On(aPwmLedGsData);
 8006d20:	f107 030c 	add.w	r3, r7, #12
 8006d24:	4618      	mov	r0, r3
 8006d26:	f003 fff9 	bl	800ad1c <BSP_PWM_LED_On>
  LED_Deinit();
 8006d2a:	f7ff ffbb 	bl	8006ca4 <LED_Deinit>
}
 8006d2e:	bf00      	nop
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}

08006d36 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8006d36:	b580      	push	{r7, lr}
 8006d38:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8006d3a:	f000 f804 	bl	8006d46 <Reset_BackupDomain>

  Reset_IPCC();
 8006d3e:	f000 f819 	bl	8006d74 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8006d42:	bf00      	nop
}
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8006d4a:	f7ff fea3 	bl	8006a94 <LL_RCC_IsActiveFlag_PINRST>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d00d      	beq.n	8006d70 <Reset_BackupDomain+0x2a>
 8006d54:	f7ff feb1 	bl	8006aba <LL_RCC_IsActiveFlag_SFTRST>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d108      	bne.n	8006d70 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006d5e:	f006 f95f 	bl	800d020 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8006d62:	f006 f95d 	bl	800d020 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8006d66:	f7ff fe73 	bl	8006a50 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8006d6a:	f7ff fe82 	bl	8006a72 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
}
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8006d78:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006d7c:	f7ff feb0 	bl	8006ae0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8006d80:	213f      	movs	r1, #63	@ 0x3f
 8006d82:	480c      	ldr	r0, [pc, #48]	@ (8006db4 <Reset_IPCC+0x40>)
 8006d84:	f7ff ff0b 	bl	8006b9e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8006d88:	213f      	movs	r1, #63	@ 0x3f
 8006d8a:	480a      	ldr	r0, [pc, #40]	@ (8006db4 <Reset_IPCC+0x40>)
 8006d8c:	f7ff ff15 	bl	8006bba <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8006d90:	213f      	movs	r1, #63	@ 0x3f
 8006d92:	4808      	ldr	r0, [pc, #32]	@ (8006db4 <Reset_IPCC+0x40>)
 8006d94:	f7ff febd 	bl	8006b12 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8006d98:	213f      	movs	r1, #63	@ 0x3f
 8006d9a:	4806      	ldr	r0, [pc, #24]	@ (8006db4 <Reset_IPCC+0x40>)
 8006d9c:	f7ff fedc 	bl	8006b58 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8006da0:	213f      	movs	r1, #63	@ 0x3f
 8006da2:	4804      	ldr	r0, [pc, #16]	@ (8006db4 <Reset_IPCC+0x40>)
 8006da4:	f7ff fec7 	bl	8006b36 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8006da8:	213f      	movs	r1, #63	@ 0x3f
 8006daa:	4802      	ldr	r0, [pc, #8]	@ (8006db4 <Reset_IPCC+0x40>)
 8006dac:	f7ff fee6 	bl	8006b7c <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8006db0:	bf00      	nop
}
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	58000c00 	.word	0x58000c00

08006db8 <Init_Debug>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Init_Debug( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8006dbc:	f005 f834 	bl	800be28 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006dc0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006dc4:	f7ff fdea 	bl	800699c <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006dc8:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006dcc:	f7ff fdfa 	bl	80069c4 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8006dd0:	f00b fdc0 	bl	8012954 <DbgTraceInit>
#endif

  return;
 8006dd4:	bf00      	nop
}
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <Config_HSE>:

static void Config_HSE(void)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b082      	sub	sp, #8
 8006ddc:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006dde:	2000      	movs	r0, #0
 8006de0:	f00b fe36 	bl	8012a50 <OTP_Read>
 8006de4:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d005      	beq.n	8006df8 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	799b      	ldrb	r3, [r3, #6]
 8006df0:	4618      	mov	r0, r3
 8006df2:	f7ff fdfb 	bl	80069ec <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006df6:	bf00      	nop
 8006df8:	bf00      	nop
}
 8006dfa:	3708      	adds	r7, #8
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <System_Init>:

static void System_Init( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	af00      	add	r7, sp, #0
  Init_Smps( );
 8006e04:	f7ff ff40 	bl	8006c88 <Init_Smps>

  Init_Exti( );
 8006e08:	f7ff ff45 	bl	8006c96 <Init_Exti>

  Init_Rtc( );
 8006e0c:	f000 f802 	bl	8006e14 <Init_Rtc>

  return;
 8006e10:	bf00      	nop
}
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <Init_Rtc>:

static void Init_Rtc( void )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8006e18:	4805      	ldr	r0, [pc, #20]	@ (8006e30 <Init_Rtc+0x1c>)
 8006e1a:	f7ff fee9 	bl	8006bf0 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8006e1e:	2100      	movs	r1, #0
 8006e20:	4803      	ldr	r0, [pc, #12]	@ (8006e30 <Init_Rtc+0x1c>)
 8006e22:	f7ff fef5 	bl	8006c10 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8006e26:	4802      	ldr	r0, [pc, #8]	@ (8006e30 <Init_Rtc+0x1c>)
 8006e28:	f7ff fed5 	bl	8006bd6 <LL_RTC_EnableWriteProtection>

  return;
 8006e2c:	bf00      	nop
}
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	40002800 	.word	0x40002800

08006e34 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8006e38:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006e3c:	f7ff fdf4 	bl	8006a28 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8006e40:	f00f fbe2 	bl	8016608 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8006e44:	2004      	movs	r0, #4
 8006e46:	f7ff fd93 	bl	8006970 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8006e4a:	bf00      	nop
}
 8006e4c:	bd80      	pop	{r7, pc}
	...

08006e50 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8006e56:	f00b faeb 	bl	8012430 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 8006e5a:	4a14      	ldr	r2, [pc, #80]	@ (8006eac <appe_Tl_Init+0x5c>)
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	2008      	movs	r0, #8
 8006e60:	f00f fd10 	bl	8016884 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8006e64:	4b12      	ldr	r3, [pc, #72]	@ (8006eb0 <appe_Tl_Init+0x60>)
 8006e66:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8006e68:	4b12      	ldr	r3, [pc, #72]	@ (8006eb4 <appe_Tl_Init+0x64>)
 8006e6a:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8006e6c:	463b      	mov	r3, r7
 8006e6e:	4619      	mov	r1, r3
 8006e70:	4811      	ldr	r0, [pc, #68]	@ (8006eb8 <appe_Tl_Init+0x68>)
 8006e72:	f00b f99f 	bl	80121b4 <shci_init>

  /**< Memory Manager channel initialization */
  memset(&tl_mm_config, 0, sizeof(TL_MM_Config_t));
 8006e76:	f107 0308 	add.w	r3, r7, #8
 8006e7a:	2218      	movs	r2, #24
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f010 f870 	bl	8016f64 <memset>
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8006e88:	4b0c      	ldr	r3, [pc, #48]	@ (8006ebc <appe_Tl_Init+0x6c>)
 8006e8a:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8006e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec0 <appe_Tl_Init+0x70>)
 8006e8e:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8006e90:	f240 533c 	movw	r3, #1340	@ 0x53c
 8006e94:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 8006e96:	f107 0308 	add.w	r3, r7, #8
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f00b fc24 	bl	80126e8 <TL_MM_Init>

  TL_Enable();
 8006ea0:	f00b fac0 	bl	8012424 <TL_Enable>

  return;
 8006ea4:	bf00      	nop
}
 8006ea6:	3720      	adds	r7, #32
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	080121ed 	.word	0x080121ed
 8006eb0:	20030620 	.word	0x20030620
 8006eb4:	08006ec5 	.word	0x08006ec5
 8006eb8:	08006edb 	.word	0x08006edb
 8006ebc:	2003072c 	.word	0x2003072c
 8006ec0:	200300e4 	.word	0x200300e4

08006ec4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b083      	sub	sp, #12
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8006ece:	bf00      	nop
}
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b084      	sub	sp, #16
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	330b      	adds	r3, #11
 8006ee8:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	f5b3 4f12 	cmp.w	r3, #37376	@ 0x9200
 8006ef4:	d004      	beq.n	8006f00 <APPE_SysUserEvtRx+0x26>
 8006ef6:	f249 2201 	movw	r2, #37377	@ 0x9201
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d003      	beq.n	8006f06 <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8006efe:	e008      	b.n	8006f12 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8006f00:	f000 f82a 	bl	8006f58 <APPE_SysEvtReadyProcessing>
         break;
 8006f04:	e005      	b.n	8006f12 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	789b      	ldrb	r3, [r3, #2]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 f806 	bl	8006f1c <APPE_SysEvtError>
         break;
 8006f10:	bf00      	nop
  }
  return;
 8006f12:	bf00      	nop
}
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 8006f26:	79fb      	ldrb	r3, [r7, #7]
 8006f28:	2bc8      	cmp	r3, #200	@ 0xc8
 8006f2a:	d105      	bne.n	8006f38 <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8006f2c:	4a08      	ldr	r2, [pc, #32]	@ (8006f50 <APPE_SysEvtError+0x34>)
 8006f2e:	2101      	movs	r1, #1
 8006f30:	2000      	movs	r0, #0
 8006f32:	f001 fcd5 	bl	80088e0 <logApplication>
       break;
 8006f36:	e006      	b.n	8006f46 <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 8006f38:	79fb      	ldrb	r3, [r7, #7]
 8006f3a:	4a06      	ldr	r2, [pc, #24]	@ (8006f54 <APPE_SysEvtError+0x38>)
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f001 fcce 	bl	80088e0 <logApplication>
       break;
 8006f44:	bf00      	nop
  }
  return;
 8006f46:	bf00      	nop
}
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	08017e70 	.word	0x08017e70
 8006f54:	08017e90 	.word	0x08017e90

08006f58 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 8006f5c:	f00b fc38 	bl	80127d0 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 8006f60:	f001 fe08 	bl	8008b74 <APP_ZIGBEE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8006f64:	2100      	movs	r1, #0
 8006f66:	2001      	movs	r0, #1
 8006f68:	f00f fb60 	bl	801662c <UTIL_LPM_SetOffMode>
  return;
 8006f6c:	bf00      	nop
}
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <Led_Init>:
 * @brief  RGB LED initialisation for the application
 * @param  None
 * @retval None
 */
static void Led_Init( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /**
   * Leds Initialization
   */
  // LED Red;
  LED_Set_rgb(PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF);
 8006f74:	2200      	movs	r2, #0
 8006f76:	2100      	movs	r1, #0
 8006f78:	2081      	movs	r0, #129	@ 0x81
 8006f7a:	f7ff febd 	bl	8006cf8 <LED_Set_rgb>
  HAL_Delay(300);
 8006f7e:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006f82:	f001 f9df 	bl	8008344 <HAL_Delay>
  LED_Off();
 8006f86:	f7ff fead 	bl	8006ce4 <LED_Off>
  HAL_Delay(300);
 8006f8a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006f8e:	f001 f9d9 	bl	8008344 <HAL_Delay>
  // LED Green;
  LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 8006f92:	2200      	movs	r2, #0
 8006f94:	2181      	movs	r1, #129	@ 0x81
 8006f96:	2000      	movs	r0, #0
 8006f98:	f7ff feae 	bl	8006cf8 <LED_Set_rgb>
  HAL_Delay(300);
 8006f9c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006fa0:	f001 f9d0 	bl	8008344 <HAL_Delay>
  LED_Off();
 8006fa4:	f7ff fe9e 	bl	8006ce4 <LED_Off>
  HAL_Delay(300);
 8006fa8:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006fac:	f001 f9ca 	bl	8008344 <HAL_Delay>
  // LED Blue;
  LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0);
 8006fb0:	2281      	movs	r2, #129	@ 0x81
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	f7ff fe9f 	bl	8006cf8 <LED_Set_rgb>
  HAL_Delay(300);
 8006fba:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8006fbe:	f001 f9c1 	bl	8008344 <HAL_Delay>
  LED_Off();
 8006fc2:	f7ff fe8f 	bl	8006ce4 <LED_Off>
  
#endif

  return;
 8006fc6:	bf00      	nop
}
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <Button_Init>:
 * @brief  Buttons initialisation used in application
 * @param  None
 * @retval None
 */
static void Button_Init( void )
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /**
   * Button Initialization
   */
    BSP_PB_Init(BUTTON_USER1, BUTTON_MODE_EXTI);
 8006fce:	2101      	movs	r1, #1
 8006fd0:	2000      	movs	r0, #0
 8006fd2:	f003 fedb 	bl	800ad8c <BSP_PB_Init>
#endif

  return;
 8006fd6:	bf00      	nop
}
 8006fd8:	bd80      	pop	{r7, pc}
	...

08006fdc <LCD_DisplayInit>:
 * @brief  LCD initialisation with ST logo
 * @param  None
 * @retval None
 */
void LCD_DisplayInit(void)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
    BSP_LCD_Init(LCD_Inst, LCD_ORIENTATION_LANDSCAPE);
 8006fe0:	4b26      	ldr	r3, [pc, #152]	@ (800707c <LCD_DisplayInit+0xa0>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	f004 fa00 	bl	800b3ec <BSP_LCD_Init>
    /* Set LCD Foreground Layer  */
    UTIL_LCD_SetFuncDriver(&LCD_Driver); /* SetFunc before setting device */
 8006fec:	4824      	ldr	r0, [pc, #144]	@ (8007080 <LCD_DisplayInit+0xa4>)
 8006fee:	f00e ff87 	bl	8015f00 <UTIL_LCD_SetFuncDriver>
    UTIL_LCD_SetDevice(0);            /* SetDevice after funcDriver is set */
 8006ff2:	2000      	movs	r0, #0
 8006ff4:	f00e ffda 	bl	8015fac <UTIL_LCD_SetDevice>
    BSP_LCD_Clear(LCD_Inst,SSD1315_COLOR_BLACK);
 8006ff8:	4b20      	ldr	r3, [pc, #128]	@ (800707c <LCD_DisplayInit+0xa0>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	2100      	movs	r1, #0
 8006ffe:	4618      	mov	r0, r3
 8007000:	f004 fc18 	bl	800b834 <BSP_LCD_Clear>
    BSP_LCD_DisplayOn(LCD_Inst);
 8007004:	4b1d      	ldr	r3, [pc, #116]	@ (800707c <LCD_DisplayInit+0xa0>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f004 fabf 	bl	800b58c <BSP_LCD_DisplayOn>
    BSP_LCD_Refresh(LCD_Inst);
 800700e:	4b1b      	ldr	r3, [pc, #108]	@ (800707c <LCD_DisplayInit+0xa0>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f004 fae6 	bl	800b5e4 <BSP_LCD_Refresh>
    UTIL_LCD_SetFont(&Font12);
 8007018:	481a      	ldr	r0, [pc, #104]	@ (8007084 <LCD_DisplayInit+0xa8>)
 800701a:	f00f f80f 	bl	801603c <UTIL_LCD_SetFont>
    /* Set the LCD Text Color */
    UTIL_LCD_SetTextColor(SSD1315_COLOR_WHITE);
 800701e:	20ff      	movs	r0, #255	@ 0xff
 8007020:	f00e ffe4 	bl	8015fec <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(SSD1315_COLOR_BLACK);
 8007024:	2000      	movs	r0, #0
 8007026:	f00e fff5 	bl	8016014 <UTIL_LCD_SetBackColor>
    BSP_LCD_Clear(LCD_Inst,SSD1315_COLOR_BLACK);
 800702a:	4b14      	ldr	r3, [pc, #80]	@ (800707c <LCD_DisplayInit+0xa0>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2100      	movs	r1, #0
 8007030:	4618      	mov	r0, r3
 8007032:	f004 fbff 	bl	800b834 <BSP_LCD_Clear>
    BSP_LCD_Refresh(LCD_Inst);
 8007036:	4b11      	ldr	r3, [pc, #68]	@ (800707c <LCD_DisplayInit+0xa0>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f004 fad2 	bl	800b5e4 <BSP_LCD_Refresh>
    /* Display ST Logo */
    BSP_LCD_Clear(LCD_Inst,SSD1315_COLOR_BLACK);
 8007040:	4b0e      	ldr	r3, [pc, #56]	@ (800707c <LCD_DisplayInit+0xa0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2100      	movs	r1, #0
 8007046:	4618      	mov	r0, r3
 8007048:	f004 fbf4 	bl	800b834 <BSP_LCD_Clear>
    BSP_LCD_Refresh(LCD_Inst);
 800704c:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <LCD_DisplayInit+0xa0>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4618      	mov	r0, r3
 8007052:	f004 fac7 	bl	800b5e4 <BSP_LCD_Refresh>
    BSP_LCD_DrawBitmap(LCD_Inst, 0, 0, (uint8_t *)stlogo);
 8007056:	4b09      	ldr	r3, [pc, #36]	@ (800707c <LCD_DisplayInit+0xa0>)
 8007058:	6818      	ldr	r0, [r3, #0]
 800705a:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <LCD_DisplayInit+0xac>)
 800705c:	2200      	movs	r2, #0
 800705e:	2100      	movs	r1, #0
 8007060:	f004 faec 	bl	800b63c <BSP_LCD_DrawBitmap>
    BSP_LCD_Refresh(LCD_Inst);
 8007064:	4b05      	ldr	r3, [pc, #20]	@ (800707c <LCD_DisplayInit+0xa0>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f004 fabb 	bl	800b5e4 <BSP_LCD_Refresh>
    HAL_Delay(2000);
 800706e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007072:	f001 f967 	bl	8008344 <HAL_Delay>
}
 8007076:	bf00      	nop
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	2000013c 	.word	0x2000013c
 8007080:	080189d0 	.word	0x080189d0
 8007084:	20000098 	.word	0x20000098
 8007088:	08018530 	.word	0x08018530

0800708c <MX_APPE_Process>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void MX_APPE_Process(void)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007090:	f04f 30ff 	mov.w	r0, #4294967295
 8007094:	f00f fafa 	bl	801668c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8007098:	bf00      	nop
 800709a:	bd80      	pop	{r7, pc}

0800709c <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 800709c:	b480      	push	{r7}
 800709e:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 80070a0:	bf00      	nop
}
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	/* Check the notification condition */
	if (g_ot_notification_allowed) {
 80070b6:	4b16      	ldr	r3, [pc, #88]	@ (8007110 <UTIL_SEQ_EvtIdle+0x64>)
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d002      	beq.n	80070c4 <UTIL_SEQ_EvtIdle+0x18>
		UTIL_SEQ_Run(1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4);
 80070be:	2001      	movs	r0, #1
 80070c0:	f00f fae4 	bl	801668c <UTIL_SEQ_Run>
	}	
  switch(evt_waited_bm)
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	2b10      	cmp	r3, #16
 80070c8:	d014      	beq.n	80070f4 <UTIL_SEQ_EvtIdle+0x48>
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	2b10      	cmp	r3, #16
 80070ce:	d816      	bhi.n	80070fe <UTIL_SEQ_EvtIdle+0x52>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d003      	beq.n	80070de <UTIL_SEQ_EvtIdle+0x32>
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b04      	cmp	r3, #4
 80070da:	d004      	beq.n	80070e6 <UTIL_SEQ_EvtIdle+0x3a>
 80070dc:	e00f      	b.n	80070fe <UTIL_SEQ_EvtIdle+0x52>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 80070de:	2002      	movs	r0, #2
 80070e0:	f00f fad4 	bl	801668c <UTIL_SEQ_Run>
    break;
 80070e4:	e010      	b.n	8007108 <UTIL_SEQ_EvtIdle+0x5c>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 80070e6:	2004      	movs	r0, #4
 80070e8:	f00f fc1a 	bl	8016920 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 80070ec:	2003      	movs	r0, #3
 80070ee:	f00f facd 	bl	801668c <UTIL_SEQ_Run>
    break;
 80070f2:	e009      	b.n	8007108 <UTIL_SEQ_EvtIdle+0x5c>
  case EVENT_ON_OFF_RSP:
    /* Run all task except CFG_TASK_BUTTON_SW1 */
    UTIL_SEQ_Run(~(1U << CFG_TASK_BUTTON_SW1));
 80070f4:	f06f 0010 	mvn.w	r0, #16
 80070f8:	f00f fac8 	bl	801668c <UTIL_SEQ_Run>
    break;
 80070fc:	e004      	b.n	8007108 <UTIL_SEQ_EvtIdle+0x5c>
  default :
    /* default case */
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	f00f fac3 	bl	801668c <UTIL_SEQ_Run>
    break;
 8007106:	bf00      	nop
  }
}
 8007108:	bf00      	nop
 800710a:	3708      	adds	r7, #8
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	20000461 	.word	0x20000461

08007114 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b082      	sub	sp, #8
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 800711c:	2100      	movs	r1, #0
 800711e:	2008      	movs	r0, #8
 8007120:	f00f fbd2 	bl	80168c8 <UTIL_SEQ_SetTask>
  return;
 8007124:	bf00      	nop
}
 8007126:	3708      	adds	r7, #8
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}

0800712c <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8007134:	2001      	movs	r0, #1
 8007136:	f00f fbf3 	bl	8016920 <UTIL_SEQ_SetEvt>
  return;
 800713a:	bf00      	nop
}
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800714a:	2001      	movs	r0, #1
 800714c:	f00f fc08 	bl	8016960 <UTIL_SEQ_WaitEvt>
  return;
 8007150:	bf00      	nop
}
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	330b      	adds	r3, #11
 8007164:	1c99      	adds	r1, r3, #2
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	7a9b      	ldrb	r3, [r3, #10]
 800716a:	3b02      	subs	r3, #2
 800716c:	461a      	mov	r2, r3
 800716e:	2001      	movs	r0, #1
 8007170:	f00b fc16 	bl	80129a0 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f00b faf3 	bl	8012760 <TL_MM_EvtDone>
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8007182:	b580      	push	{r7, lr}
 8007184:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_USART1_UART_Init();
 8007186:	f001 f87d 	bl	8008284 <MX_USART1_UART_Init>
  return;
 800718a:	bf00      	nop
#endif
}
 800718c:	bd80      	pop	{r7, pc}

0800718e <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	60f8      	str	r0, [r7, #12]
 8007196:	460b      	mov	r3, r1
 8007198:	607a      	str	r2, [r7, #4]
 800719a:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800719c:	897a      	ldrh	r2, [r7, #10]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68f9      	ldr	r1, [r7, #12]
 80071a2:	2000      	movs	r0, #0
 80071a4:	f000 fec2 	bl	8007f2c <HW_UART_Transmit_DMA>

  return;
 80071a8:	bf00      	nop
}
 80071aa:	3710      	adds	r7, #16
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <BSP_PB_Callback>:
  * @brief This function manage the Push button action
  * @param  Button which has been activated
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	4603      	mov	r3, r0
 80071b8:	71fb      	strb	r3, [r7, #7]
  switch (Button)
 80071ba:	79fb      	ldrb	r3, [r7, #7]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <BSP_PB_Callback+0x1a>
  {
  case BUTTON_USER1:
    UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW1, CFG_SCH_PRIO_1);
 80071c0:	2101      	movs	r1, #1
 80071c2:	2010      	movs	r0, #16
 80071c4:	f00f fb80 	bl	80168c8 <UTIL_SEQ_SetTask>
    break;
 80071c8:	e000      	b.n	80071cc <BSP_PB_Callback+0x1c>
  
  default:
    break;
 80071ca:	bf00      	nop
  }
}
 80071cc:	bf00      	nop
 80071ce:	3708      	adds	r7, #8
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <RxUART_Init>:

static void RxUART_Init(void)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80071d8:	4b03      	ldr	r3, [pc, #12]	@ (80071e8 <RxUART_Init+0x14>)
 80071da:	2201      	movs	r2, #1
 80071dc:	4903      	ldr	r1, [pc, #12]	@ (80071ec <RxUART_Init+0x18>)
 80071de:	2000      	movs	r0, #0
 80071e0:	f000 fe7c 	bl	8007edc <HW_UART_Receive_IT>
}
 80071e4:	bf00      	nop
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	080071f1 	.word	0x080071f1
 80071ec:	20000140 	.word	0x20000140

080071f0 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 80071f4:	4b16      	ldr	r3, [pc, #88]	@ (8007250 <RxCpltCallback+0x60>)
 80071f6:	881b      	ldrh	r3, [r3, #0]
 80071f8:	2bff      	cmp	r3, #255	@ 0xff
 80071fa:	d820      	bhi.n	800723e <RxCpltCallback+0x4e>
  {
    if (aRxBuffer[0] == '\r')
 80071fc:	4b15      	ldr	r3, [pc, #84]	@ (8007254 <RxCpltCallback+0x64>)
 80071fe:	781b      	ldrb	r3, [r3, #0]
 8007200:	2b0d      	cmp	r3, #13
 8007202:	d111      	bne.n	8007228 <RxCpltCallback+0x38>
    {
      APP_DBG("received %s", CommandString);
 8007204:	4b14      	ldr	r3, [pc, #80]	@ (8007258 <RxCpltCallback+0x68>)
 8007206:	4a15      	ldr	r2, [pc, #84]	@ (800725c <RxCpltCallback+0x6c>)
 8007208:	2101      	movs	r1, #1
 800720a:	2000      	movs	r0, #0
 800720c:	f001 fb68 	bl	80088e0 <logApplication>

      UartCmdExecute();
 8007210:	f000 f828 	bl	8007264 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 8007214:	4b0e      	ldr	r3, [pc, #56]	@ (8007250 <RxCpltCallback+0x60>)
 8007216:	2200      	movs	r2, #0
 8007218:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 800721a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800721e:	2100      	movs	r1, #0
 8007220:	480d      	ldr	r0, [pc, #52]	@ (8007258 <RxCpltCallback+0x68>)
 8007222:	f00f fe9f 	bl	8016f64 <memset>
 8007226:	e00a      	b.n	800723e <RxCpltCallback+0x4e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8007228:	4b09      	ldr	r3, [pc, #36]	@ (8007250 <RxCpltCallback+0x60>)
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	b291      	uxth	r1, r2
 8007230:	4a07      	ldr	r2, [pc, #28]	@ (8007250 <RxCpltCallback+0x60>)
 8007232:	8011      	strh	r1, [r2, #0]
 8007234:	461a      	mov	r2, r3
 8007236:	4b07      	ldr	r3, [pc, #28]	@ (8007254 <RxCpltCallback+0x64>)
 8007238:	7819      	ldrb	r1, [r3, #0]
 800723a:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <RxCpltCallback+0x68>)
 800723c:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 800723e:	4b08      	ldr	r3, [pc, #32]	@ (8007260 <RxCpltCallback+0x70>)
 8007240:	2201      	movs	r2, #1
 8007242:	4904      	ldr	r1, [pc, #16]	@ (8007254 <RxCpltCallback+0x64>)
 8007244:	2000      	movs	r0, #0
 8007246:	f000 fe49 	bl	8007edc <HW_UART_Receive_IT>
}
 800724a:	bf00      	nop
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	20000248 	.word	0x20000248
 8007254:	20000140 	.word	0x20000140
 8007258:	20000148 	.word	0x20000148
 800725c:	08017eb0 	.word	0x08017eb0
 8007260:	080071f1 	.word	0x080071f1

08007264 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 8007268:	4913      	ldr	r1, [pc, #76]	@ (80072b8 <UartCmdExecute+0x54>)
 800726a:	4814      	ldr	r0, [pc, #80]	@ (80072bc <UartCmdExecute+0x58>)
 800726c:	f7fe fc47 	bl	8005afe <strcmp>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d108      	bne.n	8007288 <UartCmdExecute+0x24>
  {
    APP_DBG("SW1 OK");
 8007276:	4a12      	ldr	r2, [pc, #72]	@ (80072c0 <UartCmdExecute+0x5c>)
 8007278:	2101      	movs	r1, #1
 800727a:	2000      	movs	r0, #0
 800727c:	f001 fb30 	bl	80088e0 <logApplication>
//    exti_handle.Line = EXTI_LINE_4;
//    HAL_EXTI_GenerateSWI(&exti_handle);
    BSP_PB_Callback(BUTTON_USER1);
 8007280:	2000      	movs	r0, #0
 8007282:	f7ff ff95 	bl	80071b0 <BSP_PB_Callback>
 
  else
  {
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
  }
}
 8007286:	e015      	b.n	80072b4 <UartCmdExecute+0x50>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8007288:	490e      	ldr	r1, [pc, #56]	@ (80072c4 <UartCmdExecute+0x60>)
 800728a:	480c      	ldr	r0, [pc, #48]	@ (80072bc <UartCmdExecute+0x58>)
 800728c:	f7fe fc37 	bl	8005afe <strcmp>
 8007290:	4603      	mov	r3, r0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d108      	bne.n	80072a8 <UartCmdExecute+0x44>
    APP_DBG("SW2 OK");
 8007296:	4a0c      	ldr	r2, [pc, #48]	@ (80072c8 <UartCmdExecute+0x64>)
 8007298:	2101      	movs	r1, #1
 800729a:	2000      	movs	r0, #0
 800729c:	f001 fb20 	bl	80088e0 <logApplication>
    BSP_PB_Callback(BUTTON_USER2);
 80072a0:	2001      	movs	r0, #1
 80072a2:	f7ff ff85 	bl	80071b0 <BSP_PB_Callback>
}
 80072a6:	e005      	b.n	80072b4 <UartCmdExecute+0x50>
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
 80072a8:	4b04      	ldr	r3, [pc, #16]	@ (80072bc <UartCmdExecute+0x58>)
 80072aa:	4a08      	ldr	r2, [pc, #32]	@ (80072cc <UartCmdExecute+0x68>)
 80072ac:	2101      	movs	r1, #1
 80072ae:	2000      	movs	r0, #0
 80072b0:	f001 fb16 	bl	80088e0 <logApplication>
}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	08017ebc 	.word	0x08017ebc
 80072bc:	20000148 	.word	0x20000148
 80072c0:	08017ec0 	.word	0x08017ec0
 80072c4:	08017ec8 	.word	0x08017ec8
 80072c8:	08017ecc 	.word	0x08017ecc
 80072cc:	08017ed4 	.word	0x08017ed4

080072d0 <LL_EXTI_EnableIT_0_31>:
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80072d8:	4b06      	ldr	r3, [pc, #24]	@ (80072f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80072da:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80072de:	4905      	ldr	r1, [pc, #20]	@ (80072f4 <LL_EXTI_EnableIT_0_31+0x24>)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	58000800 	.word	0x58000800

080072f8 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007300:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	4904      	ldr	r1, [pc, #16]	@ (8007318 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4313      	orrs	r3, r2
 800730a:	600b      	str	r3, [r1, #0]

}
 800730c:	bf00      	nop
 800730e:	370c      	adds	r7, #12
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	58000800 	.word	0x58000800

0800731c <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 800731c:	b480      	push	{r7}
 800731e:	b083      	sub	sp, #12
 8007320:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8007322:	4b0d      	ldr	r3, [pc, #52]	@ (8007358 <ReadRtcSsrValue+0x3c>)
 8007324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007326:	b29b      	uxth	r3, r3
 8007328:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 800732a:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <ReadRtcSsrValue+0x3c>)
 800732c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732e:	b29b      	uxth	r3, r3
 8007330:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8007332:	e005      	b.n	8007340 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8007338:	4b07      	ldr	r3, [pc, #28]	@ (8007358 <ReadRtcSsrValue+0x3c>)
 800733a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733c:	b29b      	uxth	r3, r3
 800733e:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	429a      	cmp	r2, r3
 8007346:	d1f5      	bne.n	8007334 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8007348:	683b      	ldr	r3, [r7, #0]
}
 800734a:	4618      	mov	r0, r3
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	40002800 	.word	0x40002800

0800735c <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	4603      	mov	r3, r0
 8007364:	460a      	mov	r2, r1
 8007366:	71fb      	strb	r3, [r7, #7]
 8007368:	4613      	mov	r3, r2
 800736a:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 800736c:	79ba      	ldrb	r2, [r7, #6]
 800736e:	491d      	ldr	r1, [pc, #116]	@ (80073e4 <LinkTimerAfter+0x88>)
 8007370:	4613      	mov	r3, r2
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	4413      	add	r3, r2
 8007376:	00db      	lsls	r3, r3, #3
 8007378:	440b      	add	r3, r1
 800737a:	3315      	adds	r3, #21
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007380:	7bfb      	ldrb	r3, [r7, #15]
 8007382:	2b06      	cmp	r3, #6
 8007384:	d009      	beq.n	800739a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8007386:	7bfa      	ldrb	r2, [r7, #15]
 8007388:	4916      	ldr	r1, [pc, #88]	@ (80073e4 <LinkTimerAfter+0x88>)
 800738a:	4613      	mov	r3, r2
 800738c:	005b      	lsls	r3, r3, #1
 800738e:	4413      	add	r3, r2
 8007390:	00db      	lsls	r3, r3, #3
 8007392:	440b      	add	r3, r1
 8007394:	3314      	adds	r3, #20
 8007396:	79fa      	ldrb	r2, [r7, #7]
 8007398:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800739a:	79fa      	ldrb	r2, [r7, #7]
 800739c:	4911      	ldr	r1, [pc, #68]	@ (80073e4 <LinkTimerAfter+0x88>)
 800739e:	4613      	mov	r3, r2
 80073a0:	005b      	lsls	r3, r3, #1
 80073a2:	4413      	add	r3, r2
 80073a4:	00db      	lsls	r3, r3, #3
 80073a6:	440b      	add	r3, r1
 80073a8:	3315      	adds	r3, #21
 80073aa:	7bfa      	ldrb	r2, [r7, #15]
 80073ac:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 80073ae:	79fa      	ldrb	r2, [r7, #7]
 80073b0:	490c      	ldr	r1, [pc, #48]	@ (80073e4 <LinkTimerAfter+0x88>)
 80073b2:	4613      	mov	r3, r2
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	4413      	add	r3, r2
 80073b8:	00db      	lsls	r3, r3, #3
 80073ba:	440b      	add	r3, r1
 80073bc:	3314      	adds	r3, #20
 80073be:	79ba      	ldrb	r2, [r7, #6]
 80073c0:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 80073c2:	79ba      	ldrb	r2, [r7, #6]
 80073c4:	4907      	ldr	r1, [pc, #28]	@ (80073e4 <LinkTimerAfter+0x88>)
 80073c6:	4613      	mov	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	440b      	add	r3, r1
 80073d0:	3315      	adds	r3, #21
 80073d2:	79fa      	ldrb	r2, [r7, #7]
 80073d4:	701a      	strb	r2, [r3, #0]

  return;
 80073d6:	bf00      	nop
}
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	2000024c 	.word	0x2000024c

080073e8 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	4603      	mov	r3, r0
 80073f0:	460a      	mov	r2, r1
 80073f2:	71fb      	strb	r3, [r7, #7]
 80073f4:	4613      	mov	r3, r2
 80073f6:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 80073f8:	4b29      	ldr	r3, [pc, #164]	@ (80074a0 <LinkTimerBefore+0xb8>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	79ba      	ldrb	r2, [r7, #6]
 8007400:	429a      	cmp	r2, r3
 8007402:	d032      	beq.n	800746a <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8007404:	79ba      	ldrb	r2, [r7, #6]
 8007406:	4927      	ldr	r1, [pc, #156]	@ (80074a4 <LinkTimerBefore+0xbc>)
 8007408:	4613      	mov	r3, r2
 800740a:	005b      	lsls	r3, r3, #1
 800740c:	4413      	add	r3, r2
 800740e:	00db      	lsls	r3, r3, #3
 8007410:	440b      	add	r3, r1
 8007412:	3314      	adds	r3, #20
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8007418:	7bfa      	ldrb	r2, [r7, #15]
 800741a:	4922      	ldr	r1, [pc, #136]	@ (80074a4 <LinkTimerBefore+0xbc>)
 800741c:	4613      	mov	r3, r2
 800741e:	005b      	lsls	r3, r3, #1
 8007420:	4413      	add	r3, r2
 8007422:	00db      	lsls	r3, r3, #3
 8007424:	440b      	add	r3, r1
 8007426:	3315      	adds	r3, #21
 8007428:	79fa      	ldrb	r2, [r7, #7]
 800742a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 800742c:	79fa      	ldrb	r2, [r7, #7]
 800742e:	491d      	ldr	r1, [pc, #116]	@ (80074a4 <LinkTimerBefore+0xbc>)
 8007430:	4613      	mov	r3, r2
 8007432:	005b      	lsls	r3, r3, #1
 8007434:	4413      	add	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	440b      	add	r3, r1
 800743a:	3315      	adds	r3, #21
 800743c:	79ba      	ldrb	r2, [r7, #6]
 800743e:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8007440:	79fa      	ldrb	r2, [r7, #7]
 8007442:	4918      	ldr	r1, [pc, #96]	@ (80074a4 <LinkTimerBefore+0xbc>)
 8007444:	4613      	mov	r3, r2
 8007446:	005b      	lsls	r3, r3, #1
 8007448:	4413      	add	r3, r2
 800744a:	00db      	lsls	r3, r3, #3
 800744c:	440b      	add	r3, r1
 800744e:	3314      	adds	r3, #20
 8007450:	7bfa      	ldrb	r2, [r7, #15]
 8007452:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8007454:	79ba      	ldrb	r2, [r7, #6]
 8007456:	4913      	ldr	r1, [pc, #76]	@ (80074a4 <LinkTimerBefore+0xbc>)
 8007458:	4613      	mov	r3, r2
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4413      	add	r3, r2
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	440b      	add	r3, r1
 8007462:	3314      	adds	r3, #20
 8007464:	79fa      	ldrb	r2, [r7, #7]
 8007466:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8007468:	e014      	b.n	8007494 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 800746a:	79fa      	ldrb	r2, [r7, #7]
 800746c:	490d      	ldr	r1, [pc, #52]	@ (80074a4 <LinkTimerBefore+0xbc>)
 800746e:	4613      	mov	r3, r2
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	440b      	add	r3, r1
 8007478:	3315      	adds	r3, #21
 800747a:	79ba      	ldrb	r2, [r7, #6]
 800747c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800747e:	79ba      	ldrb	r2, [r7, #6]
 8007480:	4908      	ldr	r1, [pc, #32]	@ (80074a4 <LinkTimerBefore+0xbc>)
 8007482:	4613      	mov	r3, r2
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	4413      	add	r3, r2
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	440b      	add	r3, r1
 800748c:	3314      	adds	r3, #20
 800748e:	79fa      	ldrb	r2, [r7, #7]
 8007490:	701a      	strb	r2, [r3, #0]
  return;
 8007492:	bf00      	nop
}
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	200002dc 	.word	0x200002dc
 80074a4:	2000024c 	.word	0x2000024c

080074a8 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80074b2:	4b4e      	ldr	r3, [pc, #312]	@ (80075ec <linkTimer+0x144>)
 80074b4:	781b      	ldrb	r3, [r3, #0]
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b06      	cmp	r3, #6
 80074ba:	d118      	bne.n	80074ee <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 80074bc:	4b4b      	ldr	r3, [pc, #300]	@ (80075ec <linkTimer+0x144>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	4b4b      	ldr	r3, [pc, #300]	@ (80075f0 <linkTimer+0x148>)
 80074c4:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 80074c6:	4a49      	ldr	r2, [pc, #292]	@ (80075ec <linkTimer+0x144>)
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 80074cc:	79fa      	ldrb	r2, [r7, #7]
 80074ce:	4949      	ldr	r1, [pc, #292]	@ (80075f4 <linkTimer+0x14c>)
 80074d0:	4613      	mov	r3, r2
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	4413      	add	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	440b      	add	r3, r1
 80074da:	3315      	adds	r3, #21
 80074dc:	2206      	movs	r2, #6
 80074de:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80074e0:	4b45      	ldr	r3, [pc, #276]	@ (80075f8 <linkTimer+0x150>)
 80074e2:	f04f 32ff 	mov.w	r2, #4294967295
 80074e6:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	81fb      	strh	r3, [r7, #14]
 80074ec:	e078      	b.n	80075e0 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 80074ee:	f000 f909 	bl	8007704 <ReturnTimeElapsed>
 80074f2:	4603      	mov	r3, r0
 80074f4:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 80074f6:	79fa      	ldrb	r2, [r7, #7]
 80074f8:	493e      	ldr	r1, [pc, #248]	@ (80075f4 <linkTimer+0x14c>)
 80074fa:	4613      	mov	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	440b      	add	r3, r1
 8007504:	3308      	adds	r3, #8
 8007506:	6819      	ldr	r1, [r3, #0]
 8007508:	89fb      	ldrh	r3, [r7, #14]
 800750a:	79fa      	ldrb	r2, [r7, #7]
 800750c:	4419      	add	r1, r3
 800750e:	4839      	ldr	r0, [pc, #228]	@ (80075f4 <linkTimer+0x14c>)
 8007510:	4613      	mov	r3, r2
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	4413      	add	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	4403      	add	r3, r0
 800751a:	3308      	adds	r3, #8
 800751c:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 800751e:	79fa      	ldrb	r2, [r7, #7]
 8007520:	4934      	ldr	r1, [pc, #208]	@ (80075f4 <linkTimer+0x14c>)
 8007522:	4613      	mov	r3, r2
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	4413      	add	r3, r2
 8007528:	00db      	lsls	r3, r3, #3
 800752a:	440b      	add	r3, r1
 800752c:	3308      	adds	r3, #8
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8007532:	4b2e      	ldr	r3, [pc, #184]	@ (80075ec <linkTimer+0x144>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	b2db      	uxtb	r3, r3
 8007538:	4619      	mov	r1, r3
 800753a:	4a2e      	ldr	r2, [pc, #184]	@ (80075f4 <linkTimer+0x14c>)
 800753c:	460b      	mov	r3, r1
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	440b      	add	r3, r1
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4413      	add	r3, r2
 8007546:	3308      	adds	r3, #8
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	429a      	cmp	r2, r3
 800754e:	d337      	bcc.n	80075c0 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8007550:	4b26      	ldr	r3, [pc, #152]	@ (80075ec <linkTimer+0x144>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8007556:	7b7a      	ldrb	r2, [r7, #13]
 8007558:	4926      	ldr	r1, [pc, #152]	@ (80075f4 <linkTimer+0x14c>)
 800755a:	4613      	mov	r3, r2
 800755c:	005b      	lsls	r3, r3, #1
 800755e:	4413      	add	r3, r2
 8007560:	00db      	lsls	r3, r3, #3
 8007562:	440b      	add	r3, r1
 8007564:	3315      	adds	r3, #21
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 800756a:	e013      	b.n	8007594 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 800756c:	7b7a      	ldrb	r2, [r7, #13]
 800756e:	4921      	ldr	r1, [pc, #132]	@ (80075f4 <linkTimer+0x14c>)
 8007570:	4613      	mov	r3, r2
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	4413      	add	r3, r2
 8007576:	00db      	lsls	r3, r3, #3
 8007578:	440b      	add	r3, r1
 800757a:	3315      	adds	r3, #21
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8007580:	7b7a      	ldrb	r2, [r7, #13]
 8007582:	491c      	ldr	r1, [pc, #112]	@ (80075f4 <linkTimer+0x14c>)
 8007584:	4613      	mov	r3, r2
 8007586:	005b      	lsls	r3, r3, #1
 8007588:	4413      	add	r3, r2
 800758a:	00db      	lsls	r3, r3, #3
 800758c:	440b      	add	r3, r1
 800758e:	3315      	adds	r3, #21
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8007594:	7b3b      	ldrb	r3, [r7, #12]
 8007596:	2b06      	cmp	r3, #6
 8007598:	d00b      	beq.n	80075b2 <linkTimer+0x10a>
 800759a:	7b3a      	ldrb	r2, [r7, #12]
 800759c:	4915      	ldr	r1, [pc, #84]	@ (80075f4 <linkTimer+0x14c>)
 800759e:	4613      	mov	r3, r2
 80075a0:	005b      	lsls	r3, r3, #1
 80075a2:	4413      	add	r3, r2
 80075a4:	00db      	lsls	r3, r3, #3
 80075a6:	440b      	add	r3, r1
 80075a8:	3308      	adds	r3, #8
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d2dc      	bcs.n	800756c <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 80075b2:	7b7a      	ldrb	r2, [r7, #13]
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	4611      	mov	r1, r2
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7ff fecf 	bl	800735c <LinkTimerAfter>
 80075be:	e00f      	b.n	80075e0 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 80075c0:	4b0a      	ldr	r3, [pc, #40]	@ (80075ec <linkTimer+0x144>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	79fb      	ldrb	r3, [r7, #7]
 80075c8:	4611      	mov	r1, r2
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7ff ff0c 	bl	80073e8 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 80075d0:	4b06      	ldr	r3, [pc, #24]	@ (80075ec <linkTimer+0x144>)
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	4b06      	ldr	r3, [pc, #24]	@ (80075f0 <linkTimer+0x148>)
 80075d8:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 80075da:	4a04      	ldr	r2, [pc, #16]	@ (80075ec <linkTimer+0x144>)
 80075dc:	79fb      	ldrb	r3, [r7, #7]
 80075de:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 80075e0:	89fb      	ldrh	r3, [r7, #14]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	200002dc 	.word	0x200002dc
 80075f0:	200002dd 	.word	0x200002dd
 80075f4:	2000024c 	.word	0x2000024c
 80075f8:	200002e0 	.word	0x200002e0

080075fc <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b085      	sub	sp, #20
 8007600:	af00      	add	r7, sp, #0
 8007602:	4603      	mov	r3, r0
 8007604:	460a      	mov	r2, r1
 8007606:	71fb      	strb	r3, [r7, #7]
 8007608:	4613      	mov	r3, r2
 800760a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800760c:	4b39      	ldr	r3, [pc, #228]	@ (80076f4 <UnlinkTimer+0xf8>)
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	79fa      	ldrb	r2, [r7, #7]
 8007614:	429a      	cmp	r2, r3
 8007616:	d111      	bne.n	800763c <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8007618:	4b36      	ldr	r3, [pc, #216]	@ (80076f4 <UnlinkTimer+0xf8>)
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	b2da      	uxtb	r2, r3
 800761e:	4b36      	ldr	r3, [pc, #216]	@ (80076f8 <UnlinkTimer+0xfc>)
 8007620:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8007622:	79fa      	ldrb	r2, [r7, #7]
 8007624:	4935      	ldr	r1, [pc, #212]	@ (80076fc <UnlinkTimer+0x100>)
 8007626:	4613      	mov	r3, r2
 8007628:	005b      	lsls	r3, r3, #1
 800762a:	4413      	add	r3, r2
 800762c:	00db      	lsls	r3, r3, #3
 800762e:	440b      	add	r3, r1
 8007630:	3315      	adds	r3, #21
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	b2da      	uxtb	r2, r3
 8007636:	4b2f      	ldr	r3, [pc, #188]	@ (80076f4 <UnlinkTimer+0xf8>)
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	e03e      	b.n	80076ba <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 800763c:	79fa      	ldrb	r2, [r7, #7]
 800763e:	492f      	ldr	r1, [pc, #188]	@ (80076fc <UnlinkTimer+0x100>)
 8007640:	4613      	mov	r3, r2
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	4413      	add	r3, r2
 8007646:	00db      	lsls	r3, r3, #3
 8007648:	440b      	add	r3, r1
 800764a:	3314      	adds	r3, #20
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8007650:	79fa      	ldrb	r2, [r7, #7]
 8007652:	492a      	ldr	r1, [pc, #168]	@ (80076fc <UnlinkTimer+0x100>)
 8007654:	4613      	mov	r3, r2
 8007656:	005b      	lsls	r3, r3, #1
 8007658:	4413      	add	r3, r2
 800765a:	00db      	lsls	r3, r3, #3
 800765c:	440b      	add	r3, r1
 800765e:	3315      	adds	r3, #21
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8007664:	79f9      	ldrb	r1, [r7, #7]
 8007666:	7bfa      	ldrb	r2, [r7, #15]
 8007668:	4824      	ldr	r0, [pc, #144]	@ (80076fc <UnlinkTimer+0x100>)
 800766a:	460b      	mov	r3, r1
 800766c:	005b      	lsls	r3, r3, #1
 800766e:	440b      	add	r3, r1
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	4403      	add	r3, r0
 8007674:	3315      	adds	r3, #21
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	b2d8      	uxtb	r0, r3
 800767a:	4920      	ldr	r1, [pc, #128]	@ (80076fc <UnlinkTimer+0x100>)
 800767c:	4613      	mov	r3, r2
 800767e:	005b      	lsls	r3, r3, #1
 8007680:	4413      	add	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	440b      	add	r3, r1
 8007686:	3315      	adds	r3, #21
 8007688:	4602      	mov	r2, r0
 800768a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800768c:	7bbb      	ldrb	r3, [r7, #14]
 800768e:	2b06      	cmp	r3, #6
 8007690:	d013      	beq.n	80076ba <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8007692:	79f9      	ldrb	r1, [r7, #7]
 8007694:	7bba      	ldrb	r2, [r7, #14]
 8007696:	4819      	ldr	r0, [pc, #100]	@ (80076fc <UnlinkTimer+0x100>)
 8007698:	460b      	mov	r3, r1
 800769a:	005b      	lsls	r3, r3, #1
 800769c:	440b      	add	r3, r1
 800769e:	00db      	lsls	r3, r3, #3
 80076a0:	4403      	add	r3, r0
 80076a2:	3314      	adds	r3, #20
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	b2d8      	uxtb	r0, r3
 80076a8:	4914      	ldr	r1, [pc, #80]	@ (80076fc <UnlinkTimer+0x100>)
 80076aa:	4613      	mov	r3, r2
 80076ac:	005b      	lsls	r3, r3, #1
 80076ae:	4413      	add	r3, r2
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	440b      	add	r3, r1
 80076b4:	3314      	adds	r3, #20
 80076b6:	4602      	mov	r2, r0
 80076b8:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 80076ba:	79fa      	ldrb	r2, [r7, #7]
 80076bc:	490f      	ldr	r1, [pc, #60]	@ (80076fc <UnlinkTimer+0x100>)
 80076be:	4613      	mov	r3, r2
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	00db      	lsls	r3, r3, #3
 80076c6:	440b      	add	r3, r1
 80076c8:	330c      	adds	r3, #12
 80076ca:	2201      	movs	r2, #1
 80076cc:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 80076ce:	4b09      	ldr	r3, [pc, #36]	@ (80076f4 <UnlinkTimer+0xf8>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	2b06      	cmp	r3, #6
 80076d6:	d107      	bne.n	80076e8 <UnlinkTimer+0xec>
 80076d8:	79bb      	ldrb	r3, [r7, #6]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d104      	bne.n	80076e8 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80076de:	4b08      	ldr	r3, [pc, #32]	@ (8007700 <UnlinkTimer+0x104>)
 80076e0:	f04f 32ff 	mov.w	r2, #4294967295
 80076e4:	601a      	str	r2, [r3, #0]
  }

  return;
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
}
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	200002dc 	.word	0x200002dc
 80076f8:	200002dd 	.word	0x200002dd
 80076fc:	2000024c 	.word	0x2000024c
 8007700:	200002e0 	.word	0x200002e0

08007704 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b082      	sub	sp, #8
 8007708:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800770a:	4b1a      	ldr	r3, [pc, #104]	@ (8007774 <ReturnTimeElapsed+0x70>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007712:	d026      	beq.n	8007762 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8007714:	f7ff fe02 	bl	800731c <ReadRtcSsrValue>
 8007718:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 800771a:	4b16      	ldr	r3, [pc, #88]	@ (8007774 <ReturnTimeElapsed+0x70>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	429a      	cmp	r2, r3
 8007722:	d805      	bhi.n	8007730 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8007724:	4b13      	ldr	r3, [pc, #76]	@ (8007774 <ReturnTimeElapsed+0x70>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	1ad3      	subs	r3, r2, r3
 800772c:	607b      	str	r3, [r7, #4]
 800772e:	e00a      	b.n	8007746 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8007730:	4b11      	ldr	r3, [pc, #68]	@ (8007778 <ReturnTimeElapsed+0x74>)
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 800773c:	4b0d      	ldr	r3, [pc, #52]	@ (8007774 <ReturnTimeElapsed+0x70>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	4413      	add	r3, r2
 8007744:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8007746:	4b0d      	ldr	r3, [pc, #52]	@ (800777c <ReturnTimeElapsed+0x78>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	461a      	mov	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	fb02 f303 	mul.w	r3, r2, r3
 8007752:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8007754:	4b0a      	ldr	r3, [pc, #40]	@ (8007780 <ReturnTimeElapsed+0x7c>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	461a      	mov	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	40d3      	lsrs	r3, r2
 800775e:	607b      	str	r3, [r7, #4]
 8007760:	e001      	b.n	8007766 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8007762:	2300      	movs	r3, #0
 8007764:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	b29b      	uxth	r3, r3
}
 800776a:	4618      	mov	r0, r3
 800776c:	3708      	adds	r7, #8
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	200002e0 	.word	0x200002e0
 8007778:	200002e8 	.word	0x200002e8
 800777c:	200002e6 	.word	0x200002e6
 8007780:	200002e5 	.word	0x200002e5

08007784 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b082      	sub	sp, #8
 8007788:	af00      	add	r7, sp, #0
 800778a:	4603      	mov	r3, r0
 800778c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800778e:	88fb      	ldrh	r3, [r7, #6]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d108      	bne.n	80077a6 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8007794:	f7ff fdc2 	bl	800731c <ReadRtcSsrValue>
 8007798:	4603      	mov	r3, r0
 800779a:	4a21      	ldr	r2, [pc, #132]	@ (8007820 <RestartWakeupCounter+0x9c>)
 800779c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800779e:	2003      	movs	r0, #3
 80077a0:	f004 fcc5 	bl	800c12e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 80077a4:	e039      	b.n	800781a <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 80077a6:	88fb      	ldrh	r3, [r7, #6]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d803      	bhi.n	80077b4 <RestartWakeupCounter+0x30>
 80077ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007824 <RestartWakeupCounter+0xa0>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	d002      	beq.n	80077ba <RestartWakeupCounter+0x36>
      Value -= 1;
 80077b4:	88fb      	ldrh	r3, [r7, #6]
 80077b6:	3b01      	subs	r3, #1
 80077b8:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80077ba:	bf00      	nop
 80077bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007828 <RestartWakeupCounter+0xa4>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0304 	and.w	r3, r3, #4
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0f8      	beq.n	80077bc <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80077ca:	4b17      	ldr	r3, [pc, #92]	@ (8007828 <RestartWakeupCounter+0xa4>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	b2da      	uxtb	r2, r3
 80077d2:	4b15      	ldr	r3, [pc, #84]	@ (8007828 <RestartWakeupCounter+0xa4>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 80077da:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80077dc:	4b13      	ldr	r3, [pc, #76]	@ (800782c <RestartWakeupCounter+0xa8>)
 80077de:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80077e2:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80077e4:	2003      	movs	r0, #3
 80077e6:	f004 fcb0 	bl	800c14a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 80077ea:	4b11      	ldr	r3, [pc, #68]	@ (8007830 <RestartWakeupCounter+0xac>)
 80077ec:	695b      	ldr	r3, [r3, #20]
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	041b      	lsls	r3, r3, #16
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	490e      	ldr	r1, [pc, #56]	@ (8007830 <RestartWakeupCounter+0xac>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80077fa:	f7ff fd8f 	bl	800731c <ReadRtcSsrValue>
 80077fe:	4603      	mov	r3, r0
 8007800:	4a07      	ldr	r2, [pc, #28]	@ (8007820 <RestartWakeupCounter+0x9c>)
 8007802:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8007804:	4b08      	ldr	r3, [pc, #32]	@ (8007828 <RestartWakeupCounter+0xa4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	4b07      	ldr	r3, [pc, #28]	@ (8007828 <RestartWakeupCounter+0xa4>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007812:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8007814:	f3af 8000 	nop.w
  return ;
 8007818:	bf00      	nop
}
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}
 8007820:	200002e0 	.word	0x200002e0
 8007824:	200002e5 	.word	0x200002e5
 8007828:	20000330 	.word	0x20000330
 800782c:	58000800 	.word	0x58000800
 8007830:	40002800 	.word	0x40002800

08007834 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800783a:	4b45      	ldr	r3, [pc, #276]	@ (8007950 <RescheduleTimerList+0x11c>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007846:	d107      	bne.n	8007858 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8007848:	bf00      	nop
 800784a:	4b42      	ldr	r3, [pc, #264]	@ (8007954 <RescheduleTimerList+0x120>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	68db      	ldr	r3, [r3, #12]
 8007850:	f003 0304 	and.w	r3, r3, #4
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1f8      	bne.n	800784a <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8007858:	4b3e      	ldr	r3, [pc, #248]	@ (8007954 <RescheduleTimerList+0x120>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	689a      	ldr	r2, [r3, #8]
 800785e:	4b3d      	ldr	r3, [pc, #244]	@ (8007954 <RescheduleTimerList+0x120>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007866:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8007868:	4b3b      	ldr	r3, [pc, #236]	@ (8007958 <RescheduleTimerList+0x124>)
 800786a:	781b      	ldrb	r3, [r3, #0]
 800786c:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 800786e:	7bfa      	ldrb	r2, [r7, #15]
 8007870:	493a      	ldr	r1, [pc, #232]	@ (800795c <RescheduleTimerList+0x128>)
 8007872:	4613      	mov	r3, r2
 8007874:	005b      	lsls	r3, r3, #1
 8007876:	4413      	add	r3, r2
 8007878:	00db      	lsls	r3, r3, #3
 800787a:	440b      	add	r3, r1
 800787c:	3308      	adds	r3, #8
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8007882:	f7ff ff3f 	bl	8007704 <ReturnTimeElapsed>
 8007886:	4603      	mov	r3, r0
 8007888:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800788a:	88fb      	ldrh	r3, [r7, #6]
 800788c:	68ba      	ldr	r2, [r7, #8]
 800788e:	429a      	cmp	r2, r3
 8007890:	d205      	bcs.n	800789e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8007892:	2300      	movs	r3, #0
 8007894:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007896:	4b32      	ldr	r3, [pc, #200]	@ (8007960 <RescheduleTimerList+0x12c>)
 8007898:	2201      	movs	r2, #1
 800789a:	701a      	strb	r2, [r3, #0]
 800789c:	e04d      	b.n	800793a <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	4a30      	ldr	r2, [pc, #192]	@ (8007964 <RescheduleTimerList+0x130>)
 80078a2:	8812      	ldrh	r2, [r2, #0]
 80078a4:	b292      	uxth	r2, r2
 80078a6:	4413      	add	r3, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d906      	bls.n	80078be <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 80078b0:	4b2c      	ldr	r3, [pc, #176]	@ (8007964 <RescheduleTimerList+0x130>)
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 80078b6:	4b2a      	ldr	r3, [pc, #168]	@ (8007960 <RescheduleTimerList+0x12c>)
 80078b8:	2200      	movs	r2, #0
 80078ba:	701a      	strb	r2, [r3, #0]
 80078bc:	e03d      	b.n	800793a <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	b29a      	uxth	r2, r3
 80078c2:	88fb      	ldrh	r3, [r7, #6]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80078c8:	4b25      	ldr	r3, [pc, #148]	@ (8007960 <RescheduleTimerList+0x12c>)
 80078ca:	2201      	movs	r2, #1
 80078cc:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80078ce:	e034      	b.n	800793a <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 80078d0:	7bfa      	ldrb	r2, [r7, #15]
 80078d2:	4922      	ldr	r1, [pc, #136]	@ (800795c <RescheduleTimerList+0x128>)
 80078d4:	4613      	mov	r3, r2
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	4413      	add	r3, r2
 80078da:	00db      	lsls	r3, r3, #3
 80078dc:	440b      	add	r3, r1
 80078de:	3308      	adds	r3, #8
 80078e0:	681a      	ldr	r2, [r3, #0]
 80078e2:	88fb      	ldrh	r3, [r7, #6]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d20a      	bcs.n	80078fe <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 80078e8:	7bfa      	ldrb	r2, [r7, #15]
 80078ea:	491c      	ldr	r1, [pc, #112]	@ (800795c <RescheduleTimerList+0x128>)
 80078ec:	4613      	mov	r3, r2
 80078ee:	005b      	lsls	r3, r3, #1
 80078f0:	4413      	add	r3, r2
 80078f2:	00db      	lsls	r3, r3, #3
 80078f4:	440b      	add	r3, r1
 80078f6:	3308      	adds	r3, #8
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	e013      	b.n	8007926 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 80078fe:	7bfa      	ldrb	r2, [r7, #15]
 8007900:	4916      	ldr	r1, [pc, #88]	@ (800795c <RescheduleTimerList+0x128>)
 8007902:	4613      	mov	r3, r2
 8007904:	005b      	lsls	r3, r3, #1
 8007906:	4413      	add	r3, r2
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	440b      	add	r3, r1
 800790c:	3308      	adds	r3, #8
 800790e:	6819      	ldr	r1, [r3, #0]
 8007910:	88fb      	ldrh	r3, [r7, #6]
 8007912:	7bfa      	ldrb	r2, [r7, #15]
 8007914:	1ac9      	subs	r1, r1, r3
 8007916:	4811      	ldr	r0, [pc, #68]	@ (800795c <RescheduleTimerList+0x128>)
 8007918:	4613      	mov	r3, r2
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	4413      	add	r3, r2
 800791e:	00db      	lsls	r3, r3, #3
 8007920:	4403      	add	r3, r0
 8007922:	3308      	adds	r3, #8
 8007924:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8007926:	7bfa      	ldrb	r2, [r7, #15]
 8007928:	490c      	ldr	r1, [pc, #48]	@ (800795c <RescheduleTimerList+0x128>)
 800792a:	4613      	mov	r3, r2
 800792c:	005b      	lsls	r3, r3, #1
 800792e:	4413      	add	r3, r2
 8007930:	00db      	lsls	r3, r3, #3
 8007932:	440b      	add	r3, r1
 8007934:	3315      	adds	r3, #21
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	2b06      	cmp	r3, #6
 800793e:	d1c7      	bne.n	80078d0 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8007940:	89bb      	ldrh	r3, [r7, #12]
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff ff1e 	bl	8007784 <RestartWakeupCounter>

  return ;
 8007948:	bf00      	nop
}
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	40002800 	.word	0x40002800
 8007954:	20000330 	.word	0x20000330
 8007958:	200002dc 	.word	0x200002dc
 800795c:	2000024c 	.word	0x2000024c
 8007960:	200002e4 	.word	0x200002e4
 8007964:	200002ea 	.word	0x200002ea

08007968 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b08a      	sub	sp, #40	@ 0x28
 800796c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800796e:	f3ef 8310 	mrs	r3, PRIMASK
 8007972:	617b      	str	r3, [r7, #20]
  return(result);
 8007974:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007976:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8007978:	b672      	cpsid	i
}
 800797a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800797c:	4b59      	ldr	r3, [pc, #356]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	22ca      	movs	r2, #202	@ 0xca
 8007982:	625a      	str	r2, [r3, #36]	@ 0x24
 8007984:	4b57      	ldr	r3, [pc, #348]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2253      	movs	r2, #83	@ 0x53
 800798a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800798c:	4b55      	ldr	r3, [pc, #340]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	689a      	ldr	r2, [r3, #8]
 8007992:	4b54      	ldr	r3, [pc, #336]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800799a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800799c:	4b52      	ldr	r3, [pc, #328]	@ (8007ae8 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 80079a4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80079a8:	4950      	ldr	r1, [pc, #320]	@ (8007aec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80079aa:	4613      	mov	r3, r2
 80079ac:	005b      	lsls	r3, r3, #1
 80079ae:	4413      	add	r3, r2
 80079b0:	00db      	lsls	r3, r3, #3
 80079b2:	440b      	add	r3, r1
 80079b4:	330c      	adds	r3, #12
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2b02      	cmp	r3, #2
 80079bc:	d16e      	bne.n	8007a9c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 80079be:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80079c2:	494a      	ldr	r1, [pc, #296]	@ (8007aec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80079c4:	4613      	mov	r3, r2
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	4413      	add	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	440b      	add	r3, r1
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 80079d2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80079d6:	4945      	ldr	r1, [pc, #276]	@ (8007aec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	440b      	add	r3, r1
 80079e2:	3310      	adds	r3, #16
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 80079e8:	4b41      	ldr	r3, [pc, #260]	@ (8007af0 <HW_TS_RTC_Wakeup_Handler+0x188>)
 80079ea:	781b      	ldrb	r3, [r3, #0]
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04c      	beq.n	8007a8c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 80079f2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80079f6:	493d      	ldr	r1, [pc, #244]	@ (8007aec <HW_TS_RTC_Wakeup_Handler+0x184>)
 80079f8:	4613      	mov	r3, r2
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	440b      	add	r3, r1
 8007a02:	330d      	adds	r3, #13
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d124      	bne.n	8007a56 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8007a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a10:	2101      	movs	r1, #1
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fdf2 	bl	80075fc <UnlinkTimer>
 8007a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1a:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	f383 8810 	msr	PRIMASK, r3
}
 8007a22:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8007a24:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007a28:	4930      	ldr	r1, [pc, #192]	@ (8007aec <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	005b      	lsls	r3, r3, #1
 8007a2e:	4413      	add	r3, r2
 8007a30:	00db      	lsls	r3, r3, #3
 8007a32:	440b      	add	r3, r1
 8007a34:	3304      	adds	r3, #4
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a3c:	4611      	mov	r1, r2
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f000 f9b8 	bl	8007db4 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007a44:	4b27      	ldr	r3, [pc, #156]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	22ca      	movs	r2, #202	@ 0xca
 8007a4a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a4c:	4b25      	ldr	r3, [pc, #148]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2253      	movs	r2, #83	@ 0x53
 8007a52:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a54:	e012      	b.n	8007a7c <HW_TS_RTC_Wakeup_Handler+0x114>
 8007a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a58:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f383 8810 	msr	PRIMASK, r3
}
 8007a60:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8007a62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a66:	4618      	mov	r0, r3
 8007a68:	f000 f920 	bl	8007cac <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007a6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	22ca      	movs	r2, #202	@ 0xca
 8007a72:	625a      	str	r2, [r3, #36]	@ 0x24
 8007a74:	4b1b      	ldr	r3, [pc, #108]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2253      	movs	r2, #83	@ 0x53
 8007a7a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8007a7c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	4619      	mov	r1, r3
 8007a84:	69b8      	ldr	r0, [r7, #24]
 8007a86:	f000 fa1b 	bl	8007ec0 <HW_TS_RTC_Int_AppNot>
 8007a8a:	e022      	b.n	8007ad2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8007a8c:	f7ff fed2 	bl	8007834 <RescheduleTimerList>
 8007a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a92:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	f383 8810 	msr	PRIMASK, r3
}
 8007a9a:	e01a      	b.n	8007ad2 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007a9c:	bf00      	nop
 8007a9e:	4b11      	ldr	r3, [pc, #68]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f003 0304 	and.w	r3, r3, #4
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d0f8      	beq.n	8007a9e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007aac:	4b0d      	ldr	r3, [pc, #52]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	68db      	ldr	r3, [r3, #12]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007abc:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8007abe:	4b0d      	ldr	r3, [pc, #52]	@ (8007af4 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8007ac0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f383 8810 	msr	PRIMASK, r3
}
 8007ad0:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007ad2:	4b04      	ldr	r3, [pc, #16]	@ (8007ae4 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	22ff      	movs	r2, #255	@ 0xff
 8007ad8:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8007ada:	bf00      	nop
}
 8007adc:	3728      	adds	r7, #40	@ 0x28
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
 8007ae2:	bf00      	nop
 8007ae4:	20000330 	.word	0x20000330
 8007ae8:	200002dc 	.word	0x200002dc
 8007aec:	2000024c 	.word	0x2000024c
 8007af0:	200002e4 	.word	0x200002e4
 8007af4:	58000800 	.word	0x58000800

08007af8 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	6039      	str	r1, [r7, #0]
 8007b02:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007b04:	4b5e      	ldr	r3, [pc, #376]	@ (8007c80 <HW_TS_Init+0x188>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	22ca      	movs	r2, #202	@ 0xca
 8007b0a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8007c80 <HW_TS_Init+0x188>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2253      	movs	r2, #83	@ 0x53
 8007b12:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007b14:	4b5b      	ldr	r3, [pc, #364]	@ (8007c84 <HW_TS_Init+0x18c>)
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	4a5a      	ldr	r2, [pc, #360]	@ (8007c84 <HW_TS_Init+0x18c>)
 8007b1a:	f043 0320 	orr.w	r3, r3, #32
 8007b1e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8007b20:	4b58      	ldr	r3, [pc, #352]	@ (8007c84 <HW_TS_Init+0x18c>)
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 0307 	and.w	r3, r3, #7
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	f1c3 0304 	rsb	r3, r3, #4
 8007b30:	b2da      	uxtb	r2, r3
 8007b32:	4b55      	ldr	r3, [pc, #340]	@ (8007c88 <HW_TS_Init+0x190>)
 8007b34:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8007b36:	4b53      	ldr	r3, [pc, #332]	@ (8007c84 <HW_TS_Init+0x18c>)
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007b3e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8007b42:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	fa92 f2a2 	rbit	r2, r2
 8007b4a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	2a00      	cmp	r2, #0
 8007b54:	d101      	bne.n	8007b5a <HW_TS_Init+0x62>
  {
    return 32U;
 8007b56:	2220      	movs	r2, #32
 8007b58:	e003      	b.n	8007b62 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	fab2 f282 	clz	r2, r2
 8007b60:	b2d2      	uxtb	r2, r2
 8007b62:	40d3      	lsrs	r3, r2
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	3301      	adds	r3, #1
 8007b68:	b2da      	uxtb	r2, r3
 8007b6a:	4b48      	ldr	r3, [pc, #288]	@ (8007c8c <HW_TS_Init+0x194>)
 8007b6c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8007b6e:	4b45      	ldr	r3, [pc, #276]	@ (8007c84 <HW_TS_Init+0x18c>)
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007b78:	b29b      	uxth	r3, r3
 8007b7a:	3301      	adds	r3, #1
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	4b44      	ldr	r3, [pc, #272]	@ (8007c90 <HW_TS_Init+0x198>)
 8007b80:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8007b82:	4b43      	ldr	r3, [pc, #268]	@ (8007c90 <HW_TS_Init+0x198>)
 8007b84:	881b      	ldrh	r3, [r3, #0]
 8007b86:	3b01      	subs	r3, #1
 8007b88:	4a40      	ldr	r2, [pc, #256]	@ (8007c8c <HW_TS_Init+0x194>)
 8007b8a:	7812      	ldrb	r2, [r2, #0]
 8007b8c:	fb02 f303 	mul.w	r3, r2, r3
 8007b90:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007b94:	4a3c      	ldr	r2, [pc, #240]	@ (8007c88 <HW_TS_Init+0x190>)
 8007b96:	7812      	ldrb	r2, [r2, #0]
 8007b98:	40d3      	lsrs	r3, r2
 8007b9a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8007b9c:	69bb      	ldr	r3, [r7, #24]
 8007b9e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d904      	bls.n	8007bb0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8007ba6:	4b3b      	ldr	r3, [pc, #236]	@ (8007c94 <HW_TS_Init+0x19c>)
 8007ba8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bac:	801a      	strh	r2, [r3, #0]
 8007bae:	e003      	b.n	8007bb8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	4b37      	ldr	r3, [pc, #220]	@ (8007c94 <HW_TS_Init+0x19c>)
 8007bb6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007bb8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007bbc:	f7ff fb9c 	bl	80072f8 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007bc0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007bc4:	f7ff fb84 	bl	80072d0 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8007bc8:	79fb      	ldrb	r3, [r7, #7]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d13d      	bne.n	8007c4a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007bce:	4b32      	ldr	r3, [pc, #200]	@ (8007c98 <HW_TS_Init+0x1a0>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8007bd4:	4b31      	ldr	r3, [pc, #196]	@ (8007c9c <HW_TS_Init+0x1a4>)
 8007bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007bda:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007bdc:	2300      	movs	r3, #0
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e00c      	b.n	8007bfc <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8007be2:	7ffa      	ldrb	r2, [r7, #31]
 8007be4:	492e      	ldr	r1, [pc, #184]	@ (8007ca0 <HW_TS_Init+0x1a8>)
 8007be6:	4613      	mov	r3, r2
 8007be8:	005b      	lsls	r3, r3, #1
 8007bea:	4413      	add	r3, r2
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	440b      	add	r3, r1
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007bf6:	7ffb      	ldrb	r3, [r7, #31]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	77fb      	strb	r3, [r7, #31]
 8007bfc:	7ffb      	ldrb	r3, [r7, #31]
 8007bfe:	2b05      	cmp	r3, #5
 8007c00:	d9ef      	bls.n	8007be2 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8007c02:	4b28      	ldr	r3, [pc, #160]	@ (8007ca4 <HW_TS_Init+0x1ac>)
 8007c04:	2206      	movs	r2, #6
 8007c06:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8007c08:	4b1d      	ldr	r3, [pc, #116]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689a      	ldr	r2, [r3, #8]
 8007c0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c16:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8007c18:	4b19      	ldr	r3, [pc, #100]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68db      	ldr	r3, [r3, #12]
 8007c1e:	b2da      	uxtb	r2, r3
 8007c20:	4b17      	ldr	r3, [pc, #92]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007c28:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8007c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007ca8 <HW_TS_Init+0x1b0>)
 8007c2c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007c30:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8007c32:	2003      	movs	r0, #3
 8007c34:	f004 fa89 	bl	800c14a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8007c38:	4b11      	ldr	r3, [pc, #68]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	689a      	ldr	r2, [r3, #8]
 8007c3e:	4b10      	ldr	r3, [pc, #64]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	e009      	b.n	8007c5e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8007c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	68db      	ldr	r3, [r3, #12]
 8007c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d002      	beq.n	8007c5e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8007c58:	2003      	movs	r0, #3
 8007c5a:	f004 fa68 	bl	800c12e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007c5e:	4b08      	ldr	r3, [pc, #32]	@ (8007c80 <HW_TS_Init+0x188>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	22ff      	movs	r2, #255	@ 0xff
 8007c64:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8007c66:	2200      	movs	r2, #0
 8007c68:	2103      	movs	r1, #3
 8007c6a:	2003      	movs	r0, #3
 8007c6c:	f004 fa1d 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007c70:	2003      	movs	r0, #3
 8007c72:	f004 fa34 	bl	800c0de <HAL_NVIC_EnableIRQ>

  return;
 8007c76:	bf00      	nop
}
 8007c78:	3720      	adds	r7, #32
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20000330 	.word	0x20000330
 8007c84:	40002800 	.word	0x40002800
 8007c88:	200002e5 	.word	0x200002e5
 8007c8c:	200002e6 	.word	0x200002e6
 8007c90:	200002e8 	.word	0x200002e8
 8007c94:	200002ea 	.word	0x200002ea
 8007c98:	200002e4 	.word	0x200002e4
 8007c9c:	200002e0 	.word	0x200002e0
 8007ca0:	2000024c 	.word	0x2000024c
 8007ca4:	200002dc 	.word	0x200002dc
 8007ca8:	58000800 	.word	0x58000800

08007cac <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b086      	sub	sp, #24
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb6:	f3ef 8310 	mrs	r3, PRIMASK
 8007cba:	60fb      	str	r3, [r7, #12]
  return(result);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007cbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007cc0:	b672      	cpsid	i
}
 8007cc2:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8007cc4:	2003      	movs	r0, #3
 8007cc6:	f004 fa18 	bl	800c0fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007cca:	4b34      	ldr	r3, [pc, #208]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	22ca      	movs	r2, #202	@ 0xca
 8007cd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8007cd2:	4b32      	ldr	r3, [pc, #200]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2253      	movs	r2, #83	@ 0x53
 8007cd8:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8007cda:	79fa      	ldrb	r2, [r7, #7]
 8007cdc:	4930      	ldr	r1, [pc, #192]	@ (8007da0 <HW_TS_Stop+0xf4>)
 8007cde:	4613      	mov	r3, r2
 8007ce0:	005b      	lsls	r3, r3, #1
 8007ce2:	4413      	add	r3, r2
 8007ce4:	00db      	lsls	r3, r3, #3
 8007ce6:	440b      	add	r3, r1
 8007ce8:	330c      	adds	r3, #12
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d142      	bne.n	8007d78 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8007cf2:	79fb      	ldrb	r3, [r7, #7]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7ff fc80 	bl	80075fc <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8007cfc:	4b29      	ldr	r3, [pc, #164]	@ (8007da4 <HW_TS_Stop+0xf8>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007d02:	7cfb      	ldrb	r3, [r7, #19]
 8007d04:	2b06      	cmp	r3, #6
 8007d06:	d12f      	bne.n	8007d68 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8007d08:	4b27      	ldr	r3, [pc, #156]	@ (8007da8 <HW_TS_Stop+0xfc>)
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d14:	d107      	bne.n	8007d26 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8007d16:	bf00      	nop
 8007d18:	4b20      	ldr	r3, [pc, #128]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68db      	ldr	r3, [r3, #12]
 8007d1e:	f003 0304 	and.w	r3, r3, #4
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1f8      	bne.n	8007d18 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8007d26:	4b1d      	ldr	r3, [pc, #116]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	689a      	ldr	r2, [r3, #8]
 8007d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d34:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007d36:	bf00      	nop
 8007d38:	4b18      	ldr	r3, [pc, #96]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f003 0304 	and.w	r3, r3, #4
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d0f8      	beq.n	8007d38 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007d46:	4b15      	ldr	r3, [pc, #84]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	4b13      	ldr	r3, [pc, #76]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007d56:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8007d58:	4b14      	ldr	r3, [pc, #80]	@ (8007dac <HW_TS_Stop+0x100>)
 8007d5a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007d5e:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8007d60:	2003      	movs	r0, #3
 8007d62:	f004 f9f2 	bl	800c14a <HAL_NVIC_ClearPendingIRQ>
 8007d66:	e007      	b.n	8007d78 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8007d68:	4b11      	ldr	r3, [pc, #68]	@ (8007db0 <HW_TS_Stop+0x104>)
 8007d6a:	781b      	ldrb	r3, [r3, #0]
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	7cfa      	ldrb	r2, [r7, #19]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d001      	beq.n	8007d78 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8007d74:	f7ff fd5e 	bl	8007834 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007d78:	4b08      	ldr	r3, [pc, #32]	@ (8007d9c <HW_TS_Stop+0xf0>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	22ff      	movs	r2, #255	@ 0xff
 8007d7e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007d80:	2003      	movs	r0, #3
 8007d82:	f004 f9ac 	bl	800c0de <HAL_NVIC_EnableIRQ>
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	f383 8810 	msr	PRIMASK, r3
}
 8007d90:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8007d92:	bf00      	nop
}
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20000330 	.word	0x20000330
 8007da0:	2000024c 	.word	0x2000024c
 8007da4:	200002dc 	.word	0x200002dc
 8007da8:	40002800 	.word	0x40002800
 8007dac:	58000800 	.word	0x58000800
 8007db0:	200002dd 	.word	0x200002dd

08007db4 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b086      	sub	sp, #24
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8007dc0:	79fa      	ldrb	r2, [r7, #7]
 8007dc2:	493b      	ldr	r1, [pc, #236]	@ (8007eb0 <HW_TS_Start+0xfc>)
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	005b      	lsls	r3, r3, #1
 8007dc8:	4413      	add	r3, r2
 8007dca:	00db      	lsls	r3, r3, #3
 8007dcc:	440b      	add	r3, r1
 8007dce:	330c      	adds	r3, #12
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d103      	bne.n	8007de0 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8007dd8:	79fb      	ldrb	r3, [r7, #7]
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7ff ff66 	bl	8007cac <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007de0:	f3ef 8310 	mrs	r3, PRIMASK
 8007de4:	60fb      	str	r3, [r7, #12]
  return(result);
 8007de6:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007de8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007dea:	b672      	cpsid	i
}
 8007dec:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8007dee:	2003      	movs	r0, #3
 8007df0:	f004 f983 	bl	800c0fa <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007df4:	4b2f      	ldr	r3, [pc, #188]	@ (8007eb4 <HW_TS_Start+0x100>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	22ca      	movs	r2, #202	@ 0xca
 8007dfa:	625a      	str	r2, [r3, #36]	@ 0x24
 8007dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8007eb4 <HW_TS_Start+0x100>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2253      	movs	r2, #83	@ 0x53
 8007e02:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8007e04:	79fa      	ldrb	r2, [r7, #7]
 8007e06:	492a      	ldr	r1, [pc, #168]	@ (8007eb0 <HW_TS_Start+0xfc>)
 8007e08:	4613      	mov	r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	440b      	add	r3, r1
 8007e12:	330c      	adds	r3, #12
 8007e14:	2202      	movs	r2, #2
 8007e16:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8007e18:	79fa      	ldrb	r2, [r7, #7]
 8007e1a:	4925      	ldr	r1, [pc, #148]	@ (8007eb0 <HW_TS_Start+0xfc>)
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	005b      	lsls	r3, r3, #1
 8007e20:	4413      	add	r3, r2
 8007e22:	00db      	lsls	r3, r3, #3
 8007e24:	440b      	add	r3, r1
 8007e26:	3308      	adds	r3, #8
 8007e28:	683a      	ldr	r2, [r7, #0]
 8007e2a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8007e2c:	79fa      	ldrb	r2, [r7, #7]
 8007e2e:	4920      	ldr	r1, [pc, #128]	@ (8007eb0 <HW_TS_Start+0xfc>)
 8007e30:	4613      	mov	r3, r2
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	4413      	add	r3, r2
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	440b      	add	r3, r1
 8007e3a:	3304      	adds	r3, #4
 8007e3c:	683a      	ldr	r2, [r7, #0]
 8007e3e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7ff fb30 	bl	80074a8 <linkTimer>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8007e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8007eb8 <HW_TS_Start+0x104>)
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8007e52:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <HW_TS_Start+0x108>)
 8007e54:	781b      	ldrb	r3, [r3, #0]
 8007e56:	b2db      	uxtb	r3, r3
 8007e58:	7c7a      	ldrb	r2, [r7, #17]
 8007e5a:	429a      	cmp	r2, r3
 8007e5c:	d002      	beq.n	8007e64 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8007e5e:	f7ff fce9 	bl	8007834 <RescheduleTimerList>
 8007e62:	e013      	b.n	8007e8c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8007e64:	79fa      	ldrb	r2, [r7, #7]
 8007e66:	4912      	ldr	r1, [pc, #72]	@ (8007eb0 <HW_TS_Start+0xfc>)
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	440b      	add	r3, r1
 8007e72:	3308      	adds	r3, #8
 8007e74:	6819      	ldr	r1, [r3, #0]
 8007e76:	8a7b      	ldrh	r3, [r7, #18]
 8007e78:	79fa      	ldrb	r2, [r7, #7]
 8007e7a:	1ac9      	subs	r1, r1, r3
 8007e7c:	480c      	ldr	r0, [pc, #48]	@ (8007eb0 <HW_TS_Start+0xfc>)
 8007e7e:	4613      	mov	r3, r2
 8007e80:	005b      	lsls	r3, r3, #1
 8007e82:	4413      	add	r3, r2
 8007e84:	00db      	lsls	r3, r3, #3
 8007e86:	4403      	add	r3, r0
 8007e88:	3308      	adds	r3, #8
 8007e8a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007e8c:	4b09      	ldr	r3, [pc, #36]	@ (8007eb4 <HW_TS_Start+0x100>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	22ff      	movs	r2, #255	@ 0xff
 8007e92:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007e94:	2003      	movs	r0, #3
 8007e96:	f004 f922 	bl	800c0de <HAL_NVIC_EnableIRQ>
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	f383 8810 	msr	PRIMASK, r3
}
 8007ea4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8007ea6:	bf00      	nop
}
 8007ea8:	3718      	adds	r7, #24
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	2000024c 	.word	0x2000024c
 8007eb4:	20000330 	.word	0x20000330
 8007eb8:	200002dc 	.word	0x200002dc
 8007ebc:	200002dd 	.word	0x200002dd

08007ec0 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	607a      	str	r2, [r7, #4]
 8007ecc:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4798      	blx	r3

  return;
 8007ed2:	bf00      	nop
}
 8007ed4:	3710      	adds	r7, #16
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}
	...

08007edc <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	60b9      	str	r1, [r7, #8]
 8007ee4:	607b      	str	r3, [r7, #4]
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	73fb      	strb	r3, [r7, #15]
 8007eea:	4613      	mov	r3, r2
 8007eec:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10f      	bne.n	8007f14 <HW_UART_Receive_IT+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1RxCb = cb;
 8007ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8007f20 <HW_UART_Receive_IT+0x44>)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6013      	str	r3, [r2, #0]
            HW_UART_RX_IT(huart1, USART1);
 8007efa:	4a09      	ldr	r2, [pc, #36]	@ (8007f20 <HW_UART_Receive_IT+0x44>)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	4b08      	ldr	r3, [pc, #32]	@ (8007f24 <HW_UART_Receive_IT+0x48>)
 8007f02:	4a09      	ldr	r2, [pc, #36]	@ (8007f28 <HW_UART_Receive_IT+0x4c>)
 8007f04:	601a      	str	r2, [r3, #0]
 8007f06:	89bb      	ldrh	r3, [r7, #12]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68b9      	ldr	r1, [r7, #8]
 8007f0c:	4805      	ldr	r0, [pc, #20]	@ (8007f24 <HW_UART_Receive_IT+0x48>)
 8007f0e:	f007 ff9b 	bl	800fe48 <HAL_UART_Receive_IT>
            break;
 8007f12:	e000      	b.n	8007f16 <HW_UART_Receive_IT+0x3a>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8007f14:	bf00      	nop
    }

    return;
 8007f16:	bf00      	nop
}
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	200002ec 	.word	0x200002ec
 8007f24:	20000354 	.word	0x20000354
 8007f28:	40013800 	.word	0x40013800

08007f2c <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60b9      	str	r1, [r7, #8]
 8007f34:	607b      	str	r3, [r7, #4]
 8007f36:	4603      	mov	r3, r0
 8007f38:	73fb      	strb	r3, [r7, #15]
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8007f42:	2300      	movs	r3, #0
 8007f44:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d10e      	bne.n	8007f6a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8007f4c:	4a17      	ldr	r2, [pc, #92]	@ (8007fac <HW_UART_Transmit_DMA+0x80>)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8007f52:	4b17      	ldr	r3, [pc, #92]	@ (8007fb0 <HW_UART_Transmit_DMA+0x84>)
 8007f54:	4a17      	ldr	r2, [pc, #92]	@ (8007fb4 <HW_UART_Transmit_DMA+0x88>)
 8007f56:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8007f58:	89bb      	ldrh	r3, [r7, #12]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	68b9      	ldr	r1, [r7, #8]
 8007f5e:	4814      	ldr	r0, [pc, #80]	@ (8007fb0 <HW_UART_Transmit_DMA+0x84>)
 8007f60:	f007 ffbe 	bl	800fee0 <HAL_UART_Transmit_DMA>
 8007f64:	4603      	mov	r3, r0
 8007f66:	75fb      	strb	r3, [r7, #23]
            break;
 8007f68:	e000      	b.n	8007f6c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8007f6a:	bf00      	nop
    }

    switch (hal_status)
 8007f6c:	7dfb      	ldrb	r3, [r7, #23]
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d816      	bhi.n	8007fa0 <HW_UART_Transmit_DMA+0x74>
 8007f72:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <HW_UART_Transmit_DMA+0x4c>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f89 	.word	0x08007f89
 8007f7c:	08007f8f 	.word	0x08007f8f
 8007f80:	08007f95 	.word	0x08007f95
 8007f84:	08007f9b 	.word	0x08007f9b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	75bb      	strb	r3, [r7, #22]
            break;
 8007f8c:	e009      	b.n	8007fa2 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	75bb      	strb	r3, [r7, #22]
            break;
 8007f92:	e006      	b.n	8007fa2 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8007f94:	2302      	movs	r3, #2
 8007f96:	75bb      	strb	r3, [r7, #22]
            break;
 8007f98:	e003      	b.n	8007fa2 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	75bb      	strb	r3, [r7, #22]
            break;
 8007f9e:	e000      	b.n	8007fa2 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8007fa0:	bf00      	nop
    }

    return hw_status;
 8007fa2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3718      	adds	r7, #24
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	200002f0 	.word	0x200002f0
 8007fb0:	20000354 	.word	0x20000354
 8007fb4:	40013800 	.word	0x40013800

08007fb8 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	4b09      	ldr	r3, [pc, #36]	@ (8007fec <HAL_UART_RxCpltCallback+0x34>)
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d107      	bne.n	8007fdc <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8007fcc:	4b08      	ldr	r3, [pc, #32]	@ (8007ff0 <HAL_UART_RxCpltCallback+0x38>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8007fd4:	4b06      	ldr	r3, [pc, #24]	@ (8007ff0 <HAL_UART_RxCpltCallback+0x38>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4798      	blx	r3
            }
            break;
 8007fda:	e001      	b.n	8007fe0 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8007fdc:	bf00      	nop
 8007fde:	e000      	b.n	8007fe2 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8007fe0:	bf00      	nop
    }

    return;
 8007fe2:	bf00      	nop
}
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	40013800 	.word	0x40013800
 8007ff0:	200002ec 	.word	0x200002ec

08007ff4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	4b09      	ldr	r3, [pc, #36]	@ (8008028 <HAL_UART_TxCpltCallback+0x34>)
 8008004:	429a      	cmp	r2, r3
 8008006:	d107      	bne.n	8008018 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8008008:	4b08      	ldr	r3, [pc, #32]	@ (800802c <HAL_UART_TxCpltCallback+0x38>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8008010:	4b06      	ldr	r3, [pc, #24]	@ (800802c <HAL_UART_TxCpltCallback+0x38>)
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4798      	blx	r3
            }
            break;
 8008016:	e001      	b.n	800801c <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8008018:	bf00      	nop
 800801a:	e000      	b.n	800801e <HAL_UART_TxCpltCallback+0x2a>
            break;
 800801c:	bf00      	nop
    }

    return;
 800801e:	bf00      	nop
}
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	40013800 	.word	0x40013800
 800802c:	200002f0 	.word	0x200002f0

08008030 <LL_RCC_LSE_SetDriveCapability>:
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8008038:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800803c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008040:	f023 0218 	bic.w	r2, r3, #24
 8008044:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4313      	orrs	r3, r2
 800804c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8008050:	bf00      	nop
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <LL_AHB1_GRP1_EnableClock>:
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8008064:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008068:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800806a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4313      	orrs	r3, r2
 8008072:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008074:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008078:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	4013      	ands	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008080:	68fb      	ldr	r3, [r7, #12]
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
	...

08008090 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8008090:	b480      	push	{r7}
 8008092:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008094:	4b05      	ldr	r3, [pc, #20]	@ (80080ac <LL_LPM_EnableSleep+0x1c>)
 8008096:	691b      	ldr	r3, [r3, #16]
 8008098:	4a04      	ldr	r2, [pc, #16]	@ (80080ac <LL_LPM_EnableSleep+0x1c>)
 800809a:	f023 0304 	bic.w	r3, r3, #4
 800809e:	6113      	str	r3, [r2, #16]
}
 80080a0:	bf00      	nop
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr
 80080aa:	bf00      	nop
 80080ac:	e000ed00 	.word	0xe000ed00

080080b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80080b4:	f003 fe26 	bl	800bd04 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80080b8:	f7fe fdbe 	bl	8006c38 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80080bc:	f000 f810 	bl	80080e0 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80080c0:	f000 f87a 	bl	80081b8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 80080c4:	f000 f898 	bl	80081f8 <MX_IPCC_Init>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 80080c8:	f000 f92a 	bl	8008320 <MX_DMA_Init>
  MX_RF_Init();
 80080cc:	f000 f8a8 	bl	8008220 <MX_RF_Init>
  MX_RTC_Init();
 80080d0:	f000 f8ae 	bl	8008230 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 80080d4:	f7fe fdbe 	bl	8006c54 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while(1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 80080d8:	f7fe ffd8 	bl	800708c <MX_APPE_Process>
 80080dc:	e7fc      	b.n	80080d8 <main+0x28>
	...

080080e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b09a      	sub	sp, #104	@ 0x68
 80080e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080e6:	f107 0320 	add.w	r3, r7, #32
 80080ea:	2248      	movs	r2, #72	@ 0x48
 80080ec:	2100      	movs	r1, #0
 80080ee:	4618      	mov	r0, r3
 80080f0:	f00e ff38 	bl	8016f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080f4:	1d3b      	adds	r3, r7, #4
 80080f6:	2200      	movs	r2, #0
 80080f8:	601a      	str	r2, [r3, #0]
 80080fa:	605a      	str	r2, [r3, #4]
 80080fc:	609a      	str	r2, [r3, #8]
 80080fe:	60da      	str	r2, [r3, #12]
 8008100:	611a      	str	r2, [r3, #16]
 8008102:	615a      	str	r2, [r3, #20]
 8008104:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8008106:	f004 ff8b 	bl	800d020 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800810a:	2010      	movs	r0, #16
 800810c:	f7ff ff90 	bl	8008030 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008110:	4b28      	ldr	r3, [pc, #160]	@ (80081b4 <SystemClock_Config+0xd4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008118:	4a26      	ldr	r2, [pc, #152]	@ (80081b4 <SystemClock_Config+0xd4>)
 800811a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	4b24      	ldr	r3, [pc, #144]	@ (80081b4 <SystemClock_Config+0xd4>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008128:	603b      	str	r3, [r7, #0]
 800812a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE
 800812c:	2307      	movs	r3, #7
 800812e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008130:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008134:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8008136:	2301      	movs	r3, #1
 8008138:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800813a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800813e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008140:	2340      	movs	r3, #64	@ 0x40
 8008142:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008144:	2302      	movs	r3, #2
 8008146:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008148:	2303      	movs	r3, #3
 800814a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 800814c:	2370      	movs	r3, #112	@ 0x70
 800814e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLN = 32;
 8008150:	2320      	movs	r3, #32
 8008152:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008154:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008158:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800815a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800815e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008160:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008164:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008166:	f107 0320 	add.w	r3, r7, #32
 800816a:	4618      	mov	r0, r3
 800816c:	f005 fb6a 	bl	800d844 <HAL_RCC_OscConfig>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008176:	f000 f90a 	bl	800838e <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 800817a:	236f      	movs	r3, #111	@ 0x6f
 800817c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800817e:	2303      	movs	r3, #3
 8008180:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008182:	2300      	movs	r3, #0
 8008184:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008186:	2300      	movs	r3, #0
 8008188:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800818a:	2300      	movs	r3, #0
 800818c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800818e:	2380      	movs	r3, #128	@ 0x80
 8008190:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008196:	1d3b      	adds	r3, r7, #4
 8008198:	2103      	movs	r1, #3
 800819a:	4618      	mov	r0, r3
 800819c:	f005 fec6 	bl	800df2c <HAL_RCC_ClockConfig>
 80081a0:	4603      	mov	r3, r0
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d001      	beq.n	80081aa <SystemClock_Config+0xca>
  {
    Error_Handler();
 80081a6:	f000 f8f2 	bl	800838e <Error_Handler>
  }
}
 80081aa:	bf00      	nop
 80081ac:	3768      	adds	r7, #104	@ 0x68
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}
 80081b2:	bf00      	nop
 80081b4:	58000400 	.word	0x58000400

080081b8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b094      	sub	sp, #80	@ 0x50
 80081bc:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80081be:	463b      	mov	r3, r7
 80081c0:	2250      	movs	r2, #80	@ 0x50
 80081c2:	2100      	movs	r1, #0
 80081c4:	4618      	mov	r0, r3
 80081c6:	f00e fecd 	bl	8016f64 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 80081ca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80081ce:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80081d0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80081d4:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80081d6:	2300      	movs	r3, #0
 80081d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80081da:	2310      	movs	r3, #16
 80081dc:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081de:	463b      	mov	r3, r7
 80081e0:	4618      	mov	r0, r3
 80081e2:	f006 fae0 	bl	800e7a6 <HAL_RCCEx_PeriphCLKConfig>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d001      	beq.n	80081f0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80081ec:	f000 f8cf 	bl	800838e <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

  /* USER CODE END Smps */
}
 80081f0:	bf00      	nop
 80081f2:	3750      	adds	r7, #80	@ 0x50
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 80081fc:	4b06      	ldr	r3, [pc, #24]	@ (8008218 <MX_IPCC_Init+0x20>)
 80081fe:	4a07      	ldr	r2, [pc, #28]	@ (800821c <MX_IPCC_Init+0x24>)
 8008200:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8008202:	4805      	ldr	r0, [pc, #20]	@ (8008218 <MX_IPCC_Init+0x20>)
 8008204:	f004 fe86 	bl	800cf14 <HAL_IPCC_Init>
 8008208:	4603      	mov	r3, r0
 800820a:	2b00      	cmp	r3, #0
 800820c:	d001      	beq.n	8008212 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 800820e:	f000 f8be 	bl	800838e <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8008212:	bf00      	nop
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	200002f4 	.word	0x200002f4
 800821c:	58000c00 	.word	0x58000c00

08008220 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8008224:	bf00      	nop
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr
	...

08008230 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8008234:	4b11      	ldr	r3, [pc, #68]	@ (800827c <MX_RTC_Init+0x4c>)
 8008236:	4a12      	ldr	r2, [pc, #72]	@ (8008280 <MX_RTC_Init+0x50>)
 8008238:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800823a:	4b10      	ldr	r3, [pc, #64]	@ (800827c <MX_RTC_Init+0x4c>)
 800823c:	2200      	movs	r2, #0
 800823e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8008240:	4b0e      	ldr	r3, [pc, #56]	@ (800827c <MX_RTC_Init+0x4c>)
 8008242:	220f      	movs	r2, #15
 8008244:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8008246:	4b0d      	ldr	r3, [pc, #52]	@ (800827c <MX_RTC_Init+0x4c>)
 8008248:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800824c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800824e:	4b0b      	ldr	r3, [pc, #44]	@ (800827c <MX_RTC_Init+0x4c>)
 8008250:	2200      	movs	r2, #0
 8008252:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8008254:	4b09      	ldr	r3, [pc, #36]	@ (800827c <MX_RTC_Init+0x4c>)
 8008256:	2200      	movs	r2, #0
 8008258:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800825a:	4b08      	ldr	r3, [pc, #32]	@ (800827c <MX_RTC_Init+0x4c>)
 800825c:	2200      	movs	r2, #0
 800825e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <MX_RTC_Init+0x4c>)
 8008262:	2200      	movs	r2, #0
 8008264:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8008266:	4805      	ldr	r0, [pc, #20]	@ (800827c <MX_RTC_Init+0x4c>)
 8008268:	f006 fd24 	bl	800ecb4 <HAL_RTC_Init>
 800826c:	4603      	mov	r3, r0
 800826e:	2b00      	cmp	r3, #0
 8008270:	d001      	beq.n	8008276 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8008272:	f000 f88c 	bl	800838e <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008276:	bf00      	nop
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	20000330 	.word	0x20000330
 8008280:	40002800 	.word	0x40002800

08008284 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008288:	4b23      	ldr	r3, [pc, #140]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 800828a:	4a24      	ldr	r2, [pc, #144]	@ (800831c <MX_USART1_UART_Init+0x98>)
 800828c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800828e:	4b22      	ldr	r3, [pc, #136]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 8008290:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008294:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008296:	4b20      	ldr	r3, [pc, #128]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 8008298:	2200      	movs	r2, #0
 800829a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800829c:	4b1e      	ldr	r3, [pc, #120]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 800829e:	2200      	movs	r2, #0
 80082a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80082a2:	4b1d      	ldr	r3, [pc, #116]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80082a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082aa:	220c      	movs	r2, #12
 80082ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80082ae:	4b1a      	ldr	r3, [pc, #104]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082b0:	2200      	movs	r2, #0
 80082b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 80082b4:	4b18      	ldr	r3, [pc, #96]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082b6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80082ba:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80082bc:	4b16      	ldr	r3, [pc, #88]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082be:	2200      	movs	r2, #0
 80082c0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80082c2:	4b15      	ldr	r3, [pc, #84]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082c4:	2200      	movs	r2, #0
 80082c6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80082c8:	4b13      	ldr	r3, [pc, #76]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082ca:	2200      	movs	r2, #0
 80082cc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80082ce:	4812      	ldr	r0, [pc, #72]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082d0:	f007 fd6a 	bl	800fda8 <HAL_UART_Init>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80082da:	f000 f858 	bl	800838e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80082de:	2100      	movs	r1, #0
 80082e0:	480d      	ldr	r0, [pc, #52]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082e2:	f009 fdda 	bl	8011e9a <HAL_UARTEx_SetTxFifoThreshold>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80082ec:	f000 f84f 	bl	800838e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80082f0:	2100      	movs	r1, #0
 80082f2:	4809      	ldr	r0, [pc, #36]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 80082f4:	f009 fe0f 	bl	8011f16 <HAL_UARTEx_SetRxFifoThreshold>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d001      	beq.n	8008302 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 80082fe:	f000 f846 	bl	800838e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8008302:	4805      	ldr	r0, [pc, #20]	@ (8008318 <MX_USART1_UART_Init+0x94>)
 8008304:	f009 fd90 	bl	8011e28 <HAL_UARTEx_DisableFifoMode>
 8008308:	4603      	mov	r3, r0
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 800830e:	f000 f83e 	bl	800838e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20000354 	.word	0x20000354
 800831c:	40013800 	.word	0x40013800

08008320 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8008324:	2004      	movs	r0, #4
 8008326:	f7ff fe99 	bl	800805c <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 800832a:	2002      	movs	r0, #2
 800832c:	f7ff fe96 	bl	800805c <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8008330:	2200      	movs	r2, #0
 8008332:	210f      	movs	r1, #15
 8008334:	203a      	movs	r0, #58	@ 0x3a
 8008336:	f003 feb8 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 800833a:	203a      	movs	r0, #58	@ 0x3a
 800833c:	f003 fecf 	bl	800c0de <HAL_NVIC_EnableIRQ>

}
 8008340:	bf00      	nop
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800834c:	f003 fd48 	bl	800bde0 <HAL_GetTick>
 8008350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d00a      	beq.n	8008374 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800835e:	f003 fd57 	bl	800be10 <HAL_GetTickFreq>
 8008362:	4603      	mov	r3, r0
 8008364:	461a      	mov	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	4413      	add	r3, r2
 800836a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800836c:	e002      	b.n	8008374 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800836e:	f7ff fe8f 	bl	8008090 <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif

    __WFI( );
 8008372:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8008374:	f003 fd34 	bl	800bde0 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	429a      	cmp	r2, r3
 8008382:	d8f4      	bhi.n	800836e <HAL_Delay+0x2a>
  }
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}

0800838e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800838e:	b480      	push	{r7}
 8008390:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008392:	b672      	cpsid	i
}
 8008394:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008396:	bf00      	nop
 8008398:	e7fd      	b.n	8008396 <Error_Handler+0x8>

0800839a <LL_RCC_EnableRTC>:
{
 800839a:	b480      	push	{r7}
 800839c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800839e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80083aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80083ae:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80083b2:	bf00      	nop
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <LL_AHB2_GRP1_EnableClock>:
{
 80083bc:	b480      	push	{r7}
 80083be:	b085      	sub	sp, #20
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80083c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4313      	orrs	r3, r2
 80083d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80083d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4013      	ands	r3, r2
 80083de:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80083e0:	68fb      	ldr	r3, [r7, #12]
}
 80083e2:	bf00      	nop
 80083e4:	3714      	adds	r7, #20
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr

080083ee <LL_AHB3_GRP1_EnableClock>:
{
 80083ee:	b480      	push	{r7}
 80083f0:	b085      	sub	sp, #20
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80083f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80083fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083fc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4313      	orrs	r3, r2
 8008404:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008406:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800840a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4013      	ands	r3, r2
 8008410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008412:	68fb      	ldr	r3, [r7, #12]
}
 8008414:	bf00      	nop
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8008428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800842c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800842e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4313      	orrs	r3, r2
 8008436:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8008438:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800843c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4013      	ands	r3, r2
 8008442:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008444:	68fb      	ldr	r3, [r7, #12]
}
 8008446:	bf00      	nop
 8008448:	3714      	adds	r7, #20
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr

08008452 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8008452:	b480      	push	{r7}
 8008454:	b085      	sub	sp, #20
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800845a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800845e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008460:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	4313      	orrs	r3, r2
 8008468:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800846a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800846e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4013      	ands	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008476:	68fb      	ldr	r3, [r7, #12]
}
 8008478:	bf00      	nop
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8008488:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800848c:	f7ff ffaf 	bl	80083ee <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8008490:	2200      	movs	r2, #0
 8008492:	2100      	movs	r1, #0
 8008494:	2001      	movs	r0, #1
 8008496:	f003 fe08 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800849a:	2001      	movs	r0, #1
 800849c:	f003 fe1f 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 80084a0:	2200      	movs	r2, #0
 80084a2:	2100      	movs	r1, #0
 80084a4:	2004      	movs	r0, #4
 80084a6:	f003 fe00 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 80084aa:	2004      	movs	r0, #4
 80084ac:	f003 fe17 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80084b0:	2200      	movs	r2, #0
 80084b2:	2100      	movs	r1, #0
 80084b4:	2005      	movs	r0, #5
 80084b6:	f003 fdf8 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80084ba:	2005      	movs	r0, #5
 80084bc:	f003 fe0f 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 80084c0:	2200      	movs	r2, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	2015      	movs	r0, #21
 80084c6:	f003 fdf0 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 80084ca:	2015      	movs	r0, #21
 80084cc:	f003 fe07 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 80084d0:	2200      	movs	r2, #0
 80084d2:	2100      	movs	r1, #0
 80084d4:	202b      	movs	r0, #43	@ 0x2b
 80084d6:	f003 fde8 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 80084da:	202b      	movs	r0, #43	@ 0x2b
 80084dc:	f003 fdff 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 80084e0:	2200      	movs	r2, #0
 80084e2:	2100      	movs	r1, #0
 80084e4:	202e      	movs	r0, #46	@ 0x2e
 80084e6:	f003 fde0 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 80084ea:	202e      	movs	r0, #46	@ 0x2e
 80084ec:	f003 fdf7 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 80084f0:	2200      	movs	r2, #0
 80084f2:	2100      	movs	r1, #0
 80084f4:	2036      	movs	r0, #54	@ 0x36
 80084f6:	f003 fdd8 	bl	800c0aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 80084fa:	2036      	movs	r0, #54	@ 0x36
 80084fc:	f003 fdef 	bl	800c0de <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008500:	bf00      	nop
 8008502:	bd80      	pop	{r7, pc}

08008504 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	4a0d      	ldr	r2, [pc, #52]	@ (8008548 <HAL_IPCC_MspInit+0x44>)
 8008512:	4293      	cmp	r3, r2
 8008514:	d113      	bne.n	800853e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8008516:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800851a:	f7ff ff68 	bl	80083ee <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 800851e:	2200      	movs	r2, #0
 8008520:	2100      	movs	r1, #0
 8008522:	202c      	movs	r0, #44	@ 0x2c
 8008524:	f003 fdc1 	bl	800c0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8008528:	202c      	movs	r0, #44	@ 0x2c
 800852a:	f003 fdd8 	bl	800c0de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 800852e:	2200      	movs	r2, #0
 8008530:	2100      	movs	r1, #0
 8008532:	202d      	movs	r0, #45	@ 0x2d
 8008534:	f003 fdb9 	bl	800c0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8008538:	202d      	movs	r0, #45	@ 0x2d
 800853a:	f003 fdd0 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 800853e:	bf00      	nop
 8008540:	3708      	adds	r7, #8
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	58000c00 	.word	0x58000c00

0800854c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b096      	sub	sp, #88	@ 0x58
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	2250      	movs	r2, #80	@ 0x50
 800855a:	2100      	movs	r1, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f00e fd01 	bl	8016f64 <memset>
  if(hrtc->Instance==RTC)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a0e      	ldr	r2, [pc, #56]	@ (80085a0 <HAL_RTC_MspInit+0x54>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d115      	bne.n	8008598 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800856c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008570:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008572:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008576:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008578:	f107 0308 	add.w	r3, r7, #8
 800857c:	4618      	mov	r0, r3
 800857e:	f006 f912 	bl	800e7a6 <HAL_RCCEx_PeriphCLKConfig>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d001      	beq.n	800858c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8008588:	f7ff ff01 	bl	800838e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800858c:	f7ff ff05 	bl	800839a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008590:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008594:	f7ff ff44 	bl	8008420 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008598:	bf00      	nop
 800859a:	3758      	adds	r7, #88	@ 0x58
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}
 80085a0:	40002800 	.word	0x40002800

080085a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b09c      	sub	sp, #112	@ 0x70
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085ac:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80085b0:	2200      	movs	r2, #0
 80085b2:	601a      	str	r2, [r3, #0]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	609a      	str	r2, [r3, #8]
 80085b8:	60da      	str	r2, [r3, #12]
 80085ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085bc:	f107 030c 	add.w	r3, r7, #12
 80085c0:	2250      	movs	r2, #80	@ 0x50
 80085c2:	2100      	movs	r1, #0
 80085c4:	4618      	mov	r0, r3
 80085c6:	f00e fccd 	bl	8016f64 <memset>
  if(huart->Instance==USART1)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a37      	ldr	r2, [pc, #220]	@ (80086ac <HAL_UART_MspInit+0x108>)
 80085d0:	4293      	cmp	r3, r2
 80085d2:	d167      	bne.n	80086a4 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80085d4:	2301      	movs	r3, #1
 80085d6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80085d8:	2300      	movs	r3, #0
 80085da:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085dc:	f107 030c 	add.w	r3, r7, #12
 80085e0:	4618      	mov	r0, r3
 80085e2:	f006 f8e0 	bl	800e7a6 <HAL_RCCEx_PeriphCLKConfig>
 80085e6:	4603      	mov	r3, r0
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80085ec:	f7ff fecf 	bl	800838e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80085f4:	f7ff ff2d 	bl	8008452 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085f8:	2002      	movs	r0, #2
 80085fa:	f7ff fedf 	bl	80083bc <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA11     ------> USART1_CTS
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80085fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008602:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008604:	2302      	movs	r3, #2
 8008606:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008608:	2300      	movs	r3, #0
 800860a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800860c:	2300      	movs	r3, #0
 800860e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008610:	2307      	movs	r3, #7
 8008612:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008614:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008618:	4619      	mov	r1, r3
 800861a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800861e:	f004 f9ef 	bl	800ca00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8008622:	23c0      	movs	r3, #192	@ 0xc0
 8008624:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008626:	2302      	movs	r3, #2
 8008628:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800862a:	2301      	movs	r3, #1
 800862c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800862e:	2303      	movs	r3, #3
 8008630:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008632:	2307      	movs	r3, #7
 8008634:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008636:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800863a:	4619      	mov	r1, r3
 800863c:	481c      	ldr	r0, [pc, #112]	@ (80086b0 <HAL_UART_MspInit+0x10c>)
 800863e:	f004 f9df 	bl	800ca00 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8008642:	4b1c      	ldr	r3, [pc, #112]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 8008644:	4a1c      	ldr	r2, [pc, #112]	@ (80086b8 <HAL_UART_MspInit+0x114>)
 8008646:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8008648:	4b1a      	ldr	r3, [pc, #104]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 800864a:	220f      	movs	r2, #15
 800864c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800864e:	4b19      	ldr	r3, [pc, #100]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 8008650:	2210      	movs	r2, #16
 8008652:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008654:	4b17      	ldr	r3, [pc, #92]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 8008656:	2200      	movs	r2, #0
 8008658:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800865a:	4b16      	ldr	r3, [pc, #88]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 800865c:	2280      	movs	r2, #128	@ 0x80
 800865e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008660:	4b14      	ldr	r3, [pc, #80]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 8008662:	2200      	movs	r2, #0
 8008664:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008666:	4b13      	ldr	r3, [pc, #76]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 8008668:	2200      	movs	r2, #0
 800866a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800866c:	4b11      	ldr	r3, [pc, #68]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 800866e:	2200      	movs	r2, #0
 8008670:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008672:	4b10      	ldr	r3, [pc, #64]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 8008674:	2200      	movs	r2, #0
 8008676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8008678:	480e      	ldr	r0, [pc, #56]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 800867a:	f003 fd75 	bl	800c168 <HAL_DMA_Init>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d001      	beq.n	8008688 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8008684:	f7ff fe83 	bl	800838e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a0a      	ldr	r2, [pc, #40]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 800868c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800868e:	4a09      	ldr	r2, [pc, #36]	@ (80086b4 <HAL_UART_MspInit+0x110>)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008694:	2200      	movs	r2, #0
 8008696:	2100      	movs	r1, #0
 8008698:	2024      	movs	r0, #36	@ 0x24
 800869a:	f003 fd06 	bl	800c0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800869e:	2024      	movs	r0, #36	@ 0x24
 80086a0:	f003 fd1d 	bl	800c0de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80086a4:	bf00      	nop
 80086a6:	3770      	adds	r7, #112	@ 0x70
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	40013800 	.word	0x40013800
 80086b0:	48000400 	.word	0x48000400
 80086b4:	200003e8 	.word	0x200003e8
 80086b8:	40020444 	.word	0x40020444

080086bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80086bc:	b480      	push	{r7}
 80086be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80086c0:	bf00      	nop
 80086c2:	e7fd      	b.n	80086c0 <NMI_Handler+0x4>

080086c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80086c4:	b480      	push	{r7}
 80086c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80086c8:	bf00      	nop
 80086ca:	e7fd      	b.n	80086c8 <HardFault_Handler+0x4>

080086cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80086cc:	b480      	push	{r7}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80086d0:	bf00      	nop
 80086d2:	e7fd      	b.n	80086d0 <MemManage_Handler+0x4>

080086d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086d8:	bf00      	nop
 80086da:	e7fd      	b.n	80086d8 <BusFault_Handler+0x4>

080086dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086e0:	bf00      	nop
 80086e2:	e7fd      	b.n	80086e0 <UsageFault_Handler+0x4>

080086e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086e4:	b480      	push	{r7}
 80086e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086e8:	bf00      	nop
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086f2:	b480      	push	{r7}
 80086f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086f6:	bf00      	nop
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008700:	b480      	push	{r7}
 8008702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008704:	bf00      	nop
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr

0800870e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800870e:	b580      	push	{r7, lr}
 8008710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008712:	f003 fb51 	bl	800bdb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008716:	bf00      	nop
 8008718:	bd80      	pop	{r7, pc}

0800871a <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 800871e:	f004 fce5 	bl	800d0ec <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 8008722:	bf00      	nop
 8008724:	bd80      	pop	{r7, pc}

08008726 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8008726:	b580      	push	{r7, lr}
 8008728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800872a:	f004 f8ad 	bl	800c888 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 800872e:	bf00      	nop
 8008730:	bd80      	pop	{r7, pc}

08008732 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8008732:	b480      	push	{r7}
 8008734:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8008736:	bf00      	nop
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 8008740:	b480      	push	{r7}
 8008742:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 8008744:	bf00      	nop
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr
	...

08008750 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008754:	4802      	ldr	r0, [pc, #8]	@ (8008760 <USART1_IRQHandler+0x10>)
 8008756:	f007 fc43 	bl	800ffe0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800875a:	bf00      	nop
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	20000354 	.word	0x20000354

08008764 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8008768:	f004 fbb0 	bl	800cecc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 800876c:	bf00      	nop
 800876e:	bd80      	pop	{r7, pc}

08008770 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8008774:	4802      	ldr	r0, [pc, #8]	@ (8008780 <DMA2_Channel4_IRQHandler+0x10>)
 8008776:	f003 fed8 	bl	800c52a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800877a:	bf00      	nop
 800877c:	bd80      	pop	{r7, pc}
 800877e:	bf00      	nop
 8008780:	200003e8 	.word	0x200003e8

08008784 <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8008788:	bf00      	nop
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8008796:	f001 f83f 	bl	8009818 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 800879a:	bf00      	nop
 800879c:	bd80      	pop	{r7, pc}

0800879e <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	af00      	add	r7, sp, #0
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80087a2:	f001 f88f 	bl	80098c4 <HW_IPCC_Tx_Handler>
}
 80087a6:	bf00      	nop
 80087a8:	bd80      	pop	{r7, pc}

080087aa <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 80087aa:	b580      	push	{r7, lr}
 80087ac:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_USER1);
 80087ae:	2000      	movs	r0, #0
 80087b0:	f002 fb6c 	bl	800ae8c <BSP_PB_IRQHandler>
}
 80087b4:	bf00      	nop
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	af00      	add	r7, sp, #0
  BSP_PWM_LED_IRQHandler();
 80087bc:	f002 fad0 	bl	800ad60 <BSP_PWM_LED_IRQHandler>
}
 80087c0:	bf00      	nop
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 80087c4:	b480      	push	{r7}
 80087c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FPU_IRQn 0 */
  /* USER CODE END FPU_IRQn 0 */
}
 80087c8:	bf00      	nop
 80087ca:	46bd      	mov	sp, r7
 80087cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d0:	4770      	bx	lr

080087d2 <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 80087d6:	f7ff f8c7 	bl	8007968 <HW_TS_RTC_Wakeup_Handler>
}
 80087da:	bf00      	nop
 80087dc:	bd80      	pop	{r7, pc}
	...

080087e0 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 80087e0:	b5b0      	push	{r4, r5, r7, lr}
 80087e2:	b08a      	sub	sp, #40	@ 0x28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	460b      	mov	r3, r1
 80087ea:	807b      	strh	r3, [r7, #2]
 80087ec:	4613      	mov	r3, r2
 80087ee:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 80087f0:	787b      	ldrb	r3, [r7, #1]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d002      	beq.n	80087fc <logRegion+0x1c>
 80087f6:	2b02      	cmp	r3, #2
 80087f8:	d00a      	beq.n	8008810 <logRegion+0x30>
 80087fa:	e012      	b.n	8008822 <logRegion+0x42>
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 80087fc:	f107 0308 	add.w	r3, r7, #8
 8008800:	4a13      	ldr	r2, [pc, #76]	@ (8008850 <logRegion+0x70>)
 8008802:	461c      	mov	r4, r3
 8008804:	4615      	mov	r5, r2
 8008806:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008808:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800880a:	682b      	ldr	r3, [r5, #0]
 800880c:	7023      	strb	r3, [r4, #0]
      break;
 800880e:	e011      	b.n	8008834 <logRegion+0x54>
    case APPLI_LOG_REGION_ZIGBEE_API:
      strcpy(logRegionString, "[M4 ZIGBEE API]");
 8008810:	f107 0308 	add.w	r3, r7, #8
 8008814:	4a0f      	ldr	r2, [pc, #60]	@ (8008854 <logRegion+0x74>)
 8008816:	461c      	mov	r4, r3
 8008818:	4613      	mov	r3, r2
 800881a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800881c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8008820:	e008      	b.n	8008834 <logRegion+0x54>
    default:
      strcpy(logRegionString, "[M4]");
 8008822:	f107 0308 	add.w	r3, r7, #8
 8008826:	4a0c      	ldr	r2, [pc, #48]	@ (8008858 <logRegion+0x78>)
 8008828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800882c:	6018      	str	r0, [r3, #0]
 800882e:	3304      	adds	r3, #4
 8008830:	7019      	strb	r1, [r3, #0]
      break;
 8008832:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 8008834:	8879      	ldrh	r1, [r7, #2]
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	4a08      	ldr	r2, [pc, #32]	@ (800885c <logRegion+0x7c>)
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f00e fac1 	bl	8016dc4 <sniprintf>
 8008842:	4603      	mov	r3, r0
 8008844:	b29b      	uxth	r3, r3
}
 8008846:	4618      	mov	r0, r3
 8008848:	3728      	adds	r7, #40	@ 0x28
 800884a:	46bd      	mov	sp, r7
 800884c:	bdb0      	pop	{r4, r5, r7, pc}
 800884e:	bf00      	nop
 8008850:	08017ef0 	.word	0x08017ef0
 8008854:	08017f04 	.word	0x08017f04
 8008858:	08017f14 	.word	0x08017f14
 800885c:	08017f1c 	.word	0x08017f1c

08008860 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	4603      	mov	r3, r0
 8008868:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 800886a:	79fb      	ldrb	r3, [r7, #7]
 800886c:	2b03      	cmp	r3, #3
 800886e:	d00a      	beq.n	8008886 <levelToString+0x26>
 8008870:	2b03      	cmp	r3, #3
 8008872:	dc0a      	bgt.n	800888a <levelToString+0x2a>
 8008874:	2b01      	cmp	r3, #1
 8008876:	d002      	beq.n	800887e <levelToString+0x1e>
 8008878:	2b02      	cmp	r3, #2
 800887a:	d002      	beq.n	8008882 <levelToString+0x22>
 800887c:	e005      	b.n	800888a <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 800887e:	4b06      	ldr	r3, [pc, #24]	@ (8008898 <levelToString+0x38>)
 8008880:	e004      	b.n	800888c <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8008882:	4b06      	ldr	r3, [pc, #24]	@ (800889c <levelToString+0x3c>)
 8008884:	e002      	b.n	800888c <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8008886:	4b06      	ldr	r3, [pc, #24]	@ (80088a0 <levelToString+0x40>)
 8008888:	e000      	b.n	800888c <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 800888a:	4b06      	ldr	r3, [pc, #24]	@ (80088a4 <levelToString+0x44>)
  }
}
 800888c:	4618      	mov	r0, r3
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr
 8008898:	08017f20 	.word	0x08017f20
 800889c:	08017f28 	.word	0x08017f28
 80088a0:	08017f30 	.word	0x08017f30
 80088a4:	08017f38 	.word	0x08017f38

080088a8 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 80088a8:	b590      	push	{r4, r7, lr}
 80088aa:	b083      	sub	sp, #12
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	807b      	strh	r3, [r7, #2]
 80088b4:	4613      	mov	r3, r2
 80088b6:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 80088b8:	887c      	ldrh	r4, [r7, #2]
 80088ba:	787b      	ldrb	r3, [r7, #1]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff ffcf 	bl	8008860 <levelToString>
 80088c2:	4603      	mov	r3, r0
 80088c4:	4a05      	ldr	r2, [pc, #20]	@ (80088dc <logLevel+0x34>)
 80088c6:	4621      	mov	r1, r4
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f00e fa7b 	bl	8016dc4 <sniprintf>
 80088ce:	4603      	mov	r3, r0
 80088d0:	b29b      	uxth	r3, r3
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd90      	pop	{r4, r7, pc}
 80088da:	bf00      	nop
 80088dc:	08017f40 	.word	0x08017f40

080088e0 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 80088e0:	b40c      	push	{r2, r3}
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b0c4      	sub	sp, #272	@ 0x110
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	4602      	mov	r2, r0
 80088ea:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088ee:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80088f2:	701a      	strb	r2, [r3, #0]
 80088f4:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80088f8:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80088fc:	460a      	mov	r2, r1
 80088fe:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8008900:	2300      	movs	r3, #0
 8008902:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008906:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800890a:	f107 020c 	add.w	r2, r7, #12
 800890e:	18d0      	adds	r0, r2, r3
 8008910:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008914:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8008918:	b299      	uxth	r1, r3
 800891a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800891e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	461a      	mov	r2, r3
 8008926:	f7ff ffbf 	bl	80088a8 <logLevel>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008932:	4413      	add	r3, r2
 8008934:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008938:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800893c:	f107 020c 	add.w	r2, r7, #12
 8008940:	18d0      	adds	r0, r2, r3
 8008942:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008946:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800894a:	b299      	uxth	r1, r3
 800894c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008950:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7ff ff42 	bl	80087e0 <logRegion>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008964:	4413      	add	r3, r2
 8008966:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 800896a:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 800896e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008976:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008978:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800897c:	f107 020c 	add.w	r2, r7, #12
 8008980:	18d0      	adds	r0, r2, r3
 8008982:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008986:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 800898a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800898e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008998:	f00e fad6 	bl	8016f48 <vsniprintf>
 800899c:	4603      	mov	r3, r0
 800899e:	b29a      	uxth	r2, r3
 80089a0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80089a4:	4413      	add	r3, r2
 80089a6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 80089aa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80089ae:	1c5a      	adds	r2, r3, #1
 80089b0:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 80089b4:	461a      	mov	r2, r3
 80089b6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089be:	210d      	movs	r1, #13
 80089c0:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 80089c2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80089c6:	1c5a      	adds	r2, r3, #1
 80089c8:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 80089cc:	461a      	mov	r2, r3
 80089ce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089d6:	210a      	movs	r1, #10
 80089d8:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 80089da:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80089de:	1c5a      	adds	r2, r3, #1
 80089e0:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 80089e4:	461a      	mov	r2, r3
 80089e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ee:	2100      	movs	r1, #0
 80089f0:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 80089f2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80089f6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	2b03      	cmp	r3, #3
 80089fe:	d805      	bhi.n	8008a0c <logApplication+0x12c>
  {
    printf("%s", logString);
 8008a00:	f107 030c 	add.w	r3, r7, #12
 8008a04:	4619      	mov	r1, r3
 8008a06:	4805      	ldr	r0, [pc, #20]	@ (8008a1c <logApplication+0x13c>)
 8008a08:	f00e f9ca 	bl	8016da0 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8008a0c:	bf00      	nop
 8008a0e:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8008a12:	46bd      	mov	sp, r7
 8008a14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a18:	b002      	add	sp, #8
 8008a1a:	4770      	bx	lr
 8008a1c:	08017f40 	.word	0x08017f40

08008a20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008a20:	b480      	push	{r7}
 8008a22:	af00      	add	r7, sp, #0
  return 1;
 8008a24:	2301      	movs	r3, #1
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <_kill>:

int _kill(int pid, int sig)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008a3a:	f00e faff 	bl	801703c <__errno>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2216      	movs	r2, #22
 8008a42:	601a      	str	r2, [r3, #0]
  return -1;
 8008a44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3708      	adds	r7, #8
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <_exit>:

void _exit (int status)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008a58:	f04f 31ff 	mov.w	r1, #4294967295
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f7ff ffe7 	bl	8008a30 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008a62:	bf00      	nop
 8008a64:	e7fd      	b.n	8008a62 <_exit+0x12>

08008a66 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b086      	sub	sp, #24
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	60f8      	str	r0, [r7, #12]
 8008a6e:	60b9      	str	r1, [r7, #8]
 8008a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e00a      	b.n	8008a8e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008a78:	f3af 8000 	nop.w
 8008a7c:	4601      	mov	r1, r0
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	1c5a      	adds	r2, r3, #1
 8008a82:	60ba      	str	r2, [r7, #8]
 8008a84:	b2ca      	uxtb	r2, r1
 8008a86:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	617b      	str	r3, [r7, #20]
 8008a8e:	697a      	ldr	r2, [r7, #20]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	dbf0      	blt.n	8008a78 <_read+0x12>
  }

  return len;
 8008a96:	687b      	ldr	r3, [r7, #4]
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}

08008aa0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	b083      	sub	sp, #12
 8008aa4:	af00      	add	r7, sp, #0
 8008aa6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008aa8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b083      	sub	sp, #12
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
 8008ac0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008ac8:	605a      	str	r2, [r3, #4]
  return 0;
 8008aca:	2300      	movs	r3, #0
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <_isatty>:

int _isatty(int file)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008ae0:	2301      	movs	r3, #1
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008aee:	b480      	push	{r7}
 8008af0:	b085      	sub	sp, #20
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	60f8      	str	r0, [r7, #12]
 8008af6:	60b9      	str	r1, [r7, #8]
 8008af8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008b10:	4a14      	ldr	r2, [pc, #80]	@ (8008b64 <_sbrk+0x5c>)
 8008b12:	4b15      	ldr	r3, [pc, #84]	@ (8008b68 <_sbrk+0x60>)
 8008b14:	1ad3      	subs	r3, r2, r3
 8008b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008b1c:	4b13      	ldr	r3, [pc, #76]	@ (8008b6c <_sbrk+0x64>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d102      	bne.n	8008b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008b24:	4b11      	ldr	r3, [pc, #68]	@ (8008b6c <_sbrk+0x64>)
 8008b26:	4a12      	ldr	r2, [pc, #72]	@ (8008b70 <_sbrk+0x68>)
 8008b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008b2a:	4b10      	ldr	r3, [pc, #64]	@ (8008b6c <_sbrk+0x64>)
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4413      	add	r3, r2
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	429a      	cmp	r2, r3
 8008b36:	d207      	bcs.n	8008b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008b38:	f00e fa80 	bl	801703c <__errno>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	220c      	movs	r2, #12
 8008b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008b42:	f04f 33ff 	mov.w	r3, #4294967295
 8008b46:	e009      	b.n	8008b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008b48:	4b08      	ldr	r3, [pc, #32]	@ (8008b6c <_sbrk+0x64>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008b4e:	4b07      	ldr	r3, [pc, #28]	@ (8008b6c <_sbrk+0x64>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4413      	add	r3, r2
 8008b56:	4a05      	ldr	r2, [pc, #20]	@ (8008b6c <_sbrk+0x64>)
 8008b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3718      	adds	r7, #24
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	20030000 	.word	0x20030000
 8008b68:	00001000 	.word	0x00001000
 8008b6c:	20000448 	.word	0x20000448
 8008b70:	20001e70 	.word	0x20001e70

08008b74 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 8008b7a:	4a15      	ldr	r2, [pc, #84]	@ (8008bd0 <APP_ZIGBEE_Init+0x5c>)
 8008b7c:	2101      	movs	r1, #1
 8008b7e:	2000      	movs	r0, #0
 8008b80:	f7ff feae 	bl	80088e0 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 8008b84:	f000 fa26 	bl	8008fd4 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 8008b88:	4812      	ldr	r0, [pc, #72]	@ (8008bd4 <APP_ZIGBEE_Init+0x60>)
 8008b8a:	f000 fad7 	bl	800913c <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 8008b8e:	f000 fb91 	bl	80092b4 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */

  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 8008b92:	4a11      	ldr	r2, [pc, #68]	@ (8008bd8 <APP_ZIGBEE_Init+0x64>)
 8008b94:	2100      	movs	r1, #0
 8008b96:	2001      	movs	r0, #1
 8008b98:	f00d fe74 	bl	8016884 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 8008b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8008bdc <APP_ZIGBEE_Init+0x68>)
 8008b9e:	2100      	movs	r1, #0
 8008ba0:	2002      	movs	r0, #2
 8008ba2:	f00d fe6f 	bl	8016884 <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 8008ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8008be0 <APP_ZIGBEE_Init+0x6c>)
 8008ba8:	2100      	movs	r1, #0
 8008baa:	2004      	movs	r0, #4
 8008bac:	f00d fe6a 	bl	8016884 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  /* Task associated with push button SW1 */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BUTTON_SW1, UTIL_SEQ_RFU, APP_ZIGBEE_SW1_Process); /* on off command*/
 8008bb0:	4a0c      	ldr	r2, [pc, #48]	@ (8008be4 <APP_ZIGBEE_Init+0x70>)
 8008bb2:	2100      	movs	r1, #0
 8008bb4:	2010      	movs	r0, #16
 8008bb6:	f00d fe65 	bl	8016884 <UTIL_SEQ_RegTask>
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 8008bba:	f009 fa39 	bl	8012030 <SHCI_C2_ZIGBEE_Init>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 8008bc2:	f000 f811 	bl	8008be8 <APP_ZIGBEE_StackLayersInit>

} /* APP_ZIGBEE_Init */
 8008bc6:	bf00      	nop
 8008bc8:	3708      	adds	r7, #8
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	08017f44 	.word	0x08017f44
 8008bd4:	20030838 	.word	0x20030838
 8008bd8:	080092e5 	.word	0x080092e5
 8008bdc:	08009305 	.word	0x08009305
 8008be0:	08008d29 	.word	0x08008d29
 8008be4:	0800935d 	.word	0x0800935d

08008be8 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 8008bec:	4a23      	ldr	r2, [pc, #140]	@ (8008c7c <APP_ZIGBEE_StackLayersInit+0x94>)
 8008bee:	2101      	movs	r1, #1
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	f7ff fe75 	bl	80088e0 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	f04f 0000 	mov.w	r0, #0
 8008bfe:	f04f 0100 	mov.w	r1, #0
 8008c02:	f00a fc73 	bl	80134ec <ZbInit>
 8008c06:	4603      	mov	r3, r0
 8008c08:	4a1d      	ldr	r2, [pc, #116]	@ (8008c80 <APP_ZIGBEE_StackLayersInit+0x98>)
 8008c0a:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 8008c0c:	4b1c      	ldr	r3, [pc, #112]	@ (8008c80 <APP_ZIGBEE_StackLayersInit+0x98>)
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d105      	bne.n	8008c20 <APP_ZIGBEE_StackLayersInit+0x38>
 8008c14:	4b1b      	ldr	r3, [pc, #108]	@ (8008c84 <APP_ZIGBEE_StackLayersInit+0x9c>)
 8008c16:	4a1c      	ldr	r2, [pc, #112]	@ (8008c88 <APP_ZIGBEE_StackLayersInit+0xa0>)
 8008c18:	21b0      	movs	r1, #176	@ 0xb0
 8008c1a:	481c      	ldr	r0, [pc, #112]	@ (8008c8c <APP_ZIGBEE_StackLayersInit+0xa4>)
 8008c1c:	f00d ff10 	bl	8016a40 <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 8008c20:	f000 f83a 	bl	8008c98 <APP_ZIGBEE_ConfigEndpoints>

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 8008c24:	4b16      	ldr	r3, [pc, #88]	@ (8008c80 <APP_ZIGBEE_StackLayersInit+0x98>)
 8008c26:	2201      	movs	r2, #1
 8008c28:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 8008c2a:	f003 f8d9 	bl	800bde0 <HAL_GetTick>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	4a13      	ldr	r2, [pc, #76]	@ (8008c80 <APP_ZIGBEE_StackLayersInit+0x98>)
 8008c32:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeJoin;
 8008c34:	4b12      	ldr	r3, [pc, #72]	@ (8008c80 <APP_ZIGBEE_StackLayersInit+0x98>)
 8008c36:	2203      	movs	r2, #3
 8008c38:	721a      	strb	r2, [r3, #8]

  /* Text Feature */
  BSP_LCD_Clear(LCD_Inst, SSD1315_COLOR_BLACK);
 8008c3a:	4b15      	ldr	r3, [pc, #84]	@ (8008c90 <APP_ZIGBEE_StackLayersInit+0xa8>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	f002 fdf7 	bl	800b834 <BSP_LCD_Clear>
  BSP_LCD_Refresh(LCD_Inst);
 8008c46:	4b12      	ldr	r3, [pc, #72]	@ (8008c90 <APP_ZIGBEE_StackLayersInit+0xa8>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f002 fcca 	bl	800b5e4 <BSP_LCD_Refresh>
  UTIL_LCD_DisplayStringAt(0, LINE(0), (uint8_t *)"OnOff Client Router", CENTER_MODE);
 8008c50:	f00d fa08 	bl	8016064 <UTIL_LCD_GetFont>
 8008c54:	2301      	movs	r3, #1
 8008c56:	4a0f      	ldr	r2, [pc, #60]	@ (8008c94 <APP_ZIGBEE_StackLayersInit+0xac>)
 8008c58:	2100      	movs	r1, #0
 8008c5a:	2000      	movs	r0, #0
 8008c5c:	f00d fa92 	bl	8016184 <UTIL_LCD_DisplayStringAt>
  BSP_LCD_Refresh(LCD_Inst);
 8008c60:	4b0b      	ldr	r3, [pc, #44]	@ (8008c90 <APP_ZIGBEE_StackLayersInit+0xa8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4618      	mov	r0, r3
 8008c66:	f002 fcbd 	bl	800b5e4 <BSP_LCD_Refresh>

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 8008c6a:	4b05      	ldr	r3, [pc, #20]	@ (8008c80 <APP_ZIGBEE_StackLayersInit+0x98>)
 8008c6c:	2201      	movs	r2, #1
 8008c6e:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8008c70:	2100      	movs	r1, #0
 8008c72:	2004      	movs	r0, #4
 8008c74:	f00d fe28 	bl	80168c8 <UTIL_SEQ_SetTask>
} /* APP_ZIGBEE_StackLayersInit */
 8008c78:	bf00      	nop
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	08017f54 	.word	0x08017f54
 8008c80:	20000464 	.word	0x20000464
 8008c84:	08017f70 	.word	0x08017f70
 8008c88:	08018968 	.word	0x08018968
 8008c8c:	08017f8c 	.word	0x08017f8c
 8008c90:	2000013c 	.word	0x2000013c
 8008c94:	08017ff8 	.word	0x08017ff8

08008c98 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure and register Zigbee application endpoints, onoff callbacks
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b088      	sub	sp, #32
 8008c9c:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  /* Endpoint: SW1_ENDPOINT */
  memset(&req, 0, sizeof(req));
 8008c9e:	f107 0308 	add.w	r3, r7, #8
 8008ca2:	2218      	movs	r2, #24
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f00e f95c 	bl	8016f64 <memset>
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 8008cac:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008cb0:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_ONOFF_SWITCH;
 8008cb2:	2300      	movs	r3, #0
 8008cb4:	81bb      	strh	r3, [r7, #12]
  req.endpoint = SW1_ENDPOINT;
 8008cb6:	2311      	movs	r3, #17
 8008cb8:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8008cba:	4b16      	ldr	r3, [pc, #88]	@ (8008d14 <APP_ZIGBEE_ConfigEndpoints+0x7c>)
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	1d3a      	adds	r2, r7, #4
 8008cc0:	f107 0108 	add.w	r1, r7, #8
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f00b fa02 	bl	80140ce <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 8008cca:	793b      	ldrb	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <APP_ZIGBEE_ConfigEndpoints+0x44>
 8008cd0:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <APP_ZIGBEE_ConfigEndpoints+0x80>)
 8008cd2:	4a12      	ldr	r2, [pc, #72]	@ (8008d1c <APP_ZIGBEE_ConfigEndpoints+0x84>)
 8008cd4:	21d7      	movs	r1, #215	@ 0xd7
 8008cd6:	4812      	ldr	r0, [pc, #72]	@ (8008d20 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8008cd8:	f00d feb2 	bl	8016a40 <__assert_func>
 
  /* OnOff client */
  zigbee_app_info.onOff_client_1 = ZbZclOnOffClientAlloc(zigbee_app_info.zb, SW1_ENDPOINT);
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8008d14 <APP_ZIGBEE_ConfigEndpoints+0x7c>)
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	2111      	movs	r1, #17
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7f8 f946 	bl	8000f74 <ZbZclOnOffClientAlloc>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	4a0a      	ldr	r2, [pc, #40]	@ (8008d14 <APP_ZIGBEE_ConfigEndpoints+0x7c>)
 8008cec:	6153      	str	r3, [r2, #20]
  assert(zigbee_app_info.onOff_client_1 != NULL);
 8008cee:	4b09      	ldr	r3, [pc, #36]	@ (8008d14 <APP_ZIGBEE_ConfigEndpoints+0x7c>)
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d105      	bne.n	8008d02 <APP_ZIGBEE_ConfigEndpoints+0x6a>
 8008cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8008d24 <APP_ZIGBEE_ConfigEndpoints+0x8c>)
 8008cf8:	4a08      	ldr	r2, [pc, #32]	@ (8008d1c <APP_ZIGBEE_ConfigEndpoints+0x84>)
 8008cfa:	21db      	movs	r1, #219	@ 0xdb
 8008cfc:	4808      	ldr	r0, [pc, #32]	@ (8008d20 <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8008cfe:	f00d fe9f 	bl	8016a40 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.onOff_client_1);
 8008d02:	4b04      	ldr	r3, [pc, #16]	@ (8008d14 <APP_ZIGBEE_ConfigEndpoints+0x7c>)
 8008d04:	695b      	ldr	r3, [r3, #20]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f00b fb17 	bl	801433a <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* USER CODE END CONFIG_ENDPOINT */
} /* APP_ZIGBEE_ConfigEndpoints */
 8008d0c:	bf00      	nop
 8008d0e:	3720      	adds	r7, #32
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000464 	.word	0x20000464
 8008d18:	0801800c 	.word	0x0801800c
 8008d1c:	08018984 	.word	0x08018984
 8008d20:	08017f8c 	.word	0x08017f8c
 8008d24:	08018030 	.word	0x08018030

08008d28 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 8008d28:	b590      	push	{r4, r7, lr}
 8008d2a:	b0f9      	sub	sp, #484	@ 0x1e4
 8008d2c:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 8008d2e:	4b61      	ldr	r3, [pc, #388]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008d30:	7a5b      	ldrb	r3, [r3, #9]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 809f 	beq.w	8008e76 <APP_ZIGBEE_NwkForm+0x14e>
 8008d38:	f003 f852 	bl	800bde0 <HAL_GetTick>
 8008d3c:	4602      	mov	r2, r0
 8008d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008d40:	68db      	ldr	r3, [r3, #12]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	f0c0 8097 	bcc.w	8008e76 <APP_ZIGBEE_NwkForm+0x14e>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 8008d48:	4b5a      	ldr	r3, [pc, #360]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	211f      	movs	r1, #31
 8008d50:	4618      	mov	r0, r3
 8008d52:	f00a fc1f 	bl	8013594 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 8008d56:	463b      	mov	r3, r7
 8008d58:	4618      	mov	r0, r3
 8008d5a:	f00a fcb9 	bl	80136d0 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_ROUTER");
 8008d5e:	4a56      	ldr	r2, [pc, #344]	@ (8008eb8 <APP_ZIGBEE_NwkForm+0x190>)
 8008d60:	2101      	movs	r1, #1
 8008d62:	2000      	movs	r0, #0
 8008d64:	f7ff fdbc 	bl	80088e0 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 8008d68:	4b52      	ldr	r3, [pc, #328]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008d6a:	7a1a      	ldrb	r2, [r3, #8]
 8008d6c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008d70:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008d74:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 8008d78:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008d7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008d80:	4a4e      	ldr	r2, [pc, #312]	@ (8008ebc <APP_ZIGBEE_NwkForm+0x194>)
 8008d82:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 8008d86:	4613      	mov	r3, r2
 8008d88:	6818      	ldr	r0, [r3, #0]
 8008d8a:	6859      	ldr	r1, [r3, #4]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 8008d92:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008d96:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 8008d9e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008da2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008da6:	2200      	movs	r2, #0
 8008da8:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 8008daa:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8008dae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8008db2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008db6:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 8008db8:	4b3e      	ldr	r3, [pc, #248]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008dba:	685b      	ldr	r3, [r3, #4]
 8008dbc:	463a      	mov	r2, r7
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f000 f897 	bl	8008ef4 <ZbStartupWait>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 8008dcc:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8008dd0:	4a3b      	ldr	r2, [pc, #236]	@ (8008ec0 <APP_ZIGBEE_NwkForm+0x198>)
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	f7ff fd83 	bl	80088e0 <logApplication>
    zigbee_app_info.join_status = status;
 8008dda:	4a36      	ldr	r2, [pc, #216]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008ddc:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8008de0:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 8008de2:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d137      	bne.n	8008e5a <APP_ZIGBEE_NwkForm+0x132>
    {
      /* USER CODE BEGIN 0 */
      zigbee_app_info.join_delay = 0U;
 8008dea:	4b32      	ldr	r3, [pc, #200]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008dec:	2200      	movs	r2, #0
 8008dee:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 8008df0:	4b30      	ldr	r3, [pc, #192]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008df2:	2201      	movs	r2, #1
 8008df4:	741a      	strb	r2, [r3, #16]

      /* flash x3 Green LED to inform the joining connection*/
      LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 8008df6:	2200      	movs	r2, #0
 8008df8:	2181      	movs	r1, #129	@ 0x81
 8008dfa:	2000      	movs	r0, #0
 8008dfc:	f7fd ff7c 	bl	8006cf8 <LED_Set_rgb>
      HAL_Delay(500);
 8008e00:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e04:	f7ff fa9e 	bl	8008344 <HAL_Delay>
      LED_Off();
 8008e08:	f7fd ff6c 	bl	8006ce4 <LED_Off>
      HAL_Delay(500);
 8008e0c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e10:	f7ff fa98 	bl	8008344 <HAL_Delay>
      LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 8008e14:	2200      	movs	r2, #0
 8008e16:	2181      	movs	r1, #129	@ 0x81
 8008e18:	2000      	movs	r0, #0
 8008e1a:	f7fd ff6d 	bl	8006cf8 <LED_Set_rgb>
      HAL_Delay(500);
 8008e1e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e22:	f7ff fa8f 	bl	8008344 <HAL_Delay>
      LED_Off();
 8008e26:	f7fd ff5d 	bl	8006ce4 <LED_Off>
      HAL_Delay(500);
 8008e2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e2e:	f7ff fa89 	bl	8008344 <HAL_Delay>
      LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 8008e32:	2200      	movs	r2, #0
 8008e34:	2181      	movs	r1, #129	@ 0x81
 8008e36:	2000      	movs	r0, #0
 8008e38:	f7fd ff5e 	bl	8006cf8 <LED_Set_rgb>
      HAL_Delay(500);
 8008e3c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e40:	f7ff fa80 	bl	8008344 <HAL_Delay>
      LED_Off();
 8008e44:	f7fd ff4e 	bl	8006ce4 <LED_Off>
      HAL_Delay(500);
 8008e48:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008e4c:	f7ff fa7a 	bl	8008344 <HAL_Delay>
      LED_Off();
 8008e50:	f7fd ff48 	bl	8006ce4 <LED_Off>
      
      LCD_Display_Channel();
 8008e54:	f000 fb48 	bl	80094e8 <LCD_Display_Channel>
 8008e58:	e00d      	b.n	8008e76 <APP_ZIGBEE_NwkForm+0x14e>
    }
    else
    {
      /* USER CODE END 0 */
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 8008e5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8008e5e:	4a19      	ldr	r2, [pc, #100]	@ (8008ec4 <APP_ZIGBEE_NwkForm+0x19c>)
 8008e60:	2101      	movs	r1, #1
 8008e62:	2000      	movs	r0, #0
 8008e64:	f7ff fd3c 	bl	80088e0 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 8008e68:	f002 ffba 	bl	800bde0 <HAL_GetTick>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8008e72:	4a10      	ldr	r2, [pc, #64]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008e74:	60d3      	str	r3, [r2, #12]
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 8008e76:	4b0f      	ldr	r3, [pc, #60]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008e78:	7a5b      	ldrb	r3, [r3, #9]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d004      	beq.n	8008e88 <APP_ZIGBEE_NwkForm+0x160>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8008e7e:	2100      	movs	r1, #0
 8008e80:	2004      	movs	r0, #4
 8008e82:	f00d fd21 	bl	80168c8 <UTIL_SEQ_SetTask>

    /* Since we're using group addressing (broadcast), shorten the broadcast timeout */
    uint32_t bcast_timeout = 3;
    ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
  }
} /* APP_ZIGBEE_NwkForm */
 8008e86:	e00f      	b.n	8008ea8 <APP_ZIGBEE_NwkForm+0x180>
    zigbee_app_info.init_after_join = false;
 8008e88:	4b0a      	ldr	r3, [pc, #40]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	741a      	strb	r2, [r3, #16]
    APP_ZIGBEE_ConfigGroupAddr();
 8008e8e:	f000 fa49 	bl	8009324 <APP_ZIGBEE_ConfigGroupAddr>
    uint32_t bcast_timeout = 3;
 8008e92:	2303      	movs	r3, #3
 8008e94:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
 8008e98:	4b06      	ldr	r3, [pc, #24]	@ (8008eb4 <APP_ZIGBEE_NwkForm+0x18c>)
 8008e9a:	6858      	ldr	r0, [r3, #4]
 8008e9c:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8008ea0:	2304      	movs	r3, #4
 8008ea2:	2188      	movs	r1, #136	@ 0x88
 8008ea4:	f00b f8b1 	bl	801400a <ZbNwkSet>
} /* APP_ZIGBEE_NwkForm */
 8008ea8:	bf00      	nop
 8008eaa:	f507 77f2 	add.w	r7, r7, #484	@ 0x1e4
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd90      	pop	{r4, r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	20000464 	.word	0x20000464
 8008eb8:	08018058 	.word	0x08018058
 8008ebc:	08018ac4 	.word	0x08018ac4
 8008ec0:	08018088 	.word	0x08018088
 8008ec4:	080180b0 	.word	0x080180b0

08008ec8 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	4603      	mov	r3, r0
 8008ed0:	6039      	str	r1, [r7, #0]
 8008ed2:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	60fb      	str	r3, [r7, #12]

  info->status = status;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	79fa      	ldrb	r2, [r7, #7]
 8008edc:	705a      	strb	r2, [r3, #1]
  info->active = false;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8008ee4:	2008      	movs	r0, #8
 8008ee6:	f00d fd1b 	bl	8016920 <UTIL_SEQ_SetEvt>
} /* ZbStartupWaitCb */
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
	...

08008ef4 <ZbStartupWait>:
 * @param  zb :Zigbee device object pointer, config: startup config pointer
 * @param  ErrCode
 * @retval zigbee status stack code
 */
enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
 8008efc:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 8008efe:	2002      	movs	r0, #2
 8008f00:	f00d fdbc 	bl	8016a7c <malloc>
 8008f04:	4603      	mov	r3, r0
 8008f06:	60fb      	str	r3, [r7, #12]
  if (info == NULL) {
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <ZbStartupWait+0x1e>
    return ZB_STATUS_ALLOC_FAIL;
 8008f0e:	2370      	movs	r3, #112	@ 0x70
 8008f10:	e021      	b.n	8008f56 <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 8008f12:	2202      	movs	r2, #2
 8008f14:	2100      	movs	r1, #0
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f00e f824 	bl	8016f64 <memset>

  info->active = true;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4a0e      	ldr	r2, [pc, #56]	@ (8008f60 <ZbStartupWait+0x6c>)
 8008f26:	6839      	ldr	r1, [r7, #0]
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f00a fbfb 	bl	8013724 <ZbStartup>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 8008f32:	7afb      	ldrb	r3, [r7, #11]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d004      	beq.n	8008f42 <ZbStartupWait+0x4e>
  {
    free(info);
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f00d fda7 	bl	8016a8c <free>
    return status;
 8008f3e:	7afb      	ldrb	r3, [r7, #11]
 8008f40:	e009      	b.n	8008f56 <ZbStartupWait+0x62>
  }
  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 8008f42:	2008      	movs	r0, #8
 8008f44:	f00d fd0c 	bl	8016960 <UTIL_SEQ_WaitEvt>
  status = info->status;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	785b      	ldrb	r3, [r3, #1]
 8008f4c:	72fb      	strb	r3, [r7, #11]
  free(info);
 8008f4e:	68f8      	ldr	r0, [r7, #12]
 8008f50:	f00d fd9c 	bl	8016a8c <free>
  return status;
 8008f54:	7afb      	ldrb	r3, [r7, #11]
} /* ZbStartupWait */
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	08008ec9 	.word	0x08008ec9

08008f64 <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	6039      	str	r1, [r7, #0]
  switch (ErrId) {
  default:
    APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 8008f6e:	2100      	movs	r1, #0
 8008f70:	4803      	ldr	r0, [pc, #12]	@ (8008f80 <APP_ZIGBEE_Error+0x1c>)
 8008f72:	f000 f807 	bl	8008f84 <APP_ZIGBEE_TraceError>
    break;
 8008f76:	bf00      	nop
  }
} /* APP_ZIGBEE_Error */
 8008f78:	bf00      	nop
 8008f7a:	3708      	adds	r7, #8
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	080180f0 	.word	0x080180f0

08008f84 <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af02      	add	r7, sp, #8
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a0c      	ldr	r2, [pc, #48]	@ (8008fc8 <APP_ZIGBEE_TraceError+0x44>)
 8008f96:	2101      	movs	r1, #1
 8008f98:	2000      	movs	r0, #0
 8008f9a:	f7ff fca1 	bl	80088e0 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  while (1U == 1U)
  {
    UTIL_LCD_ClearStringLine(4);
 8008f9e:	2004      	movs	r0, #4
 8008fa0:	f00d f88c 	bl	80160bc <UTIL_LCD_ClearStringLine>
    UTIL_LCD_DisplayStringAt(0, LINE(4), (uint8_t *)"FATAL_ERROR", CENTER_MODE);
 8008fa4:	f00d f85e 	bl	8016064 <UTIL_LCD_GetFont>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	88db      	ldrh	r3, [r3, #6]
 8008fac:	009b      	lsls	r3, r3, #2
 8008fae:	4619      	mov	r1, r3
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4a06      	ldr	r2, [pc, #24]	@ (8008fcc <APP_ZIGBEE_TraceError+0x48>)
 8008fb4:	2000      	movs	r0, #0
 8008fb6:	f00d f8e5 	bl	8016184 <UTIL_LCD_DisplayStringAt>
    BSP_LCD_Refresh(LCD_Inst);
 8008fba:	4b05      	ldr	r3, [pc, #20]	@ (8008fd0 <APP_ZIGBEE_TraceError+0x4c>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f002 fb10 	bl	800b5e4 <BSP_LCD_Refresh>
    UTIL_LCD_ClearStringLine(4);
 8008fc4:	bf00      	nop
 8008fc6:	e7ea      	b.n	8008f9e <APP_ZIGBEE_TraceError+0x1a>
 8008fc8:	08018100 	.word	0x08018100
 8008fcc:	08018124 	.word	0x08018124
 8008fd0:	2000013c 	.word	0x2000013c

08008fd4 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b098      	sub	sp, #96	@ 0x60
 8008fd8:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 8008fda:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008fde:	657b      	str	r3, [r7, #84]	@ 0x54

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success) {
 8008fe0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008fe2:	f009 f839 	bl	8012058 <SHCI_GetWirelessFwInfo>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d004      	beq.n	8008ff6 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8008fec:	2101      	movs	r1, #1
 8008fee:	2001      	movs	r0, #1
 8008ff0:	f7ff ffb8 	bl	8008f64 <APP_ZIGBEE_Error>
    //print clusters allocated
    APP_DBG("Clusters allocated are:");  
    APP_DBG("OnOff Client on Endpoint %d",SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 8008ff4:	e081      	b.n	80090fa <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x126>
    APP_DBG("**********************************************************");
 8008ff6:	4a43      	ldr	r2, [pc, #268]	@ (8009104 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x130>)
 8008ff8:	2101      	movs	r1, #1
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	f7ff fc70 	bl	80088e0 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 8009000:	4a41      	ldr	r2, [pc, #260]	@ (8009108 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 8009002:	2101      	movs	r1, #1
 8009004:	2000      	movs	r0, #0
 8009006:	f7ff fc6b 	bl	80088e0 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800900a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4619      	mov	r1, r3
 8009010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009012:	785b      	ldrb	r3, [r3, #1]
 8009014:	461a      	mov	r2, r3
 8009016:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009018:	789b      	ldrb	r3, [r3, #2]
 800901a:	9301      	str	r3, [sp, #4]
 800901c:	9200      	str	r2, [sp, #0]
 800901e:	460b      	mov	r3, r1
 8009020:	4a3a      	ldr	r2, [pc, #232]	@ (800910c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x138>)
 8009022:	2101      	movs	r1, #1
 8009024:	2000      	movs	r0, #0
 8009026:	f7ff fc5b 	bl	80088e0 <logApplication>
    switch (p_wireless_info->StackType) {
 800902a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800902c:	7a5b      	ldrb	r3, [r3, #9]
 800902e:	2b30      	cmp	r3, #48	@ 0x30
 8009030:	d002      	beq.n	8009038 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 8009032:	2b31      	cmp	r3, #49	@ 0x31
 8009034:	d006      	beq.n	8009044 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 8009036:	e00b      	b.n	8009050 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
      APP_DBG("FW Type : FFD Zigbee stack");
 8009038:	4a35      	ldr	r2, [pc, #212]	@ (8009110 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 800903a:	2101      	movs	r1, #1
 800903c:	2000      	movs	r0, #0
 800903e:	f7ff fc4f 	bl	80088e0 <logApplication>
      break;
 8009042:	e00a      	b.n	800905a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_DBG("FW Type : RFD Zigbee stack");
 8009044:	4a33      	ldr	r2, [pc, #204]	@ (8009114 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 8009046:	2101      	movs	r1, #1
 8009048:	2000      	movs	r0, #0
 800904a:	f7ff fc49 	bl	80088e0 <logApplication>
      break;
 800904e:	e004      	b.n	800905a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8009050:	2101      	movs	r1, #1
 8009052:	2001      	movs	r0, #1
 8009054:	f7ff ff86 	bl	8008f64 <APP_ZIGBEE_Error>
      break;
 8009058:	bf00      	nop
    char* __PathProject__ =(strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 800905a:	4b2f      	ldr	r3, [pc, #188]	@ (8009118 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 800905c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        {del = strchr(__PathProject__, '/');}
 800905e:	212f      	movs	r1, #47	@ 0x2f
 8009060:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009062:	f00d ff87 	bl	8016f74 <strchr>
 8009066:	64b8      	str	r0, [r7, #72]	@ 0x48
        int index = (int) (del - __PathProject__);
 8009068:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800906a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	647b      	str	r3, [r7, #68]	@ 0x44
        APP_DBG("Application flashed: %*.*s",index,index,__PathProject__);
 8009070:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009072:	9301      	str	r3, [sp, #4]
 8009074:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800907a:	4a28      	ldr	r2, [pc, #160]	@ (800911c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 800907c:	2101      	movs	r1, #1
 800907e:	2000      	movs	r0, #0
 8009080:	f7ff fc2e 	bl	80088e0 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 8009084:	230f      	movs	r3, #15
 8009086:	4a26      	ldr	r2, [pc, #152]	@ (8009120 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 8009088:	2101      	movs	r1, #1
 800908a:	2000      	movs	r0, #0
 800908c:	f7ff fc28 	bl	80088e0 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 8009090:	4b24      	ldr	r3, [pc, #144]	@ (8009124 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 8009092:	4a25      	ldr	r2, [pc, #148]	@ (8009128 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 8009094:	2101      	movs	r1, #1
 8009096:	2000      	movs	r0, #0
 8009098:	f7ff fc22 	bl	80088e0 <logApplication>
    Z09_LL_string[0]=0;
 800909c:	2300      	movs	r3, #0
 800909e:	703b      	strb	r3, [r7, #0]
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 80090a0:	2300      	movs	r3, #0
 80090a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80090a4:	e010      	b.n	80090c8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf4>
        sprintf(&Z09_LL_string[str_index*3],"%02x ",sec_key_ha[str_index]);
 80090a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80090a8:	4613      	mov	r3, r2
 80090aa:	005b      	lsls	r3, r3, #1
 80090ac:	4413      	add	r3, r2
 80090ae:	463a      	mov	r2, r7
 80090b0:	18d0      	adds	r0, r2, r3
 80090b2:	4a1c      	ldr	r2, [pc, #112]	@ (8009124 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 80090b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090b6:	4413      	add	r3, r2
 80090b8:	781b      	ldrb	r3, [r3, #0]
 80090ba:	461a      	mov	r2, r3
 80090bc:	491b      	ldr	r1, [pc, #108]	@ (800912c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 80090be:	f00d feb5 	bl	8016e2c <siprintf>
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 80090c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090c4:	3301      	adds	r3, #1
 80090c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80090c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090ca:	2b0f      	cmp	r3, #15
 80090cc:	d9eb      	bls.n	80090a6 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd2>
    APP_DBG("Link Key value: %s",Z09_LL_string);
 80090ce:	463b      	mov	r3, r7
 80090d0:	4a17      	ldr	r2, [pc, #92]	@ (8009130 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 80090d2:	2101      	movs	r1, #1
 80090d4:	2000      	movs	r0, #0
 80090d6:	f7ff fc03 	bl	80088e0 <logApplication>
    APP_DBG("Clusters allocated are:");  
 80090da:	4a16      	ldr	r2, [pc, #88]	@ (8009134 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 80090dc:	2101      	movs	r1, #1
 80090de:	2000      	movs	r0, #0
 80090e0:	f7ff fbfe 	bl	80088e0 <logApplication>
    APP_DBG("OnOff Client on Endpoint %d",SW1_ENDPOINT);
 80090e4:	2311      	movs	r3, #17
 80090e6:	4a14      	ldr	r2, [pc, #80]	@ (8009138 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 80090e8:	2101      	movs	r1, #1
 80090ea:	2000      	movs	r0, #0
 80090ec:	f7ff fbf8 	bl	80088e0 <logApplication>
    APP_DBG("**********************************************************");
 80090f0:	4a04      	ldr	r2, [pc, #16]	@ (8009104 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x130>)
 80090f2:	2101      	movs	r1, #1
 80090f4:	2000      	movs	r0, #0
 80090f6:	f7ff fbf3 	bl	80088e0 <logApplication>
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 80090fa:	bf00      	nop
 80090fc:	3758      	adds	r7, #88	@ 0x58
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	08018130 	.word	0x08018130
 8009108:	0801816c 	.word	0x0801816c
 800910c:	08018188 	.word	0x08018188
 8009110:	080181a0 	.word	0x080181a0
 8009114:	080181bc 	.word	0x080181bc
 8009118:	08017fac 	.word	0x08017fac
 800911c:	080181d8 	.word	0x080181d8
 8009120:	080181f4 	.word	0x080181f4
 8009124:	08018ac4 	.word	0x08018ac4
 8009128:	08018208 	.word	0x08018208
 800912c:	08018218 	.word	0x08018218
 8009130:	08018220 	.word	0x08018220
 8009134:	08018234 	.word	0x08018234
 8009138:	0801824c 	.word	0x0801824c

0800913c <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800913c:	b480      	push	{r7}
 800913e:	b083      	sub	sp, #12
 8009140:	af00      	add	r7, sp, #0
 8009142:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 8009144:	4a04      	ldr	r2, [pc, #16]	@ (8009158 <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6013      	str	r3, [r2, #0]
} /* APP_ZIGBEE_RegisterCmdBuffer */
 800914a:	bf00      	nop
 800914c:	370c      	adds	r7, #12
 800914e:	46bd      	mov	sp, r7
 8009150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009154:	4770      	bx	lr
 8009156:	bf00      	nop
 8009158:	2000044c 	.word	0x2000044c

0800915c <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8009160:	4b03      	ldr	r3, [pc, #12]	@ (8009170 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	330c      	adds	r3, #12
} /* ZIGBEE_Get_OTCmdPayloadBuffer */
 8009166:	4618      	mov	r0, r3
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr
 8009170:	2000044c 	.word	0x2000044c

08009174 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 8009174:	b480      	push	{r7}
 8009176:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 8009178:	4b03      	ldr	r3, [pc, #12]	@ (8009188 <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	330b      	adds	r3, #11
} /* ZIGBEE_Get_OTCmdRspPayloadBuffer */
 800917e:	4618      	mov	r0, r3
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr
 8009188:	2000044c 	.word	0x2000044c

0800918c <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 8009190:	4b03      	ldr	r3, [pc, #12]	@ (80091a0 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	330b      	adds	r3, #11
} /* ZIGBEE_Get_NotificationPayloadBuffer */
 8009196:	4618      	mov	r0, r3
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20000450 	.word	0x20000450

080091a4 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 80091a4:	b480      	push	{r7}
 80091a6:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 80091a8:	4b03      	ldr	r3, [pc, #12]	@ (80091b8 <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	330b      	adds	r3, #11
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr
 80091b8:	20000454 	.word	0x20000454

080091bc <ZIGBEE_CmdTransfer>:
 * @brief  This function is used to transfer the commands from the M4 to the M0.
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 80091c2:	4b0f      	ldr	r3, [pc, #60]	@ (8009200 <ZIGBEE_CmdTransfer+0x44>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	330c      	adds	r3, #12
 80091c8:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80091ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009200 <ZIGBEE_CmdTransfer+0x44>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80091d4:	725a      	strb	r2, [r3, #9]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f042 0202 	orr.w	r2, r2, #2
 80091dc:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	685b      	ldr	r3, [r3, #4]
 80091e2:	3302      	adds	r3, #2
 80091e4:	b2da      	uxtb	r2, r3
 80091e6:	4b06      	ldr	r3, [pc, #24]	@ (8009200 <ZIGBEE_CmdTransfer+0x44>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	0092      	lsls	r2, r2, #2
 80091ec:	b2d2      	uxtb	r2, r2
 80091ee:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 80091f0:	f009 fa2c 	bl	801264c <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80091f4:	f000 f827 	bl	8009246 <Wait_Getting_Ack_From_M0>
} /* ZIGBEE_CmdTransfer */
 80091f8:	bf00      	nop
 80091fa:	3708      	adds	r7, #8
 80091fc:	46bd      	mov	sp, r7
 80091fe:	bd80      	pop	{r7, pc}
 8009200:	2000044c 	.word	0x2000044c

08009204 <TL_ZIGBEE_CmdEvtReceived>:
 * @brief  This function is called when the M0+ acknowledge  the fact that it has received a Cmd
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800920c:	f000 f822 	bl	8009254 <Receive_Ack_From_M0>
} /* TL_ZIGBEE_CmdEvtReceived */
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <TL_ZIGBEE_NotReceived>:
 * @brief  This function is called when notification from M0+ is received.
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8009220:	4a04      	ldr	r2, [pc, #16]	@ (8009234 <TL_ZIGBEE_NotReceived+0x1c>)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8009226:	f000 f81d 	bl	8009264 <Receive_Notification_From_M0>
} /* TL_ZIGBEE_NotReceived */
 800922a:	bf00      	nop
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	20000450 	.word	0x20000450

08009238 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800923c:	2004      	movs	r0, #4
 800923e:	f00d fb8f 	bl	8016960 <UTIL_SEQ_WaitEvt>
} /* Pre_ZigbeeCmdProcessing */
 8009242:	bf00      	nop
 8009244:	bd80      	pop	{r7, pc}

08009246 <Wait_Getting_Ack_From_M0>:
 * @brief  This function waits for getting an acknowledgment from the M0.
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800924a:	2002      	movs	r0, #2
 800924c:	f00d fb88 	bl	8016960 <UTIL_SEQ_WaitEvt>
} /* Wait_Getting_Ack_From_M0 */
 8009250:	bf00      	nop
 8009252:	bd80      	pop	{r7, pc}

08009254 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8009258:	2002      	movs	r0, #2
 800925a:	f00d fb61 	bl	8016920 <UTIL_SEQ_SetEvt>
} /* Receive_Ack_From_M0 */
 800925e:	bf00      	nop
 8009260:	bd80      	pop	{r7, pc}
	...

08009264 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	af00      	add	r7, sp, #0
    CptReceiveNotifyFromM0++;
 8009268:	4b05      	ldr	r3, [pc, #20]	@ (8009280 <Receive_Notification_From_M0+0x1c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	3301      	adds	r3, #1
 800926e:	4a04      	ldr	r2, [pc, #16]	@ (8009280 <Receive_Notification_From_M0+0x1c>)
 8009270:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8009272:	2100      	movs	r1, #0
 8009274:	2001      	movs	r0, #1
 8009276:	f00d fb27 	bl	80168c8 <UTIL_SEQ_SetTask>
}
 800927a:	bf00      	nop
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20000458 	.word	0x20000458

08009284 <TL_ZIGBEE_M0RequestReceived>:
 * @brief  This function is called when a request from M0+ is received.
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
    p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 800928c:	4a07      	ldr	r2, [pc, #28]	@ (80092ac <TL_ZIGBEE_M0RequestReceived+0x28>)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6013      	str	r3, [r2, #0]

    CptReceiveRequestFromM0++;
 8009292:	4b07      	ldr	r3, [pc, #28]	@ (80092b0 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	3301      	adds	r3, #1
 8009298:	4a05      	ldr	r2, [pc, #20]	@ (80092b0 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800929a:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800929c:	2100      	movs	r1, #0
 800929e:	2002      	movs	r0, #2
 80092a0:	f00d fb12 	bl	80168c8 <UTIL_SEQ_SetTask>
}
 80092a4:	bf00      	nop
 80092a6:	3708      	adds	r7, #8
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}
 80092ac:	20000454 	.word	0x20000454
 80092b0:	2000045c 	.word	0x2000045c

080092b4 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	af00      	add	r7, sp, #0
    ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 80092b8:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <APP_ZIGBEE_TL_INIT+0x20>)
 80092ba:	4a07      	ldr	r2, [pc, #28]	@ (80092d8 <APP_ZIGBEE_TL_INIT+0x24>)
 80092bc:	601a      	str	r2, [r3, #0]
    ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 80092be:	4b05      	ldr	r3, [pc, #20]	@ (80092d4 <APP_ZIGBEE_TL_INIT+0x20>)
 80092c0:	4a06      	ldr	r2, [pc, #24]	@ (80092dc <APP_ZIGBEE_TL_INIT+0x28>)
 80092c2:	605a      	str	r2, [r3, #4]
    ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 80092c4:	4b03      	ldr	r3, [pc, #12]	@ (80092d4 <APP_ZIGBEE_TL_INIT+0x20>)
 80092c6:	4a06      	ldr	r2, [pc, #24]	@ (80092e0 <APP_ZIGBEE_TL_INIT+0x2c>)
 80092c8:	609a      	str	r2, [r3, #8]
    TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 80092ca:	4802      	ldr	r0, [pc, #8]	@ (80092d4 <APP_ZIGBEE_TL_INIT+0x20>)
 80092cc:	f009 f9a2 	bl	8012614 <TL_ZIGBEE_Init>
}
 80092d0:	bf00      	nop
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20030028 	.word	0x20030028
 80092d8:	20030838 	.word	0x20030838
 80092dc:	20030944 	.word	0x20030944
 80092e0:	20030a50 	.word	0x20030a50

080092e4 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 80092e8:	4b05      	ldr	r3, [pc, #20]	@ (8009300 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d004      	beq.n	80092fa <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 80092f0:	4b03      	ldr	r3, [pc, #12]	@ (8009300 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 80092f6:	f00b f96b 	bl	80145d0 <Zigbee_CallBackProcessing>
  }
}
 80092fa:	bf00      	nop
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20000458 	.word	0x20000458

08009304 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param  None
 * @return None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	af00      	add	r7, sp, #0
    if (CptReceiveRequestFromM0 != 0) {
 8009308:	4b05      	ldr	r3, [pc, #20]	@ (8009320 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
        CptReceiveRequestFromM0 = 0;
 8009310:	4b03      	ldr	r3, [pc, #12]	@ (8009320 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]
        Zigbee_M0RequestProcessing();
 8009316:	f00c fd31 	bl	8015d7c <Zigbee_M0RequestProcessing>
    }
}
 800931a:	bf00      	nop
 800931c:	bd80      	pop	{r7, pc}
 800931e:	bf00      	nop
 8009320:	2000045c 	.word	0x2000045c

08009324 <APP_ZIGBEE_ConfigGroupAddr>:
 * @brief  Set group addressing mode
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigGroupAddr(void)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
  struct ZbApsmeAddGroupReqT req;
  struct ZbApsmeAddGroupConfT conf;

  memset(&req, 0, sizeof(req));
 800932a:	f107 030c 	add.w	r3, r7, #12
 800932e:	2204      	movs	r2, #4
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f00d fe16 	bl	8016f64 <memset>
  req.endpt = SW1_ENDPOINT;
 8009338:	2311      	movs	r3, #17
 800933a:	73bb      	strb	r3, [r7, #14]
  req.groupAddr = SW1_GROUP_ADDR;
 800933c:	2301      	movs	r3, #1
 800933e:	81bb      	strh	r3, [r7, #12]
  ZbApsmeAddGroupReq(zigbee_app_info.zb, &req, &conf);
 8009340:	4b05      	ldr	r3, [pc, #20]	@ (8009358 <APP_ZIGBEE_ConfigGroupAddr+0x34>)
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	1d3a      	adds	r2, r7, #4
 8009346:	f107 010c 	add.w	r1, r7, #12
 800934a:	4618      	mov	r0, r3
 800934c:	f00a fb7d 	bl	8013a4a <ZbApsmeAddGroupReq>

} /* APP_ZIGBEE_ConfigGroupAddr */
 8009350:	bf00      	nop
 8009352:	3710      	adds	r7, #16
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20000464 	.word	0x20000464

0800935c <APP_ZIGBEE_SW1_Process>:
 * @brief SW1 button pushed toggle req send
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_SW1_Process(void)
{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
  struct ZbApsAddrT dst;
  uint64_t epid = 0U;
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	e9c7 2300 	strd	r2, r3, [r7]
  enum ZclStatusCodeT cmd_status;

  if(zigbee_app_info.zb == NULL){
 800936e:	4b31      	ldr	r3, [pc, #196]	@ (8009434 <APP_ZIGBEE_SW1_Process+0xd8>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d055      	beq.n	8009422 <APP_ZIGBEE_SW1_Process+0xc6>
    return;
  }
  
  /* Check if the router joined the network */
  if (ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_ExtendedPanId, &epid, sizeof(epid)) != ZB_STATUS_SUCCESS) {
 8009376:	4b2f      	ldr	r3, [pc, #188]	@ (8009434 <APP_ZIGBEE_SW1_Process+0xd8>)
 8009378:	6858      	ldr	r0, [r3, #4]
 800937a:	463a      	mov	r2, r7
 800937c:	2308      	movs	r3, #8
 800937e:	219a      	movs	r1, #154	@ 0x9a
 8009380:	f00a fe2e 	bl	8013fe0 <ZbNwkGet>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d14d      	bne.n	8009426 <APP_ZIGBEE_SW1_Process+0xca>
    return;
  }
  if (epid == 0U) {
 800938a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800938e:	4313      	orrs	r3, r2
 8009390:	d04b      	beq.n	800942a <APP_ZIGBEE_SW1_Process+0xce>
    return;
  }

  memset(&dst, 0, sizeof(dst));
 8009392:	f107 0308 	add.w	r3, r7, #8
 8009396:	2210      	movs	r2, #16
 8009398:	2100      	movs	r1, #0
 800939a:	4618      	mov	r0, r3
 800939c:	f00d fde2 	bl	8016f64 <memset>
  dst.mode = ZB_APSDE_ADDRMODE_SHORT;
 80093a0:	2302      	movs	r3, #2
 80093a2:	723b      	strb	r3, [r7, #8]
  dst.endpoint = SW1_ENDPOINT;
 80093a4:	2311      	movs	r3, #17
 80093a6:	817b      	strh	r3, [r7, #10]
  dst.nwkAddr = 0x0;
 80093a8:	2300      	movs	r3, #0
 80093aa:	81fb      	strh	r3, [r7, #14]

  /* Check value to send the correct command and not only Toggle */
  if (OnOffCtrl_On)
 80093ac:	4b22      	ldr	r3, [pc, #136]	@ (8009438 <APP_ZIGBEE_SW1_Process+0xdc>)
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d00f      	beq.n	80093d4 <APP_ZIGBEE_SW1_Process+0x78>
  {
    cmd_status = ZbZclOnOffClientOffReq(zigbee_app_info.onOff_client_1, &dst, APP_ZIGBEE_off_cb, NULL);
 80093b4:	4b1f      	ldr	r3, [pc, #124]	@ (8009434 <APP_ZIGBEE_SW1_Process+0xd8>)
 80093b6:	6958      	ldr	r0, [r3, #20]
 80093b8:	f107 0108 	add.w	r1, r7, #8
 80093bc:	2300      	movs	r3, #0
 80093be:	4a1f      	ldr	r2, [pc, #124]	@ (800943c <APP_ZIGBEE_SW1_Process+0xe0>)
 80093c0:	f7f7 fe2c 	bl	800101c <ZbZclOnOffClientOffReq>
 80093c4:	4603      	mov	r3, r0
 80093c6:	77fb      	strb	r3, [r7, #31]
    APP_DBG("SW1 PUSHED - SENDING LED OFF To Nwk 0x0000");
 80093c8:	4a1d      	ldr	r2, [pc, #116]	@ (8009440 <APP_ZIGBEE_SW1_Process+0xe4>)
 80093ca:	2101      	movs	r1, #1
 80093cc:	2000      	movs	r0, #0
 80093ce:	f7ff fa87 	bl	80088e0 <logApplication>
 80093d2:	e00e      	b.n	80093f2 <APP_ZIGBEE_SW1_Process+0x96>
  }
  else
  {
    cmd_status = ZbZclOnOffClientOnReq(zigbee_app_info.onOff_client_1, &dst, APP_ZIGBEE_on_cb, NULL);
 80093d4:	4b17      	ldr	r3, [pc, #92]	@ (8009434 <APP_ZIGBEE_SW1_Process+0xd8>)
 80093d6:	6958      	ldr	r0, [r3, #20]
 80093d8:	f107 0108 	add.w	r1, r7, #8
 80093dc:	2300      	movs	r3, #0
 80093de:	4a19      	ldr	r2, [pc, #100]	@ (8009444 <APP_ZIGBEE_SW1_Process+0xe8>)
 80093e0:	f7f7 fe0f 	bl	8001002 <ZbZclOnOffClientOnReq>
 80093e4:	4603      	mov	r3, r0
 80093e6:	77fb      	strb	r3, [r7, #31]
    APP_DBG("SW1 PUSHED - SENDING LED ON To Nwk 0x0000");
 80093e8:	4a17      	ldr	r2, [pc, #92]	@ (8009448 <APP_ZIGBEE_SW1_Process+0xec>)
 80093ea:	2101      	movs	r1, #1
 80093ec:	2000      	movs	r0, #0
 80093ee:	f7ff fa77 	bl	80088e0 <logApplication>
  }
  UTIL_SEQ_WaitEvt(EVENT_ON_OFF_RSP);
 80093f2:	2010      	movs	r0, #16
 80093f4:	f00d fab4 	bl	8016960 <UTIL_SEQ_WaitEvt>

  /* check status of command request send to the Server */
  if (cmd_status != ZCL_STATUS_SUCCESS)
 80093f8:	7ffb      	ldrb	r3, [r7, #31]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d005      	beq.n	800940a <APP_ZIGBEE_SW1_Process+0xae>
  {
    APP_DBG("Error, ZbZclOnOffClient[On/Off]Req failed (SW1_ENDPOINT)");
 80093fe:	4a13      	ldr	r2, [pc, #76]	@ (800944c <APP_ZIGBEE_SW1_Process+0xf0>)
 8009400:	2101      	movs	r1, #1
 8009402:	2000      	movs	r0, #0
 8009404:	f7ff fa6c 	bl	80088e0 <logApplication>
 8009408:	e010      	b.n	800942c <APP_ZIGBEE_SW1_Process+0xd0>
  }
  else if (OnOffCtrl_On)
 800940a:	4b0b      	ldr	r3, [pc, #44]	@ (8009438 <APP_ZIGBEE_SW1_Process+0xdc>)
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d003      	beq.n	800941a <APP_ZIGBEE_SW1_Process+0xbe>
  {
    OnOffCtrl_On = 0U;
 8009412:	4b09      	ldr	r3, [pc, #36]	@ (8009438 <APP_ZIGBEE_SW1_Process+0xdc>)
 8009414:	2200      	movs	r2, #0
 8009416:	701a      	strb	r2, [r3, #0]
 8009418:	e008      	b.n	800942c <APP_ZIGBEE_SW1_Process+0xd0>
  }
  else
  {
    OnOffCtrl_On = 1U;
 800941a:	4b07      	ldr	r3, [pc, #28]	@ (8009438 <APP_ZIGBEE_SW1_Process+0xdc>)
 800941c:	2201      	movs	r2, #1
 800941e:	701a      	strb	r2, [r3, #0]
 8009420:	e004      	b.n	800942c <APP_ZIGBEE_SW1_Process+0xd0>
    return;
 8009422:	bf00      	nop
 8009424:	e002      	b.n	800942c <APP_ZIGBEE_SW1_Process+0xd0>
    return;
 8009426:	bf00      	nop
 8009428:	e000      	b.n	800942c <APP_ZIGBEE_SW1_Process+0xd0>
    return;
 800942a:	bf00      	nop
  }
} /* APP_ZIGBEE_SW1_Process */
 800942c:	3720      	adds	r7, #32
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	20000464 	.word	0x20000464
 8009438:	20000460 	.word	0x20000460
 800943c:	0800949d 	.word	0x0800949d
 8009440:	08018268 	.word	0x08018268
 8009444:	08009451 	.word	0x08009451
 8009448:	08018294 	.word	0x08018294
 800944c:	080182c0 	.word	0x080182c0

08009450 <APP_ZIGBEE_on_cb>:
 * @param  rsp response to command (ack)
 * @param  arg useless
 * @retval None
 */
static void APP_ZIGBEE_on_cb(struct ZbZclCommandRspT *rsp, void *arg)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b084      	sub	sp, #16
 8009454:	af02      	add	r7, sp, #8
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
  // Available only in UNICAST
  if (rsp->status != ZCL_STATUS_SUCCESS)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	785b      	ldrb	r3, [r3, #1]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d007      	beq.n	8009472 <APP_ZIGBEE_on_cb+0x22>
  {
    APP_DBG("ON RSP FAIL status %d",rsp->status);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	785b      	ldrb	r3, [r3, #1]
 8009466:	4a0b      	ldr	r2, [pc, #44]	@ (8009494 <APP_ZIGBEE_on_cb+0x44>)
 8009468:	2101      	movs	r1, #1
 800946a:	2000      	movs	r0, #0
 800946c:	f7ff fa38 	bl	80088e0 <logApplication>
 8009470:	e009      	b.n	8009486 <APP_ZIGBEE_on_cb+0x36>
  }
  else
  {
    APP_DBG("ON RSP from %#08llx",rsp->src.extAddr);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8009478:	e9cd 2300 	strd	r2, r3, [sp]
 800947c:	4a06      	ldr	r2, [pc, #24]	@ (8009498 <APP_ZIGBEE_on_cb+0x48>)
 800947e:	2101      	movs	r1, #1
 8009480:	2000      	movs	r0, #0
 8009482:	f7ff fa2d 	bl	80088e0 <logApplication>
  }
  UTIL_SEQ_SetEvt(EVENT_ON_OFF_RSP);
 8009486:	2010      	movs	r0, #16
 8009488:	f00d fa4a 	bl	8016920 <UTIL_SEQ_SetEvt>
}
 800948c:	bf00      	nop
 800948e:	3708      	adds	r7, #8
 8009490:	46bd      	mov	sp, r7
 8009492:	bd80      	pop	{r7, pc}
 8009494:	080182fc 	.word	0x080182fc
 8009498:	08018314 	.word	0x08018314

0800949c <APP_ZIGBEE_off_cb>:
 * @param  rsp: response to command (ack)
 * @param  arg useless
 * @retval None
 */
static void APP_ZIGBEE_off_cb(struct ZbZclCommandRspT *rsp, void *arg)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b084      	sub	sp, #16
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	6078      	str	r0, [r7, #4]
 80094a4:	6039      	str	r1, [r7, #0]
  // Available only in UNICAST
  if (rsp->status != ZCL_STATUS_SUCCESS)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	785b      	ldrb	r3, [r3, #1]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d007      	beq.n	80094be <APP_ZIGBEE_off_cb+0x22>
  {
    APP_DBG("OFF RSP FAIL status %d",rsp->status);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	4a0b      	ldr	r2, [pc, #44]	@ (80094e0 <APP_ZIGBEE_off_cb+0x44>)
 80094b4:	2101      	movs	r1, #1
 80094b6:	2000      	movs	r0, #0
 80094b8:	f7ff fa12 	bl	80088e0 <logApplication>
 80094bc:	e009      	b.n	80094d2 <APP_ZIGBEE_off_cb+0x36>
  }
  else
  {
    APP_DBG("OFF RSP from %#08llx",rsp->src.extAddr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80094c4:	e9cd 2300 	strd	r2, r3, [sp]
 80094c8:	4a06      	ldr	r2, [pc, #24]	@ (80094e4 <APP_ZIGBEE_off_cb+0x48>)
 80094ca:	2101      	movs	r1, #1
 80094cc:	2000      	movs	r0, #0
 80094ce:	f7ff fa07 	bl	80088e0 <logApplication>
  }
  UTIL_SEQ_SetEvt(EVENT_ON_OFF_RSP);
 80094d2:	2010      	movs	r0, #16
 80094d4:	f00d fa24 	bl	8016920 <UTIL_SEQ_SetEvt>
}
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	08018328 	.word	0x08018328
 80094e4:	08018340 	.word	0x08018340

080094e8 <LCD_Display_Channel>:
 * @brief  Update Display Channel used
 * @param  None
 * @retval None
 */
static void LCD_Display_Channel(void)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b0a0      	sub	sp, #128	@ 0x80
 80094ec:	af00      	add	r7, sp, #0
  struct ZbChannelListT channelList;
  unsigned int idxChan;

  /* Get the channel number used for the network and display it */
  (void)ZbNwkGet(zigbee_app_info.zb, ZB_NWK_NIB_ID_ActiveChannelList, &channelList, sizeof(struct ZbChannelListT));
 80094ee:	4b23      	ldr	r3, [pc, #140]	@ (800957c <LCD_Display_Channel+0x94>)
 80094f0:	6858      	ldr	r0, [r3, #4]
 80094f2:	f107 021c 	add.w	r2, r7, #28
 80094f6:	235c      	movs	r3, #92	@ 0x5c
 80094f8:	f240 4113 	movw	r1, #1043	@ 0x413
 80094fc:	f00a fd70 	bl	8013fe0 <ZbNwkGet>
  for (idxChan = 0; idxChan < channelList.count; idxChan++)
 8009500:	2300      	movs	r3, #0
 8009502:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009504:	e02f      	b.n	8009566 <LCD_Display_Channel+0x7e>
  {
    uint8_t num_channels;
    uint16_t active_channel;

    num_channels = get_channel_from_mask(channelList.list[idxChan].channelMask, &active_channel);
 8009506:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009508:	00db      	lsls	r3, r3, #3
 800950a:	3380      	adds	r3, #128	@ 0x80
 800950c:	443b      	add	r3, r7
 800950e:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 8009512:	f107 021a 	add.w	r2, r7, #26
 8009516:	4611      	mov	r1, r2
 8009518:	4618      	mov	r0, r3
 800951a:	f000 f835 	bl	8009588 <get_channel_from_mask>
 800951e:	4603      	mov	r3, r0
 8009520:	f887 307b 	strb.w	r3, [r7, #123]	@ 0x7b

    /* Display channel information to user */
    if (num_channels == 1)
 8009524:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8009528:	2b01      	cmp	r3, #1
 800952a:	d119      	bne.n	8009560 <LCD_Display_Channel+0x78>
    {
      char disp_chan[21];
      /* active channel is available */
      UTIL_LCD_ClearStringLine(2);
 800952c:	2002      	movs	r0, #2
 800952e:	f00c fdc5 	bl	80160bc <UTIL_LCD_ClearStringLine>
      sprintf(disp_chan, "Join Channel : %2d", active_channel);
 8009532:	8b7b      	ldrh	r3, [r7, #26]
 8009534:	461a      	mov	r2, r3
 8009536:	1d3b      	adds	r3, r7, #4
 8009538:	4911      	ldr	r1, [pc, #68]	@ (8009580 <LCD_Display_Channel+0x98>)
 800953a:	4618      	mov	r0, r3
 800953c:	f00d fc76 	bl	8016e2c <siprintf>
      UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)disp_chan, CENTER_MODE);
 8009540:	f00c fd90 	bl	8016064 <UTIL_LCD_GetFont>
 8009544:	4603      	mov	r3, r0
 8009546:	88db      	ldrh	r3, [r3, #6]
 8009548:	005b      	lsls	r3, r3, #1
 800954a:	4619      	mov	r1, r3
 800954c:	1d3a      	adds	r2, r7, #4
 800954e:	2301      	movs	r3, #1
 8009550:	2000      	movs	r0, #0
 8009552:	f00c fe17 	bl	8016184 <UTIL_LCD_DisplayStringAt>
      BSP_LCD_Refresh(LCD_Inst);
 8009556:	4b0b      	ldr	r3, [pc, #44]	@ (8009584 <LCD_Display_Channel+0x9c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	4618      	mov	r0, r3
 800955c:	f002 f842 	bl	800b5e4 <BSP_LCD_Refresh>
  for (idxChan = 0; idxChan < channelList.count; idxChan++)
 8009560:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009562:	3301      	adds	r3, #1
 8009564:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009566:	7f3b      	ldrb	r3, [r7, #28]
 8009568:	461a      	mov	r2, r3
 800956a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800956c:	4293      	cmp	r3, r2
 800956e:	d3ca      	bcc.n	8009506 <LCD_Display_Channel+0x1e>
    }
  }
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	3780      	adds	r7, #128	@ 0x80
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
 800957a:	bf00      	nop
 800957c:	20000464 	.word	0x20000464
 8009580:	08018358 	.word	0x08018358
 8009584:	2000013c 	.word	0x2000013c

08009588 <get_channel_from_mask>:
 * @param  mask: channel mask
 * @param  first_channel: first channel found
 * @retval numbers of channel found
 */
static uint8_t get_channel_from_mask(uint32_t mask, uint16_t *first_channel)
{
 8009588:	b480      	push	{r7}
 800958a:	b085      	sub	sp, #20
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
 8009590:	6039      	str	r1, [r7, #0]
  uint8_t i, num_channels = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	73bb      	strb	r3, [r7, #14]

  *first_channel = 0xff;
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	22ff      	movs	r2, #255	@ 0xff
 800959a:	801a      	strh	r2, [r3, #0]
  for (i = 0; i < WPAN_PAGE_CHANNELS_MAX; i++)
 800959c:	2300      	movs	r3, #0
 800959e:	73fb      	strb	r3, [r7, #15]
 80095a0:	e015      	b.n	80095ce <get_channel_from_mask+0x46>
  {
    if (((1 << i) & mask))
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
 80095a4:	2201      	movs	r2, #1
 80095a6:	fa02 f303 	lsl.w	r3, r2, r3
 80095aa:	461a      	mov	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4013      	ands	r3, r2
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d009      	beq.n	80095c8 <get_channel_from_mask+0x40>
    {
      if (num_channels == 0U)
 80095b4:	7bbb      	ldrb	r3, [r7, #14]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d103      	bne.n	80095c2 <get_channel_from_mask+0x3a>
      {
        *first_channel = i;
 80095ba:	7bfb      	ldrb	r3, [r7, #15]
 80095bc:	b29a      	uxth	r2, r3
 80095be:	683b      	ldr	r3, [r7, #0]
 80095c0:	801a      	strh	r2, [r3, #0]
      }
      num_channels++;
 80095c2:	7bbb      	ldrb	r3, [r7, #14]
 80095c4:	3301      	adds	r3, #1
 80095c6:	73bb      	strb	r3, [r7, #14]
  for (i = 0; i < WPAN_PAGE_CHANNELS_MAX; i++)
 80095c8:	7bfb      	ldrb	r3, [r7, #15]
 80095ca:	3301      	adds	r3, #1
 80095cc:	73fb      	strb	r3, [r7, #15]
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
 80095d0:	2b1a      	cmp	r3, #26
 80095d2:	d9e6      	bls.n	80095a2 <get_channel_from_mask+0x1a>
    }
  }
  return num_channels;
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
	...

080095e4 <LL_PWR_EnableBootC2>:
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80095e8:	4b05      	ldr	r3, [pc, #20]	@ (8009600 <LL_PWR_EnableBootC2+0x1c>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	4a04      	ldr	r2, [pc, #16]	@ (8009600 <LL_PWR_EnableBootC2+0x1c>)
 80095ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095f2:	60d3      	str	r3, [r2, #12]
}
 80095f4:	bf00      	nop
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr
 80095fe:	bf00      	nop
 8009600:	58000400 	.word	0x58000400

08009604 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009604:	b480      	push	{r7}
 8009606:	b083      	sub	sp, #12
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800960c:	4b06      	ldr	r3, [pc, #24]	@ (8009628 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800960e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009612:	4905      	ldr	r1, [pc, #20]	@ (8009628 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	4313      	orrs	r3, r2
 8009618:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr
 8009628:	58000800 	.word	0x58000800

0800962c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800962c:	b480      	push	{r7}
 800962e:	b083      	sub	sp, #12
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009634:	4b05      	ldr	r3, [pc, #20]	@ (800964c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009636:	6a1a      	ldr	r2, [r3, #32]
 8009638:	4904      	ldr	r1, [pc, #16]	@ (800964c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4313      	orrs	r3, r2
 800963e:	620b      	str	r3, [r1, #32]
}
 8009640:	bf00      	nop
 8009642:	370c      	adds	r7, #12
 8009644:	46bd      	mov	sp, r7
 8009646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964a:	4770      	bx	lr
 800964c:	58000800 	.word	0x58000800

08009650 <LL_AHB3_GRP1_EnableClock>:
{
 8009650:	b480      	push	{r7}
 8009652:	b085      	sub	sp, #20
 8009654:	af00      	add	r7, sp, #0
 8009656:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009658:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800965c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800965e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4313      	orrs	r3, r2
 8009666:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009668:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800966c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4013      	ands	r3, r2
 8009672:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009674:	68fb      	ldr	r3, [r7, #12]
}
 8009676:	bf00      	nop
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr

08009682 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009682:	b480      	push	{r7}
 8009684:	b085      	sub	sp, #20
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800968a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800968e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009692:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4313      	orrs	r3, r2
 800969a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800969e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80096a2:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4013      	ands	r3, r2
 80096aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80096ac:	68fb      	ldr	r3, [r7, #12]
}
 80096ae:	bf00      	nop
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <LL_C1_IPCC_EnableIT_TXF>:
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	601a      	str	r2, [r3, #0]
}
 80096ce:	bf00      	nop
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <LL_C1_IPCC_EnableIT_RXO>:
{
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f043 0201 	orr.w	r2, r3, #1
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	601a      	str	r2, [r3, #0]
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <LL_C1_IPCC_EnableTransmitChannel>:
{
 80096fa:	b480      	push	{r7}
 80096fc:	b083      	sub	sp, #12
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
 8009702:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	041b      	lsls	r3, r3, #16
 800970c:	43db      	mvns	r3, r3
 800970e:	401a      	ands	r2, r3
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	605a      	str	r2, [r3, #4]
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	041b      	lsls	r3, r3, #16
 8009732:	431a      	orrs	r2, r3
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	605a      	str	r2, [r3, #4]
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
 800974c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	685a      	ldr	r2, [r3, #4]
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	43db      	mvns	r3, r3
 8009756:	401a      	ands	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	605a      	str	r2, [r3, #4]
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
 8009770:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	431a      	orrs	r2, r3
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	605a      	str	r2, [r3, #4]
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr

0800978a <LL_C1_IPCC_ClearFlag_CHx>:
{
 800978a:	b480      	push	{r7}
 800978c:	b083      	sub	sp, #12
 800978e:	af00      	add	r7, sp, #0
 8009790:	6078      	str	r0, [r7, #4]
 8009792:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	683a      	ldr	r2, [r7, #0]
 8009798:	609a      	str	r2, [r3, #8]
}
 800979a:	bf00      	nop
 800979c:	370c      	adds	r7, #12
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <LL_C1_IPCC_SetFlag_CHx>:
{
 80097a6:	b480      	push	{r7}
 80097a8:	b083      	sub	sp, #12
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	041a      	lsls	r2, r3, #16
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	609a      	str	r2, [r3, #8]
}
 80097b8:	bf00      	nop
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c2:	4770      	bx	lr

080097c4 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	68da      	ldr	r2, [r3, #12]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	4013      	ands	r3, r2
 80097d6:	683a      	ldr	r2, [r7, #0]
 80097d8:	429a      	cmp	r2, r3
 80097da:	d101      	bne.n	80097e0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80097dc:	2301      	movs	r3, #1
 80097de:	e000      	b.n	80097e2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b083      	sub	sp, #12
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	69da      	ldr	r2, [r3, #28]
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	4013      	ands	r3, r2
 8009800:	683a      	ldr	r2, [r7, #0]
 8009802:	429a      	cmp	r2, r3
 8009804:	d101      	bne.n	800980a <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800980a:	2300      	movs	r3, #0
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800981c:	2102      	movs	r1, #2
 800981e:	4828      	ldr	r0, [pc, #160]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 8009820:	f7ff ffe5 	bl	80097ee <LL_C2_IPCC_IsActiveFlag_CHx>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d008      	beq.n	800983c <HW_IPCC_Rx_Handler+0x24>
 800982a:	4b25      	ldr	r3, [pc, #148]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 800982c:	685b      	ldr	r3, [r3, #4]
 800982e:	f003 0302 	and.w	r3, r3, #2
 8009832:	2b00      	cmp	r3, #0
 8009834:	d102      	bne.n	800983c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009836:	f000 f8f1 	bl	8009a1c <HW_IPCC_SYS_EvtHandler>
 800983a:	e03e      	b.n	80098ba <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800983c:	2104      	movs	r1, #4
 800983e:	4820      	ldr	r0, [pc, #128]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 8009840:	f7ff ffd5 	bl	80097ee <LL_C2_IPCC_IsActiveFlag_CHx>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d008      	beq.n	800985c <HW_IPCC_Rx_Handler+0x44>
 800984a:	4b1d      	ldr	r3, [pc, #116]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f003 0304 	and.w	r3, r3, #4
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 8009856:	f000 f923 	bl	8009aa0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800985a:	e02e      	b.n	80098ba <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800985c:	2110      	movs	r1, #16
 800985e:	4818      	ldr	r0, [pc, #96]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 8009860:	f7ff ffc5 	bl	80097ee <LL_C2_IPCC_IsActiveFlag_CHx>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d008      	beq.n	800987c <HW_IPCC_Rx_Handler+0x64>
 800986a:	4b15      	ldr	r3, [pc, #84]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	f003 0310 	and.w	r3, r3, #16
 8009872:	2b00      	cmp	r3, #0
 8009874:	d102      	bne.n	800987c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 8009876:	f000 f91f 	bl	8009ab8 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800987a:	e01e      	b.n	80098ba <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800987c:	2101      	movs	r1, #1
 800987e:	4810      	ldr	r0, [pc, #64]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 8009880:	f7ff ffb5 	bl	80097ee <LL_C2_IPCC_IsActiveFlag_CHx>
 8009884:	4603      	mov	r3, r0
 8009886:	2b00      	cmp	r3, #0
 8009888:	d008      	beq.n	800989c <HW_IPCC_Rx_Handler+0x84>
 800988a:	4b0d      	ldr	r3, [pc, #52]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	f003 0301 	and.w	r3, r3, #1
 8009892:	2b00      	cmp	r3, #0
 8009894:	d102      	bne.n	800989c <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 8009896:	f000 f885 	bl	80099a4 <HW_IPCC_BLE_EvtHandler>
 800989a:	e00e      	b.n	80098ba <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800989c:	2108      	movs	r1, #8
 800989e:	4808      	ldr	r0, [pc, #32]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 80098a0:	f7ff ffa5 	bl	80097ee <LL_C2_IPCC_IsActiveFlag_CHx>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d008      	beq.n	80098bc <HW_IPCC_Rx_Handler+0xa4>
 80098aa:	4b05      	ldr	r3, [pc, #20]	@ (80098c0 <HW_IPCC_Rx_Handler+0xa8>)
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d102      	bne.n	80098bc <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 80098b6:	f000 f959 	bl	8009b6c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80098ba:	bf00      	nop
 80098bc:	bf00      	nop
}
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	58000c00 	.word	0x58000c00

080098c4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80098c8:	2102      	movs	r1, #2
 80098ca:	4820      	ldr	r0, [pc, #128]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 80098cc:	f7ff ff7a 	bl	80097c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d107      	bne.n	80098e6 <HW_IPCC_Tx_Handler+0x22>
 80098d6:	4b1d      	ldr	r3, [pc, #116]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 80098d8:	685b      	ldr	r3, [r3, #4]
 80098da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d101      	bne.n	80098e6 <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80098e2:	f000 f88f 	bl	8009a04 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 80098e6:	2104      	movs	r1, #4
 80098e8:	4818      	ldr	r0, [pc, #96]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 80098ea:	f7ff ff6b 	bl	80097c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d108      	bne.n	8009906 <HW_IPCC_Tx_Handler+0x42>
 80098f4:	4b15      	ldr	r3, [pc, #84]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d102      	bne.n	8009906 <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 8009900:	f000 f8c2 	bl	8009a88 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 8009904:	e01e      	b.n	8009944 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8009906:	2108      	movs	r1, #8
 8009908:	4810      	ldr	r0, [pc, #64]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 800990a:	f7ff ff5b 	bl	80097c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 800990e:	4603      	mov	r3, r0
 8009910:	2b00      	cmp	r3, #0
 8009912:	d108      	bne.n	8009926 <HW_IPCC_Tx_Handler+0x62>
 8009914:	4b0d      	ldr	r3, [pc, #52]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d102      	bne.n	8009926 <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009920:	f000 f906 	bl	8009b30 <HW_IPCC_MM_FreeBufHandler>
 8009924:	e00e      	b.n	8009944 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009926:	2120      	movs	r1, #32
 8009928:	4808      	ldr	r0, [pc, #32]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 800992a:	f7ff ff4b 	bl	80097c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d108      	bne.n	8009946 <HW_IPCC_Tx_Handler+0x82>
 8009934:	4b05      	ldr	r3, [pc, #20]	@ (800994c <HW_IPCC_Tx_Handler+0x88>)
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d102      	bne.n	8009946 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009940:	f000 f83c 	bl	80099bc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009944:	bf00      	nop
 8009946:	bf00      	nop
}
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	58000c00 	.word	0x58000c00

08009950 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009954:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009958:	f7ff fe93 	bl	8009682 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800995c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009960:	f7ff fe64 	bl	800962c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009964:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009968:	f7ff fe4c 	bl	8009604 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800996c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800996e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009970:	f7ff fe38 	bl	80095e4 <LL_PWR_EnableBootC2>

  return;
 8009974:	bf00      	nop
}
 8009976:	bd80      	pop	{r7, pc}

08009978 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800997c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009980:	f7ff fe66 	bl	8009650 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009984:	4806      	ldr	r0, [pc, #24]	@ (80099a0 <HW_IPCC_Init+0x28>)
 8009986:	f7ff fea8 	bl	80096da <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800998a:	4805      	ldr	r0, [pc, #20]	@ (80099a0 <HW_IPCC_Init+0x28>)
 800998c:	f7ff fe95 	bl	80096ba <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009990:	202c      	movs	r0, #44	@ 0x2c
 8009992:	f002 fba4 	bl	800c0de <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009996:	202d      	movs	r0, #45	@ 0x2d
 8009998:	f002 fba1 	bl	800c0de <HAL_NVIC_EnableIRQ>

  return;
 800999c:	bf00      	nop
}
 800999e:	bd80      	pop	{r7, pc}
 80099a0:	58000c00 	.word	0x58000c00

080099a4 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80099a8:	f008 fd7c 	bl	80124a4 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80099ac:	2101      	movs	r1, #1
 80099ae:	4802      	ldr	r0, [pc, #8]	@ (80099b8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80099b0:	f7ff feeb 	bl	800978a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80099b4:	bf00      	nop
}
 80099b6:	bd80      	pop	{r7, pc}
 80099b8:	58000c00 	.word	0x58000c00

080099bc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 80099c0:	2120      	movs	r1, #32
 80099c2:	4803      	ldr	r0, [pc, #12]	@ (80099d0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 80099c4:	f7ff feac 	bl	8009720 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 80099c8:	f008 fd9c 	bl	8012504 <HW_IPCC_BLE_AclDataAckNot>

  return;
 80099cc:	bf00      	nop
}
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	58000c00 	.word	0x58000c00

080099d4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 80099d8:	2102      	movs	r1, #2
 80099da:	4802      	ldr	r0, [pc, #8]	@ (80099e4 <HW_IPCC_SYS_Init+0x10>)
 80099dc:	f7ff feb2 	bl	8009744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80099e0:	bf00      	nop
}
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	58000c00 	.word	0x58000c00

080099e8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80099ec:	2102      	movs	r1, #2
 80099ee:	4804      	ldr	r0, [pc, #16]	@ (8009a00 <HW_IPCC_SYS_SendCmd+0x18>)
 80099f0:	f7ff fed9 	bl	80097a6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 80099f4:	2102      	movs	r1, #2
 80099f6:	4802      	ldr	r0, [pc, #8]	@ (8009a00 <HW_IPCC_SYS_SendCmd+0x18>)
 80099f8:	f7ff fe7f 	bl	80096fa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 80099fc:	bf00      	nop
}
 80099fe:	bd80      	pop	{r7, pc}
 8009a00:	58000c00 	.word	0x58000c00

08009a04 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009a08:	2102      	movs	r1, #2
 8009a0a:	4803      	ldr	r0, [pc, #12]	@ (8009a18 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009a0c:	f7ff fe88 	bl	8009720 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009a10:	f008 fdc8 	bl	80125a4 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009a14:	bf00      	nop
}
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	58000c00 	.word	0x58000c00

08009a1c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009a20:	f008 fdd6 	bl	80125d0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009a24:	2102      	movs	r1, #2
 8009a26:	4802      	ldr	r0, [pc, #8]	@ (8009a30 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009a28:	f7ff feaf 	bl	800978a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009a2c:	bf00      	nop
}
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	58000c00 	.word	0x58000c00

08009a34 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009a38:	2104      	movs	r1, #4
 8009a3a:	4804      	ldr	r0, [pc, #16]	@ (8009a4c <HW_IPCC_ZIGBEE_Init+0x18>)
 8009a3c:	f7ff fe82 	bl	8009744 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009a40:	2110      	movs	r1, #16
 8009a42:	4802      	ldr	r0, [pc, #8]	@ (8009a4c <HW_IPCC_ZIGBEE_Init+0x18>)
 8009a44:	f7ff fe7e 	bl	8009744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009a48:	bf00      	nop
}
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	58000c00 	.word	0x58000c00

08009a50 <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8009a54:	2104      	movs	r1, #4
 8009a56:	4804      	ldr	r0, [pc, #16]	@ (8009a68 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8009a58:	f7ff fea5 	bl	80097a6 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8009a5c:	2104      	movs	r1, #4
 8009a5e:	4802      	ldr	r0, [pc, #8]	@ (8009a68 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8009a60:	f7ff fe4b 	bl	80096fa <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009a64:	bf00      	nop
}
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	58000c00 	.word	0x58000c00

08009a6c <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009a70:	2104      	movs	r1, #4
 8009a72:	4804      	ldr	r0, [pc, #16]	@ (8009a84 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8009a74:	f7ff fe89 	bl	800978a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009a78:	2104      	movs	r1, #4
 8009a7a:	4802      	ldr	r0, [pc, #8]	@ (8009a84 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8009a7c:	f7ff fe62 	bl	8009744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009a80:	bf00      	nop
}
 8009a82:	bd80      	pop	{r7, pc}
 8009a84:	58000c00 	.word	0x58000c00

08009a88 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8009a8c:	2104      	movs	r1, #4
 8009a8e:	4803      	ldr	r0, [pc, #12]	@ (8009a9c <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 8009a90:	f7ff fe46 	bl	8009720 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 8009a94:	f008 fde8 	bl	8012668 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 8009a98:	bf00      	nop
}
 8009a9a:	bd80      	pop	{r7, pc}
 8009a9c:	58000c00 	.word	0x58000c00

08009aa0 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009aa4:	2104      	movs	r1, #4
 8009aa6:	4803      	ldr	r0, [pc, #12]	@ (8009ab4 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 8009aa8:	f7ff fe5e 	bl	8009768 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 8009aac:	f008 fde8 	bl	8012680 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 8009ab0:	bf00      	nop
}
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	58000c00 	.word	0x58000c00

08009ab8 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009abc:	2110      	movs	r1, #16
 8009abe:	4803      	ldr	r0, [pc, #12]	@ (8009acc <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 8009ac0:	f7ff fe52 	bl	8009768 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 8009ac4:	f008 fdf6 	bl	80126b4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 8009ac8:	bf00      	nop
}
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	58000c00 	.word	0x58000c00

08009ad0 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009ad4:	2110      	movs	r1, #16
 8009ad6:	4804      	ldr	r0, [pc, #16]	@ (8009ae8 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8009ad8:	f7ff fe57 	bl	800978a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009adc:	2110      	movs	r1, #16
 8009ade:	4802      	ldr	r0, [pc, #8]	@ (8009ae8 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8009ae0:	f7ff fe30 	bl	8009744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009ae4:	bf00      	nop
}
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	58000c00 	.word	0x58000c00

08009aec <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009af4:	2108      	movs	r1, #8
 8009af6:	480c      	ldr	r0, [pc, #48]	@ (8009b28 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009af8:	f7ff fe64 	bl	80097c4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d007      	beq.n	8009b12 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009b02:	4a0a      	ldr	r2, [pc, #40]	@ (8009b2c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b08:	2108      	movs	r1, #8
 8009b0a:	4807      	ldr	r0, [pc, #28]	@ (8009b28 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b0c:	f7ff fdf5 	bl	80096fa <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009b10:	e006      	b.n	8009b20 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b16:	2108      	movs	r1, #8
 8009b18:	4803      	ldr	r0, [pc, #12]	@ (8009b28 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009b1a:	f7ff fe44 	bl	80097a6 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009b1e:	bf00      	nop
}
 8009b20:	3708      	adds	r7, #8
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	58000c00 	.word	0x58000c00
 8009b2c:	2000047c 	.word	0x2000047c

08009b30 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b34:	2108      	movs	r1, #8
 8009b36:	4806      	ldr	r0, [pc, #24]	@ (8009b50 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b38:	f7ff fdf2 	bl	8009720 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009b3c:	4b05      	ldr	r3, [pc, #20]	@ (8009b54 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009b42:	2108      	movs	r1, #8
 8009b44:	4802      	ldr	r0, [pc, #8]	@ (8009b50 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009b46:	f7ff fe2e 	bl	80097a6 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009b4a:	bf00      	nop
}
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	58000c00 	.word	0x58000c00
 8009b54:	2000047c 	.word	0x2000047c

08009b58 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009b5c:	2108      	movs	r1, #8
 8009b5e:	4802      	ldr	r0, [pc, #8]	@ (8009b68 <HW_IPCC_TRACES_Init+0x10>)
 8009b60:	f7ff fdf0 	bl	8009744 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009b64:	bf00      	nop
}
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	58000c00 	.word	0x58000c00

08009b6c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009b70:	f008 fe40 	bl	80127f4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009b74:	2108      	movs	r1, #8
 8009b76:	4802      	ldr	r0, [pc, #8]	@ (8009b80 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009b78:	f7ff fe07 	bl	800978a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009b7c:	bf00      	nop
}
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	58000c00 	.word	0x58000c00

08009b84 <SSD1315_RegisterBusIO>:
  * @param  pObj Component object pointer.
  * @param  pIO  Component IO structure pointer.
  * @retval Component status.
  */
int32_t SSD1315_RegisterBusIO(SSD1315_Object_t *pObj, SSD1315_IO_t *pIO)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b084      	sub	sp, #16
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d103      	bne.n	8009b9c <SSD1315_RegisterBusIO+0x18>
  {
    ret = SSD1315_ERROR;
 8009b94:	f04f 33ff 	mov.w	r3, #4294967295
 8009b98:	60fb      	str	r3, [r7, #12]
 8009b9a:	e01c      	b.n	8009bd6 <SSD1315_RegisterBusIO+0x52>
  }
  else
  {
    pObj->IO.Init           = pIO->Init;
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	681a      	ldr	r2, [r3, #0]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit         = pIO->DeInit;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685a      	ldr	r2, [r3, #4]
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	605a      	str	r2, [r3, #4]
    pObj->IO.WriteReg       = pIO->WriteReg;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	689a      	ldr	r2, [r3, #8]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	609a      	str	r2, [r3, #8]
    pObj->IO.ReadReg        = pIO->ReadReg;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	68da      	ldr	r2, [r3, #12]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	60da      	str	r2, [r3, #12]
    pObj->IO.GetTick        = pIO->GetTick;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	611a      	str	r2, [r3, #16]

    pObj->Ctx.ReadReg       = SSD1315_ReadRegWrap;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8009bf8 <SSD1315_RegisterBusIO+0x74>)
 8009bc8:	619a      	str	r2, [r3, #24]
    pObj->Ctx.WriteReg      = SSD1315_WriteRegWrap;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	4a0b      	ldr	r2, [pc, #44]	@ (8009bfc <SSD1315_RegisterBusIO+0x78>)
 8009bce:	615a      	str	r2, [r3, #20]
    pObj->Ctx.handle    = pObj;
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	687a      	ldr	r2, [r7, #4]
 8009bd4:	61da      	str	r2, [r3, #28]
  }

  if (pObj->IO.Init != NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d004      	beq.n	8009be8 <SSD1315_RegisterBusIO+0x64>
  {
      ret = pObj->IO.Init();
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4798      	blx	r3
 8009be4:	60f8      	str	r0, [r7, #12]
 8009be6:	e002      	b.n	8009bee <SSD1315_RegisterBusIO+0x6a>
  }
  else
  {
     ret = SSD1315_ERROR;
 8009be8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bec:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009bee:	68fb      	ldr	r3, [r7, #12]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	0800aa89 	.word	0x0800aa89
 8009bfc:	0800aab7 	.word	0x0800aab7

08009c00 <SSD1315_Init>:
  * @param  ColorCoding RGB mode.
  * @param  Orientation Display orientation.
  * @retval Component status.
  */
int32_t SSD1315_Init(SSD1315_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	617b      	str	r3, [r7, #20]
  uint8_t data;

  if((pObj == NULL) || (Orientation > SSD1315_ORIENTATION_LANDSCAPE))
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <SSD1315_Init+0x1c>
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d003      	beq.n	8009c24 <SSD1315_Init+0x24>
  {
    ret = SSD1315_ERROR;
 8009c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8009c20:	617b      	str	r3, [r7, #20]
 8009c22:	e0ab      	b.n	8009d7c <SSD1315_Init+0x17c>
  }
  else
  {
    if (pObj->IsInitialized == 0)
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	f040 80a3 	bne.w	8009d76 <SSD1315_Init+0x176>
    {
      pObj->IsInitialized = 1;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	2201      	movs	r2, #1
 8009c34:	f883 2020 	strb.w	r2, [r3, #32]
	  pObj->Orientation = Orientation;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)SSD1315_IO_Delay(pObj, 100);
 8009c3e:	2164      	movs	r1, #100	@ 0x64
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f000 ff6b 	bl	800ab1c <SSD1315_IO_Delay>
      /* Driving ability setting */
      data = SSD1315_READWRITE_CMD;
 8009c46:	2380      	movs	r3, #128	@ 0x80
 8009c48:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f103 0014 	add.w	r0, r3, #20
 8009c50:	f107 0213 	add.w	r2, r7, #19
 8009c54:	2301      	movs	r3, #1
 8009c56:	2101      	movs	r1, #1
 8009c58:	f000 ff7a 	bl	800ab50 <ssd1315_write_reg>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	4413      	add	r3, r2
 8009c62:	617b      	str	r3, [r7, #20]
      data = SSD1315_CHARGE_PUMP_SETTING;
 8009c64:	238d      	movs	r3, #141	@ 0x8d
 8009c66:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f103 0014 	add.w	r0, r3, #20
 8009c6e:	f107 0213 	add.w	r2, r7, #19
 8009c72:	2301      	movs	r3, #1
 8009c74:	2101      	movs	r1, #1
 8009c76:	f000 ff6b 	bl	800ab50 <ssd1315_write_reg>
 8009c7a:	4602      	mov	r2, r0
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	4413      	add	r3, r2
 8009c80:	617b      	str	r3, [r7, #20]
      data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 8009c82:	2314      	movs	r3, #20
 8009c84:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	f103 0014 	add.w	r0, r3, #20
 8009c8c:	f107 0213 	add.w	r2, r7, #19
 8009c90:	2301      	movs	r3, #1
 8009c92:	2101      	movs	r1, #1
 8009c94:	f000 ff5c 	bl	800ab50 <ssd1315_write_reg>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	617b      	str	r3, [r7, #20]
      data = SSD1315_MEMORY_ADRESS_MODE;
 8009ca0:	2320      	movs	r3, #32
 8009ca2:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f103 0014 	add.w	r0, r3, #20
 8009caa:	f107 0213 	add.w	r2, r7, #19
 8009cae:	2301      	movs	r3, #1
 8009cb0:	2101      	movs	r1, #1
 8009cb2:	f000 ff4d 	bl	800ab50 <ssd1315_write_reg>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	4413      	add	r3, r2
 8009cbc:	617b      	str	r3, [r7, #20]
      data = SSD1315_LOWER_COLUMN_START_ADRESS;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	f103 0014 	add.w	r0, r3, #20
 8009cc8:	f107 0213 	add.w	r2, r7, #19
 8009ccc:	2301      	movs	r3, #1
 8009cce:	2101      	movs	r1, #1
 8009cd0:	f000 ff3e 	bl	800ab50 <ssd1315_write_reg>
 8009cd4:	4602      	mov	r2, r0
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	4413      	add	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_START_LINE_1;
 8009cdc:	2340      	movs	r3, #64	@ 0x40
 8009cde:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f103 0014 	add.w	r0, r3, #20
 8009ce6:	f107 0213 	add.w	r2, r7, #19
 8009cea:	2301      	movs	r3, #1
 8009cec:	2101      	movs	r1, #1
 8009cee:	f000 ff2f 	bl	800ab50 <ssd1315_write_reg>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	4413      	add	r3, r2
 8009cf8:	617b      	str	r3, [r7, #20]
      data = SSD1315_REMAPPED_MODE;
 8009cfa:	23c8      	movs	r3, #200	@ 0xc8
 8009cfc:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f103 0014 	add.w	r0, r3, #20
 8009d04:	f107 0213 	add.w	r2, r7, #19
 8009d08:	2301      	movs	r3, #1
 8009d0a:	2101      	movs	r1, #1
 8009d0c:	f000 ff20 	bl	800ab50 <ssd1315_write_reg>
 8009d10:	4602      	mov	r2, r0
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	4413      	add	r3, r2
 8009d16:	617b      	str	r3, [r7, #20]
      data = SSD1315_CONTRAST_CONTROL;
 8009d18:	23a1      	movs	r3, #161	@ 0xa1
 8009d1a:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f103 0014 	add.w	r0, r3, #20
 8009d22:	f107 0213 	add.w	r2, r7, #19
 8009d26:	2301      	movs	r3, #1
 8009d28:	2101      	movs	r1, #1
 8009d2a:	f000 ff11 	bl	800ab50 <ssd1315_write_reg>
 8009d2e:	4602      	mov	r2, r0
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	4413      	add	r3, r2
 8009d34:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_ON;
 8009d36:	23af      	movs	r3, #175	@ 0xaf
 8009d38:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f103 0014 	add.w	r0, r3, #20
 8009d40:	f107 0213 	add.w	r2, r7, #19
 8009d44:	2301      	movs	r3, #1
 8009d46:	2101      	movs	r1, #1
 8009d48:	f000 ff02 	bl	800ab50 <ssd1315_write_reg>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	4413      	add	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
      ssd1315_Clear(SSD1315_COLOR_BLACK); 
 8009d54:	2000      	movs	r0, #0
 8009d56:	f000 fec5 	bl	800aae4 <ssd1315_Clear>
      ret += ssd1315_write_reg(&pObj->Ctx, 1, PhysFrameBuffer,  SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	f103 0014 	add.w	r0, r3, #20
 8009d60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d64:	4a0b      	ldr	r2, [pc, #44]	@ (8009d94 <SSD1315_Init+0x194>)
 8009d66:	2101      	movs	r1, #1
 8009d68:	f000 fef2 	bl	800ab50 <ssd1315_write_reg>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	4413      	add	r3, r2
 8009d72:	617b      	str	r3, [r7, #20]
 8009d74:	e002      	b.n	8009d7c <SSD1315_Init+0x17c>
    }
    else
    {
      ret = SSD1315_ERROR;
 8009d76:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7a:	617b      	str	r3, [r7, #20]
    }
  }
  if(ret != SSD1315_OK)
 8009d7c:	697b      	ldr	r3, [r7, #20]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d002      	beq.n	8009d88 <SSD1315_Init+0x188>
  {
    ret = SSD1315_ERROR;
 8009d82:	f04f 33ff 	mov.w	r3, #4294967295
 8009d86:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009d88:	697b      	ldr	r3, [r7, #20]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3718      	adds	r7, #24
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20000480 	.word	0x20000480

08009d98 <SSD1315_DeInit>:
  * @brief  De-Initialize the ssd1315 LCD Component.
  * @param  pObj Component object.
  * @retval Component status.
  */
int32_t SSD1315_DeInit(SSD1315_Object_t *pObj)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b084      	sub	sp, #16
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009da0:	2300      	movs	r3, #0
 8009da2:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized != 0U)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d00a      	beq.n	8009dc4 <SSD1315_DeInit+0x2c>
  {
    ret += SSD1315_DisplayOff(pObj);
 8009dae:	6878      	ldr	r0, [r7, #4]
 8009db0:	f000 f85e 	bl	8009e70 <SSD1315_DisplayOff>
 8009db4:	4602      	mov	r2, r0
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	4413      	add	r3, r2
 8009dba:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 0;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	f883 2020 	strb.w	r2, [r3, #32]
  }

  if(ret != SSD1315_OK)
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d002      	beq.n	8009dd0 <SSD1315_DeInit+0x38>
  {
    ret = SSD1315_ERROR;
 8009dca:	f04f 33ff 	mov.w	r3, #4294967295
 8009dce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <SSD1315_ReadID>:
  * @param  pObj Component object.
  * @param  Id Component ID.
  * @retval The component status.
  */
int32_t SSD1315_ReadID(SSD1315_Object_t *pObj, uint32_t *Id)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b083      	sub	sp, #12
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Id;
  return SSD1315_ERROR;
 8009de4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	370c      	adds	r7, #12
 8009dec:	46bd      	mov	sp, r7
 8009dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df2:	4770      	bx	lr

08009df4 <SSD1315_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOn(SSD1315_Object_t *pObj)
{
 8009df4:	b580      	push	{r7, lr}
 8009df6:	b084      	sub	sp, #16
 8009df8:	af00      	add	r7, sp, #0
 8009dfa:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  data = SSD1315_CHARGE_PUMP_SETTING;
 8009e00:	238d      	movs	r3, #141	@ 0x8d
 8009e02:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f103 0014 	add.w	r0, r3, #20
 8009e0a:	f107 020b 	add.w	r2, r7, #11
 8009e0e:	2301      	movs	r3, #1
 8009e10:	2101      	movs	r1, #1
 8009e12:	f000 fe9d 	bl	800ab50 <ssd1315_write_reg>
 8009e16:	4602      	mov	r2, r0
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	4413      	add	r3, r2
 8009e1c:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 8009e1e:	2314      	movs	r3, #20
 8009e20:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f103 0014 	add.w	r0, r3, #20
 8009e28:	f107 020b 	add.w	r2, r7, #11
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	2101      	movs	r1, #1
 8009e30:	f000 fe8e 	bl	800ab50 <ssd1315_write_reg>
 8009e34:	4602      	mov	r2, r0
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_ON;
 8009e3c:	23af      	movs	r3, #175	@ 0xaf
 8009e3e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f103 0014 	add.w	r0, r3, #20
 8009e46:	f107 020b 	add.w	r2, r7, #11
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	2101      	movs	r1, #1
 8009e4e:	f000 fe7f 	bl	800ab50 <ssd1315_write_reg>
 8009e52:	4602      	mov	r2, r0
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	4413      	add	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d002      	beq.n	8009e66 <SSD1315_DisplayOn+0x72>
  {
    ret = SSD1315_ERROR;
 8009e60:	f04f 33ff 	mov.w	r3, #4294967295
 8009e64:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009e66:	68fb      	ldr	r3, [r7, #12]
}
 8009e68:	4618      	mov	r0, r3
 8009e6a:	3710      	adds	r7, #16
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	bd80      	pop	{r7, pc}

08009e70 <SSD1315_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOff(SSD1315_Object_t *pObj)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  
  data = SSD1315_CHARGE_PUMP_SETTING;
 8009e7c:	238d      	movs	r3, #141	@ 0x8d
 8009e7e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f103 0014 	add.w	r0, r3, #20
 8009e86:	f107 020b 	add.w	r2, r7, #11
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	2101      	movs	r1, #1
 8009e8e:	f000 fe5f 	bl	800ab50 <ssd1315_write_reg>
 8009e92:	4602      	mov	r2, r0
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	4413      	add	r3, r2
 8009e98:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_1;
 8009e9a:	2310      	movs	r3, #16
 8009e9c:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f103 0014 	add.w	r0, r3, #20
 8009ea4:	f107 020b 	add.w	r2, r7, #11
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	2101      	movs	r1, #1
 8009eac:	f000 fe50 	bl	800ab50 <ssd1315_write_reg>
 8009eb0:	4602      	mov	r2, r0
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_OFF;
 8009eb8:	23ae      	movs	r3, #174	@ 0xae
 8009eba:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f103 0014 	add.w	r0, r3, #20
 8009ec2:	f107 020b 	add.w	r2, r7, #11
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	2101      	movs	r1, #1
 8009eca:	f000 fe41 	bl	800ab50 <ssd1315_write_reg>
 8009ece:	4602      	mov	r2, r0
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4413      	add	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SSD1315_DisplayOff+0x72>
  {
    ret = SSD1315_ERROR;
 8009edc:	f04f 33ff 	mov.w	r3, #4294967295
 8009ee0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <SSD1315_SetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be set.
  * @retval Component status.
  */
int32_t SSD1315_SetBrightness(SSD1315_Object_t *pObj, uint32_t Brightness)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
 8009ef4:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 8009ef6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	370c      	adds	r7, #12
 8009efe:	46bd      	mov	sp, r7
 8009f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f04:	4770      	bx	lr

08009f06 <SSD1315_GetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be returned.
  * @retval Component status.
  */
int32_t SSD1315_GetBrightness(SSD1315_Object_t *pObj, uint32_t *Brightness)
{
 8009f06:	b480      	push	{r7}
 8009f08:	b083      	sub	sp, #12
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	6078      	str	r0, [r7, #4]
 8009f0e:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 8009f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <SSD1315_SetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_SetOrientation(SSD1315_Object_t *pObj, uint32_t Orientation)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 8009f2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <SSD1315_GetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_GetOrientation(SSD1315_Object_t *pObj, uint32_t *Orientation)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b083      	sub	sp, #12
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 8009f44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <SSD1315_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status.
  */
int32_t SSD1315_SetCursor(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b085      	sub	sp, #20
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
 /* Feature not supported */
 (void)pObj;
 (void)Xpos;
 (void)Ypos;
 return SSD1315_ERROR;
 8009f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr

08009f70 <SSD1315_Refresh>:
  * @param  pObj Component object.
  * @retval The component status.
  */

int32_t SSD1315_Refresh(SSD1315_Object_t *pObj)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK; 
 8009f78:	2300      	movs	r3, #0
 8009f7a:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  data = SSD1315_DISPLAY_START_LINE_1;
 8009f7c:	2340      	movs	r3, #64	@ 0x40
 8009f7e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f103 0014 	add.w	r0, r3, #20
 8009f86:	f107 020b 	add.w	r2, r7, #11
 8009f8a:	2301      	movs	r3, #1
 8009f8c:	2101      	movs	r1, #1
 8009f8e:	f000 fddf 	bl	800ab50 <ssd1315_write_reg>
 8009f92:	4602      	mov	r2, r0
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	4413      	add	r3, r2
 8009f98:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_COLUMN_ADRESS;
 8009f9a:	2321      	movs	r3, #33	@ 0x21
 8009f9c:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f103 0014 	add.w	r0, r3, #20
 8009fa4:	f107 020b 	add.w	r2, r7, #11
 8009fa8:	2301      	movs	r3, #1
 8009faa:	2101      	movs	r1, #1
 8009fac:	f000 fdd0 	bl	800ab50 <ssd1315_write_reg>
 8009fb0:	4602      	mov	r2, r0
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	4413      	add	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	f103 0014 	add.w	r0, r3, #20
 8009fc2:	f107 020b 	add.w	r2, r7, #11
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	2101      	movs	r1, #1
 8009fca:	f000 fdc1 	bl	800ab50 <ssd1315_write_reg>
 8009fce:	4602      	mov	r2, r0
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	4413      	add	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_64;
 8009fd6:	237f      	movs	r3, #127	@ 0x7f
 8009fd8:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f103 0014 	add.w	r0, r3, #20
 8009fe0:	f107 020b 	add.w	r2, r7, #11
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	2101      	movs	r1, #1
 8009fe8:	f000 fdb2 	bl	800ab50 <ssd1315_write_reg>
 8009fec:	4602      	mov	r2, r0
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_PAGE_ADRESS;
 8009ff4:	2322      	movs	r3, #34	@ 0x22
 8009ff6:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f103 0014 	add.w	r0, r3, #20
 8009ffe:	f107 020b 	add.w	r2, r7, #11
 800a002:	2301      	movs	r3, #1
 800a004:	2101      	movs	r1, #1
 800a006:	f000 fda3 	bl	800ab50 <ssd1315_write_reg>
 800a00a:	4602      	mov	r2, r0
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800a012:	2300      	movs	r3, #0
 800a014:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f103 0014 	add.w	r0, r3, #20
 800a01c:	f107 020b 	add.w	r2, r7, #11
 800a020:	2301      	movs	r3, #1
 800a022:	2101      	movs	r1, #1
 800a024:	f000 fd94 	bl	800ab50 <ssd1315_write_reg>
 800a028:	4602      	mov	r2, r0
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	4413      	add	r3, r2
 800a02e:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS_15;
 800a030:	230f      	movs	r3, #15
 800a032:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	f103 0014 	add.w	r0, r3, #20
 800a03a:	f107 020b 	add.w	r2, r7, #11
 800a03e:	2301      	movs	r3, #1
 800a040:	2101      	movs	r1, #1
 800a042:	f000 fd85 	bl	800ab50 <ssd1315_write_reg>
 800a046:	4602      	mov	r2, r0
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4413      	add	r3, r2
 800a04c:	60fb      	str	r3, [r7, #12]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f103 0014 	add.w	r0, r3, #20
 800a054:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a058:	4a09      	ldr	r2, [pc, #36]	@ (800a080 <SSD1315_Refresh+0x110>)
 800a05a:	2101      	movs	r1, #1
 800a05c:	f000 fd78 	bl	800ab50 <ssd1315_write_reg>
 800a060:	4602      	mov	r2, r0
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	4413      	add	r3, r2
 800a066:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d002      	beq.n	800a074 <SSD1315_Refresh+0x104>
  {
    ret = SSD1315_ERROR;
 800a06e:	f04f 33ff 	mov.w	r3, #4294967295
 800a072:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a074:	68fb      	ldr	r3, [r7, #12]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000480 	.word	0x20000480

0800a084 <SSD1315_DrawBitmap>:
  * @param  pBmp Bmp picture address.
  * @retval The component status.
  */

int32_t SSD1315_DrawBitmap(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b08e      	sub	sp, #56	@ 0x38
 800a088:	af00      	add	r7, sp, #0
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	607a      	str	r2, [r7, #4]
 800a090:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index = 0, size = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a09a:	2300      	movs	r3, #0
 800a09c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	623b      	str	r3, [r7, #32]
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0, y  = 0, y0 = 0;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	61bb      	str	r3, [r7, #24]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	613b      	str	r3, [r7, #16]
  uint32_t XposBMP = 0, YposBMP  = 0;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap size */
  size = pBmp[2] + (pBmp[3] << 8) + (pBmp[4] << 16)  + (pBmp[5] << 24);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	3302      	adds	r3, #2
 800a0be:	781b      	ldrb	r3, [r3, #0]
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	3303      	adds	r3, #3
 800a0c6:	781b      	ldrb	r3, [r3, #0]
 800a0c8:	021b      	lsls	r3, r3, #8
 800a0ca:	441a      	add	r2, r3
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	3304      	adds	r3, #4
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	041b      	lsls	r3, r3, #16
 800a0d4:	441a      	add	r2, r3
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	3305      	adds	r3, #5
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	061b      	lsls	r3, r3, #24
 800a0de:	4413      	add	r3, r2
 800a0e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	330a      	adds	r3, #10
 800a0e6:	781b      	ldrb	r3, [r3, #0]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	330b      	adds	r3, #11
 800a0ee:	781b      	ldrb	r3, [r3, #0]
 800a0f0:	021b      	lsls	r3, r3, #8
 800a0f2:	441a      	add	r2, r3
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	330c      	adds	r3, #12
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	041b      	lsls	r3, r3, #16
 800a0fc:	441a      	add	r2, r3
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	330d      	adds	r3, #13
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	061b      	lsls	r3, r3, #24
 800a106:	4413      	add	r3, r2
 800a108:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	3312      	adds	r3, #18
 800a10e:	781b      	ldrb	r3, [r3, #0]
 800a110:	461a      	mov	r2, r3
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	3313      	adds	r3, #19
 800a116:	781b      	ldrb	r3, [r3, #0]
 800a118:	021b      	lsls	r3, r3, #8
 800a11a:	441a      	add	r2, r3
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	3314      	adds	r3, #20
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	041b      	lsls	r3, r3, #16
 800a124:	441a      	add	r2, r3
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	3315      	adds	r3, #21
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	061b      	lsls	r3, r3, #24
 800a12e:	4413      	add	r3, r2
 800a130:	61fb      	str	r3, [r7, #28]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	3316      	adds	r3, #22
 800a136:	781b      	ldrb	r3, [r3, #0]
 800a138:	461a      	mov	r2, r3
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	3317      	adds	r3, #23
 800a13e:	781b      	ldrb	r3, [r3, #0]
 800a140:	021b      	lsls	r3, r3, #8
 800a142:	441a      	add	r2, r3
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	3318      	adds	r3, #24
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	041b      	lsls	r3, r3, #16
 800a14c:	441a      	add	r2, r3
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	3319      	adds	r3, #25
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	061b      	lsls	r3, r3, #24
 800a156:	4413      	add	r3, r2
 800a158:	623b      	str	r3, [r7, #32]

  /* Size conversion */
  size = (size - index)/2;
 800a15a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15e:	1ad3      	subs	r3, r2, r3
 800a160:	085b      	lsrs	r3, r3, #1
 800a162:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Apply offset to bypass header */
  pBmp += index;
 800a164:	683a      	ldr	r2, [r7, #0]
 800a166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a168:	4413      	add	r3, r2
 800a16a:	603b      	str	r3, [r7, #0]

  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d116      	bne.n	800a1a0 <SSD1315_DrawBitmap+0x11c>
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	bf0c      	ite	eq
 800a178:	2301      	moveq	r3, #1
 800a17a:	2300      	movne	r3, #0
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a184:	bf0c      	ite	eq
 800a186:	2301      	moveq	r3, #1
 800a188:	2300      	movne	r3, #0
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	4013      	ands	r3, r2
 800a18e:	b2db      	uxtb	r3, r3
 800a190:	2b00      	cmp	r3, #0
 800a192:	d005      	beq.n	800a1a0 <SSD1315_DrawBitmap+0x11c>
  {
    memcpy(PhysFrameBuffer, pBmp, size);
 800a194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a196:	6839      	ldr	r1, [r7, #0]
 800a198:	4843      	ldr	r0, [pc, #268]	@ (800a2a8 <SSD1315_DrawBitmap+0x224>)
 800a19a:	f00c ff7e 	bl	801709a <memcpy>
 800a19e:	e078      	b.n	800a292 <SSD1315_DrawBitmap+0x20e>
  }
  else
  {
    x=Xpos+width;
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	61bb      	str	r3, [r7, #24]
    y=Ypos+height;
 800a1a8:	687a      	ldr	r2, [r7, #4]
 800a1aa:	6a3b      	ldr	r3, [r7, #32]
 800a1ac:	4413      	add	r3, r2
 800a1ae:	617b      	str	r3, [r7, #20]
    y0 = Ypos;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	613b      	str	r3, [r7, #16]

    for(; Xpos < x; Xpos++, XposBMP++)
 800a1b4:	e069      	b.n	800a28a <SSD1315_DrawBitmap+0x206>
    {
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 800a1b6:	693b      	ldr	r3, [r7, #16]
 800a1b8:	607b      	str	r3, [r7, #4]
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a1be:	e05a      	b.n	800a276 <SSD1315_DrawBitmap+0x1f2>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	f003 0307 	and.w	r3, r3, #7
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d121      	bne.n	800a20e <SSD1315_DrawBitmap+0x18a>
 800a1ca:	697a      	ldr	r2, [r7, #20]
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	2b07      	cmp	r3, #7
 800a1d2:	d91c      	bls.n	800a20e <SSD1315_DrawBitmap+0x18a>
 800a1d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d117      	bne.n	800a20e <SSD1315_DrawBitmap+0x18a>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pBmp[XposBMP+((YposBMP/8)*width)];
 800a1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a1e0:	08db      	lsrs	r3, r3, #3
 800a1e2:	69fa      	ldr	r2, [r7, #28]
 800a1e4:	fb03 f202 	mul.w	r2, r3, r2
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ea:	4413      	add	r3, r2
 800a1ec:	683a      	ldr	r2, [r7, #0]
 800a1ee:	441a      	add	r2, r3
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	08db      	lsrs	r3, r3, #3
 800a1f4:	01d9      	lsls	r1, r3, #7
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	440b      	add	r3, r1
 800a1fa:	7811      	ldrb	r1, [r2, #0]
 800a1fc:	4a2a      	ldr	r2, [pc, #168]	@ (800a2a8 <SSD1315_DrawBitmap+0x224>)
 800a1fe:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	3307      	adds	r3, #7
 800a204:	607b      	str	r3, [r7, #4]
          YposBMP+=7;
 800a206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a208:	3307      	adds	r3, #7
 800a20a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a20c:	e02d      	b.n	800a26a <SSD1315_DrawBitmap+0x1e6>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pBmp[XposBMP+((YposBMP/8)*width)]&(1<<(YposBMP%8))) != 0)
 800a20e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a210:	08db      	lsrs	r3, r3, #3
 800a212:	69fa      	ldr	r2, [r7, #28]
 800a214:	fb03 f202 	mul.w	r2, r3, r2
 800a218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a21a:	4413      	add	r3, r2
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	4413      	add	r3, r2
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	461a      	mov	r2, r3
 800a224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	fa42 f303 	asr.w	r3, r2, r3
 800a22e:	f003 0301 	and.w	r3, r3, #1
 800a232:	2b00      	cmp	r3, #0
 800a234:	d00c      	beq.n	800a250 <SSD1315_DrawBitmap+0x1cc>
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 800a236:	23ff      	movs	r3, #255	@ 0xff
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	68b9      	ldr	r1, [r7, #8]
 800a23c:	68f8      	ldr	r0, [r7, #12]
 800a23e:	f000 fa3d 	bl	800a6bc <SSD1315_SetPixel>
 800a242:	4603      	mov	r3, r0
 800a244:	2b00      	cmp	r3, #0
 800a246:	d010      	beq.n	800a26a <SSD1315_DrawBitmap+0x1e6>
              {
                ret = SSD1315_ERROR;
 800a248:	f04f 33ff 	mov.w	r3, #4294967295
 800a24c:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 800a24e:	e016      	b.n	800a27e <SSD1315_DrawBitmap+0x1fa>
              }
            }
            else
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 800a250:	2300      	movs	r3, #0
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	68b9      	ldr	r1, [r7, #8]
 800a256:	68f8      	ldr	r0, [r7, #12]
 800a258:	f000 fa30 	bl	800a6bc <SSD1315_SetPixel>
 800a25c:	4603      	mov	r3, r0
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d003      	beq.n	800a26a <SSD1315_DrawBitmap+0x1e6>
                {
                  ret = SSD1315_ERROR;
 800a262:	f04f 33ff 	mov.w	r3, #4294967295
 800a266:	637b      	str	r3, [r7, #52]	@ 0x34
                  break;
 800a268:	e009      	b.n	800a27e <SSD1315_DrawBitmap+0x1fa>
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	3301      	adds	r3, #1
 800a26e:	607b      	str	r3, [r7, #4]
 800a270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a272:	3301      	adds	r3, #1
 800a274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a276:	687a      	ldr	r2, [r7, #4]
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d3a0      	bcc.n	800a1c0 <SSD1315_DrawBitmap+0x13c>
    for(; Xpos < x; Xpos++, XposBMP++)
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	3301      	adds	r3, #1
 800a282:	60bb      	str	r3, [r7, #8]
 800a284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a286:	3301      	adds	r3, #1
 800a288:	633b      	str	r3, [r7, #48]	@ 0x30
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d391      	bcc.n	800a1b6 <SSD1315_DrawBitmap+0x132>
            }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 800a292:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a294:	2b00      	cmp	r3, #0
 800a296:	d002      	beq.n	800a29e <SSD1315_DrawBitmap+0x21a>
   {
     ret = SSD1315_ERROR;
 800a298:	f04f 33ff 	mov.w	r3, #4294967295
 800a29c:	637b      	str	r3, [r7, #52]	@ 0x34
   }
  return ret;
 800a29e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	3738      	adds	r7, #56	@ 0x38
 800a2a4:	46bd      	mov	sp, r7
 800a2a6:	bd80      	pop	{r7, pc}
 800a2a8:	20000480 	.word	0x20000480

0800a2ac <SSD1315_ShiftBitmap>:
  * @param  Yshift specifies number of pixel to shift on Y position.
  * @param  pbmp Bmp picture address in the internal Flash.
  * @retval The component status.
  */
int32_t SSD1315_ShiftBitmap(SSD1315_Object_t *pObj,uint16_t Xpos, uint16_t Ypos, int16_t Xshift, int16_t Yshift, uint8_t *pbmp)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b090      	sub	sp, #64	@ 0x40
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	60f8      	str	r0, [r7, #12]
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	4611      	mov	r1, r2
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	817b      	strh	r3, [r7, #10]
 800a2be:	460b      	mov	r3, r1
 800a2c0:	813b      	strh	r3, [r7, #8]
 800a2c2:	4613      	mov	r3, r2
 800a2c4:	80fb      	strh	r3, [r7, #6]
  int32_t  ret = SSD1315_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t index = 0, size = 0;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0, original_width  = 0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2da:	2300      	movs	r3, #0
 800a2dc:	623b      	str	r3, [r7, #32]
  uint32_t x = 0, y  = 0, y0 = 0;
 800a2de:	2300      	movs	r3, #0
 800a2e0:	61fb      	str	r3, [r7, #28]
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	61bb      	str	r3, [r7, #24]
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	617b      	str	r3, [r7, #20]
  uint32_t XposBMP = 0, YposBMP  = 0, original_YposBMP = 0;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	613b      	str	r3, [r7, #16]
  
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800a2f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a2f8:	3302      	adds	r3, #2
 800a2fa:	881b      	ldrh	r3, [r3, #0]
 800a2fc:	b29b      	uxth	r3, r3
 800a2fe:	627b      	str	r3, [r7, #36]	@ 0x24
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800a300:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a302:	3304      	adds	r3, #4
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	b29b      	uxth	r3, r3
 800a308:	041b      	lsls	r3, r3, #16
 800a30a:	461a      	mov	r2, r3
 800a30c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a30e:	4313      	orrs	r3, r2
 800a310:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800a312:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a314:	330a      	adds	r3, #10
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	62bb      	str	r3, [r7, #40]	@ 0x28
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800a31c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a31e:	330c      	adds	r3, #12
 800a320:	881b      	ldrh	r3, [r3, #0]
 800a322:	b29b      	uxth	r3, r3
 800a324:	041b      	lsls	r3, r3, #16
 800a326:	461a      	mov	r2, r3
 800a328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32a:	4313      	orrs	r3, r2
 800a32c:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 800a32e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a330:	3312      	adds	r3, #18
 800a332:	881b      	ldrh	r3, [r3, #0]
 800a334:	637b      	str	r3, [r7, #52]	@ 0x34
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 800a336:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a338:	3314      	adds	r3, #20
 800a33a:	881b      	ldrh	r3, [r3, #0]
 800a33c:	041b      	lsls	r3, r3, #16
 800a33e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a340:	4313      	orrs	r3, r2
 800a342:	637b      	str	r3, [r7, #52]	@ 0x34
  original_width = width;
 800a344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a346:	623b      	str	r3, [r7, #32]
  if( Xshift>=0)
 800a348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	db09      	blt.n	800a364 <SSD1315_ShiftBitmap+0xb8>
  {
    Xpos = Xpos + Xshift;
 800a350:	88fa      	ldrh	r2, [r7, #6]
 800a352:	897b      	ldrh	r3, [r7, #10]
 800a354:	4413      	add	r3, r2
 800a356:	817b      	strh	r3, [r7, #10]
    width = width - Xshift;
 800a358:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a35c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a35e:	1ad3      	subs	r3, r2, r3
 800a360:	637b      	str	r3, [r7, #52]	@ 0x34
 800a362:	e008      	b.n	800a376 <SSD1315_ShiftBitmap+0xca>
  }
  else
  {
    width = width + Xshift;
 800a364:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a368:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a36a:	4413      	add	r3, r2
 800a36c:	637b      	str	r3, [r7, #52]	@ 0x34
    XposBMP = -Xshift;
 800a36e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a372:	425b      	negs	r3, r3
 800a374:	633b      	str	r3, [r7, #48]	@ 0x30
  }
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 800a376:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a378:	3316      	adds	r3, #22
 800a37a:	881b      	ldrh	r3, [r3, #0]
 800a37c:	63bb      	str	r3, [r7, #56]	@ 0x38
  height |= (*(uint16_t *) (pbmp + 24)) << 16;
 800a37e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a380:	3318      	adds	r3, #24
 800a382:	881b      	ldrh	r3, [r3, #0]
 800a384:	041b      	lsls	r3, r3, #16
 800a386:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a388:	4313      	orrs	r3, r2
 800a38a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if( Yshift>=0)
 800a38c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a390:	2b00      	cmp	r3, #0
 800a392:	db0a      	blt.n	800a3aa <SSD1315_ShiftBitmap+0xfe>
  {
    height = height - Yshift;
 800a394:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a39a:	1ad3      	subs	r3, r2, r3
 800a39c:	63bb      	str	r3, [r7, #56]	@ 0x38
    Ypos = Ypos + Yshift;
 800a39e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800a3a2:	893b      	ldrh	r3, [r7, #8]
 800a3a4:	4413      	add	r3, r2
 800a3a6:	813b      	strh	r3, [r7, #8]
 800a3a8:	e008      	b.n	800a3bc <SSD1315_ShiftBitmap+0x110>
  }
  else
  {
    height = height + Yshift;
 800a3aa:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a3ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3b0:	4413      	add	r3, r2
 800a3b2:	63bb      	str	r3, [r7, #56]	@ 0x38
    YposBMP = -Yshift;
 800a3b4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a3b8:	425b      	negs	r3, r3
 800a3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  original_YposBMP = YposBMP;
 800a3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3be:	613b      	str	r3, [r7, #16]
  
  /* Size conversion */
  size = (size - index)/2;
 800a3c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	085b      	lsrs	r3, r3, #1
 800a3c8:	627b      	str	r3, [r7, #36]	@ 0x24
  size = size - ((Xshift*height/8)+(Yshift*width/8 ));
 800a3ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a3ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3d0:	fb02 f303 	mul.w	r3, r2, r3
 800a3d4:	08da      	lsrs	r2, r3, #3
 800a3d6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a3da:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a3dc:	fb01 f303 	mul.w	r3, r1, r3
 800a3e0:	08db      	lsrs	r3, r3, #3
 800a3e2:	4413      	add	r3, r2
 800a3e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3e6:	1ad3      	subs	r3, r2, r3
 800a3e8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Apply offset to bypass header */
  pbmp += index;
 800a3ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a3ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3ee:	4413      	add	r3, r2
 800a3f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  
  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 800a3f2:	897b      	ldrh	r3, [r7, #10]
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d116      	bne.n	800a426 <SSD1315_ShiftBitmap+0x17a>
 800a3f8:	897b      	ldrh	r3, [r7, #10]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	bf0c      	ite	eq
 800a3fe:	2301      	moveq	r3, #1
 800a400:	2300      	movne	r3, #0
 800a402:	b2da      	uxtb	r2, r3
 800a404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a406:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a40a:	bf0c      	ite	eq
 800a40c:	2301      	moveq	r3, #1
 800a40e:	2300      	movne	r3, #0
 800a410:	b2db      	uxtb	r3, r3
 800a412:	4013      	ands	r3, r2
 800a414:	b2db      	uxtb	r3, r3
 800a416:	2b00      	cmp	r3, #0
 800a418:	d005      	beq.n	800a426 <SSD1315_ShiftBitmap+0x17a>
  {
    memcpy(PhysFrameBuffer, pbmp, size);
 800a41a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a41c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a41e:	4845      	ldr	r0, [pc, #276]	@ (800a534 <SSD1315_ShiftBitmap+0x288>)
 800a420:	f00c fe3b 	bl	801709a <memcpy>
 800a424:	e07a      	b.n	800a51c <SSD1315_ShiftBitmap+0x270>
  }
  else
  {
    x=Xpos+width;
 800a426:	897b      	ldrh	r3, [r7, #10]
 800a428:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a42a:	4413      	add	r3, r2
 800a42c:	61fb      	str	r3, [r7, #28]
    y=Ypos+height;
 800a42e:	893b      	ldrh	r3, [r7, #8]
 800a430:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a432:	4413      	add	r3, r2
 800a434:	61bb      	str	r3, [r7, #24]
    y0 = Ypos;
 800a436:	893b      	ldrh	r3, [r7, #8]
 800a438:	617b      	str	r3, [r7, #20]
    
    for(; Xpos < x; Xpos++, XposBMP++)
 800a43a:	e06b      	b.n	800a514 <SSD1315_ShiftBitmap+0x268>
    {
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	813b      	strh	r3, [r7, #8]
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a444:	e05c      	b.n	800a500 <SSD1315_ShiftBitmap+0x254>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 800a446:	893b      	ldrh	r3, [r7, #8]
 800a448:	f003 0307 	and.w	r3, r3, #7
 800a44c:	b29b      	uxth	r3, r3
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d122      	bne.n	800a498 <SSD1315_ShiftBitmap+0x1ec>
 800a452:	893b      	ldrh	r3, [r7, #8]
 800a454:	69ba      	ldr	r2, [r7, #24]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	2b07      	cmp	r3, #7
 800a45a:	d91d      	bls.n	800a498 <SSD1315_ShiftBitmap+0x1ec>
 800a45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a45e:	f003 0307 	and.w	r3, r3, #7
 800a462:	2b00      	cmp	r3, #0
 800a464:	d118      	bne.n	800a498 <SSD1315_ShiftBitmap+0x1ec>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pbmp[XposBMP+((YposBMP/8)*original_width)];
 800a466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a468:	08db      	lsrs	r3, r3, #3
 800a46a:	6a3a      	ldr	r2, [r7, #32]
 800a46c:	fb03 f202 	mul.w	r2, r3, r2
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	4413      	add	r3, r2
 800a474:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a476:	441a      	add	r2, r3
 800a478:	8979      	ldrh	r1, [r7, #10]
 800a47a:	893b      	ldrh	r3, [r7, #8]
 800a47c:	08db      	lsrs	r3, r3, #3
 800a47e:	b29b      	uxth	r3, r3
 800a480:	01db      	lsls	r3, r3, #7
 800a482:	440b      	add	r3, r1
 800a484:	7811      	ldrb	r1, [r2, #0]
 800a486:	4a2b      	ldr	r2, [pc, #172]	@ (800a534 <SSD1315_ShiftBitmap+0x288>)
 800a488:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 800a48a:	893b      	ldrh	r3, [r7, #8]
 800a48c:	3307      	adds	r3, #7
 800a48e:	813b      	strh	r3, [r7, #8]
          YposBMP+=7;
 800a490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a492:	3307      	adds	r3, #7
 800a494:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a496:	e02d      	b.n	800a4f4 <SSD1315_ShiftBitmap+0x248>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pbmp[XposBMP+((YposBMP/8)*original_width)]&(1<<(YposBMP%8))) != 0)
 800a498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a49a:	08db      	lsrs	r3, r3, #3
 800a49c:	6a3a      	ldr	r2, [r7, #32]
 800a49e:	fb03 f202 	mul.w	r2, r3, r2
 800a4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a4:	4413      	add	r3, r2
 800a4a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4a8:	4413      	add	r3, r2
 800a4aa:	781b      	ldrb	r3, [r3, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4b0:	f003 0307 	and.w	r3, r3, #7
 800a4b4:	fa42 f303 	asr.w	r3, r2, r3
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00c      	beq.n	800a4da <SSD1315_ShiftBitmap+0x22e>
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 800a4c0:	8979      	ldrh	r1, [r7, #10]
 800a4c2:	893a      	ldrh	r2, [r7, #8]
 800a4c4:	23ff      	movs	r3, #255	@ 0xff
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f000 f8f8 	bl	800a6bc <SSD1315_SetPixel>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d010      	beq.n	800a4f4 <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 800a4d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 800a4d8:	e016      	b.n	800a508 <SSD1315_ShiftBitmap+0x25c>
            }
          }
          else
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 800a4da:	8979      	ldrh	r1, [r7, #10]
 800a4dc:	893a      	ldrh	r2, [r7, #8]
 800a4de:	2300      	movs	r3, #0
 800a4e0:	68f8      	ldr	r0, [r7, #12]
 800a4e2:	f000 f8eb 	bl	800a6bc <SSD1315_SetPixel>
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d003      	beq.n	800a4f4 <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 800a4ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 800a4f2:	e009      	b.n	800a508 <SSD1315_ShiftBitmap+0x25c>
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 800a4f4:	893b      	ldrh	r3, [r7, #8]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	813b      	strh	r3, [r7, #8]
 800a4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a500:	893b      	ldrh	r3, [r7, #8]
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	429a      	cmp	r2, r3
 800a506:	d89e      	bhi.n	800a446 <SSD1315_ShiftBitmap+0x19a>
    for(; Xpos < x; Xpos++, XposBMP++)
 800a508:	897b      	ldrh	r3, [r7, #10]
 800a50a:	3301      	adds	r3, #1
 800a50c:	817b      	strh	r3, [r7, #10]
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	3301      	adds	r3, #1
 800a512:	633b      	str	r3, [r7, #48]	@ 0x30
 800a514:	897b      	ldrh	r3, [r7, #10]
 800a516:	69fa      	ldr	r2, [r7, #28]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d88f      	bhi.n	800a43c <SSD1315_ShiftBitmap+0x190>
          }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 800a51c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d002      	beq.n	800a528 <SSD1315_ShiftBitmap+0x27c>
  {
    ret = SSD1315_ERROR;
 800a522:	f04f 33ff 	mov.w	r3, #4294967295
 800a526:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  return ret;
 800a528:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3740      	adds	r7, #64	@ 0x40
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20000480 	.word	0x20000480

0800a538 <SSD1315_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle height.
  * @retval The component status.
  */
int32_t SSD1315_FillRGBRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b088      	sub	sp, #32
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	60f8      	str	r0, [r7, #12]
 800a540:	60b9      	str	r1, [r7, #8]
 800a542:	607a      	str	r2, [r7, #4]
 800a544:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a546:	2300      	movs	r3, #0
 800a548:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800a54a:	2300      	movs	r3, #0
 800a54c:	61bb      	str	r3, [r7, #24]
 800a54e:	e032      	b.n	800a5b6 <SSD1315_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 800a550:	2300      	movs	r3, #0
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	e028      	b.n	800a5a8 <SSD1315_FillRGBRect+0x70>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	3301      	adds	r3, #1
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	021b      	lsls	r3, r3, #8
 800a564:	431a      	orrs	r2, r3
 800a566:	683b      	ldr	r3, [r7, #0]
 800a568:	3302      	adds	r3, #2
 800a56a:	781b      	ldrb	r3, [r3, #0]
 800a56c:	041b      	lsls	r3, r3, #16
 800a56e:	431a      	orrs	r2, r3
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	3303      	adds	r3, #3
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	061b      	lsls	r3, r3, #24
 800a578:	4313      	orrs	r3, r2
 800a57a:	613b      	str	r3, [r7, #16]
      if(SSD1315_SetPixel (pObj, Xpos + j, Ypos + i, color)!= SSD1315_OK)
 800a57c:	68ba      	ldr	r2, [r7, #8]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	18d1      	adds	r1, r2, r3
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	441a      	add	r2, r3
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f896 	bl	800a6bc <SSD1315_SetPixel>
 800a590:	4603      	mov	r3, r0
 800a592:	2b00      	cmp	r3, #0
 800a594:	d002      	beq.n	800a59c <SSD1315_FillRGBRect+0x64>
      {
        ret = SSD1315_ERROR;
 800a596:	f04f 33ff 	mov.w	r3, #4294967295
 800a59a:	61fb      	str	r3, [r7, #28]
      }
      pData += 4;
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	3304      	adds	r3, #4
 800a5a0:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	617b      	str	r3, [r7, #20]
 800a5a8:	697a      	ldr	r2, [r7, #20]
 800a5aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ac:	429a      	cmp	r2, r3
 800a5ae:	d3d2      	bcc.n	800a556 <SSD1315_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 800a5b0:	69bb      	ldr	r3, [r7, #24]
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	61bb      	str	r3, [r7, #24]
 800a5b6:	69ba      	ldr	r2, [r7, #24]
 800a5b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	d3c8      	bcc.n	800a550 <SSD1315_FillRGBRect+0x18>
    }
  }

  return ret;
 800a5be:	69fb      	ldr	r3, [r7, #28]
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3720      	adds	r7, #32
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}

0800a5c8 <SSD1315_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawHLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	b086      	sub	sp, #24
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	60f8      	str	r0, [r7, #12]
 800a5d0:	60b9      	str	r1, [r7, #8]
 800a5d2:	607a      	str	r2, [r7, #4]
 800a5d4:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	613b      	str	r3, [r7, #16]

  /* Sent a complete horizontal line */
  for (i = Xpos; i < (Xpos+Length); i++)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	613b      	str	r3, [r7, #16]
 800a5e2:	e008      	b.n	800a5f6 <SSD1315_DrawHLine+0x2e>
  {
    SSD1315_SetPixel(pObj,i, Ypos, Color);
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	687a      	ldr	r2, [r7, #4]
 800a5e8:	6939      	ldr	r1, [r7, #16]
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 f866 	bl	800a6bc <SSD1315_SetPixel>
  for (i = Xpos; i < (Xpos+Length); i++)
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	3301      	adds	r3, #1
 800a5f4:	613b      	str	r3, [r7, #16]
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	693a      	ldr	r2, [r7, #16]
 800a5fe:	429a      	cmp	r2, r3
 800a600:	d3f0      	bcc.n	800a5e4 <SSD1315_DrawHLine+0x1c>
  }
  if(ret != SSD1315_OK)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d002      	beq.n	800a60e <SSD1315_DrawHLine+0x46>
  {
    ret = SSD1315_ERROR;
 800a608:	f04f 33ff 	mov.w	r3, #4294967295
 800a60c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a60e:	697b      	ldr	r3, [r7, #20]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3718      	adds	r7, #24
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}

0800a618 <SSD1315_DrawVLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawVLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	60f8      	str	r0, [r7, #12]
 800a620:	60b9      	str	r1, [r7, #8]
 800a622:	607a      	str	r2, [r7, #4]
 800a624:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a626:	2300      	movs	r3, #0
 800a628:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	613b      	str	r3, [r7, #16]
  
  for (i = Ypos; i < (Ypos+Length); i++)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	613b      	str	r3, [r7, #16]
 800a632:	e008      	b.n	800a646 <SSD1315_DrawVLine+0x2e>
  {
    SSD1315_SetPixel(pObj,Xpos, i, Color);
 800a634:	6a3b      	ldr	r3, [r7, #32]
 800a636:	693a      	ldr	r2, [r7, #16]
 800a638:	68b9      	ldr	r1, [r7, #8]
 800a63a:	68f8      	ldr	r0, [r7, #12]
 800a63c:	f000 f83e 	bl	800a6bc <SSD1315_SetPixel>
  for (i = Ypos; i < (Ypos+Length); i++)
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	3301      	adds	r3, #1
 800a644:	613b      	str	r3, [r7, #16]
 800a646:	687a      	ldr	r2, [r7, #4]
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	4413      	add	r3, r2
 800a64c:	693a      	ldr	r2, [r7, #16]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d3f0      	bcc.n	800a634 <SSD1315_DrawVLine+0x1c>
  }
  if(ret != SSD1315_OK)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d002      	beq.n	800a65e <SSD1315_DrawVLine+0x46>
  {
    ret = SSD1315_ERROR;
 800a658:	f04f 33ff 	mov.w	r3, #4294967295
 800a65c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a65e:	697b      	ldr	r3, [r7, #20]
}
 800a660:	4618      	mov	r0, r3
 800a662:	3718      	adds	r7, #24
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <SSD1315_FillRect>:
  * @param  Height Rectangle height.
  * @param  Color Draw color.
  * @retval Component status.
  */
int32_t SSD1315_FillRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b088      	sub	sp, #32
 800a66c:	af02      	add	r7, sp, #8
 800a66e:	60f8      	str	r0, [r7, #12]
 800a670:	60b9      	str	r1, [r7, #8]
 800a672:	607a      	str	r2, [r7, #4]
 800a674:	603b      	str	r3, [r7, #0]
  int32_t ret = SSD1315_OK;
 800a676:	2300      	movs	r3, #0
 800a678:	617b      	str	r3, [r7, #20]
  uint32_t i;

  for(i = 0U; i < Height; i++)
 800a67a:	2300      	movs	r3, #0
 800a67c:	613b      	str	r3, [r7, #16]
 800a67e:	e013      	b.n	800a6a8 <SSD1315_FillRect+0x40>
  {
    if (SSD1315_DrawHLine(pObj, Xpos, (i + Ypos), Width, Color) != SSD1315_OK)
 800a680:	693a      	ldr	r2, [r7, #16]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	441a      	add	r2, r3
 800a686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a688:	9300      	str	r3, [sp, #0]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	68b9      	ldr	r1, [r7, #8]
 800a68e:	68f8      	ldr	r0, [r7, #12]
 800a690:	f7ff ff9a 	bl	800a5c8 <SSD1315_DrawHLine>
 800a694:	4603      	mov	r3, r0
 800a696:	2b00      	cmp	r3, #0
 800a698:	d003      	beq.n	800a6a2 <SSD1315_FillRect+0x3a>
    {
      ret = SSD1315_ERROR;
 800a69a:	f04f 33ff 	mov.w	r3, #4294967295
 800a69e:	617b      	str	r3, [r7, #20]
      break;
 800a6a0:	e006      	b.n	800a6b0 <SSD1315_FillRect+0x48>
  for(i = 0U; i < Height; i++)
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	3301      	adds	r3, #1
 800a6a6:	613b      	str	r3, [r7, #16]
 800a6a8:	693a      	ldr	r2, [r7, #16]
 800a6aa:	6a3b      	ldr	r3, [r7, #32]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d3e7      	bcc.n	800a680 <SSD1315_FillRect+0x18>
    }
  }

  return ret;
 800a6b0:	697b      	ldr	r3, [r7, #20]
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3718      	adds	r7, #24
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd80      	pop	{r7, pc}
	...

0800a6bc <SSD1315_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color.
  * @retval The component status.
  */
int32_t SSD1315_SetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800a6bc:	b480      	push	{r7}
 800a6be:	b087      	sub	sp, #28
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	607a      	str	r2, [r7, #4]
 800a6c8:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  /* Set color */
  if (Color == SSD1315_COLOR_WHITE)
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	2bff      	cmp	r3, #255	@ 0xff
 800a6d2:	d117      	bne.n	800a704 <SSD1315_SetPixel+0x48>
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	08db      	lsrs	r3, r3, #3
 800a6d8:	01d9      	lsls	r1, r3, #7
 800a6da:	68ba      	ldr	r2, [r7, #8]
 800a6dc:	440a      	add	r2, r1
 800a6de:	491c      	ldr	r1, [pc, #112]	@ (800a750 <SSD1315_SetPixel+0x94>)
 800a6e0:	5c8a      	ldrb	r2, [r1, r2]
 800a6e2:	b251      	sxtb	r1, r2
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	f002 0207 	and.w	r2, r2, #7
 800a6ea:	2001      	movs	r0, #1
 800a6ec:	fa00 f202 	lsl.w	r2, r0, r2
 800a6f0:	b252      	sxtb	r2, r2
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	b251      	sxtb	r1, r2
 800a6f6:	01da      	lsls	r2, r3, #7
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	b2c9      	uxtb	r1, r1
 800a6fe:	4a14      	ldr	r2, [pc, #80]	@ (800a750 <SSD1315_SetPixel+0x94>)
 800a700:	54d1      	strb	r1, [r2, r3]
 800a702:	e018      	b.n	800a736 <SSD1315_SetPixel+0x7a>
  }
  else
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	08db      	lsrs	r3, r3, #3
 800a708:	01d9      	lsls	r1, r3, #7
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	440a      	add	r2, r1
 800a70e:	4910      	ldr	r1, [pc, #64]	@ (800a750 <SSD1315_SetPixel+0x94>)
 800a710:	5c8a      	ldrb	r2, [r1, r2]
 800a712:	b251      	sxtb	r1, r2
 800a714:	687a      	ldr	r2, [r7, #4]
 800a716:	f002 0207 	and.w	r2, r2, #7
 800a71a:	2001      	movs	r0, #1
 800a71c:	fa00 f202 	lsl.w	r2, r0, r2
 800a720:	b252      	sxtb	r2, r2
 800a722:	43d2      	mvns	r2, r2
 800a724:	b252      	sxtb	r2, r2
 800a726:	400a      	ands	r2, r1
 800a728:	b251      	sxtb	r1, r2
 800a72a:	01da      	lsls	r2, r3, #7
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	4413      	add	r3, r2
 800a730:	b2c9      	uxtb	r1, r1
 800a732:	4a07      	ldr	r2, [pc, #28]	@ (800a750 <SSD1315_SetPixel+0x94>)
 800a734:	54d1      	strb	r1, [r2, r3]
  }
  if(ret != SSD1315_OK)
 800a736:	697b      	ldr	r3, [r7, #20]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d002      	beq.n	800a742 <SSD1315_SetPixel+0x86>
  {
    ret = SSD1315_ERROR;
 800a73c:	f04f 33ff 	mov.w	r3, #4294967295
 800a740:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a742:	697b      	ldr	r3, [r7, #20]
}
 800a744:	4618      	mov	r0, r3
 800a746:	371c      	adds	r7, #28
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	20000480 	.word	0x20000480

0800a754 <SSD1315_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the LCD pixel color.
  * @retval The component status.
  */
int32_t SSD1315_GetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800a754:	b480      	push	{r7}
 800a756:	b087      	sub	sp, #28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	60f8      	str	r0, [r7, #12]
 800a75c:	60b9      	str	r1, [r7, #8]
 800a75e:	607a      	str	r2, [r7, #4]
 800a760:	603b      	str	r3, [r7, #0]
   int32_t  ret = SSD1315_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  if ((Xpos >= SSD1315_LCD_PIXEL_WIDTH) || (Ypos >= SSD1315_LCD_PIXEL_HEIGHT)) 
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b7f      	cmp	r3, #127	@ 0x7f
 800a76a:	d802      	bhi.n	800a772 <SSD1315_GetPixel+0x1e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a770:	d903      	bls.n	800a77a <SSD1315_GetPixel+0x26>
  {
    *Color = 0;
 800a772:	683b      	ldr	r3, [r7, #0]
 800a774:	2200      	movs	r2, #0
 800a776:	601a      	str	r2, [r3, #0]
 800a778:	e01c      	b.n	800a7b4 <SSD1315_GetPixel+0x60>
  }
  else
  {
    *Color = PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] & (1 << Ypos%8);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	08db      	lsrs	r3, r3, #3
 800a77e:	01da      	lsls	r2, r3, #7
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4413      	add	r3, r2
 800a784:	4a0f      	ldr	r2, [pc, #60]	@ (800a7c4 <SSD1315_GetPixel+0x70>)
 800a786:	5cd3      	ldrb	r3, [r2, r3]
 800a788:	4619      	mov	r1, r3
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	2201      	movs	r2, #1
 800a792:	fa02 f303 	lsl.w	r3, r2, r3
 800a796:	400b      	ands	r3, r1
 800a798:	461a      	mov	r2, r3
 800a79a:	683b      	ldr	r3, [r7, #0]
 800a79c:	601a      	str	r2, [r3, #0]
    if (*Color != 0)
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <SSD1315_GetPixel+0x5a>
    {
      *Color = 1;
 800a7a6:	683b      	ldr	r3, [r7, #0]
 800a7a8:	2201      	movs	r2, #1
 800a7aa:	601a      	str	r2, [r3, #0]
 800a7ac:	e002      	b.n	800a7b4 <SSD1315_GetPixel+0x60>
    }
    else
    {
      *Color = 0;
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	2200      	movs	r2, #0
 800a7b2:	601a      	str	r2, [r3, #0]
    }
  }
  
  return ret;
 800a7b4:	697b      	ldr	r3, [r7, #20]
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	371c      	adds	r7, #28
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	20000480 	.word	0x20000480

0800a7c8 <SSD1315_GetXSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Width.
  * @retval The component status.
  */
int32_t SSD1315_GetXSize(SSD1315_Object_t *pObj, uint32_t *XSize)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b085      	sub	sp, #20
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d103      	bne.n	800a7e6 <SSD1315_GetXSize+0x1e>
  {
    *XSize = 128;
 800a7de:	683b      	ldr	r3, [r7, #0]
 800a7e0:	2280      	movs	r2, #128	@ 0x80
 800a7e2:	601a      	str	r2, [r3, #0]
 800a7e4:	e002      	b.n	800a7ec <SSD1315_GetXSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 800a7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7ea:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr

0800a7fa <SSD1315_GetYSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Height.
  * @retval The component status.
  */
int32_t SSD1315_GetYSize(SSD1315_Object_t *pObj, uint32_t *YSize)
{
 800a7fa:	b480      	push	{r7}
 800a7fc:	b085      	sub	sp, #20
 800a7fe:	af00      	add	r7, sp, #0
 800a800:	6078      	str	r0, [r7, #4]
 800a802:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d103      	bne.n	800a818 <SSD1315_GetYSize+0x1e>
  {
    *YSize = 64;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	2240      	movs	r2, #64	@ 0x40
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	e002      	b.n	800a81e <SSD1315_GetYSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 800a818:	f04f 33ff 	mov.w	r3, #4294967295
 800a81c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a81e:	68fb      	ldr	r3, [r7, #12]
}
 800a820:	4618      	mov	r0, r3
 800a822:	3714      	adds	r7, #20
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr

0800a82c <SSD1315_SetPage>:
  * @param  pObj Component object.
  * @param  Page specifies the Page position (0-7).
  * @retval The component status.
  */
int32_t SSD1315_SetPage(SSD1315_Object_t *pObj, uint16_t Page)
{
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b084      	sub	sp, #16
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 800a838:	2300      	movs	r3, #0
 800a83a:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Set Page position  */
  data = (SSD1315_SET_PAGE_START_ADRESS | Page);
 800a83c:	887b      	ldrh	r3, [r7, #2]
 800a83e:	b2db      	uxtb	r3, r3
 800a840:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800a844:	b2db      	uxtb	r3, r3
 800a846:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f103 0014 	add.w	r0, r3, #20
 800a84e:	f107 020b 	add.w	r2, r7, #11
 800a852:	2301      	movs	r3, #1
 800a854:	2101      	movs	r1, #1
 800a856:	f000 f97b 	bl	800ab50 <ssd1315_write_reg>
 800a85a:	4602      	mov	r2, r0
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	4413      	add	r3, r2
 800a860:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d002      	beq.n	800a86e <SSD1315_SetPage+0x42>
  {
    ret = SSD1315_ERROR;
 800a868:	f04f 33ff 	mov.w	r3, #4294967295
 800a86c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a86e:	68fb      	ldr	r3, [r7, #12]
}
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <SSD1315_SetColumn>:
  * @param  pObj Component object.
  * @param  Column specifies the Column position (0-127).
  * @retval The component status.
  */
int32_t SSD1315_SetColumn(SSD1315_Object_t *pObj, uint16_t Column)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
 800a880:	460b      	mov	r3, r1
 800a882:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  /* Set Column position  */

  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800a888:	2300      	movs	r3, #0
 800a88a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f103 0014 	add.w	r0, r3, #20
 800a892:	f107 020b 	add.w	r2, r7, #11
 800a896:	2301      	movs	r3, #1
 800a898:	2101      	movs	r1, #1
 800a89a:	f000 f959 	bl	800ab50 <ssd1315_write_reg>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	60fb      	str	r3, [r7, #12]
  data = (SSD1315_LOWER_COLUMN_START_ADRESS | Column);
 800a8a6:	887b      	ldrh	r3, [r7, #2]
 800a8a8:	b2db      	uxtb	r3, r3
 800a8aa:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f103 0014 	add.w	r0, r3, #20
 800a8b2:	f107 020b 	add.w	r2, r7, #11
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	f000 f949 	bl	800ab50 <ssd1315_write_reg>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_32;
 800a8c6:	231f      	movs	r3, #31
 800a8c8:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	f103 0014 	add.w	r0, r3, #20
 800a8d0:	f107 020b 	add.w	r2, r7, #11
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	f000 f93a 	bl	800ab50 <ssd1315_write_reg>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	4413      	add	r3, r2
 800a8e2:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <SSD1315_SetColumn+0x78>
  {
    ret = SSD1315_ERROR;
 800a8ea:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ee:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}

0800a8fa <SSD1315_ScrollingSetup>:
            @arg  0..7
  * @param  Frequency SSD1315_SCROLL_FREQ_2FRAMES to SSD1315_SCROLL_FREQ_256FRAMES
  * @retval The component status.
  */
int32_t SSD1315_ScrollingSetup(SSD1315_Object_t *pObj, uint16_t ScrollMode, uint16_t StartPage, uint16_t EndPage, uint16_t Frequency)
{
 800a8fa:	b580      	push	{r7, lr}
 800a8fc:	b086      	sub	sp, #24
 800a8fe:	af00      	add	r7, sp, #0
 800a900:	60f8      	str	r0, [r7, #12]
 800a902:	4608      	mov	r0, r1
 800a904:	4611      	mov	r1, r2
 800a906:	461a      	mov	r2, r3
 800a908:	4603      	mov	r3, r0
 800a90a:	817b      	strh	r3, [r7, #10]
 800a90c:	460b      	mov	r3, r1
 800a90e:	813b      	strh	r3, [r7, #8]
 800a910:	4613      	mov	r3, r2
 800a912:	80fb      	strh	r3, [r7, #6]
  int32_t ret = SSD1315_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	617b      	str	r3, [r7, #20]
  uint8_t data;

  /* Scrolling setup sequence */
  data = ScrollMode;                                     /* Right/Left Horizontal Scroll */
 800a918:	897b      	ldrh	r3, [r7, #10]
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	f103 0014 	add.w	r0, r3, #20
 800a924:	f107 0213 	add.w	r2, r7, #19
 800a928:	2301      	movs	r3, #1
 800a92a:	2101      	movs	r1, #1
 800a92c:	f000 f910 	bl	800ab50 <ssd1315_write_reg>
 800a930:	4602      	mov	r2, r0
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	4413      	add	r3, r2
 800a936:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800a938:	2300      	movs	r3, #0
 800a93a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f103 0014 	add.w	r0, r3, #20
 800a942:	f107 0213 	add.w	r2, r7, #19
 800a946:	2301      	movs	r3, #1
 800a948:	2101      	movs	r1, #1
 800a94a:	f000 f901 	bl	800ab50 <ssd1315_write_reg>
 800a94e:	4602      	mov	r2, r0
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	4413      	add	r3, r2
 800a954:	617b      	str	r3, [r7, #20]
  data = StartPage;                                      /* start page address*/
 800a956:	893b      	ldrh	r3, [r7, #8]
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	f103 0014 	add.w	r0, r3, #20
 800a962:	f107 0213 	add.w	r2, r7, #19
 800a966:	2301      	movs	r3, #1
 800a968:	2101      	movs	r1, #1
 800a96a:	f000 f8f1 	bl	800ab50 <ssd1315_write_reg>
 800a96e:	4602      	mov	r2, r0
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	4413      	add	r3, r2
 800a974:	617b      	str	r3, [r7, #20]
  data = Frequency;                                      /* Frequency*/
 800a976:	8c3b      	ldrh	r3, [r7, #32]
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f103 0014 	add.w	r0, r3, #20
 800a982:	f107 0213 	add.w	r2, r7, #19
 800a986:	2301      	movs	r3, #1
 800a988:	2101      	movs	r1, #1
 800a98a:	f000 f8e1 	bl	800ab50 <ssd1315_write_reg>
 800a98e:	4602      	mov	r2, r0
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	4413      	add	r3, r2
 800a994:	617b      	str	r3, [r7, #20]
  data = EndPage;                                        /* End page address*/
 800a996:	88fb      	ldrh	r3, [r7, #6]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	f103 0014 	add.w	r0, r3, #20
 800a9a2:	f107 0213 	add.w	r2, r7, #19
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	f000 f8d1 	bl	800ab50 <ssd1315_write_reg>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;           
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f103 0014 	add.w	r0, r3, #20
 800a9c0:	f107 0213 	add.w	r2, r7, #19
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	f000 f8c2 	bl	800ab50 <ssd1315_write_reg>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]
  data = SSD1315_CONTRAST_CONTROL_2;
 800a9d4:	23ff      	movs	r3, #255	@ 0xff
 800a9d6:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f103 0014 	add.w	r0, r3, #20
 800a9de:	f107 0213 	add.w	r2, r7, #19
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	f000 f8b3 	bl	800ab50 <ssd1315_write_reg>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	4413      	add	r3, r2
 800a9f0:	617b      	str	r3, [r7, #20]

  if (ret != SSD1315_OK)
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <SSD1315_ScrollingSetup+0x104>
  {
    ret = SSD1315_ERROR;
 800a9f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a9fc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a9fe:	697b      	ldr	r3, [r7, #20]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3718      	adds	r7, #24
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <SSD1315_ScrollingStart>:
  * @brief  Start Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStart(SSD1315_Object_t *pObj)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b084      	sub	sp, #16
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800aa10:	2300      	movs	r3, #0
 800aa12:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Start scrolling sequence */
  data = SSD1315_ACTIVATE_SCROLL;
 800aa14:	232f      	movs	r3, #47	@ 0x2f
 800aa16:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f103 0014 	add.w	r0, r3, #20
 800aa1e:	f107 020b 	add.w	r2, r7, #11
 800aa22:	2301      	movs	r3, #1
 800aa24:	2101      	movs	r1, #1
 800aa26:	f000 f893 	bl	800ab50 <ssd1315_write_reg>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <SSD1315_ScrollingStart+0x36>
  {
    ret = SSD1315_ERROR;
 800aa38:	f04f 33ff 	mov.w	r3, #4294967295
 800aa3c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <SSD1315_ScrollingStop>:
  * @brief  Stop Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStop(SSD1315_Object_t *pObj)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b084      	sub	sp, #16
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800aa50:	2300      	movs	r3, #0
 800aa52:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Stop scrolling  sequence */
  data = SSD1315_DESACTIVATE_SCROLL;
 800aa54:	232e      	movs	r3, #46	@ 0x2e
 800aa56:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f103 0014 	add.w	r0, r3, #20
 800aa5e:	f107 020b 	add.w	r2, r7, #11
 800aa62:	2301      	movs	r3, #1
 800aa64:	2101      	movs	r1, #1
 800aa66:	f000 f873 	bl	800ab50 <ssd1315_write_reg>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	4413      	add	r3, r2
 800aa70:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <SSD1315_ScrollingStop+0x36>
  {
    ret = SSD1315_ERROR;
 800aa78:	f04f 33ff 	mov.w	r3, #4294967295
 800aa7c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
}
 800aa80:	4618      	mov	r0, r3
 800aa82:	3710      	adds	r7, #16
 800aa84:	46bd      	mov	sp, r7
 800aa86:	bd80      	pop	{r7, pc}

0800aa88 <SSD1315_ReadRegWrap>:
  * @param  pData The target register value to be red.
  * @param  Length Buffer size to be red.
  * @retval error status.
  */
static int32_t SSD1315_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b086      	sub	sp, #24
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	60f8      	str	r0, [r7, #12]
 800aa90:	607a      	str	r2, [r7, #4]
 800aa92:	461a      	mov	r2, r3
 800aa94:	460b      	mov	r3, r1
 800aa96:	817b      	strh	r3, [r7, #10]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData, Length);
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	893a      	ldrh	r2, [r7, #8]
 800aaa6:	8978      	ldrh	r0, [r7, #10]
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	4798      	blx	r3
 800aaac:	4603      	mov	r3, r0
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	3718      	adds	r7, #24
 800aab2:	46bd      	mov	sp, r7
 800aab4:	bd80      	pop	{r7, pc}

0800aab6 <SSD1315_WriteRegWrap>:
  * @param  pData The target register value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t SSD1315_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800aab6:	b580      	push	{r7, lr}
 800aab8:	b086      	sub	sp, #24
 800aaba:	af00      	add	r7, sp, #0
 800aabc:	60f8      	str	r0, [r7, #12]
 800aabe:	607a      	str	r2, [r7, #4]
 800aac0:	461a      	mov	r2, r3
 800aac2:	460b      	mov	r3, r1
 800aac4:	817b      	strh	r3, [r7, #10]
 800aac6:	4613      	mov	r3, r2
 800aac8:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	893a      	ldrh	r2, [r7, #8]
 800aad4:	8978      	ldrh	r0, [r7, #10]
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	4798      	blx	r3
 800aada:	4603      	mov	r3, r0
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3718      	adds	r7, #24
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK).
  * @retval None
  */
static void ssd1315_Clear(uint16_t ColorCode)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b082      	sub	sp, #8
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	4603      	mov	r3, r0
 800aaec:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	2bff      	cmp	r3, #255	@ 0xff
 800aaf2:	d106      	bne.n	800ab02 <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_WHITE, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800aaf4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aaf8:	21ff      	movs	r1, #255	@ 0xff
 800aafa:	4807      	ldr	r0, [pc, #28]	@ (800ab18 <ssd1315_Clear+0x34>)
 800aafc:	f00c fa32 	bl	8016f64 <memset>
  }
  else
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 800ab00:	e005      	b.n	800ab0e <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800ab02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ab06:	2100      	movs	r1, #0
 800ab08:	4803      	ldr	r0, [pc, #12]	@ (800ab18 <ssd1315_Clear+0x34>)
 800ab0a:	f00c fa2b 	bl	8016f64 <memset>
}
 800ab0e:	bf00      	nop
 800ab10:	3708      	adds	r7, #8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20000480 	.word	0x20000480

0800ab1c <SSD1315_IO_Delay>:
  * @brief  SSD1315 delay.
  * @param  Delay Delay in ms.
  * @retval Component error status.
  */
static int32_t SSD1315_IO_Delay(SSD1315_Object_t *pObj, uint32_t Delay)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
 800ab24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	691b      	ldr	r3, [r3, #16]
 800ab2a:	4798      	blx	r3
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800ab30:	bf00      	nop
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	691b      	ldr	r3, [r3, #16]
 800ab36:	4798      	blx	r3
 800ab38:	4603      	mov	r3, r0
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	1ad3      	subs	r3, r2, r3
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	429a      	cmp	r2, r3
 800ab44:	d8f5      	bhi.n	800ab32 <SSD1315_IO_Delay+0x16>
  {
  }
  return SSD1315_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3710      	adds	r7, #16
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	bd80      	pop	{r7, pc}

0800ab50 <ssd1315_write_reg>:
  * @param  uint8_t reg: register to write
  * @param  uint8_t* data: pointer to data to write in register reg
  *
*/
int32_t ssd1315_write_reg(ssd1315_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800ab50:	b590      	push	{r4, r7, lr}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	607a      	str	r2, [r7, #4]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	460b      	mov	r3, r1
 800ab5e:	817b      	strh	r3, [r7, #10]
 800ab60:	4613      	mov	r3, r2
 800ab62:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681c      	ldr	r4, [r3, #0]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6898      	ldr	r0, [r3, #8]
 800ab6c:	893b      	ldrh	r3, [r7, #8]
 800ab6e:	8979      	ldrh	r1, [r7, #10]
 800ab70:	687a      	ldr	r2, [r7, #4]
 800ab72:	47a0      	blx	r4
 800ab74:	4603      	mov	r3, r0
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3714      	adds	r7, #20
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd90      	pop	{r4, r7, pc}

0800ab7e <LL_AHB2_GRP1_EnableClock>:
{
 800ab7e:	b480      	push	{r7}
 800ab80:	b085      	sub	sp, #20
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ab86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab8c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	4313      	orrs	r3, r2
 800ab94:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ab96:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ab9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800aba2:	68fb      	ldr	r3, [r7, #12]
}
 800aba4:	bf00      	nop
 800aba6:	3714      	adds	r7, #20
 800aba8:	46bd      	mov	sp, r7
 800abaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abae:	4770      	bx	lr

0800abb0 <LL_APB2_GRP1_EnableClock>:
{
 800abb0:	b480      	push	{r7}
 800abb2:	b085      	sub	sp, #20
 800abb4:	af00      	add	r7, sp, #0
 800abb6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800abb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800abbe:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	4313      	orrs	r3, r2
 800abc6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800abc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abcc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4013      	ands	r3, r2
 800abd2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800abd4:	68fb      	ldr	r3, [r7, #12]
}
 800abd6:	bf00      	nop
 800abd8:	3714      	adds	r7, #20
 800abda:	46bd      	mov	sp, r7
 800abdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe0:	4770      	bx	lr

0800abe2 <LL_APB2_GRP1_DisableClock>:
{
 800abe2:	b480      	push	{r7}
 800abe4:	b083      	sub	sp, #12
 800abe6:	af00      	add	r7, sp, #0
 800abe8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800abea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800abee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	43db      	mvns	r3, r3
 800abf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800abf8:	4013      	ands	r3, r2
 800abfa:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800abfc:	bf00      	nop
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <BSP_PWM_LED_Init>:
/**
  * @brief  Configure PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Init(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef  gpio_config = {0};
 800ac12:	463b      	mov	r3, r7
 800ac14:	2200      	movs	r2, #0
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	605a      	str	r2, [r3, #4]
 800ac1a:	609a      	str	r2, [r3, #8]
 800ac1c:	60da      	str	r2, [r3, #12]
 800ac1e:	611a      	str	r2, [r3, #16]
  
  PWM_LED_SDI_GPIO_CLK_ENABLE();
 800ac20:	2001      	movs	r0, #1
 800ac22:	f7ff ffac 	bl	800ab7e <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SDI_GPIO_PIN;
 800ac26:	2380      	movs	r3, #128	@ 0x80
 800ac28:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 800ac2a:	2301      	movs	r3, #1
 800ac2c:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 800ac2e:	2302      	movs	r3, #2
 800ac30:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SDI_GPIO_PORT, &gpio_config);
 800ac32:	463b      	mov	r3, r7
 800ac34:	4619      	mov	r1, r3
 800ac36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ac3a:	f001 fee1 	bl	800ca00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800ac3e:	2200      	movs	r2, #0
 800ac40:	2180      	movs	r1, #128	@ 0x80
 800ac42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ac46:	f002 f929 	bl	800ce9c <HAL_GPIO_WritePin>
  
  PWM_LED_SELECT_GPIO_CLK_ENABLE();
 800ac4a:	2080      	movs	r0, #128	@ 0x80
 800ac4c:	f7ff ff97 	bl	800ab7e <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SELECT_GPIO_PIN;
 800ac50:	2302      	movs	r3, #2
 800ac52:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 800ac54:	2301      	movs	r3, #1
 800ac56:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 800ac58:	2302      	movs	r3, #2
 800ac5a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SELECT_GPIO_PORT, &gpio_config);
 800ac5c:	463b      	mov	r3, r7
 800ac5e:	4619      	mov	r1, r3
 800ac60:	4814      	ldr	r0, [pc, #80]	@ (800acb4 <BSP_PWM_LED_Init+0xac>)
 800ac62:	f001 fecd 	bl	800ca00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800ac66:	2200      	movs	r2, #0
 800ac68:	2102      	movs	r1, #2
 800ac6a:	4812      	ldr	r0, [pc, #72]	@ (800acb4 <BSP_PWM_LED_Init+0xac>)
 800ac6c:	f002 f916 	bl	800ce9c <HAL_GPIO_WritePin>

  PwmLed_TimerHandle.Instance = PWM_LED_TIM;
 800ac70:	4b11      	ldr	r3, [pc, #68]	@ (800acb8 <BSP_PWM_LED_Init+0xb0>)
 800ac72:	4a12      	ldr	r2, [pc, #72]	@ (800acbc <BSP_PWM_LED_Init+0xb4>)
 800ac74:	601a      	str	r2, [r3, #0]
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* TIM17 MSP initialization */
    TIM17_MspInit(&PwmLed_TimerHandle);
 800ac76:	4810      	ldr	r0, [pc, #64]	@ (800acb8 <BSP_PWM_LED_Init+0xb0>)
 800ac78:	f000 fa34 	bl	800b0e4 <TIM17_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
      
  PwmLed_TimerHandle.Init.Prescaler = (PWM_LED_TIM_GET_COUNTER_CLK_FREQ()/1000000) -1;
 800ac7c:	f003 fb2c 	bl	800e2d8 <HAL_RCC_GetPCLK2Freq>
 800ac80:	4603      	mov	r3, r0
 800ac82:	4a0f      	ldr	r2, [pc, #60]	@ (800acc0 <BSP_PWM_LED_Init+0xb8>)
 800ac84:	fba2 2303 	umull	r2, r3, r2, r3
 800ac88:	0c9b      	lsrs	r3, r3, #18
 800ac8a:	3b01      	subs	r3, #1
 800ac8c:	4a0a      	ldr	r2, [pc, #40]	@ (800acb8 <BSP_PWM_LED_Init+0xb0>)
 800ac8e:	6053      	str	r3, [r2, #4]
  PwmLed_TimerHandle.Init.Period = (PWM_LED_TIM_COUNTER_FREQ/PWM_LED_TIM_FREQ) - 1;
 800ac90:	4b09      	ldr	r3, [pc, #36]	@ (800acb8 <BSP_PWM_LED_Init+0xb0>)
 800ac92:	2204      	movs	r2, #4
 800ac94:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&PwmLed_TimerHandle) != HAL_OK) 
 800ac96:	4808      	ldr	r0, [pc, #32]	@ (800acb8 <BSP_PWM_LED_Init+0xb0>)
 800ac98:	f004 fec0 	bl	800fa1c <HAL_TIM_Base_Init>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <BSP_PWM_LED_Init+0xa0>
  {
    ret = BSP_ERROR_NO_INIT;
 800aca2:	f04f 33ff 	mov.w	r3, #4294967295
 800aca6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800aca8:	697b      	ldr	r3, [r7, #20]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3718      	adds	r7, #24
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	48001c00 	.word	0x48001c00
 800acb8:	20000890 	.word	0x20000890
 800acbc:	40014800 	.word	0x40014800
 800acc0:	431bde83 	.word	0x431bde83

0800acc4 <BSP_PWM_LED_DeInit>:
/**
  * @brief  DeInitialize PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_DeInit(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800acca:	2300      	movs	r3, #0
 800accc:	607b      	str	r3, [r7, #4]

  HAL_GPIO_DeInit(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN);
 800acce:	2102      	movs	r1, #2
 800acd0:	4810      	ldr	r0, [pc, #64]	@ (800ad14 <BSP_PWM_LED_DeInit+0x50>)
 800acd2:	f002 f805 	bl	800cce0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN);
 800acd6:	2180      	movs	r1, #128	@ 0x80
 800acd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800acdc:	f002 f800 	bl	800cce0 <HAL_GPIO_DeInit>
  __HAL_TIM_DISABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800ace0:	4b0d      	ldr	r3, [pc, #52]	@ (800ad18 <BSP_PWM_LED_DeInit+0x54>)
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68da      	ldr	r2, [r3, #12]
 800ace6:	4b0c      	ldr	r3, [pc, #48]	@ (800ad18 <BSP_PWM_LED_DeInit+0x54>)
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	f022 0201 	bic.w	r2, r2, #1
 800acee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_DeInit(&PwmLed_TimerHandle) != HAL_OK)
 800acf0:	4809      	ldr	r0, [pc, #36]	@ (800ad18 <BSP_PWM_LED_DeInit+0x54>)
 800acf2:	f004 ff62 	bl	800fbba <HAL_TIM_PWM_DeInit>
 800acf6:	4603      	mov	r3, r0
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d002      	beq.n	800ad02 <BSP_PWM_LED_DeInit+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800acfc:	f06f 0305 	mvn.w	r3, #5
 800ad00:	607b      	str	r3, [r7, #4]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
#else
    /* TIM17 MSP de-initialization */
    TIM17_MspDeInit(&PwmLed_TimerHandle);
 800ad02:	4805      	ldr	r0, [pc, #20]	@ (800ad18 <BSP_PWM_LED_DeInit+0x54>)
 800ad04:	f000 fa0a 	bl	800b11c <TIM17_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
#if (PA7_AUTO_MANAGEMENT == 1)
    BSP_PWM_LED_Pin_AutoManagement();
#endif /* PA7_AUTO_MANAGEMENT == 1*/
  
  return ret;
 800ad08:	687b      	ldr	r3, [r7, #4]
}
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	48001c00 	.word	0x48001c00
 800ad18:	20000890 	.word	0x20000890

0800ad1c <BSP_PWM_LED_On>:
  * @brief  Set the GS data (PWM Control) for each output.
  * @param  aPwmLedGsData GS Data array (one element per output)
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_On(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b082      	sub	sp, #8
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  return PWM_LED_WriteData(aPwmLedGsData);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 f8d1 	bl	800aecc <PWM_LED_WriteData>
 800ad2a:	4603      	mov	r3, r0
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}

0800ad34 <BSP_PWM_LED_Off>:
/**
  * @brief  Turn each output Off.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Off(void)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b082      	sub	sp, #8
 800ad38:	af00      	add	r7, sp, #0
  aPwmLedGsData_TypeDef aPwmLedGsData = {PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF};
 800ad3a:	4a08      	ldr	r2, [pc, #32]	@ (800ad5c <BSP_PWM_LED_Off+0x28>)
 800ad3c:	1d3b      	adds	r3, r7, #4
 800ad3e:	6812      	ldr	r2, [r2, #0]
 800ad40:	4611      	mov	r1, r2
 800ad42:	8019      	strh	r1, [r3, #0]
 800ad44:	3302      	adds	r3, #2
 800ad46:	0c12      	lsrs	r2, r2, #16
 800ad48:	701a      	strb	r2, [r3, #0]
  return PWM_LED_WriteData(aPwmLedGsData);
 800ad4a:	1d3b      	adds	r3, r7, #4
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 f8bd 	bl	800aecc <PWM_LED_WriteData>
 800ad52:	4603      	mov	r3, r0
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3708      	adds	r7, #8
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	0801836c 	.word	0x0801836c

0800ad60 <BSP_PWM_LED_IRQHandler>:
/**
  * @brief  BSP PWM LED interrupt handler.
  * @retval None
  */
void BSP_PWM_LED_IRQHandler(void)
{
 800ad60:	b480      	push	{r7}
 800ad62:	af00      	add	r7, sp, #0
  __HAL_TIM_CLEAR_FLAG(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800ad64:	4b07      	ldr	r3, [pc, #28]	@ (800ad84 <BSP_PWM_LED_IRQHandler+0x24>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	f06f 0201 	mvn.w	r2, #1
 800ad6c:	611a      	str	r2, [r3, #16]
  CycleCount++;
 800ad6e:	4b06      	ldr	r3, [pc, #24]	@ (800ad88 <BSP_PWM_LED_IRQHandler+0x28>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	3301      	adds	r3, #1
 800ad74:	4a04      	ldr	r2, [pc, #16]	@ (800ad88 <BSP_PWM_LED_IRQHandler+0x28>)
 800ad76:	6013      	str	r3, [r2, #0]
}
 800ad78:	bf00      	nop
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad80:	4770      	bx	lr
 800ad82:	bf00      	nop
 800ad84:	20000890 	.word	0x20000890
 800ad88:	200008dc 	.word	0x200008dc

0800ad8c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	4603      	mov	r3, r0
 800ad94:	460a      	mov	r2, r1
 800ad96:	71fb      	strb	r3, [r7, #7]
 800ad98:	4613      	mov	r3, r2
 800ad9a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 800ad9c:	f107 030c 	add.w	r3, r7, #12
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	605a      	str	r2, [r3, #4]
 800ada6:	609a      	str	r2, [r3, #8]
 800ada8:	60da      	str	r2, [r3, #12]
 800adaa:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_USER1_EXTI_Callback, BUTTON_USER2_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USERx_IT_PRIORITY, BSP_BUTTON_USERx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_USER1_EXTI_LINE, BUTTON_USER2_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTON_USERx_GPIO_CLK_ENABLE(Button);
 800adac:	79fb      	ldrb	r3, [r7, #7]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d103      	bne.n	800adba <BSP_PB_Init+0x2e>
 800adb2:	2004      	movs	r0, #4
 800adb4:	f7ff fee3 	bl	800ab7e <LL_AHB2_GRP1_EnableClock>
 800adb8:	e005      	b.n	800adc6 <BSP_PB_Init+0x3a>
 800adba:	79fb      	ldrb	r3, [r7, #7]
 800adbc:	2b01      	cmp	r3, #1
 800adbe:	d102      	bne.n	800adc6 <BSP_PB_Init+0x3a>
 800adc0:	2004      	movs	r0, #4
 800adc2:	f7ff fedc 	bl	800ab7e <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	4a29      	ldr	r2, [pc, #164]	@ (800ae70 <BSP_PB_Init+0xe4>)
 800adca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adce:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800add0:	2301      	movs	r3, #1
 800add2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800add4:	2302      	movs	r3, #2
 800add6:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800add8:	79bb      	ldrb	r3, [r7, #6]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d10c      	bne.n	800adf8 <BSP_PB_Init+0x6c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800adde:	2300      	movs	r3, #0
 800ade0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800ade2:	79fb      	ldrb	r3, [r7, #7]
 800ade4:	4a23      	ldr	r2, [pc, #140]	@ (800ae74 <BSP_PB_Init+0xe8>)
 800ade6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800adea:	f107 020c 	add.w	r2, r7, #12
 800adee:	4611      	mov	r1, r2
 800adf0:	4618      	mov	r0, r3
 800adf2:	f001 fe05 	bl	800ca00 <HAL_GPIO_Init>
 800adf6:	e035      	b.n	800ae64 <BSP_PB_Init+0xd8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800adf8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800adfc:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800adfe:	79fb      	ldrb	r3, [r7, #7]
 800ae00:	4a1c      	ldr	r2, [pc, #112]	@ (800ae74 <BSP_PB_Init+0xe8>)
 800ae02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae06:	f107 020c 	add.w	r2, r7, #12
 800ae0a:	4611      	mov	r1, r2
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f001 fdf7 	bl	800ca00 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	00db      	lsls	r3, r3, #3
 800ae16:	4a18      	ldr	r2, [pc, #96]	@ (800ae78 <BSP_PB_Init+0xec>)
 800ae18:	441a      	add	r2, r3
 800ae1a:	79fb      	ldrb	r3, [r7, #7]
 800ae1c:	4917      	ldr	r1, [pc, #92]	@ (800ae7c <BSP_PB_Init+0xf0>)
 800ae1e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ae22:	4619      	mov	r1, r3
 800ae24:	4610      	mov	r0, r2
 800ae26:	f001 fceb 	bl	800c800 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800ae2a:	79fb      	ldrb	r3, [r7, #7]
 800ae2c:	00db      	lsls	r3, r3, #3
 800ae2e:	4a12      	ldr	r2, [pc, #72]	@ (800ae78 <BSP_PB_Init+0xec>)
 800ae30:	1898      	adds	r0, r3, r2
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	4a12      	ldr	r2, [pc, #72]	@ (800ae80 <BSP_PB_Init+0xf4>)
 800ae36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	f001 fcc5 	bl	800c7cc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800ae42:	79fb      	ldrb	r3, [r7, #7]
 800ae44:	4a0f      	ldr	r2, [pc, #60]	@ (800ae84 <BSP_PB_Init+0xf8>)
 800ae46:	56d0      	ldrsb	r0, [r2, r3]
 800ae48:	79fb      	ldrb	r3, [r7, #7]
 800ae4a:	4a0f      	ldr	r2, [pc, #60]	@ (800ae88 <BSP_PB_Init+0xfc>)
 800ae4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae50:	2200      	movs	r2, #0
 800ae52:	4619      	mov	r1, r3
 800ae54:	f001 f929 	bl	800c0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800ae58:	79fb      	ldrb	r3, [r7, #7]
 800ae5a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae84 <BSP_PB_Init+0xf8>)
 800ae5c:	56d3      	ldrsb	r3, [r2, r3]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f001 f93d 	bl	800c0de <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800ae64:	2300      	movs	r3, #0
}
 800ae66:	4618      	mov	r0, r3
 800ae68:	3720      	adds	r7, #32
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	080189a0 	.word	0x080189a0
 800ae74:	20000070 	.word	0x20000070
 800ae78:	20000880 	.word	0x20000880
 800ae7c:	080189a8 	.word	0x080189a8
 800ae80:	20000078 	.word	0x20000078
 800ae84:	080189a4 	.word	0x080189a4
 800ae88:	20000080 	.word	0x20000080

0800ae8c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER1
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	4603      	mov	r3, r0
 800ae94:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800ae96:	79fb      	ldrb	r3, [r7, #7]
 800ae98:	00db      	lsls	r3, r3, #3
 800ae9a:	4a04      	ldr	r2, [pc, #16]	@ (800aeac <BSP_PB_IRQHandler+0x20>)
 800ae9c:	4413      	add	r3, r2
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f001 fcc2 	bl	800c828 <HAL_EXTI_IRQHandler>
}
 800aea4:	bf00      	nop
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}
 800aeac:	20000880 	.word	0x20000880

0800aeb0 <BUTTON_USER1_EXTI_Callback>:
/**
  * @brief  BUTTON1 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER1_EXTI_Callback(void)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER1);
 800aeb4:	2000      	movs	r0, #0
 800aeb6:	f7fc f97b 	bl	80071b0 <BSP_PB_Callback>
}
 800aeba:	bf00      	nop
 800aebc:	bd80      	pop	{r7, pc}

0800aebe <BUTTON_USER2_EXTI_Callback>:
/**
  * @brief  BUTTON2 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER2_EXTI_Callback(void)
{
 800aebe:	b580      	push	{r7, lr}
 800aec0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER2);
 800aec2:	2001      	movs	r0, #1
 800aec4:	f7fc f974 	bl	80071b0 <BSP_PB_Callback>
}
 800aec8:	bf00      	nop
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <PWM_LED_WriteData>:
  * @brief  Write GS data into the PWM LED driver through a single-wire interface
  * @param  aPwmLedGsData GS (Gray Scale) data
  * @retval BSP status
  */
static int32_t PWM_LED_WriteData(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  if (aPwmLedGsData == NULL)
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d102      	bne.n	800aee0 <PWM_LED_WriteData+0x14>
  {
    return BSP_ERROR_WRONG_PARAM;
 800aeda:	f06f 0301 	mvn.w	r3, #1
 800aede:	e069      	b.n	800afb4 <PWM_LED_WriteData+0xe8>
  }
  
  __HAL_TIM_ENABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800aee0:	4b36      	ldr	r3, [pc, #216]	@ (800afbc <PWM_LED_WriteData+0xf0>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68da      	ldr	r2, [r3, #12]
 800aee6:	4b35      	ldr	r3, [pc, #212]	@ (800afbc <PWM_LED_WriteData+0xf0>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f042 0201 	orr.w	r2, r2, #1
 800aeee:	60da      	str	r2, [r3, #12]
  
  /* Start time base */
  if (HAL_TIM_Base_Start(&PwmLed_TimerHandle) != HAL_OK)
 800aef0:	4832      	ldr	r0, [pc, #200]	@ (800afbc <PWM_LED_WriteData+0xf0>)
 800aef2:	f004 fdf5 	bl	800fae0 <HAL_TIM_Base_Start>
 800aef6:	4603      	mov	r3, r0
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d002      	beq.n	800af02 <PWM_LED_WriteData+0x36>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 800aefc:	f06f 0305 	mvn.w	r3, #5
 800af00:	e058      	b.n	800afb4 <PWM_LED_WriteData+0xe8>
  }
  
  /* Enable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800af02:	2200      	movs	r2, #0
 800af04:	2102      	movs	r1, #2
 800af06:	482e      	ldr	r0, [pc, #184]	@ (800afc0 <PWM_LED_WriteData+0xf4>)
 800af08:	f001 ffc8 	bl	800ce9c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800af0c:	200a      	movs	r0, #10
 800af0e:	f7fd fa19 	bl	8008344 <HAL_Delay>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_SET);
 800af12:	2201      	movs	r2, #1
 800af14:	2102      	movs	r1, #2
 800af16:	482a      	ldr	r0, [pc, #168]	@ (800afc0 <PWM_LED_WriteData+0xf4>)
 800af18:	f001 ffc0 	bl	800ce9c <HAL_GPIO_WritePin>
  
  /* TCycle measurement sequence */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800af1c:	2200      	movs	r2, #0
 800af1e:	2180      	movs	r1, #128	@ 0x80
 800af20:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800af24:	f001 ffba 	bl	800ce9c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800af28:	2001      	movs	r0, #1
 800af2a:	f000 f8c3 	bl	800b0b4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800af2e:	2201      	movs	r2, #1
 800af30:	2180      	movs	r1, #128	@ 0x80
 800af32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800af36:	f001 ffb1 	bl	800ce9c <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 800af3a:	2004      	movs	r0, #4
 800af3c:	f000 f8ba 	bl	800b0b4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800af40:	2200      	movs	r2, #0
 800af42:	2180      	movs	r1, #128	@ 0x80
 800af44:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800af48:	f001 ffa8 	bl	800ce9c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800af4c:	2001      	movs	r0, #1
 800af4e:	f000 f8b1 	bl	800b0b4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800af52:	2201      	movs	r2, #1
 800af54:	2180      	movs	r1, #128	@ 0x80
 800af56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800af5a:	f001 ff9f 	bl	800ce9c <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 800af5e:	2004      	movs	r0, #4
 800af60:	f000 f8a8 	bl	800b0b4 <PWM_LED_Wait>
  
  /* Write command */
  PWM_LED_SenByte(WRITE_COMMAND);
 800af64:	203a      	movs	r0, #58	@ 0x3a
 800af66:	f000 f863 	bl	800b030 <PWM_LED_SenByte>
  
  /* Write the GS data */
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 800af6a:	2300      	movs	r3, #0
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	e00f      	b.n	800af90 <PWM_LED_WriteData+0xc4>
  {
    PWM_LED_GSDATA[gsdata] = aPwmLedGsData[gsdata];
 800af70:	7bfb      	ldrb	r3, [r7, #15]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	441a      	add	r2, r3
 800af76:	7bfb      	ldrb	r3, [r7, #15]
 800af78:	7811      	ldrb	r1, [r2, #0]
 800af7a:	4a12      	ldr	r2, [pc, #72]	@ (800afc4 <PWM_LED_WriteData+0xf8>)
 800af7c:	54d1      	strb	r1, [r2, r3]
    PWM_LED_SenByte(PWM_LED_GSDATA[gsdata]);
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	4a10      	ldr	r2, [pc, #64]	@ (800afc4 <PWM_LED_WriteData+0xf8>)
 800af82:	5cd3      	ldrb	r3, [r2, r3]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 f853 	bl	800b030 <PWM_LED_SenByte>
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 800af8a:	7bfb      	ldrb	r3, [r7, #15]
 800af8c:	3301      	adds	r3, #1
 800af8e:	73fb      	strb	r3, [r7, #15]
 800af90:	7bfb      	ldrb	r3, [r7, #15]
 800af92:	2b02      	cmp	r3, #2
 800af94:	d9ec      	bls.n	800af70 <PWM_LED_WriteData+0xa4>
  }
  
  /* Disable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800af96:	2200      	movs	r2, #0
 800af98:	2102      	movs	r1, #2
 800af9a:	4809      	ldr	r0, [pc, #36]	@ (800afc0 <PWM_LED_WriteData+0xf4>)
 800af9c:	f001 ff7e 	bl	800ce9c <HAL_GPIO_WritePin>
  
  /* Stop time base */
  if (HAL_TIM_Base_Stop(&PwmLed_TimerHandle) != HAL_OK)
 800afa0:	4806      	ldr	r0, [pc, #24]	@ (800afbc <PWM_LED_WriteData+0xf0>)
 800afa2:	f004 fde3 	bl	800fb6c <HAL_TIM_Base_Stop>
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d002      	beq.n	800afb2 <PWM_LED_WriteData+0xe6>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 800afac:	f06f 0305 	mvn.w	r3, #5
 800afb0:	e000      	b.n	800afb4 <PWM_LED_WriteData+0xe8>
  }

  return BSP_ERROR_NONE;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3710      	adds	r7, #16
 800afb8:	46bd      	mov	sp, r7
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	20000890 	.word	0x20000890
 800afc0:	48001c00 	.word	0x48001c00
 800afc4:	200008e0 	.word	0x200008e0

0800afc8 <PWM_LED_SendBit>:
  * @brief  Data 0/1 write sequence
  * @param  bit
  * @retval None
  */
static void PWM_LED_SendBit(uint8_t bit)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b082      	sub	sp, #8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	4603      	mov	r3, r0
 800afd0:	71fb      	strb	r3, [r7, #7]
  /* Start next cycle */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800afd2:	2201      	movs	r2, #1
 800afd4:	2180      	movs	r1, #128	@ 0x80
 800afd6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800afda:	f001 ff5f 	bl	800ce9c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY); 
 800afde:	2001      	movs	r0, #1
 800afe0:	f000 f868 	bl	800b0b4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800afe4:	2200      	movs	r2, #0
 800afe6:	2180      	movs	r1, #128	@ 0x80
 800afe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800afec:	f001 ff56 	bl	800ce9c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800aff0:	2001      	movs	r0, #1
 800aff2:	f000 f85f 	bl	800b0b4 <PWM_LED_Wait>
  
  if (bit)
 800aff6:	79fb      	ldrb	r3, [r7, #7]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d012      	beq.n	800b022 <PWM_LED_SendBit+0x5a>
  {
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800affc:	2201      	movs	r2, #1
 800affe:	2180      	movs	r1, #128	@ 0x80
 800b000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b004:	f001 ff4a 	bl	800ce9c <HAL_GPIO_WritePin>
    PWM_LED_Wait(DELAY);
 800b008:	2001      	movs	r0, #1
 800b00a:	f000 f853 	bl	800b0b4 <PWM_LED_Wait>
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800b00e:	2200      	movs	r2, #0
 800b010:	2180      	movs	r1, #128	@ 0x80
 800b012:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b016:	f001 ff41 	bl	800ce9c <HAL_GPIO_WritePin>
    PWM_LED_Wait(T_CYCLE_1);
 800b01a:	2001      	movs	r0, #1
 800b01c:	f000 f84a 	bl	800b0b4 <PWM_LED_Wait>
  }
  else
  {
    PWM_LED_Wait(T_CYCLE_0);
  }
}
 800b020:	e002      	b.n	800b028 <PWM_LED_SendBit+0x60>
    PWM_LED_Wait(T_CYCLE_0);
 800b022:	2004      	movs	r0, #4
 800b024:	f000 f846 	bl	800b0b4 <PWM_LED_Wait>
}
 800b028:	bf00      	nop
 800b02a:	3708      	adds	r7, #8
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <PWM_LED_SenByte>:
  * @brief  Byte write Sequence
  * @param  byte
  * @retval None
  */
static void PWM_LED_SenByte(uint8_t byte)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	4603      	mov	r3, r0
 800b038:	71fb      	strb	r3, [r7, #7]
    PWM_LED_SendBit(byte & (1<<7));
 800b03a:	79fb      	ldrb	r3, [r7, #7]
 800b03c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b040:	b2db      	uxtb	r3, r3
 800b042:	4618      	mov	r0, r3
 800b044:	f7ff ffc0 	bl	800afc8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<6));
 800b048:	79fb      	ldrb	r3, [r7, #7]
 800b04a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	4618      	mov	r0, r3
 800b052:	f7ff ffb9 	bl	800afc8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<5));
 800b056:	79fb      	ldrb	r3, [r7, #7]
 800b058:	f003 0320 	and.w	r3, r3, #32
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	4618      	mov	r0, r3
 800b060:	f7ff ffb2 	bl	800afc8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<4));
 800b064:	79fb      	ldrb	r3, [r7, #7]
 800b066:	f003 0310 	and.w	r3, r3, #16
 800b06a:	b2db      	uxtb	r3, r3
 800b06c:	4618      	mov	r0, r3
 800b06e:	f7ff ffab 	bl	800afc8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<3));
 800b072:	79fb      	ldrb	r3, [r7, #7]
 800b074:	f003 0308 	and.w	r3, r3, #8
 800b078:	b2db      	uxtb	r3, r3
 800b07a:	4618      	mov	r0, r3
 800b07c:	f7ff ffa4 	bl	800afc8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<2));
 800b080:	79fb      	ldrb	r3, [r7, #7]
 800b082:	f003 0304 	and.w	r3, r3, #4
 800b086:	b2db      	uxtb	r3, r3
 800b088:	4618      	mov	r0, r3
 800b08a:	f7ff ff9d 	bl	800afc8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<1));
 800b08e:	79fb      	ldrb	r3, [r7, #7]
 800b090:	f003 0302 	and.w	r3, r3, #2
 800b094:	b2db      	uxtb	r3, r3
 800b096:	4618      	mov	r0, r3
 800b098:	f7ff ff96 	bl	800afc8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<0));
 800b09c:	79fb      	ldrb	r3, [r7, #7]
 800b09e:	f003 0301 	and.w	r3, r3, #1
 800b0a2:	b2db      	uxtb	r3, r3
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	f7ff ff8f 	bl	800afc8 <PWM_LED_SendBit>
}
 800b0aa:	bf00      	nop
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <PWM_LED_Wait>:
  * @brief  Byte write Sequence
  * @param  NbCycles Number of cycles to wait for
  * @retval None
  */
static void PWM_LED_Wait(uint32_t NbCycles)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  uint32_t start = CycleCount;
 800b0bc:	4b08      	ldr	r3, [pc, #32]	@ (800b0e0 <PWM_LED_Wait+0x2c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	60fb      	str	r3, [r7, #12]
  
  while ((CycleCount - start) < NbCycles)
 800b0c2:	bf00      	nop
 800b0c4:	4b06      	ldr	r3, [pc, #24]	@ (800b0e0 <PWM_LED_Wait+0x2c>)
 800b0c6:	681a      	ldr	r2, [r3, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	1ad3      	subs	r3, r2, r3
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	429a      	cmp	r2, r3
 800b0d0:	d8f8      	bhi.n	800b0c4 <PWM_LED_Wait+0x10>
  {
  }
}
 800b0d2:	bf00      	nop
 800b0d4:	bf00      	nop
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0de:	4770      	bx	lr
 800b0e0:	200008dc 	.word	0x200008dc

0800b0e4 <TIM17_MspInit>:
  * @brief  Timer MSP initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspInit(TIM_HandleTypeDef *htim)
{
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b082      	sub	sp, #8
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a09      	ldr	r2, [pc, #36]	@ (800b118 <TIM17_MspInit+0x34>)
 800b0f2:	4293      	cmp	r3, r2
 800b0f4:	d10b      	bne.n	800b10e <TIM17_MspInit+0x2a>
  {
    PWM_LED_TIM_CLOCK_ENABLE();
 800b0f6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b0fa:	f7ff fd59 	bl	800abb0 <LL_APB2_GRP1_EnableClock>
    
    HAL_NVIC_SetPriority(PWM_LED_TIM_UP_IRQN, PWM_LED_CLOCK_IT_PRIORITY, 0);
 800b0fe:	2200      	movs	r2, #0
 800b100:	2103      	movs	r1, #3
 800b102:	201a      	movs	r0, #26
 800b104:	f000 ffd1 	bl	800c0aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PWM_LED_TIM_UP_IRQN);
 800b108:	201a      	movs	r0, #26
 800b10a:	f000 ffe8 	bl	800c0de <HAL_NVIC_EnableIRQ>
  }
}
 800b10e:	bf00      	nop
 800b110:	3708      	adds	r7, #8
 800b112:	46bd      	mov	sp, r7
 800b114:	bd80      	pop	{r7, pc}
 800b116:	bf00      	nop
 800b118:	40014800 	.word	0x40014800

0800b11c <TIM17_MspDeInit>:
  * @brief  Timer MSP de-initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspDeInit(TIM_HandleTypeDef *htim)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a06      	ldr	r2, [pc, #24]	@ (800b144 <TIM17_MspDeInit+0x28>)
 800b12a:	4293      	cmp	r3, r2
 800b12c:	d106      	bne.n	800b13c <TIM17_MspDeInit+0x20>
  {
    HAL_NVIC_DisableIRQ(PWM_LED_TIM_UP_IRQN);
 800b12e:	201a      	movs	r0, #26
 800b130:	f000 ffe3 	bl	800c0fa <HAL_NVIC_DisableIRQ>
    PWM_LED_TIM_CLOCK_DISABLE();
 800b134:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b138:	f7ff fd53 	bl	800abe2 <LL_APB2_GRP1_DisableClock>
  }
}
 800b13c:	bf00      	nop
 800b13e:	3708      	adds	r7, #8
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	40014800 	.word	0x40014800

0800b148 <LL_AHB2_GRP1_EnableClock>:
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b150:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b154:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b156:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	4313      	orrs	r3, r2
 800b15e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b164:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	4013      	ands	r3, r2
 800b16a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b16c:	68fb      	ldr	r3, [r7, #12]
}
 800b16e:	bf00      	nop
 800b170:	3714      	adds	r7, #20
 800b172:	46bd      	mov	sp, r7
 800b174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b178:	4770      	bx	lr

0800b17a <LL_APB2_GRP1_EnableClock>:
{
 800b17a:	b480      	push	{r7}
 800b17c:	b085      	sub	sp, #20
 800b17e:	af00      	add	r7, sp, #0
 800b180:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800b182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b186:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b188:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	4313      	orrs	r3, r2
 800b190:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b192:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b196:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4013      	ands	r3, r2
 800b19c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b19e:	68fb      	ldr	r3, [r7, #12]
}
 800b1a0:	bf00      	nop
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b082      	sub	sp, #8
 800b1b0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	607b      	str	r3, [r7, #4]

  hbus_spi1.Instance  = BUS_SPI1_INSTANCE;
 800b1b6:	4b11      	ldr	r3, [pc, #68]	@ (800b1fc <BSP_SPI1_Init+0x50>)
 800b1b8:	4a11      	ldr	r2, [pc, #68]	@ (800b200 <BSP_SPI1_Init+0x54>)
 800b1ba:	601a      	str	r2, [r3, #0]

  if (HAL_SPI_GetState(&hbus_spi1) == HAL_SPI_STATE_RESET)
 800b1bc:	480f      	ldr	r0, [pc, #60]	@ (800b1fc <BSP_SPI1_Init+0x50>)
 800b1be:	f004 fabb 	bl	800f738 <HAL_SPI_GetState>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d114      	bne.n	800b1f2 <BSP_SPI1_Init+0x46>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbus_spi1);
 800b1c8:	480c      	ldr	r0, [pc, #48]	@ (800b1fc <BSP_SPI1_Init+0x50>)
 800b1ca:	f000 f89a 	bl	800b302 <SPI1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    /* Init the SPI */
    if (MX_SPI1_Init(&hbus_spi1, SPI_GetPrescaler( HAL_RCC_GetPCLK1Freq(), BUS_SPI1_BAUDRATE)) != HAL_OK)
 800b1ce:	f003 f86d 	bl	800e2ac <HAL_RCC_GetPCLK1Freq>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	490b      	ldr	r1, [pc, #44]	@ (800b204 <BSP_SPI1_Init+0x58>)
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f000 f8c4 	bl	800b364 <SPI_GetPrescaler>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	4619      	mov	r1, r3
 800b1e0:	4806      	ldr	r0, [pc, #24]	@ (800b1fc <BSP_SPI1_Init+0x50>)
 800b1e2:	f000 f811 	bl	800b208 <MX_SPI1_Init>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <BSP_SPI1_Init+0x46>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b1ec:	f06f 0307 	mvn.w	r3, #7
 800b1f0:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b1f2:	687b      	ldr	r3, [r7, #4]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3708      	adds	r7, #8
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}
 800b1fc:	200008e4 	.word	0x200008e4
 800b200:	40013000 	.word	0x40013000
 800b204:	00bebc20 	.word	0x00bebc20

0800b208 <MX_SPI1_Init>:
  * @param  phspi             SPI handler
  * @param  BaudratePrescaler prsecaler to set for SPI baudrate
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* phspi, uint32_t BaudratePrescaler)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b212:	2300      	movs	r3, #0
 800b214:	73fb      	strb	r3, [r7, #15]

  phspi->Init.Mode              = SPI_MODE_MASTER;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b21c:	605a      	str	r2, [r3, #4]
  phspi->Init.Direction         = SPI_DIRECTION_2LINES;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	609a      	str	r2, [r3, #8]
  phspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800b22a:	60da      	str	r2, [r3, #12]
  phspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2202      	movs	r2, #2
 800b230:	611a      	str	r2, [r3, #16]
  phspi->Init.CLKPhase          = SPI_PHASE_1EDGE;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2200      	movs	r2, #0
 800b236:	615a      	str	r2, [r3, #20]
  phspi->Init.NSS               = SPI_NSS_SOFT;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b23e:	619a      	str	r2, [r3, #24]
  phspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2210      	movs	r2, #16
 800b244:	61da      	str	r2, [r3, #28]
  phspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	621a      	str	r2, [r3, #32]
  phspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	2200      	movs	r2, #0
 800b250:	625a      	str	r2, [r3, #36]	@ 0x24
  phspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	629a      	str	r2, [r3, #40]	@ 0x28
  phspi->Init.CRCPolynomial     = 7;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2207      	movs	r2, #7
 800b25c:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(HAL_SPI_Init(phspi) != HAL_OK)
 800b25e:	6878      	ldr	r0, [r7, #4]
 800b260:	f003 fe28 	bl	800eeb4 <HAL_SPI_Init>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <MX_SPI1_Init+0x66>
  {
    ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}

0800b278 <BSP_SPI1_Send>:
  * @param  pData  Pointer to data buffer to send
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{  
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	460b      	mov	r3, r1
 800b282:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800b284:	2300      	movs	r3, #0
 800b286:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbus_spi1, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 800b288:	887a      	ldrh	r2, [r7, #2]
 800b28a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b28e:	6879      	ldr	r1, [r7, #4]
 800b290:	4806      	ldr	r0, [pc, #24]	@ (800b2ac <BSP_SPI1_Send+0x34>)
 800b292:	f003 febc 	bl	800f00e <HAL_SPI_Transmit>
 800b296:	4603      	mov	r3, r0
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d101      	bne.n	800b2a0 <BSP_SPI1_Send+0x28>
  {
    ret = BSP_ERROR_NONE;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	200008e4 	.word	0x200008e4

0800b2b0 <BSP_SPI1_Recv>:
  * @param  pData  Pointer to data buffer to receive
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af02      	add	r7, sp, #8
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	460b      	mov	r3, r1
 800b2ba:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b2bc:	f06f 0305 	mvn.w	r3, #5
 800b2c0:	60fb      	str	r3, [r7, #12]
  uint32_t tx_data = 0xFFFFFFFFU;
 800b2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c6:	60bb      	str	r3, [r7, #8]

  if(HAL_SPI_TransmitReceive(&hbus_spi1, (uint8_t*)&tx_data, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 800b2c8:	887b      	ldrh	r3, [r7, #2]
 800b2ca:	f107 0108 	add.w	r1, r7, #8
 800b2ce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b2d2:	9200      	str	r2, [sp, #0]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	4806      	ldr	r0, [pc, #24]	@ (800b2f0 <BSP_SPI1_Recv+0x40>)
 800b2d8:	f004 f80f 	bl	800f2fa <HAL_SPI_TransmitReceive>
 800b2dc:	4603      	mov	r3, r0
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d101      	bne.n	800b2e6 <BSP_SPI1_Recv+0x36>
  {
    ret = BSP_ERROR_NONE;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}
 800b2f0:	200008e4 	.word	0x200008e4

0800b2f4 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b2f8:	f000 fd72 	bl	800bde0 <HAL_GetTick>
 800b2fc:	4603      	mov	r3, r0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	bd80      	pop	{r7, pc}

0800b302 <SPI1_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void SPI1_MspInit(SPI_HandleTypeDef* hspi)
{
 800b302:	b580      	push	{r7, lr}
 800b304:	b088      	sub	sp, #32
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  BUS_SPI1_CLOCK_ENABLE();
 800b30a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b30e:	f7ff ff34 	bl	800b17a <LL_APB2_GRP1_EnableClock>

  /* enable SPIx gpio clock */
  BUS_SPI1_GPIO_CLKA_ENABLE();
 800b312:	2001      	movs	r0, #1
 800b314:	f7ff ff18 	bl	800b148 <LL_AHB2_GRP1_EnableClock>

  /* configure SPIx SCK, MOSI */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 800b318:	2380      	movs	r3, #128	@ 0x80
 800b31a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800b31c:	2302      	movs	r3, #2
 800b31e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800b320:	2302      	movs	r3, #2
 800b322:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 800b324:	2300      	movs	r3, #0
 800b326:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 800b328:	2305      	movs	r3, #5
 800b32a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 800b32c:	f107 030c 	add.w	r3, r7, #12
 800b330:	4619      	mov	r1, r3
 800b332:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b336:	f001 fb63 	bl	800ca00 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin       = BUS_SPI1_SCK_PIN;
 800b33a:	2302      	movs	r3, #2
 800b33c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800b33e:	2302      	movs	r3, #2
 800b340:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800b342:	2302      	movs	r3, #2
 800b344:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 800b346:	2300      	movs	r3, #0
 800b348:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 800b34a:	2305      	movs	r3, #5
 800b34c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 800b34e:	f107 030c 	add.w	r3, r7, #12
 800b352:	4619      	mov	r1, r3
 800b354:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b358:	f001 fb52 	bl	800ca00 <HAL_GPIO_Init>

}
 800b35c:	bf00      	nop
 800b35e:	3720      	adds	r7, #32
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <SPI_GetPrescaler>:
  * @param  clock_src_freq : SPI source clock in HZ.
  * @param  baudfreq_mbps : SPI baud freq in mbps.
  * @retval Prescaler divisor
  */
static uint32_t SPI_GetPrescaler( uint32_t clock_src_freq, uint32_t baudfreq_mbps )
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 800b36e:	2300      	movs	r3, #0
 800b370:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_freq;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while( spi_clk > baudfreq_mbps)
 800b37a:	e00d      	b.n	800b398 <SPI_GetPrescaler+0x34>
  {
    presc = baudfreq[divisor];
 800b37c:	4a0d      	ldr	r2, [pc, #52]	@ (800b3b4 <SPI_GetPrescaler+0x50>)
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b384:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7U)
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	3301      	adds	r3, #1
 800b38a:	617b      	str	r3, [r7, #20]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2b07      	cmp	r3, #7
 800b390:	d807      	bhi.n	800b3a2 <SPI_GetPrescaler+0x3e>
      break;

    spi_clk= ( spi_clk >> 1);
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	085b      	lsrs	r3, r3, #1
 800b396:	613b      	str	r3, [r7, #16]
  while( spi_clk > baudfreq_mbps)
 800b398:	693a      	ldr	r2, [r7, #16]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d8ed      	bhi.n	800b37c <SPI_GetPrescaler+0x18>
 800b3a0:	e000      	b.n	800b3a4 <SPI_GetPrescaler+0x40>
      break;
 800b3a2:	bf00      	nop
  }

  return presc;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
}
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	371c      	adds	r7, #28
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	080189b0 	.word	0x080189b0

0800b3b8 <LL_AHB2_GRP1_EnableClock>:
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b3c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4313      	orrs	r3, r2
 800b3ce:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b3d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b3d4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	4013      	ands	r3, r2
 800b3da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
}
 800b3de:	bf00      	nop
 800b3e0:	3714      	adds	r7, #20
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr
	...

0800b3ec <BSP_LCD_Init>:
  * @param  Instance LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR )
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d003      	beq.n	800b408 <BSP_LCD_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b400:	f06f 0301 	mvn.w	r3, #1
 800b404:	60fb      	str	r3, [r7, #12]
 800b406:	e032      	b.n	800b46e <BSP_LCD_Init+0x82>
  }
  else
  {
    if(Orientation == LCD_ORIENTATION_LANDSCAPE)
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d113      	bne.n	800b436 <BSP_LCD_Init+0x4a>
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_WIDTH;
 800b40e:	491a      	ldr	r1, [pc, #104]	@ (800b478 <BSP_LCD_Init+0x8c>)
 800b410:	687a      	ldr	r2, [r7, #4]
 800b412:	4613      	mov	r3, r2
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	4413      	add	r3, r2
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	440b      	add	r3, r1
 800b41c:	2280      	movs	r2, #128	@ 0x80
 800b41e:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_HEIGHT;
 800b420:	4915      	ldr	r1, [pc, #84]	@ (800b478 <BSP_LCD_Init+0x8c>)
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	4613      	mov	r3, r2
 800b426:	005b      	lsls	r3, r3, #1
 800b428:	4413      	add	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	440b      	add	r3, r1
 800b42e:	3304      	adds	r3, #4
 800b430:	2240      	movs	r2, #64	@ 0x40
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e012      	b.n	800b45c <BSP_LCD_Init+0x70>
    }
    else
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_HEIGHT;
 800b436:	4910      	ldr	r1, [pc, #64]	@ (800b478 <BSP_LCD_Init+0x8c>)
 800b438:	687a      	ldr	r2, [r7, #4]
 800b43a:	4613      	mov	r3, r2
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	4413      	add	r3, r2
 800b440:	009b      	lsls	r3, r3, #2
 800b442:	440b      	add	r3, r1
 800b444:	2240      	movs	r2, #64	@ 0x40
 800b446:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_WIDTH;
 800b448:	490b      	ldr	r1, [pc, #44]	@ (800b478 <BSP_LCD_Init+0x8c>)
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	4613      	mov	r3, r2
 800b44e:	005b      	lsls	r3, r3, #1
 800b450:	4413      	add	r3, r2
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	440b      	add	r3, r1
 800b456:	3304      	adds	r3, #4
 800b458:	2280      	movs	r2, #128	@ 0x80
 800b45a:	601a      	str	r2, [r3, #0]
    }
    
    /* registers the function and initialize the controller */
    if(SSD1315_Probe(Orientation) != BSP_ERROR_NONE)
 800b45c:	6838      	ldr	r0, [r7, #0]
 800b45e:	f000 fb27 	bl	800bab0 <SSD1315_Probe>
 800b462:	4603      	mov	r3, r0
 800b464:	2b00      	cmp	r3, #0
 800b466:	d002      	beq.n	800b46e <BSP_LCD_Init+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b468:	f06f 0306 	mvn.w	r3, #6
 800b46c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b46e:	68fb      	ldr	r3, [r7, #12]
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	2000094c 	.word	0x2000094c

0800b47c <BSP_LCD_GetPixelFormat>:
  * @param  Instance LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 800b47c:	b480      	push	{r7}
 800b47e:	b085      	sub	sp, #20
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
 800b484:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b486:	2300      	movs	r3, #0
 800b488:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d003      	beq.n	800b498 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b490:	f06f 0301 	mvn.w	r3, #1
 800b494:	60fb      	str	r3, [r7, #12]
 800b496:	e002      	b.n	800b49e <BSP_LCD_GetPixelFormat+0x22>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b498:	f06f 030a 	mvn.w	r3, #10
 800b49c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b49e:	68fb      	ldr	r3, [r7, #12]
}
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3714      	adds	r7, #20
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4aa:	4770      	bx	lr

0800b4ac <BSP_LCD_GetXSize>:
  * @param  Instance LCD Instance
  * @param  pXSize pointer to Used LCD X size
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *pXSize)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d003      	beq.n	800b4c8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b4c0:	f06f 0301 	mvn.w	r3, #1
 800b4c4:	60fb      	str	r3, [r7, #12]
 800b4c6:	e01d      	b.n	800b504 <BSP_LCD_GetXSize+0x58>
  }
  else if(LcdDrv->GetXSize != NULL)
 800b4c8:	4b11      	ldr	r3, [pc, #68]	@ (800b510 <BSP_LCD_GetXSize+0x64>)
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00e      	beq.n	800b4f0 <BSP_LCD_GetXSize+0x44>
  {
    if(LcdDrv->GetXSize(LcdCompObj, pXSize) < 0)
 800b4d2:	4b0f      	ldr	r3, [pc, #60]	@ (800b510 <BSP_LCD_GetXSize+0x64>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b4d8:	4a0e      	ldr	r2, [pc, #56]	@ (800b514 <BSP_LCD_GetXSize+0x68>)
 800b4da:	6812      	ldr	r2, [r2, #0]
 800b4dc:	6839      	ldr	r1, [r7, #0]
 800b4de:	4610      	mov	r0, r2
 800b4e0:	4798      	blx	r3
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	da0d      	bge.n	800b504 <BSP_LCD_GetXSize+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b4e8:	f06f 0304 	mvn.w	r3, #4
 800b4ec:	60fb      	str	r3, [r7, #12]
 800b4ee:	e009      	b.n	800b504 <BSP_LCD_GetXSize+0x58>
    }
  }
  else
  {
    *pXSize = LcdCtx[Instance].Width;
 800b4f0:	4909      	ldr	r1, [pc, #36]	@ (800b518 <BSP_LCD_GetXSize+0x6c>)
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	4413      	add	r3, r2
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 800b504:	68fb      	ldr	r3, [r7, #12]
}
 800b506:	4618      	mov	r0, r3
 800b508:	3710      	adds	r7, #16
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bd80      	pop	{r7, pc}
 800b50e:	bf00      	nop
 800b510:	20000958 	.word	0x20000958
 800b514:	20000948 	.word	0x20000948
 800b518:	2000094c 	.word	0x2000094c

0800b51c <BSP_LCD_GetYSize>:
  * @param  Instance LCD Instance
  * @param  pYSize pointer to Used LCD Y size
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *pYSize)
{
 800b51c:	b580      	push	{r7, lr}
 800b51e:	b084      	sub	sp, #16
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
 800b524:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b526:	2300      	movs	r3, #0
 800b528:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d003      	beq.n	800b538 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b530:	f06f 0301 	mvn.w	r3, #1
 800b534:	60fb      	str	r3, [r7, #12]
 800b536:	e01e      	b.n	800b576 <BSP_LCD_GetYSize+0x5a>
  }
  else if(LcdDrv->GetYSize != NULL)
 800b538:	4b11      	ldr	r3, [pc, #68]	@ (800b580 <BSP_LCD_GetYSize+0x64>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d00e      	beq.n	800b560 <BSP_LCD_GetYSize+0x44>
  {
    if(LcdDrv->GetYSize(LcdCompObj, pYSize) < 0)
 800b542:	4b0f      	ldr	r3, [pc, #60]	@ (800b580 <BSP_LCD_GetYSize+0x64>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b548:	4a0e      	ldr	r2, [pc, #56]	@ (800b584 <BSP_LCD_GetYSize+0x68>)
 800b54a:	6812      	ldr	r2, [r2, #0]
 800b54c:	6839      	ldr	r1, [r7, #0]
 800b54e:	4610      	mov	r0, r2
 800b550:	4798      	blx	r3
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	da0e      	bge.n	800b576 <BSP_LCD_GetYSize+0x5a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b558:	f06f 0304 	mvn.w	r3, #4
 800b55c:	60fb      	str	r3, [r7, #12]
 800b55e:	e00a      	b.n	800b576 <BSP_LCD_GetYSize+0x5a>
    }
  }
  else
  {
    *pYSize = LcdCtx[Instance].Height;
 800b560:	4909      	ldr	r1, [pc, #36]	@ (800b588 <BSP_LCD_GetYSize+0x6c>)
 800b562:	687a      	ldr	r2, [r7, #4]
 800b564:	4613      	mov	r3, r2
 800b566:	005b      	lsls	r3, r3, #1
 800b568:	4413      	add	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	440b      	add	r3, r1
 800b56e:	3304      	adds	r3, #4
 800b570:	681a      	ldr	r2, [r3, #0]
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800b576:	68fb      	ldr	r3, [r7, #12]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3710      	adds	r7, #16
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}
 800b580:	20000958 	.word	0x20000958
 800b584:	20000948 	.word	0x20000948
 800b588:	2000094c 	.word	0x2000094c

0800b58c <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 800b58c:	b580      	push	{r7, lr}
 800b58e:	b084      	sub	sp, #16
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d003      	beq.n	800b5a6 <BSP_LCD_DisplayOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b59e:	f06f 0301 	mvn.w	r3, #1
 800b5a2:	60fb      	str	r3, [r7, #12]
 800b5a4:	e015      	b.n	800b5d2 <BSP_LCD_DisplayOn+0x46>
  }
  else if(LcdDrv->DisplayOn != NULL)
 800b5a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b5dc <BSP_LCD_DisplayOn+0x50>)
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	68db      	ldr	r3, [r3, #12]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00d      	beq.n	800b5cc <BSP_LCD_DisplayOn+0x40>
  {
    if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <BSP_LCD_DisplayOn+0x50>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	4a0a      	ldr	r2, [pc, #40]	@ (800b5e0 <BSP_LCD_DisplayOn+0x54>)
 800b5b8:	6812      	ldr	r2, [r2, #0]
 800b5ba:	4610      	mov	r0, r2
 800b5bc:	4798      	blx	r3
 800b5be:	4603      	mov	r3, r0
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	da06      	bge.n	800b5d2 <BSP_LCD_DisplayOn+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5c4:	f06f 0304 	mvn.w	r3, #4
 800b5c8:	60fb      	str	r3, [r7, #12]
 800b5ca:	e002      	b.n	800b5d2 <BSP_LCD_DisplayOn+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b5cc:	f06f 030a 	mvn.w	r3, #10
 800b5d0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}
 800b5dc:	20000958 	.word	0x20000958
 800b5e0:	20000948 	.word	0x20000948

0800b5e4 <BSP_LCD_Refresh>:
  * @brief  Refresh the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_Refresh(uint32_t Instance)
{
 800b5e4:	b580      	push	{r7, lr}
 800b5e6:	b084      	sub	sp, #16
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d003      	beq.n	800b5fe <BSP_LCD_Refresh+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b5f6:	f06f 0301 	mvn.w	r3, #1
 800b5fa:	60fb      	str	r3, [r7, #12]
 800b5fc:	e015      	b.n	800b62a <BSP_LCD_Refresh+0x46>
  }
  else if(LcdDrv->Refresh != NULL)
 800b5fe:	4b0d      	ldr	r3, [pc, #52]	@ (800b634 <BSP_LCD_Refresh+0x50>)
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b604:	2b00      	cmp	r3, #0
 800b606:	d00d      	beq.n	800b624 <BSP_LCD_Refresh+0x40>
  {
    if(LcdDrv->Refresh(LcdCompObj) < 0)
 800b608:	4b0a      	ldr	r3, [pc, #40]	@ (800b634 <BSP_LCD_Refresh+0x50>)
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b60e:	4a0a      	ldr	r2, [pc, #40]	@ (800b638 <BSP_LCD_Refresh+0x54>)
 800b610:	6812      	ldr	r2, [r2, #0]
 800b612:	4610      	mov	r0, r2
 800b614:	4798      	blx	r3
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	da06      	bge.n	800b62a <BSP_LCD_Refresh+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b61c:	f06f 0304 	mvn.w	r3, #4
 800b620:	60fb      	str	r3, [r7, #12]
 800b622:	e002      	b.n	800b62a <BSP_LCD_Refresh+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b624:	f06f 030a 	mvn.w	r3, #10
 800b628:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b62a:	68fb      	ldr	r3, [r7, #12]
}
 800b62c:	4618      	mov	r0, r3
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	20000958 	.word	0x20000958
 800b638:	20000948 	.word	0x20000948

0800b63c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800b63c:	b590      	push	{r4, r7, lr}
 800b63e:	b087      	sub	sp, #28
 800b640:	af00      	add	r7, sp, #0
 800b642:	60f8      	str	r0, [r7, #12]
 800b644:	60b9      	str	r1, [r7, #8]
 800b646:	607a      	str	r2, [r7, #4]
 800b648:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b64a:	2300      	movs	r3, #0
 800b64c:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d003      	beq.n	800b65c <BSP_LCD_DrawBitmap+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b654:	f06f 0301 	mvn.w	r3, #1
 800b658:	617b      	str	r3, [r7, #20]
 800b65a:	e017      	b.n	800b68c <BSP_LCD_DrawBitmap+0x50>
  }
  else if(LcdDrv->DrawBitmap != NULL)
 800b65c:	4b0e      	ldr	r3, [pc, #56]	@ (800b698 <BSP_LCD_DrawBitmap+0x5c>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00f      	beq.n	800b686 <BSP_LCD_DrawBitmap+0x4a>
  {
    /* Draw the bitmap on LCD */
    if (LcdDrv->DrawBitmap(LcdCompObj, Xpos, Ypos, pBmp) < 0)
 800b666:	4b0c      	ldr	r3, [pc, #48]	@ (800b698 <BSP_LCD_DrawBitmap+0x5c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800b66c:	4b0b      	ldr	r3, [pc, #44]	@ (800b69c <BSP_LCD_DrawBitmap+0x60>)
 800b66e:	6818      	ldr	r0, [r3, #0]
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	68b9      	ldr	r1, [r7, #8]
 800b676:	47a0      	blx	r4
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	da06      	bge.n	800b68c <BSP_LCD_DrawBitmap+0x50>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b67e:	f06f 0304 	mvn.w	r3, #4
 800b682:	617b      	str	r3, [r7, #20]
 800b684:	e002      	b.n	800b68c <BSP_LCD_DrawBitmap+0x50>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b686:	f06f 030a 	mvn.w	r3, #10
 800b68a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b68c:	697b      	ldr	r3, [r7, #20]
}
 800b68e:	4618      	mov	r0, r3
 800b690:	371c      	adds	r7, #28
 800b692:	46bd      	mov	sp, r7
 800b694:	bd90      	pop	{r4, r7, pc}
 800b696:	bf00      	nop
 800b698:	20000958 	.word	0x20000958
 800b69c:	20000948 	.word	0x20000948

0800b6a0 <BSP_LCD_FillRGBRect>:
  * @param  Width width of the rectangle to fill.
  * @param  Height height of the rectangle to fill.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800b6a0:	b590      	push	{r4, r7, lr}
 800b6a2:	b089      	sub	sp, #36	@ 0x24
 800b6a4:	af02      	add	r7, sp, #8
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
   int32_t ret = BSP_ERROR_NONE;
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <BSP_LCD_FillRGBRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b6b8:	f06f 0301 	mvn.w	r3, #1
 800b6bc:	617b      	str	r3, [r7, #20]
 800b6be:	e01b      	b.n	800b6f8 <BSP_LCD_FillRGBRect+0x58>
  }
  else if(LcdDrv->FillRGBRect != NULL)
 800b6c0:	4b10      	ldr	r3, [pc, #64]	@ (800b704 <BSP_LCD_FillRGBRect+0x64>)
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d013      	beq.n	800b6f2 <BSP_LCD_FillRGBRect+0x52>
  {
    /* shift bitmap on LCD */
    if (LcdDrv->FillRGBRect(LcdCompObj, Xpos, Ypos, pData, Width, Height) < 0)
 800b6ca:	4b0e      	ldr	r3, [pc, #56]	@ (800b704 <BSP_LCD_FillRGBRect+0x64>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800b6d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b708 <BSP_LCD_FillRGBRect+0x68>)
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6d6:	9301      	str	r3, [sp, #4]
 800b6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6da:	9300      	str	r3, [sp, #0]
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	687a      	ldr	r2, [r7, #4]
 800b6e0:	68b9      	ldr	r1, [r7, #8]
 800b6e2:	47a0      	blx	r4
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	da06      	bge.n	800b6f8 <BSP_LCD_FillRGBRect+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6ea:	f06f 0304 	mvn.w	r3, #4
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	e002      	b.n	800b6f8 <BSP_LCD_FillRGBRect+0x58>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b6f2:	f06f 030a 	mvn.w	r3, #10
 800b6f6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b6f8:	697b      	ldr	r3, [r7, #20]
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	371c      	adds	r7, #28
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd90      	pop	{r4, r7, pc}
 800b702:	bf00      	nop
 800b704:	20000958 	.word	0x20000958
 800b708:	20000948 	.word	0x20000948

0800b70c <BSP_LCD_DrawHLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800b70c:	b590      	push	{r4, r7, lr}
 800b70e:	b089      	sub	sp, #36	@ 0x24
 800b710:	af02      	add	r7, sp, #8
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
 800b718:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b71a:	2300      	movs	r3, #0
 800b71c:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d003      	beq.n	800b72c <BSP_LCD_DrawHLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b724:	f06f 0301 	mvn.w	r3, #1
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	e019      	b.n	800b760 <BSP_LCD_DrawHLine+0x54>
  }

  else if(LcdDrv->DrawHLine != NULL)
 800b72c:	4b0f      	ldr	r3, [pc, #60]	@ (800b76c <BSP_LCD_DrawHLine+0x60>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b732:	2b00      	cmp	r3, #0
 800b734:	d011      	beq.n	800b75a <BSP_LCD_DrawHLine+0x4e>
  {
    /* Draw the horizontal line on LCD */
    if (LcdDrv->DrawHLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 800b736:	4b0d      	ldr	r3, [pc, #52]	@ (800b76c <BSP_LCD_DrawHLine+0x60>)
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b73c:	4b0c      	ldr	r3, [pc, #48]	@ (800b770 <BSP_LCD_DrawHLine+0x64>)
 800b73e:	6818      	ldr	r0, [r3, #0]
 800b740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b742:	9300      	str	r3, [sp, #0]
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	68b9      	ldr	r1, [r7, #8]
 800b74a:	47a0      	blx	r4
 800b74c:	4603      	mov	r3, r0
 800b74e:	2b00      	cmp	r3, #0
 800b750:	da06      	bge.n	800b760 <BSP_LCD_DrawHLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b752:	f06f 0304 	mvn.w	r3, #4
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	e002      	b.n	800b760 <BSP_LCD_DrawHLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b75a:	f06f 030a 	mvn.w	r3, #10
 800b75e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b760:	697b      	ldr	r3, [r7, #20]
}
 800b762:	4618      	mov	r0, r3
 800b764:	371c      	adds	r7, #28
 800b766:	46bd      	mov	sp, r7
 800b768:	bd90      	pop	{r4, r7, pc}
 800b76a:	bf00      	nop
 800b76c:	20000958 	.word	0x20000958
 800b770:	20000948 	.word	0x20000948

0800b774 <BSP_LCD_DrawVLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800b774:	b590      	push	{r4, r7, lr}
 800b776:	b089      	sub	sp, #36	@ 0x24
 800b778:	af02      	add	r7, sp, #8
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
 800b780:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d003      	beq.n	800b794 <BSP_LCD_DrawVLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b78c:	f06f 0301 	mvn.w	r3, #1
 800b790:	617b      	str	r3, [r7, #20]
 800b792:	e019      	b.n	800b7c8 <BSP_LCD_DrawVLine+0x54>
  }
  else if(LcdDrv->DrawVLine != NULL)
 800b794:	4b0f      	ldr	r3, [pc, #60]	@ (800b7d4 <BSP_LCD_DrawVLine+0x60>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d011      	beq.n	800b7c2 <BSP_LCD_DrawVLine+0x4e>
  {
    /* Draw the vertical line on LCD */
    if (LcdDrv->DrawVLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 800b79e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d4 <BSP_LCD_DrawVLine+0x60>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 800b7a4:	4b0c      	ldr	r3, [pc, #48]	@ (800b7d8 <BSP_LCD_DrawVLine+0x64>)
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	687a      	ldr	r2, [r7, #4]
 800b7b0:	68b9      	ldr	r1, [r7, #8]
 800b7b2:	47a0      	blx	r4
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	da06      	bge.n	800b7c8 <BSP_LCD_DrawVLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7ba:	f06f 0304 	mvn.w	r3, #4
 800b7be:	617b      	str	r3, [r7, #20]
 800b7c0:	e002      	b.n	800b7c8 <BSP_LCD_DrawVLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b7c2:	f06f 030a 	mvn.w	r3, #10
 800b7c6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b7c8:	697b      	ldr	r3, [r7, #20]
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	371c      	adds	r7, #28
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd90      	pop	{r4, r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	20000958 	.word	0x20000958
 800b7d8:	20000948 	.word	0x20000948

0800b7dc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Color of rectangle
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800b7dc:	b590      	push	{r4, r7, lr}
 800b7de:	b089      	sub	sp, #36	@ 0x24
 800b7e0:	af02      	add	r7, sp, #8
 800b7e2:	60f8      	str	r0, [r7, #12]
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d003      	beq.n	800b7fc <BSP_LCD_FillRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7f4:	f06f 0301 	mvn.w	r3, #1
 800b7f8:	617b      	str	r3, [r7, #20]
 800b7fa:	e012      	b.n	800b822 <BSP_LCD_FillRect+0x46>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, Xpos, Ypos, Width, Height, Color) < 0)
 800b7fc:	4b0b      	ldr	r3, [pc, #44]	@ (800b82c <BSP_LCD_FillRect+0x50>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800b802:	4b0b      	ldr	r3, [pc, #44]	@ (800b830 <BSP_LCD_FillRect+0x54>)
 800b804:	6818      	ldr	r0, [r3, #0]
 800b806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b808:	9301      	str	r3, [sp, #4]
 800b80a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b80c:	9300      	str	r3, [sp, #0]
 800b80e:	683b      	ldr	r3, [r7, #0]
 800b810:	687a      	ldr	r2, [r7, #4]
 800b812:	68b9      	ldr	r1, [r7, #8]
 800b814:	47a0      	blx	r4
 800b816:	4603      	mov	r3, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	da02      	bge.n	800b822 <BSP_LCD_FillRect+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b81c:	f06f 0304 	mvn.w	r3, #4
 800b820:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b822:	697b      	ldr	r3, [r7, #20]
}
 800b824:	4618      	mov	r0, r3
 800b826:	371c      	adds	r7, #28
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd90      	pop	{r4, r7, pc}
 800b82c:	20000958 	.word	0x20000958
 800b830:	20000948 	.word	0x20000948

0800b834 <BSP_LCD_Clear>:
  * @param  Instance LCD Instance
  * @param  Color to set
  * @retval BSP status
  */
int32_t BSP_LCD_Clear(uint32_t Instance, uint32_t Color)
{
 800b834:	b5b0      	push	{r4, r5, r7, lr}
 800b836:	b086      	sub	sp, #24
 800b838:	af02      	add	r7, sp, #8
 800b83a:	6078      	str	r0, [r7, #4]
 800b83c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b83e:	2300      	movs	r3, #0
 800b840:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d003      	beq.n	800b850 <BSP_LCD_Clear+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b848:	f06f 0301 	mvn.w	r3, #1
 800b84c:	60fb      	str	r3, [r7, #12]
 800b84e:	e022      	b.n	800b896 <BSP_LCD_Clear+0x62>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, 0, 0, LcdCtx[Instance].Width, LcdCtx[Instance].Height, Color) < 0)
 800b850:	4b13      	ldr	r3, [pc, #76]	@ (800b8a0 <BSP_LCD_Clear+0x6c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800b856:	4b13      	ldr	r3, [pc, #76]	@ (800b8a4 <BSP_LCD_Clear+0x70>)
 800b858:	6818      	ldr	r0, [r3, #0]
 800b85a:	4913      	ldr	r1, [pc, #76]	@ (800b8a8 <BSP_LCD_Clear+0x74>)
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	4613      	mov	r3, r2
 800b860:	005b      	lsls	r3, r3, #1
 800b862:	4413      	add	r3, r2
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	440b      	add	r3, r1
 800b868:	6819      	ldr	r1, [r3, #0]
 800b86a:	4d0f      	ldr	r5, [pc, #60]	@ (800b8a8 <BSP_LCD_Clear+0x74>)
 800b86c:	687a      	ldr	r2, [r7, #4]
 800b86e:	4613      	mov	r3, r2
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	4413      	add	r3, r2
 800b874:	009b      	lsls	r3, r3, #2
 800b876:	442b      	add	r3, r5
 800b878:	3304      	adds	r3, #4
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	683a      	ldr	r2, [r7, #0]
 800b87e:	9201      	str	r2, [sp, #4]
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	460b      	mov	r3, r1
 800b884:	2200      	movs	r2, #0
 800b886:	2100      	movs	r1, #0
 800b888:	47a0      	blx	r4
 800b88a:	4603      	mov	r3, r0
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	da02      	bge.n	800b896 <BSP_LCD_Clear+0x62>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b890:	f06f 0304 	mvn.w	r3, #4
 800b894:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b896:	68fb      	ldr	r3, [r7, #12]
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3710      	adds	r7, #16
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bdb0      	pop	{r4, r5, r7, pc}
 800b8a0:	20000958 	.word	0x20000958
 800b8a4:	20000948 	.word	0x20000948
 800b8a8:	2000094c 	.word	0x2000094c

0800b8ac <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color pointer to RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800b8ac:	b590      	push	{r4, r7, lr}
 800b8ae:	b087      	sub	sp, #28
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	60f8      	str	r0, [r7, #12]
 800b8b4:	60b9      	str	r1, [r7, #8]
 800b8b6:	607a      	str	r2, [r7, #4]
 800b8b8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <BSP_LCD_ReadPixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b8c4:	f06f 0301 	mvn.w	r3, #1
 800b8c8:	617b      	str	r3, [r7, #20]
 800b8ca:	e00e      	b.n	800b8ea <BSP_LCD_ReadPixel+0x3e>
  }
  else
  {
    if(LcdDrv->GetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 800b8cc:	4b09      	ldr	r3, [pc, #36]	@ (800b8f4 <BSP_LCD_ReadPixel+0x48>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800b8d2:	4b09      	ldr	r3, [pc, #36]	@ (800b8f8 <BSP_LCD_ReadPixel+0x4c>)
 800b8d4:	6818      	ldr	r0, [r3, #0]
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	68b9      	ldr	r1, [r7, #8]
 800b8dc:	47a0      	blx	r4
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	da02      	bge.n	800b8ea <BSP_LCD_ReadPixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b8e4:	f06f 0304 	mvn.w	r3, #4
 800b8e8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b8ea:	697b      	ldr	r3, [r7, #20]
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	371c      	adds	r7, #28
 800b8f0:	46bd      	mov	sp, r7
 800b8f2:	bd90      	pop	{r4, r7, pc}
 800b8f4:	20000958 	.word	0x20000958
 800b8f8:	20000948 	.word	0x20000948

0800b8fc <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800b8fc:	b590      	push	{r4, r7, lr}
 800b8fe:	b087      	sub	sp, #28
 800b900:	af00      	add	r7, sp, #0
 800b902:	60f8      	str	r0, [r7, #12]
 800b904:	60b9      	str	r1, [r7, #8]
 800b906:	607a      	str	r2, [r7, #4]
 800b908:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b90a:	2300      	movs	r3, #0
 800b90c:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d003      	beq.n	800b91c <BSP_LCD_WritePixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b914:	f06f 0301 	mvn.w	r3, #1
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	e00e      	b.n	800b93a <BSP_LCD_WritePixel+0x3e>
  }
  else
  {
    if(LcdDrv->SetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 800b91c:	4b09      	ldr	r3, [pc, #36]	@ (800b944 <BSP_LCD_WritePixel+0x48>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 800b922:	4b09      	ldr	r3, [pc, #36]	@ (800b948 <BSP_LCD_WritePixel+0x4c>)
 800b924:	6818      	ldr	r0, [r3, #0]
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	687a      	ldr	r2, [r7, #4]
 800b92a:	68b9      	ldr	r1, [r7, #8]
 800b92c:	47a0      	blx	r4
 800b92e:	4603      	mov	r3, r0
 800b930:	2b00      	cmp	r3, #0
 800b932:	da02      	bge.n	800b93a <BSP_LCD_WritePixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b934:	f06f 0304 	mvn.w	r3, #4
 800b938:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b93a:	697b      	ldr	r3, [r7, #20]
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	371c      	adds	r7, #28
 800b940:	46bd      	mov	sp, r7
 800b942:	bd90      	pop	{r4, r7, pc}
 800b944:	20000958 	.word	0x20000958
 800b948:	20000948 	.word	0x20000948

0800b94c <BSP_LCD_WriteReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_WriteReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	4603      	mov	r3, r0
 800b954:	6039      	str	r1, [r7, #0]
 800b956:	80fb      	strh	r3, [r7, #6]
 800b958:	4613      	mov	r3, r2
 800b95a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b95c:	2300      	movs	r3, #0
 800b95e:	60fb      	str	r3, [r7, #12]

  /* Send Data */
  if((ret == BSP_ERROR_NONE) && (Length > 0U))
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10d      	bne.n	800b982 <BSP_LCD_WriteReg+0x36>
 800b966:	88bb      	ldrh	r3, [r7, #4]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d00a      	beq.n	800b982 <BSP_LCD_WriteReg+0x36>
  {
    if(BSP_LCD_SendData(pData, Length) != BSP_ERROR_NONE)
 800b96c:	88bb      	ldrh	r3, [r7, #4]
 800b96e:	4619      	mov	r1, r3
 800b970:	6838      	ldr	r0, [r7, #0]
 800b972:	f000 f80b 	bl	800b98c <BSP_LCD_SendData>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <BSP_LCD_WriteReg+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b97c:	f06f 0307 	mvn.w	r3, #7
 800b980:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b982:	68fb      	ldr	r3, [r7, #12]
}
 800b984:	4618      	mov	r0, r3
 800b986:	3710      	adds	r7, #16
 800b988:	46bd      	mov	sp, r7
 800b98a:	bd80      	pop	{r7, pc}

0800b98c <BSP_LCD_SendData>:
  * @param  pData pointer to data to write to LCD SRAM.
  * @param  Length length of data to write to LCD SRAM
  * @retval Error status
  */
int32_t BSP_LCD_SendData(uint8_t *pData, uint16_t Length)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800b998:	2300      	movs	r3, #0
 800b99a:	60fb      	str	r3, [r7, #12]
  if(Length==1)
 800b99c:	887b      	ldrh	r3, [r7, #2]
 800b99e:	2b01      	cmp	r3, #1
 800b9a0:	d11b      	bne.n	800b9da <BSP_LCD_SendData+0x4e>
  {
    /* Reset LCD control line CS */
    LCD_CS_LOW();
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2101      	movs	r1, #1
 800b9a6:	4820      	ldr	r0, [pc, #128]	@ (800ba28 <BSP_LCD_SendData+0x9c>)
 800b9a8:	f001 fa78 	bl	800ce9c <HAL_GPIO_WritePin>
    LCD_DC_LOW();
 800b9ac:	2200      	movs	r2, #0
 800b9ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9b2:	481e      	ldr	r0, [pc, #120]	@ (800ba2c <BSP_LCD_SendData+0xa0>)
 800b9b4:	f001 fa72 	bl	800ce9c <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 800b9b8:	887b      	ldrh	r3, [r7, #2]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	6878      	ldr	r0, [r7, #4]
 800b9be:	f7ff fc5b 	bl	800b278 <BSP_SPI1_Send>
 800b9c2:	4603      	mov	r3, r0
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d002      	beq.n	800b9ce <BSP_LCD_SendData+0x42>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 800b9c8:	f06f 0307 	mvn.w	r3, #7
 800b9cc:	60fb      	str	r3, [r7, #12]
    }
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	2101      	movs	r1, #1
 800b9d2:	4815      	ldr	r0, [pc, #84]	@ (800ba28 <BSP_LCD_SendData+0x9c>)
 800b9d4:	f001 fa62 	bl	800ce9c <HAL_GPIO_WritePin>
 800b9d8:	e020      	b.n	800ba1c <BSP_LCD_SendData+0x90>
  }
  else
  { 
    LCD_CS_LOW();
 800b9da:	2200      	movs	r2, #0
 800b9dc:	2101      	movs	r1, #1
 800b9de:	4812      	ldr	r0, [pc, #72]	@ (800ba28 <BSP_LCD_SendData+0x9c>)
 800b9e0:	f001 fa5c 	bl	800ce9c <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800b9ea:	4810      	ldr	r0, [pc, #64]	@ (800ba2c <BSP_LCD_SendData+0xa0>)
 800b9ec:	f001 fa56 	bl	800ce9c <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 800b9f0:	887b      	ldrh	r3, [r7, #2]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f7ff fc3f 	bl	800b278 <BSP_SPI1_Send>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d002      	beq.n	800ba06 <BSP_LCD_SendData+0x7a>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 800ba00:	f06f 0307 	mvn.w	r3, #7
 800ba04:	60fb      	str	r3, [r7, #12]
    }
    LCD_DC_LOW() ;
 800ba06:	2200      	movs	r2, #0
 800ba08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800ba0c:	4807      	ldr	r0, [pc, #28]	@ (800ba2c <BSP_LCD_SendData+0xa0>)
 800ba0e:	f001 fa45 	bl	800ce9c <HAL_GPIO_WritePin>
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 800ba12:	2201      	movs	r2, #1
 800ba14:	2101      	movs	r1, #1
 800ba16:	4804      	ldr	r0, [pc, #16]	@ (800ba28 <BSP_LCD_SendData+0x9c>)
 800ba18:	f001 fa40 	bl	800ce9c <HAL_GPIO_WritePin>
  }
  
  return ret;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	48001c00 	.word	0x48001c00
 800ba2c:	48000800 	.word	0x48000800

0800ba30 <BSP_LCD_ReadReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_ReadReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	4603      	mov	r3, r0
 800ba38:	6039      	str	r1, [r7, #0]
 800ba3a:	80fb      	strh	r3, [r7, #6]
 800ba3c:	4613      	mov	r3, r2
 800ba3e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ba40:	2300      	movs	r3, #0
 800ba42:	60fb      	str	r3, [r7, #12]
  UNUSED(Length);
  
  /* Send Reg value to Read */
  if(BSP_LCD_WriteReg(Reg, pData, 0) != BSP_ERROR_NONE)
 800ba44:	88fb      	ldrh	r3, [r7, #6]
 800ba46:	2200      	movs	r2, #0
 800ba48:	6839      	ldr	r1, [r7, #0]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff ff7e 	bl	800b94c <BSP_LCD_WriteReg>
 800ba50:	4603      	mov	r3, r0
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d002      	beq.n	800ba5c <BSP_LCD_ReadReg+0x2c>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800ba56:	f06f 0307 	mvn.w	r3, #7
 800ba5a:	60fb      	str	r3, [r7, #12]
  }
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	2101      	movs	r1, #1
 800ba60:	480c      	ldr	r0, [pc, #48]	@ (800ba94 <BSP_LCD_ReadReg+0x64>)
 800ba62:	f001 fa1b 	bl	800ce9c <HAL_GPIO_WritePin>
  
  if (ret == BSP_ERROR_NONE)
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d109      	bne.n	800ba80 <BSP_LCD_ReadReg+0x50>
  { 
    if(BSP_SPI1_Recv(pData, 2) != BSP_ERROR_NONE)
 800ba6c:	2102      	movs	r1, #2
 800ba6e:	6838      	ldr	r0, [r7, #0]
 800ba70:	f7ff fc1e 	bl	800b2b0 <BSP_SPI1_Recv>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <BSP_LCD_ReadReg+0x50>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800ba7a:	f06f 0307 	mvn.w	r3, #7
 800ba7e:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800ba80:	2201      	movs	r2, #1
 800ba82:	2101      	movs	r1, #1
 800ba84:	4803      	ldr	r0, [pc, #12]	@ (800ba94 <BSP_LCD_ReadReg+0x64>)
 800ba86:	f001 fa09 	bl	800ce9c <HAL_GPIO_WritePin>
  
  return ret;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	48001c00 	.word	0x48001c00

0800ba98 <LCD_MspInit>:
/**
  * @brief  Initialize the BSP LTDC Msp.
  * @retval None
  */
static void LCD_MspInit(void)
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	af00      	add	r7, sp, #0
  /* turn LCD on = drive pin low (active low) */
  LCD_CS_LOW();
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	2101      	movs	r1, #1
 800baa0:	4802      	ldr	r0, [pc, #8]	@ (800baac <LCD_MspInit+0x14>)
 800baa2:	f001 f9fb 	bl	800ce9c <HAL_GPIO_WritePin>
}
 800baa6:	bf00      	nop
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	48001c00 	.word	0x48001c00

0800bab0 <SSD1315_Probe>:
  * @brief  Register Bus IOs for instance 0 if SSD1315 ID is OK
  * @param  Orientation
  * @retval BSP status
  */
static int32_t SSD1315_Probe(uint32_t Orientation)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b088      	sub	sp, #32
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  int32_t                 ret = BSP_ERROR_NONE;
 800bab8:	2300      	movs	r3, #0
 800baba:	61fb      	str	r3, [r7, #28]
  SSD1315_IO_t            IOCtx;
  static SSD1315_Object_t SSD1315Obj;
  
  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 800babc:	4b18      	ldr	r3, [pc, #96]	@ (800bb20 <SSD1315_Probe+0x70>)
 800babe:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit           = LCD_IO_DeInit;
 800bac0:	4b18      	ldr	r3, [pc, #96]	@ (800bb24 <SSD1315_Probe+0x74>)
 800bac2:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg          = BSP_LCD_ReadReg;
 800bac4:	4b18      	ldr	r3, [pc, #96]	@ (800bb28 <SSD1315_Probe+0x78>)
 800bac6:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg         = BSP_LCD_WriteReg;
 800bac8:	4b18      	ldr	r3, [pc, #96]	@ (800bb2c <SSD1315_Probe+0x7c>)
 800baca:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick          = BSP_GetTick;
 800bacc:	4b18      	ldr	r3, [pc, #96]	@ (800bb30 <SSD1315_Probe+0x80>)
 800bace:	61bb      	str	r3, [r7, #24]
  
  if(SSD1315_RegisterBusIO(&SSD1315Obj, &IOCtx) != SSD1315_OK)
 800bad0:	f107 0308 	add.w	r3, r7, #8
 800bad4:	4619      	mov	r1, r3
 800bad6:	4817      	ldr	r0, [pc, #92]	@ (800bb34 <SSD1315_Probe+0x84>)
 800bad8:	f7fe f854 	bl	8009b84 <SSD1315_RegisterBusIO>
 800badc:	4603      	mov	r3, r0
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d003      	beq.n	800baea <SSD1315_Probe+0x3a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bae2:	f06f 0306 	mvn.w	r3, #6
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	e015      	b.n	800bb16 <SSD1315_Probe+0x66>
  }
  else
  {
    LcdCompObj = &SSD1315Obj;
 800baea:	4b13      	ldr	r3, [pc, #76]	@ (800bb38 <SSD1315_Probe+0x88>)
 800baec:	4a11      	ldr	r2, [pc, #68]	@ (800bb34 <SSD1315_Probe+0x84>)
 800baee:	601a      	str	r2, [r3, #0]
    
    LCD_MspInit();
 800baf0:	f7ff ffd2 	bl	800ba98 <LCD_MspInit>
    
    /* LCD Initialization */
    LcdDrv = (SSD1315_Drv_t *)&SSD1315_Driver;
 800baf4:	4b11      	ldr	r3, [pc, #68]	@ (800bb3c <SSD1315_Probe+0x8c>)
 800baf6:	4a12      	ldr	r2, [pc, #72]	@ (800bb40 <SSD1315_Probe+0x90>)
 800baf8:	601a      	str	r2, [r3, #0]
    if(LcdDrv->Init(LcdCompObj, SSD1315_FORMAT_DEFAULT, Orientation) != SSD1315_OK)
 800bafa:	4b10      	ldr	r3, [pc, #64]	@ (800bb3c <SSD1315_Probe+0x8c>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a0d      	ldr	r2, [pc, #52]	@ (800bb38 <SSD1315_Probe+0x88>)
 800bb02:	6810      	ldr	r0, [r2, #0]
 800bb04:	687a      	ldr	r2, [r7, #4]
 800bb06:	2100      	movs	r1, #0
 800bb08:	4798      	blx	r3
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d002      	beq.n	800bb16 <SSD1315_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bb10:	f06f 0304 	mvn.w	r3, #4
 800bb14:	61fb      	str	r3, [r7, #28]
    }
  }
  
  return ret;
 800bb16:	69fb      	ldr	r3, [r7, #28]
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3720      	adds	r7, #32
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	bd80      	pop	{r7, pc}
 800bb20:	0800bb45 	.word	0x0800bb45
 800bb24:	0800bc09 	.word	0x0800bc09
 800bb28:	0800ba31 	.word	0x0800ba31
 800bb2c:	0800b94d 	.word	0x0800b94d
 800bb30:	0800b2f5 	.word	0x0800b2f5
 800bb34:	2000095c 	.word	0x2000095c
 800bb38:	20000948 	.word	0x20000948
 800bb3c:	20000958 	.word	0x20000958
 800bb40:	20000008 	.word	0x20000008

0800bb44 <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Configure the LCD Chip Select pin --------------------------------------*/
  LCD_CS_GPIO_CLK_ENABLE();
 800bb4e:	2080      	movs	r0, #128	@ 0x80
 800bb50:	f7ff fc32 	bl	800b3b8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_CS_PIN;
 800bb54:	2301      	movs	r3, #1
 800bb56:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800bb58:	2301      	movs	r3, #1
 800bb5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800bb5c:	2300      	movs	r3, #0
 800bb5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800bb60:	2300      	movs	r3, #0
 800bb62:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &GPIO_InitStruct);
 800bb64:	463b      	mov	r3, r7
 800bb66:	4619      	mov	r1, r3
 800bb68:	4825      	ldr	r0, [pc, #148]	@ (800bc00 <LCD_IO_Init+0xbc>)
 800bb6a:	f000 ff49 	bl	800ca00 <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_CS_LOW();
 800bb6e:	2200      	movs	r2, #0
 800bb70:	2101      	movs	r1, #1
 800bb72:	4823      	ldr	r0, [pc, #140]	@ (800bc00 <LCD_IO_Init+0xbc>)
 800bb74:	f001 f992 	bl	800ce9c <HAL_GPIO_WritePin>
  
  /* Configure the LCD Data/Control pin -------------------------------------*/
  LCD_DC_GPIO_CLK_ENABLE();
 800bb78:	2004      	movs	r0, #4
 800bb7a:	f7ff fc1d 	bl	800b3b8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_DC_PIN;
 800bb7e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb82:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800bb84:	2301      	movs	r3, #1
 800bb86:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_PORT, &GPIO_InitStruct);
 800bb90:	463b      	mov	r3, r7
 800bb92:	4619      	mov	r1, r3
 800bb94:	481b      	ldr	r0, [pc, #108]	@ (800bc04 <LCD_IO_Init+0xc0>)
 800bb96:	f000 ff33 	bl	800ca00 <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_DC_LOW();
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bba0:	4818      	ldr	r0, [pc, #96]	@ (800bc04 <LCD_IO_Init+0xc0>)
 800bba2:	f001 f97b 	bl	800ce9c <HAL_GPIO_WritePin>
  
  /* Configure the LCD Reset pin --------------------------------------------*/
  LCD_RST_GPIO_CLK_ENABLE();
 800bba6:	2004      	movs	r0, #4
 800bba8:	f7ff fc06 	bl	800b3b8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_RST_PIN;
 800bbac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bbb0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800bbb2:	2301      	movs	r3, #1
 800bbb4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_RST_GPIO_PORT, &GPIO_InitStruct);
 800bbbe:	463b      	mov	r3, r7
 800bbc0:	4619      	mov	r1, r3
 800bbc2:	4810      	ldr	r0, [pc, #64]	@ (800bc04 <LCD_IO_Init+0xc0>)
 800bbc4:	f000 ff1c 	bl	800ca00 <HAL_GPIO_Init>
  
  if (BSP_SPI1_Init() != BSP_ERROR_NONE)
 800bbc8:	f7ff faf0 	bl	800b1ac <BSP_SPI1_Init>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d002      	beq.n	800bbd8 <LCD_IO_Init+0x94>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bbd2:	f06f 0307 	mvn.w	r3, #7
 800bbd6:	617b      	str	r3, [r7, #20]
  }
  LCD_RST_LOW();
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bbde:	4809      	ldr	r0, [pc, #36]	@ (800bc04 <LCD_IO_Init+0xc0>)
 800bbe0:	f001 f95c 	bl	800ce9c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800bbe4:	2001      	movs	r0, #1
 800bbe6:	f7fc fbad 	bl	8008344 <HAL_Delay>
  LCD_RST_HIGH();
 800bbea:	2201      	movs	r2, #1
 800bbec:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bbf0:	4804      	ldr	r0, [pc, #16]	@ (800bc04 <LCD_IO_Init+0xc0>)
 800bbf2:	f001 f953 	bl	800ce9c <HAL_GPIO_WritePin>
  return ret;
 800bbf6:	697b      	ldr	r3, [r7, #20]
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3718      	adds	r7, #24
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	48001c00 	.word	0x48001c00
 800bc04:	48000800 	.word	0x48000800

0800bc08 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(LCD_CS_GPIO_PORT, LCD_CS_PIN);
 800bc0c:	2101      	movs	r1, #1
 800bc0e:	4808      	ldr	r0, [pc, #32]	@ (800bc30 <LCD_IO_DeInit+0x28>)
 800bc10:	f001 f866 	bl	800cce0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(LCD_DC_GPIO_PORT, LCD_DC_PIN);
 800bc14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc18:	4806      	ldr	r0, [pc, #24]	@ (800bc34 <LCD_IO_DeInit+0x2c>)
 800bc1a:	f001 f861 	bl	800cce0 <HAL_GPIO_DeInit>
  /* Uninitialize LCD Reset Pin */  
  HAL_GPIO_DeInit(LCD_RST_GPIO_PORT, LCD_RST_PIN);
 800bc1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bc22:	4804      	ldr	r0, [pc, #16]	@ (800bc34 <LCD_IO_DeInit+0x2c>)
 800bc24:	f001 f85c 	bl	800cce0 <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 800bc28:	2300      	movs	r3, #0
}
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	bd80      	pop	{r7, pc}
 800bc2e:	bf00      	nop
 800bc30:	48001c00 	.word	0x48001c00
 800bc34:	48000800 	.word	0x48000800

0800bc38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800bc3c:	4b26      	ldr	r3, [pc, #152]	@ (800bcd8 <SystemInit+0xa0>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800bc42:	4b25      	ldr	r3, [pc, #148]	@ (800bcd8 <SystemInit+0xa0>)
 800bc44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bc48:	4a23      	ldr	r2, [pc, #140]	@ (800bcd8 <SystemInit+0xa0>)
 800bc4a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bc4e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800bc52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc5c:	f043 0301 	orr.w	r3, r3, #1
 800bc60:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800bc62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc66:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800bc6a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800bc6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bc76:	4b19      	ldr	r3, [pc, #100]	@ (800bcdc <SystemInit+0xa4>)
 800bc78:	4013      	ands	r3, r2
 800bc7a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800bc7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc84:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc88:	f023 0305 	bic.w	r3, r3, #5
 800bc8c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800bc90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bc94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bc98:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bc9c:	f023 0301 	bic.w	r3, r3, #1
 800bca0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800bca4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bca8:	4a0d      	ldr	r2, [pc, #52]	@ (800bce0 <SystemInit+0xa8>)
 800bcaa:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800bcac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcb0:	4a0b      	ldr	r2, [pc, #44]	@ (800bce0 <SystemInit+0xa8>)
 800bcb2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bcb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bcbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcc2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bcc4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bcc8:	2200      	movs	r2, #0
 800bcca:	619a      	str	r2, [r3, #24]
}
 800bccc:	bf00      	nop
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd4:	4770      	bx	lr
 800bcd6:	bf00      	nop
 800bcd8:	e000ed00 	.word	0xe000ed00
 800bcdc:	faf6fefb 	.word	0xfaf6fefb
 800bce0:	22041000 	.word	0x22041000

0800bce4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800bce4:	b480      	push	{r7}
 800bce6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800bce8:	4b05      	ldr	r3, [pc, #20]	@ (800bd00 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	4a04      	ldr	r2, [pc, #16]	@ (800bd00 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800bcee:	f043 0301 	orr.w	r3, r3, #1
 800bcf2:	6053      	str	r3, [r2, #4]
}
 800bcf4:	bf00      	nop
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
 800bcfe:	bf00      	nop
 800bd00:	e0042000 	.word	0xe0042000

0800bd04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bd0e:	4b0c      	ldr	r3, [pc, #48]	@ (800bd40 <HAL_Init+0x3c>)
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a0b      	ldr	r2, [pc, #44]	@ (800bd40 <HAL_Init+0x3c>)
 800bd14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bd18:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800bd1a:	2003      	movs	r0, #3
 800bd1c:	f000 f9ba 	bl	800c094 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bd20:	2000      	movs	r0, #0
 800bd22:	f000 f80f 	bl	800bd44 <HAL_InitTick>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d002      	beq.n	800bd32 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800bd2c:	2301      	movs	r3, #1
 800bd2e:	71fb      	strb	r3, [r7, #7]
 800bd30:	e001      	b.n	800bd36 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bd32:	f7fc fba7 	bl	8008484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bd36:	79fb      	ldrb	r3, [r7, #7]
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}
 800bd40:	58004000 	.word	0x58004000

0800bd44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b084      	sub	sp, #16
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800bd50:	4b17      	ldr	r3, [pc, #92]	@ (800bdb0 <HAL_InitTick+0x6c>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d024      	beq.n	800bda2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800bd58:	f002 fa94 	bl	800e284 <HAL_RCC_GetHCLKFreq>
 800bd5c:	4602      	mov	r2, r0
 800bd5e:	4b14      	ldr	r3, [pc, #80]	@ (800bdb0 <HAL_InitTick+0x6c>)
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	4619      	mov	r1, r3
 800bd64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800bd68:	fbb3 f3f1 	udiv	r3, r3, r1
 800bd6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd70:	4618      	mov	r0, r3
 800bd72:	f000 f9d0 	bl	800c116 <HAL_SYSTICK_Config>
 800bd76:	4603      	mov	r3, r0
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d10f      	bne.n	800bd9c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	2b0f      	cmp	r3, #15
 800bd80:	d809      	bhi.n	800bd96 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800bd82:	2200      	movs	r2, #0
 800bd84:	6879      	ldr	r1, [r7, #4]
 800bd86:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8a:	f000 f98e 	bl	800c0aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800bd8e:	4a09      	ldr	r2, [pc, #36]	@ (800bdb4 <HAL_InitTick+0x70>)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6013      	str	r3, [r2, #0]
 800bd94:	e007      	b.n	800bda6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	73fb      	strb	r3, [r7, #15]
 800bd9a:	e004      	b.n	800bda6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	73fb      	strb	r3, [r7, #15]
 800bda0:	e001      	b.n	800bda6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800bda2:	2301      	movs	r3, #1
 800bda4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800bda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}
 800bdb0:	20000090 	.word	0x20000090
 800bdb4:	2000008c 	.word	0x2000008c

0800bdb8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bdb8:	b480      	push	{r7}
 800bdba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800bdbc:	4b06      	ldr	r3, [pc, #24]	@ (800bdd8 <HAL_IncTick+0x20>)
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4b06      	ldr	r3, [pc, #24]	@ (800bddc <HAL_IncTick+0x24>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	4413      	add	r3, r2
 800bdc8:	4a04      	ldr	r2, [pc, #16]	@ (800bddc <HAL_IncTick+0x24>)
 800bdca:	6013      	str	r3, [r2, #0]
}
 800bdcc:	bf00      	nop
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	20000090 	.word	0x20000090
 800bddc:	20000984 	.word	0x20000984

0800bde0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bde0:	b480      	push	{r7}
 800bde2:	af00      	add	r7, sp, #0
  return uwTick;
 800bde4:	4b03      	ldr	r3, [pc, #12]	@ (800bdf4 <HAL_GetTick+0x14>)
 800bde6:	681b      	ldr	r3, [r3, #0]
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr
 800bdf2:	bf00      	nop
 800bdf4:	20000984 	.word	0x20000984

0800bdf8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800bdfc:	4b03      	ldr	r3, [pc, #12]	@ (800be0c <HAL_GetTickPrio+0x14>)
 800bdfe:	681b      	ldr	r3, [r3, #0]
}
 800be00:	4618      	mov	r0, r3
 800be02:	46bd      	mov	sp, r7
 800be04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be08:	4770      	bx	lr
 800be0a:	bf00      	nop
 800be0c:	2000008c 	.word	0x2000008c

0800be10 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800be10:	b480      	push	{r7}
 800be12:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800be14:	4b03      	ldr	r3, [pc, #12]	@ (800be24 <HAL_GetTickFreq+0x14>)
 800be16:	781b      	ldrb	r3, [r3, #0]
}
 800be18:	4618      	mov	r0, r3
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr
 800be22:	bf00      	nop
 800be24:	20000090 	.word	0x20000090

0800be28 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800be2c:	f7ff ff5a 	bl	800bce4 <LL_DBGMCU_EnableDBGSleepMode>
}
 800be30:	bf00      	nop
 800be32:	bd80      	pop	{r7, pc}

0800be34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f003 0307 	and.w	r3, r3, #7
 800be42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800be44:	4b0c      	ldr	r3, [pc, #48]	@ (800be78 <__NVIC_SetPriorityGrouping+0x44>)
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800be4a:	68ba      	ldr	r2, [r7, #8]
 800be4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800be50:	4013      	ands	r3, r2
 800be52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800be5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800be60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800be66:	4a04      	ldr	r2, [pc, #16]	@ (800be78 <__NVIC_SetPriorityGrouping+0x44>)
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	60d3      	str	r3, [r2, #12]
}
 800be6c:	bf00      	nop
 800be6e:	3714      	adds	r7, #20
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr
 800be78:	e000ed00 	.word	0xe000ed00

0800be7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800be7c:	b480      	push	{r7}
 800be7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800be80:	4b04      	ldr	r3, [pc, #16]	@ (800be94 <__NVIC_GetPriorityGrouping+0x18>)
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	0a1b      	lsrs	r3, r3, #8
 800be86:	f003 0307 	and.w	r3, r3, #7
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	46bd      	mov	sp, r7
 800be8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be92:	4770      	bx	lr
 800be94:	e000ed00 	.word	0xe000ed00

0800be98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800be98:	b480      	push	{r7}
 800be9a:	b083      	sub	sp, #12
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	4603      	mov	r3, r0
 800bea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	db0b      	blt.n	800bec2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	f003 021f 	and.w	r2, r3, #31
 800beb0:	4907      	ldr	r1, [pc, #28]	@ (800bed0 <__NVIC_EnableIRQ+0x38>)
 800beb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800beb6:	095b      	lsrs	r3, r3, #5
 800beb8:	2001      	movs	r0, #1
 800beba:	fa00 f202 	lsl.w	r2, r0, r2
 800bebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bec2:	bf00      	nop
 800bec4:	370c      	adds	r7, #12
 800bec6:	46bd      	mov	sp, r7
 800bec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800becc:	4770      	bx	lr
 800bece:	bf00      	nop
 800bed0:	e000e100 	.word	0xe000e100

0800bed4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	4603      	mov	r3, r0
 800bedc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	db12      	blt.n	800bf0c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bee6:	79fb      	ldrb	r3, [r7, #7]
 800bee8:	f003 021f 	and.w	r2, r3, #31
 800beec:	490a      	ldr	r1, [pc, #40]	@ (800bf18 <__NVIC_DisableIRQ+0x44>)
 800beee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bef2:	095b      	lsrs	r3, r3, #5
 800bef4:	2001      	movs	r0, #1
 800bef6:	fa00 f202 	lsl.w	r2, r0, r2
 800befa:	3320      	adds	r3, #32
 800befc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bf00:	f3bf 8f4f 	dsb	sy
}
 800bf04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bf06:	f3bf 8f6f 	isb	sy
}
 800bf0a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bf0c:	bf00      	nop
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr
 800bf18:	e000e100 	.word	0xe000e100

0800bf1c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	4603      	mov	r3, r0
 800bf24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	db0c      	blt.n	800bf48 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bf2e:	79fb      	ldrb	r3, [r7, #7]
 800bf30:	f003 021f 	and.w	r2, r3, #31
 800bf34:	4907      	ldr	r1, [pc, #28]	@ (800bf54 <__NVIC_SetPendingIRQ+0x38>)
 800bf36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf3a:	095b      	lsrs	r3, r3, #5
 800bf3c:	2001      	movs	r0, #1
 800bf3e:	fa00 f202 	lsl.w	r2, r0, r2
 800bf42:	3340      	adds	r3, #64	@ 0x40
 800bf44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bf48:	bf00      	nop
 800bf4a:	370c      	adds	r7, #12
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf52:	4770      	bx	lr
 800bf54:	e000e100 	.word	0xe000e100

0800bf58 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b083      	sub	sp, #12
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	4603      	mov	r3, r0
 800bf60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	db0c      	blt.n	800bf84 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bf6a:	79fb      	ldrb	r3, [r7, #7]
 800bf6c:	f003 021f 	and.w	r2, r3, #31
 800bf70:	4907      	ldr	r1, [pc, #28]	@ (800bf90 <__NVIC_ClearPendingIRQ+0x38>)
 800bf72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf76:	095b      	lsrs	r3, r3, #5
 800bf78:	2001      	movs	r0, #1
 800bf7a:	fa00 f202 	lsl.w	r2, r0, r2
 800bf7e:	3360      	adds	r3, #96	@ 0x60
 800bf80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800bf84:	bf00      	nop
 800bf86:	370c      	adds	r7, #12
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf8e:	4770      	bx	lr
 800bf90:	e000e100 	.word	0xe000e100

0800bf94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	6039      	str	r1, [r7, #0]
 800bf9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	db0a      	blt.n	800bfbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	b2da      	uxtb	r2, r3
 800bfac:	490c      	ldr	r1, [pc, #48]	@ (800bfe0 <__NVIC_SetPriority+0x4c>)
 800bfae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfb2:	0112      	lsls	r2, r2, #4
 800bfb4:	b2d2      	uxtb	r2, r2
 800bfb6:	440b      	add	r3, r1
 800bfb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800bfbc:	e00a      	b.n	800bfd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	b2da      	uxtb	r2, r3
 800bfc2:	4908      	ldr	r1, [pc, #32]	@ (800bfe4 <__NVIC_SetPriority+0x50>)
 800bfc4:	79fb      	ldrb	r3, [r7, #7]
 800bfc6:	f003 030f 	and.w	r3, r3, #15
 800bfca:	3b04      	subs	r3, #4
 800bfcc:	0112      	lsls	r2, r2, #4
 800bfce:	b2d2      	uxtb	r2, r2
 800bfd0:	440b      	add	r3, r1
 800bfd2:	761a      	strb	r2, [r3, #24]
}
 800bfd4:	bf00      	nop
 800bfd6:	370c      	adds	r7, #12
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	e000e100 	.word	0xe000e100
 800bfe4:	e000ed00 	.word	0xe000ed00

0800bfe8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b089      	sub	sp, #36	@ 0x24
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	60f8      	str	r0, [r7, #12]
 800bff0:	60b9      	str	r1, [r7, #8]
 800bff2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	f003 0307 	and.w	r3, r3, #7
 800bffa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	f1c3 0307 	rsb	r3, r3, #7
 800c002:	2b04      	cmp	r3, #4
 800c004:	bf28      	it	cs
 800c006:	2304      	movcs	r3, #4
 800c008:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	3304      	adds	r3, #4
 800c00e:	2b06      	cmp	r3, #6
 800c010:	d902      	bls.n	800c018 <NVIC_EncodePriority+0x30>
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	3b03      	subs	r3, #3
 800c016:	e000      	b.n	800c01a <NVIC_EncodePriority+0x32>
 800c018:	2300      	movs	r3, #0
 800c01a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c01c:	f04f 32ff 	mov.w	r2, #4294967295
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	fa02 f303 	lsl.w	r3, r2, r3
 800c026:	43da      	mvns	r2, r3
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	401a      	ands	r2, r3
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c030:	f04f 31ff 	mov.w	r1, #4294967295
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	fa01 f303 	lsl.w	r3, r1, r3
 800c03a:	43d9      	mvns	r1, r3
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c040:	4313      	orrs	r3, r2
         );
}
 800c042:	4618      	mov	r0, r3
 800c044:	3724      	adds	r7, #36	@ 0x24
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr
	...

0800c050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b082      	sub	sp, #8
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c060:	d301      	bcc.n	800c066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c062:	2301      	movs	r3, #1
 800c064:	e00f      	b.n	800c086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c066:	4a0a      	ldr	r2, [pc, #40]	@ (800c090 <SysTick_Config+0x40>)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	3b01      	subs	r3, #1
 800c06c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c06e:	210f      	movs	r1, #15
 800c070:	f04f 30ff 	mov.w	r0, #4294967295
 800c074:	f7ff ff8e 	bl	800bf94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c078:	4b05      	ldr	r3, [pc, #20]	@ (800c090 <SysTick_Config+0x40>)
 800c07a:	2200      	movs	r2, #0
 800c07c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c07e:	4b04      	ldr	r3, [pc, #16]	@ (800c090 <SysTick_Config+0x40>)
 800c080:	2207      	movs	r2, #7
 800c082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c084:	2300      	movs	r3, #0
}
 800c086:	4618      	mov	r0, r3
 800c088:	3708      	adds	r7, #8
 800c08a:	46bd      	mov	sp, r7
 800c08c:	bd80      	pop	{r7, pc}
 800c08e:	bf00      	nop
 800c090:	e000e010 	.word	0xe000e010

0800c094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f7ff fec9 	bl	800be34 <__NVIC_SetPriorityGrouping>
}
 800c0a2:	bf00      	nop
 800c0a4:	3708      	adds	r7, #8
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}

0800c0aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c0aa:	b580      	push	{r7, lr}
 800c0ac:	b086      	sub	sp, #24
 800c0ae:	af00      	add	r7, sp, #0
 800c0b0:	4603      	mov	r3, r0
 800c0b2:	60b9      	str	r1, [r7, #8]
 800c0b4:	607a      	str	r2, [r7, #4]
 800c0b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c0b8:	f7ff fee0 	bl	800be7c <__NVIC_GetPriorityGrouping>
 800c0bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c0be:	687a      	ldr	r2, [r7, #4]
 800c0c0:	68b9      	ldr	r1, [r7, #8]
 800c0c2:	6978      	ldr	r0, [r7, #20]
 800c0c4:	f7ff ff90 	bl	800bfe8 <NVIC_EncodePriority>
 800c0c8:	4602      	mov	r2, r0
 800c0ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c0ce:	4611      	mov	r1, r2
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7ff ff5f 	bl	800bf94 <__NVIC_SetPriority>
}
 800c0d6:	bf00      	nop
 800c0d8:	3718      	adds	r7, #24
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	bd80      	pop	{r7, pc}

0800c0de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c0de:	b580      	push	{r7, lr}
 800c0e0:	b082      	sub	sp, #8
 800c0e2:	af00      	add	r7, sp, #0
 800c0e4:	4603      	mov	r3, r0
 800c0e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c0e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	f7ff fed3 	bl	800be98 <__NVIC_EnableIRQ>
}
 800c0f2:	bf00      	nop
 800c0f4:	3708      	adds	r7, #8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b082      	sub	sp, #8
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	4603      	mov	r3, r0
 800c102:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c104:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c108:	4618      	mov	r0, r3
 800c10a:	f7ff fee3 	bl	800bed4 <__NVIC_DisableIRQ>
}
 800c10e:	bf00      	nop
 800c110:	3708      	adds	r7, #8
 800c112:	46bd      	mov	sp, r7
 800c114:	bd80      	pop	{r7, pc}

0800c116 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c116:	b580      	push	{r7, lr}
 800c118:	b082      	sub	sp, #8
 800c11a:	af00      	add	r7, sp, #0
 800c11c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800c11e:	6878      	ldr	r0, [r7, #4]
 800c120:	f7ff ff96 	bl	800c050 <SysTick_Config>
 800c124:	4603      	mov	r3, r0
}
 800c126:	4618      	mov	r0, r3
 800c128:	3708      	adds	r7, #8
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b082      	sub	sp, #8
 800c132:	af00      	add	r7, sp, #0
 800c134:	4603      	mov	r3, r0
 800c136:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800c138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff feed 	bl	800bf1c <__NVIC_SetPendingIRQ>
}
 800c142:	bf00      	nop
 800c144:	3708      	adds	r7, #8
 800c146:	46bd      	mov	sp, r7
 800c148:	bd80      	pop	{r7, pc}

0800c14a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800c14a:	b580      	push	{r7, lr}
 800c14c:	b082      	sub	sp, #8
 800c14e:	af00      	add	r7, sp, #0
 800c150:	4603      	mov	r3, r0
 800c152:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800c154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c158:	4618      	mov	r0, r3
 800c15a:	f7ff fefd 	bl	800bf58 <__NVIC_ClearPendingIRQ>
}
 800c15e:	bf00      	nop
 800c160:	3708      	adds	r7, #8
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
	...

0800c168 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d101      	bne.n	800c17a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e08e      	b.n	800c298 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	461a      	mov	r2, r3
 800c180:	4b47      	ldr	r3, [pc, #284]	@ (800c2a0 <HAL_DMA_Init+0x138>)
 800c182:	429a      	cmp	r2, r3
 800c184:	d80f      	bhi.n	800c1a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	461a      	mov	r2, r3
 800c18c:	4b45      	ldr	r3, [pc, #276]	@ (800c2a4 <HAL_DMA_Init+0x13c>)
 800c18e:	4413      	add	r3, r2
 800c190:	4a45      	ldr	r2, [pc, #276]	@ (800c2a8 <HAL_DMA_Init+0x140>)
 800c192:	fba2 2303 	umull	r2, r3, r2, r3
 800c196:	091b      	lsrs	r3, r3, #4
 800c198:	009a      	lsls	r2, r3, #2
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a42      	ldr	r2, [pc, #264]	@ (800c2ac <HAL_DMA_Init+0x144>)
 800c1a2:	641a      	str	r2, [r3, #64]	@ 0x40
 800c1a4:	e00e      	b.n	800c1c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	4b40      	ldr	r3, [pc, #256]	@ (800c2b0 <HAL_DMA_Init+0x148>)
 800c1ae:	4413      	add	r3, r2
 800c1b0:	4a3d      	ldr	r2, [pc, #244]	@ (800c2a8 <HAL_DMA_Init+0x140>)
 800c1b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c1b6:	091b      	lsrs	r3, r3, #4
 800c1b8:	009a      	lsls	r2, r3, #2
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	4a3c      	ldr	r2, [pc, #240]	@ (800c2b4 <HAL_DMA_Init+0x14c>)
 800c1c2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c1da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c1e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	691b      	ldr	r3, [r3, #16]
 800c1ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c1f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	699b      	ldr	r3, [r3, #24]
 800c1fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c200:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6a1b      	ldr	r3, [r3, #32]
 800c206:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c208:	68fa      	ldr	r2, [r7, #12]
 800c20a:	4313      	orrs	r3, r2
 800c20c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	68fa      	ldr	r2, [r7, #12]
 800c214:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fa74 	bl	800c704 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	689b      	ldr	r3, [r3, #8]
 800c220:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c224:	d102      	bne.n	800c22c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2200      	movs	r2, #0
 800c22a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	685a      	ldr	r2, [r3, #4]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c234:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c238:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c23e:	687a      	ldr	r2, [r7, #4]
 800c240:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c242:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d010      	beq.n	800c26e <HAL_DMA_Init+0x106>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	2b04      	cmp	r3, #4
 800c252:	d80c      	bhi.n	800c26e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	f000 fa93 	bl	800c780 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c25e:	2200      	movs	r2, #0
 800c260:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c266:	687a      	ldr	r2, [r7, #4]
 800c268:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c26a:	605a      	str	r2, [r3, #4]
 800c26c:	e008      	b.n	800c280 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	2200      	movs	r2, #0
 800c278:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	2200      	movs	r2, #0
 800c27e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	2200      	movs	r2, #0
 800c284:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2201      	movs	r2, #1
 800c28a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2200      	movs	r2, #0
 800c292:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}
 800c2a0:	40020407 	.word	0x40020407
 800c2a4:	bffdfff8 	.word	0xbffdfff8
 800c2a8:	cccccccd 	.word	0xcccccccd
 800c2ac:	40020000 	.word	0x40020000
 800c2b0:	bffdfbf8 	.word	0xbffdfbf8
 800c2b4:	40020400 	.word	0x40020400

0800c2b8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b086      	sub	sp, #24
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	60f8      	str	r0, [r7, #12]
 800c2c0:	60b9      	str	r1, [r7, #8]
 800c2c2:	607a      	str	r2, [r7, #4]
 800c2c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d101      	bne.n	800c2d8 <HAL_DMA_Start_IT+0x20>
 800c2d4:	2302      	movs	r3, #2
 800c2d6:	e066      	b.n	800c3a6 <HAL_DMA_Start_IT+0xee>
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	2201      	movs	r2, #1
 800c2dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c2e6:	b2db      	uxtb	r3, r3
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d155      	bne.n	800c398 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2202      	movs	r2, #2
 800c2f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f022 0201 	bic.w	r2, r2, #1
 800c308:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c30a:	683b      	ldr	r3, [r7, #0]
 800c30c:	687a      	ldr	r2, [r7, #4]
 800c30e:	68b9      	ldr	r1, [r7, #8]
 800c310:	68f8      	ldr	r0, [r7, #12]
 800c312:	f000 f9b9 	bl	800c688 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c316:	68fb      	ldr	r3, [r7, #12]
 800c318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d008      	beq.n	800c330 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	f042 020e 	orr.w	r2, r2, #14
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	e00f      	b.n	800c350 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	681a      	ldr	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	f022 0204 	bic.w	r2, r2, #4
 800c33e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	681a      	ldr	r2, [r3, #0]
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f042 020a 	orr.w	r2, r2, #10
 800c34e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d007      	beq.n	800c36e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c368:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c36c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c372:	2b00      	cmp	r3, #0
 800c374:	d007      	beq.n	800c386 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c380:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c384:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	f042 0201 	orr.w	r2, r2, #1
 800c394:	601a      	str	r2, [r3, #0]
 800c396:	e005      	b.n	800c3a4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c3a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	3718      	adds	r7, #24
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	bd80      	pop	{r7, pc}

0800c3ae <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d101      	bne.n	800c3c0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800c3bc:	2301      	movs	r3, #1
 800c3be:	e04f      	b.n	800c460 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c3c6:	b2db      	uxtb	r3, r3
 800c3c8:	2b02      	cmp	r3, #2
 800c3ca:	d008      	beq.n	800c3de <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2204      	movs	r2, #4
 800c3d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e040      	b.n	800c460 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	681a      	ldr	r2, [r3, #0]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f022 020e 	bic.w	r2, r2, #14
 800c3ec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3f2:	681a      	ldr	r2, [r3, #0]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c3f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c3fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	f022 0201 	bic.w	r2, r2, #1
 800c40c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c412:	f003 021c 	and.w	r2, r3, #28
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c41a:	2101      	movs	r1, #1
 800c41c:	fa01 f202 	lsl.w	r2, r1, r2
 800c420:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c42a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00c      	beq.n	800c44e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c43e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c442:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c44c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800c45e:	2300      	movs	r3, #0
}
 800c460:	4618      	mov	r0, r3
 800c462:	370c      	adds	r7, #12
 800c464:	46bd      	mov	sp, r7
 800c466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46a:	4770      	bx	lr

0800c46c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b084      	sub	sp, #16
 800c470:	af00      	add	r7, sp, #0
 800c472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c474:	2300      	movs	r3, #0
 800c476:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c47e:	b2db      	uxtb	r3, r3
 800c480:	2b02      	cmp	r3, #2
 800c482:	d005      	beq.n	800c490 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2204      	movs	r2, #4
 800c488:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c48a:	2301      	movs	r3, #1
 800c48c:	73fb      	strb	r3, [r7, #15]
 800c48e:	e047      	b.n	800c520 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f022 020e 	bic.w	r2, r2, #14
 800c49e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0201 	bic.w	r2, r2, #1
 800c4ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c4c4:	f003 021c 	and.w	r2, r3, #28
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c4cc:	2101      	movs	r1, #1
 800c4ce:	fa01 f202 	lsl.w	r2, r1, r2
 800c4d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c4dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d00c      	beq.n	800c500 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c4f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4fa:	687a      	ldr	r2, [r7, #4]
 800c4fc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c4fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	2201      	movs	r2, #1
 800c504:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c514:	2b00      	cmp	r3, #0
 800c516:	d003      	beq.n	800c520 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c51c:	6878      	ldr	r0, [r7, #4]
 800c51e:	4798      	blx	r3
    }
  }
  return status;
 800c520:	7bfb      	ldrb	r3, [r7, #15]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}

0800c52a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c52a:	b580      	push	{r7, lr}
 800c52c:	b084      	sub	sp, #16
 800c52e:	af00      	add	r7, sp, #0
 800c530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c546:	f003 031c 	and.w	r3, r3, #28
 800c54a:	2204      	movs	r2, #4
 800c54c:	409a      	lsls	r2, r3
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	4013      	ands	r3, r2
 800c552:	2b00      	cmp	r3, #0
 800c554:	d026      	beq.n	800c5a4 <HAL_DMA_IRQHandler+0x7a>
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	f003 0304 	and.w	r3, r3, #4
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d021      	beq.n	800c5a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	f003 0320 	and.w	r3, r3, #32
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d107      	bne.n	800c57e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	681a      	ldr	r2, [r3, #0]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f022 0204 	bic.w	r2, r2, #4
 800c57c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c582:	f003 021c 	and.w	r2, r3, #28
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c58a:	2104      	movs	r1, #4
 800c58c:	fa01 f202 	lsl.w	r2, r1, r2
 800c590:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c596:	2b00      	cmp	r3, #0
 800c598:	d071      	beq.n	800c67e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c5a2:	e06c      	b.n	800c67e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5a8:	f003 031c 	and.w	r3, r3, #28
 800c5ac:	2202      	movs	r2, #2
 800c5ae:	409a      	lsls	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4013      	ands	r3, r2
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d02e      	beq.n	800c616 <HAL_DMA_IRQHandler+0xec>
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f003 0302 	and.w	r3, r3, #2
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d029      	beq.n	800c616 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f003 0320 	and.w	r3, r3, #32
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10b      	bne.n	800c5e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	681b      	ldr	r3, [r3, #0]
 800c5d4:	681a      	ldr	r2, [r3, #0]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f022 020a 	bic.w	r2, r2, #10
 800c5de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ec:	f003 021c 	and.w	r2, r3, #28
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5f4:	2102      	movs	r1, #2
 800c5f6:	fa01 f202 	lsl.w	r2, r1, r2
 800c5fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d038      	beq.n	800c67e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c610:	6878      	ldr	r0, [r7, #4]
 800c612:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c614:	e033      	b.n	800c67e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c61a:	f003 031c 	and.w	r3, r3, #28
 800c61e:	2208      	movs	r2, #8
 800c620:	409a      	lsls	r2, r3
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	4013      	ands	r3, r2
 800c626:	2b00      	cmp	r3, #0
 800c628:	d02a      	beq.n	800c680 <HAL_DMA_IRQHandler+0x156>
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	f003 0308 	and.w	r3, r3, #8
 800c630:	2b00      	cmp	r3, #0
 800c632:	d025      	beq.n	800c680 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	681a      	ldr	r2, [r3, #0]
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f022 020e 	bic.w	r2, r2, #14
 800c642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c648:	f003 021c 	and.w	r2, r3, #28
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c650:	2101      	movs	r1, #1
 800c652:	fa01 f202 	lsl.w	r2, r1, r2
 800c656:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	2200      	movs	r2, #0
 800c66a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c672:	2b00      	cmp	r3, #0
 800c674:	d004      	beq.n	800c680 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c67e:	bf00      	nop
 800c680:	bf00      	nop
}
 800c682:	3710      	adds	r7, #16
 800c684:	46bd      	mov	sp, r7
 800c686:	bd80      	pop	{r7, pc}

0800c688 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c688:	b480      	push	{r7}
 800c68a:	b085      	sub	sp, #20
 800c68c:	af00      	add	r7, sp, #0
 800c68e:	60f8      	str	r0, [r7, #12]
 800c690:	60b9      	str	r1, [r7, #8]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c69e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d004      	beq.n	800c6b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c6ac:	68fa      	ldr	r2, [r7, #12]
 800c6ae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c6b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6b6:	f003 021c 	and.w	r2, r3, #28
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6be:	2101      	movs	r1, #1
 800c6c0:	fa01 f202 	lsl.w	r2, r1, r2
 800c6c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	689b      	ldr	r3, [r3, #8]
 800c6d2:	2b10      	cmp	r3, #16
 800c6d4:	d108      	bne.n	800c6e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	687a      	ldr	r2, [r7, #4]
 800c6dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	68ba      	ldr	r2, [r7, #8]
 800c6e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c6e6:	e007      	b.n	800c6f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	687a      	ldr	r2, [r7, #4]
 800c6f6:	60da      	str	r2, [r3, #12]
}
 800c6f8:	bf00      	nop
 800c6fa:	3714      	adds	r7, #20
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c702:	4770      	bx	lr

0800c704 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c704:	b480      	push	{r7}
 800c706:	b085      	sub	sp, #20
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	461a      	mov	r2, r3
 800c712:	4b17      	ldr	r3, [pc, #92]	@ (800c770 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c714:	429a      	cmp	r2, r3
 800c716:	d80a      	bhi.n	800c72e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c71c:	089b      	lsrs	r3, r3, #2
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c724:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	6493      	str	r3, [r2, #72]	@ 0x48
 800c72c:	e007      	b.n	800c73e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c732:	089b      	lsrs	r3, r3, #2
 800c734:	009a      	lsls	r2, r3, #2
 800c736:	4b0f      	ldr	r3, [pc, #60]	@ (800c774 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c738:	4413      	add	r3, r2
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	b2db      	uxtb	r3, r3
 800c744:	3b08      	subs	r3, #8
 800c746:	4a0c      	ldr	r2, [pc, #48]	@ (800c778 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c748:	fba2 2303 	umull	r2, r3, r2, r3
 800c74c:	091b      	lsrs	r3, r3, #4
 800c74e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	4a0a      	ldr	r2, [pc, #40]	@ (800c77c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c754:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	f003 031f 	and.w	r3, r3, #31
 800c75c:	2201      	movs	r2, #1
 800c75e:	409a      	lsls	r2, r3
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c764:	bf00      	nop
 800c766:	3714      	adds	r7, #20
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	40020407 	.word	0x40020407
 800c774:	4002081c 	.word	0x4002081c
 800c778:	cccccccd 	.word	0xcccccccd
 800c77c:	40020880 	.word	0x40020880

0800c780 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	685b      	ldr	r3, [r3, #4]
 800c78c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c790:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c792:	68fa      	ldr	r2, [r7, #12]
 800c794:	4b0b      	ldr	r3, [pc, #44]	@ (800c7c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c796:	4413      	add	r3, r2
 800c798:	009b      	lsls	r3, r3, #2
 800c79a:	461a      	mov	r2, r3
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	4a09      	ldr	r2, [pc, #36]	@ (800c7c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800c7a4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	3b01      	subs	r3, #1
 800c7aa:	f003 0303 	and.w	r3, r3, #3
 800c7ae:	2201      	movs	r2, #1
 800c7b0:	409a      	lsls	r2, r3
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c7b6:	bf00      	nop
 800c7b8:	3714      	adds	r7, #20
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr
 800c7c2:	bf00      	nop
 800c7c4:	1000823f 	.word	0x1000823f
 800c7c8:	40020940 	.word	0x40020940

0800c7cc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	460b      	mov	r3, r1
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800c7de:	7afb      	ldrb	r3, [r7, #11]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d103      	bne.n	800c7ec <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	687a      	ldr	r2, [r7, #4]
 800c7e8:	605a      	str	r2, [r3, #4]
      break;
 800c7ea:	e002      	b.n	800c7f2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	75fb      	strb	r3, [r7, #23]
      break;
 800c7f0:	bf00      	nop
  }

  return status;
 800c7f2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7f4:	4618      	mov	r0, r3
 800c7f6:	371c      	adds	r7, #28
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fe:	4770      	bx	lr

0800c800 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c800:	b480      	push	{r7}
 800c802:	b083      	sub	sp, #12
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
 800c808:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d101      	bne.n	800c814 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c810:	2301      	movs	r3, #1
 800c812:	e003      	b.n	800c81c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	683a      	ldr	r2, [r7, #0]
 800c818:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c81a:	2300      	movs	r3, #0
  }
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c826:	4770      	bx	lr

0800c828 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b086      	sub	sp, #24
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	0c1b      	lsrs	r3, r3, #16
 800c836:	f003 0301 	and.w	r3, r3, #1
 800c83a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	f003 031f 	and.w	r3, r3, #31
 800c844:	2201      	movs	r2, #1
 800c846:	fa02 f303 	lsl.w	r3, r2, r3
 800c84a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800c84c:	697b      	ldr	r3, [r7, #20]
 800c84e:	015b      	lsls	r3, r3, #5
 800c850:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 800c854:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800c858:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	4013      	ands	r3, r2
 800c862:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d009      	beq.n	800c87e <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	685b      	ldr	r3, [r3, #4]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d002      	beq.n	800c87e <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	4798      	blx	r3
    }
  }
}
 800c87e:	bf00      	nop
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
	...

0800c888 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800c88e:	f04f 33ff 	mov.w	r3, #4294967295
 800c892:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c894:	4b40      	ldr	r3, [pc, #256]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c896:	691a      	ldr	r2, [r3, #16]
 800c898:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800c89c:	4013      	ands	r3, r2
 800c89e:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800c8a0:	4b3d      	ldr	r3, [pc, #244]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c8a2:	695a      	ldr	r2, [r3, #20]
 800c8a4:	4b3d      	ldr	r3, [pc, #244]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c8a6:	689b      	ldr	r3, [r3, #8]
 800c8a8:	43db      	mvns	r3, r3
 800c8aa:	493b      	ldr	r1, [pc, #236]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800c8b0:	4b3a      	ldr	r3, [pc, #232]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c8b2:	689a      	ldr	r2, [r3, #8]
 800c8b4:	4b3a      	ldr	r3, [pc, #232]	@ (800c9a0 <HAL_FLASH_IRQHandler+0x118>)
 800c8b6:	4013      	ands	r3, r2
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800c8bc:	4b37      	ldr	r3, [pc, #220]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	607b      	str	r3, [r7, #4]
 800c8c2:	e008      	b.n	800c8d6 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800c8c4:	4b35      	ldr	r3, [pc, #212]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c8c6:	689b      	ldr	r3, [r3, #8]
 800c8c8:	f003 0302 	and.w	r3, r3, #2
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d002      	beq.n	800c8d6 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800c8d0:	4b32      	ldr	r3, [pc, #200]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c8d2:	691b      	ldr	r3, [r3, #16]
 800c8d4:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d021      	beq.n	800c920 <HAL_FLASH_IRQHandler+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800c8dc:	4b2f      	ldr	r3, [pc, #188]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	4a2d      	ldr	r2, [pc, #180]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c8e6:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800c8e8:	683b      	ldr	r3, [r7, #0]
 800c8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8ee:	d307      	bcc.n	800c900 <HAL_FLASH_IRQHandler+0x78>
 800c8f0:	4b29      	ldr	r3, [pc, #164]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c8f2:	699a      	ldr	r2, [r3, #24]
 800c8f4:	683b      	ldr	r3, [r7, #0]
 800c8f6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c8fa:	4927      	ldr	r1, [pc, #156]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c8fc:	4313      	orrs	r3, r2
 800c8fe:	618b      	str	r3, [r1, #24]
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c906:	2b00      	cmp	r3, #0
 800c908:	d004      	beq.n	800c914 <HAL_FLASH_IRQHandler+0x8c>
 800c90a:	4a23      	ldr	r2, [pc, #140]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c912:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800c914:	4b21      	ldr	r3, [pc, #132]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c916:	2200      	movs	r2, #0
 800c918:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800c91a:	6878      	ldr	r0, [r7, #4]
 800c91c:	f000 f84c 	bl	800c9b8 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800c920:	4b1d      	ldr	r3, [pc, #116]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c922:	691b      	ldr	r3, [r3, #16]
 800c924:	f003 0301 	and.w	r3, r3, #1
 800c928:	2b01      	cmp	r3, #1
 800c92a:	d124      	bne.n	800c976 <HAL_FLASH_IRQHandler+0xee>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800c92c:	4b1a      	ldr	r3, [pc, #104]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c92e:	2201      	movs	r2, #1
 800c930:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800c932:	4b1a      	ldr	r3, [pc, #104]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	2b02      	cmp	r3, #2
 800c938:	d117      	bne.n	800c96a <HAL_FLASH_IRQHandler+0xe2>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800c93a:	4b18      	ldr	r3, [pc, #96]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c93c:	695b      	ldr	r3, [r3, #20]
 800c93e:	3b01      	subs	r3, #1
 800c940:	4a16      	ldr	r2, [pc, #88]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c942:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800c944:	4b15      	ldr	r3, [pc, #84]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d00a      	beq.n	800c962 <HAL_FLASH_IRQHandler+0xda>
      {
        /* Increment page number */
        pFlash.Page++;
 800c94c:	4b13      	ldr	r3, [pc, #76]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	3301      	adds	r3, #1
 800c952:	4a12      	ldr	r2, [pc, #72]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c954:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 800c956:	4b11      	ldr	r3, [pc, #68]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c958:	691b      	ldr	r3, [r3, #16]
 800c95a:	4618      	mov	r0, r3
 800c95c:	f000 f836 	bl	800c9cc <FLASH_PageErase>
 800c960:	e006      	b.n	800c970 <HAL_FLASH_IRQHandler+0xe8>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800c962:	4b0e      	ldr	r3, [pc, #56]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c964:	2200      	movs	r2, #0
 800c966:	609a      	str	r2, [r3, #8]
 800c968:	e002      	b.n	800c970 <HAL_FLASH_IRQHandler+0xe8>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800c96a:	4b0c      	ldr	r3, [pc, #48]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f817 	bl	800c9a4 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 800c976:	4b09      	ldr	r3, [pc, #36]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d108      	bne.n	800c990 <HAL_FLASH_IRQHandler+0x108>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800c97e:	4b06      	ldr	r3, [pc, #24]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c980:	695b      	ldr	r3, [r3, #20]
 800c982:	4a05      	ldr	r2, [pc, #20]	@ (800c998 <HAL_FLASH_IRQHandler+0x110>)
 800c984:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800c988:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800c98a:	4b04      	ldr	r3, [pc, #16]	@ (800c99c <HAL_FLASH_IRQHandler+0x114>)
 800c98c:	2200      	movs	r2, #0
 800c98e:	701a      	strb	r2, [r3, #0]
  }
}
 800c990:	bf00      	nop
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}
 800c998:	58004000 	.word	0x58004000
 800c99c:	20000988 	.word	0x20000988
 800c9a0:	00040001 	.word	0x00040001

0800c9a4 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b083      	sub	sp, #12
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800c9ac:	bf00      	nop
 800c9ae:	370c      	adds	r7, #12
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b083      	sub	sp, #12
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800c9c0:	bf00      	nop
 800c9c2:	370c      	adds	r7, #12
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ca:	4770      	bx	lr

0800c9cc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800c9d4:	4b09      	ldr	r3, [pc, #36]	@ (800c9fc <FLASH_PageErase+0x30>)
 800c9d6:	695b      	ldr	r3, [r3, #20]
 800c9d8:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	00db      	lsls	r3, r3, #3
 800c9e0:	4313      	orrs	r3, r2
 800c9e2:	4a06      	ldr	r2, [pc, #24]	@ (800c9fc <FLASH_PageErase+0x30>)
 800c9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c9e8:	f043 0302 	orr.w	r3, r3, #2
 800c9ec:	6153      	str	r3, [r2, #20]
}
 800c9ee:	bf00      	nop
 800c9f0:	370c      	adds	r7, #12
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f8:	4770      	bx	lr
 800c9fa:	bf00      	nop
 800c9fc:	58004000 	.word	0x58004000

0800ca00 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b087      	sub	sp, #28
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ca0e:	e14c      	b.n	800ccaa <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	681a      	ldr	r2, [r3, #0]
 800ca14:	2101      	movs	r1, #1
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	fa01 f303 	lsl.w	r3, r1, r3
 800ca1c:	4013      	ands	r3, r2
 800ca1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	f000 813e 	beq.w	800cca4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	f003 0303 	and.w	r3, r3, #3
 800ca30:	2b01      	cmp	r3, #1
 800ca32:	d005      	beq.n	800ca40 <HAL_GPIO_Init+0x40>
 800ca34:	683b      	ldr	r3, [r7, #0]
 800ca36:	685b      	ldr	r3, [r3, #4]
 800ca38:	f003 0303 	and.w	r3, r3, #3
 800ca3c:	2b02      	cmp	r3, #2
 800ca3e:	d130      	bne.n	800caa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	2203      	movs	r2, #3
 800ca4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ca50:	43db      	mvns	r3, r3
 800ca52:	693a      	ldr	r2, [r7, #16]
 800ca54:	4013      	ands	r3, r2
 800ca56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	68da      	ldr	r2, [r3, #12]
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	005b      	lsls	r3, r3, #1
 800ca60:	fa02 f303 	lsl.w	r3, r2, r3
 800ca64:	693a      	ldr	r2, [r7, #16]
 800ca66:	4313      	orrs	r3, r2
 800ca68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800ca76:	2201      	movs	r2, #1
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca7e:	43db      	mvns	r3, r3
 800ca80:	693a      	ldr	r2, [r7, #16]
 800ca82:	4013      	ands	r3, r2
 800ca84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	091b      	lsrs	r3, r3, #4
 800ca8c:	f003 0201 	and.w	r2, r3, #1
 800ca90:	697b      	ldr	r3, [r7, #20]
 800ca92:	fa02 f303 	lsl.w	r3, r2, r3
 800ca96:	693a      	ldr	r2, [r7, #16]
 800ca98:	4313      	orrs	r3, r2
 800ca9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	693a      	ldr	r2, [r7, #16]
 800caa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	685b      	ldr	r3, [r3, #4]
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	2b03      	cmp	r3, #3
 800caac:	d017      	beq.n	800cade <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	68db      	ldr	r3, [r3, #12]
 800cab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	005b      	lsls	r3, r3, #1
 800cab8:	2203      	movs	r2, #3
 800caba:	fa02 f303 	lsl.w	r3, r2, r3
 800cabe:	43db      	mvns	r3, r3
 800cac0:	693a      	ldr	r2, [r7, #16]
 800cac2:	4013      	ands	r3, r2
 800cac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	689a      	ldr	r2, [r3, #8]
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	005b      	lsls	r3, r3, #1
 800cace:	fa02 f303 	lsl.w	r3, r2, r3
 800cad2:	693a      	ldr	r2, [r7, #16]
 800cad4:	4313      	orrs	r3, r2
 800cad6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	685b      	ldr	r3, [r3, #4]
 800cae2:	f003 0303 	and.w	r3, r3, #3
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d123      	bne.n	800cb32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	08da      	lsrs	r2, r3, #3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	3208      	adds	r2, #8
 800caf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800caf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	f003 0307 	and.w	r3, r3, #7
 800cafe:	009b      	lsls	r3, r3, #2
 800cb00:	220f      	movs	r2, #15
 800cb02:	fa02 f303 	lsl.w	r3, r2, r3
 800cb06:	43db      	mvns	r3, r3
 800cb08:	693a      	ldr	r2, [r7, #16]
 800cb0a:	4013      	ands	r3, r2
 800cb0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	691a      	ldr	r2, [r3, #16]
 800cb12:	697b      	ldr	r3, [r7, #20]
 800cb14:	f003 0307 	and.w	r3, r3, #7
 800cb18:	009b      	lsls	r3, r3, #2
 800cb1a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb1e:	693a      	ldr	r2, [r7, #16]
 800cb20:	4313      	orrs	r3, r2
 800cb22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	08da      	lsrs	r2, r3, #3
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	3208      	adds	r2, #8
 800cb2c:	6939      	ldr	r1, [r7, #16]
 800cb2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800cb38:	697b      	ldr	r3, [r7, #20]
 800cb3a:	005b      	lsls	r3, r3, #1
 800cb3c:	2203      	movs	r2, #3
 800cb3e:	fa02 f303 	lsl.w	r3, r2, r3
 800cb42:	43db      	mvns	r3, r3
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	4013      	ands	r3, r2
 800cb48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	685b      	ldr	r3, [r3, #4]
 800cb4e:	f003 0203 	and.w	r2, r3, #3
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	005b      	lsls	r3, r3, #1
 800cb56:	fa02 f303 	lsl.w	r3, r2, r3
 800cb5a:	693a      	ldr	r2, [r7, #16]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	693a      	ldr	r2, [r7, #16]
 800cb64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	685b      	ldr	r3, [r3, #4]
 800cb6a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	f000 8098 	beq.w	800cca4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800cb74:	4a54      	ldr	r2, [pc, #336]	@ (800ccc8 <HAL_GPIO_Init+0x2c8>)
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	089b      	lsrs	r3, r3, #2
 800cb7a:	3302      	adds	r3, #2
 800cb7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	f003 0303 	and.w	r3, r3, #3
 800cb88:	009b      	lsls	r3, r3, #2
 800cb8a:	220f      	movs	r2, #15
 800cb8c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb90:	43db      	mvns	r3, r3
 800cb92:	693a      	ldr	r2, [r7, #16]
 800cb94:	4013      	ands	r3, r2
 800cb96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800cb9e:	d019      	beq.n	800cbd4 <HAL_GPIO_Init+0x1d4>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4a4a      	ldr	r2, [pc, #296]	@ (800cccc <HAL_GPIO_Init+0x2cc>)
 800cba4:	4293      	cmp	r3, r2
 800cba6:	d013      	beq.n	800cbd0 <HAL_GPIO_Init+0x1d0>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	4a49      	ldr	r2, [pc, #292]	@ (800ccd0 <HAL_GPIO_Init+0x2d0>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d00d      	beq.n	800cbcc <HAL_GPIO_Init+0x1cc>
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	4a48      	ldr	r2, [pc, #288]	@ (800ccd4 <HAL_GPIO_Init+0x2d4>)
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d007      	beq.n	800cbc8 <HAL_GPIO_Init+0x1c8>
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	4a47      	ldr	r2, [pc, #284]	@ (800ccd8 <HAL_GPIO_Init+0x2d8>)
 800cbbc:	4293      	cmp	r3, r2
 800cbbe:	d101      	bne.n	800cbc4 <HAL_GPIO_Init+0x1c4>
 800cbc0:	2304      	movs	r3, #4
 800cbc2:	e008      	b.n	800cbd6 <HAL_GPIO_Init+0x1d6>
 800cbc4:	2307      	movs	r3, #7
 800cbc6:	e006      	b.n	800cbd6 <HAL_GPIO_Init+0x1d6>
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e004      	b.n	800cbd6 <HAL_GPIO_Init+0x1d6>
 800cbcc:	2302      	movs	r3, #2
 800cbce:	e002      	b.n	800cbd6 <HAL_GPIO_Init+0x1d6>
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	e000      	b.n	800cbd6 <HAL_GPIO_Init+0x1d6>
 800cbd4:	2300      	movs	r3, #0
 800cbd6:	697a      	ldr	r2, [r7, #20]
 800cbd8:	f002 0203 	and.w	r2, r2, #3
 800cbdc:	0092      	lsls	r2, r2, #2
 800cbde:	4093      	lsls	r3, r2
 800cbe0:	693a      	ldr	r2, [r7, #16]
 800cbe2:	4313      	orrs	r3, r2
 800cbe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800cbe6:	4938      	ldr	r1, [pc, #224]	@ (800ccc8 <HAL_GPIO_Init+0x2c8>)
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	089b      	lsrs	r3, r3, #2
 800cbec:	3302      	adds	r3, #2
 800cbee:	693a      	ldr	r2, [r7, #16]
 800cbf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cbf4:	4b39      	ldr	r3, [pc, #228]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	43db      	mvns	r3, r3
 800cbfe:	693a      	ldr	r2, [r7, #16]
 800cc00:	4013      	ands	r3, r2
 800cc02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800cc04:	683b      	ldr	r3, [r7, #0]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d003      	beq.n	800cc18 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800cc10:	693a      	ldr	r2, [r7, #16]
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	4313      	orrs	r3, r2
 800cc16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cc18:	4a30      	ldr	r2, [pc, #192]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cc1a:	693b      	ldr	r3, [r7, #16]
 800cc1c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cc1e:	4b2f      	ldr	r3, [pc, #188]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	43db      	mvns	r3, r3
 800cc28:	693a      	ldr	r2, [r7, #16]
 800cc2a:	4013      	ands	r3, r2
 800cc2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d003      	beq.n	800cc42 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800cc3a:	693a      	ldr	r2, [r7, #16]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4313      	orrs	r3, r2
 800cc40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cc42:	4a26      	ldr	r2, [pc, #152]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cc44:	693b      	ldr	r3, [r7, #16]
 800cc46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cc48:	4b24      	ldr	r3, [pc, #144]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cc4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cc4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	43db      	mvns	r3, r3
 800cc54:	693a      	ldr	r2, [r7, #16]
 800cc56:	4013      	ands	r3, r2
 800cc58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d003      	beq.n	800cc6e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800cc66:	693a      	ldr	r2, [r7, #16]
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	4313      	orrs	r3, r2
 800cc6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cc6e:	4a1b      	ldr	r2, [pc, #108]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800cc76:	4b19      	ldr	r3, [pc, #100]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cc78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cc7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	43db      	mvns	r3, r3
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	4013      	ands	r3, r2
 800cc86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	685b      	ldr	r3, [r3, #4]
 800cc8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d003      	beq.n	800cc9c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	4313      	orrs	r3, r2
 800cc9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cc9c:	4a0f      	ldr	r2, [pc, #60]	@ (800ccdc <HAL_GPIO_Init+0x2dc>)
 800cc9e:	693b      	ldr	r3, [r7, #16]
 800cca0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	3301      	adds	r3, #1
 800cca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	681a      	ldr	r2, [r3, #0]
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	fa22 f303 	lsr.w	r3, r2, r3
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	f47f aeab 	bne.w	800ca10 <HAL_GPIO_Init+0x10>
  }
}
 800ccba:	bf00      	nop
 800ccbc:	bf00      	nop
 800ccbe:	371c      	adds	r7, #28
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc6:	4770      	bx	lr
 800ccc8:	40010000 	.word	0x40010000
 800cccc:	48000400 	.word	0x48000400
 800ccd0:	48000800 	.word	0x48000800
 800ccd4:	48000c00 	.word	0x48000c00
 800ccd8:	48001000 	.word	0x48001000
 800ccdc:	58000800 	.word	0x58000800

0800cce0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b087      	sub	sp, #28
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
 800cce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800ccea:	2300      	movs	r3, #0
 800ccec:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800ccee:	e0bb      	b.n	800ce68 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800ccf0:	2201      	movs	r2, #1
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	fa02 f303 	lsl.w	r3, r2, r3
 800ccf8:	683a      	ldr	r2, [r7, #0]
 800ccfa:	4013      	ands	r3, r2
 800ccfc:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 80ae 	beq.w	800ce62 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800cd06:	4a5f      	ldr	r2, [pc, #380]	@ (800ce84 <HAL_GPIO_DeInit+0x1a4>)
 800cd08:	697b      	ldr	r3, [r7, #20]
 800cd0a:	089b      	lsrs	r3, r3, #2
 800cd0c:	3302      	adds	r3, #2
 800cd0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cd12:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800cd14:	697b      	ldr	r3, [r7, #20]
 800cd16:	f003 0303 	and.w	r3, r3, #3
 800cd1a:	009b      	lsls	r3, r3, #2
 800cd1c:	220f      	movs	r2, #15
 800cd1e:	fa02 f303 	lsl.w	r3, r2, r3
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	4013      	ands	r3, r2
 800cd26:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800cd2e:	d019      	beq.n	800cd64 <HAL_GPIO_DeInit+0x84>
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	4a55      	ldr	r2, [pc, #340]	@ (800ce88 <HAL_GPIO_DeInit+0x1a8>)
 800cd34:	4293      	cmp	r3, r2
 800cd36:	d013      	beq.n	800cd60 <HAL_GPIO_DeInit+0x80>
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4a54      	ldr	r2, [pc, #336]	@ (800ce8c <HAL_GPIO_DeInit+0x1ac>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d00d      	beq.n	800cd5c <HAL_GPIO_DeInit+0x7c>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	4a53      	ldr	r2, [pc, #332]	@ (800ce90 <HAL_GPIO_DeInit+0x1b0>)
 800cd44:	4293      	cmp	r3, r2
 800cd46:	d007      	beq.n	800cd58 <HAL_GPIO_DeInit+0x78>
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	4a52      	ldr	r2, [pc, #328]	@ (800ce94 <HAL_GPIO_DeInit+0x1b4>)
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d101      	bne.n	800cd54 <HAL_GPIO_DeInit+0x74>
 800cd50:	2304      	movs	r3, #4
 800cd52:	e008      	b.n	800cd66 <HAL_GPIO_DeInit+0x86>
 800cd54:	2307      	movs	r3, #7
 800cd56:	e006      	b.n	800cd66 <HAL_GPIO_DeInit+0x86>
 800cd58:	2303      	movs	r3, #3
 800cd5a:	e004      	b.n	800cd66 <HAL_GPIO_DeInit+0x86>
 800cd5c:	2302      	movs	r3, #2
 800cd5e:	e002      	b.n	800cd66 <HAL_GPIO_DeInit+0x86>
 800cd60:	2301      	movs	r3, #1
 800cd62:	e000      	b.n	800cd66 <HAL_GPIO_DeInit+0x86>
 800cd64:	2300      	movs	r3, #0
 800cd66:	697a      	ldr	r2, [r7, #20]
 800cd68:	f002 0203 	and.w	r2, r2, #3
 800cd6c:	0092      	lsls	r2, r2, #2
 800cd6e:	4093      	lsls	r3, r2
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	429a      	cmp	r2, r3
 800cd74:	d136      	bne.n	800cde4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800cd76:	4b48      	ldr	r3, [pc, #288]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cd78:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	43db      	mvns	r3, r3
 800cd80:	4945      	ldr	r1, [pc, #276]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cd82:	4013      	ands	r3, r2
 800cd84:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800cd88:	4b43      	ldr	r3, [pc, #268]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cd8a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	43db      	mvns	r3, r3
 800cd92:	4941      	ldr	r1, [pc, #260]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cd94:	4013      	ands	r3, r2
 800cd96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800cd9a:	4b3f      	ldr	r3, [pc, #252]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	43db      	mvns	r3, r3
 800cda2:	493d      	ldr	r1, [pc, #244]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cda4:	4013      	ands	r3, r2
 800cda6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800cda8:	4b3b      	ldr	r3, [pc, #236]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cdaa:	685a      	ldr	r2, [r3, #4]
 800cdac:	693b      	ldr	r3, [r7, #16]
 800cdae:	43db      	mvns	r3, r3
 800cdb0:	4939      	ldr	r1, [pc, #228]	@ (800ce98 <HAL_GPIO_DeInit+0x1b8>)
 800cdb2:	4013      	ands	r3, r2
 800cdb4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	f003 0303 	and.w	r3, r3, #3
 800cdbc:	009b      	lsls	r3, r3, #2
 800cdbe:	220f      	movs	r2, #15
 800cdc0:	fa02 f303 	lsl.w	r3, r2, r3
 800cdc4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800cdc6:	4a2f      	ldr	r2, [pc, #188]	@ (800ce84 <HAL_GPIO_DeInit+0x1a4>)
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	089b      	lsrs	r3, r3, #2
 800cdcc:	3302      	adds	r3, #2
 800cdce:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	43da      	mvns	r2, r3
 800cdd6:	482b      	ldr	r0, [pc, #172]	@ (800ce84 <HAL_GPIO_DeInit+0x1a4>)
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	089b      	lsrs	r3, r3, #2
 800cddc:	400a      	ands	r2, r1
 800cdde:	3302      	adds	r3, #2
 800cde0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681a      	ldr	r2, [r3, #0]
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	005b      	lsls	r3, r3, #1
 800cdec:	2103      	movs	r1, #3
 800cdee:	fa01 f303 	lsl.w	r3, r1, r3
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	08da      	lsrs	r2, r3, #3
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	3208      	adds	r2, #8
 800ce00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f003 0307 	and.w	r3, r3, #7
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	220f      	movs	r2, #15
 800ce0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce12:	43db      	mvns	r3, r3
 800ce14:	697a      	ldr	r2, [r7, #20]
 800ce16:	08d2      	lsrs	r2, r2, #3
 800ce18:	4019      	ands	r1, r3
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	3208      	adds	r2, #8
 800ce1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	68da      	ldr	r2, [r3, #12]
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	005b      	lsls	r3, r3, #1
 800ce2a:	2103      	movs	r1, #3
 800ce2c:	fa01 f303 	lsl.w	r3, r1, r3
 800ce30:	43db      	mvns	r3, r3
 800ce32:	401a      	ands	r2, r3
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	685a      	ldr	r2, [r3, #4]
 800ce3c:	2101      	movs	r1, #1
 800ce3e:	697b      	ldr	r3, [r7, #20]
 800ce40:	fa01 f303 	lsl.w	r3, r1, r3
 800ce44:	43db      	mvns	r3, r3
 800ce46:	401a      	ands	r2, r3
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	689a      	ldr	r2, [r3, #8]
 800ce50:	697b      	ldr	r3, [r7, #20]
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	2103      	movs	r1, #3
 800ce56:	fa01 f303 	lsl.w	r3, r1, r3
 800ce5a:	43db      	mvns	r3, r3
 800ce5c:	401a      	ands	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	3301      	adds	r3, #1
 800ce66:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800ce68:	683a      	ldr	r2, [r7, #0]
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	fa22 f303 	lsr.w	r3, r2, r3
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	f47f af3d 	bne.w	800ccf0 <HAL_GPIO_DeInit+0x10>
  }
}
 800ce76:	bf00      	nop
 800ce78:	bf00      	nop
 800ce7a:	371c      	adds	r7, #28
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce82:	4770      	bx	lr
 800ce84:	40010000 	.word	0x40010000
 800ce88:	48000400 	.word	0x48000400
 800ce8c:	48000800 	.word	0x48000800
 800ce90:	48000c00 	.word	0x48000c00
 800ce94:	48001000 	.word	0x48001000
 800ce98:	58000800 	.word	0x58000800

0800ce9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
 800cea4:	460b      	mov	r3, r1
 800cea6:	807b      	strh	r3, [r7, #2]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ceac:	787b      	ldrb	r3, [r7, #1]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d003      	beq.n	800ceba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ceb2:	887a      	ldrh	r2, [r7, #2]
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ceb8:	e002      	b.n	800cec0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ceba:	887a      	ldrh	r2, [r7, #2]
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800cec0:	bf00      	nop
 800cec2:	370c      	adds	r7, #12
 800cec4:	46bd      	mov	sp, r7
 800cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceca:	4770      	bx	lr

0800cecc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b082      	sub	sp, #8
 800ced0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800ced2:	4b0a      	ldr	r3, [pc, #40]	@ (800cefc <HAL_HSEM_IRQHandler+0x30>)
 800ced4:	68db      	ldr	r3, [r3, #12]
 800ced6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800ced8:	4b08      	ldr	r3, [pc, #32]	@ (800cefc <HAL_HSEM_IRQHandler+0x30>)
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	43db      	mvns	r3, r3
 800cee0:	4906      	ldr	r1, [pc, #24]	@ (800cefc <HAL_HSEM_IRQHandler+0x30>)
 800cee2:	4013      	ands	r3, r2
 800cee4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800cee6:	4a05      	ldr	r2, [pc, #20]	@ (800cefc <HAL_HSEM_IRQHandler+0x30>)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f807 	bl	800cf00 <HAL_HSEM_FreeCallback>
}
 800cef2:	bf00      	nop
 800cef4:	3708      	adds	r7, #8
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	58001500 	.word	0x58001500

0800cf00 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d01e      	beq.n	800cf64 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800cf26:	4b13      	ldr	r3, [pc, #76]	@ (800cf74 <HAL_IPCC_Init+0x60>)
 800cf28:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800cf30:	b2db      	uxtb	r3, r3
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d102      	bne.n	800cf3c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f7fb fae4 	bl	8008504 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800cf3c:	68b8      	ldr	r0, [r7, #8]
 800cf3e:	f000 f85b 	bl	800cff8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f000 f82c 	bl	800cfac <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	2200      	movs	r2, #0
 800cf58:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800cf62:	e001      	b.n	800cf68 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800cf64:	2301      	movs	r3, #1
 800cf66:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800cf68:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3710      	adds	r7, #16
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	58000c00 	.word	0x58000c00

0800cf78 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800cf86:	bf00      	nop
 800cf88:	3714      	adds	r7, #20
 800cf8a:	46bd      	mov	sp, r7
 800cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf90:	4770      	bx	lr

0800cf92 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800cf92:	b480      	push	{r7}
 800cf94:	b085      	sub	sp, #20
 800cf96:	af00      	add	r7, sp, #0
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	60b9      	str	r1, [r7, #8]
 800cf9c:	4613      	mov	r3, r2
 800cf9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800cfa0:	bf00      	nop
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	60fb      	str	r3, [r7, #12]
 800cfb8:	e00f      	b.n	800cfda <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	009b      	lsls	r3, r3, #2
 800cfc0:	4413      	add	r3, r2
 800cfc2:	4a0b      	ldr	r2, [pc, #44]	@ (800cff0 <IPCC_SetDefaultCallbacks+0x44>)
 800cfc4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800cfc6:	687a      	ldr	r2, [r7, #4]
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	3306      	adds	r3, #6
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	4413      	add	r3, r2
 800cfd0:	4a08      	ldr	r2, [pc, #32]	@ (800cff4 <IPCC_SetDefaultCallbacks+0x48>)
 800cfd2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b05      	cmp	r3, #5
 800cfde:	d9ec      	bls.n	800cfba <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800cfe0:	bf00      	nop
 800cfe2:	bf00      	nop
 800cfe4:	3714      	adds	r7, #20
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfec:	4770      	bx	lr
 800cfee:	bf00      	nop
 800cff0:	0800cf79 	.word	0x0800cf79
 800cff4:	0800cf93 	.word	0x0800cf93

0800cff8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2200      	movs	r2, #0
 800d004:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800d00c:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	223f      	movs	r2, #63	@ 0x3f
 800d012:	609a      	str	r2, [r3, #8]
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d020:	b480      	push	{r7}
 800d022:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d024:	4b05      	ldr	r3, [pc, #20]	@ (800d03c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	4a04      	ldr	r2, [pc, #16]	@ (800d03c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d02a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d02e:	6013      	str	r3, [r2, #0]
}
 800d030:	bf00      	nop
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr
 800d03a:	bf00      	nop
 800d03c:	58000400 	.word	0x58000400

0800d040 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800d040:	b480      	push	{r7}
 800d042:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 800d044:	bf00      	nop
 800d046:	46bd      	mov	sp, r7
 800d048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04c:	4770      	bx	lr
	...

0800d050 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800d058:	4b04      	ldr	r3, [pc, #16]	@ (800d06c <LL_EXTI_ReadFlag_0_31+0x1c>)
 800d05a:	68da      	ldr	r2, [r3, #12]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	4013      	ands	r3, r2
}
 800d060:	4618      	mov	r0, r3
 800d062:	370c      	adds	r7, #12
 800d064:	46bd      	mov	sp, r7
 800d066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06a:	4770      	bx	lr
 800d06c:	58000800 	.word	0x58000800

0800d070 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 800d070:	b480      	push	{r7}
 800d072:	b083      	sub	sp, #12
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 800d078:	4b04      	ldr	r3, [pc, #16]	@ (800d08c <LL_EXTI_ReadFlag_32_63+0x1c>)
 800d07a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	4013      	ands	r3, r2
}
 800d080:	4618      	mov	r0, r3
 800d082:	370c      	adds	r7, #12
 800d084:	46bd      	mov	sp, r7
 800d086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d08a:	4770      	bx	lr
 800d08c:	58000800 	.word	0x58000800

0800d090 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800d090:	b480      	push	{r7}
 800d092:	b083      	sub	sp, #12
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800d098:	4a04      	ldr	r2, [pc, #16]	@ (800d0ac <LL_EXTI_ClearFlag_0_31+0x1c>)
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	60d3      	str	r3, [r2, #12]
}
 800d09e:	bf00      	nop
 800d0a0:	370c      	adds	r7, #12
 800d0a2:	46bd      	mov	sp, r7
 800d0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a8:	4770      	bx	lr
 800d0aa:	bf00      	nop
 800d0ac:	58000800 	.word	0x58000800

0800d0b0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	b083      	sub	sp, #12
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800d0b8:	4a04      	ldr	r2, [pc, #16]	@ (800d0cc <LL_EXTI_ClearFlag_32_63+0x1c>)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800d0be:	bf00      	nop
 800d0c0:	370c      	adds	r7, #12
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c8:	4770      	bx	lr
 800d0ca:	bf00      	nop
 800d0cc:	58000800 	.word	0x58000800

0800d0d0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800d0d4:	4b04      	ldr	r3, [pc, #16]	@ (800d0e8 <HAL_PWREx_GetVoltageRange+0x18>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	46bd      	mov	sp, r7
 800d0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e4:	4770      	bx	lr
 800d0e6:	bf00      	nop
 800d0e8:	58000400 	.word	0x58000400

0800d0ec <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800d0f0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d0f4:	f7ff ffac 	bl	800d050 <LL_EXTI_ReadFlag_0_31>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d005      	beq.n	800d10a <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800d0fe:	f7ff ff9f 	bl	800d040 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800d102:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d106:	f7ff ffc3 	bl	800d090 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800d10a:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d10e:	f7ff ff9f 	bl	800d050 <LL_EXTI_ReadFlag_0_31>
 800d112:	4603      	mov	r3, r0
 800d114:	2b00      	cmp	r3, #0
 800d116:	d005      	beq.n	800d124 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800d118:	f000 f811 	bl	800d13e <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800d11c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d120:	f7ff ffb6 	bl	800d090 <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 800d124:	2002      	movs	r0, #2
 800d126:	f7ff ffa3 	bl	800d070 <LL_EXTI_ReadFlag_32_63>
 800d12a:	4603      	mov	r3, r0
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d004      	beq.n	800d13a <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800d130:	f000 f80c 	bl	800d14c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800d134:	2002      	movs	r0, #2
 800d136:	f7ff ffbb 	bl	800d0b0 <LL_EXTI_ClearFlag_32_63>
  }
}
 800d13a:	bf00      	nop
 800d13c:	bd80      	pop	{r7, pc}

0800d13e <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800d13e:	b480      	push	{r7}
 800d140:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800d142:	bf00      	nop
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800d14c:	b480      	push	{r7}
 800d14e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800d150:	bf00      	nop
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr

0800d15a <LL_RCC_HSE_IsEnabledDiv2>:
{
 800d15a:	b480      	push	{r7}
 800d15c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800d15e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d168:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d16c:	d101      	bne.n	800d172 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800d16e:	2301      	movs	r3, #1
 800d170:	e000      	b.n	800d174 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800d172:	2300      	movs	r3, #0
}
 800d174:	4618      	mov	r0, r3
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr

0800d17e <LL_RCC_HSE_Enable>:
{
 800d17e:	b480      	push	{r7}
 800d180:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800d182:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d18c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d190:	6013      	str	r3, [r2, #0]
}
 800d192:	bf00      	nop
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <LL_RCC_HSE_Disable>:
{
 800d19c:	b480      	push	{r7}
 800d19e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800d1a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d1ae:	6013      	str	r3, [r2, #0]
}
 800d1b0:	bf00      	nop
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <LL_RCC_HSE_IsReady>:
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800d1be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d1c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d1cc:	d101      	bne.n	800d1d2 <LL_RCC_HSE_IsReady+0x18>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e000      	b.n	800d1d4 <LL_RCC_HSE_IsReady+0x1a>
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr

0800d1de <LL_RCC_HSI_Enable>:
{
 800d1de:	b480      	push	{r7}
 800d1e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d1e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d1ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d1f0:	6013      	str	r3, [r2, #0]
}
 800d1f2:	bf00      	nop
 800d1f4:	46bd      	mov	sp, r7
 800d1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fa:	4770      	bx	lr

0800d1fc <LL_RCC_HSI_Disable>:
{
 800d1fc:	b480      	push	{r7}
 800d1fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800d200:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d20a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d20e:	6013      	str	r3, [r2, #0]
}
 800d210:	bf00      	nop
 800d212:	46bd      	mov	sp, r7
 800d214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d218:	4770      	bx	lr

0800d21a <LL_RCC_HSI_IsReady>:
{
 800d21a:	b480      	push	{r7}
 800d21c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d21e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d228:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d22c:	d101      	bne.n	800d232 <LL_RCC_HSI_IsReady+0x18>
 800d22e:	2301      	movs	r3, #1
 800d230:	e000      	b.n	800d234 <LL_RCC_HSI_IsReady+0x1a>
 800d232:	2300      	movs	r3, #0
}
 800d234:	4618      	mov	r0, r3
 800d236:	46bd      	mov	sp, r7
 800d238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23c:	4770      	bx	lr

0800d23e <LL_RCC_HSI_SetCalibTrimming>:
{
 800d23e:	b480      	push	{r7}
 800d240:	b083      	sub	sp, #12
 800d242:	af00      	add	r7, sp, #0
 800d244:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800d246:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d24a:	685b      	ldr	r3, [r3, #4]
 800d24c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	061b      	lsls	r3, r3, #24
 800d254:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d258:	4313      	orrs	r3, r2
 800d25a:	604b      	str	r3, [r1, #4]
}
 800d25c:	bf00      	nop
 800d25e:	370c      	adds	r7, #12
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <LL_RCC_HSI48_Enable>:
{
 800d268:	b480      	push	{r7}
 800d26a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d26c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d270:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d274:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d278:	f043 0301 	orr.w	r3, r3, #1
 800d27c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d280:	bf00      	nop
 800d282:	46bd      	mov	sp, r7
 800d284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d288:	4770      	bx	lr

0800d28a <LL_RCC_HSI48_Disable>:
{
 800d28a:	b480      	push	{r7}
 800d28c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d28e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d292:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d29a:	f023 0301 	bic.w	r3, r3, #1
 800d29e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d2a2:	bf00      	nop
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2aa:	4770      	bx	lr

0800d2ac <LL_RCC_HSI48_IsReady>:
{
 800d2ac:	b480      	push	{r7}
 800d2ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800d2b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d2b8:	f003 0302 	and.w	r3, r3, #2
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d101      	bne.n	800d2c4 <LL_RCC_HSI48_IsReady+0x18>
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	e000      	b.n	800d2c6 <LL_RCC_HSI48_IsReady+0x1a>
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ce:	4770      	bx	lr

0800d2d0 <LL_RCC_LSE_Enable>:
{
 800d2d0:	b480      	push	{r7}
 800d2d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d2d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2e0:	f043 0301 	orr.w	r3, r3, #1
 800d2e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d2e8:	bf00      	nop
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f0:	4770      	bx	lr

0800d2f2 <LL_RCC_LSE_Disable>:
{
 800d2f2:	b480      	push	{r7}
 800d2f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d2f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d2fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d302:	f023 0301 	bic.w	r3, r3, #1
 800d306:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d30a:	bf00      	nop
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <LL_RCC_LSE_EnableBypass>:
{
 800d314:	b480      	push	{r7}
 800d316:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d318:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d31c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d320:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d324:	f043 0304 	orr.w	r3, r3, #4
 800d328:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d32c:	bf00      	nop
 800d32e:	46bd      	mov	sp, r7
 800d330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d334:	4770      	bx	lr

0800d336 <LL_RCC_LSE_DisableBypass>:
{
 800d336:	b480      	push	{r7}
 800d338:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d33a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d33e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d342:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d346:	f023 0304 	bic.w	r3, r3, #4
 800d34a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d34e:	bf00      	nop
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <LL_RCC_LSE_IsReady>:
{
 800d358:	b480      	push	{r7}
 800d35a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d35c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d360:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d364:	f003 0302 	and.w	r3, r3, #2
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d101      	bne.n	800d370 <LL_RCC_LSE_IsReady+0x18>
 800d36c:	2301      	movs	r3, #1
 800d36e:	e000      	b.n	800d372 <LL_RCC_LSE_IsReady+0x1a>
 800d370:	2300      	movs	r3, #0
}
 800d372:	4618      	mov	r0, r3
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <LL_RCC_LSI1_Enable>:
{
 800d37c:	b480      	push	{r7}
 800d37e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d380:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d384:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d388:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d38c:	f043 0301 	orr.w	r3, r3, #1
 800d390:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d394:	bf00      	nop
 800d396:	46bd      	mov	sp, r7
 800d398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39c:	4770      	bx	lr

0800d39e <LL_RCC_LSI1_Disable>:
{
 800d39e:	b480      	push	{r7}
 800d3a0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d3a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3ae:	f023 0301 	bic.w	r3, r3, #1
 800d3b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d3b6:	bf00      	nop
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <LL_RCC_LSI1_IsReady>:
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800d3c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3cc:	f003 0302 	and.w	r3, r3, #2
 800d3d0:	2b02      	cmp	r3, #2
 800d3d2:	d101      	bne.n	800d3d8 <LL_RCC_LSI1_IsReady+0x18>
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	e000      	b.n	800d3da <LL_RCC_LSI1_IsReady+0x1a>
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e2:	4770      	bx	lr

0800d3e4 <LL_RCC_LSI2_Enable>:
{
 800d3e4:	b480      	push	{r7}
 800d3e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d3e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d3f0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3f4:	f043 0304 	orr.w	r3, r3, #4
 800d3f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d3fc:	bf00      	nop
 800d3fe:	46bd      	mov	sp, r7
 800d400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d404:	4770      	bx	lr

0800d406 <LL_RCC_LSI2_Disable>:
{
 800d406:	b480      	push	{r7}
 800d408:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d40a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d40e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d412:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d416:	f023 0304 	bic.w	r3, r3, #4
 800d41a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d41e:	bf00      	nop
 800d420:	46bd      	mov	sp, r7
 800d422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d426:	4770      	bx	lr

0800d428 <LL_RCC_LSI2_IsReady>:
{
 800d428:	b480      	push	{r7}
 800d42a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800d42c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d430:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d434:	f003 0308 	and.w	r3, r3, #8
 800d438:	2b08      	cmp	r3, #8
 800d43a:	d101      	bne.n	800d440 <LL_RCC_LSI2_IsReady+0x18>
 800d43c:	2301      	movs	r3, #1
 800d43e:	e000      	b.n	800d442 <LL_RCC_LSI2_IsReady+0x1a>
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	46bd      	mov	sp, r7
 800d446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44a:	4770      	bx	lr

0800d44c <LL_RCC_LSI2_SetTrimming>:
{
 800d44c:	b480      	push	{r7}
 800d44e:	b083      	sub	sp, #12
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800d454:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d458:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d45c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	021b      	lsls	r3, r3, #8
 800d464:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d468:	4313      	orrs	r3, r2
 800d46a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800d46e:	bf00      	nop
 800d470:	370c      	adds	r7, #12
 800d472:	46bd      	mov	sp, r7
 800d474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d478:	4770      	bx	lr

0800d47a <LL_RCC_MSI_Enable>:
{
 800d47a:	b480      	push	{r7}
 800d47c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800d47e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d488:	f043 0301 	orr.w	r3, r3, #1
 800d48c:	6013      	str	r3, [r2, #0]
}
 800d48e:	bf00      	nop
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <LL_RCC_MSI_Disable>:
{
 800d498:	b480      	push	{r7}
 800d49a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800d49c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d4a6:	f023 0301 	bic.w	r3, r3, #1
 800d4aa:	6013      	str	r3, [r2, #0]
}
 800d4ac:	bf00      	nop
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr

0800d4b6 <LL_RCC_MSI_IsReady>:
{
 800d4b6:	b480      	push	{r7}
 800d4b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800d4ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	f003 0302 	and.w	r3, r3, #2
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d101      	bne.n	800d4cc <LL_RCC_MSI_IsReady+0x16>
 800d4c8:	2301      	movs	r3, #1
 800d4ca:	e000      	b.n	800d4ce <LL_RCC_MSI_IsReady+0x18>
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d6:	4770      	bx	lr

0800d4d8 <LL_RCC_MSI_SetRange>:
{
 800d4d8:	b480      	push	{r7}
 800d4da:	b083      	sub	sp, #12
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800d4e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d4ea:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	600b      	str	r3, [r1, #0]
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <LL_RCC_MSI_GetRange>:
{
 800d500:	b480      	push	{r7}
 800d502:	b083      	sub	sp, #12
 800d504:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800d506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d510:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2bb0      	cmp	r3, #176	@ 0xb0
 800d516:	d901      	bls.n	800d51c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800d518:	23b0      	movs	r3, #176	@ 0xb0
 800d51a:	607b      	str	r3, [r7, #4]
  return msiRange;
 800d51c:	687b      	ldr	r3, [r7, #4]
}
 800d51e:	4618      	mov	r0, r3
 800d520:	370c      	adds	r7, #12
 800d522:	46bd      	mov	sp, r7
 800d524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d528:	4770      	bx	lr

0800d52a <LL_RCC_MSI_SetCalibTrimming>:
{
 800d52a:	b480      	push	{r7}
 800d52c:	b083      	sub	sp, #12
 800d52e:	af00      	add	r7, sp, #0
 800d530:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800d532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	021b      	lsls	r3, r3, #8
 800d540:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d544:	4313      	orrs	r3, r2
 800d546:	604b      	str	r3, [r1, #4]
}
 800d548:	bf00      	nop
 800d54a:	370c      	adds	r7, #12
 800d54c:	46bd      	mov	sp, r7
 800d54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d552:	4770      	bx	lr

0800d554 <LL_RCC_SetSysClkSource>:
{
 800d554:	b480      	push	{r7}
 800d556:	b083      	sub	sp, #12
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d55c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d560:	689b      	ldr	r3, [r3, #8]
 800d562:	f023 0203 	bic.w	r2, r3, #3
 800d566:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	4313      	orrs	r3, r2
 800d56e:	608b      	str	r3, [r1, #8]
}
 800d570:	bf00      	nop
 800d572:	370c      	adds	r7, #12
 800d574:	46bd      	mov	sp, r7
 800d576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d57a:	4770      	bx	lr

0800d57c <LL_RCC_GetSysClkSource>:
{
 800d57c:	b480      	push	{r7}
 800d57e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d580:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d584:	689b      	ldr	r3, [r3, #8]
 800d586:	f003 030c 	and.w	r3, r3, #12
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	46bd      	mov	sp, r7
 800d58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d592:	4770      	bx	lr

0800d594 <LL_RCC_SetAHBPrescaler>:
{
 800d594:	b480      	push	{r7}
 800d596:	b083      	sub	sp, #12
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d59c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5a0:	689b      	ldr	r3, [r3, #8]
 800d5a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d5a6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4313      	orrs	r3, r2
 800d5ae:	608b      	str	r3, [r1, #8]
}
 800d5b0:	bf00      	nop
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <LL_C2_RCC_SetAHBPrescaler>:
{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800d5c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d5cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d5d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	4313      	orrs	r3, r2
 800d5d8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d5dc:	bf00      	nop
 800d5de:	370c      	adds	r7, #12
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e6:	4770      	bx	lr

0800d5e8 <LL_RCC_SetAHB4Prescaler>:
{
 800d5e8:	b480      	push	{r7}
 800d5ea:	b083      	sub	sp, #12
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800d5f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d5f8:	f023 020f 	bic.w	r2, r3, #15
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	091b      	lsrs	r3, r3, #4
 800d600:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d604:	4313      	orrs	r3, r2
 800d606:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d60a:	bf00      	nop
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <LL_RCC_SetAPB1Prescaler>:
{
 800d616:	b480      	push	{r7}
 800d618:	b083      	sub	sp, #12
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d61e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d622:	689b      	ldr	r3, [r3, #8]
 800d624:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d628:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4313      	orrs	r3, r2
 800d630:	608b      	str	r3, [r1, #8]
}
 800d632:	bf00      	nop
 800d634:	370c      	adds	r7, #12
 800d636:	46bd      	mov	sp, r7
 800d638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63c:	4770      	bx	lr

0800d63e <LL_RCC_SetAPB2Prescaler>:
{
 800d63e:	b480      	push	{r7}
 800d640:	b083      	sub	sp, #12
 800d642:	af00      	add	r7, sp, #0
 800d644:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d646:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d64a:	689b      	ldr	r3, [r3, #8]
 800d64c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d650:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4313      	orrs	r3, r2
 800d658:	608b      	str	r3, [r1, #8]
}
 800d65a:	bf00      	nop
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <LL_RCC_GetAHBPrescaler>:
{
 800d666:	b480      	push	{r7}
 800d668:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d66a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d66e:	689b      	ldr	r3, [r3, #8]
 800d670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d674:	4618      	mov	r0, r3
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr

0800d67e <LL_RCC_GetAHB4Prescaler>:
{
 800d67e:	b480      	push	{r7}
 800d680:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800d682:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d686:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d68a:	011b      	lsls	r3, r3, #4
 800d68c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d690:	4618      	mov	r0, r3
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr

0800d69a <LL_RCC_GetAPB1Prescaler>:
{
 800d69a:	b480      	push	{r7}
 800d69c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800d69e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6a2:	689b      	ldr	r3, [r3, #8]
 800d6a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b0:	4770      	bx	lr

0800d6b2 <LL_RCC_GetAPB2Prescaler>:
{
 800d6b2:	b480      	push	{r7}
 800d6b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800d6b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6ba:	689b      	ldr	r3, [r3, #8]
 800d6bc:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c8:	4770      	bx	lr

0800d6ca <LL_RCC_PLL_Enable>:
{
 800d6ca:	b480      	push	{r7}
 800d6cc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800d6ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d6d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d6dc:	6013      	str	r3, [r2, #0]
}
 800d6de:	bf00      	nop
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e6:	4770      	bx	lr

0800d6e8 <LL_RCC_PLL_Disable>:
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800d6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d6f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d6fa:	6013      	str	r3, [r2, #0]
}
 800d6fc:	bf00      	nop
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <LL_RCC_PLL_IsReady>:
{
 800d706:	b480      	push	{r7}
 800d708:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800d70a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d714:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d718:	d101      	bne.n	800d71e <LL_RCC_PLL_IsReady+0x18>
 800d71a:	2301      	movs	r3, #1
 800d71c:	e000      	b.n	800d720 <LL_RCC_PLL_IsReady+0x1a>
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <LL_RCC_PLL_GetN>:
{
 800d72a:	b480      	push	{r7}
 800d72c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d72e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	0a1b      	lsrs	r3, r3, #8
 800d736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800d73a:	4618      	mov	r0, r3
 800d73c:	46bd      	mov	sp, r7
 800d73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d742:	4770      	bx	lr

0800d744 <LL_RCC_PLL_GetR>:
{
 800d744:	b480      	push	{r7}
 800d746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d74c:	68db      	ldr	r3, [r3, #12]
 800d74e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800d752:	4618      	mov	r0, r3
 800d754:	46bd      	mov	sp, r7
 800d756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d75a:	4770      	bx	lr

0800d75c <LL_RCC_PLL_GetDivider>:
{
 800d75c:	b480      	push	{r7}
 800d75e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d760:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d764:	68db      	ldr	r3, [r3, #12]
 800d766:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800d76a:	4618      	mov	r0, r3
 800d76c:	46bd      	mov	sp, r7
 800d76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d772:	4770      	bx	lr

0800d774 <LL_RCC_PLL_GetMainSource>:
{
 800d774:	b480      	push	{r7}
 800d776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d778:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	f003 0303 	and.w	r3, r3, #3
}
 800d782:	4618      	mov	r0, r3
 800d784:	46bd      	mov	sp, r7
 800d786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78a:	4770      	bx	lr

0800d78c <LL_RCC_IsActiveFlag_HPRE>:
{
 800d78c:	b480      	push	{r7}
 800d78e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800d790:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d794:	689b      	ldr	r3, [r3, #8]
 800d796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d79a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d79e:	d101      	bne.n	800d7a4 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e000      	b.n	800d7a6 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr

0800d7b0 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800d7b0:	b480      	push	{r7}
 800d7b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800d7b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d7bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d7c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d7c4:	d101      	bne.n	800d7ca <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800d7c6:	2301      	movs	r3, #1
 800d7c8:	e000      	b.n	800d7cc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800d7ca:	2300      	movs	r3, #0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	46bd      	mov	sp, r7
 800d7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d4:	4770      	bx	lr

0800d7d6 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800d7d6:	b480      	push	{r7}
 800d7d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800d7da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7de:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d7e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d7e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7ea:	d101      	bne.n	800d7f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e000      	b.n	800d7f2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800d7f0:	2300      	movs	r3, #0
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <LL_RCC_IsActiveFlag_PPRE1>:
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800d800:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d80a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d80e:	d101      	bne.n	800d814 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800d810:	2301      	movs	r3, #1
 800d812:	e000      	b.n	800d816 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	46bd      	mov	sp, r7
 800d81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d81e:	4770      	bx	lr

0800d820 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800d820:	b480      	push	{r7}
 800d822:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800d824:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d828:	689b      	ldr	r3, [r3, #8]
 800d82a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d82e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d832:	d101      	bne.n	800d838 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800d834:	2301      	movs	r3, #1
 800d836:	e000      	b.n	800d83a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800d838:	2300      	movs	r3, #0
}
 800d83a:	4618      	mov	r0, r3
 800d83c:	46bd      	mov	sp, r7
 800d83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d842:	4770      	bx	lr

0800d844 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d844:	b590      	push	{r4, r7, lr}
 800d846:	b08d      	sub	sp, #52	@ 0x34
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d101      	bne.n	800d856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d852:	2301      	movs	r3, #1
 800d854:	e363      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	f003 0320 	and.w	r3, r3, #32
 800d85e:	2b00      	cmp	r3, #0
 800d860:	f000 808d 	beq.w	800d97e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d864:	f7ff fe8a 	bl	800d57c <LL_RCC_GetSysClkSource>
 800d868:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d86a:	f7ff ff83 	bl	800d774 <LL_RCC_PLL_GetMainSource>
 800d86e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d872:	2b00      	cmp	r3, #0
 800d874:	d005      	beq.n	800d882 <HAL_RCC_OscConfig+0x3e>
 800d876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d878:	2b0c      	cmp	r3, #12
 800d87a:	d147      	bne.n	800d90c <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800d87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d144      	bne.n	800d90c <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	69db      	ldr	r3, [r3, #28]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d101      	bne.n	800d88e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e347      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d892:	f7ff fe35 	bl	800d500 <LL_RCC_MSI_GetRange>
 800d896:	4603      	mov	r3, r0
 800d898:	429c      	cmp	r4, r3
 800d89a:	d914      	bls.n	800d8c6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	f000 fd2f 	bl	800e304 <RCC_SetFlashLatencyFromMSIRange>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d001      	beq.n	800d8b0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	e336      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	f7ff fe0f 	bl	800d4d8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	6a1b      	ldr	r3, [r3, #32]
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7ff fe33 	bl	800d52a <LL_RCC_MSI_SetCalibTrimming>
 800d8c4:	e013      	b.n	800d8ee <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7ff fe04 	bl	800d4d8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6a1b      	ldr	r3, [r3, #32]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f7ff fe28 	bl	800d52a <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d8de:	4618      	mov	r0, r3
 800d8e0:	f000 fd10 	bl	800e304 <RCC_SetFlashLatencyFromMSIRange>
 800d8e4:	4603      	mov	r3, r0
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d001      	beq.n	800d8ee <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	e317      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d8ee:	f000 fcc9 	bl	800e284 <HAL_RCC_GetHCLKFreq>
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	4aa4      	ldr	r2, [pc, #656]	@ (800db88 <HAL_RCC_OscConfig+0x344>)
 800d8f6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d8f8:	4ba4      	ldr	r3, [pc, #656]	@ (800db8c <HAL_RCC_OscConfig+0x348>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7fe fa21 	bl	800bd44 <HAL_InitTick>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	d039      	beq.n	800d97c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e308      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	69db      	ldr	r3, [r3, #28]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d01e      	beq.n	800d952 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800d914:	f7ff fdb1 	bl	800d47a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d918:	f7fe fa62 	bl	800bde0 <HAL_GetTick>
 800d91c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800d91e:	e008      	b.n	800d932 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d920:	f7fe fa5e 	bl	800bde0 <HAL_GetTick>
 800d924:	4602      	mov	r2, r0
 800d926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d928:	1ad3      	subs	r3, r2, r3
 800d92a:	2b02      	cmp	r3, #2
 800d92c:	d901      	bls.n	800d932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800d92e:	2303      	movs	r3, #3
 800d930:	e2f5      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800d932:	f7ff fdc0 	bl	800d4b6 <LL_RCC_MSI_IsReady>
 800d936:	4603      	mov	r3, r0
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d0f1      	beq.n	800d920 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d940:	4618      	mov	r0, r3
 800d942:	f7ff fdc9 	bl	800d4d8 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a1b      	ldr	r3, [r3, #32]
 800d94a:	4618      	mov	r0, r3
 800d94c:	f7ff fded 	bl	800d52a <LL_RCC_MSI_SetCalibTrimming>
 800d950:	e015      	b.n	800d97e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800d952:	f7ff fda1 	bl	800d498 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800d956:	f7fe fa43 	bl	800bde0 <HAL_GetTick>
 800d95a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800d95c:	e008      	b.n	800d970 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800d95e:	f7fe fa3f 	bl	800bde0 <HAL_GetTick>
 800d962:	4602      	mov	r2, r0
 800d964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d966:	1ad3      	subs	r3, r2, r3
 800d968:	2b02      	cmp	r3, #2
 800d96a:	d901      	bls.n	800d970 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800d96c:	2303      	movs	r3, #3
 800d96e:	e2d6      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800d970:	f7ff fda1 	bl	800d4b6 <LL_RCC_MSI_IsReady>
 800d974:	4603      	mov	r3, r0
 800d976:	2b00      	cmp	r3, #0
 800d978:	d1f1      	bne.n	800d95e <HAL_RCC_OscConfig+0x11a>
 800d97a:	e000      	b.n	800d97e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d97c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 0301 	and.w	r3, r3, #1
 800d986:	2b00      	cmp	r3, #0
 800d988:	d047      	beq.n	800da1a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d98a:	f7ff fdf7 	bl	800d57c <LL_RCC_GetSysClkSource>
 800d98e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d990:	f7ff fef0 	bl	800d774 <LL_RCC_PLL_GetMainSource>
 800d994:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800d996:	6a3b      	ldr	r3, [r7, #32]
 800d998:	2b08      	cmp	r3, #8
 800d99a:	d005      	beq.n	800d9a8 <HAL_RCC_OscConfig+0x164>
 800d99c:	6a3b      	ldr	r3, [r7, #32]
 800d99e:	2b0c      	cmp	r3, #12
 800d9a0:	d108      	bne.n	800d9b4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	2b03      	cmp	r3, #3
 800d9a6:	d105      	bne.n	800d9b4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	685b      	ldr	r3, [r3, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d134      	bne.n	800da1a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e2b4      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685b      	ldr	r3, [r3, #4]
 800d9b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d9bc:	d102      	bne.n	800d9c4 <HAL_RCC_OscConfig+0x180>
 800d9be:	f7ff fbde 	bl	800d17e <LL_RCC_HSE_Enable>
 800d9c2:	e001      	b.n	800d9c8 <HAL_RCC_OscConfig+0x184>
 800d9c4:	f7ff fbea 	bl	800d19c <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d012      	beq.n	800d9f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9d0:	f7fe fa06 	bl	800bde0 <HAL_GetTick>
 800d9d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800d9d6:	e008      	b.n	800d9ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d9d8:	f7fe fa02 	bl	800bde0 <HAL_GetTick>
 800d9dc:	4602      	mov	r2, r0
 800d9de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9e0:	1ad3      	subs	r3, r2, r3
 800d9e2:	2b64      	cmp	r3, #100	@ 0x64
 800d9e4:	d901      	bls.n	800d9ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800d9e6:	2303      	movs	r3, #3
 800d9e8:	e299      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800d9ea:	f7ff fbe6 	bl	800d1ba <LL_RCC_HSE_IsReady>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d0f1      	beq.n	800d9d8 <HAL_RCC_OscConfig+0x194>
 800d9f4:	e011      	b.n	800da1a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d9f6:	f7fe f9f3 	bl	800bde0 <HAL_GetTick>
 800d9fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800d9fc:	e008      	b.n	800da10 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d9fe:	f7fe f9ef 	bl	800bde0 <HAL_GetTick>
 800da02:	4602      	mov	r2, r0
 800da04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da06:	1ad3      	subs	r3, r2, r3
 800da08:	2b64      	cmp	r3, #100	@ 0x64
 800da0a:	d901      	bls.n	800da10 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800da0c:	2303      	movs	r3, #3
 800da0e:	e286      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800da10:	f7ff fbd3 	bl	800d1ba <LL_RCC_HSE_IsReady>
 800da14:	4603      	mov	r3, r0
 800da16:	2b00      	cmp	r3, #0
 800da18:	d1f1      	bne.n	800d9fe <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f003 0302 	and.w	r3, r3, #2
 800da22:	2b00      	cmp	r3, #0
 800da24:	d04c      	beq.n	800dac0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da26:	f7ff fda9 	bl	800d57c <LL_RCC_GetSysClkSource>
 800da2a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800da2c:	f7ff fea2 	bl	800d774 <LL_RCC_PLL_GetMainSource>
 800da30:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800da32:	69bb      	ldr	r3, [r7, #24]
 800da34:	2b04      	cmp	r3, #4
 800da36:	d005      	beq.n	800da44 <HAL_RCC_OscConfig+0x200>
 800da38:	69bb      	ldr	r3, [r7, #24]
 800da3a:	2b0c      	cmp	r3, #12
 800da3c:	d10e      	bne.n	800da5c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	2b02      	cmp	r3, #2
 800da42:	d10b      	bne.n	800da5c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d101      	bne.n	800da50 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800da4c:	2301      	movs	r3, #1
 800da4e:	e266      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	691b      	ldr	r3, [r3, #16]
 800da54:	4618      	mov	r0, r3
 800da56:	f7ff fbf2 	bl	800d23e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800da5a:	e031      	b.n	800dac0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d019      	beq.n	800da98 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800da64:	f7ff fbbb 	bl	800d1de <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da68:	f7fe f9ba 	bl	800bde0 <HAL_GetTick>
 800da6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800da6e:	e008      	b.n	800da82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800da70:	f7fe f9b6 	bl	800bde0 <HAL_GetTick>
 800da74:	4602      	mov	r2, r0
 800da76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da78:	1ad3      	subs	r3, r2, r3
 800da7a:	2b02      	cmp	r3, #2
 800da7c:	d901      	bls.n	800da82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800da7e:	2303      	movs	r3, #3
 800da80:	e24d      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800da82:	f7ff fbca 	bl	800d21a <LL_RCC_HSI_IsReady>
 800da86:	4603      	mov	r3, r0
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d0f1      	beq.n	800da70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	691b      	ldr	r3, [r3, #16]
 800da90:	4618      	mov	r0, r3
 800da92:	f7ff fbd4 	bl	800d23e <LL_RCC_HSI_SetCalibTrimming>
 800da96:	e013      	b.n	800dac0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800da98:	f7ff fbb0 	bl	800d1fc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800da9c:	f7fe f9a0 	bl	800bde0 <HAL_GetTick>
 800daa0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800daa2:	e008      	b.n	800dab6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800daa4:	f7fe f99c 	bl	800bde0 <HAL_GetTick>
 800daa8:	4602      	mov	r2, r0
 800daaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daac:	1ad3      	subs	r3, r2, r3
 800daae:	2b02      	cmp	r3, #2
 800dab0:	d901      	bls.n	800dab6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800dab2:	2303      	movs	r3, #3
 800dab4:	e233      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800dab6:	f7ff fbb0 	bl	800d21a <LL_RCC_HSI_IsReady>
 800daba:	4603      	mov	r3, r0
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d1f1      	bne.n	800daa4 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f003 0308 	and.w	r3, r3, #8
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d106      	bne.n	800dada <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	f000 80a3 	beq.w	800dc20 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	695b      	ldr	r3, [r3, #20]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d076      	beq.n	800dbd0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	f003 0310 	and.w	r3, r3, #16
 800daea:	2b00      	cmp	r3, #0
 800daec:	d046      	beq.n	800db7c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800daee:	f7ff fc67 	bl	800d3c0 <LL_RCC_LSI1_IsReady>
 800daf2:	4603      	mov	r3, r0
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d113      	bne.n	800db20 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800daf8:	f7ff fc40 	bl	800d37c <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dafc:	f7fe f970 	bl	800bde0 <HAL_GetTick>
 800db00:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800db02:	e008      	b.n	800db16 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800db04:	f7fe f96c 	bl	800bde0 <HAL_GetTick>
 800db08:	4602      	mov	r2, r0
 800db0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db0c:	1ad3      	subs	r3, r2, r3
 800db0e:	2b02      	cmp	r3, #2
 800db10:	d901      	bls.n	800db16 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800db12:	2303      	movs	r3, #3
 800db14:	e203      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800db16:	f7ff fc53 	bl	800d3c0 <LL_RCC_LSI1_IsReady>
 800db1a:	4603      	mov	r3, r0
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0f1      	beq.n	800db04 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800db20:	f7ff fc60 	bl	800d3e4 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db24:	f7fe f95c 	bl	800bde0 <HAL_GetTick>
 800db28:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800db2a:	e008      	b.n	800db3e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800db2c:	f7fe f958 	bl	800bde0 <HAL_GetTick>
 800db30:	4602      	mov	r2, r0
 800db32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db34:	1ad3      	subs	r3, r2, r3
 800db36:	2b03      	cmp	r3, #3
 800db38:	d901      	bls.n	800db3e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800db3a:	2303      	movs	r3, #3
 800db3c:	e1ef      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800db3e:	f7ff fc73 	bl	800d428 <LL_RCC_LSI2_IsReady>
 800db42:	4603      	mov	r3, r0
 800db44:	2b00      	cmp	r3, #0
 800db46:	d0f1      	beq.n	800db2c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	699b      	ldr	r3, [r3, #24]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff fc7d 	bl	800d44c <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800db52:	f7ff fc24 	bl	800d39e <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db56:	f7fe f943 	bl	800bde0 <HAL_GetTick>
 800db5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800db5c:	e008      	b.n	800db70 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800db5e:	f7fe f93f 	bl	800bde0 <HAL_GetTick>
 800db62:	4602      	mov	r2, r0
 800db64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	2b02      	cmp	r3, #2
 800db6a:	d901      	bls.n	800db70 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800db6c:	2303      	movs	r3, #3
 800db6e:	e1d6      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800db70:	f7ff fc26 	bl	800d3c0 <LL_RCC_LSI1_IsReady>
 800db74:	4603      	mov	r3, r0
 800db76:	2b00      	cmp	r3, #0
 800db78:	d1f1      	bne.n	800db5e <HAL_RCC_OscConfig+0x31a>
 800db7a:	e051      	b.n	800dc20 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800db7c:	f7ff fbfe 	bl	800d37c <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db80:	f7fe f92e 	bl	800bde0 <HAL_GetTick>
 800db84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800db86:	e00c      	b.n	800dba2 <HAL_RCC_OscConfig+0x35e>
 800db88:	20000088 	.word	0x20000088
 800db8c:	2000008c 	.word	0x2000008c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800db90:	f7fe f926 	bl	800bde0 <HAL_GetTick>
 800db94:	4602      	mov	r2, r0
 800db96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db98:	1ad3      	subs	r3, r2, r3
 800db9a:	2b02      	cmp	r3, #2
 800db9c:	d901      	bls.n	800dba2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800db9e:	2303      	movs	r3, #3
 800dba0:	e1bd      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800dba2:	f7ff fc0d 	bl	800d3c0 <LL_RCC_LSI1_IsReady>
 800dba6:	4603      	mov	r3, r0
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d0f1      	beq.n	800db90 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800dbac:	f7ff fc2b 	bl	800d406 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800dbb0:	e008      	b.n	800dbc4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dbb2:	f7fe f915 	bl	800bde0 <HAL_GetTick>
 800dbb6:	4602      	mov	r2, r0
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbba:	1ad3      	subs	r3, r2, r3
 800dbbc:	2b03      	cmp	r3, #3
 800dbbe:	d901      	bls.n	800dbc4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800dbc0:	2303      	movs	r3, #3
 800dbc2:	e1ac      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800dbc4:	f7ff fc30 	bl	800d428 <LL_RCC_LSI2_IsReady>
 800dbc8:	4603      	mov	r3, r0
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d1f1      	bne.n	800dbb2 <HAL_RCC_OscConfig+0x36e>
 800dbce:	e027      	b.n	800dc20 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800dbd0:	f7ff fc19 	bl	800d406 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dbd4:	f7fe f904 	bl	800bde0 <HAL_GetTick>
 800dbd8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800dbda:	e008      	b.n	800dbee <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dbdc:	f7fe f900 	bl	800bde0 <HAL_GetTick>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbe4:	1ad3      	subs	r3, r2, r3
 800dbe6:	2b03      	cmp	r3, #3
 800dbe8:	d901      	bls.n	800dbee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800dbea:	2303      	movs	r3, #3
 800dbec:	e197      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800dbee:	f7ff fc1b 	bl	800d428 <LL_RCC_LSI2_IsReady>
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d1f1      	bne.n	800dbdc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800dbf8:	f7ff fbd1 	bl	800d39e <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dbfc:	f7fe f8f0 	bl	800bde0 <HAL_GetTick>
 800dc00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800dc02:	e008      	b.n	800dc16 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dc04:	f7fe f8ec 	bl	800bde0 <HAL_GetTick>
 800dc08:	4602      	mov	r2, r0
 800dc0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0c:	1ad3      	subs	r3, r2, r3
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d901      	bls.n	800dc16 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800dc12:	2303      	movs	r3, #3
 800dc14:	e183      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800dc16:	f7ff fbd3 	bl	800d3c0 <LL_RCC_LSI1_IsReady>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d1f1      	bne.n	800dc04 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	f003 0304 	and.w	r3, r3, #4
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d05b      	beq.n	800dce4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc2c:	4ba7      	ldr	r3, [pc, #668]	@ (800decc <HAL_RCC_OscConfig+0x688>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d114      	bne.n	800dc62 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800dc38:	f7ff f9f2 	bl	800d020 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dc3c:	f7fe f8d0 	bl	800bde0 <HAL_GetTick>
 800dc40:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc42:	e008      	b.n	800dc56 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dc44:	f7fe f8cc 	bl	800bde0 <HAL_GetTick>
 800dc48:	4602      	mov	r2, r0
 800dc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc4c:	1ad3      	subs	r3, r2, r3
 800dc4e:	2b02      	cmp	r3, #2
 800dc50:	d901      	bls.n	800dc56 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800dc52:	2303      	movs	r3, #3
 800dc54:	e163      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dc56:	4b9d      	ldr	r3, [pc, #628]	@ (800decc <HAL_RCC_OscConfig+0x688>)
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0f0      	beq.n	800dc44 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	2b01      	cmp	r3, #1
 800dc68:	d102      	bne.n	800dc70 <HAL_RCC_OscConfig+0x42c>
 800dc6a:	f7ff fb31 	bl	800d2d0 <LL_RCC_LSE_Enable>
 800dc6e:	e00c      	b.n	800dc8a <HAL_RCC_OscConfig+0x446>
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	2b05      	cmp	r3, #5
 800dc76:	d104      	bne.n	800dc82 <HAL_RCC_OscConfig+0x43e>
 800dc78:	f7ff fb4c 	bl	800d314 <LL_RCC_LSE_EnableBypass>
 800dc7c:	f7ff fb28 	bl	800d2d0 <LL_RCC_LSE_Enable>
 800dc80:	e003      	b.n	800dc8a <HAL_RCC_OscConfig+0x446>
 800dc82:	f7ff fb36 	bl	800d2f2 <LL_RCC_LSE_Disable>
 800dc86:	f7ff fb56 	bl	800d336 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	689b      	ldr	r3, [r3, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d014      	beq.n	800dcbc <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dc92:	f7fe f8a5 	bl	800bde0 <HAL_GetTick>
 800dc96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800dc98:	e00a      	b.n	800dcb0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dc9a:	f7fe f8a1 	bl	800bde0 <HAL_GetTick>
 800dc9e:	4602      	mov	r2, r0
 800dca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dca2:	1ad3      	subs	r3, r2, r3
 800dca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d901      	bls.n	800dcb0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800dcac:	2303      	movs	r3, #3
 800dcae:	e136      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800dcb0:	f7ff fb52 	bl	800d358 <LL_RCC_LSE_IsReady>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d0ef      	beq.n	800dc9a <HAL_RCC_OscConfig+0x456>
 800dcba:	e013      	b.n	800dce4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcbc:	f7fe f890 	bl	800bde0 <HAL_GetTick>
 800dcc0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800dcc2:	e00a      	b.n	800dcda <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dcc4:	f7fe f88c 	bl	800bde0 <HAL_GetTick>
 800dcc8:	4602      	mov	r2, r0
 800dcca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dcd2:	4293      	cmp	r3, r2
 800dcd4:	d901      	bls.n	800dcda <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800dcd6:	2303      	movs	r3, #3
 800dcd8:	e121      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800dcda:	f7ff fb3d 	bl	800d358 <LL_RCC_LSE_IsReady>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1ef      	bne.n	800dcc4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d02c      	beq.n	800dd4a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d014      	beq.n	800dd22 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dcf8:	f7ff fab6 	bl	800d268 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcfc:	f7fe f870 	bl	800bde0 <HAL_GetTick>
 800dd00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800dd02:	e008      	b.n	800dd16 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd04:	f7fe f86c 	bl	800bde0 <HAL_GetTick>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd0c:	1ad3      	subs	r3, r2, r3
 800dd0e:	2b02      	cmp	r3, #2
 800dd10:	d901      	bls.n	800dd16 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800dd12:	2303      	movs	r3, #3
 800dd14:	e103      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800dd16:	f7ff fac9 	bl	800d2ac <LL_RCC_HSI48_IsReady>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d0f1      	beq.n	800dd04 <HAL_RCC_OscConfig+0x4c0>
 800dd20:	e013      	b.n	800dd4a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800dd22:	f7ff fab2 	bl	800d28a <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd26:	f7fe f85b 	bl	800bde0 <HAL_GetTick>
 800dd2a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800dd2c:	e008      	b.n	800dd40 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800dd2e:	f7fe f857 	bl	800bde0 <HAL_GetTick>
 800dd32:	4602      	mov	r2, r0
 800dd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd36:	1ad3      	subs	r3, r2, r3
 800dd38:	2b02      	cmp	r3, #2
 800dd3a:	d901      	bls.n	800dd40 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	e0ee      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800dd40:	f7ff fab4 	bl	800d2ac <LL_RCC_HSI48_IsReady>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d1f1      	bne.n	800dd2e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	f000 80e4 	beq.w	800df1c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800dd54:	f7ff fc12 	bl	800d57c <LL_RCC_GetSysClkSource>
 800dd58:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800dd5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	f040 80b4 	bne.w	800ded4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f003 0203 	and.w	r2, r3, #3
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd76:	429a      	cmp	r2, r3
 800dd78:	d123      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d11c      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	0a1b      	lsrs	r3, r3, #8
 800dd8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800dd94:	429a      	cmp	r2, r3
 800dd96:	d114      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d10d      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d106      	bne.n	800ddc2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800ddbe:	429a      	cmp	r2, r3
 800ddc0:	d05d      	beq.n	800de7e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b0c      	cmp	r3, #12
 800ddc6:	d058      	beq.n	800de7a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ddc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d001      	beq.n	800ddda <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800ddd6:	2301      	movs	r3, #1
 800ddd8:	e0a1      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ddda:	f7ff fc85 	bl	800d6e8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ddde:	f7fd ffff 	bl	800bde0 <HAL_GetTick>
 800dde2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dde4:	e008      	b.n	800ddf8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dde6:	f7fd fffb 	bl	800bde0 <HAL_GetTick>
 800ddea:	4602      	mov	r2, r0
 800ddec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddee:	1ad3      	subs	r3, r2, r3
 800ddf0:	2b02      	cmp	r3, #2
 800ddf2:	d901      	bls.n	800ddf8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800ddf4:	2303      	movs	r3, #3
 800ddf6:	e092      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ddf8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1ef      	bne.n	800dde6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800de06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de0a:	68da      	ldr	r2, [r3, #12]
 800de0c:	4b30      	ldr	r3, [pc, #192]	@ (800ded0 <HAL_RCC_OscConfig+0x68c>)
 800de0e:	4013      	ands	r3, r2
 800de10:	687a      	ldr	r2, [r7, #4]
 800de12:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800de18:	4311      	orrs	r1, r2
 800de1a:	687a      	ldr	r2, [r7, #4]
 800de1c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800de1e:	0212      	lsls	r2, r2, #8
 800de20:	4311      	orrs	r1, r2
 800de22:	687a      	ldr	r2, [r7, #4]
 800de24:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800de26:	4311      	orrs	r1, r2
 800de28:	687a      	ldr	r2, [r7, #4]
 800de2a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800de2c:	4311      	orrs	r1, r2
 800de2e:	687a      	ldr	r2, [r7, #4]
 800de30:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800de32:	430a      	orrs	r2, r1
 800de34:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800de38:	4313      	orrs	r3, r2
 800de3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800de3c:	f7ff fc45 	bl	800d6ca <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800de40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de44:	68db      	ldr	r3, [r3, #12]
 800de46:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800de4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800de50:	f7fd ffc6 	bl	800bde0 <HAL_GetTick>
 800de54:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800de56:	e008      	b.n	800de6a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800de58:	f7fd ffc2 	bl	800bde0 <HAL_GetTick>
 800de5c:	4602      	mov	r2, r0
 800de5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de60:	1ad3      	subs	r3, r2, r3
 800de62:	2b02      	cmp	r3, #2
 800de64:	d901      	bls.n	800de6a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800de66:	2303      	movs	r3, #3
 800de68:	e059      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800de6a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de74:	2b00      	cmp	r3, #0
 800de76:	d0ef      	beq.n	800de58 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800de78:	e050      	b.n	800df1c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800de7a:	2301      	movs	r3, #1
 800de7c:	e04f      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800de7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d147      	bne.n	800df1c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800de8c:	f7ff fc1d 	bl	800d6ca <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800de90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de94:	68db      	ldr	r3, [r3, #12]
 800de96:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800de9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800de9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dea0:	f7fd ff9e 	bl	800bde0 <HAL_GetTick>
 800dea4:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dea6:	e008      	b.n	800deba <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dea8:	f7fd ff9a 	bl	800bde0 <HAL_GetTick>
 800deac:	4602      	mov	r2, r0
 800deae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deb0:	1ad3      	subs	r3, r2, r3
 800deb2:	2b02      	cmp	r3, #2
 800deb4:	d901      	bls.n	800deba <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800deb6:	2303      	movs	r3, #3
 800deb8:	e031      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800deba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d0ef      	beq.n	800dea8 <HAL_RCC_OscConfig+0x664>
 800dec8:	e028      	b.n	800df1c <HAL_RCC_OscConfig+0x6d8>
 800deca:	bf00      	nop
 800decc:	58000400 	.word	0x58000400
 800ded0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	2b0c      	cmp	r3, #12
 800ded8:	d01e      	beq.n	800df18 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800deda:	f7ff fc05 	bl	800d6e8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dede:	f7fd ff7f 	bl	800bde0 <HAL_GetTick>
 800dee2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dee4:	e008      	b.n	800def8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dee6:	f7fd ff7b 	bl	800bde0 <HAL_GetTick>
 800deea:	4602      	mov	r2, r0
 800deec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deee:	1ad3      	subs	r3, r2, r3
 800def0:	2b02      	cmp	r3, #2
 800def2:	d901      	bls.n	800def8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800def4:	2303      	movs	r3, #3
 800def6:	e012      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800def8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800defc:	681b      	ldr	r3, [r3, #0]
 800defe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df02:	2b00      	cmp	r3, #0
 800df04:	d1ef      	bne.n	800dee6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800df06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df0a:	68da      	ldr	r2, [r3, #12]
 800df0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df10:	4b05      	ldr	r3, [pc, #20]	@ (800df28 <HAL_RCC_OscConfig+0x6e4>)
 800df12:	4013      	ands	r3, r2
 800df14:	60cb      	str	r3, [r1, #12]
 800df16:	e001      	b.n	800df1c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800df18:	2301      	movs	r3, #1
 800df1a:	e000      	b.n	800df1e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3734      	adds	r7, #52	@ 0x34
 800df22:	46bd      	mov	sp, r7
 800df24:	bd90      	pop	{r4, r7, pc}
 800df26:	bf00      	nop
 800df28:	eefefffc 	.word	0xeefefffc

0800df2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
 800df34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d101      	bne.n	800df40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800df3c:	2301      	movs	r3, #1
 800df3e:	e12d      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800df40:	4b98      	ldr	r3, [pc, #608]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f003 0307 	and.w	r3, r3, #7
 800df48:	683a      	ldr	r2, [r7, #0]
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d91b      	bls.n	800df86 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800df4e:	4b95      	ldr	r3, [pc, #596]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f023 0207 	bic.w	r2, r3, #7
 800df56:	4993      	ldr	r1, [pc, #588]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	4313      	orrs	r3, r2
 800df5c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df5e:	f7fd ff3f 	bl	800bde0 <HAL_GetTick>
 800df62:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df64:	e008      	b.n	800df78 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800df66:	f7fd ff3b 	bl	800bde0 <HAL_GetTick>
 800df6a:	4602      	mov	r2, r0
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	1ad3      	subs	r3, r2, r3
 800df70:	2b02      	cmp	r3, #2
 800df72:	d901      	bls.n	800df78 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800df74:	2303      	movs	r3, #3
 800df76:	e111      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800df78:	4b8a      	ldr	r3, [pc, #552]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	f003 0307 	and.w	r3, r3, #7
 800df80:	683a      	ldr	r2, [r7, #0]
 800df82:	429a      	cmp	r2, r3
 800df84:	d1ef      	bne.n	800df66 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	f003 0302 	and.w	r3, r3, #2
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d016      	beq.n	800dfc0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	689b      	ldr	r3, [r3, #8]
 800df96:	4618      	mov	r0, r3
 800df98:	f7ff fafc 	bl	800d594 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800df9c:	f7fd ff20 	bl	800bde0 <HAL_GetTick>
 800dfa0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800dfa2:	e008      	b.n	800dfb6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dfa4:	f7fd ff1c 	bl	800bde0 <HAL_GetTick>
 800dfa8:	4602      	mov	r2, r0
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	1ad3      	subs	r3, r2, r3
 800dfae:	2b02      	cmp	r3, #2
 800dfb0:	d901      	bls.n	800dfb6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800dfb2:	2303      	movs	r3, #3
 800dfb4:	e0f2      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800dfb6:	f7ff fbe9 	bl	800d78c <LL_RCC_IsActiveFlag_HPRE>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d0f1      	beq.n	800dfa4 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	f003 0320 	and.w	r3, r3, #32
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d016      	beq.n	800dffa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	695b      	ldr	r3, [r3, #20]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7ff faf3 	bl	800d5bc <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800dfd6:	f7fd ff03 	bl	800bde0 <HAL_GetTick>
 800dfda:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800dfdc:	e008      	b.n	800dff0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800dfde:	f7fd feff 	bl	800bde0 <HAL_GetTick>
 800dfe2:	4602      	mov	r2, r0
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	1ad3      	subs	r3, r2, r3
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d901      	bls.n	800dff0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800dfec:	2303      	movs	r3, #3
 800dfee:	e0d5      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800dff0:	f7ff fbde 	bl	800d7b0 <LL_RCC_IsActiveFlag_C2HPRE>
 800dff4:	4603      	mov	r3, r0
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d0f1      	beq.n	800dfde <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e002:	2b00      	cmp	r3, #0
 800e004:	d016      	beq.n	800e034 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	699b      	ldr	r3, [r3, #24]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f7ff faec 	bl	800d5e8 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e010:	f7fd fee6 	bl	800bde0 <HAL_GetTick>
 800e014:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e016:	e008      	b.n	800e02a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e018:	f7fd fee2 	bl	800bde0 <HAL_GetTick>
 800e01c:	4602      	mov	r2, r0
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	1ad3      	subs	r3, r2, r3
 800e022:	2b02      	cmp	r3, #2
 800e024:	d901      	bls.n	800e02a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800e026:	2303      	movs	r3, #3
 800e028:	e0b8      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e02a:	f7ff fbd4 	bl	800d7d6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800e02e:	4603      	mov	r3, r0
 800e030:	2b00      	cmp	r3, #0
 800e032:	d0f1      	beq.n	800e018 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f003 0304 	and.w	r3, r3, #4
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d016      	beq.n	800e06e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	68db      	ldr	r3, [r3, #12]
 800e044:	4618      	mov	r0, r3
 800e046:	f7ff fae6 	bl	800d616 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e04a:	f7fd fec9 	bl	800bde0 <HAL_GetTick>
 800e04e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e050:	e008      	b.n	800e064 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e052:	f7fd fec5 	bl	800bde0 <HAL_GetTick>
 800e056:	4602      	mov	r2, r0
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	1ad3      	subs	r3, r2, r3
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	d901      	bls.n	800e064 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800e060:	2303      	movs	r3, #3
 800e062:	e09b      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e064:	f7ff fbca 	bl	800d7fc <LL_RCC_IsActiveFlag_PPRE1>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d0f1      	beq.n	800e052 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	f003 0308 	and.w	r3, r3, #8
 800e076:	2b00      	cmp	r3, #0
 800e078:	d017      	beq.n	800e0aa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	691b      	ldr	r3, [r3, #16]
 800e07e:	00db      	lsls	r3, r3, #3
 800e080:	4618      	mov	r0, r3
 800e082:	f7ff fadc 	bl	800d63e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e086:	f7fd feab 	bl	800bde0 <HAL_GetTick>
 800e08a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e08c:	e008      	b.n	800e0a0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e08e:	f7fd fea7 	bl	800bde0 <HAL_GetTick>
 800e092:	4602      	mov	r2, r0
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	1ad3      	subs	r3, r2, r3
 800e098:	2b02      	cmp	r3, #2
 800e09a:	d901      	bls.n	800e0a0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800e09c:	2303      	movs	r3, #3
 800e09e:	e07d      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e0a0:	f7ff fbbe 	bl	800d820 <LL_RCC_IsActiveFlag_PPRE2>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d0f1      	beq.n	800e08e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f003 0301 	and.w	r3, r3, #1
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d043      	beq.n	800e13e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	685b      	ldr	r3, [r3, #4]
 800e0ba:	2b02      	cmp	r3, #2
 800e0bc:	d106      	bne.n	800e0cc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800e0be:	f7ff f87c 	bl	800d1ba <LL_RCC_HSE_IsReady>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d11e      	bne.n	800e106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e0c8:	2301      	movs	r3, #1
 800e0ca:	e067      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	685b      	ldr	r3, [r3, #4]
 800e0d0:	2b03      	cmp	r3, #3
 800e0d2:	d106      	bne.n	800e0e2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800e0d4:	f7ff fb17 	bl	800d706 <LL_RCC_PLL_IsReady>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d113      	bne.n	800e106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e0de:	2301      	movs	r3, #1
 800e0e0:	e05c      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	685b      	ldr	r3, [r3, #4]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d106      	bne.n	800e0f8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800e0ea:	f7ff f9e4 	bl	800d4b6 <LL_RCC_MSI_IsReady>
 800e0ee:	4603      	mov	r3, r0
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d108      	bne.n	800e106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	e051      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800e0f8:	f7ff f88f 	bl	800d21a <LL_RCC_HSI_IsReady>
 800e0fc:	4603      	mov	r3, r0
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d101      	bne.n	800e106 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e102:	2301      	movs	r3, #1
 800e104:	e04a      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	685b      	ldr	r3, [r3, #4]
 800e10a:	4618      	mov	r0, r3
 800e10c:	f7ff fa22 	bl	800d554 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e110:	f7fd fe66 	bl	800bde0 <HAL_GetTick>
 800e114:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e116:	e00a      	b.n	800e12e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e118:	f7fd fe62 	bl	800bde0 <HAL_GetTick>
 800e11c:	4602      	mov	r2, r0
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	1ad3      	subs	r3, r2, r3
 800e122:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e126:	4293      	cmp	r3, r2
 800e128:	d901      	bls.n	800e12e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800e12a:	2303      	movs	r3, #3
 800e12c:	e036      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e12e:	f7ff fa25 	bl	800d57c <LL_RCC_GetSysClkSource>
 800e132:	4602      	mov	r2, r0
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	009b      	lsls	r3, r3, #2
 800e13a:	429a      	cmp	r2, r3
 800e13c:	d1ec      	bne.n	800e118 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e13e:	4b19      	ldr	r3, [pc, #100]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	f003 0307 	and.w	r3, r3, #7
 800e146:	683a      	ldr	r2, [r7, #0]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d21b      	bcs.n	800e184 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e14c:	4b15      	ldr	r3, [pc, #84]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	f023 0207 	bic.w	r2, r3, #7
 800e154:	4913      	ldr	r1, [pc, #76]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	4313      	orrs	r3, r2
 800e15a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e15c:	f7fd fe40 	bl	800bde0 <HAL_GetTick>
 800e160:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e162:	e008      	b.n	800e176 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e164:	f7fd fe3c 	bl	800bde0 <HAL_GetTick>
 800e168:	4602      	mov	r2, r0
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	2b02      	cmp	r3, #2
 800e170:	d901      	bls.n	800e176 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800e172:	2303      	movs	r3, #3
 800e174:	e012      	b.n	800e19c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e176:	4b0b      	ldr	r3, [pc, #44]	@ (800e1a4 <HAL_RCC_ClockConfig+0x278>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	f003 0307 	and.w	r3, r3, #7
 800e17e:	683a      	ldr	r2, [r7, #0]
 800e180:	429a      	cmp	r2, r3
 800e182:	d1ef      	bne.n	800e164 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e184:	f000 f87e 	bl	800e284 <HAL_RCC_GetHCLKFreq>
 800e188:	4603      	mov	r3, r0
 800e18a:	4a07      	ldr	r2, [pc, #28]	@ (800e1a8 <HAL_RCC_ClockConfig+0x27c>)
 800e18c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800e18e:	f7fd fe33 	bl	800bdf8 <HAL_GetTickPrio>
 800e192:	4603      	mov	r3, r0
 800e194:	4618      	mov	r0, r3
 800e196:	f7fd fdd5 	bl	800bd44 <HAL_InitTick>
 800e19a:	4603      	mov	r3, r0
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	58004000 	.word	0x58004000
 800e1a8:	20000088 	.word	0x20000088

0800e1ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e1ac:	b590      	push	{r4, r7, lr}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e1b2:	f7ff f9e3 	bl	800d57c <LL_RCC_GetSysClkSource>
 800e1b6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d10a      	bne.n	800e1d4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e1be:	f7ff f99f 	bl	800d500 <LL_RCC_MSI_GetRange>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	091b      	lsrs	r3, r3, #4
 800e1c6:	f003 030f 	and.w	r3, r3, #15
 800e1ca:	4a2b      	ldr	r2, [pc, #172]	@ (800e278 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e1cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1d0:	60fb      	str	r3, [r7, #12]
 800e1d2:	e04b      	b.n	800e26c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2b04      	cmp	r3, #4
 800e1d8:	d102      	bne.n	800e1e0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e1da:	4b28      	ldr	r3, [pc, #160]	@ (800e27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	e045      	b.n	800e26c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2b08      	cmp	r3, #8
 800e1e4:	d10a      	bne.n	800e1fc <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e1e6:	f7fe ffb8 	bl	800d15a <LL_RCC_HSE_IsEnabledDiv2>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b01      	cmp	r3, #1
 800e1ee:	d102      	bne.n	800e1f6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800e1f0:	4b22      	ldr	r3, [pc, #136]	@ (800e27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e1f2:	60fb      	str	r3, [r7, #12]
 800e1f4:	e03a      	b.n	800e26c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800e1f6:	4b22      	ldr	r3, [pc, #136]	@ (800e280 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e1f8:	60fb      	str	r3, [r7, #12]
 800e1fa:	e037      	b.n	800e26c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800e1fc:	f7ff faba 	bl	800d774 <LL_RCC_PLL_GetMainSource>
 800e200:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800e202:	683b      	ldr	r3, [r7, #0]
 800e204:	2b02      	cmp	r3, #2
 800e206:	d003      	beq.n	800e210 <HAL_RCC_GetSysClockFreq+0x64>
 800e208:	683b      	ldr	r3, [r7, #0]
 800e20a:	2b03      	cmp	r3, #3
 800e20c:	d003      	beq.n	800e216 <HAL_RCC_GetSysClockFreq+0x6a>
 800e20e:	e00d      	b.n	800e22c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800e210:	4b1a      	ldr	r3, [pc, #104]	@ (800e27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e212:	60bb      	str	r3, [r7, #8]
        break;
 800e214:	e015      	b.n	800e242 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e216:	f7fe ffa0 	bl	800d15a <LL_RCC_HSE_IsEnabledDiv2>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b01      	cmp	r3, #1
 800e21e:	d102      	bne.n	800e226 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800e220:	4b16      	ldr	r3, [pc, #88]	@ (800e27c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e222:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800e224:	e00d      	b.n	800e242 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800e226:	4b16      	ldr	r3, [pc, #88]	@ (800e280 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e228:	60bb      	str	r3, [r7, #8]
        break;
 800e22a:	e00a      	b.n	800e242 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e22c:	f7ff f968 	bl	800d500 <LL_RCC_MSI_GetRange>
 800e230:	4603      	mov	r3, r0
 800e232:	091b      	lsrs	r3, r3, #4
 800e234:	f003 030f 	and.w	r3, r3, #15
 800e238:	4a0f      	ldr	r2, [pc, #60]	@ (800e278 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e23a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e23e:	60bb      	str	r3, [r7, #8]
        break;
 800e240:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800e242:	f7ff fa72 	bl	800d72a <LL_RCC_PLL_GetN>
 800e246:	4602      	mov	r2, r0
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	fb03 f402 	mul.w	r4, r3, r2
 800e24e:	f7ff fa85 	bl	800d75c <LL_RCC_PLL_GetDivider>
 800e252:	4603      	mov	r3, r0
 800e254:	091b      	lsrs	r3, r3, #4
 800e256:	3301      	adds	r3, #1
 800e258:	fbb4 f4f3 	udiv	r4, r4, r3
 800e25c:	f7ff fa72 	bl	800d744 <LL_RCC_PLL_GetR>
 800e260:	4603      	mov	r3, r0
 800e262:	0f5b      	lsrs	r3, r3, #29
 800e264:	3301      	adds	r3, #1
 800e266:	fbb4 f3f3 	udiv	r3, r4, r3
 800e26a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800e26c:	68fb      	ldr	r3, [r7, #12]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3714      	adds	r7, #20
 800e272:	46bd      	mov	sp, r7
 800e274:	bd90      	pop	{r4, r7, pc}
 800e276:	bf00      	nop
 800e278:	08018a5c 	.word	0x08018a5c
 800e27c:	00f42400 	.word	0x00f42400
 800e280:	01e84800 	.word	0x01e84800

0800e284 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e284:	b598      	push	{r3, r4, r7, lr}
 800e286:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800e288:	f7ff ff90 	bl	800e1ac <HAL_RCC_GetSysClockFreq>
 800e28c:	4604      	mov	r4, r0
 800e28e:	f7ff f9ea 	bl	800d666 <LL_RCC_GetAHBPrescaler>
 800e292:	4603      	mov	r3, r0
 800e294:	091b      	lsrs	r3, r3, #4
 800e296:	f003 030f 	and.w	r3, r3, #15
 800e29a:	4a03      	ldr	r2, [pc, #12]	@ (800e2a8 <HAL_RCC_GetHCLKFreq+0x24>)
 800e29c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2a0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	bd98      	pop	{r3, r4, r7, pc}
 800e2a8:	080189fc 	.word	0x080189fc

0800e2ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e2ac:	b598      	push	{r3, r4, r7, lr}
 800e2ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800e2b0:	f7ff ffe8 	bl	800e284 <HAL_RCC_GetHCLKFreq>
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	f7ff f9f0 	bl	800d69a <LL_RCC_GetAPB1Prescaler>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	0a1b      	lsrs	r3, r3, #8
 800e2be:	f003 0307 	and.w	r3, r3, #7
 800e2c2:	4a04      	ldr	r2, [pc, #16]	@ (800e2d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e2c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2c8:	f003 031f 	and.w	r3, r3, #31
 800e2cc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	bd98      	pop	{r3, r4, r7, pc}
 800e2d4:	08018a3c 	.word	0x08018a3c

0800e2d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e2d8:	b598      	push	{r3, r4, r7, lr}
 800e2da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800e2dc:	f7ff ffd2 	bl	800e284 <HAL_RCC_GetHCLKFreq>
 800e2e0:	4604      	mov	r4, r0
 800e2e2:	f7ff f9e6 	bl	800d6b2 <LL_RCC_GetAPB2Prescaler>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	0adb      	lsrs	r3, r3, #11
 800e2ea:	f003 0307 	and.w	r3, r3, #7
 800e2ee:	4a04      	ldr	r2, [pc, #16]	@ (800e300 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e2f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2f4:	f003 031f 	and.w	r3, r3, #31
 800e2f8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	bd98      	pop	{r3, r4, r7, pc}
 800e300:	08018a3c 	.word	0x08018a3c

0800e304 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800e304:	b590      	push	{r4, r7, lr}
 800e306:	b085      	sub	sp, #20
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	2bb0      	cmp	r3, #176	@ 0xb0
 800e310:	d903      	bls.n	800e31a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800e312:	4b15      	ldr	r3, [pc, #84]	@ (800e368 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e316:	60fb      	str	r3, [r7, #12]
 800e318:	e007      	b.n	800e32a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	091b      	lsrs	r3, r3, #4
 800e31e:	f003 030f 	and.w	r3, r3, #15
 800e322:	4a11      	ldr	r2, [pc, #68]	@ (800e368 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e328:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800e32a:	f7ff f9a8 	bl	800d67e <LL_RCC_GetAHB4Prescaler>
 800e32e:	4603      	mov	r3, r0
 800e330:	091b      	lsrs	r3, r3, #4
 800e332:	f003 030f 	and.w	r3, r3, #15
 800e336:	4a0d      	ldr	r2, [pc, #52]	@ (800e36c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800e338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e342:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	4a0a      	ldr	r2, [pc, #40]	@ (800e370 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800e348:	fba2 2303 	umull	r2, r3, r2, r3
 800e34c:	0c9c      	lsrs	r4, r3, #18
 800e34e:	f7fe febf 	bl	800d0d0 <HAL_PWREx_GetVoltageRange>
 800e352:	4603      	mov	r3, r0
 800e354:	4619      	mov	r1, r3
 800e356:	4620      	mov	r0, r4
 800e358:	f000 f80c 	bl	800e374 <RCC_SetFlashLatency>
 800e35c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3714      	adds	r7, #20
 800e362:	46bd      	mov	sp, r7
 800e364:	bd90      	pop	{r4, r7, pc}
 800e366:	bf00      	nop
 800e368:	08018a5c 	.word	0x08018a5c
 800e36c:	080189fc 	.word	0x080189fc
 800e370:	431bde83 	.word	0x431bde83

0800e374 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800e374:	b590      	push	{r4, r7, lr}
 800e376:	b093      	sub	sp, #76	@ 0x4c
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
 800e37c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800e37e:	4b37      	ldr	r3, [pc, #220]	@ (800e45c <RCC_SetFlashLatency+0xe8>)
 800e380:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800e384:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e386:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800e38a:	4a35      	ldr	r2, [pc, #212]	@ (800e460 <RCC_SetFlashLatency+0xec>)
 800e38c:	f107 031c 	add.w	r3, r7, #28
 800e390:	ca07      	ldmia	r2, {r0, r1, r2}
 800e392:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800e396:	4b33      	ldr	r3, [pc, #204]	@ (800e464 <RCC_SetFlashLatency+0xf0>)
 800e398:	f107 040c 	add.w	r4, r7, #12
 800e39c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e39e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e3a6:	683b      	ldr	r3, [r7, #0]
 800e3a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3ac:	d11a      	bne.n	800e3e4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3b2:	e013      	b.n	800e3dc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800e3b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	3348      	adds	r3, #72	@ 0x48
 800e3ba:	443b      	add	r3, r7
 800e3bc:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d807      	bhi.n	800e3d6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e3c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	3348      	adds	r3, #72	@ 0x48
 800e3cc:	443b      	add	r3, r7
 800e3ce:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e3d2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800e3d4:	e020      	b.n	800e418 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e3d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3d8:	3301      	adds	r3, #1
 800e3da:	643b      	str	r3, [r7, #64]	@ 0x40
 800e3dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e3de:	2b03      	cmp	r3, #3
 800e3e0:	d9e8      	bls.n	800e3b4 <RCC_SetFlashLatency+0x40>
 800e3e2:	e019      	b.n	800e418 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e3e8:	e013      	b.n	800e412 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800e3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3ec:	009b      	lsls	r3, r3, #2
 800e3ee:	3348      	adds	r3, #72	@ 0x48
 800e3f0:	443b      	add	r3, r7
 800e3f2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800e3f6:	687a      	ldr	r2, [r7, #4]
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d807      	bhi.n	800e40c <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e3fe:	009b      	lsls	r3, r3, #2
 800e400:	3348      	adds	r3, #72	@ 0x48
 800e402:	443b      	add	r3, r7
 800e404:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e408:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800e40a:	e005      	b.n	800e418 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e40c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e40e:	3301      	adds	r3, #1
 800e410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e414:	2b02      	cmp	r3, #2
 800e416:	d9e8      	bls.n	800e3ea <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800e418:	4b13      	ldr	r3, [pc, #76]	@ (800e468 <RCC_SetFlashLatency+0xf4>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	f023 0207 	bic.w	r2, r3, #7
 800e420:	4911      	ldr	r1, [pc, #68]	@ (800e468 <RCC_SetFlashLatency+0xf4>)
 800e422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e424:	4313      	orrs	r3, r2
 800e426:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e428:	f7fd fcda 	bl	800bde0 <HAL_GetTick>
 800e42c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e42e:	e008      	b.n	800e442 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e430:	f7fd fcd6 	bl	800bde0 <HAL_GetTick>
 800e434:	4602      	mov	r2, r0
 800e436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e438:	1ad3      	subs	r3, r2, r3
 800e43a:	2b02      	cmp	r3, #2
 800e43c:	d901      	bls.n	800e442 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e007      	b.n	800e452 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e442:	4b09      	ldr	r3, [pc, #36]	@ (800e468 <RCC_SetFlashLatency+0xf4>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	f003 0307 	and.w	r3, r3, #7
 800e44a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e44c:	429a      	cmp	r2, r3
 800e44e:	d1ef      	bne.n	800e430 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800e450:	2300      	movs	r3, #0
}
 800e452:	4618      	mov	r0, r3
 800e454:	374c      	adds	r7, #76	@ 0x4c
 800e456:	46bd      	mov	sp, r7
 800e458:	bd90      	pop	{r4, r7, pc}
 800e45a:	bf00      	nop
 800e45c:	08018370 	.word	0x08018370
 800e460:	08018380 	.word	0x08018380
 800e464:	0801838c 	.word	0x0801838c
 800e468:	58004000 	.word	0x58004000

0800e46c <LL_RCC_LSE_IsEnabled>:
{
 800e46c:	b480      	push	{r7}
 800e46e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800e470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e478:	f003 0301 	and.w	r3, r3, #1
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d101      	bne.n	800e484 <LL_RCC_LSE_IsEnabled+0x18>
 800e480:	2301      	movs	r3, #1
 800e482:	e000      	b.n	800e486 <LL_RCC_LSE_IsEnabled+0x1a>
 800e484:	2300      	movs	r3, #0
}
 800e486:	4618      	mov	r0, r3
 800e488:	46bd      	mov	sp, r7
 800e48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e48e:	4770      	bx	lr

0800e490 <LL_RCC_LSE_IsReady>:
{
 800e490:	b480      	push	{r7}
 800e492:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e494:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e49c:	f003 0302 	and.w	r3, r3, #2
 800e4a0:	2b02      	cmp	r3, #2
 800e4a2:	d101      	bne.n	800e4a8 <LL_RCC_LSE_IsReady+0x18>
 800e4a4:	2301      	movs	r3, #1
 800e4a6:	e000      	b.n	800e4aa <LL_RCC_LSE_IsReady+0x1a>
 800e4a8:	2300      	movs	r3, #0
}
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <LL_RCC_SetRFWKPClockSource>:
{
 800e4b4:	b480      	push	{r7}
 800e4b6:	b083      	sub	sp, #12
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800e4bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e4c4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e4c8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	4313      	orrs	r3, r2
 800e4d0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e4d4:	bf00      	nop
 800e4d6:	370c      	adds	r7, #12
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4de:	4770      	bx	lr

0800e4e0 <LL_RCC_SetSMPSClockSource>:
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b083      	sub	sp, #12
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800e4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ee:	f023 0203 	bic.w	r2, r3, #3
 800e4f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4313      	orrs	r3, r2
 800e4fa:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e4fc:	bf00      	nop
 800e4fe:	370c      	adds	r7, #12
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <LL_RCC_SetSMPSPrescaler>:
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800e510:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e516:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e51a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	4313      	orrs	r3, r2
 800e522:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e524:	bf00      	nop
 800e526:	370c      	adds	r7, #12
 800e528:	46bd      	mov	sp, r7
 800e52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e52e:	4770      	bx	lr

0800e530 <LL_RCC_SetUSARTClockSource>:
{
 800e530:	b480      	push	{r7}
 800e532:	b083      	sub	sp, #12
 800e534:	af00      	add	r7, sp, #0
 800e536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800e538:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e53c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e540:	f023 0203 	bic.w	r2, r3, #3
 800e544:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	4313      	orrs	r3, r2
 800e54c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e550:	bf00      	nop
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <LL_RCC_SetLPUARTClockSource>:
{
 800e55c:	b480      	push	{r7}
 800e55e:	b083      	sub	sp, #12
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800e564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e56c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e570:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	4313      	orrs	r3, r2
 800e578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e57c:	bf00      	nop
 800e57e:	370c      	adds	r7, #12
 800e580:	46bd      	mov	sp, r7
 800e582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e586:	4770      	bx	lr

0800e588 <LL_RCC_SetI2CClockSource>:
{
 800e588:	b480      	push	{r7}
 800e58a:	b083      	sub	sp, #12
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800e590:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e594:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	091b      	lsrs	r3, r3, #4
 800e59c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e5a0:	43db      	mvns	r3, r3
 800e5a2:	401a      	ands	r2, r3
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	011b      	lsls	r3, r3, #4
 800e5a8:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e5ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5b0:	4313      	orrs	r3, r2
 800e5b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e5b6:	bf00      	nop
 800e5b8:	370c      	adds	r7, #12
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c0:	4770      	bx	lr

0800e5c2 <LL_RCC_SetLPTIMClockSource>:
{
 800e5c2:	b480      	push	{r7}
 800e5c4:	b083      	sub	sp, #12
 800e5c6:	af00      	add	r7, sp, #0
 800e5c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800e5ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	0c1b      	lsrs	r3, r3, #16
 800e5d6:	041b      	lsls	r3, r3, #16
 800e5d8:	43db      	mvns	r3, r3
 800e5da:	401a      	ands	r2, r3
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	041b      	lsls	r3, r3, #16
 800e5e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5e4:	4313      	orrs	r3, r2
 800e5e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e5ea:	bf00      	nop
 800e5ec:	370c      	adds	r7, #12
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f4:	4770      	bx	lr

0800e5f6 <LL_RCC_SetSAIClockSource>:
{
 800e5f6:	b480      	push	{r7}
 800e5f8:	b083      	sub	sp, #12
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800e5fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e602:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e606:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e60a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4313      	orrs	r3, r2
 800e612:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e616:	bf00      	nop
 800e618:	370c      	adds	r7, #12
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr

0800e622 <LL_RCC_SetRNGClockSource>:
{
 800e622:	b480      	push	{r7}
 800e624:	b083      	sub	sp, #12
 800e626:	af00      	add	r7, sp, #0
 800e628:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800e62a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e62e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e632:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e636:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e642:	bf00      	nop
 800e644:	370c      	adds	r7, #12
 800e646:	46bd      	mov	sp, r7
 800e648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64c:	4770      	bx	lr

0800e64e <LL_RCC_SetCLK48ClockSource>:
{
 800e64e:	b480      	push	{r7}
 800e650:	b083      	sub	sp, #12
 800e652:	af00      	add	r7, sp, #0
 800e654:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800e656:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e65a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e65e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e662:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	4313      	orrs	r3, r2
 800e66a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e66e:	bf00      	nop
 800e670:	370c      	adds	r7, #12
 800e672:	46bd      	mov	sp, r7
 800e674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e678:	4770      	bx	lr

0800e67a <LL_RCC_SetUSBClockSource>:
{
 800e67a:	b580      	push	{r7, lr}
 800e67c:	b082      	sub	sp, #8
 800e67e:	af00      	add	r7, sp, #0
 800e680:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7ff ffe3 	bl	800e64e <LL_RCC_SetCLK48ClockSource>
}
 800e688:	bf00      	nop
 800e68a:	3708      	adds	r7, #8
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}

0800e690 <LL_RCC_SetADCClockSource>:
{
 800e690:	b480      	push	{r7}
 800e692:	b083      	sub	sp, #12
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800e698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e69c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6a0:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e6a4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4313      	orrs	r3, r2
 800e6ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e6b0:	bf00      	nop
 800e6b2:	370c      	adds	r7, #12
 800e6b4:	46bd      	mov	sp, r7
 800e6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ba:	4770      	bx	lr

0800e6bc <LL_RCC_SetRTCClockSource>:
{
 800e6bc:	b480      	push	{r7}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	af00      	add	r7, sp, #0
 800e6c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800e6c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e6d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	4313      	orrs	r3, r2
 800e6d8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800e6dc:	bf00      	nop
 800e6de:	370c      	adds	r7, #12
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr

0800e6e8 <LL_RCC_GetRTCClockSource>:
{
 800e6e8:	b480      	push	{r7}
 800e6ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800e6ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e6f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr

0800e702 <LL_RCC_ForceBackupDomainReset>:
{
 800e702:	b480      	push	{r7}
 800e704:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e706:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e70a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e70e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e716:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e71a:	bf00      	nop
 800e71c:	46bd      	mov	sp, r7
 800e71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e722:	4770      	bx	lr

0800e724 <LL_RCC_ReleaseBackupDomainReset>:
{
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e728:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e72c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e730:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e734:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e738:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e73c:	bf00      	nop
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr

0800e746 <LL_RCC_PLLSAI1_Enable>:
{
 800e746:	b480      	push	{r7}
 800e748:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e74a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e754:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e758:	6013      	str	r3, [r2, #0]
}
 800e75a:	bf00      	nop
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <LL_RCC_PLLSAI1_Disable>:
{
 800e764:	b480      	push	{r7}
 800e766:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e768:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e76c:	681b      	ldr	r3, [r3, #0]
 800e76e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e772:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e776:	6013      	str	r3, [r2, #0]
}
 800e778:	bf00      	nop
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr

0800e782 <LL_RCC_PLLSAI1_IsReady>:
{
 800e782:	b480      	push	{r7}
 800e784:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800e786:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e794:	d101      	bne.n	800e79a <LL_RCC_PLLSAI1_IsReady+0x18>
 800e796:	2301      	movs	r3, #1
 800e798:	e000      	b.n	800e79c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800e79a:	2300      	movs	r3, #0
}
 800e79c:	4618      	mov	r0, r3
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b088      	sub	sp, #32
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d034      	beq.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7c6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e7ca:	d021      	beq.n	800e810 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e7cc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e7d0:	d81b      	bhi.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e7d2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e7d6:	d01d      	beq.n	800e814 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800e7d8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e7dc:	d815      	bhi.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d00b      	beq.n	800e7fa <HAL_RCCEx_PeriphCLKConfig+0x54>
 800e7e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e7e6:	d110      	bne.n	800e80a <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800e7e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e7f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e7f6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800e7f8:	e00d      	b.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	3304      	adds	r3, #4
 800e7fe:	4618      	mov	r0, r3
 800e800:	f000 f947 	bl	800ea92 <RCCEx_PLLSAI1_ConfigNP>
 800e804:	4603      	mov	r3, r0
 800e806:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e808:	e005      	b.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800e80a:	2301      	movs	r3, #1
 800e80c:	77fb      	strb	r3, [r7, #31]
        break;
 800e80e:	e002      	b.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e810:	bf00      	nop
 800e812:	e000      	b.n	800e816 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e814:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e816:	7ffb      	ldrb	r3, [r7, #31]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d105      	bne.n	800e828 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff fee8 	bl	800e5f6 <LL_RCC_SetSAIClockSource>
 800e826:	e001      	b.n	800e82c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e828:	7ffb      	ldrb	r3, [r7, #31]
 800e82a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e834:	2b00      	cmp	r3, #0
 800e836:	d046      	beq.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800e838:	f7ff ff56 	bl	800e6e8 <LL_RCC_GetRTCClockSource>
 800e83c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e842:	69ba      	ldr	r2, [r7, #24]
 800e844:	429a      	cmp	r2, r3
 800e846:	d03c      	beq.n	800e8c2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e848:	f7fe fbea 	bl	800d020 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d105      	bne.n	800e85e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff ff30 	bl	800e6bc <LL_RCC_SetRTCClockSource>
 800e85c:	e02e      	b.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800e85e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e862:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e866:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800e868:	f7ff ff4b 	bl	800e702 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800e86c:	f7ff ff5a 	bl	800e724 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800e870:	697b      	ldr	r3, [r7, #20]
 800e872:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e87a:	4313      	orrs	r3, r2
 800e87c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800e87e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e882:	697b      	ldr	r3, [r7, #20]
 800e884:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800e888:	f7ff fdf0 	bl	800e46c <LL_RCC_LSE_IsEnabled>
 800e88c:	4603      	mov	r3, r0
 800e88e:	2b01      	cmp	r3, #1
 800e890:	d114      	bne.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e892:	f7fd faa5 	bl	800bde0 <HAL_GetTick>
 800e896:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800e898:	e00b      	b.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e89a:	f7fd faa1 	bl	800bde0 <HAL_GetTick>
 800e89e:	4602      	mov	r2, r0
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e8a8:	4293      	cmp	r3, r2
 800e8aa:	d902      	bls.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800e8ac:	2303      	movs	r3, #3
 800e8ae:	77fb      	strb	r3, [r7, #31]
              break;
 800e8b0:	e004      	b.n	800e8bc <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800e8b2:	f7ff fded 	bl	800e490 <LL_RCC_LSE_IsReady>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d1ee      	bne.n	800e89a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800e8bc:	7ffb      	ldrb	r3, [r7, #31]
 800e8be:	77bb      	strb	r3, [r7, #30]
 800e8c0:	e001      	b.n	800e8c6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e8c2:	7ffb      	ldrb	r3, [r7, #31]
 800e8c4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f003 0301 	and.w	r3, r3, #1
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d004      	beq.n	800e8dc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	699b      	ldr	r3, [r3, #24]
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff fe2a 	bl	800e530 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	f003 0302 	and.w	r3, r3, #2
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d004      	beq.n	800e8f2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	69db      	ldr	r3, [r3, #28]
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7ff fe35 	bl	800e55c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	f003 0310 	and.w	r3, r3, #16
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d004      	beq.n	800e908 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e902:	4618      	mov	r0, r3
 800e904:	f7ff fe5d 	bl	800e5c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	f003 0320 	and.w	r3, r3, #32
 800e910:	2b00      	cmp	r3, #0
 800e912:	d004      	beq.n	800e91e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e918:	4618      	mov	r0, r3
 800e91a:	f7ff fe52 	bl	800e5c2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f003 0304 	and.w	r3, r3, #4
 800e926:	2b00      	cmp	r3, #0
 800e928:	d004      	beq.n	800e934 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6a1b      	ldr	r3, [r3, #32]
 800e92e:	4618      	mov	r0, r3
 800e930:	f7ff fe2a 	bl	800e588 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	f003 0308 	and.w	r3, r3, #8
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d004      	beq.n	800e94a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e944:	4618      	mov	r0, r3
 800e946:	f7ff fe1f 	bl	800e588 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e952:	2b00      	cmp	r3, #0
 800e954:	d022      	beq.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e95a:	4618      	mov	r0, r3
 800e95c:	f7ff fe8d 	bl	800e67a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e964:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e968:	d107      	bne.n	800e97a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800e96a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e974:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e978:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e97e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e982:	d10b      	bne.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3304      	adds	r3, #4
 800e988:	4618      	mov	r0, r3
 800e98a:	f000 f8dd 	bl	800eb48 <RCCEx_PLLSAI1_ConfigNQ>
 800e98e:	4603      	mov	r3, r0
 800e990:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800e992:	7ffb      	ldrb	r3, [r7, #31]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d001      	beq.n	800e99c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800e998:	7ffb      	ldrb	r3, [r7, #31]
 800e99a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d02b      	beq.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e9b0:	d008      	beq.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e9ba:	d003      	beq.n	800e9c4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d105      	bne.n	800e9d0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9c8:	4618      	mov	r0, r3
 800e9ca:	f7ff fe2a 	bl	800e622 <LL_RCC_SetRNGClockSource>
 800e9ce:	e00a      	b.n	800e9e6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800e9d8:	60fb      	str	r3, [r7, #12]
 800e9da:	2000      	movs	r0, #0
 800e9dc:	f7ff fe21 	bl	800e622 <LL_RCC_SetRNGClockSource>
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f7ff fe34 	bl	800e64e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e9ea:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800e9ee:	d107      	bne.n	800ea00 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800e9f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e9f4:	68db      	ldr	r3, [r3, #12]
 800e9f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e9fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800e9fe:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d022      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7ff fe3d 	bl	800e690 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea1e:	d107      	bne.n	800ea30 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800ea20:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea24:	68db      	ldr	r3, [r3, #12]
 800ea26:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ea2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ea2e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ea34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea38:	d10b      	bne.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	3304      	adds	r3, #4
 800ea3e:	4618      	mov	r0, r3
 800ea40:	f000 f8dd 	bl	800ebfe <RCCEx_PLLSAI1_ConfigNR>
 800ea44:	4603      	mov	r3, r0
 800ea46:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ea48:	7ffb      	ldrb	r3, [r7, #31]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d001      	beq.n	800ea52 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800ea4e:	7ffb      	ldrb	r3, [r7, #31]
 800ea50:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d004      	beq.n	800ea68 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea62:	4618      	mov	r0, r3
 800ea64:	f7ff fd26 	bl	800e4b4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d009      	beq.n	800ea88 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f7ff fd45 	bl	800e508 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff fd2c 	bl	800e4e0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ea88:	7fbb      	ldrb	r3, [r7, #30]
}
 800ea8a:	4618      	mov	r0, r3
 800ea8c:	3720      	adds	r7, #32
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}

0800ea92 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ea92:	b580      	push	{r7, lr}
 800ea94:	b084      	sub	sp, #16
 800ea96:	af00      	add	r7, sp, #0
 800ea98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ea9e:	f7ff fe61 	bl	800e764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eaa2:	f7fd f99d 	bl	800bde0 <HAL_GetTick>
 800eaa6:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800eaa8:	e009      	b.n	800eabe <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800eaaa:	f7fd f999 	bl	800bde0 <HAL_GetTick>
 800eaae:	4602      	mov	r2, r0
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	2b02      	cmp	r3, #2
 800eab6:	d902      	bls.n	800eabe <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800eab8:	2303      	movs	r3, #3
 800eaba:	73fb      	strb	r3, [r7, #15]
      break;
 800eabc:	e004      	b.n	800eac8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800eabe:	f7ff fe60 	bl	800e782 <LL_RCC_PLLSAI1_IsReady>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d1f0      	bne.n	800eaaa <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800eac8:	7bfb      	ldrb	r3, [r7, #15]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d137      	bne.n	800eb3e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800eace:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ead2:	691b      	ldr	r3, [r3, #16]
 800ead4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	021b      	lsls	r3, r3, #8
 800eade:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eae2:	4313      	orrs	r3, r2
 800eae4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800eae6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eaea:	691b      	ldr	r3, [r3, #16]
 800eaec:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	685b      	ldr	r3, [r3, #4]
 800eaf4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800eafc:	f7ff fe23 	bl	800e746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eb00:	f7fd f96e 	bl	800bde0 <HAL_GetTick>
 800eb04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800eb06:	e009      	b.n	800eb1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800eb08:	f7fd f96a 	bl	800bde0 <HAL_GetTick>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	2b02      	cmp	r3, #2
 800eb14:	d902      	bls.n	800eb1c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800eb16:	2303      	movs	r3, #3
 800eb18:	73fb      	strb	r3, [r7, #15]
        break;
 800eb1a:	e004      	b.n	800eb26 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800eb1c:	f7ff fe31 	bl	800e782 <LL_RCC_PLLSAI1_IsReady>
 800eb20:	4603      	mov	r3, r0
 800eb22:	2b01      	cmp	r3, #1
 800eb24:	d1f0      	bne.n	800eb08 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800eb26:	7bfb      	ldrb	r3, [r7, #15]
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d108      	bne.n	800eb3e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800eb2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eb30:	691a      	ldr	r2, [r3, #16]
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	691b      	ldr	r3, [r3, #16]
 800eb36:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eb3a:	4313      	orrs	r3, r2
 800eb3c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800eb3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3710      	adds	r7, #16
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}

0800eb48 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b084      	sub	sp, #16
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb50:	2300      	movs	r3, #0
 800eb52:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800eb54:	f7ff fe06 	bl	800e764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eb58:	f7fd f942 	bl	800bde0 <HAL_GetTick>
 800eb5c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800eb5e:	e009      	b.n	800eb74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800eb60:	f7fd f93e 	bl	800bde0 <HAL_GetTick>
 800eb64:	4602      	mov	r2, r0
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	1ad3      	subs	r3, r2, r3
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d902      	bls.n	800eb74 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800eb6e:	2303      	movs	r3, #3
 800eb70:	73fb      	strb	r3, [r7, #15]
      break;
 800eb72:	e004      	b.n	800eb7e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800eb74:	f7ff fe05 	bl	800e782 <LL_RCC_PLLSAI1_IsReady>
 800eb78:	4603      	mov	r3, r0
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d1f0      	bne.n	800eb60 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800eb7e:	7bfb      	ldrb	r3, [r7, #15]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d137      	bne.n	800ebf4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800eb84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eb88:	691b      	ldr	r3, [r3, #16]
 800eb8a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	021b      	lsls	r3, r3, #8
 800eb94:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eb98:	4313      	orrs	r3, r2
 800eb9a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800eb9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eba0:	691b      	ldr	r3, [r3, #16]
 800eba2:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	689b      	ldr	r3, [r3, #8]
 800ebaa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ebae:	4313      	orrs	r3, r2
 800ebb0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ebb2:	f7ff fdc8 	bl	800e746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebb6:	f7fd f913 	bl	800bde0 <HAL_GetTick>
 800ebba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ebbc:	e009      	b.n	800ebd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ebbe:	f7fd f90f 	bl	800bde0 <HAL_GetTick>
 800ebc2:	4602      	mov	r2, r0
 800ebc4:	68bb      	ldr	r3, [r7, #8]
 800ebc6:	1ad3      	subs	r3, r2, r3
 800ebc8:	2b02      	cmp	r3, #2
 800ebca:	d902      	bls.n	800ebd2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ebcc:	2303      	movs	r3, #3
 800ebce:	73fb      	strb	r3, [r7, #15]
        break;
 800ebd0:	e004      	b.n	800ebdc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ebd2:	f7ff fdd6 	bl	800e782 <LL_RCC_PLLSAI1_IsReady>
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	d1f0      	bne.n	800ebbe <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ebdc:	7bfb      	ldrb	r3, [r7, #15]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d108      	bne.n	800ebf4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ebe2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebe6:	691a      	ldr	r2, [r3, #16]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	691b      	ldr	r3, [r3, #16]
 800ebec:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	3710      	adds	r7, #16
 800ebfa:	46bd      	mov	sp, r7
 800ebfc:	bd80      	pop	{r7, pc}

0800ebfe <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ebfe:	b580      	push	{r7, lr}
 800ec00:	b084      	sub	sp, #16
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec06:	2300      	movs	r3, #0
 800ec08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ec0a:	f7ff fdab 	bl	800e764 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ec0e:	f7fd f8e7 	bl	800bde0 <HAL_GetTick>
 800ec12:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ec14:	e009      	b.n	800ec2a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ec16:	f7fd f8e3 	bl	800bde0 <HAL_GetTick>
 800ec1a:	4602      	mov	r2, r0
 800ec1c:	68bb      	ldr	r3, [r7, #8]
 800ec1e:	1ad3      	subs	r3, r2, r3
 800ec20:	2b02      	cmp	r3, #2
 800ec22:	d902      	bls.n	800ec2a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800ec24:	2303      	movs	r3, #3
 800ec26:	73fb      	strb	r3, [r7, #15]
      break;
 800ec28:	e004      	b.n	800ec34 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ec2a:	f7ff fdaa 	bl	800e782 <LL_RCC_PLLSAI1_IsReady>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d1f0      	bne.n	800ec16 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ec34:	7bfb      	ldrb	r3, [r7, #15]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d137      	bne.n	800ecaa <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ec3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec3e:	691b      	ldr	r3, [r3, #16]
 800ec40:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	021b      	lsls	r3, r3, #8
 800ec4a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec4e:	4313      	orrs	r3, r2
 800ec50:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ec52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	68db      	ldr	r3, [r3, #12]
 800ec60:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec64:	4313      	orrs	r3, r2
 800ec66:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ec68:	f7ff fd6d 	bl	800e746 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ec6c:	f7fd f8b8 	bl	800bde0 <HAL_GetTick>
 800ec70:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ec72:	e009      	b.n	800ec88 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ec74:	f7fd f8b4 	bl	800bde0 <HAL_GetTick>
 800ec78:	4602      	mov	r2, r0
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	2b02      	cmp	r3, #2
 800ec80:	d902      	bls.n	800ec88 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ec82:	2303      	movs	r3, #3
 800ec84:	73fb      	strb	r3, [r7, #15]
        break;
 800ec86:	e004      	b.n	800ec92 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ec88:	f7ff fd7b 	bl	800e782 <LL_RCC_PLLSAI1_IsReady>
 800ec8c:	4603      	mov	r3, r0
 800ec8e:	2b01      	cmp	r3, #1
 800ec90:	d1f0      	bne.n	800ec74 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ec92:	7bfb      	ldrb	r3, [r7, #15]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	d108      	bne.n	800ecaa <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ec98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec9c:	691a      	ldr	r2, [r3, #16]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800eca6:	4313      	orrs	r3, r2
 800eca8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ecaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecac:	4618      	mov	r0, r3
 800ecae:	3710      	adds	r7, #16
 800ecb0:	46bd      	mov	sp, r7
 800ecb2:	bd80      	pop	{r7, pc}

0800ecb4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b084      	sub	sp, #16
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d101      	bne.n	800ecc6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	e09f      	b.n	800ee06 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d106      	bne.n	800ece0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	f7f9 fc36 	bl	800854c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2202      	movs	r2, #2
 800ece4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800ece8:	4b49      	ldr	r3, [pc, #292]	@ (800ee10 <HAL_RTC_Init+0x15c>)
 800ecea:	68db      	ldr	r3, [r3, #12]
 800ecec:	f003 0310 	and.w	r3, r3, #16
 800ecf0:	2b10      	cmp	r3, #16
 800ecf2:	d07e      	beq.n	800edf2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	22ca      	movs	r2, #202	@ 0xca
 800ecfa:	625a      	str	r2, [r3, #36]	@ 0x24
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	2253      	movs	r2, #83	@ 0x53
 800ed02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f000 f8ab 	bl	800ee60 <RTC_EnterInitMode>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	2b00      	cmp	r3, #0
 800ed0e:	d00a      	beq.n	800ed26 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	22ff      	movs	r2, #255	@ 0xff
 800ed16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2204      	movs	r2, #4
 800ed1c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800ed20:	2301      	movs	r3, #1
 800ed22:	73fb      	strb	r3, [r7, #15]
 800ed24:	e067      	b.n	800edf6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	6812      	ldr	r2, [r2, #0]
 800ed30:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ed34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ed38:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	6899      	ldr	r1, [r3, #8]
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	685a      	ldr	r2, [r3, #4]
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	431a      	orrs	r2, r3
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	699b      	ldr	r3, [r3, #24]
 800ed4e:	431a      	orrs	r2, r3
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	430a      	orrs	r2, r1
 800ed56:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	687a      	ldr	r2, [r7, #4]
 800ed5e:	68d2      	ldr	r2, [r2, #12]
 800ed60:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	681b      	ldr	r3, [r3, #0]
 800ed66:	6919      	ldr	r1, [r3, #16]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	689b      	ldr	r3, [r3, #8]
 800ed6c:	041a      	lsls	r2, r3, #16
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	430a      	orrs	r2, r1
 800ed74:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	681b      	ldr	r3, [r3, #0]
 800ed7a:	68da      	ldr	r2, [r3, #12]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ed84:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f022 0203 	bic.w	r2, r2, #3
 800ed94:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	69da      	ldr	r2, [r3, #28]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	431a      	orrs	r2, r3
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	430a      	orrs	r2, r1
 800edac:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	689b      	ldr	r3, [r3, #8]
 800edb4:	f003 0320 	and.w	r3, r3, #32
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d113      	bne.n	800ede4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f829 	bl	800ee14 <HAL_RTC_WaitForSynchro>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00d      	beq.n	800ede4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	22ff      	movs	r2, #255	@ 0xff
 800edce:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2204      	movs	r2, #4
 800edd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800ede0:	2301      	movs	r3, #1
 800ede2:	e010      	b.n	800ee06 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	22ff      	movs	r2, #255	@ 0xff
 800edea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800edec:	2300      	movs	r3, #0
 800edee:	73fb      	strb	r3, [r7, #15]
 800edf0:	e001      	b.n	800edf6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800edf2:	2300      	movs	r3, #0
 800edf4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800edf6:	7bfb      	ldrb	r3, [r7, #15]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d103      	bne.n	800ee04 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	2201      	movs	r2, #1
 800ee00:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800ee04:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop
 800ee10:	40002800 	.word	0x40002800

0800ee14 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	b084      	sub	sp, #16
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	68da      	ldr	r2, [r3, #12]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ee2a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ee2c:	f7fc ffd8 	bl	800bde0 <HAL_GetTick>
 800ee30:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ee32:	e009      	b.n	800ee48 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ee34:	f7fc ffd4 	bl	800bde0 <HAL_GetTick>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	1ad3      	subs	r3, r2, r3
 800ee3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ee42:	d901      	bls.n	800ee48 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ee44:	2303      	movs	r3, #3
 800ee46:	e007      	b.n	800ee58 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	68db      	ldr	r3, [r3, #12]
 800ee4e:	f003 0320 	and.w	r3, r3, #32
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d0ee      	beq.n	800ee34 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ee56:	2300      	movs	r3, #0
}
 800ee58:	4618      	mov	r0, r3
 800ee5a:	3710      	adds	r7, #16
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	bd80      	pop	{r7, pc}

0800ee60 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ee60:	b580      	push	{r7, lr}
 800ee62:	b084      	sub	sp, #16
 800ee64:	af00      	add	r7, sp, #0
 800ee66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	68db      	ldr	r3, [r3, #12]
 800ee6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d119      	bne.n	800eeaa <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee7e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ee80:	f7fc ffae 	bl	800bde0 <HAL_GetTick>
 800ee84:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ee86:	e009      	b.n	800ee9c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ee88:	f7fc ffaa 	bl	800bde0 <HAL_GetTick>
 800ee8c:	4602      	mov	r2, r0
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ee96:	d901      	bls.n	800ee9c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ee98:	2303      	movs	r3, #3
 800ee9a:	e007      	b.n	800eeac <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d0ee      	beq.n	800ee88 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800eeaa:	2300      	movs	r3, #0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b084      	sub	sp, #16
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d101      	bne.n	800eec6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800eec2:	2301      	movs	r3, #1
 800eec4:	e095      	b.n	800eff2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d108      	bne.n	800eee0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800eece:	687b      	ldr	r3, [r7, #4]
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800eed6:	d009      	beq.n	800eeec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	2200      	movs	r2, #0
 800eedc:	61da      	str	r2, [r3, #28]
 800eede:	e005      	b.n	800eeec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	2200      	movs	r2, #0
 800eee4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	2200      	movs	r2, #0
 800eeea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2200      	movs	r2, #0
 800eef0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800eef8:	b2db      	uxtb	r3, r3
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d106      	bne.n	800ef0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	2200      	movs	r2, #0
 800ef02:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ef06:	6878      	ldr	r0, [r7, #4]
 800ef08:	f000 f877 	bl	800effa <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	2202      	movs	r2, #2
 800ef10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ef22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ef2c:	d902      	bls.n	800ef34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	60fb      	str	r3, [r7, #12]
 800ef32:	e002      	b.n	800ef3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ef34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ef38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ef42:	d007      	beq.n	800ef54 <HAL_SPI_Init+0xa0>
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	68db      	ldr	r3, [r3, #12]
 800ef48:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ef4c:	d002      	beq.n	800ef54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	2200      	movs	r2, #0
 800ef52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	685b      	ldr	r3, [r3, #4]
 800ef58:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	689b      	ldr	r3, [r3, #8]
 800ef60:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800ef64:	431a      	orrs	r2, r3
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	691b      	ldr	r3, [r3, #16]
 800ef6a:	f003 0302 	and.w	r3, r3, #2
 800ef6e:	431a      	orrs	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	695b      	ldr	r3, [r3, #20]
 800ef74:	f003 0301 	and.w	r3, r3, #1
 800ef78:	431a      	orrs	r2, r3
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	699b      	ldr	r3, [r3, #24]
 800ef7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ef82:	431a      	orrs	r2, r3
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	69db      	ldr	r3, [r3, #28]
 800ef88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ef8c:	431a      	orrs	r2, r3
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ef96:	ea42 0103 	orr.w	r1, r2, r3
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef9e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	430a      	orrs	r2, r1
 800efa8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	699b      	ldr	r3, [r3, #24]
 800efae:	0c1b      	lsrs	r3, r3, #16
 800efb0:	f003 0204 	and.w	r2, r3, #4
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efb8:	f003 0310 	and.w	r3, r3, #16
 800efbc:	431a      	orrs	r2, r3
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efc2:	f003 0308 	and.w	r3, r3, #8
 800efc6:	431a      	orrs	r2, r3
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	68db      	ldr	r3, [r3, #12]
 800efcc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800efd0:	ea42 0103 	orr.w	r1, r2, r3
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	430a      	orrs	r2, r1
 800efe0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2200      	movs	r2, #0
 800efe6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2201      	movs	r2, #1
 800efec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800eff0:	2300      	movs	r3, #0
}
 800eff2:	4618      	mov	r0, r3
 800eff4:	3710      	adds	r7, #16
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}

0800effa <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800effa:	b480      	push	{r7}
 800effc:	b083      	sub	sp, #12
 800effe:	af00      	add	r7, sp, #0
 800f000:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800f002:	bf00      	nop
 800f004:	370c      	adds	r7, #12
 800f006:	46bd      	mov	sp, r7
 800f008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00c:	4770      	bx	lr

0800f00e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b088      	sub	sp, #32
 800f012:	af00      	add	r7, sp, #0
 800f014:	60f8      	str	r0, [r7, #12]
 800f016:	60b9      	str	r1, [r7, #8]
 800f018:	603b      	str	r3, [r7, #0]
 800f01a:	4613      	mov	r3, r2
 800f01c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f01e:	f7fc fedf 	bl	800bde0 <HAL_GetTick>
 800f022:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f024:	88fb      	ldrh	r3, [r7, #6]
 800f026:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f02e:	b2db      	uxtb	r3, r3
 800f030:	2b01      	cmp	r3, #1
 800f032:	d001      	beq.n	800f038 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f034:	2302      	movs	r3, #2
 800f036:	e15c      	b.n	800f2f2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d002      	beq.n	800f044 <HAL_SPI_Transmit+0x36>
 800f03e:	88fb      	ldrh	r3, [r7, #6]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d101      	bne.n	800f048 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f044:	2301      	movs	r3, #1
 800f046:	e154      	b.n	800f2f2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f04e:	2b01      	cmp	r3, #1
 800f050:	d101      	bne.n	800f056 <HAL_SPI_Transmit+0x48>
 800f052:	2302      	movs	r3, #2
 800f054:	e14d      	b.n	800f2f2 <HAL_SPI_Transmit+0x2e4>
 800f056:	68fb      	ldr	r3, [r7, #12]
 800f058:	2201      	movs	r2, #1
 800f05a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2203      	movs	r2, #3
 800f062:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	2200      	movs	r2, #0
 800f06a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	68ba      	ldr	r2, [r7, #8]
 800f070:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	88fa      	ldrh	r2, [r7, #6]
 800f076:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	88fa      	ldrh	r2, [r7, #6]
 800f07c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	2200      	movs	r2, #0
 800f082:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2200      	movs	r2, #0
 800f090:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	2200      	movs	r2, #0
 800f098:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2200      	movs	r2, #0
 800f09e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	689b      	ldr	r3, [r3, #8]
 800f0a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f0a8:	d10f      	bne.n	800f0ca <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	681a      	ldr	r2, [r3, #0]
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f0b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f0ba:	68fb      	ldr	r3, [r7, #12]
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	681a      	ldr	r2, [r3, #0]
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f0c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f0d4:	2b40      	cmp	r3, #64	@ 0x40
 800f0d6:	d007      	beq.n	800f0e8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	681a      	ldr	r2, [r3, #0]
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f0e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0e8:	68fb      	ldr	r3, [r7, #12]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f0f0:	d952      	bls.n	800f198 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	685b      	ldr	r3, [r3, #4]
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d002      	beq.n	800f100 <HAL_SPI_Transmit+0xf2>
 800f0fa:	8b7b      	ldrh	r3, [r7, #26]
 800f0fc:	2b01      	cmp	r3, #1
 800f0fe:	d145      	bne.n	800f18c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f104:	881a      	ldrh	r2, [r3, #0]
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f110:	1c9a      	adds	r2, r3, #2
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f11a:	b29b      	uxth	r3, r3
 800f11c:	3b01      	subs	r3, #1
 800f11e:	b29a      	uxth	r2, r3
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f124:	e032      	b.n	800f18c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	689b      	ldr	r3, [r3, #8]
 800f12c:	f003 0302 	and.w	r3, r3, #2
 800f130:	2b02      	cmp	r3, #2
 800f132:	d112      	bne.n	800f15a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f138:	881a      	ldrh	r2, [r3, #0]
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f144:	1c9a      	adds	r2, r3, #2
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f14e:	b29b      	uxth	r3, r3
 800f150:	3b01      	subs	r3, #1
 800f152:	b29a      	uxth	r2, r3
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f158:	e018      	b.n	800f18c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f15a:	f7fc fe41 	bl	800bde0 <HAL_GetTick>
 800f15e:	4602      	mov	r2, r0
 800f160:	69fb      	ldr	r3, [r7, #28]
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d803      	bhi.n	800f172 <HAL_SPI_Transmit+0x164>
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f170:	d102      	bne.n	800f178 <HAL_SPI_Transmit+0x16a>
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d109      	bne.n	800f18c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f178:	68fb      	ldr	r3, [r7, #12]
 800f17a:	2201      	movs	r2, #1
 800f17c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	2200      	movs	r2, #0
 800f184:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f188:	2303      	movs	r3, #3
 800f18a:	e0b2      	b.n	800f2f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f190:	b29b      	uxth	r3, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	d1c7      	bne.n	800f126 <HAL_SPI_Transmit+0x118>
 800f196:	e083      	b.n	800f2a0 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d002      	beq.n	800f1a6 <HAL_SPI_Transmit+0x198>
 800f1a0:	8b7b      	ldrh	r3, [r7, #26]
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d177      	bne.n	800f296 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1aa:	b29b      	uxth	r3, r3
 800f1ac:	2b01      	cmp	r3, #1
 800f1ae:	d912      	bls.n	800f1d6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1b4:	881a      	ldrh	r2, [r3, #0]
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1c0:	1c9a      	adds	r2, r3, #2
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1ca:	b29b      	uxth	r3, r3
 800f1cc:	3b02      	subs	r3, #2
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f1d4:	e05f      	b.n	800f296 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	330c      	adds	r3, #12
 800f1e0:	7812      	ldrb	r2, [r2, #0]
 800f1e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1e8:	1c5a      	adds	r2, r3, #1
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f1f2:	b29b      	uxth	r3, r3
 800f1f4:	3b01      	subs	r3, #1
 800f1f6:	b29a      	uxth	r2, r3
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f1fc:	e04b      	b.n	800f296 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	689b      	ldr	r3, [r3, #8]
 800f204:	f003 0302 	and.w	r3, r3, #2
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d12b      	bne.n	800f264 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f210:	b29b      	uxth	r3, r3
 800f212:	2b01      	cmp	r3, #1
 800f214:	d912      	bls.n	800f23c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f21a:	881a      	ldrh	r2, [r3, #0]
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f226:	1c9a      	adds	r2, r3, #2
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f230:	b29b      	uxth	r3, r3
 800f232:	3b02      	subs	r3, #2
 800f234:	b29a      	uxth	r2, r3
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f23a:	e02c      	b.n	800f296 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	330c      	adds	r3, #12
 800f246:	7812      	ldrb	r2, [r2, #0]
 800f248:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f24e:	1c5a      	adds	r2, r3, #1
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f258:	b29b      	uxth	r3, r3
 800f25a:	3b01      	subs	r3, #1
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	68fb      	ldr	r3, [r7, #12]
 800f260:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f262:	e018      	b.n	800f296 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f264:	f7fc fdbc 	bl	800bde0 <HAL_GetTick>
 800f268:	4602      	mov	r2, r0
 800f26a:	69fb      	ldr	r3, [r7, #28]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	429a      	cmp	r2, r3
 800f272:	d803      	bhi.n	800f27c <HAL_SPI_Transmit+0x26e>
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27a:	d102      	bne.n	800f282 <HAL_SPI_Transmit+0x274>
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d109      	bne.n	800f296 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	2201      	movs	r2, #1
 800f286:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f28a:	68fb      	ldr	r3, [r7, #12]
 800f28c:	2200      	movs	r2, #0
 800f28e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f292:	2303      	movs	r3, #3
 800f294:	e02d      	b.n	800f2f2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d1ae      	bne.n	800f1fe <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f2a0:	69fa      	ldr	r2, [r7, #28]
 800f2a2:	6839      	ldr	r1, [r7, #0]
 800f2a4:	68f8      	ldr	r0, [r7, #12]
 800f2a6:	f000 fb73 	bl	800f990 <SPI_EndRxTxTransaction>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	2b00      	cmp	r3, #0
 800f2ae:	d002      	beq.n	800f2b6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2220      	movs	r2, #32
 800f2b4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	689b      	ldr	r3, [r3, #8]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d10a      	bne.n	800f2d4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f2be:	2300      	movs	r3, #0
 800f2c0:	617b      	str	r3, [r7, #20]
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	68db      	ldr	r3, [r3, #12]
 800f2c8:	617b      	str	r3, [r7, #20]
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	689b      	ldr	r3, [r3, #8]
 800f2d0:	617b      	str	r3, [r7, #20]
 800f2d2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	2200      	movs	r2, #0
 800f2e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f2e4:	68fb      	ldr	r3, [r7, #12]
 800f2e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d001      	beq.n	800f2f0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e000      	b.n	800f2f2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800f2f0:	2300      	movs	r3, #0
  }
}
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	3720      	adds	r7, #32
 800f2f6:	46bd      	mov	sp, r7
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b08a      	sub	sp, #40	@ 0x28
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	60f8      	str	r0, [r7, #12]
 800f302:	60b9      	str	r1, [r7, #8]
 800f304:	607a      	str	r2, [r7, #4]
 800f306:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f308:	2301      	movs	r3, #1
 800f30a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f30c:	f7fc fd68 	bl	800bde0 <HAL_GetTick>
 800f310:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f318:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f320:	887b      	ldrh	r3, [r7, #2]
 800f322:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800f324:	887b      	ldrh	r3, [r7, #2]
 800f326:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f328:	7ffb      	ldrb	r3, [r7, #31]
 800f32a:	2b01      	cmp	r3, #1
 800f32c:	d00c      	beq.n	800f348 <HAL_SPI_TransmitReceive+0x4e>
 800f32e:	69bb      	ldr	r3, [r7, #24]
 800f330:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f334:	d106      	bne.n	800f344 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d102      	bne.n	800f344 <HAL_SPI_TransmitReceive+0x4a>
 800f33e:	7ffb      	ldrb	r3, [r7, #31]
 800f340:	2b04      	cmp	r3, #4
 800f342:	d001      	beq.n	800f348 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f344:	2302      	movs	r3, #2
 800f346:	e1f3      	b.n	800f730 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d005      	beq.n	800f35a <HAL_SPI_TransmitReceive+0x60>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d002      	beq.n	800f35a <HAL_SPI_TransmitReceive+0x60>
 800f354:	887b      	ldrh	r3, [r7, #2]
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	e1e8      	b.n	800f730 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f364:	2b01      	cmp	r3, #1
 800f366:	d101      	bne.n	800f36c <HAL_SPI_TransmitReceive+0x72>
 800f368:	2302      	movs	r3, #2
 800f36a:	e1e1      	b.n	800f730 <HAL_SPI_TransmitReceive+0x436>
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	2201      	movs	r2, #1
 800f370:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f374:	68fb      	ldr	r3, [r7, #12]
 800f376:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f37a:	b2db      	uxtb	r3, r3
 800f37c:	2b04      	cmp	r3, #4
 800f37e:	d003      	beq.n	800f388 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2205      	movs	r2, #5
 800f384:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	2200      	movs	r2, #0
 800f38c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	687a      	ldr	r2, [r7, #4]
 800f392:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	887a      	ldrh	r2, [r7, #2]
 800f398:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800f39c:	68fb      	ldr	r3, [r7, #12]
 800f39e:	887a      	ldrh	r2, [r7, #2]
 800f3a0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	887a      	ldrh	r2, [r7, #2]
 800f3ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	887a      	ldrh	r2, [r7, #2]
 800f3b4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f3ca:	d802      	bhi.n	800f3d2 <HAL_SPI_TransmitReceive+0xd8>
 800f3cc:	8abb      	ldrh	r3, [r7, #20]
 800f3ce:	2b01      	cmp	r3, #1
 800f3d0:	d908      	bls.n	800f3e4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	685a      	ldr	r2, [r3, #4]
 800f3d8:	68fb      	ldr	r3, [r7, #12]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f3e0:	605a      	str	r2, [r3, #4]
 800f3e2:	e007      	b.n	800f3f4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	681b      	ldr	r3, [r3, #0]
 800f3e8:	685a      	ldr	r2, [r3, #4]
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f3f2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3fe:	2b40      	cmp	r3, #64	@ 0x40
 800f400:	d007      	beq.n	800f412 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	681a      	ldr	r2, [r3, #0]
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f410:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f41a:	f240 8083 	bls.w	800f524 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	685b      	ldr	r3, [r3, #4]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d002      	beq.n	800f42c <HAL_SPI_TransmitReceive+0x132>
 800f426:	8afb      	ldrh	r3, [r7, #22]
 800f428:	2b01      	cmp	r3, #1
 800f42a:	d16f      	bne.n	800f50c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f430:	881a      	ldrh	r2, [r3, #0]
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f43c:	1c9a      	adds	r2, r3, #2
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f446:	b29b      	uxth	r3, r3
 800f448:	3b01      	subs	r3, #1
 800f44a:	b29a      	uxth	r2, r3
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f450:	e05c      	b.n	800f50c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	689b      	ldr	r3, [r3, #8]
 800f458:	f003 0302 	and.w	r3, r3, #2
 800f45c:	2b02      	cmp	r3, #2
 800f45e:	d11b      	bne.n	800f498 <HAL_SPI_TransmitReceive+0x19e>
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f464:	b29b      	uxth	r3, r3
 800f466:	2b00      	cmp	r3, #0
 800f468:	d016      	beq.n	800f498 <HAL_SPI_TransmitReceive+0x19e>
 800f46a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f46c:	2b01      	cmp	r3, #1
 800f46e:	d113      	bne.n	800f498 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f474:	881a      	ldrh	r2, [r3, #0]
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f480:	1c9a      	adds	r2, r3, #2
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f48a:	b29b      	uxth	r3, r3
 800f48c:	3b01      	subs	r3, #1
 800f48e:	b29a      	uxth	r2, r3
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f494:	2300      	movs	r3, #0
 800f496:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f498:	68fb      	ldr	r3, [r7, #12]
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	689b      	ldr	r3, [r3, #8]
 800f49e:	f003 0301 	and.w	r3, r3, #1
 800f4a2:	2b01      	cmp	r3, #1
 800f4a4:	d11c      	bne.n	800f4e0 <HAL_SPI_TransmitReceive+0x1e6>
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f4ac:	b29b      	uxth	r3, r3
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d016      	beq.n	800f4e0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	68da      	ldr	r2, [r3, #12]
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4bc:	b292      	uxth	r2, r2
 800f4be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f4c4:	1c9a      	adds	r2, r3, #2
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	3b01      	subs	r3, #1
 800f4d4:	b29a      	uxth	r2, r3
 800f4d6:	68fb      	ldr	r3, [r7, #12]
 800f4d8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f4e0:	f7fc fc7e 	bl	800bde0 <HAL_GetTick>
 800f4e4:	4602      	mov	r2, r0
 800f4e6:	6a3b      	ldr	r3, [r7, #32]
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f4ec:	429a      	cmp	r2, r3
 800f4ee:	d80d      	bhi.n	800f50c <HAL_SPI_TransmitReceive+0x212>
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f6:	d009      	beq.n	800f50c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2201      	movs	r2, #1
 800f4fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	2200      	movs	r2, #0
 800f504:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f508:	2303      	movs	r3, #3
 800f50a:	e111      	b.n	800f730 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f50c:	68fb      	ldr	r3, [r7, #12]
 800f50e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f510:	b29b      	uxth	r3, r3
 800f512:	2b00      	cmp	r3, #0
 800f514:	d19d      	bne.n	800f452 <HAL_SPI_TransmitReceive+0x158>
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f51c:	b29b      	uxth	r3, r3
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d197      	bne.n	800f452 <HAL_SPI_TransmitReceive+0x158>
 800f522:	e0e5      	b.n	800f6f0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	685b      	ldr	r3, [r3, #4]
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d003      	beq.n	800f534 <HAL_SPI_TransmitReceive+0x23a>
 800f52c:	8afb      	ldrh	r3, [r7, #22]
 800f52e:	2b01      	cmp	r3, #1
 800f530:	f040 80d1 	bne.w	800f6d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f538:	b29b      	uxth	r3, r3
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d912      	bls.n	800f564 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f542:	881a      	ldrh	r2, [r3, #0]
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f54e:	1c9a      	adds	r2, r3, #2
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f558:	b29b      	uxth	r3, r3
 800f55a:	3b02      	subs	r3, #2
 800f55c:	b29a      	uxth	r2, r3
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f562:	e0b8      	b.n	800f6d6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	330c      	adds	r3, #12
 800f56e:	7812      	ldrb	r2, [r2, #0]
 800f570:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f576:	1c5a      	adds	r2, r3, #1
 800f578:	68fb      	ldr	r3, [r7, #12]
 800f57a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f580:	b29b      	uxth	r3, r3
 800f582:	3b01      	subs	r3, #1
 800f584:	b29a      	uxth	r2, r3
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f58a:	e0a4      	b.n	800f6d6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	f003 0302 	and.w	r3, r3, #2
 800f596:	2b02      	cmp	r3, #2
 800f598:	d134      	bne.n	800f604 <HAL_SPI_TransmitReceive+0x30a>
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d02f      	beq.n	800f604 <HAL_SPI_TransmitReceive+0x30a>
 800f5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d12c      	bne.n	800f604 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	2b01      	cmp	r3, #1
 800f5b2:	d912      	bls.n	800f5da <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5b8:	881a      	ldrh	r2, [r3, #0]
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5c4:	1c9a      	adds	r2, r3, #2
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	3b02      	subs	r3, #2
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f5d8:	e012      	b.n	800f600 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f5da:	68fb      	ldr	r3, [r7, #12]
 800f5dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	330c      	adds	r3, #12
 800f5e4:	7812      	ldrb	r2, [r2, #0]
 800f5e6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f5ec:	1c5a      	adds	r2, r3, #1
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f5f6:	b29b      	uxth	r3, r3
 800f5f8:	3b01      	subs	r3, #1
 800f5fa:	b29a      	uxth	r2, r3
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f600:	2300      	movs	r3, #0
 800f602:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	689b      	ldr	r3, [r3, #8]
 800f60a:	f003 0301 	and.w	r3, r3, #1
 800f60e:	2b01      	cmp	r3, #1
 800f610:	d148      	bne.n	800f6a4 <HAL_SPI_TransmitReceive+0x3aa>
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f618:	b29b      	uxth	r3, r3
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d042      	beq.n	800f6a4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f624:	b29b      	uxth	r3, r3
 800f626:	2b01      	cmp	r3, #1
 800f628:	d923      	bls.n	800f672 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	68da      	ldr	r2, [r3, #12]
 800f630:	68fb      	ldr	r3, [r7, #12]
 800f632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f634:	b292      	uxth	r2, r2
 800f636:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f63c:	1c9a      	adds	r2, r3, #2
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f648:	b29b      	uxth	r3, r3
 800f64a:	3b02      	subs	r3, #2
 800f64c:	b29a      	uxth	r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d81f      	bhi.n	800f6a0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	685a      	ldr	r2, [r3, #4]
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	681b      	ldr	r3, [r3, #0]
 800f66a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f66e:	605a      	str	r2, [r3, #4]
 800f670:	e016      	b.n	800f6a0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	681b      	ldr	r3, [r3, #0]
 800f676:	f103 020c 	add.w	r2, r3, #12
 800f67a:	68fb      	ldr	r3, [r7, #12]
 800f67c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f67e:	7812      	ldrb	r2, [r2, #0]
 800f680:	b2d2      	uxtb	r2, r2
 800f682:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f688:	1c5a      	adds	r2, r3, #1
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f694:	b29b      	uxth	r3, r3
 800f696:	3b01      	subs	r3, #1
 800f698:	b29a      	uxth	r2, r3
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f6a4:	f7fc fb9c 	bl	800bde0 <HAL_GetTick>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	6a3b      	ldr	r3, [r7, #32]
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d803      	bhi.n	800f6bc <HAL_SPI_TransmitReceive+0x3c2>
 800f6b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f6ba:	d102      	bne.n	800f6c2 <HAL_SPI_TransmitReceive+0x3c8>
 800f6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d109      	bne.n	800f6d6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	2201      	movs	r2, #1
 800f6c6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f6d2:	2303      	movs	r3, #3
 800f6d4:	e02c      	b.n	800f730 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f6d6:	68fb      	ldr	r3, [r7, #12]
 800f6d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f6da:	b29b      	uxth	r3, r3
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	f47f af55 	bne.w	800f58c <HAL_SPI_TransmitReceive+0x292>
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	2b00      	cmp	r3, #0
 800f6ec:	f47f af4e 	bne.w	800f58c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f6f0:	6a3a      	ldr	r2, [r7, #32]
 800f6f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f6f4:	68f8      	ldr	r0, [r7, #12]
 800f6f6:	f000 f94b 	bl	800f990 <SPI_EndRxTxTransaction>
 800f6fa:	4603      	mov	r3, r0
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d008      	beq.n	800f712 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f700:	68fb      	ldr	r3, [r7, #12]
 800f702:	2220      	movs	r2, #32
 800f704:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	2200      	movs	r2, #0
 800f70a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f70e:	2301      	movs	r3, #1
 800f710:	e00e      	b.n	800f730 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2201      	movs	r2, #1
 800f716:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	2200      	movs	r2, #0
 800f71e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f726:	2b00      	cmp	r3, #0
 800f728:	d001      	beq.n	800f72e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800f72a:	2301      	movs	r3, #1
 800f72c:	e000      	b.n	800f730 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800f72e:	2300      	movs	r3, #0
  }
}
 800f730:	4618      	mov	r0, r3
 800f732:	3728      	adds	r7, #40	@ 0x28
 800f734:	46bd      	mov	sp, r7
 800f736:	bd80      	pop	{r7, pc}

0800f738 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800f738:	b480      	push	{r7}
 800f73a:	b083      	sub	sp, #12
 800f73c:	af00      	add	r7, sp, #0
 800f73e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f746:	b2db      	uxtb	r3, r3
}
 800f748:	4618      	mov	r0, r3
 800f74a:	370c      	adds	r7, #12
 800f74c:	46bd      	mov	sp, r7
 800f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f752:	4770      	bx	lr

0800f754 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b088      	sub	sp, #32
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	603b      	str	r3, [r7, #0]
 800f760:	4613      	mov	r3, r2
 800f762:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f764:	f7fc fb3c 	bl	800bde0 <HAL_GetTick>
 800f768:	4602      	mov	r2, r0
 800f76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f76c:	1a9b      	subs	r3, r3, r2
 800f76e:	683a      	ldr	r2, [r7, #0]
 800f770:	4413      	add	r3, r2
 800f772:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f774:	f7fc fb34 	bl	800bde0 <HAL_GetTick>
 800f778:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f77a:	4b39      	ldr	r3, [pc, #228]	@ (800f860 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	015b      	lsls	r3, r3, #5
 800f780:	0d1b      	lsrs	r3, r3, #20
 800f782:	69fa      	ldr	r2, [r7, #28]
 800f784:	fb02 f303 	mul.w	r3, r2, r3
 800f788:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f78a:	e054      	b.n	800f836 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f792:	d050      	beq.n	800f836 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f794:	f7fc fb24 	bl	800bde0 <HAL_GetTick>
 800f798:	4602      	mov	r2, r0
 800f79a:	69bb      	ldr	r3, [r7, #24]
 800f79c:	1ad3      	subs	r3, r2, r3
 800f79e:	69fa      	ldr	r2, [r7, #28]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d902      	bls.n	800f7aa <SPI_WaitFlagStateUntilTimeout+0x56>
 800f7a4:	69fb      	ldr	r3, [r7, #28]
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d13d      	bne.n	800f826 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	685a      	ldr	r2, [r3, #4]
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f7b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f7c2:	d111      	bne.n	800f7e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f7cc:	d004      	beq.n	800f7d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	689b      	ldr	r3, [r3, #8]
 800f7d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f7d6:	d107      	bne.n	800f7e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	681a      	ldr	r2, [r3, #0]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f7e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f7ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f7f0:	d10f      	bne.n	800f812 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	681a      	ldr	r2, [r3, #0]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f800:	601a      	str	r2, [r3, #0]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	681a      	ldr	r2, [r3, #0]
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f810:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	2201      	movs	r2, #1
 800f816:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	2200      	movs	r2, #0
 800f81e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f822:	2303      	movs	r3, #3
 800f824:	e017      	b.n	800f856 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f826:	697b      	ldr	r3, [r7, #20]
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d101      	bne.n	800f830 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f82c:	2300      	movs	r3, #0
 800f82e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f830:	697b      	ldr	r3, [r7, #20]
 800f832:	3b01      	subs	r3, #1
 800f834:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	689a      	ldr	r2, [r3, #8]
 800f83c:	68bb      	ldr	r3, [r7, #8]
 800f83e:	4013      	ands	r3, r2
 800f840:	68ba      	ldr	r2, [r7, #8]
 800f842:	429a      	cmp	r2, r3
 800f844:	bf0c      	ite	eq
 800f846:	2301      	moveq	r3, #1
 800f848:	2300      	movne	r3, #0
 800f84a:	b2db      	uxtb	r3, r3
 800f84c:	461a      	mov	r2, r3
 800f84e:	79fb      	ldrb	r3, [r7, #7]
 800f850:	429a      	cmp	r2, r3
 800f852:	d19b      	bne.n	800f78c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f854:	2300      	movs	r3, #0
}
 800f856:	4618      	mov	r0, r3
 800f858:	3720      	adds	r7, #32
 800f85a:	46bd      	mov	sp, r7
 800f85c:	bd80      	pop	{r7, pc}
 800f85e:	bf00      	nop
 800f860:	20000088 	.word	0x20000088

0800f864 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b08a      	sub	sp, #40	@ 0x28
 800f868:	af00      	add	r7, sp, #0
 800f86a:	60f8      	str	r0, [r7, #12]
 800f86c:	60b9      	str	r1, [r7, #8]
 800f86e:	607a      	str	r2, [r7, #4]
 800f870:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f872:	2300      	movs	r3, #0
 800f874:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f876:	f7fc fab3 	bl	800bde0 <HAL_GetTick>
 800f87a:	4602      	mov	r2, r0
 800f87c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f87e:	1a9b      	subs	r3, r3, r2
 800f880:	683a      	ldr	r2, [r7, #0]
 800f882:	4413      	add	r3, r2
 800f884:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f886:	f7fc faab 	bl	800bde0 <HAL_GetTick>
 800f88a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	330c      	adds	r3, #12
 800f892:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f894:	4b3d      	ldr	r3, [pc, #244]	@ (800f98c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f896:	681a      	ldr	r2, [r3, #0]
 800f898:	4613      	mov	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	4413      	add	r3, r2
 800f89e:	00da      	lsls	r2, r3, #3
 800f8a0:	1ad3      	subs	r3, r2, r3
 800f8a2:	0d1b      	lsrs	r3, r3, #20
 800f8a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8a6:	fb02 f303 	mul.w	r3, r2, r3
 800f8aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f8ac:	e060      	b.n	800f970 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f8b4:	d107      	bne.n	800f8c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d104      	bne.n	800f8c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f8bc:	69fb      	ldr	r3, [r7, #28]
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	b2db      	uxtb	r3, r3
 800f8c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f8c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8cc:	d050      	beq.n	800f970 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f8ce:	f7fc fa87 	bl	800bde0 <HAL_GetTick>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	6a3b      	ldr	r3, [r7, #32]
 800f8d6:	1ad3      	subs	r3, r2, r3
 800f8d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	d902      	bls.n	800f8e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f8de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d13d      	bne.n	800f960 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	685a      	ldr	r2, [r3, #4]
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f8f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8f4:	68fb      	ldr	r3, [r7, #12]
 800f8f6:	685b      	ldr	r3, [r3, #4]
 800f8f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f8fc:	d111      	bne.n	800f922 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	689b      	ldr	r3, [r3, #8]
 800f902:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f906:	d004      	beq.n	800f912 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	689b      	ldr	r3, [r3, #8]
 800f90c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f910:	d107      	bne.n	800f922 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	681a      	ldr	r2, [r3, #0]
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f920:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f92a:	d10f      	bne.n	800f94c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	681a      	ldr	r2, [r3, #0]
 800f932:	68fb      	ldr	r3, [r7, #12]
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f93a:	601a      	str	r2, [r3, #0]
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	681a      	ldr	r2, [r3, #0]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f94a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	2201      	movs	r2, #1
 800f950:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2200      	movs	r2, #0
 800f958:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f95c:	2303      	movs	r3, #3
 800f95e:	e010      	b.n	800f982 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f960:	69bb      	ldr	r3, [r7, #24]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d101      	bne.n	800f96a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800f966:	2300      	movs	r3, #0
 800f968:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	3b01      	subs	r3, #1
 800f96e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	689a      	ldr	r2, [r3, #8]
 800f976:	68bb      	ldr	r3, [r7, #8]
 800f978:	4013      	ands	r3, r2
 800f97a:	687a      	ldr	r2, [r7, #4]
 800f97c:	429a      	cmp	r2, r3
 800f97e:	d196      	bne.n	800f8ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800f980:	2300      	movs	r3, #0
}
 800f982:	4618      	mov	r0, r3
 800f984:	3728      	adds	r7, #40	@ 0x28
 800f986:	46bd      	mov	sp, r7
 800f988:	bd80      	pop	{r7, pc}
 800f98a:	bf00      	nop
 800f98c:	20000088 	.word	0x20000088

0800f990 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b086      	sub	sp, #24
 800f994:	af02      	add	r7, sp, #8
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	9300      	str	r3, [sp, #0]
 800f9a0:	68bb      	ldr	r3, [r7, #8]
 800f9a2:	2200      	movs	r2, #0
 800f9a4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800f9a8:	68f8      	ldr	r0, [r7, #12]
 800f9aa:	f7ff ff5b 	bl	800f864 <SPI_WaitFifoStateUntilTimeout>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d007      	beq.n	800f9c4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9b8:	f043 0220 	orr.w	r2, r3, #32
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f9c0:	2303      	movs	r3, #3
 800f9c2:	e027      	b.n	800fa14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	68bb      	ldr	r3, [r7, #8]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	2180      	movs	r1, #128	@ 0x80
 800f9ce:	68f8      	ldr	r0, [r7, #12]
 800f9d0:	f7ff fec0 	bl	800f754 <SPI_WaitFlagStateUntilTimeout>
 800f9d4:	4603      	mov	r3, r0
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d007      	beq.n	800f9ea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f9de:	f043 0220 	orr.w	r2, r3, #32
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800f9e6:	2303      	movs	r3, #3
 800f9e8:	e014      	b.n	800fa14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	9300      	str	r3, [sp, #0]
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	2200      	movs	r2, #0
 800f9f2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800f9f6:	68f8      	ldr	r0, [r7, #12]
 800f9f8:	f7ff ff34 	bl	800f864 <SPI_WaitFifoStateUntilTimeout>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d007      	beq.n	800fa12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fa06:	f043 0220 	orr.w	r2, r3, #32
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fa0e:	2303      	movs	r3, #3
 800fa10:	e000      	b.n	800fa14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fa12:	2300      	movs	r3, #0
}
 800fa14:	4618      	mov	r0, r3
 800fa16:	3710      	adds	r7, #16
 800fa18:	46bd      	mov	sp, r7
 800fa1a:	bd80      	pop	{r7, pc}

0800fa1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b082      	sub	sp, #8
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d101      	bne.n	800fa2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	e049      	b.n	800fac2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fa34:	b2db      	uxtb	r3, r3
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d106      	bne.n	800fa48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f841 	bl	800faca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2202      	movs	r2, #2
 800fa4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	3304      	adds	r3, #4
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4610      	mov	r0, r2
 800fa5c:	f000 f914 	bl	800fc88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2201      	movs	r2, #1
 800fa64:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	2201      	movs	r2, #1
 800fa6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2201      	movs	r2, #1
 800fa74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	2201      	movs	r2, #1
 800fa7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2201      	movs	r2, #1
 800fa84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	2201      	movs	r2, #1
 800fa8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2201      	movs	r2, #1
 800fa94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	2201      	movs	r2, #1
 800fa9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	2201      	movs	r2, #1
 800faa4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2201      	movs	r2, #1
 800faac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2201      	movs	r2, #1
 800fab4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	2201      	movs	r2, #1
 800fabc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fac0:	2300      	movs	r3, #0
}
 800fac2:	4618      	mov	r0, r3
 800fac4:	3708      	adds	r7, #8
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}

0800faca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800faca:	b480      	push	{r7}
 800facc:	b083      	sub	sp, #12
 800face:	af00      	add	r7, sp, #0
 800fad0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fad2:	bf00      	nop
 800fad4:	370c      	adds	r7, #12
 800fad6:	46bd      	mov	sp, r7
 800fad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fadc:	4770      	bx	lr
	...

0800fae0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d001      	beq.n	800faf8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800faf4:	2301      	movs	r3, #1
 800faf6:	e02e      	b.n	800fb56 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2202      	movs	r2, #2
 800fafc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	4a17      	ldr	r2, [pc, #92]	@ (800fb64 <HAL_TIM_Base_Start+0x84>)
 800fb06:	4293      	cmp	r3, r2
 800fb08:	d004      	beq.n	800fb14 <HAL_TIM_Base_Start+0x34>
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb12:	d115      	bne.n	800fb40 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	681b      	ldr	r3, [r3, #0]
 800fb18:	689a      	ldr	r2, [r3, #8]
 800fb1a:	4b13      	ldr	r3, [pc, #76]	@ (800fb68 <HAL_TIM_Base_Start+0x88>)
 800fb1c:	4013      	ands	r3, r2
 800fb1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	2b06      	cmp	r3, #6
 800fb24:	d015      	beq.n	800fb52 <HAL_TIM_Base_Start+0x72>
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fb2c:	d011      	beq.n	800fb52 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	681a      	ldr	r2, [r3, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	f042 0201 	orr.w	r2, r2, #1
 800fb3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb3e:	e008      	b.n	800fb52 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	681a      	ldr	r2, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	f042 0201 	orr.w	r2, r2, #1
 800fb4e:	601a      	str	r2, [r3, #0]
 800fb50:	e000      	b.n	800fb54 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fb52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fb54:	2300      	movs	r3, #0
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3714      	adds	r7, #20
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr
 800fb62:	bf00      	nop
 800fb64:	40012c00 	.word	0x40012c00
 800fb68:	00010007 	.word	0x00010007

0800fb6c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	681b      	ldr	r3, [r3, #0]
 800fb78:	6a1a      	ldr	r2, [r3, #32]
 800fb7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fb7e:	4013      	ands	r3, r2
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d10f      	bne.n	800fba4 <HAL_TIM_Base_Stop+0x38>
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	6a1a      	ldr	r2, [r3, #32]
 800fb8a:	f240 4344 	movw	r3, #1092	@ 0x444
 800fb8e:	4013      	ands	r3, r2
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d107      	bne.n	800fba4 <HAL_TIM_Base_Stop+0x38>
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	681a      	ldr	r2, [r3, #0]
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	f022 0201 	bic.w	r2, r2, #1
 800fba2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2201      	movs	r2, #1
 800fba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800fbac:	2300      	movs	r3, #0
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr

0800fbba <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800fbba:	b580      	push	{r7, lr}
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	2202      	movs	r2, #2
 800fbc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	6a1a      	ldr	r2, [r3, #32]
 800fbd0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fbd4:	4013      	ands	r3, r2
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d10f      	bne.n	800fbfa <HAL_TIM_PWM_DeInit+0x40>
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	6a1a      	ldr	r2, [r3, #32]
 800fbe0:	f240 4344 	movw	r3, #1092	@ 0x444
 800fbe4:	4013      	ands	r3, r2
 800fbe6:	2b00      	cmp	r3, #0
 800fbe8:	d107      	bne.n	800fbfa <HAL_TIM_PWM_DeInit+0x40>
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	681a      	ldr	r2, [r3, #0]
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f022 0201 	bic.w	r2, r2, #1
 800fbf8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800fbfa:	6878      	ldr	r0, [r7, #4]
 800fbfc:	f000 f839 	bl	800fc72 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	2200      	movs	r2, #0
 800fc04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2200      	movs	r2, #0
 800fc14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2200      	movs	r2, #0
 800fc1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2200      	movs	r2, #0
 800fc24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	2200      	movs	r2, #0
 800fc2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2200      	movs	r2, #0
 800fc34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	2200      	movs	r2, #0
 800fc3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	2200      	movs	r2, #0
 800fc44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	2200      	movs	r2, #0
 800fc4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	2200      	movs	r2, #0
 800fc54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	2200      	movs	r2, #0
 800fc64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fc68:	2300      	movs	r3, #0
}
 800fc6a:	4618      	mov	r0, r3
 800fc6c:	3708      	adds	r7, #8
 800fc6e:	46bd      	mov	sp, r7
 800fc70:	bd80      	pop	{r7, pc}

0800fc72 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800fc72:	b480      	push	{r7}
 800fc74:	b083      	sub	sp, #12
 800fc76:	af00      	add	r7, sp, #0
 800fc78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800fc7a:	bf00      	nop
 800fc7c:	370c      	adds	r7, #12
 800fc7e:	46bd      	mov	sp, r7
 800fc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc84:	4770      	bx	lr
	...

0800fc88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fc88:	b480      	push	{r7}
 800fc8a:	b085      	sub	sp, #20
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
 800fc90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	4a30      	ldr	r2, [pc, #192]	@ (800fd5c <TIM_Base_SetConfig+0xd4>)
 800fc9c:	4293      	cmp	r3, r2
 800fc9e:	d003      	beq.n	800fca8 <TIM_Base_SetConfig+0x20>
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fca6:	d108      	bne.n	800fcba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fcae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fcb0:	683b      	ldr	r3, [r7, #0]
 800fcb2:	685b      	ldr	r3, [r3, #4]
 800fcb4:	68fa      	ldr	r2, [r7, #12]
 800fcb6:	4313      	orrs	r3, r2
 800fcb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	4a27      	ldr	r2, [pc, #156]	@ (800fd5c <TIM_Base_SetConfig+0xd4>)
 800fcbe:	4293      	cmp	r3, r2
 800fcc0:	d00b      	beq.n	800fcda <TIM_Base_SetConfig+0x52>
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fcc8:	d007      	beq.n	800fcda <TIM_Base_SetConfig+0x52>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	4a24      	ldr	r2, [pc, #144]	@ (800fd60 <TIM_Base_SetConfig+0xd8>)
 800fcce:	4293      	cmp	r3, r2
 800fcd0:	d003      	beq.n	800fcda <TIM_Base_SetConfig+0x52>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	4a23      	ldr	r2, [pc, #140]	@ (800fd64 <TIM_Base_SetConfig+0xdc>)
 800fcd6:	4293      	cmp	r3, r2
 800fcd8:	d108      	bne.n	800fcec <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fce2:	683b      	ldr	r3, [r7, #0]
 800fce4:	68db      	ldr	r3, [r3, #12]
 800fce6:	68fa      	ldr	r2, [r7, #12]
 800fce8:	4313      	orrs	r3, r2
 800fcea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	695b      	ldr	r3, [r3, #20]
 800fcf6:	4313      	orrs	r3, r2
 800fcf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	68fa      	ldr	r2, [r7, #12]
 800fcfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd00:	683b      	ldr	r3, [r7, #0]
 800fd02:	689a      	ldr	r2, [r3, #8]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fd08:	683b      	ldr	r3, [r7, #0]
 800fd0a:	681a      	ldr	r2, [r3, #0]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	4a12      	ldr	r2, [pc, #72]	@ (800fd5c <TIM_Base_SetConfig+0xd4>)
 800fd14:	4293      	cmp	r3, r2
 800fd16:	d007      	beq.n	800fd28 <TIM_Base_SetConfig+0xa0>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	4a11      	ldr	r2, [pc, #68]	@ (800fd60 <TIM_Base_SetConfig+0xd8>)
 800fd1c:	4293      	cmp	r3, r2
 800fd1e:	d003      	beq.n	800fd28 <TIM_Base_SetConfig+0xa0>
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	4a10      	ldr	r2, [pc, #64]	@ (800fd64 <TIM_Base_SetConfig+0xdc>)
 800fd24:	4293      	cmp	r3, r2
 800fd26:	d103      	bne.n	800fd30 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fd28:	683b      	ldr	r3, [r7, #0]
 800fd2a:	691a      	ldr	r2, [r3, #16]
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2201      	movs	r2, #1
 800fd34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	f003 0301 	and.w	r3, r3, #1
 800fd3e:	2b01      	cmp	r3, #1
 800fd40:	d105      	bne.n	800fd4e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	691b      	ldr	r3, [r3, #16]
 800fd46:	f023 0201 	bic.w	r2, r3, #1
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	611a      	str	r2, [r3, #16]
  }
}
 800fd4e:	bf00      	nop
 800fd50:	3714      	adds	r7, #20
 800fd52:	46bd      	mov	sp, r7
 800fd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd58:	4770      	bx	lr
 800fd5a:	bf00      	nop
 800fd5c:	40012c00 	.word	0x40012c00
 800fd60:	40014400 	.word	0x40014400
 800fd64:	40014800 	.word	0x40014800

0800fd68 <LL_RCC_GetUSARTClockSource>:
{
 800fd68:	b480      	push	{r7}
 800fd6a:	b083      	sub	sp, #12
 800fd6c:	af00      	add	r7, sp, #0
 800fd6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800fd70:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd74:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	4013      	ands	r3, r2
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr

0800fd88 <LL_RCC_GetLPUARTClockSource>:
{
 800fd88:	b480      	push	{r7}
 800fd8a:	b083      	sub	sp, #12
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800fd90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fd94:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	4013      	ands	r3, r2
}
 800fd9c:	4618      	mov	r0, r3
 800fd9e:	370c      	adds	r7, #12
 800fda0:	46bd      	mov	sp, r7
 800fda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda6:	4770      	bx	lr

0800fda8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b082      	sub	sp, #8
 800fdac:	af00      	add	r7, sp, #0
 800fdae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d101      	bne.n	800fdba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fdb6:	2301      	movs	r3, #1
 800fdb8:	e042      	b.n	800fe40 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d106      	bne.n	800fdd2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f7f8 fbe9 	bl	80085a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	2224      	movs	r2, #36	@ 0x24
 800fdd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	681b      	ldr	r3, [r3, #0]
 800fdde:	681a      	ldr	r2, [r3, #0]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	f022 0201 	bic.w	r2, r2, #1
 800fde8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d002      	beq.n	800fdf8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fdf2:	6878      	ldr	r0, [r7, #4]
 800fdf4:	f000 fe7e 	bl	8010af4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fdf8:	6878      	ldr	r0, [r7, #4]
 800fdfa:	f000 fc53 	bl	80106a4 <UART_SetConfig>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	2b01      	cmp	r3, #1
 800fe02:	d101      	bne.n	800fe08 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fe04:	2301      	movs	r3, #1
 800fe06:	e01b      	b.n	800fe40 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	685a      	ldr	r2, [r3, #4]
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fe16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	689a      	ldr	r2, [r3, #8]
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	681b      	ldr	r3, [r3, #0]
 800fe22:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fe26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	f042 0201 	orr.w	r2, r2, #1
 800fe36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 fefd 	bl	8010c38 <UART_CheckIdleState>
 800fe3e:	4603      	mov	r3, r0
}
 800fe40:	4618      	mov	r0, r3
 800fe42:	3708      	adds	r7, #8
 800fe44:	46bd      	mov	sp, r7
 800fe46:	bd80      	pop	{r7, pc}

0800fe48 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe48:	b580      	push	{r7, lr}
 800fe4a:	b08a      	sub	sp, #40	@ 0x28
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	60f8      	str	r0, [r7, #12]
 800fe50:	60b9      	str	r1, [r7, #8]
 800fe52:	4613      	mov	r3, r2
 800fe54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe56:	68fb      	ldr	r3, [r7, #12]
 800fe58:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fe5c:	2b20      	cmp	r3, #32
 800fe5e:	d137      	bne.n	800fed0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d002      	beq.n	800fe6c <HAL_UART_Receive_IT+0x24>
 800fe66:	88fb      	ldrh	r3, [r7, #6]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d101      	bne.n	800fe70 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fe6c:	2301      	movs	r3, #1
 800fe6e:	e030      	b.n	800fed2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe70:	68fb      	ldr	r3, [r7, #12]
 800fe72:	2200      	movs	r2, #0
 800fe74:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	4a18      	ldr	r2, [pc, #96]	@ (800fedc <HAL_UART_Receive_IT+0x94>)
 800fe7c:	4293      	cmp	r3, r2
 800fe7e:	d01f      	beq.n	800fec0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe80:	68fb      	ldr	r3, [r7, #12]
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d018      	beq.n	800fec0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe94:	697b      	ldr	r3, [r7, #20]
 800fe96:	e853 3f00 	ldrex	r3, [r3]
 800fe9a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe9c:	693b      	ldr	r3, [r7, #16]
 800fe9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800fea2:	627b      	str	r3, [r7, #36]	@ 0x24
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	681b      	ldr	r3, [r3, #0]
 800fea8:	461a      	mov	r2, r3
 800feaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800feac:	623b      	str	r3, [r7, #32]
 800feae:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800feb0:	69f9      	ldr	r1, [r7, #28]
 800feb2:	6a3a      	ldr	r2, [r7, #32]
 800feb4:	e841 2300 	strex	r3, r2, [r1]
 800feb8:	61bb      	str	r3, [r7, #24]
   return(result);
 800feba:	69bb      	ldr	r3, [r7, #24]
 800febc:	2b00      	cmp	r3, #0
 800febe:	d1e6      	bne.n	800fe8e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fec0:	88fb      	ldrh	r3, [r7, #6]
 800fec2:	461a      	mov	r2, r3
 800fec4:	68b9      	ldr	r1, [r7, #8]
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	f000 ffce 	bl	8010e68 <UART_Start_Receive_IT>
 800fecc:	4603      	mov	r3, r0
 800fece:	e000      	b.n	800fed2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fed0:	2302      	movs	r3, #2
  }
}
 800fed2:	4618      	mov	r0, r3
 800fed4:	3728      	adds	r7, #40	@ 0x28
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}
 800feda:	bf00      	nop
 800fedc:	40008000 	.word	0x40008000

0800fee0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fee0:	b580      	push	{r7, lr}
 800fee2:	b08a      	sub	sp, #40	@ 0x28
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	60f8      	str	r0, [r7, #12]
 800fee8:	60b9      	str	r1, [r7, #8]
 800feea:	4613      	mov	r3, r2
 800feec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800fef4:	2b20      	cmp	r3, #32
 800fef6:	d167      	bne.n	800ffc8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fef8:	68bb      	ldr	r3, [r7, #8]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d002      	beq.n	800ff04 <HAL_UART_Transmit_DMA+0x24>
 800fefe:	88fb      	ldrh	r3, [r7, #6]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d101      	bne.n	800ff08 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800ff04:	2301      	movs	r3, #1
 800ff06:	e060      	b.n	800ffca <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	68ba      	ldr	r2, [r7, #8]
 800ff0c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	88fa      	ldrh	r2, [r7, #6]
 800ff12:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	88fa      	ldrh	r2, [r7, #6]
 800ff1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	2200      	movs	r2, #0
 800ff22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2221      	movs	r2, #33	@ 0x21
 800ff2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d028      	beq.n	800ff88 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff3a:	4a26      	ldr	r2, [pc, #152]	@ (800ffd4 <HAL_UART_Transmit_DMA+0xf4>)
 800ff3c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff42:	4a25      	ldr	r2, [pc, #148]	@ (800ffd8 <HAL_UART_Transmit_DMA+0xf8>)
 800ff44:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff4a:	4a24      	ldr	r2, [pc, #144]	@ (800ffdc <HAL_UART_Transmit_DMA+0xfc>)
 800ff4c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff52:	2200      	movs	r2, #0
 800ff54:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ff56:	68fb      	ldr	r3, [r7, #12]
 800ff58:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ff5e:	4619      	mov	r1, r3
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3328      	adds	r3, #40	@ 0x28
 800ff66:	461a      	mov	r2, r3
 800ff68:	88fb      	ldrh	r3, [r7, #6]
 800ff6a:	f7fc f9a5 	bl	800c2b8 <HAL_DMA_Start_IT>
 800ff6e:	4603      	mov	r3, r0
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d009      	beq.n	800ff88 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff74:	68fb      	ldr	r3, [r7, #12]
 800ff76:	2210      	movs	r2, #16
 800ff78:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2220      	movs	r2, #32
 800ff80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800ff84:	2301      	movs	r3, #1
 800ff86:	e020      	b.n	800ffca <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	2240      	movs	r2, #64	@ 0x40
 800ff8e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	3308      	adds	r3, #8
 800ff96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff98:	697b      	ldr	r3, [r7, #20]
 800ff9a:	e853 3f00 	ldrex	r3, [r3]
 800ff9e:	613b      	str	r3, [r7, #16]
   return(result);
 800ffa0:	693b      	ldr	r3, [r7, #16]
 800ffa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ffa6:	627b      	str	r3, [r7, #36]	@ 0x24
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	3308      	adds	r3, #8
 800ffae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ffb0:	623a      	str	r2, [r7, #32]
 800ffb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffb4:	69f9      	ldr	r1, [r7, #28]
 800ffb6:	6a3a      	ldr	r2, [r7, #32]
 800ffb8:	e841 2300 	strex	r3, r2, [r1]
 800ffbc:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffbe:	69bb      	ldr	r3, [r7, #24]
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1e5      	bne.n	800ff90 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	e000      	b.n	800ffca <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ffc8:	2302      	movs	r3, #2
  }
}
 800ffca:	4618      	mov	r0, r3
 800ffcc:	3728      	adds	r7, #40	@ 0x28
 800ffce:	46bd      	mov	sp, r7
 800ffd0:	bd80      	pop	{r7, pc}
 800ffd2:	bf00      	nop
 800ffd4:	080111fb 	.word	0x080111fb
 800ffd8:	08011295 	.word	0x08011295
 800ffdc:	080112b1 	.word	0x080112b1

0800ffe0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ffe0:	b580      	push	{r7, lr}
 800ffe2:	b0ba      	sub	sp, #232	@ 0xe8
 800ffe4:	af00      	add	r7, sp, #0
 800ffe6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	69db      	ldr	r3, [r3, #28]
 800ffee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	681b      	ldr	r3, [r3, #0]
 800fff8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	689b      	ldr	r3, [r3, #8]
 8010002:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010006:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 801000a:	f640 030f 	movw	r3, #2063	@ 0x80f
 801000e:	4013      	ands	r3, r2
 8010010:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010014:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010018:	2b00      	cmp	r3, #0
 801001a:	d11b      	bne.n	8010054 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801001c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010020:	f003 0320 	and.w	r3, r3, #32
 8010024:	2b00      	cmp	r3, #0
 8010026:	d015      	beq.n	8010054 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010028:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801002c:	f003 0320 	and.w	r3, r3, #32
 8010030:	2b00      	cmp	r3, #0
 8010032:	d105      	bne.n	8010040 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010038:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801003c:	2b00      	cmp	r3, #0
 801003e:	d009      	beq.n	8010054 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010044:	2b00      	cmp	r3, #0
 8010046:	f000 8300 	beq.w	801064a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801004e:	6878      	ldr	r0, [r7, #4]
 8010050:	4798      	blx	r3
      }
      return;
 8010052:	e2fa      	b.n	801064a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010054:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010058:	2b00      	cmp	r3, #0
 801005a:	f000 8123 	beq.w	80102a4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801005e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010062:	4b8d      	ldr	r3, [pc, #564]	@ (8010298 <HAL_UART_IRQHandler+0x2b8>)
 8010064:	4013      	ands	r3, r2
 8010066:	2b00      	cmp	r3, #0
 8010068:	d106      	bne.n	8010078 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801006a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801006e:	4b8b      	ldr	r3, [pc, #556]	@ (801029c <HAL_UART_IRQHandler+0x2bc>)
 8010070:	4013      	ands	r3, r2
 8010072:	2b00      	cmp	r3, #0
 8010074:	f000 8116 	beq.w	80102a4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801007c:	f003 0301 	and.w	r3, r3, #1
 8010080:	2b00      	cmp	r3, #0
 8010082:	d011      	beq.n	80100a8 <HAL_UART_IRQHandler+0xc8>
 8010084:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010088:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00b      	beq.n	80100a8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2201      	movs	r2, #1
 8010096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801009e:	f043 0201 	orr.w	r2, r3, #1
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100ac:	f003 0302 	and.w	r3, r3, #2
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d011      	beq.n	80100d8 <HAL_UART_IRQHandler+0xf8>
 80100b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00b      	beq.n	80100d8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2202      	movs	r2, #2
 80100c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100ce:	f043 0204 	orr.w	r2, r3, #4
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100dc:	f003 0304 	and.w	r3, r3, #4
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d011      	beq.n	8010108 <HAL_UART_IRQHandler+0x128>
 80100e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80100e8:	f003 0301 	and.w	r3, r3, #1
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d00b      	beq.n	8010108 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	2204      	movs	r2, #4
 80100f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80100fe:	f043 0202 	orr.w	r2, r3, #2
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010108:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801010c:	f003 0308 	and.w	r3, r3, #8
 8010110:	2b00      	cmp	r3, #0
 8010112:	d017      	beq.n	8010144 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010114:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010118:	f003 0320 	and.w	r3, r3, #32
 801011c:	2b00      	cmp	r3, #0
 801011e:	d105      	bne.n	801012c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010120:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010124:	4b5c      	ldr	r3, [pc, #368]	@ (8010298 <HAL_UART_IRQHandler+0x2b8>)
 8010126:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00b      	beq.n	8010144 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	2208      	movs	r2, #8
 8010132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801013a:	f043 0208 	orr.w	r2, r3, #8
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010148:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801014c:	2b00      	cmp	r3, #0
 801014e:	d012      	beq.n	8010176 <HAL_UART_IRQHandler+0x196>
 8010150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010154:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010158:	2b00      	cmp	r3, #0
 801015a:	d00c      	beq.n	8010176 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010164:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801016c:	f043 0220 	orr.w	r2, r3, #32
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801017c:	2b00      	cmp	r3, #0
 801017e:	f000 8266 	beq.w	801064e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010182:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010186:	f003 0320 	and.w	r3, r3, #32
 801018a:	2b00      	cmp	r3, #0
 801018c:	d013      	beq.n	80101b6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801018e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010192:	f003 0320 	and.w	r3, r3, #32
 8010196:	2b00      	cmp	r3, #0
 8010198:	d105      	bne.n	80101a6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801019a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801019e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d007      	beq.n	80101b6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d003      	beq.n	80101b6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101bc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	689b      	ldr	r3, [r3, #8]
 80101c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101ca:	2b40      	cmp	r3, #64	@ 0x40
 80101cc:	d005      	beq.n	80101da <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80101ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80101d2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d054      	beq.n	8010284 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f000 ffa7 	bl	801112e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	689b      	ldr	r3, [r3, #8]
 80101e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80101ea:	2b40      	cmp	r3, #64	@ 0x40
 80101ec:	d146      	bne.n	801027c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	3308      	adds	r3, #8
 80101f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80101fc:	e853 3f00 	ldrex	r3, [r3]
 8010200:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010204:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801020c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	3308      	adds	r3, #8
 8010216:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801021a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801021e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010222:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010226:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801022a:	e841 2300 	strex	r3, r2, [r1]
 801022e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010236:	2b00      	cmp	r3, #0
 8010238:	d1d9      	bne.n	80101ee <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010240:	2b00      	cmp	r3, #0
 8010242:	d017      	beq.n	8010274 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801024a:	4a15      	ldr	r2, [pc, #84]	@ (80102a0 <HAL_UART_IRQHandler+0x2c0>)
 801024c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010254:	4618      	mov	r0, r3
 8010256:	f7fc f909 	bl	800c46c <HAL_DMA_Abort_IT>
 801025a:	4603      	mov	r3, r0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d019      	beq.n	8010294 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010268:	687a      	ldr	r2, [r7, #4]
 801026a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801026e:	4610      	mov	r0, r2
 8010270:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010272:	e00f      	b.n	8010294 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010274:	6878      	ldr	r0, [r7, #4]
 8010276:	f000 f9ff 	bl	8010678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801027a:	e00b      	b.n	8010294 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801027c:	6878      	ldr	r0, [r7, #4]
 801027e:	f000 f9fb 	bl	8010678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010282:	e007      	b.n	8010294 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010284:	6878      	ldr	r0, [r7, #4]
 8010286:	f000 f9f7 	bl	8010678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2200      	movs	r2, #0
 801028e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010292:	e1dc      	b.n	801064e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010294:	bf00      	nop
    return;
 8010296:	e1da      	b.n	801064e <HAL_UART_IRQHandler+0x66e>
 8010298:	10000001 	.word	0x10000001
 801029c:	04000120 	.word	0x04000120
 80102a0:	08011331 	.word	0x08011331

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80102a8:	2b01      	cmp	r3, #1
 80102aa:	f040 8170 	bne.w	801058e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80102ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80102b2:	f003 0310 	and.w	r3, r3, #16
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	f000 8169 	beq.w	801058e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80102bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80102c0:	f003 0310 	and.w	r3, r3, #16
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f000 8162 	beq.w	801058e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	2210      	movs	r2, #16
 80102d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102dc:	2b40      	cmp	r3, #64	@ 0x40
 80102de:	f040 80d8 	bne.w	8010492 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80102e8:	681b      	ldr	r3, [r3, #0]
 80102ea:	685b      	ldr	r3, [r3, #4]
 80102ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80102f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	f000 80af 	beq.w	8010458 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010300:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010304:	429a      	cmp	r2, r3
 8010306:	f080 80a7 	bcs.w	8010458 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010310:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	f003 0320 	and.w	r3, r3, #32
 8010322:	2b00      	cmp	r3, #0
 8010324:	f040 8087 	bne.w	8010436 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010330:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010334:	e853 3f00 	ldrex	r3, [r3]
 8010338:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801033c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010340:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010344:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010348:	687b      	ldr	r3, [r7, #4]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	461a      	mov	r2, r3
 801034e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010352:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010356:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801035a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801035e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010362:	e841 2300 	strex	r3, r2, [r1]
 8010366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801036a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801036e:	2b00      	cmp	r3, #0
 8010370:	d1da      	bne.n	8010328 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	3308      	adds	r3, #8
 8010378:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801037a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801037c:	e853 3f00 	ldrex	r3, [r3]
 8010380:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010384:	f023 0301 	bic.w	r3, r3, #1
 8010388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	3308      	adds	r3, #8
 8010392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010396:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801039a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801039c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801039e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80103a2:	e841 2300 	strex	r3, r2, [r1]
 80103a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80103a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d1e1      	bne.n	8010372 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	3308      	adds	r3, #8
 80103b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80103b8:	e853 3f00 	ldrex	r3, [r3]
 80103bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80103be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80103c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80103c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	3308      	adds	r3, #8
 80103ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80103d2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80103d4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80103d8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80103da:	e841 2300 	strex	r3, r2, [r1]
 80103de:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80103e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d1e3      	bne.n	80103ae <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2220      	movs	r2, #32
 80103ea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	2200      	movs	r2, #0
 80103f2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80103fc:	e853 3f00 	ldrex	r3, [r3]
 8010400:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8010402:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8010404:	f023 0310 	bic.w	r3, r3, #16
 8010408:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	681b      	ldr	r3, [r3, #0]
 8010410:	461a      	mov	r2, r3
 8010412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010416:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010418:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801041a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801041c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801041e:	e841 2300 	strex	r3, r2, [r1]
 8010422:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010426:	2b00      	cmp	r3, #0
 8010428:	d1e4      	bne.n	80103f4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010430:	4618      	mov	r0, r3
 8010432:	f7fb ffbc 	bl	800c3ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010436:	687b      	ldr	r3, [r7, #4]
 8010438:	2202      	movs	r2, #2
 801043a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010448:	b29b      	uxth	r3, r3
 801044a:	1ad3      	subs	r3, r2, r3
 801044c:	b29b      	uxth	r3, r3
 801044e:	4619      	mov	r1, r3
 8010450:	6878      	ldr	r0, [r7, #4]
 8010452:	f000 f91b 	bl	801068c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010456:	e0fc      	b.n	8010652 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801045e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010462:	429a      	cmp	r2, r3
 8010464:	f040 80f5 	bne.w	8010652 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	681b      	ldr	r3, [r3, #0]
 8010472:	f003 0320 	and.w	r3, r3, #32
 8010476:	2b20      	cmp	r3, #32
 8010478:	f040 80eb 	bne.w	8010652 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2202      	movs	r2, #2
 8010480:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010488:	4619      	mov	r1, r3
 801048a:	6878      	ldr	r0, [r7, #4]
 801048c:	f000 f8fe 	bl	801068c <HAL_UARTEx_RxEventCallback>
      return;
 8010490:	e0df      	b.n	8010652 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801049e:	b29b      	uxth	r3, r3
 80104a0:	1ad3      	subs	r3, r2, r3
 80104a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80104ac:	b29b      	uxth	r3, r3
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	f000 80d1 	beq.w	8010656 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80104b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	f000 80cc 	beq.w	8010656 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104c6:	e853 3f00 	ldrex	r3, [r3]
 80104ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80104cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80104d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	681b      	ldr	r3, [r3, #0]
 80104da:	461a      	mov	r2, r3
 80104dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80104e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80104e2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104e4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80104e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80104e8:	e841 2300 	strex	r3, r2, [r1]
 80104ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80104ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d1e4      	bne.n	80104be <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	681b      	ldr	r3, [r3, #0]
 80104f8:	3308      	adds	r3, #8
 80104fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104fe:	e853 3f00 	ldrex	r3, [r3]
 8010502:	623b      	str	r3, [r7, #32]
   return(result);
 8010504:	6a3b      	ldr	r3, [r7, #32]
 8010506:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801050a:	f023 0301 	bic.w	r3, r3, #1
 801050e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	3308      	adds	r3, #8
 8010518:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801051c:	633a      	str	r2, [r7, #48]	@ 0x30
 801051e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010520:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010522:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010524:	e841 2300 	strex	r3, r2, [r1]
 8010528:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801052a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801052c:	2b00      	cmp	r3, #0
 801052e:	d1e1      	bne.n	80104f4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	2220      	movs	r2, #32
 8010534:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	2200      	movs	r2, #0
 801053c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	2200      	movs	r2, #0
 8010542:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801054a:	693b      	ldr	r3, [r7, #16]
 801054c:	e853 3f00 	ldrex	r3, [r3]
 8010550:	60fb      	str	r3, [r7, #12]
   return(result);
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	f023 0310 	bic.w	r3, r3, #16
 8010558:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	461a      	mov	r2, r3
 8010562:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010566:	61fb      	str	r3, [r7, #28]
 8010568:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801056a:	69b9      	ldr	r1, [r7, #24]
 801056c:	69fa      	ldr	r2, [r7, #28]
 801056e:	e841 2300 	strex	r3, r2, [r1]
 8010572:	617b      	str	r3, [r7, #20]
   return(result);
 8010574:	697b      	ldr	r3, [r7, #20]
 8010576:	2b00      	cmp	r3, #0
 8010578:	d1e4      	bne.n	8010544 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	2202      	movs	r2, #2
 801057e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010584:	4619      	mov	r1, r3
 8010586:	6878      	ldr	r0, [r7, #4]
 8010588:	f000 f880 	bl	801068c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801058c:	e063      	b.n	8010656 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801058e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010592:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010596:	2b00      	cmp	r3, #0
 8010598:	d00e      	beq.n	80105b8 <HAL_UART_IRQHandler+0x5d8>
 801059a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801059e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d008      	beq.n	80105b8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	681b      	ldr	r3, [r3, #0]
 80105aa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80105ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80105b0:	6878      	ldr	r0, [r7, #4]
 80105b2:	f001 fc1b 	bl	8011dec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80105b6:	e051      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80105b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d014      	beq.n	80105ee <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80105c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d105      	bne.n	80105dc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80105d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80105d4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d008      	beq.n	80105ee <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d03a      	beq.n	801065a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	4798      	blx	r3
    }
    return;
 80105ec:	e035      	b.n	801065a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80105ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80105f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d009      	beq.n	801060e <HAL_UART_IRQHandler+0x62e>
 80105fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80105fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010602:	2b00      	cmp	r3, #0
 8010604:	d003      	beq.n	801060e <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8010606:	6878      	ldr	r0, [r7, #4]
 8010608:	f000 fea4 	bl	8011354 <UART_EndTransmit_IT>
    return;
 801060c:	e026      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801060e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010616:	2b00      	cmp	r3, #0
 8010618:	d009      	beq.n	801062e <HAL_UART_IRQHandler+0x64e>
 801061a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801061e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010622:	2b00      	cmp	r3, #0
 8010624:	d003      	beq.n	801062e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010626:	6878      	ldr	r0, [r7, #4]
 8010628:	f001 fbf4 	bl	8011e14 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801062c:	e016      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801062e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010636:	2b00      	cmp	r3, #0
 8010638:	d010      	beq.n	801065c <HAL_UART_IRQHandler+0x67c>
 801063a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801063e:	2b00      	cmp	r3, #0
 8010640:	da0c      	bge.n	801065c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010642:	6878      	ldr	r0, [r7, #4]
 8010644:	f001 fbdc 	bl	8011e00 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010648:	e008      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
      return;
 801064a:	bf00      	nop
 801064c:	e006      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
    return;
 801064e:	bf00      	nop
 8010650:	e004      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
      return;
 8010652:	bf00      	nop
 8010654:	e002      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
      return;
 8010656:	bf00      	nop
 8010658:	e000      	b.n	801065c <HAL_UART_IRQHandler+0x67c>
    return;
 801065a:	bf00      	nop
  }
}
 801065c:	37e8      	adds	r7, #232	@ 0xe8
 801065e:	46bd      	mov	sp, r7
 8010660:	bd80      	pop	{r7, pc}
 8010662:	bf00      	nop

08010664 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010664:	b480      	push	{r7}
 8010666:	b083      	sub	sp, #12
 8010668:	af00      	add	r7, sp, #0
 801066a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801066c:	bf00      	nop
 801066e:	370c      	adds	r7, #12
 8010670:	46bd      	mov	sp, r7
 8010672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010676:	4770      	bx	lr

08010678 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010678:	b480      	push	{r7}
 801067a:	b083      	sub	sp, #12
 801067c:	af00      	add	r7, sp, #0
 801067e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010680:	bf00      	nop
 8010682:	370c      	adds	r7, #12
 8010684:	46bd      	mov	sp, r7
 8010686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801068a:	4770      	bx	lr

0801068c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801068c:	b480      	push	{r7}
 801068e:	b083      	sub	sp, #12
 8010690:	af00      	add	r7, sp, #0
 8010692:	6078      	str	r0, [r7, #4]
 8010694:	460b      	mov	r3, r1
 8010696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010698:	bf00      	nop
 801069a:	370c      	adds	r7, #12
 801069c:	46bd      	mov	sp, r7
 801069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a2:	4770      	bx	lr

080106a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80106a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80106a8:	b08c      	sub	sp, #48	@ 0x30
 80106aa:	af00      	add	r7, sp, #0
 80106ac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80106ae:	2300      	movs	r3, #0
 80106b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80106b4:	697b      	ldr	r3, [r7, #20]
 80106b6:	689a      	ldr	r2, [r3, #8]
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	691b      	ldr	r3, [r3, #16]
 80106bc:	431a      	orrs	r2, r3
 80106be:	697b      	ldr	r3, [r7, #20]
 80106c0:	695b      	ldr	r3, [r3, #20]
 80106c2:	431a      	orrs	r2, r3
 80106c4:	697b      	ldr	r3, [r7, #20]
 80106c6:	69db      	ldr	r3, [r3, #28]
 80106c8:	4313      	orrs	r3, r2
 80106ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80106cc:	697b      	ldr	r3, [r7, #20]
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	681a      	ldr	r2, [r3, #0]
 80106d2:	4baf      	ldr	r3, [pc, #700]	@ (8010990 <UART_SetConfig+0x2ec>)
 80106d4:	4013      	ands	r3, r2
 80106d6:	697a      	ldr	r2, [r7, #20]
 80106d8:	6812      	ldr	r2, [r2, #0]
 80106da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80106dc:	430b      	orrs	r3, r1
 80106de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	681b      	ldr	r3, [r3, #0]
 80106e4:	685b      	ldr	r3, [r3, #4]
 80106e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80106ea:	697b      	ldr	r3, [r7, #20]
 80106ec:	68da      	ldr	r2, [r3, #12]
 80106ee:	697b      	ldr	r3, [r7, #20]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	430a      	orrs	r2, r1
 80106f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80106f6:	697b      	ldr	r3, [r7, #20]
 80106f8:	699b      	ldr	r3, [r3, #24]
 80106fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4aa4      	ldr	r2, [pc, #656]	@ (8010994 <UART_SetConfig+0x2f0>)
 8010702:	4293      	cmp	r3, r2
 8010704:	d004      	beq.n	8010710 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	6a1b      	ldr	r3, [r3, #32]
 801070a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801070c:	4313      	orrs	r3, r2
 801070e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010710:	697b      	ldr	r3, [r7, #20]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	689b      	ldr	r3, [r3, #8]
 8010716:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801071a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801071e:	697a      	ldr	r2, [r7, #20]
 8010720:	6812      	ldr	r2, [r2, #0]
 8010722:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010724:	430b      	orrs	r3, r1
 8010726:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010728:	697b      	ldr	r3, [r7, #20]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801072e:	f023 010f 	bic.w	r1, r3, #15
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	430a      	orrs	r2, r1
 801073c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801073e:	697b      	ldr	r3, [r7, #20]
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	4a95      	ldr	r2, [pc, #596]	@ (8010998 <UART_SetConfig+0x2f4>)
 8010744:	4293      	cmp	r3, r2
 8010746:	d125      	bne.n	8010794 <UART_SetConfig+0xf0>
 8010748:	2003      	movs	r0, #3
 801074a:	f7ff fb0d 	bl	800fd68 <LL_RCC_GetUSARTClockSource>
 801074e:	4603      	mov	r3, r0
 8010750:	2b03      	cmp	r3, #3
 8010752:	d81b      	bhi.n	801078c <UART_SetConfig+0xe8>
 8010754:	a201      	add	r2, pc, #4	@ (adr r2, 801075c <UART_SetConfig+0xb8>)
 8010756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801075a:	bf00      	nop
 801075c:	0801076d 	.word	0x0801076d
 8010760:	0801077d 	.word	0x0801077d
 8010764:	08010775 	.word	0x08010775
 8010768:	08010785 	.word	0x08010785
 801076c:	2301      	movs	r3, #1
 801076e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010772:	e042      	b.n	80107fa <UART_SetConfig+0x156>
 8010774:	2302      	movs	r3, #2
 8010776:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801077a:	e03e      	b.n	80107fa <UART_SetConfig+0x156>
 801077c:	2304      	movs	r3, #4
 801077e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010782:	e03a      	b.n	80107fa <UART_SetConfig+0x156>
 8010784:	2308      	movs	r3, #8
 8010786:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801078a:	e036      	b.n	80107fa <UART_SetConfig+0x156>
 801078c:	2310      	movs	r3, #16
 801078e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010792:	e032      	b.n	80107fa <UART_SetConfig+0x156>
 8010794:	697b      	ldr	r3, [r7, #20]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	4a7e      	ldr	r2, [pc, #504]	@ (8010994 <UART_SetConfig+0x2f0>)
 801079a:	4293      	cmp	r3, r2
 801079c:	d12a      	bne.n	80107f4 <UART_SetConfig+0x150>
 801079e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80107a2:	f7ff faf1 	bl	800fd88 <LL_RCC_GetLPUARTClockSource>
 80107a6:	4603      	mov	r3, r0
 80107a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80107ac:	d01a      	beq.n	80107e4 <UART_SetConfig+0x140>
 80107ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80107b2:	d81b      	bhi.n	80107ec <UART_SetConfig+0x148>
 80107b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107b8:	d00c      	beq.n	80107d4 <UART_SetConfig+0x130>
 80107ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80107be:	d815      	bhi.n	80107ec <UART_SetConfig+0x148>
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d003      	beq.n	80107cc <UART_SetConfig+0x128>
 80107c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80107c8:	d008      	beq.n	80107dc <UART_SetConfig+0x138>
 80107ca:	e00f      	b.n	80107ec <UART_SetConfig+0x148>
 80107cc:	2300      	movs	r3, #0
 80107ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80107d2:	e012      	b.n	80107fa <UART_SetConfig+0x156>
 80107d4:	2302      	movs	r3, #2
 80107d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80107da:	e00e      	b.n	80107fa <UART_SetConfig+0x156>
 80107dc:	2304      	movs	r3, #4
 80107de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80107e2:	e00a      	b.n	80107fa <UART_SetConfig+0x156>
 80107e4:	2308      	movs	r3, #8
 80107e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80107ea:	e006      	b.n	80107fa <UART_SetConfig+0x156>
 80107ec:	2310      	movs	r3, #16
 80107ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80107f2:	e002      	b.n	80107fa <UART_SetConfig+0x156>
 80107f4:	2310      	movs	r3, #16
 80107f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	4a65      	ldr	r2, [pc, #404]	@ (8010994 <UART_SetConfig+0x2f0>)
 8010800:	4293      	cmp	r3, r2
 8010802:	f040 8097 	bne.w	8010934 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010806:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801080a:	2b08      	cmp	r3, #8
 801080c:	d823      	bhi.n	8010856 <UART_SetConfig+0x1b2>
 801080e:	a201      	add	r2, pc, #4	@ (adr r2, 8010814 <UART_SetConfig+0x170>)
 8010810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010814:	08010839 	.word	0x08010839
 8010818:	08010857 	.word	0x08010857
 801081c:	08010841 	.word	0x08010841
 8010820:	08010857 	.word	0x08010857
 8010824:	08010847 	.word	0x08010847
 8010828:	08010857 	.word	0x08010857
 801082c:	08010857 	.word	0x08010857
 8010830:	08010857 	.word	0x08010857
 8010834:	0801084f 	.word	0x0801084f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010838:	f7fd fd38 	bl	800e2ac <HAL_RCC_GetPCLK1Freq>
 801083c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801083e:	e010      	b.n	8010862 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010840:	4b56      	ldr	r3, [pc, #344]	@ (801099c <UART_SetConfig+0x2f8>)
 8010842:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010844:	e00d      	b.n	8010862 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010846:	f7fd fcb1 	bl	800e1ac <HAL_RCC_GetSysClockFreq>
 801084a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801084c:	e009      	b.n	8010862 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801084e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010852:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010854:	e005      	b.n	8010862 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010856:	2300      	movs	r3, #0
 8010858:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801085a:	2301      	movs	r3, #1
 801085c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010860:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010864:	2b00      	cmp	r3, #0
 8010866:	f000 812b 	beq.w	8010ac0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801086a:	697b      	ldr	r3, [r7, #20]
 801086c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801086e:	4a4c      	ldr	r2, [pc, #304]	@ (80109a0 <UART_SetConfig+0x2fc>)
 8010870:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010874:	461a      	mov	r2, r3
 8010876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010878:	fbb3 f3f2 	udiv	r3, r3, r2
 801087c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801087e:	697b      	ldr	r3, [r7, #20]
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	4613      	mov	r3, r2
 8010884:	005b      	lsls	r3, r3, #1
 8010886:	4413      	add	r3, r2
 8010888:	69ba      	ldr	r2, [r7, #24]
 801088a:	429a      	cmp	r2, r3
 801088c:	d305      	bcc.n	801089a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801088e:	697b      	ldr	r3, [r7, #20]
 8010890:	685b      	ldr	r3, [r3, #4]
 8010892:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010894:	69ba      	ldr	r2, [r7, #24]
 8010896:	429a      	cmp	r2, r3
 8010898:	d903      	bls.n	80108a2 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801089a:	2301      	movs	r3, #1
 801089c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80108a0:	e10e      	b.n	8010ac0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80108a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108a4:	2200      	movs	r2, #0
 80108a6:	60bb      	str	r3, [r7, #8]
 80108a8:	60fa      	str	r2, [r7, #12]
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108ae:	4a3c      	ldr	r2, [pc, #240]	@ (80109a0 <UART_SetConfig+0x2fc>)
 80108b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80108b4:	b29b      	uxth	r3, r3
 80108b6:	2200      	movs	r2, #0
 80108b8:	603b      	str	r3, [r7, #0]
 80108ba:	607a      	str	r2, [r7, #4]
 80108bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80108c0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80108c4:	f7f5 fe6e 	bl	80065a4 <__aeabi_uldivmod>
 80108c8:	4602      	mov	r2, r0
 80108ca:	460b      	mov	r3, r1
 80108cc:	4610      	mov	r0, r2
 80108ce:	4619      	mov	r1, r3
 80108d0:	f04f 0200 	mov.w	r2, #0
 80108d4:	f04f 0300 	mov.w	r3, #0
 80108d8:	020b      	lsls	r3, r1, #8
 80108da:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80108de:	0202      	lsls	r2, r0, #8
 80108e0:	6979      	ldr	r1, [r7, #20]
 80108e2:	6849      	ldr	r1, [r1, #4]
 80108e4:	0849      	lsrs	r1, r1, #1
 80108e6:	2000      	movs	r0, #0
 80108e8:	460c      	mov	r4, r1
 80108ea:	4605      	mov	r5, r0
 80108ec:	eb12 0804 	adds.w	r8, r2, r4
 80108f0:	eb43 0905 	adc.w	r9, r3, r5
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	685b      	ldr	r3, [r3, #4]
 80108f8:	2200      	movs	r2, #0
 80108fa:	469a      	mov	sl, r3
 80108fc:	4693      	mov	fp, r2
 80108fe:	4652      	mov	r2, sl
 8010900:	465b      	mov	r3, fp
 8010902:	4640      	mov	r0, r8
 8010904:	4649      	mov	r1, r9
 8010906:	f7f5 fe4d 	bl	80065a4 <__aeabi_uldivmod>
 801090a:	4602      	mov	r2, r0
 801090c:	460b      	mov	r3, r1
 801090e:	4613      	mov	r3, r2
 8010910:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010912:	6a3b      	ldr	r3, [r7, #32]
 8010914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010918:	d308      	bcc.n	801092c <UART_SetConfig+0x288>
 801091a:	6a3b      	ldr	r3, [r7, #32]
 801091c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010920:	d204      	bcs.n	801092c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010922:	697b      	ldr	r3, [r7, #20]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	6a3a      	ldr	r2, [r7, #32]
 8010928:	60da      	str	r2, [r3, #12]
 801092a:	e0c9      	b.n	8010ac0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 801092c:	2301      	movs	r3, #1
 801092e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010932:	e0c5      	b.n	8010ac0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010934:	697b      	ldr	r3, [r7, #20]
 8010936:	69db      	ldr	r3, [r3, #28]
 8010938:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801093c:	d16d      	bne.n	8010a1a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 801093e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010942:	3b01      	subs	r3, #1
 8010944:	2b07      	cmp	r3, #7
 8010946:	d82d      	bhi.n	80109a4 <UART_SetConfig+0x300>
 8010948:	a201      	add	r2, pc, #4	@ (adr r2, 8010950 <UART_SetConfig+0x2ac>)
 801094a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801094e:	bf00      	nop
 8010950:	08010971 	.word	0x08010971
 8010954:	08010979 	.word	0x08010979
 8010958:	080109a5 	.word	0x080109a5
 801095c:	0801097f 	.word	0x0801097f
 8010960:	080109a5 	.word	0x080109a5
 8010964:	080109a5 	.word	0x080109a5
 8010968:	080109a5 	.word	0x080109a5
 801096c:	08010987 	.word	0x08010987
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010970:	f7fd fcb2 	bl	800e2d8 <HAL_RCC_GetPCLK2Freq>
 8010974:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010976:	e01b      	b.n	80109b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010978:	4b08      	ldr	r3, [pc, #32]	@ (801099c <UART_SetConfig+0x2f8>)
 801097a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801097c:	e018      	b.n	80109b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801097e:	f7fd fc15 	bl	800e1ac <HAL_RCC_GetSysClockFreq>
 8010982:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010984:	e014      	b.n	80109b0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801098a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801098c:	e010      	b.n	80109b0 <UART_SetConfig+0x30c>
 801098e:	bf00      	nop
 8010990:	cfff69f3 	.word	0xcfff69f3
 8010994:	40008000 	.word	0x40008000
 8010998:	40013800 	.word	0x40013800
 801099c:	00f42400 	.word	0x00f42400
 80109a0:	08018a9c 	.word	0x08018a9c
      default:
        pclk = 0U;
 80109a4:	2300      	movs	r3, #0
 80109a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80109a8:	2301      	movs	r3, #1
 80109aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80109ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80109b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	f000 8084 	beq.w	8010ac0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80109b8:	697b      	ldr	r3, [r7, #20]
 80109ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80109bc:	4a4b      	ldr	r2, [pc, #300]	@ (8010aec <UART_SetConfig+0x448>)
 80109be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109c2:	461a      	mov	r2, r3
 80109c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80109c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80109ca:	005a      	lsls	r2, r3, #1
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	685b      	ldr	r3, [r3, #4]
 80109d0:	085b      	lsrs	r3, r3, #1
 80109d2:	441a      	add	r2, r3
 80109d4:	697b      	ldr	r3, [r7, #20]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80109dc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80109de:	6a3b      	ldr	r3, [r7, #32]
 80109e0:	2b0f      	cmp	r3, #15
 80109e2:	d916      	bls.n	8010a12 <UART_SetConfig+0x36e>
 80109e4:	6a3b      	ldr	r3, [r7, #32]
 80109e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80109ea:	d212      	bcs.n	8010a12 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80109ec:	6a3b      	ldr	r3, [r7, #32]
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	f023 030f 	bic.w	r3, r3, #15
 80109f4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80109f6:	6a3b      	ldr	r3, [r7, #32]
 80109f8:	085b      	lsrs	r3, r3, #1
 80109fa:	b29b      	uxth	r3, r3
 80109fc:	f003 0307 	and.w	r3, r3, #7
 8010a00:	b29a      	uxth	r2, r3
 8010a02:	8bfb      	ldrh	r3, [r7, #30]
 8010a04:	4313      	orrs	r3, r2
 8010a06:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010a08:	697b      	ldr	r3, [r7, #20]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	8bfa      	ldrh	r2, [r7, #30]
 8010a0e:	60da      	str	r2, [r3, #12]
 8010a10:	e056      	b.n	8010ac0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010a12:	2301      	movs	r3, #1
 8010a14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010a18:	e052      	b.n	8010ac0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010a1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010a1e:	3b01      	subs	r3, #1
 8010a20:	2b07      	cmp	r3, #7
 8010a22:	d822      	bhi.n	8010a6a <UART_SetConfig+0x3c6>
 8010a24:	a201      	add	r2, pc, #4	@ (adr r2, 8010a2c <UART_SetConfig+0x388>)
 8010a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a2a:	bf00      	nop
 8010a2c:	08010a4d 	.word	0x08010a4d
 8010a30:	08010a55 	.word	0x08010a55
 8010a34:	08010a6b 	.word	0x08010a6b
 8010a38:	08010a5b 	.word	0x08010a5b
 8010a3c:	08010a6b 	.word	0x08010a6b
 8010a40:	08010a6b 	.word	0x08010a6b
 8010a44:	08010a6b 	.word	0x08010a6b
 8010a48:	08010a63 	.word	0x08010a63
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a4c:	f7fd fc44 	bl	800e2d8 <HAL_RCC_GetPCLK2Freq>
 8010a50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010a52:	e010      	b.n	8010a76 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010a54:	4b26      	ldr	r3, [pc, #152]	@ (8010af0 <UART_SetConfig+0x44c>)
 8010a56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010a58:	e00d      	b.n	8010a76 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010a5a:	f7fd fba7 	bl	800e1ac <HAL_RCC_GetSysClockFreq>
 8010a5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010a60:	e009      	b.n	8010a76 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010a68:	e005      	b.n	8010a76 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010a6e:	2301      	movs	r3, #1
 8010a70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010a74:	bf00      	nop
    }

    if (pclk != 0U)
 8010a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a78:	2b00      	cmp	r3, #0
 8010a7a:	d021      	beq.n	8010ac0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010a80:	4a1a      	ldr	r2, [pc, #104]	@ (8010aec <UART_SetConfig+0x448>)
 8010a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a86:	461a      	mov	r2, r3
 8010a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a8a:	fbb3 f2f2 	udiv	r2, r3, r2
 8010a8e:	697b      	ldr	r3, [r7, #20]
 8010a90:	685b      	ldr	r3, [r3, #4]
 8010a92:	085b      	lsrs	r3, r3, #1
 8010a94:	441a      	add	r2, r3
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010a9e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010aa0:	6a3b      	ldr	r3, [r7, #32]
 8010aa2:	2b0f      	cmp	r3, #15
 8010aa4:	d909      	bls.n	8010aba <UART_SetConfig+0x416>
 8010aa6:	6a3b      	ldr	r3, [r7, #32]
 8010aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010aac:	d205      	bcs.n	8010aba <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010aae:	6a3b      	ldr	r3, [r7, #32]
 8010ab0:	b29a      	uxth	r2, r3
 8010ab2:	697b      	ldr	r3, [r7, #20]
 8010ab4:	681b      	ldr	r3, [r3, #0]
 8010ab6:	60da      	str	r2, [r3, #12]
 8010ab8:	e002      	b.n	8010ac0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010aba:	2301      	movs	r3, #1
 8010abc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	2201      	movs	r2, #1
 8010ac4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	2201      	movs	r2, #1
 8010acc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010ad0:	697b      	ldr	r3, [r7, #20]
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010ad6:	697b      	ldr	r3, [r7, #20]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010adc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	3730      	adds	r7, #48	@ 0x30
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010aea:	bf00      	nop
 8010aec:	08018a9c 	.word	0x08018a9c
 8010af0:	00f42400 	.word	0x00f42400

08010af4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010af4:	b480      	push	{r7}
 8010af6:	b083      	sub	sp, #12
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b00:	f003 0308 	and.w	r3, r3, #8
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d00a      	beq.n	8010b1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	685b      	ldr	r3, [r3, #4]
 8010b0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010b12:	687b      	ldr	r3, [r7, #4]
 8010b14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	681b      	ldr	r3, [r3, #0]
 8010b1a:	430a      	orrs	r2, r1
 8010b1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b22:	f003 0301 	and.w	r3, r3, #1
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d00a      	beq.n	8010b40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	681b      	ldr	r3, [r3, #0]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	430a      	orrs	r2, r1
 8010b3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b44:	f003 0302 	and.w	r3, r3, #2
 8010b48:	2b00      	cmp	r3, #0
 8010b4a:	d00a      	beq.n	8010b62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	430a      	orrs	r2, r1
 8010b60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b66:	f003 0304 	and.w	r3, r3, #4
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d00a      	beq.n	8010b84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	685b      	ldr	r3, [r3, #4]
 8010b74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	430a      	orrs	r2, r1
 8010b82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b88:	f003 0310 	and.w	r3, r3, #16
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d00a      	beq.n	8010ba6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	689b      	ldr	r3, [r3, #8]
 8010b96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	430a      	orrs	r2, r1
 8010ba4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010baa:	f003 0320 	and.w	r3, r3, #32
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d00a      	beq.n	8010bc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	689b      	ldr	r3, [r3, #8]
 8010bb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	430a      	orrs	r2, r1
 8010bc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d01a      	beq.n	8010c0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	430a      	orrs	r2, r1
 8010be8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010bee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010bf2:	d10a      	bne.n	8010c0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	681b      	ldr	r3, [r3, #0]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	681b      	ldr	r3, [r3, #0]
 8010c06:	430a      	orrs	r2, r1
 8010c08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010c0a:	687b      	ldr	r3, [r7, #4]
 8010c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d00a      	beq.n	8010c2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	430a      	orrs	r2, r1
 8010c2a:	605a      	str	r2, [r3, #4]
  }
}
 8010c2c:	bf00      	nop
 8010c2e:	370c      	adds	r7, #12
 8010c30:	46bd      	mov	sp, r7
 8010c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c36:	4770      	bx	lr

08010c38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b098      	sub	sp, #96	@ 0x60
 8010c3c:	af02      	add	r7, sp, #8
 8010c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2200      	movs	r2, #0
 8010c44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010c48:	f7fb f8ca 	bl	800bde0 <HAL_GetTick>
 8010c4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	681b      	ldr	r3, [r3, #0]
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	f003 0308 	and.w	r3, r3, #8
 8010c58:	2b08      	cmp	r3, #8
 8010c5a:	d12f      	bne.n	8010cbc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010c5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010c60:	9300      	str	r3, [sp, #0]
 8010c62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010c64:	2200      	movs	r2, #0
 8010c66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010c6a:	6878      	ldr	r0, [r7, #4]
 8010c6c:	f000 f88e 	bl	8010d8c <UART_WaitOnFlagUntilTimeout>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d022      	beq.n	8010cbc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010c7e:	e853 3f00 	ldrex	r3, [r3]
 8010c82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010c84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010c86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	461a      	mov	r2, r3
 8010c92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8010c96:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010c9c:	e841 2300 	strex	r3, r2, [r1]
 8010ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010ca2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d1e6      	bne.n	8010c76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2220      	movs	r2, #32
 8010cac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	2200      	movs	r2, #0
 8010cb4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010cb8:	2303      	movs	r3, #3
 8010cba:	e063      	b.n	8010d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	681b      	ldr	r3, [r3, #0]
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	f003 0304 	and.w	r3, r3, #4
 8010cc6:	2b04      	cmp	r3, #4
 8010cc8:	d149      	bne.n	8010d5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010cca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010cce:	9300      	str	r3, [sp, #0]
 8010cd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010cd2:	2200      	movs	r2, #0
 8010cd4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010cd8:	6878      	ldr	r0, [r7, #4]
 8010cda:	f000 f857 	bl	8010d8c <UART_WaitOnFlagUntilTimeout>
 8010cde:	4603      	mov	r3, r0
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d03c      	beq.n	8010d5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010cec:	e853 3f00 	ldrex	r3, [r3]
 8010cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8010cf2:	6a3b      	ldr	r3, [r7, #32]
 8010cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010cf8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	461a      	mov	r2, r3
 8010d00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010d02:	633b      	str	r3, [r7, #48]	@ 0x30
 8010d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010d08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010d0a:	e841 2300 	strex	r3, r2, [r1]
 8010d0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d1e6      	bne.n	8010ce4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	3308      	adds	r3, #8
 8010d1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	e853 3f00 	ldrex	r3, [r3]
 8010d24:	60fb      	str	r3, [r7, #12]
   return(result);
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	f023 0301 	bic.w	r3, r3, #1
 8010d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	3308      	adds	r3, #8
 8010d34:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010d36:	61fa      	str	r2, [r7, #28]
 8010d38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d3a:	69b9      	ldr	r1, [r7, #24]
 8010d3c:	69fa      	ldr	r2, [r7, #28]
 8010d3e:	e841 2300 	strex	r3, r2, [r1]
 8010d42:	617b      	str	r3, [r7, #20]
   return(result);
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d1e5      	bne.n	8010d16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	2220      	movs	r2, #32
 8010d4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	2200      	movs	r2, #0
 8010d56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010d5a:	2303      	movs	r3, #3
 8010d5c:	e012      	b.n	8010d84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2220      	movs	r2, #32
 8010d62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2220      	movs	r2, #32
 8010d6a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	2200      	movs	r2, #0
 8010d72:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	2200      	movs	r2, #0
 8010d78:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	2200      	movs	r2, #0
 8010d7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010d82:	2300      	movs	r3, #0
}
 8010d84:	4618      	mov	r0, r3
 8010d86:	3758      	adds	r7, #88	@ 0x58
 8010d88:	46bd      	mov	sp, r7
 8010d8a:	bd80      	pop	{r7, pc}

08010d8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010d8c:	b580      	push	{r7, lr}
 8010d8e:	b084      	sub	sp, #16
 8010d90:	af00      	add	r7, sp, #0
 8010d92:	60f8      	str	r0, [r7, #12]
 8010d94:	60b9      	str	r1, [r7, #8]
 8010d96:	603b      	str	r3, [r7, #0]
 8010d98:	4613      	mov	r3, r2
 8010d9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010d9c:	e04f      	b.n	8010e3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010d9e:	69bb      	ldr	r3, [r7, #24]
 8010da0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010da4:	d04b      	beq.n	8010e3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010da6:	f7fb f81b 	bl	800bde0 <HAL_GetTick>
 8010daa:	4602      	mov	r2, r0
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	1ad3      	subs	r3, r2, r3
 8010db0:	69ba      	ldr	r2, [r7, #24]
 8010db2:	429a      	cmp	r2, r3
 8010db4:	d302      	bcc.n	8010dbc <UART_WaitOnFlagUntilTimeout+0x30>
 8010db6:	69bb      	ldr	r3, [r7, #24]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d101      	bne.n	8010dc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010dbc:	2303      	movs	r3, #3
 8010dbe:	e04e      	b.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	f003 0304 	and.w	r3, r3, #4
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d037      	beq.n	8010e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010dce:	68bb      	ldr	r3, [r7, #8]
 8010dd0:	2b80      	cmp	r3, #128	@ 0x80
 8010dd2:	d034      	beq.n	8010e3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010dd4:	68bb      	ldr	r3, [r7, #8]
 8010dd6:	2b40      	cmp	r3, #64	@ 0x40
 8010dd8:	d031      	beq.n	8010e3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	69db      	ldr	r3, [r3, #28]
 8010de0:	f003 0308 	and.w	r3, r3, #8
 8010de4:	2b08      	cmp	r3, #8
 8010de6:	d110      	bne.n	8010e0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	2208      	movs	r2, #8
 8010dee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010df0:	68f8      	ldr	r0, [r7, #12]
 8010df2:	f000 f99c 	bl	801112e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2208      	movs	r2, #8
 8010dfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010dfe:	68fb      	ldr	r3, [r7, #12]
 8010e00:	2200      	movs	r2, #0
 8010e02:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010e06:	2301      	movs	r3, #1
 8010e08:	e029      	b.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	69db      	ldr	r3, [r3, #28]
 8010e10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010e14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010e18:	d111      	bne.n	8010e3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010e22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010e24:	68f8      	ldr	r0, [r7, #12]
 8010e26:	f000 f982 	bl	801112e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	2220      	movs	r2, #32
 8010e2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010e3a:	2303      	movs	r3, #3
 8010e3c:	e00f      	b.n	8010e5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	69da      	ldr	r2, [r3, #28]
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	4013      	ands	r3, r2
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	429a      	cmp	r2, r3
 8010e4c:	bf0c      	ite	eq
 8010e4e:	2301      	moveq	r3, #1
 8010e50:	2300      	movne	r3, #0
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	461a      	mov	r2, r3
 8010e56:	79fb      	ldrb	r3, [r7, #7]
 8010e58:	429a      	cmp	r2, r3
 8010e5a:	d0a0      	beq.n	8010d9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010e5c:	2300      	movs	r3, #0
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
	...

08010e68 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010e68:	b480      	push	{r7}
 8010e6a:	b0a3      	sub	sp, #140	@ 0x8c
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	4613      	mov	r3, r2
 8010e74:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	68ba      	ldr	r2, [r7, #8]
 8010e7a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	88fa      	ldrh	r2, [r7, #6]
 8010e80:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010e84:	68fb      	ldr	r3, [r7, #12]
 8010e86:	88fa      	ldrh	r2, [r7, #6]
 8010e88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	2200      	movs	r2, #0
 8010e90:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	689b      	ldr	r3, [r3, #8]
 8010e96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010e9a:	d10e      	bne.n	8010eba <UART_Start_Receive_IT+0x52>
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	691b      	ldr	r3, [r3, #16]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d105      	bne.n	8010eb0 <UART_Start_Receive_IT+0x48>
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010eaa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010eae:	e02d      	b.n	8010f0c <UART_Start_Receive_IT+0xa4>
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	22ff      	movs	r2, #255	@ 0xff
 8010eb4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010eb8:	e028      	b.n	8010f0c <UART_Start_Receive_IT+0xa4>
 8010eba:	68fb      	ldr	r3, [r7, #12]
 8010ebc:	689b      	ldr	r3, [r3, #8]
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d10d      	bne.n	8010ede <UART_Start_Receive_IT+0x76>
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	691b      	ldr	r3, [r3, #16]
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d104      	bne.n	8010ed4 <UART_Start_Receive_IT+0x6c>
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	22ff      	movs	r2, #255	@ 0xff
 8010ece:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010ed2:	e01b      	b.n	8010f0c <UART_Start_Receive_IT+0xa4>
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	227f      	movs	r2, #127	@ 0x7f
 8010ed8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010edc:	e016      	b.n	8010f0c <UART_Start_Receive_IT+0xa4>
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	689b      	ldr	r3, [r3, #8]
 8010ee2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010ee6:	d10d      	bne.n	8010f04 <UART_Start_Receive_IT+0x9c>
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	691b      	ldr	r3, [r3, #16]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d104      	bne.n	8010efa <UART_Start_Receive_IT+0x92>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	227f      	movs	r2, #127	@ 0x7f
 8010ef4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010ef8:	e008      	b.n	8010f0c <UART_Start_Receive_IT+0xa4>
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	223f      	movs	r2, #63	@ 0x3f
 8010efe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010f02:	e003      	b.n	8010f0c <UART_Start_Receive_IT+0xa4>
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	2200      	movs	r2, #0
 8010f08:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	2222      	movs	r2, #34	@ 0x22
 8010f18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	681b      	ldr	r3, [r3, #0]
 8010f20:	3308      	adds	r3, #8
 8010f22:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f26:	e853 3f00 	ldrex	r3, [r3]
 8010f2a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8010f2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8010f2e:	f043 0301 	orr.w	r3, r3, #1
 8010f32:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	3308      	adds	r3, #8
 8010f3c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8010f40:	673a      	str	r2, [r7, #112]	@ 0x70
 8010f42:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010f44:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8010f46:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8010f48:	e841 2300 	strex	r3, r2, [r1]
 8010f4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8010f4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d1e3      	bne.n	8010f1c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010f58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010f5c:	d14f      	bne.n	8010ffe <UART_Start_Receive_IT+0x196>
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8010f64:	88fa      	ldrh	r2, [r7, #6]
 8010f66:	429a      	cmp	r2, r3
 8010f68:	d349      	bcc.n	8010ffe <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	689b      	ldr	r3, [r3, #8]
 8010f6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f72:	d107      	bne.n	8010f84 <UART_Start_Receive_IT+0x11c>
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d103      	bne.n	8010f84 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	4a47      	ldr	r2, [pc, #284]	@ (801109c <UART_Start_Receive_IT+0x234>)
 8010f80:	675a      	str	r2, [r3, #116]	@ 0x74
 8010f82:	e002      	b.n	8010f8a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8010f84:	68fb      	ldr	r3, [r7, #12]
 8010f86:	4a46      	ldr	r2, [pc, #280]	@ (80110a0 <UART_Start_Receive_IT+0x238>)
 8010f88:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d01a      	beq.n	8010fc8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	681b      	ldr	r3, [r3, #0]
 8010f96:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010f98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010f9a:	e853 3f00 	ldrex	r3, [r3]
 8010f9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8010fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010fa6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	461a      	mov	r2, r3
 8010fb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8010fb4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010fb6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fb8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8010fba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010fbc:	e841 2300 	strex	r3, r2, [r1]
 8010fc0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8010fc2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d1e4      	bne.n	8010f92 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	3308      	adds	r3, #8
 8010fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fd2:	e853 3f00 	ldrex	r3, [r3]
 8010fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010fde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	3308      	adds	r3, #8
 8010fe6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8010fe8:	64ba      	str	r2, [r7, #72]	@ 0x48
 8010fea:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010fec:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8010fee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010ff0:	e841 2300 	strex	r3, r2, [r1]
 8010ff4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8010ff6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d1e5      	bne.n	8010fc8 <UART_Start_Receive_IT+0x160>
 8010ffc:	e046      	b.n	801108c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	689b      	ldr	r3, [r3, #8]
 8011002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011006:	d107      	bne.n	8011018 <UART_Start_Receive_IT+0x1b0>
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	691b      	ldr	r3, [r3, #16]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d103      	bne.n	8011018 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	4a24      	ldr	r2, [pc, #144]	@ (80110a4 <UART_Start_Receive_IT+0x23c>)
 8011014:	675a      	str	r2, [r3, #116]	@ 0x74
 8011016:	e002      	b.n	801101e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	4a23      	ldr	r2, [pc, #140]	@ (80110a8 <UART_Start_Receive_IT+0x240>)
 801101c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	691b      	ldr	r3, [r3, #16]
 8011022:	2b00      	cmp	r3, #0
 8011024:	d019      	beq.n	801105a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801102c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801102e:	e853 3f00 	ldrex	r3, [r3]
 8011032:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011036:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801103a:	677b      	str	r3, [r7, #116]	@ 0x74
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	461a      	mov	r2, r3
 8011042:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011044:	637b      	str	r3, [r7, #52]	@ 0x34
 8011046:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011048:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801104a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801104c:	e841 2300 	strex	r3, r2, [r1]
 8011050:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011054:	2b00      	cmp	r3, #0
 8011056:	d1e6      	bne.n	8011026 <UART_Start_Receive_IT+0x1be>
 8011058:	e018      	b.n	801108c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011060:	697b      	ldr	r3, [r7, #20]
 8011062:	e853 3f00 	ldrex	r3, [r3]
 8011066:	613b      	str	r3, [r7, #16]
   return(result);
 8011068:	693b      	ldr	r3, [r7, #16]
 801106a:	f043 0320 	orr.w	r3, r3, #32
 801106e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	461a      	mov	r2, r3
 8011076:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011078:	623b      	str	r3, [r7, #32]
 801107a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801107c:	69f9      	ldr	r1, [r7, #28]
 801107e:	6a3a      	ldr	r2, [r7, #32]
 8011080:	e841 2300 	strex	r3, r2, [r1]
 8011084:	61bb      	str	r3, [r7, #24]
   return(result);
 8011086:	69bb      	ldr	r3, [r7, #24]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d1e6      	bne.n	801105a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801108c:	2300      	movs	r3, #0
}
 801108e:	4618      	mov	r0, r3
 8011090:	378c      	adds	r7, #140	@ 0x8c
 8011092:	46bd      	mov	sp, r7
 8011094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	08011a81 	.word	0x08011a81
 80110a0:	0801171d 	.word	0x0801171d
 80110a4:	08011565 	.word	0x08011565
 80110a8:	080113ad 	.word	0x080113ad

080110ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80110ac:	b480      	push	{r7}
 80110ae:	b08f      	sub	sp, #60	@ 0x3c
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ba:	6a3b      	ldr	r3, [r7, #32]
 80110bc:	e853 3f00 	ldrex	r3, [r3]
 80110c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80110c2:	69fb      	ldr	r3, [r7, #28]
 80110c4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80110c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	461a      	mov	r2, r3
 80110d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80110d4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80110d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80110da:	e841 2300 	strex	r3, r2, [r1]
 80110de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80110e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d1e6      	bne.n	80110b4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	3308      	adds	r3, #8
 80110ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	e853 3f00 	ldrex	r3, [r3]
 80110f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80110fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	681b      	ldr	r3, [r3, #0]
 8011102:	3308      	adds	r3, #8
 8011104:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011106:	61ba      	str	r2, [r7, #24]
 8011108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801110a:	6979      	ldr	r1, [r7, #20]
 801110c:	69ba      	ldr	r2, [r7, #24]
 801110e:	e841 2300 	strex	r3, r2, [r1]
 8011112:	613b      	str	r3, [r7, #16]
   return(result);
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d1e5      	bne.n	80110e6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801111a:	687b      	ldr	r3, [r7, #4]
 801111c:	2220      	movs	r2, #32
 801111e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011122:	bf00      	nop
 8011124:	373c      	adds	r7, #60	@ 0x3c
 8011126:	46bd      	mov	sp, r7
 8011128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112c:	4770      	bx	lr

0801112e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801112e:	b480      	push	{r7}
 8011130:	b095      	sub	sp, #84	@ 0x54
 8011132:	af00      	add	r7, sp, #0
 8011134:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801113c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801113e:	e853 3f00 	ldrex	r3, [r3]
 8011142:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011146:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801114a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801114c:	687b      	ldr	r3, [r7, #4]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	461a      	mov	r2, r3
 8011152:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011154:	643b      	str	r3, [r7, #64]	@ 0x40
 8011156:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011158:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801115a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801115c:	e841 2300 	strex	r3, r2, [r1]
 8011160:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011164:	2b00      	cmp	r3, #0
 8011166:	d1e6      	bne.n	8011136 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	3308      	adds	r3, #8
 801116e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011170:	6a3b      	ldr	r3, [r7, #32]
 8011172:	e853 3f00 	ldrex	r3, [r3]
 8011176:	61fb      	str	r3, [r7, #28]
   return(result);
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801117e:	f023 0301 	bic.w	r3, r3, #1
 8011182:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	3308      	adds	r3, #8
 801118a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801118c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801118e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011192:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011194:	e841 2300 	strex	r3, r2, [r1]
 8011198:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1e3      	bne.n	8011168 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80111a4:	2b01      	cmp	r3, #1
 80111a6:	d118      	bne.n	80111da <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	681b      	ldr	r3, [r3, #0]
 80111ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	e853 3f00 	ldrex	r3, [r3]
 80111b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	f023 0310 	bic.w	r3, r3, #16
 80111bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	461a      	mov	r2, r3
 80111c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80111c6:	61bb      	str	r3, [r7, #24]
 80111c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111ca:	6979      	ldr	r1, [r7, #20]
 80111cc:	69ba      	ldr	r2, [r7, #24]
 80111ce:	e841 2300 	strex	r3, r2, [r1]
 80111d2:	613b      	str	r3, [r7, #16]
   return(result);
 80111d4:	693b      	ldr	r3, [r7, #16]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d1e6      	bne.n	80111a8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	2220      	movs	r2, #32
 80111de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80111ee:	bf00      	nop
 80111f0:	3754      	adds	r7, #84	@ 0x54
 80111f2:	46bd      	mov	sp, r7
 80111f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f8:	4770      	bx	lr

080111fa <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b090      	sub	sp, #64	@ 0x40
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011206:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	681b      	ldr	r3, [r3, #0]
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	f003 0320 	and.w	r3, r3, #32
 8011212:	2b00      	cmp	r3, #0
 8011214:	d137      	bne.n	8011286 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8011216:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011218:	2200      	movs	r2, #0
 801121a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801121e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	3308      	adds	r3, #8
 8011224:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011228:	e853 3f00 	ldrex	r3, [r3]
 801122c:	623b      	str	r3, [r7, #32]
   return(result);
 801122e:	6a3b      	ldr	r3, [r7, #32]
 8011230:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011234:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011236:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	3308      	adds	r3, #8
 801123c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801123e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011240:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011242:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011246:	e841 2300 	strex	r3, r2, [r1]
 801124a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801124c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801124e:	2b00      	cmp	r3, #0
 8011250:	d1e5      	bne.n	801121e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011254:	681b      	ldr	r3, [r3, #0]
 8011256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011258:	693b      	ldr	r3, [r7, #16]
 801125a:	e853 3f00 	ldrex	r3, [r3]
 801125e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011266:	637b      	str	r3, [r7, #52]	@ 0x34
 8011268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	461a      	mov	r2, r3
 801126e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011270:	61fb      	str	r3, [r7, #28]
 8011272:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011274:	69b9      	ldr	r1, [r7, #24]
 8011276:	69fa      	ldr	r2, [r7, #28]
 8011278:	e841 2300 	strex	r3, r2, [r1]
 801127c:	617b      	str	r3, [r7, #20]
   return(result);
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d1e6      	bne.n	8011252 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011284:	e002      	b.n	801128c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011286:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011288:	f7f6 feb4 	bl	8007ff4 <HAL_UART_TxCpltCallback>
}
 801128c:	bf00      	nop
 801128e:	3740      	adds	r7, #64	@ 0x40
 8011290:	46bd      	mov	sp, r7
 8011292:	bd80      	pop	{r7, pc}

08011294 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b084      	sub	sp, #16
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80112a2:	68f8      	ldr	r0, [r7, #12]
 80112a4:	f7ff f9de 	bl	8010664 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80112a8:	bf00      	nop
 80112aa:	3710      	adds	r7, #16
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b086      	sub	sp, #24
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80112be:	697b      	ldr	r3, [r7, #20]
 80112c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80112c4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80112c6:	697b      	ldr	r3, [r7, #20]
 80112c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80112cc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	681b      	ldr	r3, [r3, #0]
 80112d2:	689b      	ldr	r3, [r3, #8]
 80112d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80112d8:	2b80      	cmp	r3, #128	@ 0x80
 80112da:	d109      	bne.n	80112f0 <UART_DMAError+0x40>
 80112dc:	693b      	ldr	r3, [r7, #16]
 80112de:	2b21      	cmp	r3, #33	@ 0x21
 80112e0:	d106      	bne.n	80112f0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80112e2:	697b      	ldr	r3, [r7, #20]
 80112e4:	2200      	movs	r2, #0
 80112e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80112ea:	6978      	ldr	r0, [r7, #20]
 80112ec:	f7ff fede 	bl	80110ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	689b      	ldr	r3, [r3, #8]
 80112f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80112fa:	2b40      	cmp	r3, #64	@ 0x40
 80112fc:	d109      	bne.n	8011312 <UART_DMAError+0x62>
 80112fe:	68fb      	ldr	r3, [r7, #12]
 8011300:	2b22      	cmp	r3, #34	@ 0x22
 8011302:	d106      	bne.n	8011312 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	2200      	movs	r2, #0
 8011308:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 801130c:	6978      	ldr	r0, [r7, #20]
 801130e:	f7ff ff0e 	bl	801112e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011312:	697b      	ldr	r3, [r7, #20]
 8011314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011318:	f043 0210 	orr.w	r2, r3, #16
 801131c:	697b      	ldr	r3, [r7, #20]
 801131e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011322:	6978      	ldr	r0, [r7, #20]
 8011324:	f7ff f9a8 	bl	8010678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011328:	bf00      	nop
 801132a:	3718      	adds	r7, #24
 801132c:	46bd      	mov	sp, r7
 801132e:	bd80      	pop	{r7, pc}

08011330 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011330:	b580      	push	{r7, lr}
 8011332:	b084      	sub	sp, #16
 8011334:	af00      	add	r7, sp, #0
 8011336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801133c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	2200      	movs	r2, #0
 8011342:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011346:	68f8      	ldr	r0, [r7, #12]
 8011348:	f7ff f996 	bl	8010678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801134c:	bf00      	nop
 801134e:	3710      	adds	r7, #16
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}

08011354 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b088      	sub	sp, #32
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011362:	68fb      	ldr	r3, [r7, #12]
 8011364:	e853 3f00 	ldrex	r3, [r3]
 8011368:	60bb      	str	r3, [r7, #8]
   return(result);
 801136a:	68bb      	ldr	r3, [r7, #8]
 801136c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011370:	61fb      	str	r3, [r7, #28]
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	461a      	mov	r2, r3
 8011378:	69fb      	ldr	r3, [r7, #28]
 801137a:	61bb      	str	r3, [r7, #24]
 801137c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801137e:	6979      	ldr	r1, [r7, #20]
 8011380:	69ba      	ldr	r2, [r7, #24]
 8011382:	e841 2300 	strex	r3, r2, [r1]
 8011386:	613b      	str	r3, [r7, #16]
   return(result);
 8011388:	693b      	ldr	r3, [r7, #16]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d1e6      	bne.n	801135c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2220      	movs	r2, #32
 8011392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	2200      	movs	r2, #0
 801139a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f7f6 fe29 	bl	8007ff4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80113a2:	bf00      	nop
 80113a4:	3720      	adds	r7, #32
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
	...

080113ac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80113ac:	b580      	push	{r7, lr}
 80113ae:	b09c      	sub	sp, #112	@ 0x70
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80113ba:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80113c4:	2b22      	cmp	r3, #34	@ 0x22
 80113c6:	f040 80be 	bne.w	8011546 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80113d0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80113d4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80113d8:	b2d9      	uxtb	r1, r3
 80113da:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80113de:	b2da      	uxtb	r2, r3
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113e4:	400a      	ands	r2, r1
 80113e6:	b2d2      	uxtb	r2, r2
 80113e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113ee:	1c5a      	adds	r2, r3, #1
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80113f4:	687b      	ldr	r3, [r7, #4]
 80113f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80113fa:	b29b      	uxth	r3, r3
 80113fc:	3b01      	subs	r3, #1
 80113fe:	b29a      	uxth	r2, r3
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801140c:	b29b      	uxth	r3, r3
 801140e:	2b00      	cmp	r3, #0
 8011410:	f040 80a1 	bne.w	8011556 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801141c:	e853 3f00 	ldrex	r3, [r3]
 8011420:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011422:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011424:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011428:	66bb      	str	r3, [r7, #104]	@ 0x68
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	461a      	mov	r2, r3
 8011430:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011432:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011434:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011436:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011438:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801143a:	e841 2300 	strex	r3, r2, [r1]
 801143e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011440:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1e6      	bne.n	8011414 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	3308      	adds	r3, #8
 801144c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801144e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011450:	e853 3f00 	ldrex	r3, [r3]
 8011454:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011458:	f023 0301 	bic.w	r3, r3, #1
 801145c:	667b      	str	r3, [r7, #100]	@ 0x64
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	3308      	adds	r3, #8
 8011464:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011466:	647a      	str	r2, [r7, #68]	@ 0x44
 8011468:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801146a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801146c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801146e:	e841 2300 	strex	r3, r2, [r1]
 8011472:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011476:	2b00      	cmp	r3, #0
 8011478:	d1e5      	bne.n	8011446 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2220      	movs	r2, #32
 801147e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	2200      	movs	r2, #0
 8011486:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	2200      	movs	r2, #0
 801148c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	4a33      	ldr	r2, [pc, #204]	@ (8011560 <UART_RxISR_8BIT+0x1b4>)
 8011494:	4293      	cmp	r3, r2
 8011496:	d01f      	beq.n	80114d8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80114a2:	2b00      	cmp	r3, #0
 80114a4:	d018      	beq.n	80114d8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80114ae:	e853 3f00 	ldrex	r3, [r3]
 80114b2:	623b      	str	r3, [r7, #32]
   return(result);
 80114b4:	6a3b      	ldr	r3, [r7, #32]
 80114b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80114ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	461a      	mov	r2, r3
 80114c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80114c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80114c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80114c8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80114ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80114cc:	e841 2300 	strex	r3, r2, [r1]
 80114d0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80114d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d1e6      	bne.n	80114a6 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80114dc:	2b01      	cmp	r3, #1
 80114de:	d12e      	bne.n	801153e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	e853 3f00 	ldrex	r3, [r3]
 80114f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	f023 0310 	bic.w	r3, r3, #16
 80114fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	461a      	mov	r2, r3
 8011502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011504:	61fb      	str	r3, [r7, #28]
 8011506:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011508:	69b9      	ldr	r1, [r7, #24]
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	e841 2300 	strex	r3, r2, [r1]
 8011510:	617b      	str	r3, [r7, #20]
   return(result);
 8011512:	697b      	ldr	r3, [r7, #20]
 8011514:	2b00      	cmp	r3, #0
 8011516:	d1e6      	bne.n	80114e6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	69db      	ldr	r3, [r3, #28]
 801151e:	f003 0310 	and.w	r3, r3, #16
 8011522:	2b10      	cmp	r3, #16
 8011524:	d103      	bne.n	801152e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	681b      	ldr	r3, [r3, #0]
 801152a:	2210      	movs	r2, #16
 801152c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011534:	4619      	mov	r1, r3
 8011536:	6878      	ldr	r0, [r7, #4]
 8011538:	f7ff f8a8 	bl	801068c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801153c:	e00b      	b.n	8011556 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7f6 fd3a 	bl	8007fb8 <HAL_UART_RxCpltCallback>
}
 8011544:	e007      	b.n	8011556 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	681b      	ldr	r3, [r3, #0]
 801154a:	699a      	ldr	r2, [r3, #24]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	681b      	ldr	r3, [r3, #0]
 8011550:	f042 0208 	orr.w	r2, r2, #8
 8011554:	619a      	str	r2, [r3, #24]
}
 8011556:	bf00      	nop
 8011558:	3770      	adds	r7, #112	@ 0x70
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}
 801155e:	bf00      	nop
 8011560:	40008000 	.word	0x40008000

08011564 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b09c      	sub	sp, #112	@ 0x70
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011572:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801157c:	2b22      	cmp	r3, #34	@ 0x22
 801157e:	f040 80be 	bne.w	80116fe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	681b      	ldr	r3, [r3, #0]
 8011586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011588:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011590:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011592:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8011596:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801159a:	4013      	ands	r3, r2
 801159c:	b29a      	uxth	r2, r3
 801159e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80115a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115a6:	1c9a      	adds	r2, r3, #2
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80115b2:	b29b      	uxth	r3, r3
 80115b4:	3b01      	subs	r3, #1
 80115b6:	b29a      	uxth	r2, r3
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80115c4:	b29b      	uxth	r3, r3
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	f040 80a1 	bne.w	801170e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	681b      	ldr	r3, [r3, #0]
 80115d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80115d4:	e853 3f00 	ldrex	r3, [r3]
 80115d8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80115da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80115dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80115e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	461a      	mov	r2, r3
 80115e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80115ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80115ec:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80115f0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80115f2:	e841 2300 	strex	r3, r2, [r1]
 80115f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80115f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	d1e6      	bne.n	80115cc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	3308      	adds	r3, #8
 8011604:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011608:	e853 3f00 	ldrex	r3, [r3]
 801160c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801160e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011610:	f023 0301 	bic.w	r3, r3, #1
 8011614:	663b      	str	r3, [r7, #96]	@ 0x60
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	3308      	adds	r3, #8
 801161c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801161e:	643a      	str	r2, [r7, #64]	@ 0x40
 8011620:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011622:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011624:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011626:	e841 2300 	strex	r3, r2, [r1]
 801162a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801162c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801162e:	2b00      	cmp	r3, #0
 8011630:	d1e5      	bne.n	80115fe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011632:	687b      	ldr	r3, [r7, #4]
 8011634:	2220      	movs	r2, #32
 8011636:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	2200      	movs	r2, #0
 8011644:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	681b      	ldr	r3, [r3, #0]
 801164a:	4a33      	ldr	r2, [pc, #204]	@ (8011718 <UART_RxISR_16BIT+0x1b4>)
 801164c:	4293      	cmp	r3, r2
 801164e:	d01f      	beq.n	8011690 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	681b      	ldr	r3, [r3, #0]
 8011654:	685b      	ldr	r3, [r3, #4]
 8011656:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801165a:	2b00      	cmp	r3, #0
 801165c:	d018      	beq.n	8011690 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011664:	6a3b      	ldr	r3, [r7, #32]
 8011666:	e853 3f00 	ldrex	r3, [r3]
 801166a:	61fb      	str	r3, [r7, #28]
   return(result);
 801166c:	69fb      	ldr	r3, [r7, #28]
 801166e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011672:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	461a      	mov	r2, r3
 801167a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801167c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801167e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011680:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011682:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011684:	e841 2300 	strex	r3, r2, [r1]
 8011688:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801168a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801168c:	2b00      	cmp	r3, #0
 801168e:	d1e6      	bne.n	801165e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011694:	2b01      	cmp	r3, #1
 8011696:	d12e      	bne.n	80116f6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	2200      	movs	r2, #0
 801169c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	e853 3f00 	ldrex	r3, [r3]
 80116aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80116ac:	68bb      	ldr	r3, [r7, #8]
 80116ae:	f023 0310 	bic.w	r3, r3, #16
 80116b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	461a      	mov	r2, r3
 80116ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80116bc:	61bb      	str	r3, [r7, #24]
 80116be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116c0:	6979      	ldr	r1, [r7, #20]
 80116c2:	69ba      	ldr	r2, [r7, #24]
 80116c4:	e841 2300 	strex	r3, r2, [r1]
 80116c8:	613b      	str	r3, [r7, #16]
   return(result);
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d1e6      	bne.n	801169e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	681b      	ldr	r3, [r3, #0]
 80116d4:	69db      	ldr	r3, [r3, #28]
 80116d6:	f003 0310 	and.w	r3, r3, #16
 80116da:	2b10      	cmp	r3, #16
 80116dc:	d103      	bne.n	80116e6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	2210      	movs	r2, #16
 80116e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80116ec:	4619      	mov	r1, r3
 80116ee:	6878      	ldr	r0, [r7, #4]
 80116f0:	f7fe ffcc 	bl	801068c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80116f4:	e00b      	b.n	801170e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f7f6 fc5e 	bl	8007fb8 <HAL_UART_RxCpltCallback>
}
 80116fc:	e007      	b.n	801170e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	681b      	ldr	r3, [r3, #0]
 8011702:	699a      	ldr	r2, [r3, #24]
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	681b      	ldr	r3, [r3, #0]
 8011708:	f042 0208 	orr.w	r2, r2, #8
 801170c:	619a      	str	r2, [r3, #24]
}
 801170e:	bf00      	nop
 8011710:	3770      	adds	r7, #112	@ 0x70
 8011712:	46bd      	mov	sp, r7
 8011714:	bd80      	pop	{r7, pc}
 8011716:	bf00      	nop
 8011718:	40008000 	.word	0x40008000

0801171c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801171c:	b580      	push	{r7, lr}
 801171e:	b0ac      	sub	sp, #176	@ 0xb0
 8011720:	af00      	add	r7, sp, #0
 8011722:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801172a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	69db      	ldr	r3, [r3, #28]
 8011734:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	689b      	ldr	r3, [r3, #8]
 8011748:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011752:	2b22      	cmp	r3, #34	@ 0x22
 8011754:	f040 8183 	bne.w	8011a5e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801175e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011762:	e126      	b.n	80119b2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801176a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801176e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011772:	b2d9      	uxtb	r1, r3
 8011774:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8011778:	b2da      	uxtb	r2, r3
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801177e:	400a      	ands	r2, r1
 8011780:	b2d2      	uxtb	r2, r2
 8011782:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011788:	1c5a      	adds	r2, r3, #1
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011794:	b29b      	uxth	r3, r3
 8011796:	3b01      	subs	r3, #1
 8011798:	b29a      	uxth	r2, r3
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80117a0:	687b      	ldr	r3, [r7, #4]
 80117a2:	681b      	ldr	r3, [r3, #0]
 80117a4:	69db      	ldr	r3, [r3, #28]
 80117a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80117aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117ae:	f003 0307 	and.w	r3, r3, #7
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d053      	beq.n	801185e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80117b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117ba:	f003 0301 	and.w	r3, r3, #1
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d011      	beq.n	80117e6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80117c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80117c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00b      	beq.n	80117e6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2201      	movs	r2, #1
 80117d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80117dc:	f043 0201 	orr.w	r2, r3, #1
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80117e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80117ea:	f003 0302 	and.w	r3, r3, #2
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d011      	beq.n	8011816 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80117f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80117f6:	f003 0301 	and.w	r3, r3, #1
 80117fa:	2b00      	cmp	r3, #0
 80117fc:	d00b      	beq.n	8011816 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	2202      	movs	r2, #2
 8011804:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801180c:	f043 0204 	orr.w	r2, r3, #4
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011816:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801181a:	f003 0304 	and.w	r3, r3, #4
 801181e:	2b00      	cmp	r3, #0
 8011820:	d011      	beq.n	8011846 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011826:	f003 0301 	and.w	r3, r3, #1
 801182a:	2b00      	cmp	r3, #0
 801182c:	d00b      	beq.n	8011846 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	2204      	movs	r2, #4
 8011834:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801183c:	f043 0202 	orr.w	r2, r3, #2
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801184c:	2b00      	cmp	r3, #0
 801184e:	d006      	beq.n	801185e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011850:	6878      	ldr	r0, [r7, #4]
 8011852:	f7fe ff11 	bl	8010678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2200      	movs	r2, #0
 801185a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011864:	b29b      	uxth	r3, r3
 8011866:	2b00      	cmp	r3, #0
 8011868:	f040 80a3 	bne.w	80119b2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011872:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011874:	e853 3f00 	ldrex	r3, [r3]
 8011878:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801187a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801187c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	461a      	mov	r2, r3
 801188a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801188e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011890:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011892:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011894:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011896:	e841 2300 	strex	r3, r2, [r1]
 801189a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801189c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d1e4      	bne.n	801186c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	3308      	adds	r3, #8
 80118a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80118ac:	e853 3f00 	ldrex	r3, [r3]
 80118b0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80118b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80118b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80118b8:	f023 0301 	bic.w	r3, r3, #1
 80118bc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	3308      	adds	r3, #8
 80118c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80118ca:	66ba      	str	r2, [r7, #104]	@ 0x68
 80118cc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ce:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80118d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80118d2:	e841 2300 	strex	r3, r2, [r1]
 80118d6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80118d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1e1      	bne.n	80118a2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2220      	movs	r2, #32
 80118e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2200      	movs	r2, #0
 80118f0:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	681b      	ldr	r3, [r3, #0]
 80118f6:	4a60      	ldr	r2, [pc, #384]	@ (8011a78 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80118f8:	4293      	cmp	r3, r2
 80118fa:	d021      	beq.n	8011940 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	685b      	ldr	r3, [r3, #4]
 8011902:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011906:	2b00      	cmp	r3, #0
 8011908:	d01a      	beq.n	8011940 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011910:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011912:	e853 3f00 	ldrex	r3, [r3]
 8011916:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011918:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801191a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801191e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	461a      	mov	r2, r3
 8011928:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801192c:	657b      	str	r3, [r7, #84]	@ 0x54
 801192e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011930:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011932:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011934:	e841 2300 	strex	r3, r2, [r1]
 8011938:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801193a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801193c:	2b00      	cmp	r3, #0
 801193e:	d1e4      	bne.n	801190a <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011944:	2b01      	cmp	r3, #1
 8011946:	d130      	bne.n	80119aa <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2200      	movs	r2, #0
 801194c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011956:	e853 3f00 	ldrex	r3, [r3]
 801195a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801195c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801195e:	f023 0310 	bic.w	r3, r3, #16
 8011962:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	681b      	ldr	r3, [r3, #0]
 801196a:	461a      	mov	r2, r3
 801196c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011970:	643b      	str	r3, [r7, #64]	@ 0x40
 8011972:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011974:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011976:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011978:	e841 2300 	strex	r3, r2, [r1]
 801197c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801197e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1e4      	bne.n	801194e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	69db      	ldr	r3, [r3, #28]
 801198a:	f003 0310 	and.w	r3, r3, #16
 801198e:	2b10      	cmp	r3, #16
 8011990:	d103      	bne.n	801199a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	2210      	movs	r2, #16
 8011998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80119a0:	4619      	mov	r1, r3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7fe fe72 	bl	801068c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80119a8:	e00e      	b.n	80119c8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 80119aa:	6878      	ldr	r0, [r7, #4]
 80119ac:	f7f6 fb04 	bl	8007fb8 <HAL_UART_RxCpltCallback>
        break;
 80119b0:	e00a      	b.n	80119c8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80119b2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d006      	beq.n	80119c8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 80119ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80119be:	f003 0320 	and.w	r3, r3, #32
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	f47f aece 	bne.w	8011764 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80119c8:	687b      	ldr	r3, [r7, #4]
 80119ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80119ce:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80119d2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80119d6:	2b00      	cmp	r3, #0
 80119d8:	d049      	beq.n	8011a6e <UART_RxISR_8BIT_FIFOEN+0x352>
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80119e0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d242      	bcs.n	8011a6e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	681b      	ldr	r3, [r3, #0]
 80119ec:	3308      	adds	r3, #8
 80119ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119f0:	6a3b      	ldr	r3, [r7, #32]
 80119f2:	e853 3f00 	ldrex	r3, [r3]
 80119f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80119f8:	69fb      	ldr	r3, [r7, #28]
 80119fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80119fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	3308      	adds	r3, #8
 8011a08:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011a0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011a14:	e841 2300 	strex	r3, r2, [r1]
 8011a18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d1e3      	bne.n	80119e8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	4a16      	ldr	r2, [pc, #88]	@ (8011a7c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8011a24:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	681b      	ldr	r3, [r3, #0]
 8011a2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	e853 3f00 	ldrex	r3, [r3]
 8011a32:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a34:	68bb      	ldr	r3, [r7, #8]
 8011a36:	f043 0320 	orr.w	r3, r3, #32
 8011a3a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	461a      	mov	r2, r3
 8011a44:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011a48:	61bb      	str	r3, [r7, #24]
 8011a4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a4c:	6979      	ldr	r1, [r7, #20]
 8011a4e:	69ba      	ldr	r2, [r7, #24]
 8011a50:	e841 2300 	strex	r3, r2, [r1]
 8011a54:	613b      	str	r3, [r7, #16]
   return(result);
 8011a56:	693b      	ldr	r3, [r7, #16]
 8011a58:	2b00      	cmp	r3, #0
 8011a5a:	d1e4      	bne.n	8011a26 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011a5c:	e007      	b.n	8011a6e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	699a      	ldr	r2, [r3, #24]
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	f042 0208 	orr.w	r2, r2, #8
 8011a6c:	619a      	str	r2, [r3, #24]
}
 8011a6e:	bf00      	nop
 8011a70:	37b0      	adds	r7, #176	@ 0xb0
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	40008000 	.word	0x40008000
 8011a7c:	080113ad 	.word	0x080113ad

08011a80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b0ae      	sub	sp, #184	@ 0xb8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011a8e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	69db      	ldr	r3, [r3, #28]
 8011a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	681b      	ldr	r3, [r3, #0]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	689b      	ldr	r3, [r3, #8]
 8011aac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ab6:	2b22      	cmp	r3, #34	@ 0x22
 8011ab8:	f040 8187 	bne.w	8011dca <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011ac2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ac6:	e12a      	b.n	8011d1e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	681b      	ldr	r3, [r3, #0]
 8011acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ace:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011ada:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011ade:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011ae2:	4013      	ands	r3, r2
 8011ae4:	b29a      	uxth	r2, r3
 8011ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011aea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011af0:	1c9a      	adds	r2, r3, #2
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011afc:	b29b      	uxth	r3, r3
 8011afe:	3b01      	subs	r3, #1
 8011b00:	b29a      	uxth	r2, r3
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	69db      	ldr	r3, [r3, #28]
 8011b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b16:	f003 0307 	and.w	r3, r3, #7
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d053      	beq.n	8011bc6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011b1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b22:	f003 0301 	and.w	r3, r3, #1
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d011      	beq.n	8011b4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8011b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011b32:	2b00      	cmp	r3, #0
 8011b34:	d00b      	beq.n	8011b4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	681b      	ldr	r3, [r3, #0]
 8011b3a:	2201      	movs	r2, #1
 8011b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b44:	f043 0201 	orr.w	r2, r3, #1
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b52:	f003 0302 	and.w	r3, r3, #2
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d011      	beq.n	8011b7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011b5e:	f003 0301 	and.w	r3, r3, #1
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d00b      	beq.n	8011b7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011b66:	687b      	ldr	r3, [r7, #4]
 8011b68:	681b      	ldr	r3, [r3, #0]
 8011b6a:	2202      	movs	r2, #2
 8011b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011b74:	f043 0204 	orr.w	r2, r3, #4
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011b82:	f003 0304 	and.w	r3, r3, #4
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d011      	beq.n	8011bae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011b8e:	f003 0301 	and.w	r3, r3, #1
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d00b      	beq.n	8011bae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	2204      	movs	r2, #4
 8011b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ba4:	f043 0202 	orr.w	r2, r3, #2
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d006      	beq.n	8011bc6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7fe fd5d 	bl	8010678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2200      	movs	r2, #0
 8011bc2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011bcc:	b29b      	uxth	r3, r3
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	f040 80a5 	bne.w	8011d1e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bda:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011bdc:	e853 3f00 	ldrex	r3, [r3]
 8011be0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011be2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011be4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011be8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	681b      	ldr	r3, [r3, #0]
 8011bf0:	461a      	mov	r2, r3
 8011bf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011bf6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011bfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bfc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011c02:	e841 2300 	strex	r3, r2, [r1]
 8011c06:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011c08:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d1e2      	bne.n	8011bd4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	3308      	adds	r3, #8
 8011c14:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c16:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011c18:	e853 3f00 	ldrex	r3, [r3]
 8011c1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011c20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011c24:	f023 0301 	bic.w	r3, r3, #1
 8011c28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011c2c:	687b      	ldr	r3, [r7, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	3308      	adds	r3, #8
 8011c32:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011c36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011c38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011c3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011c3e:	e841 2300 	strex	r3, r2, [r1]
 8011c42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d1e1      	bne.n	8011c0e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	2220      	movs	r2, #32
 8011c4e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	2200      	movs	r2, #0
 8011c56:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	4a60      	ldr	r2, [pc, #384]	@ (8011de4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011c64:	4293      	cmp	r3, r2
 8011c66:	d021      	beq.n	8011cac <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	681b      	ldr	r3, [r3, #0]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d01a      	beq.n	8011cac <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011c7e:	e853 3f00 	ldrex	r3, [r3]
 8011c82:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011c86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	461a      	mov	r2, r3
 8011c94:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011c98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011c9a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c9c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011c9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011ca0:	e841 2300 	strex	r3, r2, [r1]
 8011ca4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011ca6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d1e4      	bne.n	8011c76 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011cb0:	2b01      	cmp	r3, #1
 8011cb2:	d130      	bne.n	8011d16 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	2200      	movs	r2, #0
 8011cb8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011cc2:	e853 3f00 	ldrex	r3, [r3]
 8011cc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011cca:	f023 0310 	bic.w	r3, r3, #16
 8011cce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	681b      	ldr	r3, [r3, #0]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011cdc:	647b      	str	r3, [r7, #68]	@ 0x44
 8011cde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ce0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011ce4:	e841 2300 	strex	r3, r2, [r1]
 8011ce8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011cea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011cec:	2b00      	cmp	r3, #0
 8011cee:	d1e4      	bne.n	8011cba <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	69db      	ldr	r3, [r3, #28]
 8011cf6:	f003 0310 	and.w	r3, r3, #16
 8011cfa:	2b10      	cmp	r3, #16
 8011cfc:	d103      	bne.n	8011d06 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	2210      	movs	r2, #16
 8011d04:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7fe fcbc 	bl	801068c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8011d14:	e00e      	b.n	8011d34 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8011d16:	6878      	ldr	r0, [r7, #4]
 8011d18:	f7f6 f94e 	bl	8007fb8 <HAL_UART_RxCpltCallback>
        break;
 8011d1c:	e00a      	b.n	8011d34 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011d1e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d006      	beq.n	8011d34 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8011d26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011d2a:	f003 0320 	and.w	r3, r3, #32
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	f47f aeca 	bne.w	8011ac8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011d3a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011d3e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d049      	beq.n	8011dda <UART_RxISR_16BIT_FIFOEN+0x35a>
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011d4c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d242      	bcs.n	8011dda <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011d54:	687b      	ldr	r3, [r7, #4]
 8011d56:	681b      	ldr	r3, [r3, #0]
 8011d58:	3308      	adds	r3, #8
 8011d5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d5e:	e853 3f00 	ldrex	r3, [r3]
 8011d62:	623b      	str	r3, [r7, #32]
   return(result);
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011d6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	3308      	adds	r3, #8
 8011d74:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011d78:	633a      	str	r2, [r7, #48]	@ 0x30
 8011d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d7c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d80:	e841 2300 	strex	r3, r2, [r1]
 8011d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011d86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d1e3      	bne.n	8011d54 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	4a16      	ldr	r2, [pc, #88]	@ (8011de8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8011d90:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d98:	693b      	ldr	r3, [r7, #16]
 8011d9a:	e853 3f00 	ldrex	r3, [r3]
 8011d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	f043 0320 	orr.w	r3, r3, #32
 8011da6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	461a      	mov	r2, r3
 8011db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011db4:	61fb      	str	r3, [r7, #28]
 8011db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011db8:	69b9      	ldr	r1, [r7, #24]
 8011dba:	69fa      	ldr	r2, [r7, #28]
 8011dbc:	e841 2300 	strex	r3, r2, [r1]
 8011dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8011dc2:	697b      	ldr	r3, [r7, #20]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d1e4      	bne.n	8011d92 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011dc8:	e007      	b.n	8011dda <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011dca:	687b      	ldr	r3, [r7, #4]
 8011dcc:	681b      	ldr	r3, [r3, #0]
 8011dce:	699a      	ldr	r2, [r3, #24]
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	f042 0208 	orr.w	r2, r2, #8
 8011dd8:	619a      	str	r2, [r3, #24]
}
 8011dda:	bf00      	nop
 8011ddc:	37b8      	adds	r7, #184	@ 0xb8
 8011dde:	46bd      	mov	sp, r7
 8011de0:	bd80      	pop	{r7, pc}
 8011de2:	bf00      	nop
 8011de4:	40008000 	.word	0x40008000
 8011de8:	08011565 	.word	0x08011565

08011dec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011dec:	b480      	push	{r7}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011df4:	bf00      	nop
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfe:	4770      	bx	lr

08011e00 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011e08:	bf00      	nop
 8011e0a:	370c      	adds	r7, #12
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e12:	4770      	bx	lr

08011e14 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011e14:	b480      	push	{r7}
 8011e16:	b083      	sub	sp, #12
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011e1c:	bf00      	nop
 8011e1e:	370c      	adds	r7, #12
 8011e20:	46bd      	mov	sp, r7
 8011e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e26:	4770      	bx	lr

08011e28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b085      	sub	sp, #20
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d101      	bne.n	8011e3e <HAL_UARTEx_DisableFifoMode+0x16>
 8011e3a:	2302      	movs	r3, #2
 8011e3c:	e027      	b.n	8011e8e <HAL_UARTEx_DisableFifoMode+0x66>
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	2201      	movs	r2, #1
 8011e42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	2224      	movs	r2, #36	@ 0x24
 8011e4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	681b      	ldr	r3, [r3, #0]
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	681a      	ldr	r2, [r3, #0]
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	f022 0201 	bic.w	r2, r2, #1
 8011e64:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011e6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	2200      	movs	r2, #0
 8011e72:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68fa      	ldr	r2, [r7, #12]
 8011e7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	2220      	movs	r2, #32
 8011e80:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2200      	movs	r2, #0
 8011e88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011e8c:	2300      	movs	r3, #0
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3714      	adds	r7, #20
 8011e92:	46bd      	mov	sp, r7
 8011e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e98:	4770      	bx	lr

08011e9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b084      	sub	sp, #16
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
 8011ea2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d101      	bne.n	8011eb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011eae:	2302      	movs	r3, #2
 8011eb0:	e02d      	b.n	8011f0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	2201      	movs	r2, #1
 8011eb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	2224      	movs	r2, #36	@ 0x24
 8011ebe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681b      	ldr	r3, [r3, #0]
 8011ece:	681a      	ldr	r2, [r3, #0]
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	f022 0201 	bic.w	r2, r2, #1
 8011ed8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	689b      	ldr	r3, [r3, #8]
 8011ee0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	683a      	ldr	r2, [r7, #0]
 8011eea:	430a      	orrs	r2, r1
 8011eec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011eee:	6878      	ldr	r0, [r7, #4]
 8011ef0:	f000 f850 	bl	8011f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	68fa      	ldr	r2, [r7, #12]
 8011efa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	2220      	movs	r2, #32
 8011f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2200      	movs	r2, #0
 8011f08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3710      	adds	r7, #16
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b084      	sub	sp, #16
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	6078      	str	r0, [r7, #4]
 8011f1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d101      	bne.n	8011f2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8011f2a:	2302      	movs	r3, #2
 8011f2c:	e02d      	b.n	8011f8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2201      	movs	r2, #1
 8011f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2224      	movs	r2, #36	@ 0x24
 8011f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f022 0201 	bic.w	r2, r2, #1
 8011f54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	689b      	ldr	r3, [r3, #8]
 8011f5c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	681b      	ldr	r3, [r3, #0]
 8011f64:	683a      	ldr	r2, [r7, #0]
 8011f66:	430a      	orrs	r2, r1
 8011f68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011f6a:	6878      	ldr	r0, [r7, #4]
 8011f6c:	f000 f812 	bl	8011f94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	681b      	ldr	r3, [r3, #0]
 8011f74:	68fa      	ldr	r2, [r7, #12]
 8011f76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2220      	movs	r2, #32
 8011f7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	2200      	movs	r2, #0
 8011f84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f88:	2300      	movs	r3, #0
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
	...

08011f94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8011f94:	b480      	push	{r7}
 8011f96:	b085      	sub	sp, #20
 8011f98:	af00      	add	r7, sp, #0
 8011f9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d108      	bne.n	8011fb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	2201      	movs	r2, #1
 8011fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	2201      	movs	r2, #1
 8011fb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011fb4:	e031      	b.n	801201a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8011fb6:	2308      	movs	r3, #8
 8011fb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8011fba:	2308      	movs	r3, #8
 8011fbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	689b      	ldr	r3, [r3, #8]
 8011fc4:	0e5b      	lsrs	r3, r3, #25
 8011fc6:	b2db      	uxtb	r3, r3
 8011fc8:	f003 0307 	and.w	r3, r3, #7
 8011fcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	689b      	ldr	r3, [r3, #8]
 8011fd4:	0f5b      	lsrs	r3, r3, #29
 8011fd6:	b2db      	uxtb	r3, r3
 8011fd8:	f003 0307 	and.w	r3, r3, #7
 8011fdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011fde:	7bbb      	ldrb	r3, [r7, #14]
 8011fe0:	7b3a      	ldrb	r2, [r7, #12]
 8011fe2:	4911      	ldr	r1, [pc, #68]	@ (8012028 <UARTEx_SetNbDataToProcess+0x94>)
 8011fe4:	5c8a      	ldrb	r2, [r1, r2]
 8011fe6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8011fea:	7b3a      	ldrb	r2, [r7, #12]
 8011fec:	490f      	ldr	r1, [pc, #60]	@ (801202c <UARTEx_SetNbDataToProcess+0x98>)
 8011fee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8011ff0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011ff4:	b29a      	uxth	r2, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8011ffc:	7bfb      	ldrb	r3, [r7, #15]
 8011ffe:	7b7a      	ldrb	r2, [r7, #13]
 8012000:	4909      	ldr	r1, [pc, #36]	@ (8012028 <UARTEx_SetNbDataToProcess+0x94>)
 8012002:	5c8a      	ldrb	r2, [r1, r2]
 8012004:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012008:	7b7a      	ldrb	r2, [r7, #13]
 801200a:	4908      	ldr	r1, [pc, #32]	@ (801202c <UARTEx_SetNbDataToProcess+0x98>)
 801200c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801200e:	fb93 f3f2 	sdiv	r3, r3, r2
 8012012:	b29a      	uxth	r2, r3
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801201a:	bf00      	nop
 801201c:	3714      	adds	r7, #20
 801201e:	46bd      	mov	sp, r7
 8012020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	08018ab4 	.word	0x08018ab4
 801202c:	08018abc 	.word	0x08018abc

08012030 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b086      	sub	sp, #24
 8012034:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012036:	1d3b      	adds	r3, r7, #4
 8012038:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 801203a:	697b      	ldr	r3, [r7, #20]
 801203c:	2200      	movs	r2, #0
 801203e:	2100      	movs	r1, #0
 8012040:	f64f 4070 	movw	r0, #64624	@ 0xfc70
 8012044:	f000 f920 	bl	8012288 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012048:	697b      	ldr	r3, [r7, #20]
 801204a:	330b      	adds	r3, #11
 801204c:	78db      	ldrb	r3, [r3, #3]
}
 801204e:	4618      	mov	r0, r3
 8012050:	3718      	adds	r7, #24
 8012052:	46bd      	mov	sp, r7
 8012054:	bd80      	pop	{r7, pc}
	...

08012058 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8012058:	b480      	push	{r7}
 801205a:	b08b      	sub	sp, #44	@ 0x2c
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8012060:	2300      	movs	r3, #0
 8012062:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8012064:	2300      	movs	r3, #0
 8012066:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8012068:	2300      	movs	r3, #0
 801206a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 801206c:	2300      	movs	r3, #0
 801206e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8012070:	2300      	movs	r3, #0
 8012072:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8012074:	2300      	movs	r3, #0
 8012076:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8012078:	2300      	movs	r3, #0
 801207a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 801207c:	2300      	movs	r3, #0
 801207e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012080:	4b4a      	ldr	r3, [pc, #296]	@ (80121ac <SHCI_GetWirelessFwInfo+0x154>)
 8012082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012084:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012088:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801208a:	693b      	ldr	r3, [r7, #16]
 801208c:	009b      	lsls	r3, r3, #2
 801208e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8012092:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	4a44      	ldr	r2, [pc, #272]	@ (80121b0 <SHCI_GetWirelessFwInfo+0x158>)
 80120a0:	4293      	cmp	r3, r2
 80120a2:	d10f      	bne.n	80120c4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	695b      	ldr	r3, [r3, #20]
 80120a8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 80120aa:	68bb      	ldr	r3, [r7, #8]
 80120ac:	699b      	ldr	r3, [r3, #24]
 80120ae:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	69db      	ldr	r3, [r3, #28]
 80120b4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80120b6:	68bb      	ldr	r3, [r7, #8]
 80120b8:	68db      	ldr	r3, [r3, #12]
 80120ba:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80120bc:	68bb      	ldr	r3, [r7, #8]
 80120be:	691b      	ldr	r3, [r3, #16]
 80120c0:	617b      	str	r3, [r7, #20]
 80120c2:	e01a      	b.n	80120fa <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80120c4:	693b      	ldr	r3, [r7, #16]
 80120c6:	009b      	lsls	r3, r3, #2
 80120c8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80120cc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80120d0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	691b      	ldr	r3, [r3, #16]
 80120d8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	695b      	ldr	r3, [r3, #20]
 80120e0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80120e2:	68fb      	ldr	r3, [r7, #12]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	699b      	ldr	r3, [r3, #24]
 80120e8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	685b      	ldr	r3, [r3, #4]
 80120f0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	689b      	ldr	r3, [r3, #8]
 80120f8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80120fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120fc:	0e1b      	lsrs	r3, r3, #24
 80120fe:	b2da      	uxtb	r2, r3
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8012104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012106:	0c1b      	lsrs	r3, r3, #16
 8012108:	b2da      	uxtb	r2, r3
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 801210e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012110:	0a1b      	lsrs	r3, r3, #8
 8012112:	b2da      	uxtb	r2, r3
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211a:	091b      	lsrs	r3, r3, #4
 801211c:	b2db      	uxtb	r3, r3
 801211e:	f003 030f 	and.w	r3, r3, #15
 8012122:	b2da      	uxtb	r2, r3
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8012128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801212a:	b2db      	uxtb	r3, r3
 801212c:	f003 030f 	and.w	r3, r3, #15
 8012130:	b2da      	uxtb	r2, r3
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012136:	6a3b      	ldr	r3, [r7, #32]
 8012138:	0e1b      	lsrs	r3, r3, #24
 801213a:	b2da      	uxtb	r2, r3
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012140:	6a3b      	ldr	r3, [r7, #32]
 8012142:	0c1b      	lsrs	r3, r3, #16
 8012144:	b2da      	uxtb	r2, r3
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801214a:	6a3b      	ldr	r3, [r7, #32]
 801214c:	0a1b      	lsrs	r3, r3, #8
 801214e:	b2da      	uxtb	r2, r3
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012154:	6a3b      	ldr	r3, [r7, #32]
 8012156:	b2da      	uxtb	r2, r3
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 801215c:	69fb      	ldr	r3, [r7, #28]
 801215e:	b2da      	uxtb	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	0e1b      	lsrs	r3, r3, #24
 8012168:	b2da      	uxtb	r2, r3
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801216e:	69bb      	ldr	r3, [r7, #24]
 8012170:	0c1b      	lsrs	r3, r3, #16
 8012172:	b2da      	uxtb	r2, r3
 8012174:	687b      	ldr	r3, [r7, #4]
 8012176:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012178:	69bb      	ldr	r3, [r7, #24]
 801217a:	0a1b      	lsrs	r3, r3, #8
 801217c:	b2da      	uxtb	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	0e1b      	lsrs	r3, r3, #24
 8012186:	b2da      	uxtb	r2, r3
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	0c1b      	lsrs	r3, r3, #16
 8012190:	b2da      	uxtb	r2, r3
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012196:	697b      	ldr	r3, [r7, #20]
 8012198:	b2da      	uxtb	r2, r3
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801219e:	2300      	movs	r3, #0
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	372c      	adds	r7, #44	@ 0x2c
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr
 80121ac:	58004000 	.word	0x58004000
 80121b0:	a94656b9 	.word	0xa94656b9

080121b4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80121b4:	b580      	push	{r7, lr}
 80121b6:	b082      	sub	sp, #8
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	6078      	str	r0, [r7, #4]
 80121bc:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80121be:	683b      	ldr	r3, [r7, #0]
 80121c0:	685b      	ldr	r3, [r3, #4]
 80121c2:	4a08      	ldr	r2, [pc, #32]	@ (80121e4 <shci_init+0x30>)
 80121c4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80121c6:	4a08      	ldr	r2, [pc, #32]	@ (80121e8 <shci_init+0x34>)
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80121cc:	4806      	ldr	r0, [pc, #24]	@ (80121e8 <shci_init+0x34>)
 80121ce:	f000 f915 	bl	80123fc <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f000 f898 	bl	801230c <TlInit>

  return;
 80121dc:	bf00      	nop
}
 80121de:	3708      	adds	r7, #8
 80121e0:	46bd      	mov	sp, r7
 80121e2:	bd80      	pop	{r7, pc}
 80121e4:	200009c0 	.word	0x200009c0
 80121e8:	200009a0 	.word	0x200009a0

080121ec <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80121ec:	b580      	push	{r7, lr}
 80121ee:	b084      	sub	sp, #16
 80121f0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80121f2:	4822      	ldr	r0, [pc, #136]	@ (801227c <shci_user_evt_proc+0x90>)
 80121f4:	f000 fc64 	bl	8012ac0 <LST_is_empty>
 80121f8:	4603      	mov	r3, r0
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d12b      	bne.n	8012256 <shci_user_evt_proc+0x6a>
 80121fe:	4b20      	ldr	r3, [pc, #128]	@ (8012280 <shci_user_evt_proc+0x94>)
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d027      	beq.n	8012256 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8012206:	f107 030c 	add.w	r3, r7, #12
 801220a:	4619      	mov	r1, r3
 801220c:	481b      	ldr	r0, [pc, #108]	@ (801227c <shci_user_evt_proc+0x90>)
 801220e:	f000 fce6 	bl	8012bde <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8012212:	4b1c      	ldr	r3, [pc, #112]	@ (8012284 <shci_user_evt_proc+0x98>)
 8012214:	69db      	ldr	r3, [r3, #28]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d00c      	beq.n	8012234 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801221a:	68fb      	ldr	r3, [r7, #12]
 801221c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801221e:	2301      	movs	r3, #1
 8012220:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012222:	4b18      	ldr	r3, [pc, #96]	@ (8012284 <shci_user_evt_proc+0x98>)
 8012224:	69db      	ldr	r3, [r3, #28]
 8012226:	1d3a      	adds	r2, r7, #4
 8012228:	4610      	mov	r0, r2
 801222a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801222c:	793a      	ldrb	r2, [r7, #4]
 801222e:	4b14      	ldr	r3, [pc, #80]	@ (8012280 <shci_user_evt_proc+0x94>)
 8012230:	701a      	strb	r2, [r3, #0]
 8012232:	e002      	b.n	801223a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012234:	4b12      	ldr	r3, [pc, #72]	@ (8012280 <shci_user_evt_proc+0x94>)
 8012236:	2201      	movs	r2, #1
 8012238:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801223a:	4b11      	ldr	r3, [pc, #68]	@ (8012280 <shci_user_evt_proc+0x94>)
 801223c:	781b      	ldrb	r3, [r3, #0]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d004      	beq.n	801224c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8012242:	68fb      	ldr	r3, [r7, #12]
 8012244:	4618      	mov	r0, r3
 8012246:	f000 fa8b 	bl	8012760 <TL_MM_EvtDone>
 801224a:	e004      	b.n	8012256 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801224c:	68fb      	ldr	r3, [r7, #12]
 801224e:	4619      	mov	r1, r3
 8012250:	480a      	ldr	r0, [pc, #40]	@ (801227c <shci_user_evt_proc+0x90>)
 8012252:	f000 fc57 	bl	8012b04 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012256:	4809      	ldr	r0, [pc, #36]	@ (801227c <shci_user_evt_proc+0x90>)
 8012258:	f000 fc32 	bl	8012ac0 <LST_is_empty>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	d107      	bne.n	8012272 <shci_user_evt_proc+0x86>
 8012262:	4b07      	ldr	r3, [pc, #28]	@ (8012280 <shci_user_evt_proc+0x94>)
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	2b00      	cmp	r3, #0
 8012268:	d003      	beq.n	8012272 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801226a:	4804      	ldr	r0, [pc, #16]	@ (801227c <shci_user_evt_proc+0x90>)
 801226c:	f7f4 ff52 	bl	8007114 <shci_notify_asynch_evt>
  }


  return;
 8012270:	bf00      	nop
 8012272:	bf00      	nop
}
 8012274:	3710      	adds	r7, #16
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}
 801227a:	bf00      	nop
 801227c:	20000104 	.word	0x20000104
 8012280:	20000114 	.word	0x20000114
 8012284:	200009a0 	.word	0x200009a0

08012288 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8012288:	b580      	push	{r7, lr}
 801228a:	b084      	sub	sp, #16
 801228c:	af00      	add	r7, sp, #0
 801228e:	60ba      	str	r2, [r7, #8]
 8012290:	607b      	str	r3, [r7, #4]
 8012292:	4603      	mov	r3, r0
 8012294:	81fb      	strh	r3, [r7, #14]
 8012296:	460b      	mov	r3, r1
 8012298:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801229a:	2000      	movs	r0, #0
 801229c:	f000 f868 	bl	8012370 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 80122a0:	4b17      	ldr	r3, [pc, #92]	@ (8012300 <shci_send+0x78>)
 80122a2:	681b      	ldr	r3, [r3, #0]
 80122a4:	89fa      	ldrh	r2, [r7, #14]
 80122a6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 80122aa:	4b15      	ldr	r3, [pc, #84]	@ (8012300 <shci_send+0x78>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	7b7a      	ldrb	r2, [r7, #13]
 80122b0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80122b2:	4b13      	ldr	r3, [pc, #76]	@ (8012300 <shci_send+0x78>)
 80122b4:	681b      	ldr	r3, [r3, #0]
 80122b6:	330c      	adds	r3, #12
 80122b8:	7b7a      	ldrb	r2, [r7, #13]
 80122ba:	68b9      	ldr	r1, [r7, #8]
 80122bc:	4618      	mov	r0, r3
 80122be:	f004 feec 	bl	801709a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80122c2:	4b10      	ldr	r3, [pc, #64]	@ (8012304 <shci_send+0x7c>)
 80122c4:	2201      	movs	r2, #1
 80122c6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80122c8:	4b0f      	ldr	r3, [pc, #60]	@ (8012308 <shci_send+0x80>)
 80122ca:	691b      	ldr	r3, [r3, #16]
 80122cc:	2100      	movs	r1, #0
 80122ce:	2000      	movs	r0, #0
 80122d0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80122d2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80122d6:	f7f4 ff34 	bl	8007142 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	f103 0008 	add.w	r0, r3, #8
 80122e0:	4b07      	ldr	r3, [pc, #28]	@ (8012300 <shci_send+0x78>)
 80122e2:	6819      	ldr	r1, [r3, #0]
 80122e4:	4b06      	ldr	r3, [pc, #24]	@ (8012300 <shci_send+0x78>)
 80122e6:	681b      	ldr	r3, [r3, #0]
 80122e8:	789b      	ldrb	r3, [r3, #2]
 80122ea:	3303      	adds	r3, #3
 80122ec:	461a      	mov	r2, r3
 80122ee:	f004 fed4 	bl	801709a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80122f2:	2001      	movs	r0, #1
 80122f4:	f000 f83c 	bl	8012370 <Cmd_SetStatus>

  return;
 80122f8:	bf00      	nop
}
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	20000110 	.word	0x20000110
 8012304:	200009c4 	.word	0x200009c4
 8012308:	200009a0 	.word	0x200009a0

0801230c <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b086      	sub	sp, #24
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8012314:	4a10      	ldr	r2, [pc, #64]	@ (8012358 <TlInit+0x4c>)
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801231a:	4810      	ldr	r0, [pc, #64]	@ (801235c <TlInit+0x50>)
 801231c:	f000 fbc0 	bl	8012aa0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012320:	2001      	movs	r0, #1
 8012322:	f000 f825 	bl	8012370 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012326:	4b0e      	ldr	r3, [pc, #56]	@ (8012360 <TlInit+0x54>)
 8012328:	2201      	movs	r2, #1
 801232a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801232c:	4b0d      	ldr	r3, [pc, #52]	@ (8012364 <TlInit+0x58>)
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d00c      	beq.n	801234e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8012338:	4b0b      	ldr	r3, [pc, #44]	@ (8012368 <TlInit+0x5c>)
 801233a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801233c:	4b0b      	ldr	r3, [pc, #44]	@ (801236c <TlInit+0x60>)
 801233e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8012340:	4b08      	ldr	r3, [pc, #32]	@ (8012364 <TlInit+0x58>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	f107 020c 	add.w	r2, r7, #12
 8012348:	4610      	mov	r0, r2
 801234a:	4798      	blx	r3
  }

  return;
 801234c:	bf00      	nop
 801234e:	bf00      	nop
}
 8012350:	3718      	adds	r7, #24
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}
 8012356:	bf00      	nop
 8012358:	20000110 	.word	0x20000110
 801235c:	20000104 	.word	0x20000104
 8012360:	20000114 	.word	0x20000114
 8012364:	200009a0 	.word	0x200009a0
 8012368:	080123c1 	.word	0x080123c1
 801236c:	080123d9 	.word	0x080123d9

08012370 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	4603      	mov	r3, r0
 8012378:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801237a:	79fb      	ldrb	r3, [r7, #7]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d10b      	bne.n	8012398 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8012380:	4b0d      	ldr	r3, [pc, #52]	@ (80123b8 <Cmd_SetStatus+0x48>)
 8012382:	681b      	ldr	r3, [r3, #0]
 8012384:	2b00      	cmp	r3, #0
 8012386:	d003      	beq.n	8012390 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8012388:	4b0b      	ldr	r3, [pc, #44]	@ (80123b8 <Cmd_SetStatus+0x48>)
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	2000      	movs	r0, #0
 801238e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8012390:	4b0a      	ldr	r3, [pc, #40]	@ (80123bc <Cmd_SetStatus+0x4c>)
 8012392:	2200      	movs	r2, #0
 8012394:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8012396:	e00b      	b.n	80123b0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8012398:	4b08      	ldr	r3, [pc, #32]	@ (80123bc <Cmd_SetStatus+0x4c>)
 801239a:	2201      	movs	r2, #1
 801239c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801239e:	4b06      	ldr	r3, [pc, #24]	@ (80123b8 <Cmd_SetStatus+0x48>)
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d004      	beq.n	80123b0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 80123a6:	4b04      	ldr	r3, [pc, #16]	@ (80123b8 <Cmd_SetStatus+0x48>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	2001      	movs	r0, #1
 80123ac:	4798      	blx	r3
  return;
 80123ae:	bf00      	nop
 80123b0:	bf00      	nop
}
 80123b2:	3708      	adds	r7, #8
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}
 80123b8:	200009c0 	.word	0x200009c0
 80123bc:	2000010c 	.word	0x2000010c

080123c0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b082      	sub	sp, #8
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80123c8:	2000      	movs	r0, #0
 80123ca:	f7f4 feaf 	bl	800712c <shci_cmd_resp_release>

  return;
 80123ce:	bf00      	nop
}
 80123d0:	3708      	adds	r7, #8
 80123d2:	46bd      	mov	sp, r7
 80123d4:	bd80      	pop	{r7, pc}
	...

080123d8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80123d8:	b580      	push	{r7, lr}
 80123da:	b082      	sub	sp, #8
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80123e0:	6879      	ldr	r1, [r7, #4]
 80123e2:	4805      	ldr	r0, [pc, #20]	@ (80123f8 <TlUserEvtReceived+0x20>)
 80123e4:	f000 fbb4 	bl	8012b50 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80123e8:	4803      	ldr	r0, [pc, #12]	@ (80123f8 <TlUserEvtReceived+0x20>)
 80123ea:	f7f4 fe93 	bl	8007114 <shci_notify_asynch_evt>

  return;
 80123ee:	bf00      	nop
}
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	20000104 	.word	0x20000104

080123fc <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80123fc:	b480      	push	{r7}
 80123fe:	b083      	sub	sp, #12
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	4a05      	ldr	r2, [pc, #20]	@ (801241c <shci_register_io_bus+0x20>)
 8012408:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	4a04      	ldr	r2, [pc, #16]	@ (8012420 <shci_register_io_bus+0x24>)
 801240e:	611a      	str	r2, [r3, #16]

  return;
 8012410:	bf00      	nop
}
 8012412:	370c      	adds	r7, #12
 8012414:	46bd      	mov	sp, r7
 8012416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241a:	4770      	bx	lr
 801241c:	08012519 	.word	0x08012519
 8012420:	0801256d 	.word	0x0801256d

08012424 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8012428:	f7f7 fa92 	bl	8009950 <HW_IPCC_Enable>

  return;
 801242c:	bf00      	nop
}
 801242e:	bd80      	pop	{r7, pc}

08012430 <TL_Init>:


void TL_Init( void )
{
 8012430:	b580      	push	{r7, lr}
 8012432:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8012434:	4b10      	ldr	r3, [pc, #64]	@ (8012478 <TL_Init+0x48>)
 8012436:	4a11      	ldr	r2, [pc, #68]	@ (801247c <TL_Init+0x4c>)
 8012438:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801243a:	4b0f      	ldr	r3, [pc, #60]	@ (8012478 <TL_Init+0x48>)
 801243c:	4a10      	ldr	r2, [pc, #64]	@ (8012480 <TL_Init+0x50>)
 801243e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012440:	4b0d      	ldr	r3, [pc, #52]	@ (8012478 <TL_Init+0x48>)
 8012442:	4a10      	ldr	r2, [pc, #64]	@ (8012484 <TL_Init+0x54>)
 8012444:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8012446:	4b0c      	ldr	r3, [pc, #48]	@ (8012478 <TL_Init+0x48>)
 8012448:	4a0f      	ldr	r2, [pc, #60]	@ (8012488 <TL_Init+0x58>)
 801244a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801244c:	4b0a      	ldr	r3, [pc, #40]	@ (8012478 <TL_Init+0x48>)
 801244e:	4a0f      	ldr	r2, [pc, #60]	@ (801248c <TL_Init+0x5c>)
 8012450:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8012452:	4b09      	ldr	r3, [pc, #36]	@ (8012478 <TL_Init+0x48>)
 8012454:	4a0e      	ldr	r2, [pc, #56]	@ (8012490 <TL_Init+0x60>)
 8012456:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012458:	4b07      	ldr	r3, [pc, #28]	@ (8012478 <TL_Init+0x48>)
 801245a:	4a0e      	ldr	r2, [pc, #56]	@ (8012494 <TL_Init+0x64>)
 801245c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801245e:	4b06      	ldr	r3, [pc, #24]	@ (8012478 <TL_Init+0x48>)
 8012460:	4a0d      	ldr	r2, [pc, #52]	@ (8012498 <TL_Init+0x68>)
 8012462:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8012464:	4b04      	ldr	r3, [pc, #16]	@ (8012478 <TL_Init+0x48>)
 8012466:	4a0d      	ldr	r2, [pc, #52]	@ (801249c <TL_Init+0x6c>)
 8012468:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801246a:	4b03      	ldr	r3, [pc, #12]	@ (8012478 <TL_Init+0x48>)
 801246c:	4a0c      	ldr	r2, [pc, #48]	@ (80124a0 <TL_Init+0x70>)
 801246e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8012470:	f7f7 fa82 	bl	8009978 <HW_IPCC_Init>

  return;
 8012474:	bf00      	nop
}
 8012476:	bd80      	pop	{r7, pc}
 8012478:	20030000 	.word	0x20030000
 801247c:	20030034 	.word	0x20030034
 8012480:	20030054 	.word	0x20030054
 8012484:	20030064 	.word	0x20030064
 8012488:	20030074 	.word	0x20030074
 801248c:	2003007c 	.word	0x2003007c
 8012490:	20030084 	.word	0x20030084
 8012494:	2003008c 	.word	0x2003008c
 8012498:	200300a8 	.word	0x200300a8
 801249c:	200300ac 	.word	0x200300ac
 80124a0:	200300b8 	.word	0x200300b8

080124a4 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80124aa:	e01c      	b.n	80124e6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80124ac:	1d3b      	adds	r3, r7, #4
 80124ae:	4619      	mov	r1, r3
 80124b0:	4812      	ldr	r0, [pc, #72]	@ (80124fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80124b2:	f000 fb94 	bl	8012bde <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	7a5b      	ldrb	r3, [r3, #9]
 80124ba:	2b0f      	cmp	r3, #15
 80124bc:	d003      	beq.n	80124c6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	7a5b      	ldrb	r3, [r3, #9]
 80124c2:	2b0e      	cmp	r3, #14
 80124c4:	d105      	bne.n	80124d2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	4619      	mov	r1, r3
 80124ca:	2002      	movs	r0, #2
 80124cc:	f000 f9ac 	bl	8012828 <OutputDbgTrace>
 80124d0:	e004      	b.n	80124dc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	4619      	mov	r1, r3
 80124d6:	2003      	movs	r0, #3
 80124d8:	f000 f9a6 	bl	8012828 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80124dc:	4b08      	ldr	r3, [pc, #32]	@ (8012500 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	687a      	ldr	r2, [r7, #4]
 80124e2:	4610      	mov	r0, r2
 80124e4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80124e6:	4805      	ldr	r0, [pc, #20]	@ (80124fc <HW_IPCC_BLE_RxEvtNot+0x58>)
 80124e8:	f000 faea 	bl	8012ac0 <LST_is_empty>
 80124ec:	4603      	mov	r3, r0
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d0dc      	beq.n	80124ac <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80124f2:	bf00      	nop
}
 80124f4:	3708      	adds	r7, #8
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}
 80124fa:	bf00      	nop
 80124fc:	200300d4 	.word	0x200300d4
 8012500:	200009d0 	.word	0x200009d0

08012504 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8012504:	b580      	push	{r7, lr}
 8012506:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 8012508:	4b02      	ldr	r3, [pc, #8]	@ (8012514 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801250a:	681b      	ldr	r3, [r3, #0]
 801250c:	4798      	blx	r3

  return;
 801250e:	bf00      	nop
}
 8012510:	bd80      	pop	{r7, pc}
 8012512:	bf00      	nop
 8012514:	200009d4 	.word	0x200009d4

08012518 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b084      	sub	sp, #16
 801251c:	af00      	add	r7, sp, #0
 801251e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8012524:	480d      	ldr	r0, [pc, #52]	@ (801255c <TL_SYS_Init+0x44>)
 8012526:	f000 fabb 	bl	8012aa0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801252a:	4b0d      	ldr	r3, [pc, #52]	@ (8012560 <TL_SYS_Init+0x48>)
 801252c:	68db      	ldr	r3, [r3, #12]
 801252e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	689a      	ldr	r2, [r3, #8]
 8012534:	68bb      	ldr	r3, [r7, #8]
 8012536:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8012538:	68bb      	ldr	r3, [r7, #8]
 801253a:	4a08      	ldr	r2, [pc, #32]	@ (801255c <TL_SYS_Init+0x44>)
 801253c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801253e:	f7f7 fa49 	bl	80099d4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	681b      	ldr	r3, [r3, #0]
 8012546:	4a07      	ldr	r2, [pc, #28]	@ (8012564 <TL_SYS_Init+0x4c>)
 8012548:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801254a:	68fb      	ldr	r3, [r7, #12]
 801254c:	685b      	ldr	r3, [r3, #4]
 801254e:	4a06      	ldr	r2, [pc, #24]	@ (8012568 <TL_SYS_Init+0x50>)
 8012550:	6013      	str	r3, [r2, #0]

  return 0;
 8012552:	2300      	movs	r3, #0
}
 8012554:	4618      	mov	r0, r3
 8012556:	3710      	adds	r7, #16
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	200300dc 	.word	0x200300dc
 8012560:	20030000 	.word	0x20030000
 8012564:	200009d8 	.word	0x200009d8
 8012568:	200009dc 	.word	0x200009dc

0801256c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	460b      	mov	r3, r1
 8012576:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012578:	4b09      	ldr	r3, [pc, #36]	@ (80125a0 <TL_SYS_SendCmd+0x34>)
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	2210      	movs	r2, #16
 8012580:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8012582:	4b07      	ldr	r3, [pc, #28]	@ (80125a0 <TL_SYS_SendCmd+0x34>)
 8012584:	68db      	ldr	r3, [r3, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	4619      	mov	r1, r3
 801258a:	2004      	movs	r0, #4
 801258c:	f000 f94c 	bl	8012828 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8012590:	f7f7 fa2a 	bl	80099e8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8012594:	2300      	movs	r3, #0
}
 8012596:	4618      	mov	r0, r3
 8012598:	3708      	adds	r7, #8
 801259a:	46bd      	mov	sp, r7
 801259c:	bd80      	pop	{r7, pc}
 801259e:	bf00      	nop
 80125a0:	20030000 	.word	0x20030000

080125a4 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80125a4:	b580      	push	{r7, lr}
 80125a6:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80125a8:	4b07      	ldr	r3, [pc, #28]	@ (80125c8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80125aa:	68db      	ldr	r3, [r3, #12]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	4619      	mov	r1, r3
 80125b0:	2005      	movs	r0, #5
 80125b2:	f000 f939 	bl	8012828 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80125b6:	4b05      	ldr	r3, [pc, #20]	@ (80125cc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	4a03      	ldr	r2, [pc, #12]	@ (80125c8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80125bc:	68d2      	ldr	r2, [r2, #12]
 80125be:	6812      	ldr	r2, [r2, #0]
 80125c0:	4610      	mov	r0, r2
 80125c2:	4798      	blx	r3

  return;
 80125c4:	bf00      	nop
}
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	20030000 	.word	0x20030000
 80125cc:	200009d8 	.word	0x200009d8

080125d0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b082      	sub	sp, #8
 80125d4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80125d6:	e00e      	b.n	80125f6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80125d8:	1d3b      	adds	r3, r7, #4
 80125da:	4619      	mov	r1, r3
 80125dc:	480b      	ldr	r0, [pc, #44]	@ (801260c <HW_IPCC_SYS_EvtNot+0x3c>)
 80125de:	f000 fafe 	bl	8012bde <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	4619      	mov	r1, r3
 80125e6:	2006      	movs	r0, #6
 80125e8:	f000 f91e 	bl	8012828 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80125ec:	4b08      	ldr	r3, [pc, #32]	@ (8012610 <HW_IPCC_SYS_EvtNot+0x40>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	687a      	ldr	r2, [r7, #4]
 80125f2:	4610      	mov	r0, r2
 80125f4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80125f6:	4805      	ldr	r0, [pc, #20]	@ (801260c <HW_IPCC_SYS_EvtNot+0x3c>)
 80125f8:	f000 fa62 	bl	8012ac0 <LST_is_empty>
 80125fc:	4603      	mov	r3, r0
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d0ea      	beq.n	80125d8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8012602:	bf00      	nop
}
 8012604:	3708      	adds	r7, #8
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop
 801260c:	200300dc 	.word	0x200300dc
 8012610:	200009dc 	.word	0x200009dc

08012614 <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 801261c:	4b0a      	ldr	r3, [pc, #40]	@ (8012648 <TL_ZIGBEE_Init+0x34>)
 801261e:	69db      	ldr	r3, [r3, #28]
 8012620:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	681a      	ldr	r2, [r3, #0]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	685a      	ldr	r2, [r3, #4]
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	689a      	ldr	r2, [r3, #8]
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 801263a:	f7f7 f9fb 	bl	8009a34 <HW_IPCC_ZIGBEE_Init>

  return;
 801263e:	bf00      	nop
}
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	20030000 	.word	0x20030000

0801264c <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 801264c:	b580      	push	{r7, lr}
 801264e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8012650:	4b04      	ldr	r3, [pc, #16]	@ (8012664 <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 8012652:	69db      	ldr	r3, [r3, #28]
 8012654:	685b      	ldr	r3, [r3, #4]
 8012656:	2208      	movs	r2, #8
 8012658:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 801265a:	f7f7 f9f9 	bl	8009a50 <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 801265e:	bf00      	nop
}
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	20030000 	.word	0x20030000

08012668 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 801266c:	4b03      	ldr	r3, [pc, #12]	@ (801267c <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 801266e:	69db      	ldr	r3, [r3, #28]
 8012670:	685b      	ldr	r3, [r3, #4]
 8012672:	4618      	mov	r0, r3
 8012674:	f7f6 fdc6 	bl	8009204 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8012678:	bf00      	nop
}
 801267a:	bd80      	pop	{r7, pc}
 801267c:	20030000 	.word	0x20030000

08012680 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8012680:	b580      	push	{r7, lr}
 8012682:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8012684:	4b03      	ldr	r3, [pc, #12]	@ (8012694 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8012686:	69db      	ldr	r3, [r3, #28]
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	4618      	mov	r0, r3
 801268c:	f7f6 fdc4 	bl	8009218 <TL_ZIGBEE_NotReceived>

  return;
 8012690:	bf00      	nop
}
 8012692:	bd80      	pop	{r7, pc}
 8012694:	20030000 	.word	0x20030000

08012698 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 8012698:	b580      	push	{r7, lr}
 801269a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 801269c:	4b04      	ldr	r3, [pc, #16]	@ (80126b0 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 801269e:	69db      	ldr	r3, [r3, #28]
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	220d      	movs	r2, #13
 80126a4:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 80126a6:	f7f7 f9e1 	bl	8009a6c <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 80126aa:	bf00      	nop
}
 80126ac:	bd80      	pop	{r7, pc}
 80126ae:	bf00      	nop
 80126b0:	20030000 	.word	0x20030000

080126b4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 80126b8:	4b03      	ldr	r3, [pc, #12]	@ (80126c8 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 80126ba:	69db      	ldr	r3, [r3, #28]
 80126bc:	689b      	ldr	r3, [r3, #8]
 80126be:	4618      	mov	r0, r3
 80126c0:	f7f6 fde0 	bl	8009284 <TL_ZIGBEE_M0RequestReceived>

  return;
 80126c4:	bf00      	nop
}
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	20030000 	.word	0x20030000

080126cc <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80126d0:	4b04      	ldr	r3, [pc, #16]	@ (80126e4 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 80126d2:	69db      	ldr	r3, [r3, #28]
 80126d4:	689b      	ldr	r3, [r3, #8]
 80126d6:	220d      	movs	r2, #13
 80126d8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 80126da:	f7f7 f9f9 	bl	8009ad0 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 80126de:	bf00      	nop
}
 80126e0:	bd80      	pop	{r7, pc}
 80126e2:	bf00      	nop
 80126e4:	20030000 	.word	0x20030000

080126e8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80126e8:	b580      	push	{r7, lr}
 80126ea:	b082      	sub	sp, #8
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80126f0:	4817      	ldr	r0, [pc, #92]	@ (8012750 <TL_MM_Init+0x68>)
 80126f2:	f000 f9d5 	bl	8012aa0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80126f6:	4817      	ldr	r0, [pc, #92]	@ (8012754 <TL_MM_Init+0x6c>)
 80126f8:	f000 f9d2 	bl	8012aa0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80126fc:	4b16      	ldr	r3, [pc, #88]	@ (8012758 <TL_MM_Init+0x70>)
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	4a16      	ldr	r2, [pc, #88]	@ (801275c <TL_MM_Init+0x74>)
 8012702:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8012704:	4b15      	ldr	r3, [pc, #84]	@ (801275c <TL_MM_Init+0x74>)
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	687a      	ldr	r2, [r7, #4]
 801270a:	6892      	ldr	r2, [r2, #8]
 801270c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801270e:	4b13      	ldr	r3, [pc, #76]	@ (801275c <TL_MM_Init+0x74>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	687a      	ldr	r2, [r7, #4]
 8012714:	68d2      	ldr	r2, [r2, #12]
 8012716:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8012718:	4b10      	ldr	r3, [pc, #64]	@ (801275c <TL_MM_Init+0x74>)
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4a0c      	ldr	r2, [pc, #48]	@ (8012750 <TL_MM_Init+0x68>)
 801271e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8012720:	4b0e      	ldr	r3, [pc, #56]	@ (801275c <TL_MM_Init+0x74>)
 8012722:	681b      	ldr	r3, [r3, #0]
 8012724:	687a      	ldr	r2, [r7, #4]
 8012726:	6812      	ldr	r2, [r2, #0]
 8012728:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801272a:	4b0c      	ldr	r3, [pc, #48]	@ (801275c <TL_MM_Init+0x74>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	687a      	ldr	r2, [r7, #4]
 8012730:	6852      	ldr	r2, [r2, #4]
 8012732:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8012734:	4b09      	ldr	r3, [pc, #36]	@ (801275c <TL_MM_Init+0x74>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	687a      	ldr	r2, [r7, #4]
 801273a:	6912      	ldr	r2, [r2, #16]
 801273c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801273e:	4b07      	ldr	r3, [pc, #28]	@ (801275c <TL_MM_Init+0x74>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	687a      	ldr	r2, [r7, #4]
 8012744:	6952      	ldr	r2, [r2, #20]
 8012746:	619a      	str	r2, [r3, #24]

  return;
 8012748:	bf00      	nop
}
 801274a:	3708      	adds	r7, #8
 801274c:	46bd      	mov	sp, r7
 801274e:	bd80      	pop	{r7, pc}
 8012750:	200300c4 	.word	0x200300c4
 8012754:	200009c8 	.word	0x200009c8
 8012758:	20030000 	.word	0x20030000
 801275c:	200009e0 	.word	0x200009e0

08012760 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012760:	b580      	push	{r7, lr}
 8012762:	b082      	sub	sp, #8
 8012764:	af00      	add	r7, sp, #0
 8012766:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8012768:	6879      	ldr	r1, [r7, #4]
 801276a:	4807      	ldr	r0, [pc, #28]	@ (8012788 <TL_MM_EvtDone+0x28>)
 801276c:	f000 f9f0 	bl	8012b50 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8012770:	6879      	ldr	r1, [r7, #4]
 8012772:	2000      	movs	r0, #0
 8012774:	f000 f858 	bl	8012828 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8012778:	4804      	ldr	r0, [pc, #16]	@ (801278c <TL_MM_EvtDone+0x2c>)
 801277a:	f7f7 f9b7 	bl	8009aec <HW_IPCC_MM_SendFreeBuf>

  return;
 801277e:	bf00      	nop
}
 8012780:	3708      	adds	r7, #8
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	200009c8 	.word	0x200009c8
 801278c:	08012791 	.word	0x08012791

08012790 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012796:	e00c      	b.n	80127b2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8012798:	1d3b      	adds	r3, r7, #4
 801279a:	4619      	mov	r1, r3
 801279c:	480a      	ldr	r0, [pc, #40]	@ (80127c8 <SendFreeBuf+0x38>)
 801279e:	f000 fa1e 	bl	8012bde <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 80127a2:	4b0a      	ldr	r3, [pc, #40]	@ (80127cc <SendFreeBuf+0x3c>)
 80127a4:	691b      	ldr	r3, [r3, #16]
 80127a6:	691b      	ldr	r3, [r3, #16]
 80127a8:	687a      	ldr	r2, [r7, #4]
 80127aa:	4611      	mov	r1, r2
 80127ac:	4618      	mov	r0, r3
 80127ae:	f000 f9cf 	bl	8012b50 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80127b2:	4805      	ldr	r0, [pc, #20]	@ (80127c8 <SendFreeBuf+0x38>)
 80127b4:	f000 f984 	bl	8012ac0 <LST_is_empty>
 80127b8:	4603      	mov	r3, r0
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d0ec      	beq.n	8012798 <SendFreeBuf+0x8>
  }

  return;
 80127be:	bf00      	nop
}
 80127c0:	3708      	adds	r7, #8
 80127c2:	46bd      	mov	sp, r7
 80127c4:	bd80      	pop	{r7, pc}
 80127c6:	bf00      	nop
 80127c8:	200009c8 	.word	0x200009c8
 80127cc:	20030000 	.word	0x20030000

080127d0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80127d0:	b580      	push	{r7, lr}
 80127d2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80127d4:	4805      	ldr	r0, [pc, #20]	@ (80127ec <TL_TRACES_Init+0x1c>)
 80127d6:	f000 f963 	bl	8012aa0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80127da:	4b05      	ldr	r3, [pc, #20]	@ (80127f0 <TL_TRACES_Init+0x20>)
 80127dc:	695b      	ldr	r3, [r3, #20]
 80127de:	4a03      	ldr	r2, [pc, #12]	@ (80127ec <TL_TRACES_Init+0x1c>)
 80127e0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80127e2:	f7f7 f9b9 	bl	8009b58 <HW_IPCC_TRACES_Init>

  return;
 80127e6:	bf00      	nop
}
 80127e8:	bd80      	pop	{r7, pc}
 80127ea:	bf00      	nop
 80127ec:	200300cc 	.word	0x200300cc
 80127f0:	20030000 	.word	0x20030000

080127f4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80127f4:	b580      	push	{r7, lr}
 80127f6:	b082      	sub	sp, #8
 80127f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80127fa:	e008      	b.n	801280e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80127fc:	1d3b      	adds	r3, r7, #4
 80127fe:	4619      	mov	r1, r3
 8012800:	4808      	ldr	r0, [pc, #32]	@ (8012824 <HW_IPCC_TRACES_EvtNot+0x30>)
 8012802:	f000 f9ec 	bl	8012bde <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	4618      	mov	r0, r3
 801280a:	f7f4 fca5 	bl	8007158 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801280e:	4805      	ldr	r0, [pc, #20]	@ (8012824 <HW_IPCC_TRACES_EvtNot+0x30>)
 8012810:	f000 f956 	bl	8012ac0 <LST_is_empty>
 8012814:	4603      	mov	r3, r0
 8012816:	2b00      	cmp	r3, #0
 8012818:	d0f0      	beq.n	80127fc <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801281a:	bf00      	nop
}
 801281c:	3708      	adds	r7, #8
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
 8012822:	bf00      	nop
 8012824:	200300cc 	.word	0x200300cc

08012828 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8012828:	b480      	push	{r7}
 801282a:	b087      	sub	sp, #28
 801282c:	af00      	add	r7, sp, #0
 801282e:	4603      	mov	r3, r0
 8012830:	6039      	str	r1, [r7, #0]
 8012832:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8012834:	79fb      	ldrb	r3, [r7, #7]
 8012836:	2b06      	cmp	r3, #6
 8012838:	d845      	bhi.n	80128c6 <OutputDbgTrace+0x9e>
 801283a:	a201      	add	r2, pc, #4	@ (adr r2, 8012840 <OutputDbgTrace+0x18>)
 801283c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012840:	0801285d 	.word	0x0801285d
 8012844:	08012881 	.word	0x08012881
 8012848:	08012887 	.word	0x08012887
 801284c:	0801289b 	.word	0x0801289b
 8012850:	080128a7 	.word	0x080128a7
 8012854:	080128ad 	.word	0x080128ad
 8012858:	080128bb 	.word	0x080128bb
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801285c:	683b      	ldr	r3, [r7, #0]
 801285e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012860:	697b      	ldr	r3, [r7, #20]
 8012862:	7a5b      	ldrb	r3, [r3, #9]
 8012864:	2bff      	cmp	r3, #255	@ 0xff
 8012866:	d005      	beq.n	8012874 <OutputDbgTrace+0x4c>
 8012868:	2bff      	cmp	r3, #255	@ 0xff
 801286a:	dc05      	bgt.n	8012878 <OutputDbgTrace+0x50>
 801286c:	2b0e      	cmp	r3, #14
 801286e:	d005      	beq.n	801287c <OutputDbgTrace+0x54>
 8012870:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8012872:	e001      	b.n	8012878 <OutputDbgTrace+0x50>
          break;
 8012874:	bf00      	nop
 8012876:	e027      	b.n	80128c8 <OutputDbgTrace+0xa0>
          break;
 8012878:	bf00      	nop
 801287a:	e025      	b.n	80128c8 <OutputDbgTrace+0xa0>
          break;
 801287c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801287e:	e023      	b.n	80128c8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012880:	683b      	ldr	r3, [r7, #0]
 8012882:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8012884:	e020      	b.n	80128c8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012886:	683b      	ldr	r3, [r7, #0]
 8012888:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801288a:	697b      	ldr	r3, [r7, #20]
 801288c:	7a5b      	ldrb	r3, [r3, #9]
 801288e:	2b0e      	cmp	r3, #14
 8012890:	d001      	beq.n	8012896 <OutputDbgTrace+0x6e>
 8012892:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012894:	e000      	b.n	8012898 <OutputDbgTrace+0x70>
          break;
 8012896:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012898:	e016      	b.n	80128c8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801289a:	683b      	ldr	r3, [r7, #0]
 801289c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	7a5b      	ldrb	r3, [r3, #9]
 80128a2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80128a4:	e010      	b.n	80128c8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 80128a6:	683b      	ldr	r3, [r7, #0]
 80128a8:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 80128aa:	e00d      	b.n	80128c8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 80128ac:	683b      	ldr	r3, [r7, #0]
 80128ae:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	785b      	ldrb	r3, [r3, #1]
 80128b4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 80128b6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 80128b8:	e006      	b.n	80128c8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80128ba:	683b      	ldr	r3, [r7, #0]
 80128bc:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	7a5b      	ldrb	r3, [r3, #9]
 80128c2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80128c4:	e000      	b.n	80128c8 <OutputDbgTrace+0xa0>

    default:
      break;
 80128c6:	bf00      	nop
  }

  return;
 80128c8:	bf00      	nop
}
 80128ca:	371c      	adds	r7, #28
 80128cc:	46bd      	mov	sp, r7
 80128ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128d2:	4770      	bx	lr

080128d4 <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 80128d4:	b480      	push	{r7}
 80128d6:	af00      	add	r7, sp, #0
 80128d8:	bf00      	nop
 80128da:	46bd      	mov	sp, r7
 80128dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e0:	4770      	bx	lr
	...

080128e4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b086      	sub	sp, #24
 80128e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80128ea:	f3ef 8310 	mrs	r3, PRIMASK
 80128ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80128f0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80128f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80128f4:	b672      	cpsid	i
}
 80128f6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80128f8:	1cbb      	adds	r3, r7, #2
 80128fa:	4619      	mov	r1, r3
 80128fc:	4812      	ldr	r0, [pc, #72]	@ (8012948 <DbgTrace_TxCpltCallback+0x64>)
 80128fe:	f000 fbe5 	bl	80130cc <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8012902:	1cbb      	adds	r3, r7, #2
 8012904:	4619      	mov	r1, r3
 8012906:	4810      	ldr	r0, [pc, #64]	@ (8012948 <DbgTrace_TxCpltCallback+0x64>)
 8012908:	f000 fccf 	bl	80132aa <CircularQueue_Sense>
 801290c:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d00c      	beq.n	801292e <DbgTrace_TxCpltCallback+0x4a>
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012918:	68bb      	ldr	r3, [r7, #8]
 801291a:	f383 8810 	msr	PRIMASK, r3
}
 801291e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8012920:	887b      	ldrh	r3, [r7, #2]
 8012922:	4a0a      	ldr	r2, [pc, #40]	@ (801294c <DbgTrace_TxCpltCallback+0x68>)
 8012924:	4619      	mov	r1, r3
 8012926:	6938      	ldr	r0, [r7, #16]
 8012928:	f7f4 fc31 	bl	800718e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 801292c:	e008      	b.n	8012940 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 801292e:	4b08      	ldr	r3, [pc, #32]	@ (8012950 <DbgTrace_TxCpltCallback+0x6c>)
 8012930:	2201      	movs	r2, #1
 8012932:	701a      	strb	r2, [r3, #0]
 8012934:	697b      	ldr	r3, [r7, #20]
 8012936:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	f383 8810 	msr	PRIMASK, r3
}
 801293e:	bf00      	nop
}
 8012940:	bf00      	nop
 8012942:	3718      	adds	r7, #24
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}
 8012948:	200009e4 	.word	0x200009e4
 801294c:	080128e5 	.word	0x080128e5
 8012950:	20000091 	.word	0x20000091

08012954 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b082      	sub	sp, #8
 8012958:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 801295a:	f7f4 fc12 	bl	8007182 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 801295e:	2302      	movs	r3, #2
 8012960:	9300      	str	r3, [sp, #0]
 8012962:	2300      	movs	r3, #0
 8012964:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012968:	4903      	ldr	r1, [pc, #12]	@ (8012978 <DbgTraceInit+0x24>)
 801296a:	4804      	ldr	r0, [pc, #16]	@ (801297c <DbgTraceInit+0x28>)
 801296c:	f000 f956 	bl	8012c1c <CircularQueue_Init>
#endif 
#endif
  return;
 8012970:	bf00      	nop
}
 8012972:	46bd      	mov	sp, r7
 8012974:	bd80      	pop	{r7, pc}
 8012976:	bf00      	nop
 8012978:	20000a04 	.word	0x20000a04
 801297c:	200009e4 	.word	0x200009e4

08012980 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b084      	sub	sp, #16
 8012984:	af00      	add	r7, sp, #0
 8012986:	60f8      	str	r0, [r7, #12]
 8012988:	60b9      	str	r1, [r7, #8]
 801298a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 801298c:	687a      	ldr	r2, [r7, #4]
 801298e:	68b9      	ldr	r1, [r7, #8]
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f000 f805 	bl	80129a0 <DbgTraceWrite>
 8012996:	4603      	mov	r3, r0
}
 8012998:	4618      	mov	r0, r3
 801299a:	3710      	adds	r7, #16
 801299c:	46bd      	mov	sp, r7
 801299e:	bd80      	pop	{r7, pc}

080129a0 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 80129a0:	b580      	push	{r7, lr}
 80129a2:	b08a      	sub	sp, #40	@ 0x28
 80129a4:	af00      	add	r7, sp, #0
 80129a6:	60f8      	str	r0, [r7, #12]
 80129a8:	60b9      	str	r1, [r7, #8]
 80129aa:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 80129ac:	2300      	movs	r3, #0
 80129ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129b0:	f3ef 8310 	mrs	r3, PRIMASK
 80129b4:	61bb      	str	r3, [r7, #24]
  return(result);
 80129b6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 80129b8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80129c0:	d102      	bne.n	80129c8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 80129c2:	2300      	movs	r3, #0
 80129c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80129c6:	e037      	b.n	8012a38 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	2b01      	cmp	r3, #1
 80129cc:	d006      	beq.n	80129dc <DbgTraceWrite+0x3c>
 80129ce:	68fb      	ldr	r3, [r7, #12]
 80129d0:	2b02      	cmp	r3, #2
 80129d2:	d003      	beq.n	80129dc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 80129d4:	f04f 33ff 	mov.w	r3, #4294967295
 80129d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80129da:	e02d      	b.n	8012a38 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d02a      	beq.n	8012a38 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80129e6:	b672      	cpsid	i
}
 80129e8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	b29a      	uxth	r2, r3
 80129ee:	2301      	movs	r3, #1
 80129f0:	68b9      	ldr	r1, [r7, #8]
 80129f2:	4814      	ldr	r0, [pc, #80]	@ (8012a44 <DbgTraceWrite+0xa4>)
 80129f4:	f000 f944 	bl	8012c80 <CircularQueue_Add>
 80129f8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 80129fa:	69fb      	ldr	r3, [r7, #28]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d015      	beq.n	8012a2c <DbgTraceWrite+0x8c>
 8012a00:	4b11      	ldr	r3, [pc, #68]	@ (8012a48 <DbgTraceWrite+0xa8>)
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d010      	beq.n	8012a2c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8012a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8012a48 <DbgTraceWrite+0xa8>)
 8012a0c:	2200      	movs	r2, #0
 8012a0e:	701a      	strb	r2, [r3, #0]
 8012a10:	6a3b      	ldr	r3, [r7, #32]
 8012a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a14:	697b      	ldr	r3, [r7, #20]
 8012a16:	f383 8810 	msr	PRIMASK, r3
}
 8012a1a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	b29b      	uxth	r3, r3
 8012a20:	4a0a      	ldr	r2, [pc, #40]	@ (8012a4c <DbgTraceWrite+0xac>)
 8012a22:	4619      	mov	r1, r3
 8012a24:	69f8      	ldr	r0, [r7, #28]
 8012a26:	f7f4 fbb2 	bl	800718e <DbgOutputTraces>
 8012a2a:	e005      	b.n	8012a38 <DbgTraceWrite+0x98>
 8012a2c:	6a3b      	ldr	r3, [r7, #32]
 8012a2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	f383 8810 	msr	PRIMASK, r3
}
 8012a36:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8012a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3728      	adds	r7, #40	@ 0x28
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	200009e4 	.word	0x200009e4
 8012a48:	20000091 	.word	0x20000091
 8012a4c:	080128e5 	.word	0x080128e5

08012a50 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8012a50:	b480      	push	{r7}
 8012a52:	b085      	sub	sp, #20
 8012a54:	af00      	add	r7, sp, #0
 8012a56:	4603      	mov	r3, r0
 8012a58:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8012a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8012a98 <OTP_Read+0x48>)
 8012a5c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012a5e:	e002      	b.n	8012a66 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	3b08      	subs	r3, #8
 8012a64:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	3307      	adds	r3, #7
 8012a6a:	781b      	ldrb	r3, [r3, #0]
 8012a6c:	79fa      	ldrb	r2, [r7, #7]
 8012a6e:	429a      	cmp	r2, r3
 8012a70:	d003      	beq.n	8012a7a <OTP_Read+0x2a>
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	4a09      	ldr	r2, [pc, #36]	@ (8012a9c <OTP_Read+0x4c>)
 8012a76:	4293      	cmp	r3, r2
 8012a78:	d1f2      	bne.n	8012a60 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	3307      	adds	r3, #7
 8012a7e:	781b      	ldrb	r3, [r3, #0]
 8012a80:	79fa      	ldrb	r2, [r7, #7]
 8012a82:	429a      	cmp	r2, r3
 8012a84:	d001      	beq.n	8012a8a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8012a86:	2300      	movs	r3, #0
 8012a88:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8012a8a:	68fb      	ldr	r3, [r7, #12]
}
 8012a8c:	4618      	mov	r0, r3
 8012a8e:	3714      	adds	r7, #20
 8012a90:	46bd      	mov	sp, r7
 8012a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a96:	4770      	bx	lr
 8012a98:	1fff73f8 	.word	0x1fff73f8
 8012a9c:	1fff7000 	.word	0x1fff7000

08012aa0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8012aa0:	b480      	push	{r7}
 8012aa2:	b083      	sub	sp, #12
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	687a      	ldr	r2, [r7, #4]
 8012aac:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	687a      	ldr	r2, [r7, #4]
 8012ab2:	605a      	str	r2, [r3, #4]
}
 8012ab4:	bf00      	nop
 8012ab6:	370c      	adds	r7, #12
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012abe:	4770      	bx	lr

08012ac0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8012ac0:	b480      	push	{r7}
 8012ac2:	b087      	sub	sp, #28
 8012ac4:	af00      	add	r7, sp, #0
 8012ac6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8012acc:	60fb      	str	r3, [r7, #12]
  return(result);
 8012ace:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012ad2:	b672      	cpsid	i
}
 8012ad4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	681b      	ldr	r3, [r3, #0]
 8012ada:	687a      	ldr	r2, [r7, #4]
 8012adc:	429a      	cmp	r2, r3
 8012ade:	d102      	bne.n	8012ae6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8012ae0:	2301      	movs	r3, #1
 8012ae2:	75fb      	strb	r3, [r7, #23]
 8012ae4:	e001      	b.n	8012aea <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	75fb      	strb	r3, [r7, #23]
 8012aea:	693b      	ldr	r3, [r7, #16]
 8012aec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	f383 8810 	msr	PRIMASK, r3
}
 8012af4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8012af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012af8:	4618      	mov	r0, r3
 8012afa:	371c      	adds	r7, #28
 8012afc:	46bd      	mov	sp, r7
 8012afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b02:	4770      	bx	lr

08012b04 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012b04:	b480      	push	{r7}
 8012b06:	b087      	sub	sp, #28
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
 8012b0c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b0e:	f3ef 8310 	mrs	r3, PRIMASK
 8012b12:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b14:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012b16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012b18:	b672      	cpsid	i
}
 8012b1a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681a      	ldr	r2, [r3, #0]
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	687a      	ldr	r2, [r7, #4]
 8012b28:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	683a      	ldr	r2, [r7, #0]
 8012b2e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	683a      	ldr	r2, [r7, #0]
 8012b36:	605a      	str	r2, [r3, #4]
 8012b38:	697b      	ldr	r3, [r7, #20]
 8012b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	f383 8810 	msr	PRIMASK, r3
}
 8012b42:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012b44:	bf00      	nop
 8012b46:	371c      	adds	r7, #28
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr

08012b50 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8012b50:	b480      	push	{r7}
 8012b52:	b087      	sub	sp, #28
 8012b54:	af00      	add	r7, sp, #0
 8012b56:	6078      	str	r0, [r7, #4]
 8012b58:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8012b5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b60:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012b62:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012b64:	b672      	cpsid	i
}
 8012b66:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	687a      	ldr	r2, [r7, #4]
 8012b6c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	685a      	ldr	r2, [r3, #4]
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	683a      	ldr	r2, [r7, #0]
 8012b7a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012b7c:	683b      	ldr	r3, [r7, #0]
 8012b7e:	685b      	ldr	r3, [r3, #4]
 8012b80:	683a      	ldr	r2, [r7, #0]
 8012b82:	601a      	str	r2, [r3, #0]
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	f383 8810 	msr	PRIMASK, r3
}
 8012b8e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012b90:	bf00      	nop
 8012b92:	371c      	adds	r7, #28
 8012b94:	46bd      	mov	sp, r7
 8012b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b9a:	4770      	bx	lr

08012b9c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b087      	sub	sp, #28
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012ba4:	f3ef 8310 	mrs	r3, PRIMASK
 8012ba8:	60fb      	str	r3, [r7, #12]
  return(result);
 8012baa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012bac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012bae:	b672      	cpsid	i
}
 8012bb0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	685b      	ldr	r3, [r3, #4]
 8012bb6:	687a      	ldr	r2, [r7, #4]
 8012bb8:	6812      	ldr	r2, [r2, #0]
 8012bba:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	687a      	ldr	r2, [r7, #4]
 8012bc2:	6852      	ldr	r2, [r2, #4]
 8012bc4:	605a      	str	r2, [r3, #4]
 8012bc6:	697b      	ldr	r3, [r7, #20]
 8012bc8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bca:	693b      	ldr	r3, [r7, #16]
 8012bcc:	f383 8810 	msr	PRIMASK, r3
}
 8012bd0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012bd2:	bf00      	nop
 8012bd4:	371c      	adds	r7, #28
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bdc:	4770      	bx	lr

08012bde <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8012bde:	b580      	push	{r7, lr}
 8012be0:	b086      	sub	sp, #24
 8012be2:	af00      	add	r7, sp, #0
 8012be4:	6078      	str	r0, [r7, #4]
 8012be6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012be8:	f3ef 8310 	mrs	r3, PRIMASK
 8012bec:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bee:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012bf0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012bf2:	b672      	cpsid	i
}
 8012bf4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8012bf6:	687b      	ldr	r3, [r7, #4]
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	681b      	ldr	r3, [r3, #0]
 8012c02:	4618      	mov	r0, r3
 8012c04:	f7ff ffca 	bl	8012b9c <LST_remove_node>
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c0c:	693b      	ldr	r3, [r7, #16]
 8012c0e:	f383 8810 	msr	PRIMASK, r3
}
 8012c12:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012c14:	bf00      	nop
 8012c16:	3718      	adds	r7, #24
 8012c18:	46bd      	mov	sp, r7
 8012c1a:	bd80      	pop	{r7, pc}

08012c1c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8012c1c:	b480      	push	{r7}
 8012c1e:	b085      	sub	sp, #20
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	607a      	str	r2, [r7, #4]
 8012c28:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	68ba      	ldr	r2, [r7, #8]
 8012c2e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	2200      	movs	r2, #0
 8012c34:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	2200      	movs	r2, #0
 8012c3a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8012c42:	68fb      	ldr	r3, [r7, #12]
 8012c44:	2200      	movs	r2, #0
 8012c46:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8012c48:	68fb      	ldr	r3, [r7, #12]
 8012c4a:	687a      	ldr	r2, [r7, #4]
 8012c4c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	887a      	ldrh	r2, [r7, #2]
 8012c52:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	7e3a      	ldrb	r2, [r7, #24]
 8012c58:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8012c5a:	7e3b      	ldrb	r3, [r7, #24]
 8012c5c:	f003 0302 	and.w	r3, r3, #2
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d006      	beq.n	8012c72 <CircularQueue_Init+0x56>
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	891b      	ldrh	r3, [r3, #8]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d002      	beq.n	8012c72 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8012c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8012c70:	e000      	b.n	8012c74 <CircularQueue_Init+0x58>
  }
  return 0;
 8012c72:	2300      	movs	r3, #0
}
 8012c74:	4618      	mov	r0, r3
 8012c76:	3714      	adds	r7, #20
 8012c78:	46bd      	mov	sp, r7
 8012c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7e:	4770      	bx	lr

08012c80 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8012c80:	b580      	push	{r7, lr}
 8012c82:	b08e      	sub	sp, #56	@ 0x38
 8012c84:	af00      	add	r7, sp, #0
 8012c86:	60f8      	str	r0, [r7, #12]
 8012c88:	60b9      	str	r1, [r7, #8]
 8012c8a:	603b      	str	r3, [r7, #0]
 8012c8c:	4613      	mov	r3, r2
 8012c8e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8012c90:	2300      	movs	r3, #0
 8012c92:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8012c94:	2300      	movs	r3, #0
 8012c96:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8012c98:	2300      	movs	r3, #0
 8012c9a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8012ca8:	2300      	movs	r3, #0
 8012caa:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	891b      	ldrh	r3, [r3, #8]
 8012cb0:	2b00      	cmp	r3, #0
 8012cb2:	d101      	bne.n	8012cb8 <CircularQueue_Add+0x38>
 8012cb4:	2302      	movs	r3, #2
 8012cb6:	e000      	b.n	8012cba <CircularQueue_Add+0x3a>
 8012cb8:	2300      	movs	r3, #0
 8012cba:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	695b      	ldr	r3, [r3, #20]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d029      	beq.n	8012d18 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8012cc4:	68fb      	ldr	r3, [r7, #12]
 8012cc6:	891b      	ldrh	r3, [r3, #8]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d122      	bne.n	8012d12 <CircularQueue_Add+0x92>
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681a      	ldr	r2, [r3, #0]
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	691b      	ldr	r3, [r3, #16]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	781b      	ldrb	r3, [r3, #0]
 8012cd8:	4618      	mov	r0, r3
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681a      	ldr	r2, [r3, #0]
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	691b      	ldr	r3, [r3, #16]
 8012ce2:	1c59      	adds	r1, r3, #1
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	685b      	ldr	r3, [r3, #4]
 8012ce8:	4299      	cmp	r1, r3
 8012cea:	d306      	bcc.n	8012cfa <CircularQueue_Add+0x7a>
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	6919      	ldr	r1, [r3, #16]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	1acb      	subs	r3, r1, r3
 8012cf6:	3301      	adds	r3, #1
 8012cf8:	e002      	b.n	8012d00 <CircularQueue_Add+0x80>
 8012cfa:	68fb      	ldr	r3, [r7, #12]
 8012cfc:	691b      	ldr	r3, [r3, #16]
 8012cfe:	3301      	adds	r3, #1
 8012d00:	4413      	add	r3, r2
 8012d02:	781b      	ldrb	r3, [r3, #0]
 8012d04:	021b      	lsls	r3, r3, #8
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	4403      	add	r3, r0
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	3302      	adds	r3, #2
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	e001      	b.n	8012d16 <CircularQueue_Add+0x96>
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	891b      	ldrh	r3, [r3, #8]
 8012d16:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	891b      	ldrh	r3, [r3, #8]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	d002      	beq.n	8012d26 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	891b      	ldrh	r3, [r3, #8]
 8012d24:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	691a      	ldr	r2, [r3, #16]
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	68db      	ldr	r3, [r3, #12]
 8012d2e:	429a      	cmp	r2, r3
 8012d30:	d307      	bcc.n	8012d42 <CircularQueue_Add+0xc2>
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	685a      	ldr	r2, [r3, #4]
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	6919      	ldr	r1, [r3, #16]
 8012d3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012d3c:	440b      	add	r3, r1
 8012d3e:	1ad3      	subs	r3, r2, r3
 8012d40:	e000      	b.n	8012d44 <CircularQueue_Add+0xc4>
 8012d42:	2300      	movs	r3, #0
 8012d44:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012d46:	88fa      	ldrh	r2, [r7, #6]
 8012d48:	7ffb      	ldrb	r3, [r7, #31]
 8012d4a:	4413      	add	r3, r2
 8012d4c:	461a      	mov	r2, r3
 8012d4e:	683b      	ldr	r3, [r7, #0]
 8012d50:	fb02 f303 	mul.w	r3, r2, r3
 8012d54:	69ba      	ldr	r2, [r7, #24]
 8012d56:	429a      	cmp	r2, r3
 8012d58:	d80b      	bhi.n	8012d72 <CircularQueue_Add+0xf2>
 8012d5a:	88fa      	ldrh	r2, [r7, #6]
 8012d5c:	7ffb      	ldrb	r3, [r7, #31]
 8012d5e:	4413      	add	r3, r2
 8012d60:	461a      	mov	r2, r3
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d68:	fb01 f202 	mul.w	r2, r1, r2
 8012d6c:	1a9b      	subs	r3, r3, r2
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	e000      	b.n	8012d74 <CircularQueue_Add+0xf4>
 8012d72:	2300      	movs	r3, #0
 8012d74:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012d76:	7dfa      	ldrb	r2, [r7, #23]
 8012d78:	7ffb      	ldrb	r3, [r7, #31]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	bf8c      	ite	hi
 8012d7e:	2301      	movhi	r3, #1
 8012d80:	2300      	movls	r3, #0
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012d86:	7fbb      	ldrb	r3, [r7, #30]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d008      	beq.n	8012d9e <CircularQueue_Add+0x11e>
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	7f1b      	ldrb	r3, [r3, #28]
 8012d90:	f003 0301 	and.w	r3, r3, #1
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d002      	beq.n	8012d9e <CircularQueue_Add+0x11e>
 8012d98:	7dfb      	ldrb	r3, [r7, #23]
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	e000      	b.n	8012da0 <CircularQueue_Add+0x120>
 8012d9e:	8bbb      	ldrh	r3, [r7, #28]
 8012da0:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8012da2:	7fbb      	ldrb	r3, [r7, #30]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d008      	beq.n	8012dba <CircularQueue_Add+0x13a>
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	7f1b      	ldrb	r3, [r3, #28]
 8012dac:	f003 0302 	and.w	r3, r3, #2
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <CircularQueue_Add+0x13a>
 8012db4:	7ffb      	ldrb	r3, [r7, #31]
 8012db6:	b29b      	uxth	r3, r3
 8012db8:	e000      	b.n	8012dbc <CircularQueue_Add+0x13c>
 8012dba:	8bbb      	ldrh	r3, [r7, #28]
 8012dbc:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8012dbe:	88fb      	ldrh	r3, [r7, #6]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	f000 817e 	beq.w	80130c2 <CircularQueue_Add+0x442>
 8012dc6:	68fb      	ldr	r3, [r7, #12]
 8012dc8:	695a      	ldr	r2, [r3, #20]
 8012dca:	88f9      	ldrh	r1, [r7, #6]
 8012dcc:	7ffb      	ldrb	r3, [r7, #31]
 8012dce:	440b      	add	r3, r1
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	683b      	ldr	r3, [r7, #0]
 8012dd4:	fb01 f303 	mul.w	r3, r1, r3
 8012dd8:	441a      	add	r2, r3
 8012dda:	8bbb      	ldrh	r3, [r7, #28]
 8012ddc:	441a      	add	r2, r3
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	685b      	ldr	r3, [r3, #4]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	f200 816d 	bhi.w	80130c2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8012de8:	2300      	movs	r3, #0
 8012dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012dec:	e14a      	b.n	8013084 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	691a      	ldr	r2, [r3, #16]
 8012df2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012df4:	441a      	add	r2, r3
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	685b      	ldr	r3, [r3, #4]
 8012dfa:	429a      	cmp	r2, r3
 8012dfc:	d307      	bcc.n	8012e0e <CircularQueue_Add+0x18e>
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	691a      	ldr	r2, [r3, #16]
 8012e02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012e04:	441a      	add	r2, r3
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	685b      	ldr	r3, [r3, #4]
 8012e0a:	1ad3      	subs	r3, r2, r3
 8012e0c:	e003      	b.n	8012e16 <CircularQueue_Add+0x196>
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	691a      	ldr	r2, [r3, #16]
 8012e12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012e14:	4413      	add	r3, r2
 8012e16:	68fa      	ldr	r2, [r7, #12]
 8012e18:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	691b      	ldr	r3, [r3, #16]
 8012e1e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8012e20:	68fb      	ldr	r3, [r7, #12]
 8012e22:	891b      	ldrh	r3, [r3, #8]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d130      	bne.n	8012e8a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012e28:	68fb      	ldr	r3, [r7, #12]
 8012e2a:	681a      	ldr	r2, [r3, #0]
 8012e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e2e:	1c59      	adds	r1, r3, #1
 8012e30:	6339      	str	r1, [r7, #48]	@ 0x30
 8012e32:	4413      	add	r3, r2
 8012e34:	88fa      	ldrh	r2, [r7, #6]
 8012e36:	b2d2      	uxtb	r2, r2
 8012e38:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	685b      	ldr	r3, [r3, #4]
 8012e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e40:	429a      	cmp	r2, r3
 8012e42:	d304      	bcc.n	8012e4e <CircularQueue_Add+0x1ce>
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	685b      	ldr	r3, [r3, #4]
 8012e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e4a:	1ad3      	subs	r3, r2, r3
 8012e4c:	e000      	b.n	8012e50 <CircularQueue_Add+0x1d0>
 8012e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e50:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012e52:	88fb      	ldrh	r3, [r7, #6]
 8012e54:	0a1b      	lsrs	r3, r3, #8
 8012e56:	b298      	uxth	r0, r3
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	681a      	ldr	r2, [r3, #0]
 8012e5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e5e:	1c59      	adds	r1, r3, #1
 8012e60:	6339      	str	r1, [r7, #48]	@ 0x30
 8012e62:	4413      	add	r3, r2
 8012e64:	b2c2      	uxtb	r2, r0
 8012e66:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d304      	bcc.n	8012e7c <CircularQueue_Add+0x1fc>
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012e78:	1ad3      	subs	r3, r2, r3
 8012e7a:	e000      	b.n	8012e7e <CircularQueue_Add+0x1fe>
 8012e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e7e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	695b      	ldr	r3, [r3, #20]
 8012e84:	1c9a      	adds	r2, r3, #2
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012e8a:	88fa      	ldrh	r2, [r7, #6]
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	6859      	ldr	r1, [r3, #4]
 8012e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012e92:	1acb      	subs	r3, r1, r3
 8012e94:	4293      	cmp	r3, r2
 8012e96:	bf28      	it	cs
 8012e98:	4613      	movcs	r3, r2
 8012e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8012e9c:	88fb      	ldrh	r3, [r7, #6]
 8012e9e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d007      	beq.n	8012eb4 <CircularQueue_Add+0x234>
 8012ea4:	88fb      	ldrh	r3, [r7, #6]
 8012ea6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012ea8:	429a      	cmp	r2, r3
 8012eaa:	d225      	bcs.n	8012ef8 <CircularQueue_Add+0x278>
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	7f1b      	ldrb	r3, [r3, #28]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d121      	bne.n	8012ef8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	681a      	ldr	r2, [r3, #0]
 8012eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012eba:	18d0      	adds	r0, r2, r3
 8012ebc:	88fb      	ldrh	r3, [r7, #6]
 8012ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ec0:	fb02 f303 	mul.w	r3, r2, r3
 8012ec4:	68ba      	ldr	r2, [r7, #8]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012eca:	4619      	mov	r1, r3
 8012ecc:	f004 f8e5 	bl	801709a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	695a      	ldr	r2, [r3, #20]
 8012ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ed6:	441a      	add	r2, r3
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8012edc:	2300      	movs	r3, #0
 8012ede:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8012ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012ee4:	88fa      	ldrh	r2, [r7, #6]
 8012ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ee8:	1ad3      	subs	r3, r2, r3
 8012eea:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8012eec:	7ffb      	ldrb	r3, [r7, #31]
 8012eee:	b29a      	uxth	r2, r3
 8012ef0:	88fb      	ldrh	r3, [r7, #6]
 8012ef2:	4413      	add	r3, r2
 8012ef4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012ef6:	e0a4      	b.n	8013042 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	f000 80a1 	beq.w	8013042 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	7f1b      	ldrb	r3, [r3, #28]
 8012f04:	f003 0301 	and.w	r3, r3, #1
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d03a      	beq.n	8012f82 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	891b      	ldrh	r3, [r3, #8]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d10d      	bne.n	8012f30 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f1a:	3b02      	subs	r3, #2
 8012f1c:	4413      	add	r3, r2
 8012f1e:	22ff      	movs	r2, #255	@ 0xff
 8012f20:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	681a      	ldr	r2, [r3, #0]
 8012f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	4413      	add	r3, r2
 8012f2c:	22ff      	movs	r2, #255	@ 0xff
 8012f2e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	695a      	ldr	r2, [r3, #20]
 8012f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f36:	441a      	add	r2, r3
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8012f40:	88fb      	ldrh	r3, [r7, #6]
 8012f42:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8012f44:	2300      	movs	r3, #0
 8012f46:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	891b      	ldrh	r3, [r3, #8]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d16f      	bne.n	8013030 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	681a      	ldr	r2, [r3, #0]
 8012f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f56:	1c59      	adds	r1, r3, #1
 8012f58:	6339      	str	r1, [r7, #48]	@ 0x30
 8012f5a:	4413      	add	r3, r2
 8012f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f5e:	b2d2      	uxtb	r2, r2
 8012f60:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012f64:	0a18      	lsrs	r0, r3, #8
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	681a      	ldr	r2, [r3, #0]
 8012f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f6c:	1c59      	adds	r1, r3, #1
 8012f6e:	6339      	str	r1, [r7, #48]	@ 0x30
 8012f70:	4413      	add	r3, r2
 8012f72:	b2c2      	uxtb	r2, r0
 8012f74:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	695b      	ldr	r3, [r3, #20]
 8012f7a:	1c9a      	adds	r2, r3, #2
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	615a      	str	r2, [r3, #20]
 8012f80:	e056      	b.n	8013030 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	7f1b      	ldrb	r3, [r3, #28]
 8012f86:	f003 0302 	and.w	r3, r3, #2
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d050      	beq.n	8013030 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	891b      	ldrh	r3, [r3, #8]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d14a      	bne.n	801302c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8012f96:	68fb      	ldr	r3, [r7, #12]
 8012f98:	681a      	ldr	r2, [r3, #0]
 8012f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f9c:	3b02      	subs	r3, #2
 8012f9e:	4413      	add	r3, r2
 8012fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fa2:	b2d2      	uxtb	r2, r2
 8012fa4:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8012fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fa8:	0a19      	lsrs	r1, r3, #8
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	681a      	ldr	r2, [r3, #0]
 8012fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fb0:	3b01      	subs	r3, #1
 8012fb2:	4413      	add	r3, r2
 8012fb4:	b2ca      	uxtb	r2, r1
 8012fb6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	681a      	ldr	r2, [r3, #0]
 8012fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012fbe:	18d0      	adds	r0, r2, r3
 8012fc0:	88fb      	ldrh	r3, [r7, #6]
 8012fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012fc4:	fb02 f303 	mul.w	r3, r2, r3
 8012fc8:	68ba      	ldr	r2, [r7, #8]
 8012fca:	4413      	add	r3, r2
 8012fcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fce:	4619      	mov	r1, r3
 8012fd0:	f004 f863 	bl	801709a <memcpy>
             q->byteCount += NbBytesToCopy; 
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	695a      	ldr	r2, [r3, #20]
 8012fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fda:	441a      	add	r2, r3
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 8012fe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fe2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 8012fe4:	88fa      	ldrh	r2, [r7, #6]
 8012fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fe8:	1ad3      	subs	r3, r2, r3
 8012fea:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 8012fec:	68fb      	ldr	r3, [r7, #12]
 8012fee:	699b      	ldr	r3, [r3, #24]
 8012ff0:	1c5a      	adds	r2, r3, #1
 8012ff2:	68fb      	ldr	r3, [r7, #12]
 8012ff4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 8012ff6:	2300      	movs	r3, #0
 8012ff8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	681a      	ldr	r2, [r3, #0]
 8012ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013000:	1c59      	adds	r1, r3, #1
 8013002:	6339      	str	r1, [r7, #48]	@ 0x30
 8013004:	4413      	add	r3, r2
 8013006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013008:	b2d2      	uxtb	r2, r2
 801300a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801300c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801300e:	0a18      	lsrs	r0, r3, #8
 8013010:	68fb      	ldr	r3, [r7, #12]
 8013012:	681a      	ldr	r2, [r3, #0]
 8013014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013016:	1c59      	adds	r1, r3, #1
 8013018:	6339      	str	r1, [r7, #48]	@ 0x30
 801301a:	4413      	add	r3, r2
 801301c:	b2c2      	uxtb	r2, r0
 801301e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	695b      	ldr	r3, [r3, #20]
 8013024:	1c9a      	adds	r2, r3, #2
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	615a      	str	r2, [r3, #20]
 801302a:	e001      	b.n	8013030 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801302c:	2300      	movs	r3, #0
 801302e:	e049      	b.n	80130c4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8013030:	7ffb      	ldrb	r3, [r7, #31]
 8013032:	b29a      	uxth	r2, r3
 8013034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013036:	b29b      	uxth	r3, r3
 8013038:	4413      	add	r3, r2
 801303a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	2200      	movs	r2, #0
 8013040:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8013042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013044:	2b00      	cmp	r3, #0
 8013046:	d015      	beq.n	8013074 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8013048:	68fb      	ldr	r3, [r7, #12]
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801304e:	18d0      	adds	r0, r2, r3
 8013050:	88fb      	ldrh	r3, [r7, #6]
 8013052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013054:	fb03 f202 	mul.w	r2, r3, r2
 8013058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801305a:	4413      	add	r3, r2
 801305c:	68ba      	ldr	r2, [r7, #8]
 801305e:	4413      	add	r3, r2
 8013060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013062:	4619      	mov	r1, r3
 8013064:	f004 f819 	bl	801709a <memcpy>
        q->byteCount += NbBytesToCopy;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	695a      	ldr	r2, [r3, #20]
 801306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801306e:	441a      	add	r2, r3
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	699b      	ldr	r3, [r3, #24]
 8013078:	1c5a      	adds	r2, r3, #1
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801307e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013080:	3301      	adds	r3, #1
 8013082:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013084:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	429a      	cmp	r2, r3
 801308a:	f4ff aeb0 	bcc.w	8012dee <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	681a      	ldr	r2, [r3, #0]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	6919      	ldr	r1, [r3, #16]
 8013096:	7ffb      	ldrb	r3, [r7, #31]
 8013098:	4419      	add	r1, r3
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	4299      	cmp	r1, r3
 80130a0:	d307      	bcc.n	80130b2 <CircularQueue_Add+0x432>
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	6919      	ldr	r1, [r3, #16]
 80130a6:	7ffb      	ldrb	r3, [r7, #31]
 80130a8:	4419      	add	r1, r3
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	1acb      	subs	r3, r1, r3
 80130b0:	e003      	b.n	80130ba <CircularQueue_Add+0x43a>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	6919      	ldr	r1, [r3, #16]
 80130b6:	7ffb      	ldrb	r3, [r7, #31]
 80130b8:	440b      	add	r3, r1
 80130ba:	4413      	add	r3, r2
 80130bc:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80130be:	6a3b      	ldr	r3, [r7, #32]
 80130c0:	e000      	b.n	80130c4 <CircularQueue_Add+0x444>
    return NULL;
 80130c2:	2300      	movs	r3, #0
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3738      	adds	r7, #56	@ 0x38
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80130cc:	b480      	push	{r7}
 80130ce:	b085      	sub	sp, #20
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80130d6:	2300      	movs	r3, #0
 80130d8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80130da:	2300      	movs	r3, #0
 80130dc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	891b      	ldrh	r3, [r3, #8]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d101      	bne.n	80130ea <CircularQueue_Remove+0x1e>
 80130e6:	2302      	movs	r3, #2
 80130e8:	e000      	b.n	80130ec <CircularQueue_Remove+0x20>
 80130ea:	2300      	movs	r3, #0
 80130ec:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80130ee:	2300      	movs	r3, #0
 80130f0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	695b      	ldr	r3, [r3, #20]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	f000 80ca 	beq.w	8013290 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	891b      	ldrh	r3, [r3, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d120      	bne.n	8013146 <CircularQueue_Remove+0x7a>
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	681a      	ldr	r2, [r3, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	68db      	ldr	r3, [r3, #12]
 801310c:	4413      	add	r3, r2
 801310e:	781b      	ldrb	r3, [r3, #0]
 8013110:	4618      	mov	r0, r3
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	681a      	ldr	r2, [r3, #0]
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	68db      	ldr	r3, [r3, #12]
 801311a:	1c59      	adds	r1, r3, #1
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	685b      	ldr	r3, [r3, #4]
 8013120:	4299      	cmp	r1, r3
 8013122:	d306      	bcc.n	8013132 <CircularQueue_Remove+0x66>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	68d9      	ldr	r1, [r3, #12]
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	1acb      	subs	r3, r1, r3
 801312e:	3301      	adds	r3, #1
 8013130:	e002      	b.n	8013138 <CircularQueue_Remove+0x6c>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	68db      	ldr	r3, [r3, #12]
 8013136:	3301      	adds	r3, #1
 8013138:	4413      	add	r3, r2
 801313a:	781b      	ldrb	r3, [r3, #0]
 801313c:	021b      	lsls	r3, r3, #8
 801313e:	b29b      	uxth	r3, r3
 8013140:	4403      	add	r3, r0
 8013142:	b29b      	uxth	r3, r3
 8013144:	e001      	b.n	801314a <CircularQueue_Remove+0x7e>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	891b      	ldrh	r3, [r3, #8]
 801314a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	7f1b      	ldrb	r3, [r3, #28]
 8013150:	f003 0301 	and.w	r3, r3, #1
 8013154:	2b00      	cmp	r3, #0
 8013156:	d056      	beq.n	8013206 <CircularQueue_Remove+0x13a>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	7f1b      	ldrb	r3, [r3, #28]
 801315c:	f003 0302 	and.w	r3, r3, #2
 8013160:	2b00      	cmp	r3, #0
 8013162:	d150      	bne.n	8013206 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013164:	897b      	ldrh	r3, [r7, #10]
 8013166:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801316a:	4293      	cmp	r3, r2
 801316c:	d103      	bne.n	8013176 <CircularQueue_Remove+0xaa>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	891b      	ldrh	r3, [r3, #8]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d012      	beq.n	801319c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	68da      	ldr	r2, [r3, #12]
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801317e:	429a      	cmp	r2, r3
 8013180:	d941      	bls.n	8013206 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	891b      	ldrh	r3, [r3, #8]
 8013186:	2b00      	cmp	r3, #0
 8013188:	d03d      	beq.n	8013206 <CircularQueue_Remove+0x13a>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	685a      	ldr	r2, [r3, #4]
 801318e:	687b      	ldr	r3, [r7, #4]
 8013190:	68db      	ldr	r3, [r3, #12]
 8013192:	1ad3      	subs	r3, r2, r3
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	8912      	ldrh	r2, [r2, #8]
 8013198:	4293      	cmp	r3, r2
 801319a:	d234      	bcs.n	8013206 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	695a      	ldr	r2, [r3, #20]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	68d9      	ldr	r1, [r3, #12]
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	685b      	ldr	r3, [r3, #4]
 80131a8:	1acb      	subs	r3, r1, r3
 80131aa:	441a      	add	r2, r3
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	2200      	movs	r2, #0
 80131b4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	891b      	ldrh	r3, [r3, #8]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d120      	bne.n	8013200 <CircularQueue_Remove+0x134>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	681a      	ldr	r2, [r3, #0]
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	68db      	ldr	r3, [r3, #12]
 80131c6:	4413      	add	r3, r2
 80131c8:	781b      	ldrb	r3, [r3, #0]
 80131ca:	4618      	mov	r0, r3
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	681a      	ldr	r2, [r3, #0]
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	68db      	ldr	r3, [r3, #12]
 80131d4:	1c59      	adds	r1, r3, #1
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	4299      	cmp	r1, r3
 80131dc:	d306      	bcc.n	80131ec <CircularQueue_Remove+0x120>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	68d9      	ldr	r1, [r3, #12]
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	685b      	ldr	r3, [r3, #4]
 80131e6:	1acb      	subs	r3, r1, r3
 80131e8:	3301      	adds	r3, #1
 80131ea:	e002      	b.n	80131f2 <CircularQueue_Remove+0x126>
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	68db      	ldr	r3, [r3, #12]
 80131f0:	3301      	adds	r3, #1
 80131f2:	4413      	add	r3, r2
 80131f4:	781b      	ldrb	r3, [r3, #0]
 80131f6:	021b      	lsls	r3, r3, #8
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	4403      	add	r3, r0
 80131fc:	b29b      	uxth	r3, r3
 80131fe:	e001      	b.n	8013204 <CircularQueue_Remove+0x138>
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	891b      	ldrh	r3, [r3, #8]
 8013204:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	687b      	ldr	r3, [r7, #4]
 801320c:	68d9      	ldr	r1, [r3, #12]
 801320e:	7a7b      	ldrb	r3, [r7, #9]
 8013210:	4419      	add	r1, r3
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	685b      	ldr	r3, [r3, #4]
 8013216:	4299      	cmp	r1, r3
 8013218:	d307      	bcc.n	801322a <CircularQueue_Remove+0x15e>
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	68d9      	ldr	r1, [r3, #12]
 801321e:	7a7b      	ldrb	r3, [r7, #9]
 8013220:	4419      	add	r1, r3
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	1acb      	subs	r3, r1, r3
 8013228:	e003      	b.n	8013232 <CircularQueue_Remove+0x166>
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	68d9      	ldr	r1, [r3, #12]
 801322e:	7a7b      	ldrb	r3, [r7, #9]
 8013230:	440b      	add	r3, r1
 8013232:	4413      	add	r3, r2
 8013234:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	695b      	ldr	r3, [r3, #20]
 801323a:	8979      	ldrh	r1, [r7, #10]
 801323c:	7a7a      	ldrb	r2, [r7, #9]
 801323e:	440a      	add	r2, r1
 8013240:	1a9a      	subs	r2, r3, r2
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	695b      	ldr	r3, [r3, #20]
 801324a:	2b00      	cmp	r3, #0
 801324c:	d01b      	beq.n	8013286 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	68da      	ldr	r2, [r3, #12]
 8013252:	897b      	ldrh	r3, [r7, #10]
 8013254:	441a      	add	r2, r3
 8013256:	7a7b      	ldrb	r3, [r7, #9]
 8013258:	441a      	add	r2, r3
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	429a      	cmp	r2, r3
 8013260:	d309      	bcc.n	8013276 <CircularQueue_Remove+0x1aa>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	68da      	ldr	r2, [r3, #12]
 8013266:	897b      	ldrh	r3, [r7, #10]
 8013268:	441a      	add	r2, r3
 801326a:	7a7b      	ldrb	r3, [r7, #9]
 801326c:	441a      	add	r2, r3
 801326e:	687b      	ldr	r3, [r7, #4]
 8013270:	685b      	ldr	r3, [r3, #4]
 8013272:	1ad3      	subs	r3, r2, r3
 8013274:	e005      	b.n	8013282 <CircularQueue_Remove+0x1b6>
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	68da      	ldr	r2, [r3, #12]
 801327a:	897b      	ldrh	r3, [r7, #10]
 801327c:	441a      	add	r2, r3
 801327e:	7a7b      	ldrb	r3, [r7, #9]
 8013280:	4413      	add	r3, r2
 8013282:	687a      	ldr	r2, [r7, #4]
 8013284:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	699b      	ldr	r3, [r3, #24]
 801328a:	1e5a      	subs	r2, r3, #1
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d002      	beq.n	801329c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8013296:	683b      	ldr	r3, [r7, #0]
 8013298:	897a      	ldrh	r2, [r7, #10]
 801329a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801329c:	68fb      	ldr	r3, [r7, #12]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3714      	adds	r7, #20
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr

080132aa <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 80132aa:	b480      	push	{r7}
 80132ac:	b087      	sub	sp, #28
 80132ae:	af00      	add	r7, sp, #0
 80132b0:	6078      	str	r0, [r7, #4]
 80132b2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80132b4:	2300      	movs	r3, #0
 80132b6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80132b8:	2300      	movs	r3, #0
 80132ba:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	891b      	ldrh	r3, [r3, #8]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d101      	bne.n	80132c8 <CircularQueue_Sense+0x1e>
 80132c4:	2302      	movs	r3, #2
 80132c6:	e000      	b.n	80132ca <CircularQueue_Sense+0x20>
 80132c8:	2300      	movs	r3, #0
 80132ca:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80132cc:	2300      	movs	r3, #0
 80132ce:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80132d0:	2300      	movs	r3, #0
 80132d2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	695b      	ldr	r3, [r3, #20]
 80132d8:	2b00      	cmp	r3, #0
 80132da:	f000 808e 	beq.w	80133fa <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	68db      	ldr	r3, [r3, #12]
 80132e2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	891b      	ldrh	r3, [r3, #8]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d120      	bne.n	801332e <CircularQueue_Sense+0x84>
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681a      	ldr	r2, [r3, #0]
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	68db      	ldr	r3, [r3, #12]
 80132f4:	4413      	add	r3, r2
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	4618      	mov	r0, r3
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	681a      	ldr	r2, [r3, #0]
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	68db      	ldr	r3, [r3, #12]
 8013302:	1c59      	adds	r1, r3, #1
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	4299      	cmp	r1, r3
 801330a:	d306      	bcc.n	801331a <CircularQueue_Sense+0x70>
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	68d9      	ldr	r1, [r3, #12]
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	685b      	ldr	r3, [r3, #4]
 8013314:	1acb      	subs	r3, r1, r3
 8013316:	3301      	adds	r3, #1
 8013318:	e002      	b.n	8013320 <CircularQueue_Sense+0x76>
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	68db      	ldr	r3, [r3, #12]
 801331e:	3301      	adds	r3, #1
 8013320:	4413      	add	r3, r2
 8013322:	781b      	ldrb	r3, [r3, #0]
 8013324:	021b      	lsls	r3, r3, #8
 8013326:	b29b      	uxth	r3, r3
 8013328:	4403      	add	r3, r0
 801332a:	b29b      	uxth	r3, r3
 801332c:	e001      	b.n	8013332 <CircularQueue_Sense+0x88>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	891b      	ldrh	r3, [r3, #8]
 8013332:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	7f1b      	ldrb	r3, [r3, #28]
 8013338:	f003 0301 	and.w	r3, r3, #1
 801333c:	2b00      	cmp	r3, #0
 801333e:	d047      	beq.n	80133d0 <CircularQueue_Sense+0x126>
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	7f1b      	ldrb	r3, [r3, #28]
 8013344:	f003 0302 	and.w	r3, r3, #2
 8013348:	2b00      	cmp	r3, #0
 801334a:	d141      	bne.n	80133d0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801334c:	8a7b      	ldrh	r3, [r7, #18]
 801334e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013352:	4293      	cmp	r3, r2
 8013354:	d103      	bne.n	801335e <CircularQueue_Sense+0xb4>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	891b      	ldrh	r3, [r3, #8]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d012      	beq.n	8013384 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	68da      	ldr	r2, [r3, #12]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013366:	429a      	cmp	r2, r3
 8013368:	d932      	bls.n	80133d0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	891b      	ldrh	r3, [r3, #8]
 801336e:	2b00      	cmp	r3, #0
 8013370:	d02e      	beq.n	80133d0 <CircularQueue_Sense+0x126>
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	685a      	ldr	r2, [r3, #4]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	68db      	ldr	r3, [r3, #12]
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	687a      	ldr	r2, [r7, #4]
 801337e:	8912      	ldrh	r2, [r2, #8]
 8013380:	4293      	cmp	r3, r2
 8013382:	d225      	bcs.n	80133d0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8013384:	2300      	movs	r3, #0
 8013386:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	891b      	ldrh	r3, [r3, #8]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d11c      	bne.n	80133ca <CircularQueue_Sense+0x120>
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	681a      	ldr	r2, [r3, #0]
 8013394:	68fb      	ldr	r3, [r7, #12]
 8013396:	4413      	add	r3, r2
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	4618      	mov	r0, r3
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681a      	ldr	r2, [r3, #0]
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	1c59      	adds	r1, r3, #1
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	4299      	cmp	r1, r3
 80133aa:	d305      	bcc.n	80133b8 <CircularQueue_Sense+0x10e>
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	685b      	ldr	r3, [r3, #4]
 80133b0:	68f9      	ldr	r1, [r7, #12]
 80133b2:	1acb      	subs	r3, r1, r3
 80133b4:	3301      	adds	r3, #1
 80133b6:	e001      	b.n	80133bc <CircularQueue_Sense+0x112>
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	3301      	adds	r3, #1
 80133bc:	4413      	add	r3, r2
 80133be:	781b      	ldrb	r3, [r3, #0]
 80133c0:	021b      	lsls	r3, r3, #8
 80133c2:	b29b      	uxth	r3, r3
 80133c4:	4403      	add	r3, r0
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	e001      	b.n	80133ce <CircularQueue_Sense+0x124>
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	891b      	ldrh	r3, [r3, #8]
 80133ce:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	7af9      	ldrb	r1, [r7, #11]
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	4419      	add	r1, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	4299      	cmp	r1, r3
 80133e0:	d306      	bcc.n	80133f0 <CircularQueue_Sense+0x146>
 80133e2:	7af9      	ldrb	r1, [r7, #11]
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	4419      	add	r1, r3
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	1acb      	subs	r3, r1, r3
 80133ee:	e002      	b.n	80133f6 <CircularQueue_Sense+0x14c>
 80133f0:	7af9      	ldrb	r1, [r7, #11]
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	440b      	add	r3, r1
 80133f6:	4413      	add	r3, r2
 80133f8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80133fa:	683b      	ldr	r3, [r7, #0]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d002      	beq.n	8013406 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	8a7a      	ldrh	r2, [r7, #18]
 8013404:	801a      	strh	r2, [r3, #0]
  }
  return x;
 8013406:	697b      	ldr	r3, [r7, #20]
}
 8013408:	4618      	mov	r0, r3
 801340a:	371c      	adds	r7, #28
 801340c:	46bd      	mov	sp, r7
 801340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013412:	4770      	bx	lr

08013414 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 8013414:	b480      	push	{r7}
 8013416:	b087      	sub	sp, #28
 8013418:	af00      	add	r7, sp, #0
 801341a:	60f8      	str	r0, [r7, #12]
 801341c:	60b9      	str	r1, [r7, #8]
 801341e:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 8013420:	2300      	movs	r3, #0
 8013422:	617b      	str	r3, [r7, #20]
 8013424:	e00a      	b.n	801343c <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 8013426:	68ba      	ldr	r2, [r7, #8]
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	441a      	add	r2, r3
 801342c:	68f9      	ldr	r1, [r7, #12]
 801342e:	697b      	ldr	r3, [r7, #20]
 8013430:	440b      	add	r3, r1
 8013432:	7812      	ldrb	r2, [r2, #0]
 8013434:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8013436:	697b      	ldr	r3, [r7, #20]
 8013438:	3301      	adds	r3, #1
 801343a:	617b      	str	r3, [r7, #20]
 801343c:	697a      	ldr	r2, [r7, #20]
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	429a      	cmp	r2, r3
 8013442:	d3f0      	bcc.n	8013426 <zb_ipc_m4_memcpy2+0x12>
    }
}
 8013444:	bf00      	nop
 8013446:	bf00      	nop
 8013448:	371c      	adds	r7, #28
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr

08013452 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 8013452:	b580      	push	{r7, lr}
 8013454:	b084      	sub	sp, #16
 8013456:	af00      	add	r7, sp, #0
 8013458:	6078      	str	r0, [r7, #4]
 801345a:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 801345c:	200c      	movs	r0, #12
 801345e:	f003 fb0d 	bl	8016a7c <malloc>
 8013462:	4603      	mov	r3, r0
 8013464:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d00a      	beq.n	8013482 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 801346c:	220c      	movs	r2, #12
 801346e:	2100      	movs	r1, #0
 8013470:	68f8      	ldr	r0, [r7, #12]
 8013472:	f003 fd77 	bl	8016f64 <memset>
        info->callback = callback;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	687a      	ldr	r2, [r7, #4]
 801347a:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	683a      	ldr	r2, [r7, #0]
 8013480:	605a      	str	r2, [r3, #4]
    }
    return info;
 8013482:	68fb      	ldr	r3, [r7, #12]
}
 8013484:	4618      	mov	r0, r3
 8013486:	3710      	adds	r7, #16
 8013488:	46bd      	mov	sp, r7
 801348a:	bd80      	pop	{r7, pc}

0801348c <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 801348c:	b580      	push	{r7, lr}
 801348e:	b082      	sub	sp, #8
 8013490:	af00      	add	r7, sp, #0
 8013492:	6078      	str	r0, [r7, #4]
    free(info);
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f003 faf9 	bl	8016a8c <free>
}
 801349a:	bf00      	nop
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}
	...

080134a4 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b082      	sub	sp, #8
 80134a8:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 80134aa:	f7f5 fe63 	bl	8009174 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 80134ae:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	2b01      	cmp	r3, #1
 80134b6:	d006      	beq.n	80134c6 <zb_ipc_m4_get_retval+0x22>
 80134b8:	4b09      	ldr	r3, [pc, #36]	@ (80134e0 <zb_ipc_m4_get_retval+0x3c>)
 80134ba:	4a0a      	ldr	r2, [pc, #40]	@ (80134e4 <zb_ipc_m4_get_retval+0x40>)
 80134bc:	f240 1151 	movw	r1, #337	@ 0x151
 80134c0:	4809      	ldr	r0, [pc, #36]	@ (80134e8 <zb_ipc_m4_get_retval+0x44>)
 80134c2:	f003 fabd 	bl	8016a40 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 80134c6:	687b      	ldr	r3, [r7, #4]
 80134c8:	f103 0108 	add.w	r1, r3, #8
 80134cc:	463b      	mov	r3, r7
 80134ce:	2204      	movs	r2, #4
 80134d0:	4618      	mov	r0, r3
 80134d2:	f7ff ff9f 	bl	8013414 <zb_ipc_m4_memcpy2>
    return retval;
 80134d6:	683b      	ldr	r3, [r7, #0]
}
 80134d8:	4618      	mov	r0, r3
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}
 80134e0:	0801839c 	.word	0x0801839c
 80134e4:	08018cec 	.word	0x08018cec
 80134e8:	080183b0 	.word	0x080183b0

080134ec <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b086      	sub	sp, #24
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80134f6:	607a      	str	r2, [r7, #4]
 80134f8:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 80134fa:	4b25      	ldr	r3, [pc, #148]	@ (8013590 <ZbInit+0xa4>)
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d001      	beq.n	8013506 <ZbInit+0x1a>
        return NULL;
 8013502:	2300      	movs	r3, #0
 8013504:	e03f      	b.n	8013586 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 8013506:	f7f5 fe97 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801350a:	f7f5 fe27 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801350e:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	2200      	movs	r2, #0
 8013514:	f042 020a 	orr.w	r2, r2, #10
 8013518:	701a      	strb	r2, [r3, #0]
 801351a:	2200      	movs	r2, #0
 801351c:	705a      	strb	r2, [r3, #1]
 801351e:	2200      	movs	r2, #0
 8013520:	709a      	strb	r2, [r3, #2]
 8013522:	2200      	movs	r2, #0
 8013524:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	2200      	movs	r2, #0
 801352a:	f042 0204 	orr.w	r2, r2, #4
 801352e:	711a      	strb	r2, [r3, #4]
 8013530:	2200      	movs	r2, #0
 8013532:	715a      	strb	r2, [r3, #5]
 8013534:	2200      	movs	r2, #0
 8013536:	719a      	strb	r2, [r3, #6]
 8013538:	2200      	movs	r2, #0
 801353a:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	3308      	adds	r3, #8
 8013540:	f107 0108 	add.w	r1, r7, #8
 8013544:	2208      	movs	r2, #8
 8013546:	4618      	mov	r0, r3
 8013548:	f7ff ff64 	bl	8013414 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 801354c:	687a      	ldr	r2, [r7, #4]
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 8013552:	683a      	ldr	r2, [r7, #0]
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8013558:	f7f5 fe30 	bl	80091bc <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 801355c:	f7ff ffa2 	bl	80134a4 <zb_ipc_m4_get_retval>
 8013560:	4603      	mov	r3, r0
 8013562:	461a      	mov	r2, r3
 8013564:	4b0a      	ldr	r3, [pc, #40]	@ (8013590 <ZbInit+0xa4>)
 8013566:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 8013568:	f7ff f9b4 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 801356c:	683b      	ldr	r3, [r7, #0]
 801356e:	2b00      	cmp	r3, #0
 8013570:	d007      	beq.n	8013582 <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8013572:	683b      	ldr	r3, [r7, #0]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	4a06      	ldr	r2, [pc, #24]	@ (8013590 <ZbInit+0xa4>)
 8013578:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 801357a:	683b      	ldr	r3, [r7, #0]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	4a04      	ldr	r2, [pc, #16]	@ (8013590 <ZbInit+0xa4>)
 8013580:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 8013582:	4b03      	ldr	r3, [pc, #12]	@ (8013590 <ZbInit+0xa4>)
 8013584:	681b      	ldr	r3, [r3, #0]
}
 8013586:	4618      	mov	r0, r3
 8013588:	3718      	adds	r7, #24
 801358a:	46bd      	mov	sp, r7
 801358c:	bd80      	pop	{r7, pc}
 801358e:	bf00      	nop
 8013590:	20001a18 	.word	0x20001a18

08013594 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b086      	sub	sp, #24
 8013598:	af00      	add	r7, sp, #0
 801359a:	60f8      	str	r0, [r7, #12]
 801359c:	60b9      	str	r1, [r7, #8]
 801359e:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80135a0:	f7f5 fe4a 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80135a4:	f7f5 fdda 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80135a8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 80135aa:	697b      	ldr	r3, [r7, #20]
 80135ac:	2200      	movs	r2, #0
 80135ae:	f042 0213 	orr.w	r2, r2, #19
 80135b2:	701a      	strb	r2, [r3, #0]
 80135b4:	2200      	movs	r2, #0
 80135b6:	705a      	strb	r2, [r3, #1]
 80135b8:	2200      	movs	r2, #0
 80135ba:	709a      	strb	r2, [r3, #2]
 80135bc:	2200      	movs	r2, #0
 80135be:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80135c0:	697b      	ldr	r3, [r7, #20]
 80135c2:	2200      	movs	r2, #0
 80135c4:	f042 0202 	orr.w	r2, r2, #2
 80135c8:	711a      	strb	r2, [r3, #4]
 80135ca:	2200      	movs	r2, #0
 80135cc:	715a      	strb	r2, [r3, #5]
 80135ce:	2200      	movs	r2, #0
 80135d0:	719a      	strb	r2, [r3, #6]
 80135d2:	2200      	movs	r2, #0
 80135d4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 80135d6:	697b      	ldr	r3, [r7, #20]
 80135d8:	68ba      	ldr	r2, [r7, #8]
 80135da:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 80135dc:	4b0c      	ldr	r3, [pc, #48]	@ (8013610 <ZbSetLogging+0x7c>)
 80135de:	7b1b      	ldrb	r3, [r3, #12]
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d102      	bne.n	80135ea <ZbSetLogging+0x56>
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d001      	beq.n	80135ee <ZbSetLogging+0x5a>
 80135ea:	2201      	movs	r2, #1
 80135ec:	e000      	b.n	80135f0 <ZbSetLogging+0x5c>
 80135ee:	2200      	movs	r2, #0
 80135f0:	697b      	ldr	r3, [r7, #20]
 80135f2:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80135f4:	f7f5 fde2 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80135f8:	f7ff f96c 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 80135fc:	4a04      	ldr	r2, [pc, #16]	@ (8013610 <ZbSetLogging+0x7c>)
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 8013602:	4a03      	ldr	r2, [pc, #12]	@ (8013610 <ZbSetLogging+0x7c>)
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	6093      	str	r3, [r2, #8]
}
 8013608:	bf00      	nop
 801360a:	3718      	adds	r7, #24
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	20001a18 	.word	0x20001a18

08013614 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b086      	sub	sp, #24
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 801361c:	f04f 0200 	mov.w	r2, #0
 8013620:	f04f 0300 	mov.w	r3, #0
 8013624:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 8013628:	f7f5 fe06 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801362c:	f7f5 fd96 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013630:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 8013632:	697b      	ldr	r3, [r7, #20]
 8013634:	2200      	movs	r2, #0
 8013636:	f042 020e 	orr.w	r2, r2, #14
 801363a:	701a      	strb	r2, [r3, #0]
 801363c:	2200      	movs	r2, #0
 801363e:	705a      	strb	r2, [r3, #1]
 8013640:	2200      	movs	r2, #0
 8013642:	709a      	strb	r2, [r3, #2]
 8013644:	2200      	movs	r2, #0
 8013646:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	2200      	movs	r2, #0
 801364c:	711a      	strb	r2, [r3, #4]
 801364e:	2200      	movs	r2, #0
 8013650:	715a      	strb	r2, [r3, #5]
 8013652:	2200      	movs	r2, #0
 8013654:	719a      	strb	r2, [r3, #6]
 8013656:	2200      	movs	r2, #0
 8013658:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801365a:	f7f5 fdaf 	bl	80091bc <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801365e:	f7f5 fd89 	bl	8009174 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8013662:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8013664:	697b      	ldr	r3, [r7, #20]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	2b02      	cmp	r3, #2
 801366a:	d006      	beq.n	801367a <ZbExtendedAddress+0x66>
 801366c:	4b0c      	ldr	r3, [pc, #48]	@ (80136a0 <ZbExtendedAddress+0x8c>)
 801366e:	4a0d      	ldr	r2, [pc, #52]	@ (80136a4 <ZbExtendedAddress+0x90>)
 8013670:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8013674:	480c      	ldr	r0, [pc, #48]	@ (80136a8 <ZbExtendedAddress+0x94>)
 8013676:	f003 f9e3 	bl	8016a40 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	f103 0108 	add.w	r1, r3, #8
 8013680:	f107 0308 	add.w	r3, r7, #8
 8013684:	2208      	movs	r2, #8
 8013686:	4618      	mov	r0, r3
 8013688:	f7ff fec4 	bl	8013414 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 801368c:	f7ff f922 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return ext_addr;
 8013690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8013694:	4610      	mov	r0, r2
 8013696:	4619      	mov	r1, r3
 8013698:	3718      	adds	r7, #24
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	0801843c 	.word	0x0801843c
 80136a4:	08018d04 	.word	0x08018d04
 80136a8:	080183b0 	.word	0x080183b0

080136ac <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 80136ac:	b580      	push	{r7, lr}
 80136ae:	b084      	sub	sp, #16
 80136b0:	af00      	add	r7, sp, #0
 80136b2:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 80136b4:	2300      	movs	r3, #0
 80136b6:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 80136b8:	f107 020e 	add.w	r2, r7, #14
 80136bc:	2302      	movs	r3, #2
 80136be:	2196      	movs	r1, #150	@ 0x96
 80136c0:	6878      	ldr	r0, [r7, #4]
 80136c2:	f000 fc8d 	bl	8013fe0 <ZbNwkGet>
    return nwkAddr;
 80136c6:	89fb      	ldrh	r3, [r7, #14]
}
 80136c8:	4618      	mov	r0, r3
 80136ca:	3710      	adds	r7, #16
 80136cc:	46bd      	mov	sp, r7
 80136ce:	bd80      	pop	{r7, pc}

080136d0 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b084      	sub	sp, #16
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80136d8:	f7f5 fdae 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80136dc:	f7f5 fd3e 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80136e0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	2200      	movs	r2, #0
 80136e6:	f042 021b 	orr.w	r2, r2, #27
 80136ea:	701a      	strb	r2, [r3, #0]
 80136ec:	2200      	movs	r2, #0
 80136ee:	705a      	strb	r2, [r3, #1]
 80136f0:	2200      	movs	r2, #0
 80136f2:	709a      	strb	r2, [r3, #2]
 80136f4:	2200      	movs	r2, #0
 80136f6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2200      	movs	r2, #0
 80136fc:	f042 0201 	orr.w	r2, r2, #1
 8013700:	711a      	strb	r2, [r3, #4]
 8013702:	2200      	movs	r2, #0
 8013704:	715a      	strb	r2, [r3, #5]
 8013706:	2200      	movs	r2, #0
 8013708:	719a      	strb	r2, [r3, #6]
 801370a:	2200      	movs	r2, #0
 801370c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801370e:	687a      	ldr	r2, [r7, #4]
 8013710:	68fb      	ldr	r3, [r7, #12]
 8013712:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013714:	f7f5 fd52 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013718:	f7ff f8dc 	bl	80128d4 <Post_ZigbeeCmdProcessing>
}
 801371c:	bf00      	nop
 801371e:	3710      	adds	r7, #16
 8013720:	46bd      	mov	sp, r7
 8013722:	bd80      	pop	{r7, pc}

08013724 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	b088      	sub	sp, #32
 8013728:	af00      	add	r7, sp, #0
 801372a:	60f8      	str	r0, [r7, #12]
 801372c:	60b9      	str	r1, [r7, #8]
 801372e:	607a      	str	r2, [r7, #4]
 8013730:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8013732:	6839      	ldr	r1, [r7, #0]
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7ff fe8c 	bl	8013452 <zb_ipc_m4_cb_info_alloc>
 801373a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d101      	bne.n	8013746 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8013742:	2370      	movs	r3, #112	@ 0x70
 8013744:	e036      	b.n	80137b4 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	461a      	mov	r2, r3
 8013750:	4b1a      	ldr	r3, [pc, #104]	@ (80137bc <ZbStartup+0x98>)
 8013752:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 8013754:	f7f5 fd70 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013758:	f7f5 fd00 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801375c:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 801375e:	69bb      	ldr	r3, [r7, #24]
 8013760:	2200      	movs	r2, #0
 8013762:	f042 021c 	orr.w	r2, r2, #28
 8013766:	701a      	strb	r2, [r3, #0]
 8013768:	2200      	movs	r2, #0
 801376a:	705a      	strb	r2, [r3, #1]
 801376c:	2200      	movs	r2, #0
 801376e:	709a      	strb	r2, [r3, #2]
 8013770:	2200      	movs	r2, #0
 8013772:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013774:	69bb      	ldr	r3, [r7, #24]
 8013776:	2200      	movs	r2, #0
 8013778:	f042 0202 	orr.w	r2, r2, #2
 801377c:	711a      	strb	r2, [r3, #4]
 801377e:	2200      	movs	r2, #0
 8013780:	715a      	strb	r2, [r3, #5]
 8013782:	2200      	movs	r2, #0
 8013784:	719a      	strb	r2, [r3, #6]
 8013786:	2200      	movs	r2, #0
 8013788:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801378a:	68ba      	ldr	r2, [r7, #8]
 801378c:	69bb      	ldr	r3, [r7, #24]
 801378e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8013790:	69fa      	ldr	r2, [r7, #28]
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013796:	f7f5 fd11 	bl	80091bc <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 801379a:	f7ff fe83 	bl	80134a4 <zb_ipc_m4_get_retval>
 801379e:	4603      	mov	r3, r0
 80137a0:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80137a2:	f7ff f897 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 80137a6:	7dfb      	ldrb	r3, [r7, #23]
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d002      	beq.n	80137b2 <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 80137ac:	69f8      	ldr	r0, [r7, #28]
 80137ae:	f7ff fe6d 	bl	801348c <zb_ipc_m4_cb_info_free>
    }
    return status;
 80137b2:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3720      	adds	r7, #32
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}
 80137bc:	20001a04 	.word	0x20001a04

080137c0 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b08c      	sub	sp, #48	@ 0x30
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	60f8      	str	r0, [r7, #12]
 80137c8:	607a      	str	r2, [r7, #4]
 80137ca:	603b      	str	r3, [r7, #0]
 80137cc:	460b      	mov	r3, r1
 80137ce:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 80137d0:	897b      	ldrh	r3, [r7, #10]
 80137d2:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 80137dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80137de:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 80137e0:	f7f5 fd2a 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80137e4:	f7f5 fcba 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80137e8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 80137ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ec:	2200      	movs	r2, #0
 80137ee:	701a      	strb	r2, [r3, #0]
 80137f0:	2200      	movs	r2, #0
 80137f2:	f042 0202 	orr.w	r2, r2, #2
 80137f6:	705a      	strb	r2, [r3, #1]
 80137f8:	2200      	movs	r2, #0
 80137fa:	709a      	strb	r2, [r3, #2]
 80137fc:	2200      	movs	r2, #0
 80137fe:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013800:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013802:	2200      	movs	r2, #0
 8013804:	f042 0202 	orr.w	r2, r2, #2
 8013808:	711a      	strb	r2, [r3, #4]
 801380a:	2200      	movs	r2, #0
 801380c:	715a      	strb	r2, [r3, #5]
 801380e:	2200      	movs	r2, #0
 8013810:	719a      	strb	r2, [r3, #6]
 8013812:	2200      	movs	r2, #0
 8013814:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 8013816:	f107 0218 	add.w	r2, r7, #24
 801381a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801381c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 801381e:	f107 0214 	add.w	r2, r7, #20
 8013822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013824:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013826:	f7f5 fcc9 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801382a:	f7ff f853 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 801382e:	7d3b      	ldrb	r3, [r7, #20]
 8013830:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8013834:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8013838:	4618      	mov	r0, r3
 801383a:	3730      	adds	r7, #48	@ 0x30
 801383c:	46bd      	mov	sp, r7
 801383e:	bd80      	pop	{r7, pc}

08013840 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 8013840:	b580      	push	{r7, lr}
 8013842:	b088      	sub	sp, #32
 8013844:	af00      	add	r7, sp, #0
 8013846:	60f8      	str	r0, [r7, #12]
 8013848:	60b9      	str	r1, [r7, #8]
 801384a:	607a      	str	r2, [r7, #4]
 801384c:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 801384e:	6839      	ldr	r1, [r7, #0]
 8013850:	6878      	ldr	r0, [r7, #4]
 8013852:	f7ff fdfe 	bl	8013452 <zb_ipc_m4_cb_info_alloc>
 8013856:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8013858:	69fb      	ldr	r3, [r7, #28]
 801385a:	2b00      	cmp	r3, #0
 801385c:	d101      	bne.n	8013862 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 801385e:	2370      	movs	r3, #112	@ 0x70
 8013860:	e031      	b.n	80138c6 <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 8013862:	f7f5 fce9 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013866:	f7f5 fc79 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801386a:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	2200      	movs	r2, #0
 8013870:	f042 0204 	orr.w	r2, r2, #4
 8013874:	701a      	strb	r2, [r3, #0]
 8013876:	2200      	movs	r2, #0
 8013878:	f042 0202 	orr.w	r2, r2, #2
 801387c:	705a      	strb	r2, [r3, #1]
 801387e:	2200      	movs	r2, #0
 8013880:	709a      	strb	r2, [r3, #2]
 8013882:	2200      	movs	r2, #0
 8013884:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	2200      	movs	r2, #0
 801388a:	f042 0202 	orr.w	r2, r2, #2
 801388e:	711a      	strb	r2, [r3, #4]
 8013890:	2200      	movs	r2, #0
 8013892:	715a      	strb	r2, [r3, #5]
 8013894:	2200      	movs	r2, #0
 8013896:	719a      	strb	r2, [r3, #6]
 8013898:	2200      	movs	r2, #0
 801389a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 801389c:	68ba      	ldr	r2, [r7, #8]
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 80138a2:	69fa      	ldr	r2, [r7, #28]
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80138a8:	f7f5 fc88 	bl	80091bc <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 80138ac:	f7ff fdfa 	bl	80134a4 <zb_ipc_m4_get_retval>
 80138b0:	4603      	mov	r3, r0
 80138b2:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80138b4:	f7ff f80e 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 80138b8:	7dfb      	ldrb	r3, [r7, #23]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d002      	beq.n	80138c4 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 80138be:	69f8      	ldr	r0, [r7, #28]
 80138c0:	f7ff fde4 	bl	801348c <zb_ipc_m4_cb_info_free>
    }
    return status;
 80138c4:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 80138c6:	4618      	mov	r0, r3
 80138c8:	3720      	adds	r7, #32
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}

080138ce <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 80138ce:	b580      	push	{r7, lr}
 80138d0:	b084      	sub	sp, #16
 80138d2:	af00      	add	r7, sp, #0
 80138d4:	6078      	str	r0, [r7, #4]
 80138d6:	460b      	mov	r3, r1
 80138d8:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 80138da:	f7f5 fcad 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80138de:	f7f5 fc3d 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80138e2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2200      	movs	r2, #0
 80138e8:	f042 020d 	orr.w	r2, r2, #13
 80138ec:	701a      	strb	r2, [r3, #0]
 80138ee:	2200      	movs	r2, #0
 80138f0:	f042 0202 	orr.w	r2, r2, #2
 80138f4:	705a      	strb	r2, [r3, #1]
 80138f6:	2200      	movs	r2, #0
 80138f8:	709a      	strb	r2, [r3, #2]
 80138fa:	2200      	movs	r2, #0
 80138fc:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80138fe:	68fb      	ldr	r3, [r7, #12]
 8013900:	2200      	movs	r2, #0
 8013902:	f042 0201 	orr.w	r2, r2, #1
 8013906:	711a      	strb	r2, [r3, #4]
 8013908:	2200      	movs	r2, #0
 801390a:	715a      	strb	r2, [r3, #5]
 801390c:	2200      	movs	r2, #0
 801390e:	719a      	strb	r2, [r3, #6]
 8013910:	2200      	movs	r2, #0
 8013912:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8013914:	78fa      	ldrb	r2, [r7, #3]
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801391a:	f7f5 fc4f 	bl	80091bc <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 801391e:	f7ff fdc1 	bl	80134a4 <zb_ipc_m4_get_retval>
 8013922:	4603      	mov	r3, r0
 8013924:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 8013926:	f7fe ffd5 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return val_ret;
 801392a:	897b      	ldrh	r3, [r7, #10]
}
 801392c:	4618      	mov	r0, r3
 801392e:	3710      	adds	r7, #16
 8013930:	46bd      	mov	sp, r7
 8013932:	bd80      	pop	{r7, pc}

08013934 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8013934:	b480      	push	{r7}
 8013936:	b083      	sub	sp, #12
 8013938:	af00      	add	r7, sp, #0
 801393a:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	2b01      	cmp	r3, #1
 8013942:	d101      	bne.n	8013948 <ZbApsAddrIsBcast+0x14>
        return true;
 8013944:	2301      	movs	r3, #1
 8013946:	e012      	b.n	801396e <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	781b      	ldrb	r3, [r3, #0]
 801394c:	2b02      	cmp	r3, #2
 801394e:	d10d      	bne.n	801396c <ZbApsAddrIsBcast+0x38>
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	88db      	ldrh	r3, [r3, #6]
 8013954:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013958:	4293      	cmp	r3, r2
 801395a:	d907      	bls.n	801396c <ZbApsAddrIsBcast+0x38>
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	88db      	ldrh	r3, [r3, #6]
 8013960:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013964:	4293      	cmp	r3, r2
 8013966:	d001      	beq.n	801396c <ZbApsAddrIsBcast+0x38>
        return true;
 8013968:	2301      	movs	r3, #1
 801396a:	e000      	b.n	801396e <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 801396c:	2300      	movs	r3, #0
}
 801396e:	4618      	mov	r0, r3
 8013970:	370c      	adds	r7, #12
 8013972:	46bd      	mov	sp, r7
 8013974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013978:	4770      	bx	lr

0801397a <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 801397a:	b5b0      	push	{r4, r5, r7, lr}
 801397c:	b082      	sub	sp, #8
 801397e:	af00      	add	r7, sp, #0
 8013980:	6078      	str	r0, [r7, #4]
 8013982:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 8013984:	683b      	ldr	r3, [r7, #0]
 8013986:	781b      	ldrb	r3, [r3, #0]
 8013988:	2b03      	cmp	r3, #3
 801398a:	d10d      	bne.n	80139a8 <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 801398c:	683b      	ldr	r3, [r7, #0]
 801398e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8013992:	6878      	ldr	r0, [r7, #4]
 8013994:	f7ff fe3e 	bl	8013614 <ZbExtendedAddress>
 8013998:	4602      	mov	r2, r0
 801399a:	460b      	mov	r3, r1
 801399c:	429d      	cmp	r5, r3
 801399e:	bf08      	it	eq
 80139a0:	4294      	cmpeq	r4, r2
 80139a2:	d101      	bne.n	80139a8 <ZbApsAddrIsLocal+0x2e>
            return true;
 80139a4:	2301      	movs	r3, #1
 80139a6:	e00e      	b.n	80139c6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 80139a8:	683b      	ldr	r3, [r7, #0]
 80139aa:	781b      	ldrb	r3, [r3, #0]
 80139ac:	2b02      	cmp	r3, #2
 80139ae:	d109      	bne.n	80139c4 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 80139b0:	683b      	ldr	r3, [r7, #0]
 80139b2:	88dc      	ldrh	r4, [r3, #6]
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f7ff fe79 	bl	80136ac <ZbShortAddress>
 80139ba:	4603      	mov	r3, r0
 80139bc:	429c      	cmp	r4, r3
 80139be:	d101      	bne.n	80139c4 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 80139c0:	2301      	movs	r3, #1
 80139c2:	e000      	b.n	80139c6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 80139c4:	2300      	movs	r3, #0
}
 80139c6:	4618      	mov	r0, r3
 80139c8:	3708      	adds	r7, #8
 80139ca:	46bd      	mov	sp, r7
 80139cc:	bdb0      	pop	{r4, r5, r7, pc}

080139ce <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80139ce:	b580      	push	{r7, lr}
 80139d0:	b08a      	sub	sp, #40	@ 0x28
 80139d2:	af00      	add	r7, sp, #0
 80139d4:	60f8      	str	r0, [r7, #12]
 80139d6:	607a      	str	r2, [r7, #4]
 80139d8:	603b      	str	r3, [r7, #0]
 80139da:	460b      	mov	r3, r1
 80139dc:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 80139de:	897b      	ldrh	r3, [r7, #10]
 80139e0:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 80139e6:	683b      	ldr	r3, [r7, #0]
 80139e8:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 80139ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80139ec:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 80139ee:	f7f5 fc23 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80139f2:	f7f5 fbb3 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80139f6:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 80139f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80139fa:	2200      	movs	r2, #0
 80139fc:	f042 0210 	orr.w	r2, r2, #16
 8013a00:	701a      	strb	r2, [r3, #0]
 8013a02:	2200      	movs	r2, #0
 8013a04:	f042 0202 	orr.w	r2, r2, #2
 8013a08:	705a      	strb	r2, [r3, #1]
 8013a0a:	2200      	movs	r2, #0
 8013a0c:	709a      	strb	r2, [r3, #2]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a14:	2200      	movs	r2, #0
 8013a16:	f042 0202 	orr.w	r2, r2, #2
 8013a1a:	711a      	strb	r2, [r3, #4]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	715a      	strb	r2, [r3, #5]
 8013a20:	2200      	movs	r2, #0
 8013a22:	719a      	strb	r2, [r3, #6]
 8013a24:	2200      	movs	r2, #0
 8013a26:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 8013a28:	f107 0214 	add.w	r2, r7, #20
 8013a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a2e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8013a30:	f107 0210 	add.w	r2, r7, #16
 8013a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013a36:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013a38:	f7f5 fbc0 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013a3c:	f7fe ff4a 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8013a40:	7c3b      	ldrb	r3, [r7, #16]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3728      	adds	r7, #40	@ 0x28
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <ZbApsmeAddGroupReq>:
        *idx = i;
    }
    return key;
}

IPC_REQ_CONF_FUNC(ZbApsmeAddGroupReq, MSG_M4TOM0_APSME_ADD_GROUP,
 8013a4a:	b580      	push	{r7, lr}
 8013a4c:	b086      	sub	sp, #24
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	60f8      	str	r0, [r7, #12]
 8013a52:	60b9      	str	r1, [r7, #8]
 8013a54:	607a      	str	r2, [r7, #4]
 8013a56:	f7f5 fbef 	bl	8009238 <Pre_ZigbeeCmdProcessing>
 8013a5a:	f7f5 fb7f 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013a5e:	6178      	str	r0, [r7, #20]
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	2200      	movs	r2, #0
 8013a64:	f042 0212 	orr.w	r2, r2, #18
 8013a68:	701a      	strb	r2, [r3, #0]
 8013a6a:	2200      	movs	r2, #0
 8013a6c:	f042 0202 	orr.w	r2, r2, #2
 8013a70:	705a      	strb	r2, [r3, #1]
 8013a72:	2200      	movs	r2, #0
 8013a74:	709a      	strb	r2, [r3, #2]
 8013a76:	2200      	movs	r2, #0
 8013a78:	70da      	strb	r2, [r3, #3]
 8013a7a:	697b      	ldr	r3, [r7, #20]
 8013a7c:	2200      	movs	r2, #0
 8013a7e:	f042 0202 	orr.w	r2, r2, #2
 8013a82:	711a      	strb	r2, [r3, #4]
 8013a84:	2200      	movs	r2, #0
 8013a86:	715a      	strb	r2, [r3, #5]
 8013a88:	2200      	movs	r2, #0
 8013a8a:	719a      	strb	r2, [r3, #6]
 8013a8c:	2200      	movs	r2, #0
 8013a8e:	71da      	strb	r2, [r3, #7]
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	609a      	str	r2, [r3, #8]
 8013a96:	687a      	ldr	r2, [r7, #4]
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	60da      	str	r2, [r3, #12]
 8013a9c:	f7f5 fb8e 	bl	80091bc <ZIGBEE_CmdTransfer>
 8013aa0:	f7fe ff18 	bl	80128d4 <Post_ZigbeeCmdProcessing>
 8013aa4:	3718      	adds	r7, #24
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bd80      	pop	{r7, pc}

08013aaa <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 8013aaa:	b580      	push	{r7, lr}
 8013aac:	b086      	sub	sp, #24
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	60f8      	str	r0, [r7, #12]
 8013ab2:	60b9      	str	r1, [r7, #8]
 8013ab4:	607a      	str	r2, [r7, #4]
 8013ab6:	f7f5 fbbf 	bl	8009238 <Pre_ZigbeeCmdProcessing>
 8013aba:	f7f5 fb4f 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013abe:	6178      	str	r0, [r7, #20]
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	f042 0215 	orr.w	r2, r2, #21
 8013ac8:	701a      	strb	r2, [r3, #0]
 8013aca:	2200      	movs	r2, #0
 8013acc:	f042 0202 	orr.w	r2, r2, #2
 8013ad0:	705a      	strb	r2, [r3, #1]
 8013ad2:	2200      	movs	r2, #0
 8013ad4:	709a      	strb	r2, [r3, #2]
 8013ad6:	2200      	movs	r2, #0
 8013ad8:	70da      	strb	r2, [r3, #3]
 8013ada:	697b      	ldr	r3, [r7, #20]
 8013adc:	2200      	movs	r2, #0
 8013ade:	f042 0202 	orr.w	r2, r2, #2
 8013ae2:	711a      	strb	r2, [r3, #4]
 8013ae4:	2200      	movs	r2, #0
 8013ae6:	715a      	strb	r2, [r3, #5]
 8013ae8:	2200      	movs	r2, #0
 8013aea:	719a      	strb	r2, [r3, #6]
 8013aec:	2200      	movs	r2, #0
 8013aee:	71da      	strb	r2, [r3, #7]
 8013af0:	68ba      	ldr	r2, [r7, #8]
 8013af2:	697b      	ldr	r3, [r7, #20]
 8013af4:	609a      	str	r2, [r3, #8]
 8013af6:	687a      	ldr	r2, [r7, #4]
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	60da      	str	r2, [r3, #12]
 8013afc:	f7f5 fb5e 	bl	80091bc <ZIGBEE_CmdTransfer>
 8013b00:	f7fe fee8 	bl	80128d4 <Post_ZigbeeCmdProcessing>
 8013b04:	3718      	adds	r7, #24
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}

08013b0a <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 8013b0a:	b580      	push	{r7, lr}
 8013b0c:	b092      	sub	sp, #72	@ 0x48
 8013b0e:	af02      	add	r7, sp, #8
 8013b10:	6078      	str	r0, [r7, #4]
 8013b12:	460b      	mov	r3, r1
 8013b14:	70fb      	strb	r3, [r7, #3]
 8013b16:	4613      	mov	r3, r2
 8013b18:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f7ff fd7a 	bl	8013614 <ZbExtendedAddress>
 8013b20:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 8013b24:	2300      	movs	r3, #0
 8013b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8013b28:	f107 0208 	add.w	r2, r7, #8
 8013b2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b2e:	9300      	str	r3, [sp, #0]
 8013b30:	2320      	movs	r3, #32
 8013b32:	21c1      	movs	r1, #193	@ 0xc1
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7ff ff4a 	bl	80139ce <ZbApsGetIndex>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8013b40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d120      	bne.n	8013b8a <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 8013b48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013b4c:	4313      	orrs	r3, r2
 8013b4e:	d011      	beq.n	8013b74 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8013b50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013b54:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8013b58:	4299      	cmp	r1, r3
 8013b5a:	bf08      	it	eq
 8013b5c:	4290      	cmpeq	r0, r2
 8013b5e:	d10b      	bne.n	8013b78 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8013b60:	7c3b      	ldrb	r3, [r7, #16]
 8013b62:	78fa      	ldrb	r2, [r7, #3]
 8013b64:	429a      	cmp	r2, r3
 8013b66:	d109      	bne.n	8013b7c <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 8013b68:	8a7b      	ldrh	r3, [r7, #18]
 8013b6a:	883a      	ldrh	r2, [r7, #0]
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d107      	bne.n	8013b80 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8013b70:	2301      	movs	r3, #1
 8013b72:	e00c      	b.n	8013b8e <ZbApsBindSrcExists+0x84>
            continue;
 8013b74:	bf00      	nop
 8013b76:	e004      	b.n	8013b82 <ZbApsBindSrcExists+0x78>
            continue;
 8013b78:	bf00      	nop
 8013b7a:	e002      	b.n	8013b82 <ZbApsBindSrcExists+0x78>
            continue;
 8013b7c:	bf00      	nop
 8013b7e:	e000      	b.n	8013b82 <ZbApsBindSrcExists+0x78>
            continue;
 8013b80:	bf00      	nop
    for (i = 0;; i++) {
 8013b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013b84:	3301      	adds	r3, #1
 8013b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8013b88:	e7ce      	b.n	8013b28 <ZbApsBindSrcExists+0x1e>
            break;
 8013b8a:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8013b8c:	2300      	movs	r3, #0
}
 8013b8e:	4618      	mov	r0, r3
 8013b90:	3740      	adds	r7, #64	@ 0x40
 8013b92:	46bd      	mov	sp, r7
 8013b94:	bd80      	pop	{r7, pc}
	...

08013b98 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 8013b98:	b580      	push	{r7, lr}
 8013b9a:	b088      	sub	sp, #32
 8013b9c:	af00      	add	r7, sp, #0
 8013b9e:	60f8      	str	r0, [r7, #12]
 8013ba0:	60b9      	str	r1, [r7, #8]
 8013ba2:	603b      	str	r3, [r7, #0]
 8013ba4:	4613      	mov	r3, r2
 8013ba6:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013ba8:	2300      	movs	r3, #0
 8013baa:	61bb      	str	r3, [r7, #24]
 8013bac:	e00e      	b.n	8013bcc <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8013bae:	69ba      	ldr	r2, [r7, #24]
 8013bb0:	4613      	mov	r3, r2
 8013bb2:	005b      	lsls	r3, r3, #1
 8013bb4:	4413      	add	r3, r2
 8013bb6:	009b      	lsls	r3, r3, #2
 8013bb8:	4a28      	ldr	r2, [pc, #160]	@ (8013c5c <ZbMsgFilterRegister+0xc4>)
 8013bba:	4413      	add	r3, r2
 8013bbc:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8013bbe:	69fb      	ldr	r3, [r7, #28]
 8013bc0:	681b      	ldr	r3, [r3, #0]
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d006      	beq.n	8013bd4 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013bc6:	69bb      	ldr	r3, [r7, #24]
 8013bc8:	3301      	adds	r3, #1
 8013bca:	61bb      	str	r3, [r7, #24]
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	2b1f      	cmp	r3, #31
 8013bd0:	d9ed      	bls.n	8013bae <ZbMsgFilterRegister+0x16>
 8013bd2:	e000      	b.n	8013bd6 <ZbMsgFilterRegister+0x3e>
            break;
 8013bd4:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8013bd6:	69bb      	ldr	r3, [r7, #24]
 8013bd8:	2b20      	cmp	r3, #32
 8013bda:	d101      	bne.n	8013be0 <ZbMsgFilterRegister+0x48>
        return NULL;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	e038      	b.n	8013c52 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 8013be0:	f7f5 fb2a 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013be4:	f7f5 faba 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013be8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 8013bea:	697b      	ldr	r3, [r7, #20]
 8013bec:	2200      	movs	r2, #0
 8013bee:	f042 0210 	orr.w	r2, r2, #16
 8013bf2:	701a      	strb	r2, [r3, #0]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	705a      	strb	r2, [r3, #1]
 8013bf8:	2200      	movs	r2, #0
 8013bfa:	709a      	strb	r2, [r3, #2]
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	2200      	movs	r2, #0
 8013c04:	f042 0203 	orr.w	r2, r2, #3
 8013c08:	711a      	strb	r2, [r3, #4]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	715a      	strb	r2, [r3, #5]
 8013c0e:	2200      	movs	r2, #0
 8013c10:	719a      	strb	r2, [r3, #6]
 8013c12:	2200      	movs	r2, #0
 8013c14:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 8013c16:	697b      	ldr	r3, [r7, #20]
 8013c18:	68ba      	ldr	r2, [r7, #8]
 8013c1a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 8013c1c:	79fa      	ldrb	r2, [r7, #7]
 8013c1e:	697b      	ldr	r3, [r7, #20]
 8013c20:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 8013c22:	69fa      	ldr	r2, [r7, #28]
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8013c28:	f7f5 fac8 	bl	80091bc <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 8013c2c:	f7ff fc3a 	bl	80134a4 <zb_ipc_m4_get_retval>
 8013c30:	4603      	mov	r3, r0
 8013c32:	613b      	str	r3, [r7, #16]
    Post_ZigbeeCmdProcessing();
 8013c34:	f7fe fe4e 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    if (filter != NULL) {
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d008      	beq.n	8013c50 <ZbMsgFilterRegister+0xb8>
        cb_info->filter = filter;
 8013c3e:	69fb      	ldr	r3, [r7, #28]
 8013c40:	693a      	ldr	r2, [r7, #16]
 8013c42:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	683a      	ldr	r2, [r7, #0]
 8013c48:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 8013c4a:	69fb      	ldr	r3, [r7, #28]
 8013c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013c4e:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8013c50:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8013c52:	4618      	mov	r0, r3
 8013c54:	3720      	adds	r7, #32
 8013c56:	46bd      	mov	sp, r7
 8013c58:	bd80      	pop	{r7, pc}
 8013c5a:	bf00      	nop
 8013c5c:	20001a2c 	.word	0x20001a2c

08013c60 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b086      	sub	sp, #24
 8013c64:	af00      	add	r7, sp, #0
 8013c66:	6078      	str	r0, [r7, #4]
 8013c68:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d046      	beq.n	8013cfe <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013c70:	2300      	movs	r3, #0
 8013c72:	613b      	str	r3, [r7, #16]
 8013c74:	e00f      	b.n	8013c96 <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 8013c76:	693a      	ldr	r2, [r7, #16]
 8013c78:	4613      	mov	r3, r2
 8013c7a:	005b      	lsls	r3, r3, #1
 8013c7c:	4413      	add	r3, r2
 8013c7e:	009b      	lsls	r3, r3, #2
 8013c80:	4a22      	ldr	r2, [pc, #136]	@ (8013d0c <ZbMsgFilterRemove+0xac>)
 8013c82:	4413      	add	r3, r2
 8013c84:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 8013c86:	697b      	ldr	r3, [r7, #20]
 8013c88:	681b      	ldr	r3, [r3, #0]
 8013c8a:	683a      	ldr	r2, [r7, #0]
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	d006      	beq.n	8013c9e <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013c90:	693b      	ldr	r3, [r7, #16]
 8013c92:	3301      	adds	r3, #1
 8013c94:	613b      	str	r3, [r7, #16]
 8013c96:	693b      	ldr	r3, [r7, #16]
 8013c98:	2b1f      	cmp	r3, #31
 8013c9a:	d9ec      	bls.n	8013c76 <ZbMsgFilterRemove+0x16>
 8013c9c:	e000      	b.n	8013ca0 <ZbMsgFilterRemove+0x40>
            break;
 8013c9e:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8013ca0:	693b      	ldr	r3, [r7, #16]
 8013ca2:	2b20      	cmp	r3, #32
 8013ca4:	d02d      	beq.n	8013d02 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 8013ca6:	f7f5 fac7 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013caa:	f7f5 fa57 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013cae:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8013cb0:	68fb      	ldr	r3, [r7, #12]
 8013cb2:	2200      	movs	r2, #0
 8013cb4:	f042 0211 	orr.w	r2, r2, #17
 8013cb8:	701a      	strb	r2, [r3, #0]
 8013cba:	2200      	movs	r2, #0
 8013cbc:	705a      	strb	r2, [r3, #1]
 8013cbe:	2200      	movs	r2, #0
 8013cc0:	709a      	strb	r2, [r3, #2]
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	2200      	movs	r2, #0
 8013cca:	f042 0201 	orr.w	r2, r2, #1
 8013cce:	711a      	strb	r2, [r3, #4]
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	715a      	strb	r2, [r3, #5]
 8013cd4:	2200      	movs	r2, #0
 8013cd6:	719a      	strb	r2, [r3, #6]
 8013cd8:	2200      	movs	r2, #0
 8013cda:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 8013cdc:	683a      	ldr	r2, [r7, #0]
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013ce2:	f7f5 fa6b 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013ce6:	f7fe fdf5 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    cb_info->filter = NULL;
 8013cea:	697b      	ldr	r3, [r7, #20]
 8013cec:	2200      	movs	r2, #0
 8013cee:	701a      	strb	r2, [r3, #0]
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	705a      	strb	r2, [r3, #1]
 8013cf4:	2200      	movs	r2, #0
 8013cf6:	709a      	strb	r2, [r3, #2]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	70da      	strb	r2, [r3, #3]
 8013cfc:	e002      	b.n	8013d04 <ZbMsgFilterRemove+0xa4>
        return;
 8013cfe:	bf00      	nop
 8013d00:	e000      	b.n	8013d04 <ZbMsgFilterRemove+0xa4>
        return;
 8013d02:	bf00      	nop
}
 8013d04:	3718      	adds	r7, #24
 8013d06:	46bd      	mov	sp, r7
 8013d08:	bd80      	pop	{r7, pc}
 8013d0a:	bf00      	nop
 8013d0c:	20001a2c 	.word	0x20001a2c

08013d10 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b086      	sub	sp, #24
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	4a24      	ldr	r2, [pc, #144]	@ (8013db0 <ZbTimerAlloc+0xa0>)
 8013d20:	210c      	movs	r1, #12
 8013d22:	2000      	movs	r0, #0
 8013d24:	f000 fc0e 	bl	8014544 <zb_heap_alloc>
 8013d28:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 8013d2a:	697b      	ldr	r3, [r7, #20]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d039      	beq.n	8013da4 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 8013d30:	697b      	ldr	r3, [r7, #20]
 8013d32:	68ba      	ldr	r2, [r7, #8]
 8013d34:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	687a      	ldr	r2, [r7, #4]
 8013d3a:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8013d3c:	f7f5 fa7c 	bl	8009238 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013d40:	f7f5 fa0c 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013d44:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	2200      	movs	r2, #0
 8013d4a:	f042 0214 	orr.w	r2, r2, #20
 8013d4e:	701a      	strb	r2, [r3, #0]
 8013d50:	2200      	movs	r2, #0
 8013d52:	705a      	strb	r2, [r3, #1]
 8013d54:	2200      	movs	r2, #0
 8013d56:	709a      	strb	r2, [r3, #2]
 8013d58:	2200      	movs	r2, #0
 8013d5a:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8013d5c:	693b      	ldr	r3, [r7, #16]
 8013d5e:	2200      	movs	r2, #0
 8013d60:	f042 0201 	orr.w	r2, r2, #1
 8013d64:	711a      	strb	r2, [r3, #4]
 8013d66:	2200      	movs	r2, #0
 8013d68:	715a      	strb	r2, [r3, #5]
 8013d6a:	2200      	movs	r2, #0
 8013d6c:	719a      	strb	r2, [r3, #6]
 8013d6e:	2200      	movs	r2, #0
 8013d70:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8013d72:	697a      	ldr	r2, [r7, #20]
 8013d74:	693b      	ldr	r3, [r7, #16]
 8013d76:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 8013d78:	f7f5 fa20 	bl	80091bc <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8013d7c:	f7ff fb92 	bl	80134a4 <zb_ipc_m4_get_retval>
 8013d80:	4603      	mov	r3, r0
 8013d82:	461a      	mov	r2, r3
 8013d84:	697b      	ldr	r3, [r7, #20]
 8013d86:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 8013d88:	f7fe fda4 	bl	80128d4 <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 8013d8c:	697b      	ldr	r3, [r7, #20]
 8013d8e:	689b      	ldr	r3, [r3, #8]
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d107      	bne.n	8013da4 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 8013d94:	2300      	movs	r3, #0
 8013d96:	4a06      	ldr	r2, [pc, #24]	@ (8013db0 <ZbTimerAlloc+0xa0>)
 8013d98:	6979      	ldr	r1, [r7, #20]
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	f000 fbe1 	bl	8014562 <zb_heap_free>
            timer = NULL;
 8013da0:	2300      	movs	r3, #0
 8013da2:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8013da4:	697b      	ldr	r3, [r7, #20]
}
 8013da6:	4618      	mov	r0, r3
 8013da8:	3718      	adds	r7, #24
 8013daa:	46bd      	mov	sp, r7
 8013dac:	bd80      	pop	{r7, pc}
 8013dae:	bf00      	nop
 8013db0:	08018450 	.word	0x08018450

08013db4 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8013db4:	b580      	push	{r7, lr}
 8013db6:	b084      	sub	sp, #16
 8013db8:	af00      	add	r7, sp, #0
 8013dba:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8013dbc:	f7f5 fa3c 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013dc0:	f7f5 f9cc 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013dc4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	f042 0215 	orr.w	r2, r2, #21
 8013dce:	701a      	strb	r2, [r3, #0]
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	705a      	strb	r2, [r3, #1]
 8013dd4:	2200      	movs	r2, #0
 8013dd6:	709a      	strb	r2, [r3, #2]
 8013dd8:	2200      	movs	r2, #0
 8013dda:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
 8013dde:	2200      	movs	r2, #0
 8013de0:	f042 0201 	orr.w	r2, r2, #1
 8013de4:	711a      	strb	r2, [r3, #4]
 8013de6:	2200      	movs	r2, #0
 8013de8:	715a      	strb	r2, [r3, #5]
 8013dea:	2200      	movs	r2, #0
 8013dec:	719a      	strb	r2, [r3, #6]
 8013dee:	2200      	movs	r2, #0
 8013df0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	689b      	ldr	r3, [r3, #8]
 8013df6:	461a      	mov	r2, r3
 8013df8:	68fb      	ldr	r3, [r7, #12]
 8013dfa:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013dfc:	f7f5 f9de 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013e00:	f7fe fd68 	bl	80128d4 <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 8013e04:	2300      	movs	r3, #0
 8013e06:	4a04      	ldr	r2, [pc, #16]	@ (8013e18 <ZbTimerFree+0x64>)
 8013e08:	6879      	ldr	r1, [r7, #4]
 8013e0a:	2000      	movs	r0, #0
 8013e0c:	f000 fba9 	bl	8014562 <zb_heap_free>
}
 8013e10:	bf00      	nop
 8013e12:	3710      	adds	r7, #16
 8013e14:	46bd      	mov	sp, r7
 8013e16:	bd80      	pop	{r7, pc}
 8013e18:	08018450 	.word	0x08018450

08013e1c <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b084      	sub	sp, #16
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
 8013e24:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8013e26:	f7f5 fa07 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013e2a:	f7f5 f997 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013e2e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 8013e30:	68fb      	ldr	r3, [r7, #12]
 8013e32:	2200      	movs	r2, #0
 8013e34:	f042 0217 	orr.w	r2, r2, #23
 8013e38:	701a      	strb	r2, [r3, #0]
 8013e3a:	2200      	movs	r2, #0
 8013e3c:	705a      	strb	r2, [r3, #1]
 8013e3e:	2200      	movs	r2, #0
 8013e40:	709a      	strb	r2, [r3, #2]
 8013e42:	2200      	movs	r2, #0
 8013e44:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013e46:	68fb      	ldr	r3, [r7, #12]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	f042 0202 	orr.w	r2, r2, #2
 8013e4e:	711a      	strb	r2, [r3, #4]
 8013e50:	2200      	movs	r2, #0
 8013e52:	715a      	strb	r2, [r3, #5]
 8013e54:	2200      	movs	r2, #0
 8013e56:	719a      	strb	r2, [r3, #6]
 8013e58:	2200      	movs	r2, #0
 8013e5a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8013e5c:	687b      	ldr	r3, [r7, #4]
 8013e5e:	689b      	ldr	r3, [r3, #8]
 8013e60:	461a      	mov	r2, r3
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	683a      	ldr	r2, [r7, #0]
 8013e6a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013e6c:	f7f5 f9a6 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013e70:	f7fe fd30 	bl	80128d4 <Post_ZigbeeCmdProcessing>
}
 8013e74:	bf00      	nop
 8013e76:	3710      	adds	r7, #16
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 8013e7c:	b480      	push	{r7}
 8013e7e:	b085      	sub	sp, #20
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
 8013e84:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8013e86:	687b      	ldr	r3, [r7, #4]
 8013e88:	4a13      	ldr	r2, [pc, #76]	@ (8013ed8 <ZbTimeoutRemaining+0x5c>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d909      	bls.n	8013ea2 <ZbTimeoutRemaining+0x26>
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013e94:	d805      	bhi.n	8013ea2 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8013e96:	683a      	ldr	r2, [r7, #0]
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	1ad3      	subs	r3, r2, r3
 8013e9c:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	e014      	b.n	8013ecc <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	4a0c      	ldr	r2, [pc, #48]	@ (8013ed8 <ZbTimeoutRemaining+0x5c>)
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	d905      	bls.n	8013eb6 <ZbTimeoutRemaining+0x3a>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013eb0:	d801      	bhi.n	8013eb6 <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	e00a      	b.n	8013ecc <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8013eb6:	687a      	ldr	r2, [r7, #4]
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	429a      	cmp	r2, r3
 8013ebc:	d301      	bcc.n	8013ec2 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	e004      	b.n	8013ecc <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8013ec2:	683a      	ldr	r2, [r7, #0]
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	1ad3      	subs	r3, r2, r3
 8013ec8:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 8013eca:	68fb      	ldr	r3, [r7, #12]
}
 8013ecc:	4618      	mov	r0, r3
 8013ece:	3714      	adds	r7, #20
 8013ed0:	46bd      	mov	sp, r7
 8013ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ed6:	4770      	bx	lr
 8013ed8:	bffffffd 	.word	0xbffffffd

08013edc <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8013edc:	b580      	push	{r7, lr}
 8013ede:	b08c      	sub	sp, #48	@ 0x30
 8013ee0:	af00      	add	r7, sp, #0
 8013ee2:	60f8      	str	r0, [r7, #12]
 8013ee4:	607a      	str	r2, [r7, #4]
 8013ee6:	603b      	str	r3, [r7, #0]
 8013ee8:	460b      	mov	r3, r1
 8013eea:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 8013eec:	897b      	ldrh	r3, [r7, #10]
 8013eee:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 8013ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013efa:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8013efc:	f7f5 f99c 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013f00:	f7f5 f92c 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013f04:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 8013f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f08:	2200      	movs	r2, #0
 8013f0a:	701a      	strb	r2, [r3, #0]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	f042 0203 	orr.w	r2, r2, #3
 8013f12:	705a      	strb	r2, [r3, #1]
 8013f14:	2200      	movs	r2, #0
 8013f16:	709a      	strb	r2, [r3, #2]
 8013f18:	2200      	movs	r2, #0
 8013f1a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f1e:	2200      	movs	r2, #0
 8013f20:	f042 0202 	orr.w	r2, r2, #2
 8013f24:	711a      	strb	r2, [r3, #4]
 8013f26:	2200      	movs	r2, #0
 8013f28:	715a      	strb	r2, [r3, #5]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	719a      	strb	r2, [r3, #6]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 8013f32:	f107 0218 	add.w	r2, r7, #24
 8013f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f38:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 8013f3a:	f107 0214 	add.w	r2, r7, #20
 8013f3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f40:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013f42:	f7f5 f93b 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013f46:	f7fe fcc5 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 8013f4a:	7d3b      	ldrb	r3, [r7, #20]
 8013f4c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8013f50:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8013f54:	4618      	mov	r0, r3
 8013f56:	3730      	adds	r7, #48	@ 0x30
 8013f58:	46bd      	mov	sp, r7
 8013f5a:	bd80      	pop	{r7, pc}

08013f5c <ZbNwkSetIndex>:

enum ZbStatusCodeT
ZbNwkSetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8013f5c:	b580      	push	{r7, lr}
 8013f5e:	b08c      	sub	sp, #48	@ 0x30
 8013f60:	af00      	add	r7, sp, #0
 8013f62:	60f8      	str	r0, [r7, #12]
 8013f64:	607a      	str	r2, [r7, #4]
 8013f66:	603b      	str	r3, [r7, #0]
 8013f68:	460b      	mov	r3, r1
 8013f6a:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeSetReqT nlmeSetReq;
    struct ZbNlmeSetConfT nlmeSetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-SET.request */
    nlmeSetReq.attrId = attrId;
 8013f6c:	897b      	ldrh	r3, [r7, #10]
 8013f6e:	833b      	strh	r3, [r7, #24]
    nlmeSetReq.attr = attrPtr;
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	61fb      	str	r3, [r7, #28]
    nlmeSetReq.attrLength = attrSz;
 8013f74:	683b      	ldr	r3, [r7, #0]
 8013f76:	623b      	str	r3, [r7, #32]
    nlmeSetReq.attrIndex = attrIndex;
 8013f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013f7a:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8013f7c:	f7f5 f95c 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013f80:	f7f5 f8ec 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013f84:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_SET_INDEX;
 8013f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f88:	2200      	movs	r2, #0
 8013f8a:	f042 0201 	orr.w	r2, r2, #1
 8013f8e:	701a      	strb	r2, [r3, #0]
 8013f90:	2200      	movs	r2, #0
 8013f92:	f042 0203 	orr.w	r2, r2, #3
 8013f96:	705a      	strb	r2, [r3, #1]
 8013f98:	2200      	movs	r2, #0
 8013f9a:	709a      	strb	r2, [r3, #2]
 8013f9c:	2200      	movs	r2, #0
 8013f9e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	f042 0202 	orr.w	r2, r2, #2
 8013fa8:	711a      	strb	r2, [r3, #4]
 8013faa:	2200      	movs	r2, #0
 8013fac:	715a      	strb	r2, [r3, #5]
 8013fae:	2200      	movs	r2, #0
 8013fb0:	719a      	strb	r2, [r3, #6]
 8013fb2:	2200      	movs	r2, #0
 8013fb4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeSetReq;
 8013fb6:	f107 0218 	add.w	r2, r7, #24
 8013fba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fbc:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeSetConf;
 8013fbe:	f107 0214 	add.w	r2, r7, #20
 8013fc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fc4:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013fc6:	f7f5 f8f9 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013fca:	f7fe fc83 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    status = nlmeSetConf.status;
 8013fce:	7d3b      	ldrb	r3, [r7, #20]
 8013fd0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8013fd4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8013fd8:	4618      	mov	r0, r3
 8013fda:	3730      	adds	r7, #48	@ 0x30
 8013fdc:	46bd      	mov	sp, r7
 8013fde:	bd80      	pop	{r7, pc}

08013fe0 <ZbNwkGet>:

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 8013fe0:	b580      	push	{r7, lr}
 8013fe2:	b086      	sub	sp, #24
 8013fe4:	af02      	add	r7, sp, #8
 8013fe6:	60f8      	str	r0, [r7, #12]
 8013fe8:	607a      	str	r2, [r7, #4]
 8013fea:	603b      	str	r3, [r7, #0]
 8013fec:	460b      	mov	r3, r1
 8013fee:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 8013ff0:	8979      	ldrh	r1, [r7, #10]
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	9300      	str	r3, [sp, #0]
 8013ff6:	683b      	ldr	r3, [r7, #0]
 8013ff8:	687a      	ldr	r2, [r7, #4]
 8013ffa:	68f8      	ldr	r0, [r7, #12]
 8013ffc:	f7ff ff6e 	bl	8013edc <ZbNwkGetIndex>
 8014000:	4603      	mov	r3, r0
}
 8014002:	4618      	mov	r0, r3
 8014004:	3710      	adds	r7, #16
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <ZbNwkSet>:

enum ZbStatusCodeT
ZbNwkSet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 801400a:	b580      	push	{r7, lr}
 801400c:	b086      	sub	sp, #24
 801400e:	af02      	add	r7, sp, #8
 8014010:	60f8      	str	r0, [r7, #12]
 8014012:	607a      	str	r2, [r7, #4]
 8014014:	603b      	str	r3, [r7, #0]
 8014016:	460b      	mov	r3, r1
 8014018:	817b      	strh	r3, [r7, #10]
    return ZbNwkSetIndex(zb, attrId, attrPtr, attrSz, 0);
 801401a:	8979      	ldrh	r1, [r7, #10]
 801401c:	2300      	movs	r3, #0
 801401e:	9300      	str	r3, [sp, #0]
 8014020:	683b      	ldr	r3, [r7, #0]
 8014022:	687a      	ldr	r2, [r7, #4]
 8014024:	68f8      	ldr	r0, [r7, #12]
 8014026:	f7ff ff99 	bl	8013f5c <ZbNwkSetIndex>
 801402a:	4603      	mov	r3, r0
}
 801402c:	4618      	mov	r0, r3
 801402e:	3710      	adds	r7, #16
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}

08014034 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b086      	sub	sp, #24
 8014038:	af02      	add	r7, sp, #8
 801403a:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 801403c:	f107 020c 	add.w	r2, r7, #12
 8014040:	2300      	movs	r3, #0
 8014042:	9300      	str	r3, [sp, #0]
 8014044:	2304      	movs	r3, #4
 8014046:	f241 111d 	movw	r1, #4381	@ 0x111d
 801404a:	6878      	ldr	r0, [r7, #4]
 801404c:	f7ff fbb8 	bl	80137c0 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 8014050:	68fb      	ldr	r3, [r7, #12]
}
 8014052:	4618      	mov	r0, r3
 8014054:	3710      	adds	r7, #16
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}

0801405a <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 801405a:	b580      	push	{r7, lr}
 801405c:	b086      	sub	sp, #24
 801405e:	af00      	add	r7, sp, #0
 8014060:	60f8      	str	r0, [r7, #12]
 8014062:	60b9      	str	r1, [r7, #8]
 8014064:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8014066:	f7f5 f8e7 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801406a:	f7f5 f877 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801406e:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	2200      	movs	r2, #0
 8014074:	f042 021d 	orr.w	r2, r2, #29
 8014078:	701a      	strb	r2, [r3, #0]
 801407a:	2200      	movs	r2, #0
 801407c:	f042 0204 	orr.w	r2, r2, #4
 8014080:	705a      	strb	r2, [r3, #1]
 8014082:	2200      	movs	r2, #0
 8014084:	709a      	strb	r2, [r3, #2]
 8014086:	2200      	movs	r2, #0
 8014088:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	2200      	movs	r2, #0
 801408e:	f042 0202 	orr.w	r2, r2, #2
 8014092:	711a      	strb	r2, [r3, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	715a      	strb	r2, [r3, #5]
 8014098:	2200      	movs	r2, #0
 801409a:	719a      	strb	r2, [r3, #6]
 801409c:	2200      	movs	r2, #0
 801409e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 80140a0:	68ba      	ldr	r2, [r7, #8]
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80140ac:	f7f5 f886 	bl	80091bc <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 80140b0:	f7ff f9f8 	bl	80134a4 <zb_ipc_m4_get_retval>
 80140b4:	4603      	mov	r3, r0
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	bf14      	ite	ne
 80140ba:	2301      	movne	r3, #1
 80140bc:	2300      	moveq	r3, #0
 80140be:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 80140c0:	f7fe fc08 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return rc;
 80140c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80140c6:	4618      	mov	r0, r3
 80140c8:	3718      	adds	r7, #24
 80140ca:	46bd      	mov	sp, r7
 80140cc:	bd80      	pop	{r7, pc}

080140ce <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 80140ce:	b580      	push	{r7, lr}
 80140d0:	b086      	sub	sp, #24
 80140d2:	af00      	add	r7, sp, #0
 80140d4:	60f8      	str	r0, [r7, #12]
 80140d6:	60b9      	str	r1, [r7, #8]
 80140d8:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80140da:	f7f5 f8ad 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80140de:	f7f5 f83d 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80140e2:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 80140e4:	697b      	ldr	r3, [r7, #20]
 80140e6:	2200      	movs	r2, #0
 80140e8:	701a      	strb	r2, [r3, #0]
 80140ea:	2200      	movs	r2, #0
 80140ec:	f042 0204 	orr.w	r2, r2, #4
 80140f0:	705a      	strb	r2, [r3, #1]
 80140f2:	2200      	movs	r2, #0
 80140f4:	709a      	strb	r2, [r3, #2]
 80140f6:	2200      	movs	r2, #0
 80140f8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	2200      	movs	r2, #0
 80140fe:	f042 0202 	orr.w	r2, r2, #2
 8014102:	711a      	strb	r2, [r3, #4]
 8014104:	2200      	movs	r2, #0
 8014106:	715a      	strb	r2, [r3, #5]
 8014108:	2200      	movs	r2, #0
 801410a:	719a      	strb	r2, [r3, #6]
 801410c:	2200      	movs	r2, #0
 801410e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 8014110:	68ba      	ldr	r2, [r7, #8]
 8014112:	697b      	ldr	r3, [r7, #20]
 8014114:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 8014116:	687a      	ldr	r2, [r7, #4]
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801411c:	f7f5 f84e 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014120:	f7fe fbd8 	bl	80128d4 <Post_ZigbeeCmdProcessing>
}
 8014124:	bf00      	nop
 8014126:	3718      	adds	r7, #24
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b082      	sub	sp, #8
 8014130:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 8014132:	f7f5 f881 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014136:	f7f5 f811 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801413a:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 801413c:	687b      	ldr	r3, [r7, #4]
 801413e:	2200      	movs	r2, #0
 8014140:	f042 0211 	orr.w	r2, r2, #17
 8014144:	701a      	strb	r2, [r3, #0]
 8014146:	2200      	movs	r2, #0
 8014148:	f042 0204 	orr.w	r2, r2, #4
 801414c:	705a      	strb	r2, [r3, #1]
 801414e:	2200      	movs	r2, #0
 8014150:	709a      	strb	r2, [r3, #2]
 8014152:	2200      	movs	r2, #0
 8014154:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	2200      	movs	r2, #0
 801415a:	711a      	strb	r2, [r3, #4]
 801415c:	2200      	movs	r2, #0
 801415e:	715a      	strb	r2, [r3, #5]
 8014160:	2200      	movs	r2, #0
 8014162:	719a      	strb	r2, [r3, #6]
 8014164:	2200      	movs	r2, #0
 8014166:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 8014168:	f7f5 f828 	bl	80091bc <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 801416c:	f7ff f99a 	bl	80134a4 <zb_ipc_m4_get_retval>
 8014170:	4603      	mov	r3, r0
 8014172:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 8014174:	f7fe fbae 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return rc;
 8014178:	78fb      	ldrb	r3, [r7, #3]
}
 801417a:	4618      	mov	r0, r3
 801417c:	3708      	adds	r7, #8
 801417e:	46bd      	mov	sp, r7
 8014180:	bd80      	pop	{r7, pc}

08014182 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8014182:	b580      	push	{r7, lr}
 8014184:	b088      	sub	sp, #32
 8014186:	af00      	add	r7, sp, #0
 8014188:	60f8      	str	r0, [r7, #12]
 801418a:	60b9      	str	r1, [r7, #8]
 801418c:	607a      	str	r2, [r7, #4]
 801418e:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 8014190:	2300      	movs	r3, #0
 8014192:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2b00      	cmp	r3, #0
 8014198:	d013      	beq.n	80141c2 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 801419a:	6839      	ldr	r1, [r7, #0]
 801419c:	6878      	ldr	r0, [r7, #4]
 801419e:	f7ff f958 	bl	8013452 <zb_ipc_m4_cb_info_alloc>
 80141a2:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 80141a4:	69fb      	ldr	r3, [r7, #28]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d101      	bne.n	80141ae <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 80141aa:	2389      	movs	r3, #137	@ 0x89
 80141ac:	e03e      	b.n	801422c <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 80141ae:	68bb      	ldr	r3, [r7, #8]
 80141b0:	4618      	mov	r0, r3
 80141b2:	f7ff fbbf 	bl	8013934 <ZbApsAddrIsBcast>
 80141b6:	4603      	mov	r3, r0
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d002      	beq.n	80141c2 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 80141bc:	69fb      	ldr	r3, [r7, #28]
 80141be:	2201      	movs	r2, #1
 80141c0:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 80141c2:	f7f5 f839 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80141c6:	f7f4 ffc9 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80141ca:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 80141cc:	69bb      	ldr	r3, [r7, #24]
 80141ce:	2200      	movs	r2, #0
 80141d0:	f042 0212 	orr.w	r2, r2, #18
 80141d4:	701a      	strb	r2, [r3, #0]
 80141d6:	2200      	movs	r2, #0
 80141d8:	f042 0204 	orr.w	r2, r2, #4
 80141dc:	705a      	strb	r2, [r3, #1]
 80141de:	2200      	movs	r2, #0
 80141e0:	709a      	strb	r2, [r3, #2]
 80141e2:	2200      	movs	r2, #0
 80141e4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80141e6:	69bb      	ldr	r3, [r7, #24]
 80141e8:	2200      	movs	r2, #0
 80141ea:	f042 0202 	orr.w	r2, r2, #2
 80141ee:	711a      	strb	r2, [r3, #4]
 80141f0:	2200      	movs	r2, #0
 80141f2:	715a      	strb	r2, [r3, #5]
 80141f4:	2200      	movs	r2, #0
 80141f6:	719a      	strb	r2, [r3, #6]
 80141f8:	2200      	movs	r2, #0
 80141fa:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 80141fc:	68ba      	ldr	r2, [r7, #8]
 80141fe:	69bb      	ldr	r3, [r7, #24]
 8014200:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8014202:	69fa      	ldr	r2, [r7, #28]
 8014204:	69bb      	ldr	r3, [r7, #24]
 8014206:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014208:	f7f4 ffd8 	bl	80091bc <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 801420c:	f7ff f94a 	bl	80134a4 <zb_ipc_m4_get_retval>
 8014210:	4603      	mov	r3, r0
 8014212:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8014214:	f7fe fb5e 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 8014218:	7dfb      	ldrb	r3, [r7, #23]
 801421a:	2b00      	cmp	r3, #0
 801421c:	d005      	beq.n	801422a <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 801421e:	69fb      	ldr	r3, [r7, #28]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d002      	beq.n	801422a <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 8014224:	69f8      	ldr	r0, [r7, #28]
 8014226:	f7ff f931 	bl	801348c <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 801422a:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 801422c:	4618      	mov	r0, r3
 801422e:	3720      	adds	r7, #32
 8014230:	46bd      	mov	sp, r7
 8014232:	bd80      	pop	{r7, pc}

08014234 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	b086      	sub	sp, #24
 8014238:	af00      	add	r7, sp, #0
 801423a:	60f8      	str	r0, [r7, #12]
 801423c:	60b9      	str	r1, [r7, #8]
 801423e:	607a      	str	r2, [r7, #4]
 8014240:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014242:	f7f4 fff9 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014246:	f7f4 ff89 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801424a:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 801424c:	697b      	ldr	r3, [r7, #20]
 801424e:	2200      	movs	r2, #0
 8014250:	f042 0214 	orr.w	r2, r2, #20
 8014254:	701a      	strb	r2, [r3, #0]
 8014256:	2200      	movs	r2, #0
 8014258:	f042 0204 	orr.w	r2, r2, #4
 801425c:	705a      	strb	r2, [r3, #1]
 801425e:	2200      	movs	r2, #0
 8014260:	709a      	strb	r2, [r3, #2]
 8014262:	2200      	movs	r2, #0
 8014264:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	2200      	movs	r2, #0
 801426a:	f042 0204 	orr.w	r2, r2, #4
 801426e:	711a      	strb	r2, [r3, #4]
 8014270:	2200      	movs	r2, #0
 8014272:	715a      	strb	r2, [r3, #5]
 8014274:	2200      	movs	r2, #0
 8014276:	719a      	strb	r2, [r3, #6]
 8014278:	2200      	movs	r2, #0
 801427a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801427c:	68fa      	ldr	r2, [r7, #12]
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 8014282:	68ba      	ldr	r2, [r7, #8]
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 8014288:	687a      	ldr	r2, [r7, #4]
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 801428e:	78fa      	ldrb	r2, [r7, #3]
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8014294:	f7f4 ff92 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014298:	f7fe fb1c 	bl	80128d4 <Post_ZigbeeCmdProcessing>
}
 801429c:	bf00      	nop
 801429e:	3718      	adds	r7, #24
 80142a0:	46bd      	mov	sp, r7
 80142a2:	bd80      	pop	{r7, pc}

080142a4 <ZbZclClusterCommandReq>:

enum ZclStatusCodeT
ZbZclClusterCommandReq(struct ZbZclClusterT *clusterPtr, struct ZbZclClusterCommandReqT *req,
    void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg), void *arg)
{
 80142a4:	b590      	push	{r4, r7, lr}
 80142a6:	b091      	sub	sp, #68	@ 0x44
 80142a8:	af00      	add	r7, sp, #0
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	607a      	str	r2, [r7, #4]
 80142b0:	603b      	str	r3, [r7, #0]
    struct ZbZclCommandReqT zcl_req;

    /* Configure the request */
    ZbZclClusterInitCommandReq(clusterPtr, &zcl_req);
 80142b2:	f107 0310 	add.w	r3, r7, #16
 80142b6:	4619      	mov	r1, r3
 80142b8:	68f8      	ldr	r0, [r7, #12]
 80142ba:	f7ec f8a6 	bl	800040a <ZbZclClusterInitCommandReq>
    zcl_req.dst = req->dst;
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	f107 0410 	add.w	r4, r7, #16
 80142c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80142c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    /* ZCL Header */
    zcl_req.hdr.cmdId = req->cmdId;
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	7c1b      	ldrb	r3, [r3, #16]
 80142ce:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    zcl_req.hdr.frameCtrl.frameType = ZCL_FRAMETYPE_CLUSTER;
 80142d2:	2301      	movs	r3, #1
 80142d4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    zcl_req.hdr.frameCtrl.manufacturer = (clusterPtr->mfrCode != 0U) ? 1U : 0U;
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	8a1b      	ldrh	r3, [r3, #16]
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d001      	beq.n	80142e4 <ZbZclClusterCommandReq+0x40>
 80142e0:	2301      	movs	r3, #1
 80142e2:	e000      	b.n	80142e6 <ZbZclClusterCommandReq+0x42>
 80142e4:	2300      	movs	r3, #0
 80142e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	7f1b      	ldrb	r3, [r3, #28]
        ZCL_DIRECTION_TO_CLIENT : ZCL_DIRECTION_TO_SERVER;
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	bf0c      	ite	eq
 80142f2:	2301      	moveq	r3, #1
 80142f4:	2300      	movne	r3, #0
 80142f6:	b2db      	uxtb	r3, r3
    zcl_req.hdr.frameCtrl.direction = (clusterPtr->direction == ZCL_DIRECTION_TO_SERVER) ? \
 80142f8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    zcl_req.hdr.frameCtrl.noDefaultResp = req->noDefaultResp;
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	7c5b      	ldrb	r3, [r3, #17]
 8014300:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    zcl_req.hdr.manufacturerCode = clusterPtr->mfrCode;
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	8a1b      	ldrh	r3, [r3, #16]
 8014308:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    zcl_req.hdr.seqNum = ZbZclGetNextSeqnum();
 801430a:	f7ff ff0f 	bl	801412c <ZbZclGetNextSeqnum>
 801430e:	4603      	mov	r3, r0
 8014310:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    /* Payload */
    zcl_req.payload = req->payload;
 8014314:	68bb      	ldr	r3, [r7, #8]
 8014316:	695b      	ldr	r3, [r3, #20]
 8014318:	637b      	str	r3, [r7, #52]	@ 0x34
    zcl_req.length = req->length;
 801431a:	68bb      	ldr	r3, [r7, #8]
 801431c:	699b      	ldr	r3, [r3, #24]
 801431e:	63bb      	str	r3, [r7, #56]	@ 0x38

    return ZbZclCommandReq(clusterPtr->zb, &zcl_req, callback, arg);
 8014320:	68fb      	ldr	r3, [r7, #12]
 8014322:	6898      	ldr	r0, [r3, #8]
 8014324:	f107 0110 	add.w	r1, r7, #16
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	f7ff ff29 	bl	8014182 <ZbZclCommandReq>
 8014330:	4603      	mov	r3, r0
}
 8014332:	4618      	mov	r0, r3
 8014334:	3744      	adds	r7, #68	@ 0x44
 8014336:	46bd      	mov	sp, r7
 8014338:	bd90      	pop	{r4, r7, pc}

0801433a <ZbZclClusterEndpointRegister>:
    return status;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 801433a:	b580      	push	{r7, lr}
 801433c:	b084      	sub	sp, #16
 801433e:	af00      	add	r7, sp, #0
 8014340:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8014342:	f7f4 ff79 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014346:	f7f4 ff09 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801434a:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2200      	movs	r2, #0
 8014350:	f042 0202 	orr.w	r2, r2, #2
 8014354:	701a      	strb	r2, [r3, #0]
 8014356:	2200      	movs	r2, #0
 8014358:	f042 0204 	orr.w	r2, r2, #4
 801435c:	705a      	strb	r2, [r3, #1]
 801435e:	2200      	movs	r2, #0
 8014360:	709a      	strb	r2, [r3, #2]
 8014362:	2200      	movs	r2, #0
 8014364:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	2200      	movs	r2, #0
 801436a:	f042 0201 	orr.w	r2, r2, #1
 801436e:	711a      	strb	r2, [r3, #4]
 8014370:	2200      	movs	r2, #0
 8014372:	715a      	strb	r2, [r3, #5]
 8014374:	2200      	movs	r2, #0
 8014376:	719a      	strb	r2, [r3, #6]
 8014378:	2200      	movs	r2, #0
 801437a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801437c:	687a      	ldr	r2, [r7, #4]
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8014382:	f7f4 ff1b 	bl	80091bc <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 8014386:	f7ff f88d 	bl	80134a4 <zb_ipc_m4_get_retval>
 801438a:	4603      	mov	r3, r0
 801438c:	2b00      	cmp	r3, #0
 801438e:	bf14      	ite	ne
 8014390:	2301      	movne	r3, #1
 8014392:	2300      	moveq	r3, #0
 8014394:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8014396:	f7fe fa9d 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return rc;
 801439a:	7afb      	ldrb	r3, [r7, #11]
}
 801439c:	4618      	mov	r0, r3
 801439e:	3710      	adds	r7, #16
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd80      	pop	{r7, pc}

080143a4 <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 80143ac:	f7f4 ff44 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80143b0:	f7f4 fed4 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80143b4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	2200      	movs	r2, #0
 80143ba:	f042 0203 	orr.w	r2, r2, #3
 80143be:	701a      	strb	r2, [r3, #0]
 80143c0:	2200      	movs	r2, #0
 80143c2:	f042 0204 	orr.w	r2, r2, #4
 80143c6:	705a      	strb	r2, [r3, #1]
 80143c8:	2200      	movs	r2, #0
 80143ca:	709a      	strb	r2, [r3, #2]
 80143cc:	2200      	movs	r2, #0
 80143ce:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2200      	movs	r2, #0
 80143d4:	f042 0201 	orr.w	r2, r2, #1
 80143d8:	711a      	strb	r2, [r3, #4]
 80143da:	2200      	movs	r2, #0
 80143dc:	715a      	strb	r2, [r3, #5]
 80143de:	2200      	movs	r2, #0
 80143e0:	719a      	strb	r2, [r3, #6]
 80143e2:	2200      	movs	r2, #0
 80143e4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80143ec:	f7f4 fee6 	bl	80091bc <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 80143f0:	f7ff f858 	bl	80134a4 <zb_ipc_m4_get_retval>
 80143f4:	4603      	mov	r3, r0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	bf14      	ite	ne
 80143fa:	2301      	movne	r3, #1
 80143fc:	2300      	moveq	r3, #0
 80143fe:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8014400:	f7fe fa68 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return rc;
 8014404:	7afb      	ldrb	r3, [r7, #11]
}
 8014406:	4618      	mov	r0, r3
 8014408:	3710      	adds	r7, #16
 801440a:	46bd      	mov	sp, r7
 801440c:	bd80      	pop	{r7, pc}

0801440e <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 801440e:	b580      	push	{r7, lr}
 8014410:	b084      	sub	sp, #16
 8014412:	af00      	add	r7, sp, #0
 8014414:	6078      	str	r0, [r7, #4]
 8014416:	4608      	mov	r0, r1
 8014418:	4611      	mov	r1, r2
 801441a:	461a      	mov	r2, r3
 801441c:	4603      	mov	r3, r0
 801441e:	70fb      	strb	r3, [r7, #3]
 8014420:	460b      	mov	r3, r1
 8014422:	803b      	strh	r3, [r7, #0]
 8014424:	4613      	mov	r3, r2
 8014426:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 8014428:	f7f4 ff06 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801442c:	f7f4 fe96 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014430:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 8014432:	68fb      	ldr	r3, [r7, #12]
 8014434:	2200      	movs	r2, #0
 8014436:	f042 0204 	orr.w	r2, r2, #4
 801443a:	701a      	strb	r2, [r3, #0]
 801443c:	2200      	movs	r2, #0
 801443e:	f042 0204 	orr.w	r2, r2, #4
 8014442:	705a      	strb	r2, [r3, #1]
 8014444:	2200      	movs	r2, #0
 8014446:	709a      	strb	r2, [r3, #2]
 8014448:	2200      	movs	r2, #0
 801444a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	2200      	movs	r2, #0
 8014450:	f042 0204 	orr.w	r2, r2, #4
 8014454:	711a      	strb	r2, [r3, #4]
 8014456:	2200      	movs	r2, #0
 8014458:	715a      	strb	r2, [r3, #5]
 801445a:	2200      	movs	r2, #0
 801445c:	719a      	strb	r2, [r3, #6]
 801445e:	2200      	movs	r2, #0
 8014460:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	68fb      	ldr	r3, [r7, #12]
 8014466:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 8014468:	78fa      	ldrb	r2, [r7, #3]
 801446a:	68fb      	ldr	r3, [r7, #12]
 801446c:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 801446e:	883a      	ldrh	r2, [r7, #0]
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 8014474:	78ba      	ldrb	r2, [r7, #2]
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 801447a:	f7f4 fe9f 	bl	80091bc <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 801447e:	f7ff f811 	bl	80134a4 <zb_ipc_m4_get_retval>
 8014482:	4603      	mov	r3, r0
 8014484:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 8014486:	f7fe fa25 	bl	80128d4 <Post_ZigbeeCmdProcessing>
    return status;
 801448a:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 801448c:	4618      	mov	r0, r3
 801448e:	3710      	adds	r7, #16
 8014490:	46bd      	mov	sp, r7
 8014492:	bd80      	pop	{r7, pc}

08014494 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b084      	sub	sp, #16
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 801449c:	f7f4 fecc 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80144a0:	f7f4 fe5c 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80144a4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	2200      	movs	r2, #0
 80144aa:	f042 0206 	orr.w	r2, r2, #6
 80144ae:	701a      	strb	r2, [r3, #0]
 80144b0:	2200      	movs	r2, #0
 80144b2:	f042 0204 	orr.w	r2, r2, #4
 80144b6:	705a      	strb	r2, [r3, #1]
 80144b8:	2200      	movs	r2, #0
 80144ba:	709a      	strb	r2, [r3, #2]
 80144bc:	2200      	movs	r2, #0
 80144be:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	2200      	movs	r2, #0
 80144c4:	f042 0201 	orr.w	r2, r2, #1
 80144c8:	711a      	strb	r2, [r3, #4]
 80144ca:	2200      	movs	r2, #0
 80144cc:	715a      	strb	r2, [r3, #5]
 80144ce:	2200      	movs	r2, #0
 80144d0:	719a      	strb	r2, [r3, #6]
 80144d2:	2200      	movs	r2, #0
 80144d4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	68fb      	ldr	r3, [r7, #12]
 80144da:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80144dc:	f7f4 fe6e 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80144e0:	f7fe f9f8 	bl	80128d4 <Post_ZigbeeCmdProcessing>
}
 80144e4:	bf00      	nop
 80144e6:	3710      	adds	r7, #16
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}

080144ec <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 80144ec:	b580      	push	{r7, lr}
 80144ee:	b084      	sub	sp, #16
 80144f0:	af00      	add	r7, sp, #0
 80144f2:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80144f4:	f7f4 fea0 	bl	8009238 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80144f8:	f7f4 fe30 	bl	800915c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80144fc:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 80144fe:	68fb      	ldr	r3, [r7, #12]
 8014500:	2200      	movs	r2, #0
 8014502:	f042 020b 	orr.w	r2, r2, #11
 8014506:	701a      	strb	r2, [r3, #0]
 8014508:	2200      	movs	r2, #0
 801450a:	f042 0204 	orr.w	r2, r2, #4
 801450e:	705a      	strb	r2, [r3, #1]
 8014510:	2200      	movs	r2, #0
 8014512:	709a      	strb	r2, [r3, #2]
 8014514:	2200      	movs	r2, #0
 8014516:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	2200      	movs	r2, #0
 801451c:	f042 0201 	orr.w	r2, r2, #1
 8014520:	711a      	strb	r2, [r3, #4]
 8014522:	2200      	movs	r2, #0
 8014524:	715a      	strb	r2, [r3, #5]
 8014526:	2200      	movs	r2, #0
 8014528:	719a      	strb	r2, [r3, #6]
 801452a:	2200      	movs	r2, #0
 801452c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801452e:	687a      	ldr	r2, [r7, #4]
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8014534:	f7f4 fe42 	bl	80091bc <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014538:	f7fe f9cc 	bl	80128d4 <Post_ZigbeeCmdProcessing>
}
 801453c:	bf00      	nop
 801453e:	3710      	adds	r7, #16
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}

08014544 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b084      	sub	sp, #16
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
 8014550:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 8014552:	68b8      	ldr	r0, [r7, #8]
 8014554:	f002 fa92 	bl	8016a7c <malloc>
 8014558:	4603      	mov	r3, r0
}
 801455a:	4618      	mov	r0, r3
 801455c:	3710      	adds	r7, #16
 801455e:	46bd      	mov	sp, r7
 8014560:	bd80      	pop	{r7, pc}

08014562 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 8014562:	b580      	push	{r7, lr}
 8014564:	b084      	sub	sp, #16
 8014566:	af00      	add	r7, sp, #0
 8014568:	60f8      	str	r0, [r7, #12]
 801456a:	60b9      	str	r1, [r7, #8]
 801456c:	607a      	str	r2, [r7, #4]
 801456e:	603b      	str	r3, [r7, #0]
    free(ptr);
 8014570:	68b8      	ldr	r0, [r7, #8]
 8014572:	f002 fa8b 	bl	8016a8c <free>
}
 8014576:	bf00      	nop
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
	...

08014580 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 8014580:	b480      	push	{r7}
 8014582:	b087      	sub	sp, #28
 8014584:	af00      	add	r7, sp, #0
 8014586:	4603      	mov	r3, r0
 8014588:	60b9      	str	r1, [r7, #8]
 801458a:	607a      	str	r2, [r7, #4]
 801458c:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 801458e:	68bb      	ldr	r3, [r7, #8]
 8014590:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 8014592:	e00e      	b.n	80145b2 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 8014594:	89fb      	ldrh	r3, [r7, #14]
 8014596:	0a1b      	lsrs	r3, r3, #8
 8014598:	b29a      	uxth	r2, r3
 801459a:	89fb      	ldrh	r3, [r7, #14]
 801459c:	b2d9      	uxtb	r1, r3
 801459e:	697b      	ldr	r3, [r7, #20]
 80145a0:	1c58      	adds	r0, r3, #1
 80145a2:	6178      	str	r0, [r7, #20]
 80145a4:	781b      	ldrb	r3, [r3, #0]
 80145a6:	404b      	eors	r3, r1
 80145a8:	4908      	ldr	r1, [pc, #32]	@ (80145cc <WpanCrc+0x4c>)
 80145aa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80145ae:	4053      	eors	r3, r2
 80145b0:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	1e5a      	subs	r2, r3, #1
 80145b6:	607a      	str	r2, [r7, #4]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d1eb      	bne.n	8014594 <WpanCrc+0x14>
    }
    return crc;
 80145bc:	89fb      	ldrh	r3, [r7, #14]
}
 80145be:	4618      	mov	r0, r3
 80145c0:	371c      	adds	r7, #28
 80145c2:	46bd      	mov	sp, r7
 80145c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145c8:	4770      	bx	lr
 80145ca:	bf00      	nop
 80145cc:	08018aec 	.word	0x08018aec

080145d0 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 80145d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145d2:	b0cf      	sub	sp, #316	@ 0x13c
 80145d4:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80145d6:	2300      	movs	r3, #0
 80145d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 80145dc:	2300      	movs	r3, #0
 80145de:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 80145e8:	f7f4 fdd0 	bl	800918c <ZIGBEE_Get_NotificationPayloadBuffer>
 80145ec:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    switch (p_notification->ID) {
 80145f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80145f4:	681b      	ldr	r3, [r3, #0]
 80145f6:	f240 421c 	movw	r2, #1052	@ 0x41c
 80145fa:	4293      	cmp	r3, r2
 80145fc:	f201 8348 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 8014600:	f240 4205 	movw	r2, #1029	@ 0x405
 8014604:	4293      	cmp	r3, r2
 8014606:	d22d      	bcs.n	8014664 <Zigbee_CallBackProcessing+0x94>
 8014608:	f240 321d 	movw	r2, #797	@ 0x31d
 801460c:	4293      	cmp	r3, r2
 801460e:	f201 833f 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 8014612:	f240 3206 	movw	r2, #774	@ 0x306
 8014616:	4293      	cmp	r3, r2
 8014618:	d25c      	bcs.n	80146d4 <Zigbee_CallBackProcessing+0x104>
 801461a:	f240 2209 	movw	r2, #521	@ 0x209
 801461e:	4293      	cmp	r3, r2
 8014620:	f000 84db 	beq.w	8014fda <Zigbee_CallBackProcessing+0xa0a>
 8014624:	f240 2209 	movw	r2, #521	@ 0x209
 8014628:	4293      	cmp	r3, r2
 801462a:	f201 8331 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 801462e:	f240 2207 	movw	r2, #519	@ 0x207
 8014632:	4293      	cmp	r3, r2
 8014634:	f000 84a0 	beq.w	8014f78 <Zigbee_CallBackProcessing+0x9a8>
 8014638:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 801463c:	f081 8328 	bcs.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 8014640:	f240 2205 	movw	r2, #517	@ 0x205
 8014644:	4293      	cmp	r3, r2
 8014646:	f000 845a 	beq.w	8014efe <Zigbee_CallBackProcessing+0x92e>
 801464a:	f240 2205 	movw	r2, #517	@ 0x205
 801464e:	4293      	cmp	r3, r2
 8014650:	f201 831e 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 8014654:	2b4b      	cmp	r3, #75	@ 0x4b
 8014656:	f200 814d 	bhi.w	80148f4 <Zigbee_CallBackProcessing+0x324>
 801465a:	2b0d      	cmp	r3, #13
 801465c:	f080 80c4 	bcs.w	80147e8 <Zigbee_CallBackProcessing+0x218>
 8014660:	f001 bb16 	b.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 8014664:	f2a3 4305 	subw	r3, r3, #1029	@ 0x405
 8014668:	2b17      	cmp	r3, #23
 801466a:	f201 8311 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 801466e:	a201      	add	r2, pc, #4	@ (adr r2, 8014674 <Zigbee_CallBackProcessing+0xa4>)
 8014670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014674:	08015929 	.word	0x08015929
 8014678:	08015c91 	.word	0x08015c91
 801467c:	08015c91 	.word	0x08015c91
 8014680:	08015c91 	.word	0x08015c91
 8014684:	08015c91 	.word	0x08015c91
 8014688:	08015971 	.word	0x08015971
 801468c:	08015c91 	.word	0x08015c91
 8014690:	08015c91 	.word	0x08015c91
 8014694:	08015c91 	.word	0x08015c91
 8014698:	08015c91 	.word	0x08015c91
 801469c:	080159b9 	.word	0x080159b9
 80146a0:	08015c91 	.word	0x08015c91
 80146a4:	08015c91 	.word	0x08015c91
 80146a8:	08015c91 	.word	0x08015c91
 80146ac:	08015a13 	.word	0x08015a13
 80146b0:	08015c91 	.word	0x08015c91
 80146b4:	08015c91 	.word	0x08015c91
 80146b8:	08015a9d 	.word	0x08015a9d
 80146bc:	08015c91 	.word	0x08015c91
 80146c0:	08015af7 	.word	0x08015af7
 80146c4:	08015c91 	.word	0x08015c91
 80146c8:	08015b51 	.word	0x08015b51
 80146cc:	08015c91 	.word	0x08015c91
 80146d0:	08015bab 	.word	0x08015bab
 80146d4:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 80146d8:	2b17      	cmp	r3, #23
 80146da:	f201 82d9 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 80146de:	a201      	add	r2, pc, #4	@ (adr r2, 80146e4 <Zigbee_CallBackProcessing+0x114>)
 80146e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80146e4:	0801503d 	.word	0x0801503d
 80146e8:	08015c91 	.word	0x08015c91
 80146ec:	080150f5 	.word	0x080150f5
 80146f0:	08015c91 	.word	0x08015c91
 80146f4:	08015c91 	.word	0x08015c91
 80146f8:	08015c91 	.word	0x08015c91
 80146fc:	08015151 	.word	0x08015151
 8014700:	08015c91 	.word	0x08015c91
 8014704:	080151ad 	.word	0x080151ad
 8014708:	08015c91 	.word	0x08015c91
 801470c:	08015c91 	.word	0x08015c91
 8014710:	08015c91 	.word	0x08015c91
 8014714:	08015c91 	.word	0x08015c91
 8014718:	08015c91 	.word	0x08015c91
 801471c:	08015c91 	.word	0x08015c91
 8014720:	08015c91 	.word	0x08015c91
 8014724:	08015c91 	.word	0x08015c91
 8014728:	08015c91 	.word	0x08015c91
 801472c:	08015c91 	.word	0x08015c91
 8014730:	08015c91 	.word	0x08015c91
 8014734:	08015c91 	.word	0x08015c91
 8014738:	08015c91 	.word	0x08015c91
 801473c:	08015c91 	.word	0x08015c91
 8014740:	08015099 	.word	0x08015099
 8014744:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8014748:	2b24      	cmp	r3, #36	@ 0x24
 801474a:	f201 82a1 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 801474e:	a201      	add	r2, pc, #4	@ (adr r2, 8014754 <Zigbee_CallBackProcessing+0x184>)
 8014750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014754:	080152c3 	.word	0x080152c3
 8014758:	08015c91 	.word	0x08015c91
 801475c:	0801531b 	.word	0x0801531b
 8014760:	08015c91 	.word	0x08015c91
 8014764:	08015373 	.word	0x08015373
 8014768:	08015c91 	.word	0x08015c91
 801476c:	080153cb 	.word	0x080153cb
 8014770:	08015c91 	.word	0x08015c91
 8014774:	08015423 	.word	0x08015423
 8014778:	08015c91 	.word	0x08015c91
 801477c:	0801547b 	.word	0x0801547b
 8014780:	08015c91 	.word	0x08015c91
 8014784:	080154d3 	.word	0x080154d3
 8014788:	08015c91 	.word	0x08015c91
 801478c:	08015529 	.word	0x08015529
 8014790:	08015c91 	.word	0x08015c91
 8014794:	08015c91 	.word	0x08015c91
 8014798:	08015c91 	.word	0x08015c91
 801479c:	08015209 	.word	0x08015209
 80147a0:	08015c91 	.word	0x08015c91
 80147a4:	08015573 	.word	0x08015573
 80147a8:	08015c91 	.word	0x08015c91
 80147ac:	080155e5 	.word	0x080155e5
 80147b0:	08015c91 	.word	0x08015c91
 80147b4:	0801563f 	.word	0x0801563f
 80147b8:	08015c91 	.word	0x08015c91
 80147bc:	08015699 	.word	0x08015699
 80147c0:	08015c91 	.word	0x08015c91
 80147c4:	080156f3 	.word	0x080156f3
 80147c8:	08015c91 	.word	0x08015c91
 80147cc:	0801574d 	.word	0x0801574d
 80147d0:	08015c91 	.word	0x08015c91
 80147d4:	080157a7 	.word	0x080157a7
 80147d8:	08015c91 	.word	0x08015c91
 80147dc:	08015801 	.word	0x08015801
 80147e0:	08015c91 	.word	0x08015c91
 80147e4:	0801585b 	.word	0x0801585b
 80147e8:	3b0d      	subs	r3, #13
 80147ea:	2b3e      	cmp	r3, #62	@ 0x3e
 80147ec:	f201 8250 	bhi.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 80147f0:	a201      	add	r2, pc, #4	@ (adr r2, 80147f8 <Zigbee_CallBackProcessing+0x228>)
 80147f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147f6:	bf00      	nop
 80147f8:	08014909 	.word	0x08014909
 80147fc:	08015c91 	.word	0x08015c91
 8014800:	08015c91 	.word	0x08015c91
 8014804:	08015c91 	.word	0x08015c91
 8014808:	08015c91 	.word	0x08015c91
 801480c:	0801496f 	.word	0x0801496f
 8014810:	08015c91 	.word	0x08015c91
 8014814:	08015c91 	.word	0x08015c91
 8014818:	08015c91 	.word	0x08015c91
 801481c:	08015c91 	.word	0x08015c91
 8014820:	08015c91 	.word	0x08015c91
 8014824:	08015c91 	.word	0x08015c91
 8014828:	08015c91 	.word	0x08015c91
 801482c:	080149e3 	.word	0x080149e3
 8014830:	08015c91 	.word	0x08015c91
 8014834:	08015c91 	.word	0x08015c91
 8014838:	08014a3f 	.word	0x08014a3f
 801483c:	08015c91 	.word	0x08015c91
 8014840:	08014aa7 	.word	0x08014aa7
 8014844:	08015c91 	.word	0x08015c91
 8014848:	08014b0f 	.word	0x08014b0f
 801484c:	08015c91 	.word	0x08015c91
 8014850:	08014b77 	.word	0x08014b77
 8014854:	08015c91 	.word	0x08015c91
 8014858:	08015c91 	.word	0x08015c91
 801485c:	08014c51 	.word	0x08014c51
 8014860:	08015c91 	.word	0x08015c91
 8014864:	08015c91 	.word	0x08015c91
 8014868:	08014cb9 	.word	0x08014cb9
 801486c:	08015c91 	.word	0x08015c91
 8014870:	08014d21 	.word	0x08014d21
 8014874:	08015c91 	.word	0x08015c91
 8014878:	08015c91 	.word	0x08015c91
 801487c:	08015c91 	.word	0x08015c91
 8014880:	08014d3f 	.word	0x08014d3f
 8014884:	08015c91 	.word	0x08015c91
 8014888:	08015c91 	.word	0x08015c91
 801488c:	08015c91 	.word	0x08015c91
 8014890:	08014da7 	.word	0x08014da7
 8014894:	08015c91 	.word	0x08015c91
 8014898:	08015c91 	.word	0x08015c91
 801489c:	08015c91 	.word	0x08015c91
 80148a0:	08015c91 	.word	0x08015c91
 80148a4:	08015c91 	.word	0x08015c91
 80148a8:	08014df7 	.word	0x08014df7
 80148ac:	08015c91 	.word	0x08015c91
 80148b0:	08014e4f 	.word	0x08014e4f
 80148b4:	08015c91 	.word	0x08015c91
 80148b8:	08014ea7 	.word	0x08014ea7
 80148bc:	08015c25 	.word	0x08015c25
 80148c0:	08015c91 	.word	0x08015c91
 80148c4:	08015c91 	.word	0x08015c91
 80148c8:	08015c91 	.word	0x08015c91
 80148cc:	08015c91 	.word	0x08015c91
 80148d0:	08015c91 	.word	0x08015c91
 80148d4:	08015c91 	.word	0x08015c91
 80148d8:	08015c91 	.word	0x08015c91
 80148dc:	08015c91 	.word	0x08015c91
 80148e0:	08015c91 	.word	0x08015c91
 80148e4:	08015c91 	.word	0x08015c91
 80148e8:	08015c91 	.word	0x08015c91
 80148ec:	08015c91 	.word	0x08015c91
 80148f0:	08014bdf 	.word	0x08014bdf
 80148f4:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80148f8:	f081 81ca 	bcs.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
 80148fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014900:	f63f af20 	bhi.w	8014744 <Zigbee_CallBackProcessing+0x174>
 8014904:	f001 b9c4 	b.w	8015c90 <Zigbee_CallBackProcessing+0x16c0>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 8014908:	4bbb      	ldr	r3, [pc, #748]	@ (8014bf8 <Zigbee_CallBackProcessing+0x628>)
 801490a:	2200      	movs	r2, #0
 801490c:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 801490e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014912:	685b      	ldr	r3, [r3, #4]
 8014914:	2b01      	cmp	r3, #1
 8014916:	d006      	beq.n	8014926 <Zigbee_CallBackProcessing+0x356>
 8014918:	4bb8      	ldr	r3, [pc, #736]	@ (8014bfc <Zigbee_CallBackProcessing+0x62c>)
 801491a:	4ab9      	ldr	r2, [pc, #740]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 801491c:	f640 6129 	movw	r1, #3625	@ 0xe29
 8014920:	48b8      	ldr	r0, [pc, #736]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 8014922:	f002 f88d 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8014926:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801492a:	689b      	ldr	r3, [r3, #8]
 801492c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014930:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014934:	2b00      	cmp	r3, #0
 8014936:	f001 81af 	beq.w	8015c98 <Zigbee_CallBackProcessing+0x16c8>
 801493a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	2b00      	cmp	r3, #0
 8014942:	f001 81a9 	beq.w	8015c98 <Zigbee_CallBackProcessing+0x16c8>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8014946:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801494a:	681a      	ldr	r2, [r3, #0]
 801494c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014950:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014954:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 8014956:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801495a:	685a      	ldr	r2, [r3, #4]
 801495c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014960:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	4610      	mov	r0, r2
 8014968:	4798      	blx	r3
            }
            break;
 801496a:	f001 b995 	b.w	8015c98 <Zigbee_CallBackProcessing+0x16c8>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 801496e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014972:	685b      	ldr	r3, [r3, #4]
 8014974:	2b03      	cmp	r3, #3
 8014976:	d006      	beq.n	8014986 <Zigbee_CallBackProcessing+0x3b6>
 8014978:	4ba3      	ldr	r3, [pc, #652]	@ (8014c08 <Zigbee_CallBackProcessing+0x638>)
 801497a:	4aa1      	ldr	r2, [pc, #644]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 801497c:	f640 6138 	movw	r1, #3640	@ 0xe38
 8014980:	48a0      	ldr	r0, [pc, #640]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 8014982:	f002 f85d 	bl	8016a40 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 8014986:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801498a:	691a      	ldr	r2, [r3, #16]
 801498c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014990:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014994:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8014996:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 801499a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	685d      	ldr	r5, [r3, #4]
 80149a2:	4b95      	ldr	r3, [pc, #596]	@ (8014bf8 <Zigbee_CallBackProcessing+0x628>)
 80149a4:	6818      	ldr	r0, [r3, #0]
 80149a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149aa:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 80149ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149b0:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 80149b2:	461e      	mov	r6, r3
 80149b4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80149b8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	689b      	ldr	r3, [r3, #8]
 80149c0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 80149c4:	f2a2 1421 	subw	r4, r2, #289	@ 0x121
 80149c8:	4632      	mov	r2, r6
 80149ca:	47a8      	blx	r5
 80149cc:	4603      	mov	r3, r0
 80149ce:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 80149d0:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80149d4:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 80149d8:	781b      	ldrb	r3, [r3, #0]
 80149da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 80149de:	f001 b9b2 	b.w	8015d46 <Zigbee_CallBackProcessing+0x1776>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 80149e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149e6:	685b      	ldr	r3, [r3, #4]
 80149e8:	2b01      	cmp	r3, #1
 80149ea:	d006      	beq.n	80149fa <Zigbee_CallBackProcessing+0x42a>
 80149ec:	4b83      	ldr	r3, [pc, #524]	@ (8014bfc <Zigbee_CallBackProcessing+0x62c>)
 80149ee:	4a84      	ldr	r2, [pc, #528]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 80149f0:	f640 6144 	movw	r1, #3652	@ 0xe44
 80149f4:	4883      	ldr	r0, [pc, #524]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 80149f6:	f002 f823 	bl	8016a40 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 80149fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149fe:	689a      	ldr	r2, [r3, #8]
 8014a00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014a08:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 8014a0a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a0e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	f001 8140 	beq.w	8015c9c <Zigbee_CallBackProcessing+0x16cc>
                timer->callback(NULL, timer->arg);
 8014a1c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a20:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014a2c:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8014a30:	6812      	ldr	r2, [r2, #0]
 8014a32:	6852      	ldr	r2, [r2, #4]
 8014a34:	4611      	mov	r1, r2
 8014a36:	2000      	movs	r0, #0
 8014a38:	4798      	blx	r3
            }
            break;
 8014a3a:	f001 b92f 	b.w	8015c9c <Zigbee_CallBackProcessing+0x16cc>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 8014a3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a42:	685b      	ldr	r3, [r3, #4]
 8014a44:	2b02      	cmp	r3, #2
 8014a46:	d006      	beq.n	8014a56 <Zigbee_CallBackProcessing+0x486>
 8014a48:	4b70      	ldr	r3, [pc, #448]	@ (8014c0c <Zigbee_CallBackProcessing+0x63c>)
 8014a4a:	4a6d      	ldr	r2, [pc, #436]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 8014a4c:	f640 614d 	movw	r1, #3661	@ 0xe4d
 8014a50:	486c      	ldr	r0, [pc, #432]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 8014a52:	f001 fff5 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a5a:	68db      	ldr	r3, [r3, #12]
 8014a5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	f001 811b 	beq.w	8015ca0 <Zigbee_CallBackProcessing+0x16d0>
 8014a6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	f001 8115 	beq.w	8015ca0 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a7a:	681a      	ldr	r2, [r3, #0]
 8014a7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014a84:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a8a:	689b      	ldr	r3, [r3, #8]
 8014a8c:	b2da      	uxtb	r2, r3
 8014a8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a92:	6859      	ldr	r1, [r3, #4]
 8014a94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a98:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	4610      	mov	r0, r2
 8014aa0:	4798      	blx	r3
            }
            break;
 8014aa2:	f001 b8fd 	b.w	8015ca0 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 8014aa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014aaa:	685b      	ldr	r3, [r3, #4]
 8014aac:	2b02      	cmp	r3, #2
 8014aae:	d006      	beq.n	8014abe <Zigbee_CallBackProcessing+0x4ee>
 8014ab0:	4b56      	ldr	r3, [pc, #344]	@ (8014c0c <Zigbee_CallBackProcessing+0x63c>)
 8014ab2:	4a53      	ldr	r2, [pc, #332]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 8014ab4:	f640 6158 	movw	r1, #3672	@ 0xe58
 8014ab8:	4852      	ldr	r0, [pc, #328]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 8014aba:	f001 ffc1 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ac2:	68db      	ldr	r3, [r3, #12]
 8014ac4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	f001 80e9 	beq.w	8015ca4 <Zigbee_CallBackProcessing+0x16d4>
 8014ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	f001 80e3 	beq.w	8015ca4 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 8014ade:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ae2:	681a      	ldr	r2, [r3, #0]
 8014ae4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ae8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014aec:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 8014aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014af2:	689b      	ldr	r3, [r3, #8]
 8014af4:	4618      	mov	r0, r3
 8014af6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014afa:	685a      	ldr	r2, [r3, #4]
 8014afc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b00:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014b04:	681b      	ldr	r3, [r3, #0]
 8014b06:	4611      	mov	r1, r2
 8014b08:	4798      	blx	r3
            }
            break;
 8014b0a:	f001 b8cb 	b.w	8015ca4 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 8014b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b12:	685b      	ldr	r3, [r3, #4]
 8014b14:	2b02      	cmp	r3, #2
 8014b16:	d006      	beq.n	8014b26 <Zigbee_CallBackProcessing+0x556>
 8014b18:	4b3c      	ldr	r3, [pc, #240]	@ (8014c0c <Zigbee_CallBackProcessing+0x63c>)
 8014b1a:	4a39      	ldr	r2, [pc, #228]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 8014b1c:	f640 6163 	movw	r1, #3683	@ 0xe63
 8014b20:	4838      	ldr	r0, [pc, #224]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 8014b22:	f001 ff8d 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014b30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	f001 80b7 	beq.w	8015ca8 <Zigbee_CallBackProcessing+0x16d8>
 8014b3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	2b00      	cmp	r3, #0
 8014b42:	f001 80b1 	beq.w	8015ca8 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014b46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b4a:	681a      	ldr	r2, [r3, #0]
 8014b4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014b54:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014b56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b5a:	689b      	ldr	r3, [r3, #8]
 8014b5c:	b2da      	uxtb	r2, r3
 8014b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b62:	6859      	ldr	r1, [r3, #4]
 8014b64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b68:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	4610      	mov	r0, r2
 8014b70:	4798      	blx	r3
            }
            break;
 8014b72:	f001 b899 	b.w	8015ca8 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 8014b76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	2b02      	cmp	r3, #2
 8014b7e:	d006      	beq.n	8014b8e <Zigbee_CallBackProcessing+0x5be>
 8014b80:	4b22      	ldr	r3, [pc, #136]	@ (8014c0c <Zigbee_CallBackProcessing+0x63c>)
 8014b82:	4a1f      	ldr	r2, [pc, #124]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 8014b84:	f640 616e 	movw	r1, #3694	@ 0xe6e
 8014b88:	481e      	ldr	r0, [pc, #120]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 8014b8a:	f001 ff59 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b92:	68db      	ldr	r3, [r3, #12]
 8014b94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014b98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	f001 8085 	beq.w	8015cac <Zigbee_CallBackProcessing+0x16dc>
 8014ba2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	f001 807f 	beq.w	8015cac <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014bae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bb2:	681a      	ldr	r2, [r3, #0]
 8014bb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014bb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bbc:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014bbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014bc2:	689b      	ldr	r3, [r3, #8]
 8014bc4:	b2da      	uxtb	r2, r3
 8014bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bca:	6859      	ldr	r1, [r3, #4]
 8014bcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014bd0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014bd4:	681b      	ldr	r3, [r3, #0]
 8014bd6:	4610      	mov	r0, r2
 8014bd8:	4798      	blx	r3
            }
            break;
 8014bda:	f001 b867 	b.w	8015cac <Zigbee_CallBackProcessing+0x16dc>

        case MSG_M0TOM4_STARTUP_FINDBIND_EP_CB:
            assert(p_notification->Size == 2);
 8014bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014be2:	685b      	ldr	r3, [r3, #4]
 8014be4:	2b02      	cmp	r3, #2
 8014be6:	d013      	beq.n	8014c10 <Zigbee_CallBackProcessing+0x640>
 8014be8:	4b08      	ldr	r3, [pc, #32]	@ (8014c0c <Zigbee_CallBackProcessing+0x63c>)
 8014bea:	4a05      	ldr	r2, [pc, #20]	@ (8014c00 <Zigbee_CallBackProcessing+0x630>)
 8014bec:	f640 6179 	movw	r1, #3705	@ 0xe79
 8014bf0:	4804      	ldr	r0, [pc, #16]	@ (8014c04 <Zigbee_CallBackProcessing+0x634>)
 8014bf2:	f001 ff25 	bl	8016a40 <__assert_func>
 8014bf6:	bf00      	nop
 8014bf8:	20001a18 	.word	0x20001a18
 8014bfc:	08018454 	.word	0x08018454
 8014c00:	08018d18 	.word	0x08018d18
 8014c04:	080183b0 	.word	0x080183b0
 8014c08:	08018470 	.word	0x08018470
 8014c0c:	0801848c 	.word	0x0801848c
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c14:	68db      	ldr	r3, [r3, #12]
 8014c16:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f001 8046 	beq.w	8015cb0 <Zigbee_CallBackProcessing+0x16e0>
 8014c24:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	f001 8040 	beq.w	8015cb0 <Zigbee_CallBackProcessing+0x16e0>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014c30:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c3c:	689b      	ldr	r3, [r3, #8]
 8014c3e:	b2da      	uxtb	r2, r3
 8014c40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c44:	6859      	ldr	r1, [r3, #4]
 8014c46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014c48:	4610      	mov	r0, r2
 8014c4a:	4798      	blx	r3
            }
            break;
 8014c4c:	f001 b830 	b.w	8015cb0 <Zigbee_CallBackProcessing+0x16e0>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 8014c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	2b02      	cmp	r3, #2
 8014c58:	d006      	beq.n	8014c68 <Zigbee_CallBackProcessing+0x698>
 8014c5a:	4bc0      	ldr	r3, [pc, #768]	@ (8014f5c <Zigbee_CallBackProcessing+0x98c>)
 8014c5c:	4ac0      	ldr	r2, [pc, #768]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014c5e:	f640 6184 	movw	r1, #3716	@ 0xe84
 8014c62:	48c0      	ldr	r0, [pc, #768]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014c64:	f001 feec 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014c68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c6c:	68db      	ldr	r3, [r3, #12]
 8014c6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014c72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	f001 801c 	beq.w	8015cb4 <Zigbee_CallBackProcessing+0x16e4>
 8014c7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	f001 8016 	beq.w	8015cb4 <Zigbee_CallBackProcessing+0x16e4>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8014c88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c8c:	681a      	ldr	r2, [r3, #0]
 8014c8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014c96:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8014c98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c9c:	689b      	ldr	r3, [r3, #8]
 8014c9e:	b2da      	uxtb	r2, r3
 8014ca0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ca4:	6859      	ldr	r1, [r3, #4]
 8014ca6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	4610      	mov	r0, r2
 8014cb2:	4798      	blx	r3
            }
            break;
 8014cb4:	f000 bffe 	b.w	8015cb4 <Zigbee_CallBackProcessing+0x16e4>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8014cb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014cbc:	685b      	ldr	r3, [r3, #4]
 8014cbe:	2b02      	cmp	r3, #2
 8014cc0:	d006      	beq.n	8014cd0 <Zigbee_CallBackProcessing+0x700>
 8014cc2:	4ba6      	ldr	r3, [pc, #664]	@ (8014f5c <Zigbee_CallBackProcessing+0x98c>)
 8014cc4:	4aa6      	ldr	r2, [pc, #664]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014cc6:	f640 618f 	movw	r1, #3727	@ 0xe8f
 8014cca:	48a6      	ldr	r0, [pc, #664]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014ccc:	f001 feb8 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014cd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014cd4:	68db      	ldr	r3, [r3, #12]
 8014cd6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	f000 87ea 	beq.w	8015cb8 <Zigbee_CallBackProcessing+0x16e8>
 8014ce4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	f000 87e4 	beq.w	8015cb8 <Zigbee_CallBackProcessing+0x16e8>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014cf0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014cf4:	681a      	ldr	r2, [r3, #0]
 8014cf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014cfe:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d04:	689b      	ldr	r3, [r3, #8]
 8014d06:	b2da      	uxtb	r2, r3
 8014d08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d0c:	6859      	ldr	r1, [r3, #4]
 8014d0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d12:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	4610      	mov	r0, r2
 8014d1a:	4798      	blx	r3
            }
            break;
 8014d1c:	f000 bfcc 	b.w	8015cb8 <Zigbee_CallBackProcessing+0x16e8>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8014d20:	4b91      	ldr	r3, [pc, #580]	@ (8014f68 <Zigbee_CallBackProcessing+0x998>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	f000 87c9 	beq.w	8015cbc <Zigbee_CallBackProcessing+0x16ec>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 8014d2a:	4b8f      	ldr	r3, [pc, #572]	@ (8014f68 <Zigbee_CallBackProcessing+0x998>)
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	4a8f      	ldr	r2, [pc, #572]	@ (8014f6c <Zigbee_CallBackProcessing+0x99c>)
 8014d30:	6812      	ldr	r2, [r2, #0]
 8014d32:	498f      	ldr	r1, [pc, #572]	@ (8014f70 <Zigbee_CallBackProcessing+0x9a0>)
 8014d34:	6809      	ldr	r1, [r1, #0]
 8014d36:	4610      	mov	r0, r2
 8014d38:	4798      	blx	r3
            }
            break;
 8014d3a:	f000 bfbf 	b.w	8015cbc <Zigbee_CallBackProcessing+0x16ec>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8014d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	2b02      	cmp	r3, #2
 8014d46:	d006      	beq.n	8014d56 <Zigbee_CallBackProcessing+0x786>
 8014d48:	4b84      	ldr	r3, [pc, #528]	@ (8014f5c <Zigbee_CallBackProcessing+0x98c>)
 8014d4a:	4a85      	ldr	r2, [pc, #532]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014d4c:	f44f 616a 	mov.w	r1, #3744	@ 0xea0
 8014d50:	4884      	ldr	r0, [pc, #528]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014d52:	f001 fe75 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014d60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	f000 87ab 	beq.w	8015cc0 <Zigbee_CallBackProcessing+0x16f0>
 8014d6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	2b00      	cmp	r3, #0
 8014d72:	f000 87a5 	beq.w	8015cc0 <Zigbee_CallBackProcessing+0x16f0>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8014d76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d7a:	681a      	ldr	r2, [r3, #0]
 8014d7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014d84:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8014d86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d8a:	689b      	ldr	r3, [r3, #8]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d92:	685a      	ldr	r2, [r3, #4]
 8014d94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d98:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	4611      	mov	r1, r2
 8014da0:	4798      	blx	r3
            }
            break;
 8014da2:	f000 bf8d 	b.w	8015cc0 <Zigbee_CallBackProcessing+0x16f0>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8014da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014daa:	685b      	ldr	r3, [r3, #4]
 8014dac:	2b01      	cmp	r3, #1
 8014dae:	d006      	beq.n	8014dbe <Zigbee_CallBackProcessing+0x7ee>
 8014db0:	4b70      	ldr	r3, [pc, #448]	@ (8014f74 <Zigbee_CallBackProcessing+0x9a4>)
 8014db2:	4a6b      	ldr	r2, [pc, #428]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014db4:	f640 61ab 	movw	r1, #3755	@ 0xeab
 8014db8:	486a      	ldr	r0, [pc, #424]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014dba:	f001 fe41 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8014dbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014dc2:	689b      	ldr	r3, [r3, #8]
 8014dc4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014dc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dcc:	2b00      	cmp	r3, #0
 8014dce:	f000 8779 	beq.w	8015cc4 <Zigbee_CallBackProcessing+0x16f4>
 8014dd2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	2b00      	cmp	r3, #0
 8014dda:	f000 8773 	beq.w	8015cc4 <Zigbee_CallBackProcessing+0x16f4>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8014dde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014de2:	681b      	ldr	r3, [r3, #0]
 8014de4:	637b      	str	r3, [r7, #52]	@ 0x34
                callback(info->arg);
 8014de6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dea:	685a      	ldr	r2, [r3, #4]
 8014dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014dee:	4610      	mov	r0, r2
 8014df0:	4798      	blx	r3
            }
            break;
 8014df2:	f000 bf67 	b.w	8015cc4 <Zigbee_CallBackProcessing+0x16f4>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8014df6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014dfa:	685b      	ldr	r3, [r3, #4]
 8014dfc:	2b02      	cmp	r3, #2
 8014dfe:	d006      	beq.n	8014e0e <Zigbee_CallBackProcessing+0x83e>
 8014e00:	4b56      	ldr	r3, [pc, #344]	@ (8014f5c <Zigbee_CallBackProcessing+0x98c>)
 8014e02:	4a57      	ldr	r2, [pc, #348]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014e04:	f640 61b7 	movw	r1, #3767	@ 0xeb7
 8014e08:	4856      	ldr	r0, [pc, #344]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014e0a:	f001 fe19 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014e0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e12:	68db      	ldr	r3, [r3, #12]
 8014e14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014e18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	f000 8753 	beq.w	8015cc8 <Zigbee_CallBackProcessing+0x16f8>
 8014e22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e26:	681b      	ldr	r3, [r3, #0]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	f000 874d 	beq.w	8015cc8 <Zigbee_CallBackProcessing+0x16f8>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8014e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	63bb      	str	r3, [r7, #56]	@ 0x38
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8014e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e3a:	689b      	ldr	r3, [r3, #8]
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e42:	685a      	ldr	r2, [r3, #4]
 8014e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014e46:	4611      	mov	r1, r2
 8014e48:	4798      	blx	r3
            }
            break;
 8014e4a:	f000 bf3d 	b.w	8015cc8 <Zigbee_CallBackProcessing+0x16f8>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8014e4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e52:	685b      	ldr	r3, [r3, #4]
 8014e54:	2b02      	cmp	r3, #2
 8014e56:	d006      	beq.n	8014e66 <Zigbee_CallBackProcessing+0x896>
 8014e58:	4b40      	ldr	r3, [pc, #256]	@ (8014f5c <Zigbee_CallBackProcessing+0x98c>)
 8014e5a:	4a41      	ldr	r2, [pc, #260]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014e5c:	f640 61c3 	movw	r1, #3779	@ 0xec3
 8014e60:	4840      	ldr	r0, [pc, #256]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014e62:	f001 fded 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014e66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e6a:	68db      	ldr	r3, [r3, #12]
 8014e6c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014e70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f000 8729 	beq.w	8015ccc <Zigbee_CallBackProcessing+0x16fc>
 8014e7a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e7e:	681b      	ldr	r3, [r3, #0]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	f000 8723 	beq.w	8015ccc <Zigbee_CallBackProcessing+0x16fc>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8014e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8014e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e92:	689b      	ldr	r3, [r3, #8]
 8014e94:	4618      	mov	r0, r3
 8014e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e9a:	685a      	ldr	r2, [r3, #4]
 8014e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014e9e:	4611      	mov	r1, r2
 8014ea0:	4798      	blx	r3
            }
            break;
 8014ea2:	f000 bf13 	b.w	8015ccc <Zigbee_CallBackProcessing+0x16fc>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8014ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014eaa:	685b      	ldr	r3, [r3, #4]
 8014eac:	2b02      	cmp	r3, #2
 8014eae:	d006      	beq.n	8014ebe <Zigbee_CallBackProcessing+0x8ee>
 8014eb0:	4b2a      	ldr	r3, [pc, #168]	@ (8014f5c <Zigbee_CallBackProcessing+0x98c>)
 8014eb2:	4a2b      	ldr	r2, [pc, #172]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014eb4:	f640 61cf 	movw	r1, #3791	@ 0xecf
 8014eb8:	482a      	ldr	r0, [pc, #168]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014eba:	f001 fdc1 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014ebe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ec2:	68db      	ldr	r3, [r3, #12]
 8014ec4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014ec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	f000 86ff 	beq.w	8015cd0 <Zigbee_CallBackProcessing+0x1700>
 8014ed2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ed6:	681b      	ldr	r3, [r3, #0]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	f000 86f9 	beq.w	8015cd0 <Zigbee_CallBackProcessing+0x1700>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8014ede:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ee2:	681b      	ldr	r3, [r3, #0]
 8014ee4:	643b      	str	r3, [r7, #64]	@ 0x40
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 8014ee6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014eea:	689b      	ldr	r3, [r3, #8]
 8014eec:	4618      	mov	r0, r3
 8014eee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ef2:	685a      	ldr	r2, [r3, #4]
 8014ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014ef6:	4611      	mov	r1, r2
 8014ef8:	4798      	blx	r3
            }
            break;
 8014efa:	f000 bee9 	b.w	8015cd0 <Zigbee_CallBackProcessing+0x1700>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 8014efe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	2b02      	cmp	r3, #2
 8014f06:	d006      	beq.n	8014f16 <Zigbee_CallBackProcessing+0x946>
 8014f08:	4b14      	ldr	r3, [pc, #80]	@ (8014f5c <Zigbee_CallBackProcessing+0x98c>)
 8014f0a:	4a15      	ldr	r2, [pc, #84]	@ (8014f60 <Zigbee_CallBackProcessing+0x990>)
 8014f0c:	f640 61da 	movw	r1, #3802	@ 0xeda
 8014f10:	4814      	ldr	r0, [pc, #80]	@ (8014f64 <Zigbee_CallBackProcessing+0x994>)
 8014f12:	f001 fd95 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014f16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f1a:	68db      	ldr	r3, [r3, #12]
 8014f1c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014f20:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	f000 86d5 	beq.w	8015cd4 <Zigbee_CallBackProcessing+0x1704>
 8014f2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	f000 86cf 	beq.w	8015cd4 <Zigbee_CallBackProcessing+0x1704>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8014f36:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8014f40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f44:	689b      	ldr	r3, [r3, #8]
 8014f46:	4618      	mov	r0, r3
 8014f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f4c:	685a      	ldr	r2, [r3, #4]
 8014f4e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014f52:	4611      	mov	r1, r2
 8014f54:	4798      	blx	r3
            }
            break;
 8014f56:	f000 bebd 	b.w	8015cd4 <Zigbee_CallBackProcessing+0x1704>
 8014f5a:	bf00      	nop
 8014f5c:	0801848c 	.word	0x0801848c
 8014f60:	08018d18 	.word	0x08018d18
 8014f64:	080183b0 	.word	0x080183b0
 8014f68:	20001a08 	.word	0x20001a08
 8014f6c:	20001a18 	.word	0x20001a18
 8014f70:	20001a0c 	.word	0x20001a0c
 8014f74:	08018454 	.word	0x08018454

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8014f78:	2300      	movs	r3, #0
 8014f7a:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

            assert(p_notification->Size == 2);
 8014f7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	2b02      	cmp	r3, #2
 8014f86:	d006      	beq.n	8014f96 <Zigbee_CallBackProcessing+0x9c6>
 8014f88:	4bc6      	ldr	r3, [pc, #792]	@ (80152a4 <Zigbee_CallBackProcessing+0xcd4>)
 8014f8a:	4ac7      	ldr	r2, [pc, #796]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 8014f8c:	f640 61ea 	movw	r1, #3818	@ 0xeea
 8014f90:	48c6      	ldr	r0, [pc, #792]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 8014f92:	f001 fd55 	bl	8016a40 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8014f96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f9a:	689b      	ldr	r3, [r3, #8]
 8014f9c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8014fa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014fa4:	68db      	ldr	r3, [r3, #12]
 8014fa6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (aps_filter_cb->callback != NULL) {
 8014faa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014fae:	685b      	ldr	r3, [r3, #4]
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d00b      	beq.n	8014fcc <Zigbee_CallBackProcessing+0x9fc>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8014fb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8014fb8:	685b      	ldr	r3, [r3, #4]
 8014fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8014fbe:	6892      	ldr	r2, [r2, #8]
 8014fc0:	4611      	mov	r1, r2
 8014fc2:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 8014fc6:	4798      	blx	r3
 8014fc8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8014fcc:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8014fd0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014fd4:	60da      	str	r2, [r3, #12]
            break;
 8014fd6:	f000 beb6 	b.w	8015d46 <Zigbee_CallBackProcessing+0x1776>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8014fda:	2300      	movs	r3, #0
 8014fdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            assert(p_notification->Size == 2);
 8014fe0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014fe4:	685b      	ldr	r3, [r3, #4]
 8014fe6:	2b02      	cmp	r3, #2
 8014fe8:	d006      	beq.n	8014ff8 <Zigbee_CallBackProcessing+0xa28>
 8014fea:	4bae      	ldr	r3, [pc, #696]	@ (80152a4 <Zigbee_CallBackProcessing+0xcd4>)
 8014fec:	4aae      	ldr	r2, [pc, #696]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 8014fee:	f640 61fb 	movw	r1, #3835	@ 0xefb
 8014ff2:	48ae      	ldr	r0, [pc, #696]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 8014ff4:	f001 fd24 	bl	8016a40 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8014ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ffc:	689b      	ldr	r3, [r3, #8]
 8014ffe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8015002:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015006:	68db      	ldr	r3, [r3, #12]
 8015008:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            if (aps_filter_cb->callback != NULL) {
 801500c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015010:	685b      	ldr	r3, [r3, #4]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d00b      	beq.n	801502e <Zigbee_CallBackProcessing+0xa5e>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 8015016:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801501a:	685b      	ldr	r3, [r3, #4]
 801501c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8015020:	6892      	ldr	r2, [r2, #8]
 8015022:	4611      	mov	r1, r2
 8015024:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8015028:	4798      	blx	r3
 801502a:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 801502e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8015032:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015036:	60da      	str	r2, [r3, #12]
            break;
 8015038:	f000 be85 	b.w	8015d46 <Zigbee_CallBackProcessing+0x1776>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 801503c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015040:	685b      	ldr	r3, [r3, #4]
 8015042:	2b02      	cmp	r3, #2
 8015044:	d006      	beq.n	8015054 <Zigbee_CallBackProcessing+0xa84>
 8015046:	4b97      	ldr	r3, [pc, #604]	@ (80152a4 <Zigbee_CallBackProcessing+0xcd4>)
 8015048:	4a97      	ldr	r2, [pc, #604]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 801504a:	f640 7107 	movw	r1, #3847	@ 0xf07
 801504e:	4897      	ldr	r0, [pc, #604]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 8015050:	f001 fcf6 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015054:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015058:	68db      	ldr	r3, [r3, #12]
 801505a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801505e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015062:	2b00      	cmp	r3, #0
 8015064:	f000 8638 	beq.w	8015cd8 <Zigbee_CallBackProcessing+0x1708>
 8015068:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801506c:	681b      	ldr	r3, [r3, #0]
 801506e:	2b00      	cmp	r3, #0
 8015070:	f000 8632 	beq.w	8015cd8 <Zigbee_CallBackProcessing+0x1708>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 8015074:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015078:	681b      	ldr	r3, [r3, #0]
 801507a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 801507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015082:	689b      	ldr	r3, [r3, #8]
 8015084:	4618      	mov	r0, r3
 8015086:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801508a:	685a      	ldr	r2, [r3, #4]
 801508c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8015090:	4611      	mov	r1, r2
 8015092:	4798      	blx	r3
            }
            break;
 8015094:	f000 be20 	b.w	8015cd8 <Zigbee_CallBackProcessing+0x1708>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 8015098:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801509c:	685b      	ldr	r3, [r3, #4]
 801509e:	2b02      	cmp	r3, #2
 80150a0:	d006      	beq.n	80150b0 <Zigbee_CallBackProcessing+0xae0>
 80150a2:	4b80      	ldr	r3, [pc, #512]	@ (80152a4 <Zigbee_CallBackProcessing+0xcd4>)
 80150a4:	4a80      	ldr	r2, [pc, #512]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 80150a6:	f640 7113 	movw	r1, #3859	@ 0xf13
 80150aa:	4880      	ldr	r0, [pc, #512]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 80150ac:	f001 fcc8 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80150b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80150b4:	68db      	ldr	r3, [r3, #12]
 80150b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80150ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150be:	2b00      	cmp	r3, #0
 80150c0:	f000 860c 	beq.w	8015cdc <Zigbee_CallBackProcessing+0x170c>
 80150c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	f000 8606 	beq.w	8015cdc <Zigbee_CallBackProcessing+0x170c>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 80150d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150d4:	681b      	ldr	r3, [r3, #0]
 80150d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 80150da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80150de:	689b      	ldr	r3, [r3, #8]
 80150e0:	4618      	mov	r0, r3
 80150e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80150e6:	685a      	ldr	r2, [r3, #4]
 80150e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80150ec:	4611      	mov	r1, r2
 80150ee:	4798      	blx	r3
            }
            break;
 80150f0:	f000 bdf4 	b.w	8015cdc <Zigbee_CallBackProcessing+0x170c>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 80150f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	2b02      	cmp	r3, #2
 80150fc:	d006      	beq.n	801510c <Zigbee_CallBackProcessing+0xb3c>
 80150fe:	4b69      	ldr	r3, [pc, #420]	@ (80152a4 <Zigbee_CallBackProcessing+0xcd4>)
 8015100:	4a69      	ldr	r2, [pc, #420]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 8015102:	f640 711f 	movw	r1, #3871	@ 0xf1f
 8015106:	4869      	ldr	r0, [pc, #420]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 8015108:	f001 fc9a 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801510c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015110:	68db      	ldr	r3, [r3, #12]
 8015112:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015116:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801511a:	2b00      	cmp	r3, #0
 801511c:	f000 85e0 	beq.w	8015ce0 <Zigbee_CallBackProcessing+0x1710>
 8015120:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015124:	681b      	ldr	r3, [r3, #0]
 8015126:	2b00      	cmp	r3, #0
 8015128:	f000 85da 	beq.w	8015ce0 <Zigbee_CallBackProcessing+0x1710>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 801512c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015130:	681b      	ldr	r3, [r3, #0]
 8015132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8015136:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801513a:	689b      	ldr	r3, [r3, #8]
 801513c:	4618      	mov	r0, r3
 801513e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015142:	685a      	ldr	r2, [r3, #4]
 8015144:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015148:	4611      	mov	r1, r2
 801514a:	4798      	blx	r3
            }
            break;
 801514c:	f000 bdc8 	b.w	8015ce0 <Zigbee_CallBackProcessing+0x1710>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8015150:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015154:	685b      	ldr	r3, [r3, #4]
 8015156:	2b02      	cmp	r3, #2
 8015158:	d006      	beq.n	8015168 <Zigbee_CallBackProcessing+0xb98>
 801515a:	4b52      	ldr	r3, [pc, #328]	@ (80152a4 <Zigbee_CallBackProcessing+0xcd4>)
 801515c:	4a52      	ldr	r2, [pc, #328]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 801515e:	f640 712a 	movw	r1, #3882	@ 0xf2a
 8015162:	4852      	ldr	r0, [pc, #328]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 8015164:	f001 fc6c 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015168:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801516c:	68db      	ldr	r3, [r3, #12]
 801516e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015172:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015176:	2b00      	cmp	r3, #0
 8015178:	f000 85b4 	beq.w	8015ce4 <Zigbee_CallBackProcessing+0x1714>
 801517c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	f000 85ae 	beq.w	8015ce4 <Zigbee_CallBackProcessing+0x1714>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 8015188:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 8015192:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015196:	689b      	ldr	r3, [r3, #8]
 8015198:	4618      	mov	r0, r3
 801519a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801519e:	685a      	ldr	r2, [r3, #4]
 80151a0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80151a4:	4611      	mov	r1, r2
 80151a6:	4798      	blx	r3
            }
            break;
 80151a8:	f000 bd9c 	b.w	8015ce4 <Zigbee_CallBackProcessing+0x1714>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 80151ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80151b0:	685b      	ldr	r3, [r3, #4]
 80151b2:	2b02      	cmp	r3, #2
 80151b4:	d006      	beq.n	80151c4 <Zigbee_CallBackProcessing+0xbf4>
 80151b6:	4b3b      	ldr	r3, [pc, #236]	@ (80152a4 <Zigbee_CallBackProcessing+0xcd4>)
 80151b8:	4a3b      	ldr	r2, [pc, #236]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 80151ba:	f640 7135 	movw	r1, #3893	@ 0xf35
 80151be:	483b      	ldr	r0, [pc, #236]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 80151c0:	f001 fc3e 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80151c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80151c8:	68db      	ldr	r3, [r3, #12]
 80151ca:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80151ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	f000 8588 	beq.w	8015ce8 <Zigbee_CallBackProcessing+0x1718>
 80151d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	f000 8582 	beq.w	8015ce8 <Zigbee_CallBackProcessing+0x1718>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 80151e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 80151ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80151f2:	689b      	ldr	r3, [r3, #8]
 80151f4:	4618      	mov	r0, r3
 80151f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151fa:	685a      	ldr	r2, [r3, #4]
 80151fc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8015200:	4611      	mov	r1, r2
 8015202:	4798      	blx	r3
            }
            break;
 8015204:	f000 bd70 	b.w	8015ce8 <Zigbee_CallBackProcessing+0x1718>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8015208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801520c:	685b      	ldr	r3, [r3, #4]
 801520e:	2b03      	cmp	r3, #3
 8015210:	d006      	beq.n	8015220 <Zigbee_CallBackProcessing+0xc50>
 8015212:	4b27      	ldr	r3, [pc, #156]	@ (80152b0 <Zigbee_CallBackProcessing+0xce0>)
 8015214:	4a24      	ldr	r2, [pc, #144]	@ (80152a8 <Zigbee_CallBackProcessing+0xcd8>)
 8015216:	f640 7143 	movw	r1, #3907	@ 0xf43
 801521a:	4824      	ldr	r0, [pc, #144]	@ (80152ac <Zigbee_CallBackProcessing+0xcdc>)
 801521c:	f001 fc10 	bl	8016a40 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8015220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015224:	691b      	ldr	r3, [r3, #16]
 8015226:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8015228:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801522a:	2b00      	cmp	r3, #0
 801522c:	f000 855e 	beq.w	8015cec <Zigbee_CallBackProcessing+0x171c>
 8015230:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015232:	685b      	ldr	r3, [r3, #4]
 8015234:	2b00      	cmp	r3, #0
 8015236:	f000 8559 	beq.w	8015cec <Zigbee_CallBackProcessing+0x171c>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801523a:	2300      	movs	r3, #0
 801523c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8015240:	e02a      	b.n	8015298 <Zigbee_CallBackProcessing+0xcc8>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8015242:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8015246:	4613      	mov	r3, r2
 8015248:	005b      	lsls	r3, r3, #1
 801524a:	4413      	add	r3, r2
 801524c:	009b      	lsls	r3, r3, #2
 801524e:	4a19      	ldr	r2, [pc, #100]	@ (80152b4 <Zigbee_CallBackProcessing+0xce4>)
 8015250:	4413      	add	r3, r2
 8015252:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8015254:	429a      	cmp	r2, r3
 8015256:	d119      	bne.n	801528c <Zigbee_CallBackProcessing+0xcbc>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8015258:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d02d      	beq.n	80152bc <Zigbee_CallBackProcessing+0xcec>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8015260:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015264:	689b      	ldr	r3, [r3, #8]
 8015266:	67bb      	str	r3, [r7, #120]	@ 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 8015268:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801526c:	68db      	ldr	r3, [r3, #12]
 801526e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 8015272:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015274:	685b      	ldr	r3, [r3, #4]
 8015276:	673b      	str	r3, [r7, #112]	@ 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8015278:	4b0f      	ldr	r3, [pc, #60]	@ (80152b8 <Zigbee_CallBackProcessing+0xce8>)
 801527a:	6818      	ldr	r0, [r3, #0]
 801527c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801527e:	689b      	ldr	r3, [r3, #8]
 8015280:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8015284:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 8015286:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8015288:	47a0      	blx	r4
                    break;
 801528a:	e018      	b.n	80152be <Zigbee_CallBackProcessing+0xcee>
                        continue;
 801528c:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801528e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015292:	3301      	adds	r3, #1
 8015294:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8015298:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801529c:	2b07      	cmp	r3, #7
 801529e:	d9d0      	bls.n	8015242 <Zigbee_CallBackProcessing+0xc72>
                }
            }
            break;
 80152a0:	f000 bd24 	b.w	8015cec <Zigbee_CallBackProcessing+0x171c>
 80152a4:	0801848c 	.word	0x0801848c
 80152a8:	08018d18 	.word	0x08018d18
 80152ac:	080183b0 	.word	0x080183b0
 80152b0:	08018470 	.word	0x08018470
 80152b4:	20001bac 	.word	0x20001bac
 80152b8:	20001a18 	.word	0x20001a18
                        break;
 80152bc:	bf00      	nop
            break;
 80152be:	f000 bd15 	b.w	8015cec <Zigbee_CallBackProcessing+0x171c>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 80152c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80152c6:	685b      	ldr	r3, [r3, #4]
 80152c8:	2b02      	cmp	r3, #2
 80152ca:	d006      	beq.n	80152da <Zigbee_CallBackProcessing+0xd0a>
 80152cc:	4bbf      	ldr	r3, [pc, #764]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 80152ce:	4ac0      	ldr	r2, [pc, #768]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 80152d0:	f44f 6176 	mov.w	r1, #3936	@ 0xf60
 80152d4:	48bf      	ldr	r0, [pc, #764]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 80152d6:	f001 fbb3 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80152da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80152de:	68db      	ldr	r3, [r3, #12]
 80152e0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80152e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	f000 8501 	beq.w	8015cf0 <Zigbee_CallBackProcessing+0x1720>
 80152ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	2b00      	cmp	r3, #0
 80152f6:	f000 84fb 	beq.w	8015cf0 <Zigbee_CallBackProcessing+0x1720>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 80152fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	653b      	str	r3, [r7, #80]	@ 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 8015302:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015306:	689b      	ldr	r3, [r3, #8]
 8015308:	4618      	mov	r0, r3
 801530a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801530e:	685a      	ldr	r2, [r3, #4]
 8015310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015312:	4611      	mov	r1, r2
 8015314:	4798      	blx	r3
            }
            break;
 8015316:	f000 bceb 	b.w	8015cf0 <Zigbee_CallBackProcessing+0x1720>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 801531a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	2b02      	cmp	r3, #2
 8015322:	d006      	beq.n	8015332 <Zigbee_CallBackProcessing+0xd62>
 8015324:	4ba9      	ldr	r3, [pc, #676]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 8015326:	4aaa      	ldr	r2, [pc, #680]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 8015328:	f640 716b 	movw	r1, #3947	@ 0xf6b
 801532c:	48a9      	ldr	r0, [pc, #676]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 801532e:	f001 fb87 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015332:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801533c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015340:	2b00      	cmp	r3, #0
 8015342:	f000 84d7 	beq.w	8015cf4 <Zigbee_CallBackProcessing+0x1724>
 8015346:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	2b00      	cmp	r3, #0
 801534e:	f000 84d1 	beq.w	8015cf4 <Zigbee_CallBackProcessing+0x1724>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 8015352:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	657b      	str	r3, [r7, #84]	@ 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 801535a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	4618      	mov	r0, r3
 8015362:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015366:	685a      	ldr	r2, [r3, #4]
 8015368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801536a:	4611      	mov	r1, r2
 801536c:	4798      	blx	r3
            }
            break;
 801536e:	f000 bcc1 	b.w	8015cf4 <Zigbee_CallBackProcessing+0x1724>

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 8015372:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	2b02      	cmp	r3, #2
 801537a:	d006      	beq.n	801538a <Zigbee_CallBackProcessing+0xdba>
 801537c:	4b93      	ldr	r3, [pc, #588]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 801537e:	4a94      	ldr	r2, [pc, #592]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 8015380:	f640 7176 	movw	r1, #3958	@ 0xf76
 8015384:	4893      	ldr	r0, [pc, #588]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 8015386:	f001 fb5b 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801538a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801538e:	68db      	ldr	r3, [r3, #12]
 8015390:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015394:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015398:	2b00      	cmp	r3, #0
 801539a:	f000 84ad 	beq.w	8015cf8 <Zigbee_CallBackProcessing+0x1728>
 801539e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	f000 84a7 	beq.w	8015cf8 <Zigbee_CallBackProcessing+0x1728>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 80153aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	65bb      	str	r3, [r7, #88]	@ 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 80153b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80153b6:	689b      	ldr	r3, [r3, #8]
 80153b8:	4618      	mov	r0, r3
 80153ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153be:	685a      	ldr	r2, [r3, #4]
 80153c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80153c2:	4611      	mov	r1, r2
 80153c4:	4798      	blx	r3
            }
            break;
 80153c6:	f000 bc97 	b.w	8015cf8 <Zigbee_CallBackProcessing+0x1728>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 80153ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80153ce:	685b      	ldr	r3, [r3, #4]
 80153d0:	2b02      	cmp	r3, #2
 80153d2:	d006      	beq.n	80153e2 <Zigbee_CallBackProcessing+0xe12>
 80153d4:	4b7d      	ldr	r3, [pc, #500]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 80153d6:	4a7e      	ldr	r2, [pc, #504]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 80153d8:	f640 7181 	movw	r1, #3969	@ 0xf81
 80153dc:	487d      	ldr	r0, [pc, #500]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 80153de:	f001 fb2f 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80153e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80153ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153f0:	2b00      	cmp	r3, #0
 80153f2:	f000 8483 	beq.w	8015cfc <Zigbee_CallBackProcessing+0x172c>
 80153f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153fa:	681b      	ldr	r3, [r3, #0]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	f000 847d 	beq.w	8015cfc <Zigbee_CallBackProcessing+0x172c>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 8015402:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	65fb      	str	r3, [r7, #92]	@ 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 801540a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801540e:	689b      	ldr	r3, [r3, #8]
 8015410:	4618      	mov	r0, r3
 8015412:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015416:	685a      	ldr	r2, [r3, #4]
 8015418:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801541a:	4611      	mov	r1, r2
 801541c:	4798      	blx	r3
            }
            break;
 801541e:	f000 bc6d 	b.w	8015cfc <Zigbee_CallBackProcessing+0x172c>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 8015422:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	2b02      	cmp	r3, #2
 801542a:	d006      	beq.n	801543a <Zigbee_CallBackProcessing+0xe6a>
 801542c:	4b67      	ldr	r3, [pc, #412]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 801542e:	4a68      	ldr	r2, [pc, #416]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 8015430:	f640 718c 	movw	r1, #3980	@ 0xf8c
 8015434:	4867      	ldr	r0, [pc, #412]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 8015436:	f001 fb03 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801543a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801543e:	68db      	ldr	r3, [r3, #12]
 8015440:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015444:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015448:	2b00      	cmp	r3, #0
 801544a:	f000 8459 	beq.w	8015d00 <Zigbee_CallBackProcessing+0x1730>
 801544e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015452:	681b      	ldr	r3, [r3, #0]
 8015454:	2b00      	cmp	r3, #0
 8015456:	f000 8453 	beq.w	8015d00 <Zigbee_CallBackProcessing+0x1730>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 801545a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	663b      	str	r3, [r7, #96]	@ 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 8015462:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015466:	689b      	ldr	r3, [r3, #8]
 8015468:	4618      	mov	r0, r3
 801546a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801546e:	685a      	ldr	r2, [r3, #4]
 8015470:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8015472:	4611      	mov	r1, r2
 8015474:	4798      	blx	r3
            }
            break;
 8015476:	f000 bc43 	b.w	8015d00 <Zigbee_CallBackProcessing+0x1730>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 801547a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801547e:	685b      	ldr	r3, [r3, #4]
 8015480:	2b02      	cmp	r3, #2
 8015482:	d006      	beq.n	8015492 <Zigbee_CallBackProcessing+0xec2>
 8015484:	4b51      	ldr	r3, [pc, #324]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 8015486:	4a52      	ldr	r2, [pc, #328]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 8015488:	f640 7197 	movw	r1, #3991	@ 0xf97
 801548c:	4851      	ldr	r0, [pc, #324]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 801548e:	f001 fad7 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015492:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015496:	68db      	ldr	r3, [r3, #12]
 8015498:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801549c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	f000 842f 	beq.w	8015d04 <Zigbee_CallBackProcessing+0x1734>
 80154a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	f000 8429 	beq.w	8015d04 <Zigbee_CallBackProcessing+0x1734>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 80154b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	667b      	str	r3, [r7, #100]	@ 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 80154ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80154be:	689b      	ldr	r3, [r3, #8]
 80154c0:	4618      	mov	r0, r3
 80154c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154c6:	685a      	ldr	r2, [r3, #4]
 80154c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80154ca:	4611      	mov	r1, r2
 80154cc:	4798      	blx	r3
            }
            break;
 80154ce:	f000 bc19 	b.w	8015d04 <Zigbee_CallBackProcessing+0x1734>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 80154d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80154d6:	685b      	ldr	r3, [r3, #4]
 80154d8:	2b02      	cmp	r3, #2
 80154da:	d006      	beq.n	80154ea <Zigbee_CallBackProcessing+0xf1a>
 80154dc:	4b3b      	ldr	r3, [pc, #236]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 80154de:	4a3c      	ldr	r2, [pc, #240]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 80154e0:	f640 71a2 	movw	r1, #4002	@ 0xfa2
 80154e4:	483b      	ldr	r0, [pc, #236]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 80154e6:	f001 faab 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80154ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80154f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154f8:	2b00      	cmp	r3, #0
 80154fa:	f000 8405 	beq.w	8015d08 <Zigbee_CallBackProcessing+0x1738>
 80154fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	2b00      	cmp	r3, #0
 8015506:	f000 83ff 	beq.w	8015d08 <Zigbee_CallBackProcessing+0x1738>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 801550a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	66bb      	str	r3, [r7, #104]	@ 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 8015512:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015516:	689b      	ldr	r3, [r3, #8]
 8015518:	4618      	mov	r0, r3
 801551a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801551e:	685a      	ldr	r2, [r3, #4]
 8015520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015522:	4611      	mov	r1, r2
 8015524:	4798      	blx	r3
            }
            break;
 8015526:	e3ef      	b.n	8015d08 <Zigbee_CallBackProcessing+0x1738>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 8015528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801552c:	685b      	ldr	r3, [r3, #4]
 801552e:	2b01      	cmp	r3, #1
 8015530:	d006      	beq.n	8015540 <Zigbee_CallBackProcessing+0xf70>
 8015532:	4b29      	ldr	r3, [pc, #164]	@ (80155d8 <Zigbee_CallBackProcessing+0x1008>)
 8015534:	4a26      	ldr	r2, [pc, #152]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 8015536:	f640 71af 	movw	r1, #4015	@ 0xfaf
 801553a:	4826      	ldr	r0, [pc, #152]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 801553c:	f001 fa80 	bl	8016a40 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 8015540:	4b26      	ldr	r3, [pc, #152]	@ (80155dc <Zigbee_CallBackProcessing+0x100c>)
 8015542:	681b      	ldr	r3, [r3, #0]
 8015544:	2b00      	cmp	r3, #0
 8015546:	f000 83e1 	beq.w	8015d0c <Zigbee_CallBackProcessing+0x173c>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 801554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801554e:	689b      	ldr	r3, [r3, #8]
 8015550:	66fb      	str	r3, [r7, #108]	@ 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 8015552:	4b22      	ldr	r3, [pc, #136]	@ (80155dc <Zigbee_CallBackProcessing+0x100c>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	4a22      	ldr	r2, [pc, #136]	@ (80155e0 <Zigbee_CallBackProcessing+0x1010>)
 8015558:	6812      	ldr	r2, [r2, #0]
 801555a:	4611      	mov	r1, r2
 801555c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 801555e:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 8015560:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8015562:	781b      	ldrb	r3, [r3, #0]
 8015564:	2b85      	cmp	r3, #133	@ 0x85
 8015566:	f040 83d1 	bne.w	8015d0c <Zigbee_CallBackProcessing+0x173c>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 801556a:	4b1c      	ldr	r3, [pc, #112]	@ (80155dc <Zigbee_CallBackProcessing+0x100c>)
 801556c:	2200      	movs	r2, #0
 801556e:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 8015570:	e3cc      	b.n	8015d0c <Zigbee_CallBackProcessing+0x173c>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 8015572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015576:	685b      	ldr	r3, [r3, #4]
 8015578:	2b02      	cmp	r3, #2
 801557a:	d006      	beq.n	801558a <Zigbee_CallBackProcessing+0xfba>
 801557c:	4b13      	ldr	r3, [pc, #76]	@ (80155cc <Zigbee_CallBackProcessing+0xffc>)
 801557e:	4a14      	ldr	r2, [pc, #80]	@ (80155d0 <Zigbee_CallBackProcessing+0x1000>)
 8015580:	f640 71bd 	movw	r1, #4029	@ 0xfbd
 8015584:	4813      	ldr	r0, [pc, #76]	@ (80155d4 <Zigbee_CallBackProcessing+0x1004>)
 8015586:	f001 fa5b 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801558a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801558e:	68db      	ldr	r3, [r3, #12]
 8015590:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015594:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015598:	2b00      	cmp	r3, #0
 801559a:	f000 83b9 	beq.w	8015d10 <Zigbee_CallBackProcessing+0x1740>
 801559e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	f000 83b3 	beq.w	8015d10 <Zigbee_CallBackProcessing+0x1740>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 80155aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155ae:	681b      	ldr	r3, [r3, #0]
 80155b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 80155b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80155b8:	689b      	ldr	r3, [r3, #8]
 80155ba:	4618      	mov	r0, r3
 80155bc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155c0:	685a      	ldr	r2, [r3, #4]
 80155c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80155c6:	4611      	mov	r1, r2
 80155c8:	4798      	blx	r3
            }
            break;
 80155ca:	e3a1      	b.n	8015d10 <Zigbee_CallBackProcessing+0x1740>
 80155cc:	0801848c 	.word	0x0801848c
 80155d0:	08018d18 	.word	0x08018d18
 80155d4:	080183b0 	.word	0x080183b0
 80155d8:	08018454 	.word	0x08018454
 80155dc:	20001a10 	.word	0x20001a10
 80155e0:	20001a14 	.word	0x20001a14

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 80155e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80155e8:	685b      	ldr	r3, [r3, #4]
 80155ea:	2b02      	cmp	r3, #2
 80155ec:	d006      	beq.n	80155fc <Zigbee_CallBackProcessing+0x102c>
 80155ee:	4bc8      	ldr	r3, [pc, #800]	@ (8015910 <Zigbee_CallBackProcessing+0x1340>)
 80155f0:	4ac8      	ldr	r2, [pc, #800]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 80155f2:	f640 71c8 	movw	r1, #4040	@ 0xfc8
 80155f6:	48c8      	ldr	r0, [pc, #800]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 80155f8:	f001 fa22 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80155fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015606:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801560a:	2b00      	cmp	r3, #0
 801560c:	f000 8382 	beq.w	8015d14 <Zigbee_CallBackProcessing+0x1744>
 8015610:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	2b00      	cmp	r3, #0
 8015618:	f000 837c 	beq.w	8015d14 <Zigbee_CallBackProcessing+0x1744>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 801561c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015620:	681b      	ldr	r3, [r3, #0]
 8015622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 8015626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801562a:	689b      	ldr	r3, [r3, #8]
 801562c:	4618      	mov	r0, r3
 801562e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015632:	685a      	ldr	r2, [r3, #4]
 8015634:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015638:	4611      	mov	r1, r2
 801563a:	4798      	blx	r3
            }
            break;
 801563c:	e36a      	b.n	8015d14 <Zigbee_CallBackProcessing+0x1744>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 801563e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015642:	685b      	ldr	r3, [r3, #4]
 8015644:	2b02      	cmp	r3, #2
 8015646:	d006      	beq.n	8015656 <Zigbee_CallBackProcessing+0x1086>
 8015648:	4bb1      	ldr	r3, [pc, #708]	@ (8015910 <Zigbee_CallBackProcessing+0x1340>)
 801564a:	4ab2      	ldr	r2, [pc, #712]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 801564c:	f640 71d3 	movw	r1, #4051	@ 0xfd3
 8015650:	48b1      	ldr	r0, [pc, #708]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 8015652:	f001 f9f5 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015656:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015660:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015664:	2b00      	cmp	r3, #0
 8015666:	f000 8357 	beq.w	8015d18 <Zigbee_CallBackProcessing+0x1748>
 801566a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	2b00      	cmp	r3, #0
 8015672:	f000 8351 	beq.w	8015d18 <Zigbee_CallBackProcessing+0x1748>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 8015676:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801567a:	681b      	ldr	r3, [r3, #0]
 801567c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 8015680:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015684:	689b      	ldr	r3, [r3, #8]
 8015686:	4618      	mov	r0, r3
 8015688:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801568c:	685a      	ldr	r2, [r3, #4]
 801568e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8015692:	4611      	mov	r1, r2
 8015694:	4798      	blx	r3
            }
            break;
 8015696:	e33f      	b.n	8015d18 <Zigbee_CallBackProcessing+0x1748>

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 8015698:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801569c:	685b      	ldr	r3, [r3, #4]
 801569e:	2b02      	cmp	r3, #2
 80156a0:	d006      	beq.n	80156b0 <Zigbee_CallBackProcessing+0x10e0>
 80156a2:	4b9b      	ldr	r3, [pc, #620]	@ (8015910 <Zigbee_CallBackProcessing+0x1340>)
 80156a4:	4a9b      	ldr	r2, [pc, #620]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 80156a6:	f640 71de 	movw	r1, #4062	@ 0xfde
 80156aa:	489b      	ldr	r0, [pc, #620]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 80156ac:	f001 f9c8 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80156b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80156b4:	68db      	ldr	r3, [r3, #12]
 80156b6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80156ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156be:	2b00      	cmp	r3, #0
 80156c0:	f000 832c 	beq.w	8015d1c <Zigbee_CallBackProcessing+0x174c>
 80156c4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	f000 8326 	beq.w	8015d1c <Zigbee_CallBackProcessing+0x174c>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 80156d0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 80156da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80156de:	689b      	ldr	r3, [r3, #8]
 80156e0:	4618      	mov	r0, r3
 80156e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156e6:	685a      	ldr	r2, [r3, #4]
 80156e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80156ec:	4611      	mov	r1, r2
 80156ee:	4798      	blx	r3
            }
            break;
 80156f0:	e314      	b.n	8015d1c <Zigbee_CallBackProcessing+0x174c>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 80156f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	2b02      	cmp	r3, #2
 80156fa:	d006      	beq.n	801570a <Zigbee_CallBackProcessing+0x113a>
 80156fc:	4b84      	ldr	r3, [pc, #528]	@ (8015910 <Zigbee_CallBackProcessing+0x1340>)
 80156fe:	4a85      	ldr	r2, [pc, #532]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 8015700:	f640 71e9 	movw	r1, #4073	@ 0xfe9
 8015704:	4884      	ldr	r0, [pc, #528]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 8015706:	f001 f99b 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801570a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015714:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015718:	2b00      	cmp	r3, #0
 801571a:	f000 8301 	beq.w	8015d20 <Zigbee_CallBackProcessing+0x1750>
 801571e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	2b00      	cmp	r3, #0
 8015726:	f000 82fb 	beq.w	8015d20 <Zigbee_CallBackProcessing+0x1750>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 801572a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 8015734:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015738:	689b      	ldr	r3, [r3, #8]
 801573a:	4618      	mov	r0, r3
 801573c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015740:	685a      	ldr	r2, [r3, #4]
 8015742:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8015746:	4611      	mov	r1, r2
 8015748:	4798      	blx	r3
            }
            break;
 801574a:	e2e9      	b.n	8015d20 <Zigbee_CallBackProcessing+0x1750>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 801574c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015750:	685b      	ldr	r3, [r3, #4]
 8015752:	2b02      	cmp	r3, #2
 8015754:	d006      	beq.n	8015764 <Zigbee_CallBackProcessing+0x1194>
 8015756:	4b6e      	ldr	r3, [pc, #440]	@ (8015910 <Zigbee_CallBackProcessing+0x1340>)
 8015758:	4a6e      	ldr	r2, [pc, #440]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 801575a:	f640 71f4 	movw	r1, #4084	@ 0xff4
 801575e:	486e      	ldr	r0, [pc, #440]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 8015760:	f001 f96e 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015764:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015768:	68db      	ldr	r3, [r3, #12]
 801576a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801576e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015772:	2b00      	cmp	r3, #0
 8015774:	f000 82d6 	beq.w	8015d24 <Zigbee_CallBackProcessing+0x1754>
 8015778:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801577c:	681b      	ldr	r3, [r3, #0]
 801577e:	2b00      	cmp	r3, #0
 8015780:	f000 82d0 	beq.w	8015d24 <Zigbee_CallBackProcessing+0x1754>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 8015784:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 801578e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015792:	689b      	ldr	r3, [r3, #8]
 8015794:	4618      	mov	r0, r3
 8015796:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801579a:	685a      	ldr	r2, [r3, #4]
 801579c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80157a0:	4611      	mov	r1, r2
 80157a2:	4798      	blx	r3
            }
            break;
 80157a4:	e2be      	b.n	8015d24 <Zigbee_CallBackProcessing+0x1754>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 80157a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157aa:	685b      	ldr	r3, [r3, #4]
 80157ac:	2b02      	cmp	r3, #2
 80157ae:	d006      	beq.n	80157be <Zigbee_CallBackProcessing+0x11ee>
 80157b0:	4b57      	ldr	r3, [pc, #348]	@ (8015910 <Zigbee_CallBackProcessing+0x1340>)
 80157b2:	4a58      	ldr	r2, [pc, #352]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 80157b4:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80157b8:	4857      	ldr	r0, [pc, #348]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 80157ba:	f001 f941 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80157be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80157c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	f000 82ab 	beq.w	8015d28 <Zigbee_CallBackProcessing+0x1758>
 80157d2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	f000 82a5 	beq.w	8015d28 <Zigbee_CallBackProcessing+0x1758>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 80157de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 80157e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157ec:	689b      	ldr	r3, [r3, #8]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157f4:	685a      	ldr	r2, [r3, #4]
 80157f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80157fa:	4611      	mov	r1, r2
 80157fc:	4798      	blx	r3
            }
            break;
 80157fe:	e293      	b.n	8015d28 <Zigbee_CallBackProcessing+0x1758>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 8015800:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015804:	685b      	ldr	r3, [r3, #4]
 8015806:	2b02      	cmp	r3, #2
 8015808:	d006      	beq.n	8015818 <Zigbee_CallBackProcessing+0x1248>
 801580a:	4b41      	ldr	r3, [pc, #260]	@ (8015910 <Zigbee_CallBackProcessing+0x1340>)
 801580c:	4a41      	ldr	r2, [pc, #260]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 801580e:	f241 010a 	movw	r1, #4106	@ 0x100a
 8015812:	4841      	ldr	r0, [pc, #260]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 8015814:	f001 f914 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015818:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801581c:	68db      	ldr	r3, [r3, #12]
 801581e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015822:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015826:	2b00      	cmp	r3, #0
 8015828:	f000 8280 	beq.w	8015d2c <Zigbee_CallBackProcessing+0x175c>
 801582c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015830:	681b      	ldr	r3, [r3, #0]
 8015832:	2b00      	cmp	r3, #0
 8015834:	f000 827a 	beq.w	8015d2c <Zigbee_CallBackProcessing+0x175c>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 8015838:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 8015842:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015846:	689b      	ldr	r3, [r3, #8]
 8015848:	4618      	mov	r0, r3
 801584a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801584e:	685a      	ldr	r2, [r3, #4]
 8015850:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8015854:	4611      	mov	r1, r2
 8015856:	4798      	blx	r3
            }
            break;
 8015858:	e268      	b.n	8015d2c <Zigbee_CallBackProcessing+0x175c>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 801585a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801585e:	685b      	ldr	r3, [r3, #4]
 8015860:	2b03      	cmp	r3, #3
 8015862:	d006      	beq.n	8015872 <Zigbee_CallBackProcessing+0x12a2>
 8015864:	4b2d      	ldr	r3, [pc, #180]	@ (801591c <Zigbee_CallBackProcessing+0x134c>)
 8015866:	4a2b      	ldr	r2, [pc, #172]	@ (8015914 <Zigbee_CallBackProcessing+0x1344>)
 8015868:	f241 0118 	movw	r1, #4120	@ 0x1018
 801586c:	482a      	ldr	r0, [pc, #168]	@ (8015918 <Zigbee_CallBackProcessing+0x1348>)
 801586e:	f001 f8e7 	bl	8016a40 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8015872:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015876:	691b      	ldr	r3, [r3, #16]
 8015878:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 801587c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015880:	2b00      	cmp	r3, #0
 8015882:	f000 8255 	beq.w	8015d30 <Zigbee_CallBackProcessing+0x1760>
 8015886:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801588a:	685b      	ldr	r3, [r3, #4]
 801588c:	2b00      	cmp	r3, #0
 801588e:	f000 824f 	beq.w	8015d30 <Zigbee_CallBackProcessing+0x1760>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8015892:	2300      	movs	r3, #0
 8015894:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8015898:	e032      	b.n	8015900 <Zigbee_CallBackProcessing+0x1330>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 801589a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 801589e:	4613      	mov	r3, r2
 80158a0:	005b      	lsls	r3, r3, #1
 80158a2:	4413      	add	r3, r2
 80158a4:	009b      	lsls	r3, r3, #2
 80158a6:	4a1e      	ldr	r2, [pc, #120]	@ (8015920 <Zigbee_CallBackProcessing+0x1350>)
 80158a8:	4413      	add	r3, r2
 80158aa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d120      	bne.n	80158f4 <Zigbee_CallBackProcessing+0x1324>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 80158b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d026      	beq.n	801590a <Zigbee_CallBackProcessing+0x133a>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 80158bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158c0:	689b      	ldr	r3, [r3, #8]
 80158c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 80158c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158ca:	68db      	ldr	r3, [r3, #12]
 80158cc:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 80158d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80158d4:	685b      	ldr	r3, [r3, #4]
 80158d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 80158da:	4b12      	ldr	r3, [pc, #72]	@ (8015924 <Zigbee_CallBackProcessing+0x1354>)
 80158dc:	6818      	ldr	r0, [r3, #0]
 80158de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80158e2:	689b      	ldr	r3, [r3, #8]
 80158e4:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80158e8:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80158ec:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80158f0:	47a0      	blx	r4
                    break;
 80158f2:	e00b      	b.n	801590c <Zigbee_CallBackProcessing+0x133c>
                        continue;
 80158f4:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80158f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80158fa:	3301      	adds	r3, #1
 80158fc:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8015900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8015904:	2b07      	cmp	r3, #7
 8015906:	d9c8      	bls.n	801589a <Zigbee_CallBackProcessing+0x12ca>
                }
            }
            break;
 8015908:	e212      	b.n	8015d30 <Zigbee_CallBackProcessing+0x1760>
                        break;
 801590a:	bf00      	nop
            break;
 801590c:	e210      	b.n	8015d30 <Zigbee_CallBackProcessing+0x1760>
 801590e:	bf00      	nop
 8015910:	0801848c 	.word	0x0801848c
 8015914:	08018d18 	.word	0x08018d18
 8015918:	080183b0 	.word	0x080183b0
 801591c:	08018470 	.word	0x08018470
 8015920:	20001bac 	.word	0x20001bac
 8015924:	20001a18 	.word	0x20001a18
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8015928:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	2b02      	cmp	r3, #2
 8015930:	d006      	beq.n	8015940 <Zigbee_CallBackProcessing+0x1370>
 8015932:	4bc6      	ldr	r3, [pc, #792]	@ (8015c4c <Zigbee_CallBackProcessing+0x167c>)
 8015934:	4ac6      	ldr	r2, [pc, #792]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 8015936:	f241 0139 	movw	r1, #4153	@ 0x1039
 801593a:	48c6      	ldr	r0, [pc, #792]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 801593c:	f001 f880 	bl	8016a40 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015940:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015944:	689b      	ldr	r3, [r3, #8]
 8015946:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            cb_arg = (void *)p_notification->Data[1];
 801594a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801594e:	68db      	ldr	r3, [r3, #12]
 8015950:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 8015954:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8015958:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 801595c:	f7eb f946 	bl	8000bec <zcl_cluster_data_ind>
 8015960:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015964:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8015968:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801596c:	60da      	str	r2, [r3, #12]
            break;
 801596e:	e1ea      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8015970:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015974:	685b      	ldr	r3, [r3, #4]
 8015976:	2b02      	cmp	r3, #2
 8015978:	d006      	beq.n	8015988 <Zigbee_CallBackProcessing+0x13b8>
 801597a:	4bb4      	ldr	r3, [pc, #720]	@ (8015c4c <Zigbee_CallBackProcessing+0x167c>)
 801597c:	4ab4      	ldr	r2, [pc, #720]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 801597e:	f241 0148 	movw	r1, #4168	@ 0x1048
 8015982:	48b4      	ldr	r0, [pc, #720]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 8015984:	f001 f85c 	bl	8016a40 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015988:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801598c:	689b      	ldr	r3, [r3, #8]
 801598e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            cb_arg = (void *)p_notification->Data[1];
 8015992:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015996:	68db      	ldr	r3, [r3, #12]
 8015998:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 801599c:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 80159a0:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 80159a4:	f7eb f93c 	bl	8000c20 <zcl_cluster_alarm_data_ind>
 80159a8:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 80159ac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80159b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159b4:	60da      	str	r2, [r3, #12]
            break;
 80159b6:	e1c6      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 80159b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159bc:	685b      	ldr	r3, [r3, #4]
 80159be:	2b02      	cmp	r3, #2
 80159c0:	d006      	beq.n	80159d0 <Zigbee_CallBackProcessing+0x1400>
 80159c2:	4ba2      	ldr	r3, [pc, #648]	@ (8015c4c <Zigbee_CallBackProcessing+0x167c>)
 80159c4:	4aa2      	ldr	r2, [pc, #648]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 80159c6:	f241 0152 	movw	r1, #4178	@ 0x1052
 80159ca:	48a2      	ldr	r0, [pc, #648]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 80159cc:	f001 f838 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80159d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159d4:	68db      	ldr	r3, [r3, #12]
 80159d6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80159da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159de:	2b00      	cmp	r3, #0
 80159e0:	f000 81a8 	beq.w	8015d34 <Zigbee_CallBackProcessing+0x1764>
 80159e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	f000 81a2 	beq.w	8015d34 <Zigbee_CallBackProcessing+0x1764>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 80159f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 80159fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159fe:	689b      	ldr	r3, [r3, #8]
 8015a00:	4618      	mov	r0, r3
 8015a02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a06:	685a      	ldr	r2, [r3, #4]
 8015a08:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8015a0c:	4611      	mov	r1, r2
 8015a0e:	4798      	blx	r3
            }
            break;
 8015a10:	e190      	b.n	8015d34 <Zigbee_CallBackProcessing+0x1764>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 8015a12:	2300      	movs	r3, #0
 8015a14:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            assert(p_notification->Size == 2);
 8015a18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a1c:	685b      	ldr	r3, [r3, #4]
 8015a1e:	2b02      	cmp	r3, #2
 8015a20:	d006      	beq.n	8015a30 <Zigbee_CallBackProcessing+0x1460>
 8015a22:	4b8a      	ldr	r3, [pc, #552]	@ (8015c4c <Zigbee_CallBackProcessing+0x167c>)
 8015a24:	4a8a      	ldr	r2, [pc, #552]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 8015a26:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8015a2a:	488a      	ldr	r0, [pc, #552]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 8015a2c:	f001 f808 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015a30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8015a3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d026      	beq.n	8015a90 <Zigbee_CallBackProcessing+0x14c0>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 8015a42:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a46:	689b      	ldr	r3, [r3, #8]
 8015a48:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

                if (info->callback != NULL) {
 8015a4c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d00f      	beq.n	8015a76 <Zigbee_CallBackProcessing+0x14a6>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8015a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    err = callback(zcl_rsp, info->arg);
 8015a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a64:	685a      	ldr	r2, [r3, #4]
 8015a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015a6a:	4611      	mov	r1, r2
 8015a6c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8015a70:	4798      	blx	r3
 8015a72:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8015a76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015a7a:	7a1b      	ldrb	r3, [r3, #8]
 8015a7c:	2b00      	cmp	r3, #0
 8015a7e:	d007      	beq.n	8015a90 <Zigbee_CallBackProcessing+0x14c0>
 8015a80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8015a84:	785b      	ldrb	r3, [r3, #1]
 8015a86:	2b94      	cmp	r3, #148	@ 0x94
 8015a88:	d002      	beq.n	8015a90 <Zigbee_CallBackProcessing+0x14c0>
                    /* Don't free the callback yet */
                    info = NULL;
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015a90:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8015a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a98:	60da      	str	r2, [r3, #12]
            break;
 8015a9a:	e154      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8015a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015aa0:	685b      	ldr	r3, [r3, #4]
 8015aa2:	2b02      	cmp	r3, #2
 8015aa4:	d006      	beq.n	8015ab4 <Zigbee_CallBackProcessing+0x14e4>
 8015aa6:	4b69      	ldr	r3, [pc, #420]	@ (8015c4c <Zigbee_CallBackProcessing+0x167c>)
 8015aa8:	4a69      	ldr	r2, [pc, #420]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 8015aaa:	f241 0178 	movw	r1, #4216	@ 0x1078
 8015aae:	4869      	ldr	r0, [pc, #420]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 8015ab0:	f000 ffc6 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015ab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ab8:	68db      	ldr	r3, [r3, #12]
 8015aba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015abe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	f000 8138 	beq.w	8015d38 <Zigbee_CallBackProcessing+0x1768>
 8015ac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	f000 8132 	beq.w	8015d38 <Zigbee_CallBackProcessing+0x1768>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 8015ad4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 8015ade:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ae2:	689b      	ldr	r3, [r3, #8]
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015aea:	685a      	ldr	r2, [r3, #4]
 8015aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015af0:	4611      	mov	r1, r2
 8015af2:	4798      	blx	r3
            }
            break;
 8015af4:	e120      	b.n	8015d38 <Zigbee_CallBackProcessing+0x1768>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 8015af6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015afa:	685b      	ldr	r3, [r3, #4]
 8015afc:	2b02      	cmp	r3, #2
 8015afe:	d006      	beq.n	8015b0e <Zigbee_CallBackProcessing+0x153e>
 8015b00:	4b52      	ldr	r3, [pc, #328]	@ (8015c4c <Zigbee_CallBackProcessing+0x167c>)
 8015b02:	4a53      	ldr	r2, [pc, #332]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 8015b04:	f241 0183 	movw	r1, #4227	@ 0x1083
 8015b08:	4852      	ldr	r0, [pc, #328]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 8015b0a:	f000 ff99 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b12:	68db      	ldr	r3, [r3, #12]
 8015b14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015b18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	f000 810d 	beq.w	8015d3c <Zigbee_CallBackProcessing+0x176c>
 8015b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	f000 8107 	beq.w	8015d3c <Zigbee_CallBackProcessing+0x176c>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 8015b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8015b38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b3c:	689b      	ldr	r3, [r3, #8]
 8015b3e:	4618      	mov	r0, r3
 8015b40:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b44:	685a      	ldr	r2, [r3, #4]
 8015b46:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8015b4a:	4611      	mov	r1, r2
 8015b4c:	4798      	blx	r3
            }
            break;
 8015b4e:	e0f5      	b.n	8015d3c <Zigbee_CallBackProcessing+0x176c>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 8015b50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b54:	685b      	ldr	r3, [r3, #4]
 8015b56:	2b02      	cmp	r3, #2
 8015b58:	d006      	beq.n	8015b68 <Zigbee_CallBackProcessing+0x1598>
 8015b5a:	4b3c      	ldr	r3, [pc, #240]	@ (8015c4c <Zigbee_CallBackProcessing+0x167c>)
 8015b5c:	4a3c      	ldr	r2, [pc, #240]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 8015b5e:	f241 018e 	movw	r1, #4238	@ 0x108e
 8015b62:	483c      	ldr	r0, [pc, #240]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 8015b64:	f000 ff6c 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b6c:	68db      	ldr	r3, [r3, #12]
 8015b6e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	f000 80e2 	beq.w	8015d40 <Zigbee_CallBackProcessing+0x1770>
 8015b7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	f000 80dc 	beq.w	8015d40 <Zigbee_CallBackProcessing+0x1770>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8015b88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 8015b92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b96:	689b      	ldr	r3, [r3, #8]
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b9e:	685a      	ldr	r2, [r3, #4]
 8015ba0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015ba4:	4611      	mov	r1, r2
 8015ba6:	4798      	blx	r3
            }
            break;
 8015ba8:	e0ca      	b.n	8015d40 <Zigbee_CallBackProcessing+0x1770>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 8015baa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015bae:	685b      	ldr	r3, [r3, #4]
 8015bb0:	2b05      	cmp	r3, #5
 8015bb2:	d006      	beq.n	8015bc2 <Zigbee_CallBackProcessing+0x15f2>
 8015bb4:	4b28      	ldr	r3, [pc, #160]	@ (8015c58 <Zigbee_CallBackProcessing+0x1688>)
 8015bb6:	4a26      	ldr	r2, [pc, #152]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 8015bb8:	f241 0199 	movw	r1, #4249	@ 0x1099
 8015bbc:	4825      	ldr	r0, [pc, #148]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 8015bbe:	f000 ff3f 	bl	8016a40 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 8015bc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015bc6:	699b      	ldr	r3, [r3, #24]
 8015bc8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015bcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bd0:	2b00      	cmp	r3, #0
 8015bd2:	f000 80b7 	beq.w	8015d44 <Zigbee_CallBackProcessing+0x1774>
 8015bd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	f000 80b1 	beq.w	8015d44 <Zigbee_CallBackProcessing+0x1774>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 8015be2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015be6:	f103 0108 	add.w	r1, r3, #8
 8015bea:	463b      	mov	r3, r7
 8015bec:	2208      	movs	r2, #8
 8015bee:	4618      	mov	r0, r3
 8015bf0:	f7fd fc10 	bl	8013414 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 8015bf4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 8015bfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015c02:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c06:	691b      	ldr	r3, [r3, #16]
 8015c08:	b29a      	uxth	r2, r3
 8015c0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c0e:	695b      	ldr	r3, [r3, #20]
 8015c10:	b2dd      	uxtb	r5, r3
 8015c12:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c16:	685b      	ldr	r3, [r3, #4]
 8015c18:	9300      	str	r3, [sp, #0]
 8015c1a:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8015c1e:	462b      	mov	r3, r5
 8015c20:	47a0      	blx	r4
            }
            break;
 8015c22:	e08f      	b.n	8015d44 <Zigbee_CallBackProcessing+0x1774>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 8015c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c28:	685b      	ldr	r3, [r3, #4]
 8015c2a:	2b03      	cmp	r3, #3
 8015c2c:	d006      	beq.n	8015c3c <Zigbee_CallBackProcessing+0x166c>
 8015c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8015c5c <Zigbee_CallBackProcessing+0x168c>)
 8015c30:	4a07      	ldr	r2, [pc, #28]	@ (8015c50 <Zigbee_CallBackProcessing+0x1680>)
 8015c32:	f241 01aa 	movw	r1, #4266	@ 0x10aa
 8015c36:	4807      	ldr	r0, [pc, #28]	@ (8015c54 <Zigbee_CallBackProcessing+0x1684>)
 8015c38:	f000 ff02 	bl	8016a40 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8015c3c:	4b08      	ldr	r3, [pc, #32]	@ (8015c60 <Zigbee_CallBackProcessing+0x1690>)
 8015c3e:	681b      	ldr	r3, [r3, #0]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d10f      	bne.n	8015c64 <Zigbee_CallBackProcessing+0x1694>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 8015c44:	2381      	movs	r3, #129	@ 0x81
 8015c46:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                break;
 8015c4a:	e07c      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
 8015c4c:	0801848c 	.word	0x0801848c
 8015c50:	08018d18 	.word	0x08018d18
 8015c54:	080183b0 	.word	0x080183b0
 8015c58:	080184a8 	.word	0x080184a8
 8015c5c:	08018470 	.word	0x08018470
 8015c60:	20001a04 	.word	0x20001a04
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8015c64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c68:	689b      	ldr	r3, [r3, #8]
 8015c6a:	64bb      	str	r3, [r7, #72]	@ 0x48
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 8015c6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c70:	68db      	ldr	r3, [r3, #12]
 8015c72:	647b      	str	r3, [r7, #68]	@ 0x44
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8015c74:	4b3f      	ldr	r3, [pc, #252]	@ (8015d74 <Zigbee_CallBackProcessing+0x17a4>)
 8015c76:	681c      	ldr	r4, [r3, #0]
 8015c78:	4b3f      	ldr	r3, [pc, #252]	@ (8015d78 <Zigbee_CallBackProcessing+0x17a8>)
 8015c7a:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 8015c7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c80:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8015c82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015c84:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015c86:	47a0      	blx	r4
 8015c88:	4603      	mov	r3, r0
 8015c8a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8015c8e:	e05a      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
        }

        default:
            status = HAL_ERROR;
 8015c90:	2301      	movs	r3, #1
 8015c92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8015c96:	e056      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015c98:	bf00      	nop
 8015c9a:	e054      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015c9c:	bf00      	nop
 8015c9e:	e052      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ca0:	bf00      	nop
 8015ca2:	e050      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ca4:	bf00      	nop
 8015ca6:	e04e      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ca8:	bf00      	nop
 8015caa:	e04c      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cac:	bf00      	nop
 8015cae:	e04a      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cb0:	bf00      	nop
 8015cb2:	e048      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cb4:	bf00      	nop
 8015cb6:	e046      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cb8:	bf00      	nop
 8015cba:	e044      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cbc:	bf00      	nop
 8015cbe:	e042      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cc0:	bf00      	nop
 8015cc2:	e040      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cc4:	bf00      	nop
 8015cc6:	e03e      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cc8:	bf00      	nop
 8015cca:	e03c      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ccc:	bf00      	nop
 8015cce:	e03a      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cd0:	bf00      	nop
 8015cd2:	e038      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cd4:	bf00      	nop
 8015cd6:	e036      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cd8:	bf00      	nop
 8015cda:	e034      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cdc:	bf00      	nop
 8015cde:	e032      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ce0:	bf00      	nop
 8015ce2:	e030      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ce4:	bf00      	nop
 8015ce6:	e02e      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ce8:	bf00      	nop
 8015cea:	e02c      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cec:	bf00      	nop
 8015cee:	e02a      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cf0:	bf00      	nop
 8015cf2:	e028      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cf4:	bf00      	nop
 8015cf6:	e026      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cf8:	bf00      	nop
 8015cfa:	e024      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015cfc:	bf00      	nop
 8015cfe:	e022      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d00:	bf00      	nop
 8015d02:	e020      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d04:	bf00      	nop
 8015d06:	e01e      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d08:	bf00      	nop
 8015d0a:	e01c      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d0c:	bf00      	nop
 8015d0e:	e01a      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d10:	bf00      	nop
 8015d12:	e018      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d14:	bf00      	nop
 8015d16:	e016      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d18:	bf00      	nop
 8015d1a:	e014      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d1c:	bf00      	nop
 8015d1e:	e012      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d20:	bf00      	nop
 8015d22:	e010      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d24:	bf00      	nop
 8015d26:	e00e      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d28:	bf00      	nop
 8015d2a:	e00c      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d2c:	bf00      	nop
 8015d2e:	e00a      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d30:	bf00      	nop
 8015d32:	e008      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d34:	bf00      	nop
 8015d36:	e006      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d38:	bf00      	nop
 8015d3a:	e004      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d3c:	bf00      	nop
 8015d3e:	e002      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d40:	bf00      	nop
 8015d42:	e000      	b.n	8015d46 <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d44:	bf00      	nop
    }

    if (info != NULL) {
 8015d46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d003      	beq.n	8015d56 <Zigbee_CallBackProcessing+0x1786>
        zb_ipc_m4_cb_info_free(info);
 8015d4e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8015d52:	f7fd fb9b 	bl	801348c <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 8015d56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d5a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8015d5e:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8015d60:	f7fc fc9a 	bl	8012698 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 8015d64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015d6e:	46bd      	mov	sp, r7
 8015d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d72:	bf00      	nop
 8015d74:	20001a04 	.word	0x20001a04
 8015d78:	20001a18 	.word	0x20001a18

08015d7c <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8015d7c:	b590      	push	{r4, r7, lr}
 8015d7e:	b089      	sub	sp, #36	@ 0x24
 8015d80:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8015d82:	2300      	movs	r3, #0
 8015d84:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8015d86:	f7f3 fa0d 	bl	80091a4 <ZIGBEE_Get_M0RequestPayloadBuffer>
 8015d8a:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	2b09      	cmp	r3, #9
 8015d92:	d046      	beq.n	8015e22 <Zigbee_M0RequestProcessing+0xa6>
 8015d94:	2b09      	cmp	r3, #9
 8015d96:	d864      	bhi.n	8015e62 <Zigbee_M0RequestProcessing+0xe6>
 8015d98:	2b07      	cmp	r3, #7
 8015d9a:	d002      	beq.n	8015da2 <Zigbee_M0RequestProcessing+0x26>
 8015d9c:	2b08      	cmp	r3, #8
 8015d9e:	d01e      	beq.n	8015dde <Zigbee_M0RequestProcessing+0x62>
 8015da0:	e05f      	b.n	8015e62 <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	685b      	ldr	r3, [r3, #4]
 8015da6:	2b01      	cmp	r3, #1
 8015da8:	d006      	beq.n	8015db8 <Zigbee_M0RequestProcessing+0x3c>
 8015daa:	4b33      	ldr	r3, [pc, #204]	@ (8015e78 <Zigbee_M0RequestProcessing+0xfc>)
 8015dac:	4a33      	ldr	r2, [pc, #204]	@ (8015e7c <Zigbee_M0RequestProcessing+0x100>)
 8015dae:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8015db2:	4833      	ldr	r0, [pc, #204]	@ (8015e80 <Zigbee_M0RequestProcessing+0x104>)
 8015db4:	f000 fe44 	bl	8016a40 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	689b      	ldr	r3, [r3, #8]
 8015dbc:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8015dbe:	4b31      	ldr	r3, [pc, #196]	@ (8015e84 <Zigbee_M0RequestProcessing+0x108>)
 8015dc0:	685b      	ldr	r3, [r3, #4]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d050      	beq.n	8015e68 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8015dc6:	4b2f      	ldr	r3, [pc, #188]	@ (8015e84 <Zigbee_M0RequestProcessing+0x108>)
 8015dc8:	685c      	ldr	r4, [r3, #4]
 8015dca:	4b2e      	ldr	r3, [pc, #184]	@ (8015e84 <Zigbee_M0RequestProcessing+0x108>)
 8015dcc:	6818      	ldr	r0, [r3, #0]
 8015dce:	4b2e      	ldr	r3, [pc, #184]	@ (8015e88 <Zigbee_M0RequestProcessing+0x10c>)
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	9300      	str	r3, [sp, #0]
 8015dd4:	683b      	ldr	r3, [r7, #0]
 8015dd6:	2200      	movs	r2, #0
 8015dd8:	2100      	movs	r1, #0
 8015dda:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8015ddc:	e044      	b.n	8015e68 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	2b01      	cmp	r3, #1
 8015de4:	d006      	beq.n	8015df4 <Zigbee_M0RequestProcessing+0x78>
 8015de6:	4b24      	ldr	r3, [pc, #144]	@ (8015e78 <Zigbee_M0RequestProcessing+0xfc>)
 8015de8:	4a24      	ldr	r2, [pc, #144]	@ (8015e7c <Zigbee_M0RequestProcessing+0x100>)
 8015dea:	f241 01e1 	movw	r1, #4321	@ 0x10e1
 8015dee:	4824      	ldr	r0, [pc, #144]	@ (8015e80 <Zigbee_M0RequestProcessing+0x104>)
 8015df0:	f000 fe26 	bl	8016a40 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8015df4:	68fb      	ldr	r3, [r7, #12]
 8015df6:	689b      	ldr	r3, [r3, #8]
 8015df8:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8015dfa:	687b      	ldr	r3, [r7, #4]
 8015dfc:	3304      	adds	r3, #4
 8015dfe:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8015e00:	6878      	ldr	r0, [r7, #4]
 8015e02:	f000 fe3b 	bl	8016a7c <malloc>
 8015e06:	4603      	mov	r3, r0
 8015e08:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d004      	beq.n	8015e1a <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8015e10:	6879      	ldr	r1, [r7, #4]
 8015e12:	6938      	ldr	r0, [r7, #16]
 8015e14:	f000 f83c 	bl	8015e90 <zb_malloc_track>
 8015e18:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8015e1a:	693a      	ldr	r2, [r7, #16]
 8015e1c:	68fb      	ldr	r3, [r7, #12]
 8015e1e:	60da      	str	r2, [r3, #12]
            break;
 8015e20:	e023      	b.n	8015e6a <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	2b01      	cmp	r3, #1
 8015e28:	d006      	beq.n	8015e38 <Zigbee_M0RequestProcessing+0xbc>
 8015e2a:	4b13      	ldr	r3, [pc, #76]	@ (8015e78 <Zigbee_M0RequestProcessing+0xfc>)
 8015e2c:	4a13      	ldr	r2, [pc, #76]	@ (8015e7c <Zigbee_M0RequestProcessing+0x100>)
 8015e2e:	f241 01f5 	movw	r1, #4341	@ 0x10f5
 8015e32:	4813      	ldr	r0, [pc, #76]	@ (8015e80 <Zigbee_M0RequestProcessing+0x104>)
 8015e34:	f000 fe04 	bl	8016a40 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	689b      	ldr	r3, [r3, #8]
 8015e3c:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8015e3e:	68bb      	ldr	r3, [r7, #8]
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d106      	bne.n	8015e52 <Zigbee_M0RequestProcessing+0xd6>
 8015e44:	4b11      	ldr	r3, [pc, #68]	@ (8015e8c <Zigbee_M0RequestProcessing+0x110>)
 8015e46:	4a0d      	ldr	r2, [pc, #52]	@ (8015e7c <Zigbee_M0RequestProcessing+0x100>)
 8015e48:	f241 01f7 	movw	r1, #4343	@ 0x10f7
 8015e4c:	480c      	ldr	r0, [pc, #48]	@ (8015e80 <Zigbee_M0RequestProcessing+0x104>)
 8015e4e:	f000 fdf7 	bl	8016a40 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8015e52:	68b8      	ldr	r0, [r7, #8]
 8015e54:	f000 f838 	bl	8015ec8 <zb_malloc_untrack>
 8015e58:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8015e5a:	68b8      	ldr	r0, [r7, #8]
 8015e5c:	f000 fe16 	bl	8016a8c <free>
            break;
 8015e60:	e003      	b.n	8015e6a <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8015e62:	2301      	movs	r3, #1
 8015e64:	75fb      	strb	r3, [r7, #23]
            break;
 8015e66:	e000      	b.n	8015e6a <Zigbee_M0RequestProcessing+0xee>
            break;
 8015e68:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8015e6a:	f7fc fc2f 	bl	80126cc <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 8015e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e70:	4618      	mov	r0, r3
 8015e72:	371c      	adds	r7, #28
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd90      	pop	{r4, r7, pc}
 8015e78:	080184c4 	.word	0x080184c4
 8015e7c:	08018d34 	.word	0x08018d34
 8015e80:	080183b0 	.word	0x080183b0
 8015e84:	20001a18 	.word	0x20001a18
 8015e88:	08018ae8 	.word	0x08018ae8
 8015e8c:	080184dc 	.word	0x080184dc

08015e90 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8015e90:	b480      	push	{r7}
 8015e92:	b085      	sub	sp, #20
 8015e94:	af00      	add	r7, sp, #0
 8015e96:	6078      	str	r0, [r7, #4]
 8015e98:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	683a      	ldr	r2, [r7, #0]
 8015e9e:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	3304      	adds	r3, #4
 8015ea4:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8015ea6:	4b07      	ldr	r3, [pc, #28]	@ (8015ec4 <zb_malloc_track+0x34>)
 8015ea8:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8015eac:	683b      	ldr	r3, [r7, #0]
 8015eae:	4413      	add	r3, r2
 8015eb0:	4a04      	ldr	r2, [pc, #16]	@ (8015ec4 <zb_malloc_track+0x34>)
 8015eb2:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8015eb6:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8015eb8:	4618      	mov	r0, r3
 8015eba:	3714      	adds	r7, #20
 8015ebc:	46bd      	mov	sp, r7
 8015ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ec2:	4770      	bx	lr
 8015ec4:	20001a18 	.word	0x20001a18

08015ec8 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8015ec8:	b480      	push	{r7}
 8015eca:	b085      	sub	sp, #20
 8015ecc:	af00      	add	r7, sp, #0
 8015ece:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 8015ed0:	687b      	ldr	r3, [r7, #4]
 8015ed2:	3b04      	subs	r3, #4
 8015ed4:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 8015edc:	4b07      	ldr	r3, [pc, #28]	@ (8015efc <zb_malloc_untrack+0x34>)
 8015ede:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8015ee2:	68bb      	ldr	r3, [r7, #8]
 8015ee4:	1ad3      	subs	r3, r2, r3
 8015ee6:	4a05      	ldr	r2, [pc, #20]	@ (8015efc <zb_malloc_untrack+0x34>)
 8015ee8:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8015eec:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3714      	adds	r7, #20
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ef8:	4770      	bx	lr
 8015efa:	bf00      	nop
 8015efc:	20001a18 	.word	0x20001a18

08015f00 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b082      	sub	sp, #8
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	4a22      	ldr	r2, [pc, #136]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f0e:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	685b      	ldr	r3, [r3, #4]
 8015f14:	4a20      	ldr	r2, [pc, #128]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f16:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	689b      	ldr	r3, [r3, #8]
 8015f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f1e:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	68db      	ldr	r3, [r3, #12]
 8015f24:	4a1c      	ldr	r2, [pc, #112]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f26:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	691b      	ldr	r3, [r3, #16]
 8015f2c:	4a1a      	ldr	r2, [pc, #104]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f2e:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	695b      	ldr	r3, [r3, #20]
 8015f34:	4a18      	ldr	r2, [pc, #96]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f36:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	699b      	ldr	r3, [r3, #24]
 8015f3c:	4a16      	ldr	r2, [pc, #88]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f3e:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	69db      	ldr	r3, [r3, #28]
 8015f44:	4a14      	ldr	r2, [pc, #80]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f46:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	6a1b      	ldr	r3, [r3, #32]
 8015f4c:	4a12      	ldr	r2, [pc, #72]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f4e:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f54:	4a10      	ldr	r2, [pc, #64]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f56:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f5e:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8015f60:	4b0e      	ldr	r3, [pc, #56]	@ (8015f9c <UTIL_LCD_SetFuncDriver+0x9c>)
 8015f62:	2200      	movs	r2, #0
 8015f64:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8015f66:	4b0d      	ldr	r3, [pc, #52]	@ (8015f9c <UTIL_LCD_SetFuncDriver+0x9c>)
 8015f68:	2200      	movs	r2, #0
 8015f6a:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8015f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f6e:	69db      	ldr	r3, [r3, #28]
 8015f70:	4a0b      	ldr	r2, [pc, #44]	@ (8015fa0 <UTIL_LCD_SetFuncDriver+0xa0>)
 8015f72:	4611      	mov	r1, r2
 8015f74:	2000      	movs	r0, #0
 8015f76:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8015f78:	4b07      	ldr	r3, [pc, #28]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f7a:	6a1b      	ldr	r3, [r3, #32]
 8015f7c:	4a09      	ldr	r2, [pc, #36]	@ (8015fa4 <UTIL_LCD_SetFuncDriver+0xa4>)
 8015f7e:	4611      	mov	r1, r2
 8015f80:	2000      	movs	r0, #0
 8015f82:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8015f84:	4b04      	ldr	r3, [pc, #16]	@ (8015f98 <UTIL_LCD_SetFuncDriver+0x98>)
 8015f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f88:	4a07      	ldr	r2, [pc, #28]	@ (8015fa8 <UTIL_LCD_SetFuncDriver+0xa8>)
 8015f8a:	4611      	mov	r1, r2
 8015f8c:	2000      	movs	r0, #0
 8015f8e:	4798      	blx	r3
}
 8015f90:	bf00      	nop
 8015f92:	3708      	adds	r7, #8
 8015f94:	46bd      	mov	sp, r7
 8015f96:	bd80      	pop	{r7, pc}
 8015f98:	20001c4c 	.word	0x20001c4c
 8015f9c:	20001c0c 	.word	0x20001c0c
 8015fa0:	20001c20 	.word	0x20001c20
 8015fa4:	20001c24 	.word	0x20001c24
 8015fa8:	20001c28 	.word	0x20001c28

08015fac <UTIL_LCD_SetDevice>:
/**
  * @brief  Set the LCD instance to be used.
  * @param  Device  LCD instance
  */
void UTIL_LCD_SetDevice(uint32_t Device)
{
 8015fac:	b580      	push	{r7, lr}
 8015fae:	b082      	sub	sp, #8
 8015fb0:	af00      	add	r7, sp, #0
 8015fb2:	6078      	str	r0, [r7, #4]
  DrawProp->LcdDevice = Device;
 8015fb4:	4a09      	ldr	r2, [pc, #36]	@ (8015fdc <UTIL_LCD_SetDevice+0x30>)
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6113      	str	r3, [r2, #16]
  FuncDriver.GetXSize(Device, &DrawProp->LcdXsize);
 8015fba:	4b09      	ldr	r3, [pc, #36]	@ (8015fe0 <UTIL_LCD_SetDevice+0x34>)
 8015fbc:	69db      	ldr	r3, [r3, #28]
 8015fbe:	4a09      	ldr	r2, [pc, #36]	@ (8015fe4 <UTIL_LCD_SetDevice+0x38>)
 8015fc0:	4611      	mov	r1, r2
 8015fc2:	6878      	ldr	r0, [r7, #4]
 8015fc4:	4798      	blx	r3
  FuncDriver.GetYSize(Device, &DrawProp->LcdYsize);
 8015fc6:	4b06      	ldr	r3, [pc, #24]	@ (8015fe0 <UTIL_LCD_SetDevice+0x34>)
 8015fc8:	6a1b      	ldr	r3, [r3, #32]
 8015fca:	4a07      	ldr	r2, [pc, #28]	@ (8015fe8 <UTIL_LCD_SetDevice+0x3c>)
 8015fcc:	4611      	mov	r1, r2
 8015fce:	6878      	ldr	r0, [r7, #4]
 8015fd0:	4798      	blx	r3
}
 8015fd2:	bf00      	nop
 8015fd4:	3708      	adds	r7, #8
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	20001c0c 	.word	0x20001c0c
 8015fe0:	20001c4c 	.word	0x20001c4c
 8015fe4:	20001c20 	.word	0x20001c20
 8015fe8:	20001c24 	.word	0x20001c24

08015fec <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8015fec:	b480      	push	{r7}
 8015fee:	b083      	sub	sp, #12
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8015ff4:	4b06      	ldr	r3, [pc, #24]	@ (8016010 <UTIL_LCD_SetTextColor+0x24>)
 8015ff6:	68db      	ldr	r3, [r3, #12]
 8015ff8:	4a05      	ldr	r2, [pc, #20]	@ (8016010 <UTIL_LCD_SetTextColor+0x24>)
 8015ffa:	015b      	lsls	r3, r3, #5
 8015ffc:	4413      	add	r3, r2
 8015ffe:	687a      	ldr	r2, [r7, #4]
 8016000:	601a      	str	r2, [r3, #0]
}
 8016002:	bf00      	nop
 8016004:	370c      	adds	r7, #12
 8016006:	46bd      	mov	sp, r7
 8016008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600c:	4770      	bx	lr
 801600e:	bf00      	nop
 8016010:	20001c0c 	.word	0x20001c0c

08016014 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8016014:	b480      	push	{r7}
 8016016:	b083      	sub	sp, #12
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 801601c:	4b06      	ldr	r3, [pc, #24]	@ (8016038 <UTIL_LCD_SetBackColor+0x24>)
 801601e:	68db      	ldr	r3, [r3, #12]
 8016020:	4a05      	ldr	r2, [pc, #20]	@ (8016038 <UTIL_LCD_SetBackColor+0x24>)
 8016022:	015b      	lsls	r3, r3, #5
 8016024:	4413      	add	r3, r2
 8016026:	3304      	adds	r3, #4
 8016028:	687a      	ldr	r2, [r7, #4]
 801602a:	601a      	str	r2, [r3, #0]
}
 801602c:	bf00      	nop
 801602e:	370c      	adds	r7, #12
 8016030:	46bd      	mov	sp, r7
 8016032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016036:	4770      	bx	lr
 8016038:	20001c0c 	.word	0x20001c0c

0801603c <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 801603c:	b480      	push	{r7}
 801603e:	b083      	sub	sp, #12
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8016044:	4b06      	ldr	r3, [pc, #24]	@ (8016060 <UTIL_LCD_SetFont+0x24>)
 8016046:	68db      	ldr	r3, [r3, #12]
 8016048:	4a05      	ldr	r2, [pc, #20]	@ (8016060 <UTIL_LCD_SetFont+0x24>)
 801604a:	015b      	lsls	r3, r3, #5
 801604c:	4413      	add	r3, r2
 801604e:	3308      	adds	r3, #8
 8016050:	687a      	ldr	r2, [r7, #4]
 8016052:	601a      	str	r2, [r3, #0]
}
 8016054:	bf00      	nop
 8016056:	370c      	adds	r7, #12
 8016058:	46bd      	mov	sp, r7
 801605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605e:	4770      	bx	lr
 8016060:	20001c0c 	.word	0x20001c0c

08016064 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 8016064:	b480      	push	{r7}
 8016066:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 8016068:	4b05      	ldr	r3, [pc, #20]	@ (8016080 <UTIL_LCD_GetFont+0x1c>)
 801606a:	68db      	ldr	r3, [r3, #12]
 801606c:	4a04      	ldr	r2, [pc, #16]	@ (8016080 <UTIL_LCD_GetFont+0x1c>)
 801606e:	015b      	lsls	r3, r3, #5
 8016070:	4413      	add	r3, r2
 8016072:	3308      	adds	r3, #8
 8016074:	681b      	ldr	r3, [r3, #0]
}
 8016076:	4618      	mov	r0, r3
 8016078:	46bd      	mov	sp, r7
 801607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607e:	4770      	bx	lr
 8016080:	20001c0c 	.word	0x20001c0c

08016084 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8016084:	b590      	push	{r4, r7, lr}
 8016086:	b087      	sub	sp, #28
 8016088:	af02      	add	r7, sp, #8
 801608a:	60f8      	str	r0, [r7, #12]
 801608c:	60b9      	str	r1, [r7, #8]
 801608e:	607a      	str	r2, [r7, #4]
 8016090:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8016092:	4b08      	ldr	r3, [pc, #32]	@ (80160b4 <UTIL_LCD_FillRGBRect+0x30>)
 8016094:	685c      	ldr	r4, [r3, #4]
 8016096:	4b08      	ldr	r3, [pc, #32]	@ (80160b8 <UTIL_LCD_FillRGBRect+0x34>)
 8016098:	6918      	ldr	r0, [r3, #16]
 801609a:	6a3b      	ldr	r3, [r7, #32]
 801609c:	9301      	str	r3, [sp, #4]
 801609e:	683b      	ldr	r3, [r7, #0]
 80160a0:	9300      	str	r3, [sp, #0]
 80160a2:	687b      	ldr	r3, [r7, #4]
 80160a4:	68ba      	ldr	r2, [r7, #8]
 80160a6:	68f9      	ldr	r1, [r7, #12]
 80160a8:	47a0      	blx	r4
}
 80160aa:	bf00      	nop
 80160ac:	3714      	adds	r7, #20
 80160ae:	46bd      	mov	sp, r7
 80160b0:	bd90      	pop	{r4, r7, pc}
 80160b2:	bf00      	nop
 80160b4:	20001c4c 	.word	0x20001c4c
 80160b8:	20001c0c 	.word	0x20001c0c

080160bc <UTIL_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line  Line to be cleared
  */
void UTIL_LCD_ClearStringLine(uint32_t Line)
{
 80160bc:	b590      	push	{r4, r7, lr}
 80160be:	b085      	sub	sp, #20
 80160c0:	af02      	add	r7, sp, #8
 80160c2:	6078      	str	r0, [r7, #4]
  /* Draw rectangle with background color */
  UTIL_LCD_FillRect(0, (Line * DrawProp[DrawProp->LcdLayer].pFont->Height), DrawProp->LcdXsize, DrawProp[DrawProp->LcdLayer].pFont->Height, DrawProp[DrawProp->LcdLayer].BackColor);
 80160c4:	4b13      	ldr	r3, [pc, #76]	@ (8016114 <UTIL_LCD_ClearStringLine+0x58>)
 80160c6:	68db      	ldr	r3, [r3, #12]
 80160c8:	4a12      	ldr	r2, [pc, #72]	@ (8016114 <UTIL_LCD_ClearStringLine+0x58>)
 80160ca:	015b      	lsls	r3, r3, #5
 80160cc:	4413      	add	r3, r2
 80160ce:	3308      	adds	r3, #8
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	88db      	ldrh	r3, [r3, #6]
 80160d4:	461a      	mov	r2, r3
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	fb03 f102 	mul.w	r1, r3, r2
 80160dc:	4b0d      	ldr	r3, [pc, #52]	@ (8016114 <UTIL_LCD_ClearStringLine+0x58>)
 80160de:	695a      	ldr	r2, [r3, #20]
 80160e0:	4b0c      	ldr	r3, [pc, #48]	@ (8016114 <UTIL_LCD_ClearStringLine+0x58>)
 80160e2:	68db      	ldr	r3, [r3, #12]
 80160e4:	480b      	ldr	r0, [pc, #44]	@ (8016114 <UTIL_LCD_ClearStringLine+0x58>)
 80160e6:	015b      	lsls	r3, r3, #5
 80160e8:	4403      	add	r3, r0
 80160ea:	3308      	adds	r3, #8
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	88db      	ldrh	r3, [r3, #6]
 80160f0:	461c      	mov	r4, r3
 80160f2:	4b08      	ldr	r3, [pc, #32]	@ (8016114 <UTIL_LCD_ClearStringLine+0x58>)
 80160f4:	68db      	ldr	r3, [r3, #12]
 80160f6:	4807      	ldr	r0, [pc, #28]	@ (8016114 <UTIL_LCD_ClearStringLine+0x58>)
 80160f8:	015b      	lsls	r3, r3, #5
 80160fa:	4403      	add	r3, r0
 80160fc:	3304      	adds	r3, #4
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	9300      	str	r3, [sp, #0]
 8016102:	4623      	mov	r3, r4
 8016104:	2000      	movs	r0, #0
 8016106:	f000 f8eb 	bl	80162e0 <UTIL_LCD_FillRect>
}
 801610a:	bf00      	nop
 801610c:	370c      	adds	r7, #12
 801610e:	46bd      	mov	sp, r7
 8016110:	bd90      	pop	{r4, r7, pc}
 8016112:	bf00      	nop
 8016114:	20001c0c 	.word	0x20001c0c

08016118 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b084      	sub	sp, #16
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	4613      	mov	r3, r2
 8016124:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8016126:	4b16      	ldr	r3, [pc, #88]	@ (8016180 <UTIL_LCD_DisplayChar+0x68>)
 8016128:	68db      	ldr	r3, [r3, #12]
 801612a:	4a15      	ldr	r2, [pc, #84]	@ (8016180 <UTIL_LCD_DisplayChar+0x68>)
 801612c:	015b      	lsls	r3, r3, #5
 801612e:	4413      	add	r3, r2
 8016130:	3308      	adds	r3, #8
 8016132:	681b      	ldr	r3, [r3, #0]
 8016134:	681a      	ldr	r2, [r3, #0]
 8016136:	79fb      	ldrb	r3, [r7, #7]
 8016138:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801613a:	4911      	ldr	r1, [pc, #68]	@ (8016180 <UTIL_LCD_DisplayChar+0x68>)
 801613c:	68c9      	ldr	r1, [r1, #12]
 801613e:	4810      	ldr	r0, [pc, #64]	@ (8016180 <UTIL_LCD_DisplayChar+0x68>)
 8016140:	0149      	lsls	r1, r1, #5
 8016142:	4401      	add	r1, r0
 8016144:	3108      	adds	r1, #8
 8016146:	6809      	ldr	r1, [r1, #0]
 8016148:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801614a:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801614e:	4b0c      	ldr	r3, [pc, #48]	@ (8016180 <UTIL_LCD_DisplayChar+0x68>)
 8016150:	68db      	ldr	r3, [r3, #12]
 8016152:	480b      	ldr	r0, [pc, #44]	@ (8016180 <UTIL_LCD_DisplayChar+0x68>)
 8016154:	015b      	lsls	r3, r3, #5
 8016156:	4403      	add	r3, r0
 8016158:	3308      	adds	r3, #8
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	889b      	ldrh	r3, [r3, #4]
 801615e:	3307      	adds	r3, #7
 8016160:	2b00      	cmp	r3, #0
 8016162:	da00      	bge.n	8016166 <UTIL_LCD_DisplayChar+0x4e>
 8016164:	3307      	adds	r3, #7
 8016166:	10db      	asrs	r3, r3, #3
 8016168:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801616c:	4413      	add	r3, r2
 801616e:	461a      	mov	r2, r3
 8016170:	68b9      	ldr	r1, [r7, #8]
 8016172:	68f8      	ldr	r0, [r7, #12]
 8016174:	f000 f8ee 	bl	8016354 <DrawChar>
}
 8016178:	bf00      	nop
 801617a:	3710      	adds	r7, #16
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}
 8016180:	20001c0c 	.word	0x20001c0c

08016184 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8016184:	b580      	push	{r7, lr}
 8016186:	b08a      	sub	sp, #40	@ 0x28
 8016188:	af00      	add	r7, sp, #0
 801618a:	60f8      	str	r0, [r7, #12]
 801618c:	60b9      	str	r1, [r7, #8]
 801618e:	607a      	str	r2, [r7, #4]
 8016190:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 8016192:	2301      	movs	r3, #1
 8016194:	627b      	str	r3, [r7, #36]	@ 0x24
 8016196:	2300      	movs	r3, #0
 8016198:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 801619a:	2300      	movs	r3, #0
 801619c:	61fb      	str	r3, [r7, #28]
 801619e:	2300      	movs	r3, #0
 80161a0:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80161a6:	e002      	b.n	80161ae <UTIL_LCD_DisplayStringAt+0x2a>
 80161a8:	69fb      	ldr	r3, [r7, #28]
 80161aa:	3301      	adds	r3, #1
 80161ac:	61fb      	str	r3, [r7, #28]
 80161ae:	69bb      	ldr	r3, [r7, #24]
 80161b0:	1c5a      	adds	r2, r3, #1
 80161b2:	61ba      	str	r2, [r7, #24]
 80161b4:	781b      	ldrb	r3, [r3, #0]
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d1f6      	bne.n	80161a8 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80161ba:	4b48      	ldr	r3, [pc, #288]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 80161bc:	695b      	ldr	r3, [r3, #20]
 80161be:	4a47      	ldr	r2, [pc, #284]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 80161c0:	68d2      	ldr	r2, [r2, #12]
 80161c2:	4946      	ldr	r1, [pc, #280]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 80161c4:	0152      	lsls	r2, r2, #5
 80161c6:	440a      	add	r2, r1
 80161c8:	3208      	adds	r2, #8
 80161ca:	6812      	ldr	r2, [r2, #0]
 80161cc:	8892      	ldrh	r2, [r2, #4]
 80161ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80161d2:	617b      	str	r3, [r7, #20]

  switch (Mode)
 80161d4:	78fb      	ldrb	r3, [r7, #3]
 80161d6:	2b03      	cmp	r3, #3
 80161d8:	d018      	beq.n	801620c <UTIL_LCD_DisplayStringAt+0x88>
 80161da:	2b03      	cmp	r3, #3
 80161dc:	dc2a      	bgt.n	8016234 <UTIL_LCD_DisplayStringAt+0xb0>
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d002      	beq.n	80161e8 <UTIL_LCD_DisplayStringAt+0x64>
 80161e2:	2b02      	cmp	r3, #2
 80161e4:	d015      	beq.n	8016212 <UTIL_LCD_DisplayStringAt+0x8e>
 80161e6:	e025      	b.n	8016234 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 80161e8:	697a      	ldr	r2, [r7, #20]
 80161ea:	69fb      	ldr	r3, [r7, #28]
 80161ec:	1ad3      	subs	r3, r2, r3
 80161ee:	4a3b      	ldr	r2, [pc, #236]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 80161f0:	68d2      	ldr	r2, [r2, #12]
 80161f2:	493a      	ldr	r1, [pc, #232]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 80161f4:	0152      	lsls	r2, r2, #5
 80161f6:	440a      	add	r2, r1
 80161f8:	3208      	adds	r2, #8
 80161fa:	6812      	ldr	r2, [r2, #0]
 80161fc:	8892      	ldrh	r2, [r2, #4]
 80161fe:	fb02 f303 	mul.w	r3, r2, r3
 8016202:	085b      	lsrs	r3, r3, #1
 8016204:	68fa      	ldr	r2, [r7, #12]
 8016206:	4413      	add	r3, r2
 8016208:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801620a:	e016      	b.n	801623a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 801620c:	68fb      	ldr	r3, [r7, #12]
 801620e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8016210:	e013      	b.n	801623a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8016212:	697a      	ldr	r2, [r7, #20]
 8016214:	69fb      	ldr	r3, [r7, #28]
 8016216:	1ad3      	subs	r3, r2, r3
 8016218:	4a30      	ldr	r2, [pc, #192]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 801621a:	68d2      	ldr	r2, [r2, #12]
 801621c:	492f      	ldr	r1, [pc, #188]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 801621e:	0152      	lsls	r2, r2, #5
 8016220:	440a      	add	r2, r1
 8016222:	3208      	adds	r2, #8
 8016224:	6812      	ldr	r2, [r2, #0]
 8016226:	8892      	ldrh	r2, [r2, #4]
 8016228:	fb03 f202 	mul.w	r2, r3, r2
 801622c:	68fb      	ldr	r3, [r7, #12]
 801622e:	1ad3      	subs	r3, r2, r3
 8016230:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8016232:	e002      	b.n	801623a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8016238:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801623a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801623c:	2b00      	cmp	r3, #0
 801623e:	d003      	beq.n	8016248 <UTIL_LCD_DisplayStringAt+0xc4>
 8016240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016242:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016246:	d31b      	bcc.n	8016280 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8016248:	2301      	movs	r3, #1
 801624a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801624c:	e018      	b.n	8016280 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	781b      	ldrb	r3, [r3, #0]
 8016252:	461a      	mov	r2, r3
 8016254:	68b9      	ldr	r1, [r7, #8]
 8016256:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016258:	f7ff ff5e 	bl	8016118 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801625c:	4b1f      	ldr	r3, [pc, #124]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 801625e:	68db      	ldr	r3, [r3, #12]
 8016260:	4a1e      	ldr	r2, [pc, #120]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 8016262:	015b      	lsls	r3, r3, #5
 8016264:	4413      	add	r3, r2
 8016266:	3308      	adds	r3, #8
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	889b      	ldrh	r3, [r3, #4]
 801626c:	461a      	mov	r2, r3
 801626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016270:	4413      	add	r3, r2
 8016272:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	3301      	adds	r3, #1
 8016278:	607b      	str	r3, [r7, #4]
    i++;
 801627a:	6a3b      	ldr	r3, [r7, #32]
 801627c:	3301      	adds	r3, #1
 801627e:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	781b      	ldrb	r3, [r3, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	bf14      	ite	ne
 8016288:	2301      	movne	r3, #1
 801628a:	2300      	moveq	r3, #0
 801628c:	b2da      	uxtb	r2, r3
 801628e:	4b13      	ldr	r3, [pc, #76]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 8016290:	6959      	ldr	r1, [r3, #20]
 8016292:	4b12      	ldr	r3, [pc, #72]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	4811      	ldr	r0, [pc, #68]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 8016298:	015b      	lsls	r3, r3, #5
 801629a:	4403      	add	r3, r0
 801629c:	3308      	adds	r3, #8
 801629e:	681b      	ldr	r3, [r3, #0]
 80162a0:	889b      	ldrh	r3, [r3, #4]
 80162a2:	4618      	mov	r0, r3
 80162a4:	6a3b      	ldr	r3, [r7, #32]
 80162a6:	fb00 f303 	mul.w	r3, r0, r3
 80162aa:	1acb      	subs	r3, r1, r3
 80162ac:	b29b      	uxth	r3, r3
 80162ae:	490b      	ldr	r1, [pc, #44]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 80162b0:	68c9      	ldr	r1, [r1, #12]
 80162b2:	480a      	ldr	r0, [pc, #40]	@ (80162dc <UTIL_LCD_DisplayStringAt+0x158>)
 80162b4:	0149      	lsls	r1, r1, #5
 80162b6:	4401      	add	r1, r0
 80162b8:	3108      	adds	r1, #8
 80162ba:	6809      	ldr	r1, [r1, #0]
 80162bc:	8889      	ldrh	r1, [r1, #4]
 80162be:	428b      	cmp	r3, r1
 80162c0:	bf2c      	ite	cs
 80162c2:	2301      	movcs	r3, #1
 80162c4:	2300      	movcc	r3, #0
 80162c6:	b2db      	uxtb	r3, r3
 80162c8:	4013      	ands	r3, r2
 80162ca:	b2db      	uxtb	r3, r3
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d1be      	bne.n	801624e <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 80162d0:	bf00      	nop
 80162d2:	bf00      	nop
 80162d4:	3728      	adds	r7, #40	@ 0x28
 80162d6:	46bd      	mov	sp, r7
 80162d8:	bd80      	pop	{r7, pc}
 80162da:	bf00      	nop
 80162dc:	20001c0c 	.word	0x20001c0c

080162e0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80162e0:	b590      	push	{r4, r7, lr}
 80162e2:	b087      	sub	sp, #28
 80162e4:	af02      	add	r7, sp, #8
 80162e6:	60f8      	str	r0, [r7, #12]
 80162e8:	60b9      	str	r1, [r7, #8]
 80162ea:	607a      	str	r2, [r7, #4]
 80162ec:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80162ee:	4b17      	ldr	r3, [pc, #92]	@ (801634c <UTIL_LCD_FillRect+0x6c>)
 80162f0:	69db      	ldr	r3, [r3, #28]
 80162f2:	2b02      	cmp	r3, #2
 80162f4:	d11a      	bne.n	801632c <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80162f6:	4b16      	ldr	r3, [pc, #88]	@ (8016350 <UTIL_LCD_FillRect+0x70>)
 80162f8:	691c      	ldr	r4, [r3, #16]
 80162fa:	4b14      	ldr	r3, [pc, #80]	@ (801634c <UTIL_LCD_FillRect+0x6c>)
 80162fc:	6918      	ldr	r0, [r3, #16]
 80162fe:	6a3b      	ldr	r3, [r7, #32]
 8016300:	08db      	lsrs	r3, r3, #3
 8016302:	f003 021f 	and.w	r2, r3, #31
 8016306:	6a3b      	ldr	r3, [r7, #32]
 8016308:	0a9b      	lsrs	r3, r3, #10
 801630a:	015b      	lsls	r3, r3, #5
 801630c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016310:	431a      	orrs	r2, r3
 8016312:	6a3b      	ldr	r3, [r7, #32]
 8016314:	0cdb      	lsrs	r3, r3, #19
 8016316:	02db      	lsls	r3, r3, #11
 8016318:	b29b      	uxth	r3, r3
 801631a:	4313      	orrs	r3, r2
 801631c:	9301      	str	r3, [sp, #4]
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	9300      	str	r3, [sp, #0]
 8016322:	687b      	ldr	r3, [r7, #4]
 8016324:	68ba      	ldr	r2, [r7, #8]
 8016326:	68f9      	ldr	r1, [r7, #12]
 8016328:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 801632a:	e00b      	b.n	8016344 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 801632c:	4b08      	ldr	r3, [pc, #32]	@ (8016350 <UTIL_LCD_FillRect+0x70>)
 801632e:	691c      	ldr	r4, [r3, #16]
 8016330:	4b06      	ldr	r3, [pc, #24]	@ (801634c <UTIL_LCD_FillRect+0x6c>)
 8016332:	6918      	ldr	r0, [r3, #16]
 8016334:	6a3b      	ldr	r3, [r7, #32]
 8016336:	9301      	str	r3, [sp, #4]
 8016338:	683b      	ldr	r3, [r7, #0]
 801633a:	9300      	str	r3, [sp, #0]
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	68ba      	ldr	r2, [r7, #8]
 8016340:	68f9      	ldr	r1, [r7, #12]
 8016342:	47a0      	blx	r4
}
 8016344:	bf00      	nop
 8016346:	3714      	adds	r7, #20
 8016348:	46bd      	mov	sp, r7
 801634a:	bd90      	pop	{r4, r7, pc}
 801634c:	20001c0c 	.word	0x20001c0c
 8016350:	20001c4c 	.word	0x20001c4c

08016354 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b0b2      	sub	sp, #200	@ 0xc8
 8016358:	af02      	add	r7, sp, #8
 801635a:	60f8      	str	r0, [r7, #12]
 801635c:	60b9      	str	r1, [r7, #8]
 801635e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8016360:	2300      	movs	r3, #0
 8016362:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8016366:	2300      	movs	r3, #0
 8016368:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 801636c:	4ba5      	ldr	r3, [pc, #660]	@ (8016604 <DrawChar+0x2b0>)
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	4aa4      	ldr	r2, [pc, #656]	@ (8016604 <DrawChar+0x2b0>)
 8016372:	015b      	lsls	r3, r3, #5
 8016374:	4413      	add	r3, r2
 8016376:	3308      	adds	r3, #8
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	88db      	ldrh	r3, [r3, #6]
 801637c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8016380:	4ba0      	ldr	r3, [pc, #640]	@ (8016604 <DrawChar+0x2b0>)
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	4a9f      	ldr	r2, [pc, #636]	@ (8016604 <DrawChar+0x2b0>)
 8016386:	015b      	lsls	r3, r3, #5
 8016388:	4413      	add	r3, r2
 801638a:	3308      	adds	r3, #8
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	889b      	ldrh	r3, [r3, #4]
 8016390:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8016394:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016398:	3307      	adds	r3, #7
 801639a:	f023 0207 	bic.w	r2, r3, #7
 801639e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80163a2:	1ad3      	subs	r3, r2, r3
 80163a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 80163a8:	2300      	movs	r3, #0
 80163aa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80163ae:	e11c      	b.n	80165ea <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 80163b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80163b4:	3307      	adds	r3, #7
 80163b6:	08db      	lsrs	r3, r3, #3
 80163b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80163bc:	fb02 f303 	mul.w	r3, r2, r3
 80163c0:	687a      	ldr	r2, [r7, #4]
 80163c2:	4413      	add	r3, r2
 80163c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 80163c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80163cc:	3307      	adds	r3, #7
 80163ce:	08db      	lsrs	r3, r3, #3
 80163d0:	2b01      	cmp	r3, #1
 80163d2:	d002      	beq.n	80163da <DrawChar+0x86>
 80163d4:	2b02      	cmp	r3, #2
 80163d6:	d006      	beq.n	80163e6 <DrawChar+0x92>
 80163d8:	e011      	b.n	80163fe <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80163da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80163de:	781b      	ldrb	r3, [r3, #0]
 80163e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80163e4:	e01d      	b.n	8016422 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80163e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80163ea:	781b      	ldrb	r3, [r3, #0]
 80163ec:	021b      	lsls	r3, r3, #8
 80163ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80163f2:	3201      	adds	r2, #1
 80163f4:	7812      	ldrb	r2, [r2, #0]
 80163f6:	4313      	orrs	r3, r2
 80163f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80163fc:	e011      	b.n	8016422 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80163fe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8016402:	781b      	ldrb	r3, [r3, #0]
 8016404:	041a      	lsls	r2, r3, #16
 8016406:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801640a:	3301      	adds	r3, #1
 801640c:	781b      	ldrb	r3, [r3, #0]
 801640e:	021b      	lsls	r3, r3, #8
 8016410:	4313      	orrs	r3, r2
 8016412:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8016416:	3202      	adds	r2, #2
 8016418:	7812      	ldrb	r2, [r2, #0]
 801641a:	4313      	orrs	r3, r2
 801641c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8016420:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8016422:	4b78      	ldr	r3, [pc, #480]	@ (8016604 <DrawChar+0x2b0>)
 8016424:	68db      	ldr	r3, [r3, #12]
 8016426:	4a77      	ldr	r2, [pc, #476]	@ (8016604 <DrawChar+0x2b0>)
 8016428:	015b      	lsls	r3, r3, #5
 801642a:	4413      	add	r3, r2
 801642c:	331c      	adds	r3, #28
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	2b02      	cmp	r3, #2
 8016432:	f040 808c 	bne.w	801654e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8016436:	2300      	movs	r3, #0
 8016438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801643c:	e074      	b.n	8016528 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 801643e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8016442:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016446:	1ad2      	subs	r2, r2, r3
 8016448:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801644c:	4413      	add	r3, r2
 801644e:	3b01      	subs	r3, #1
 8016450:	2201      	movs	r2, #1
 8016452:	fa02 f303 	lsl.w	r3, r2, r3
 8016456:	461a      	mov	r2, r3
 8016458:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801645c:	4013      	ands	r3, r2
 801645e:	2b00      	cmp	r3, #0
 8016460:	d02d      	beq.n	80164be <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8016462:	4b68      	ldr	r3, [pc, #416]	@ (8016604 <DrawChar+0x2b0>)
 8016464:	68db      	ldr	r3, [r3, #12]
 8016466:	4a67      	ldr	r2, [pc, #412]	@ (8016604 <DrawChar+0x2b0>)
 8016468:	015b      	lsls	r3, r3, #5
 801646a:	4413      	add	r3, r2
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	08db      	lsrs	r3, r3, #3
 8016470:	b29b      	uxth	r3, r3
 8016472:	f003 031f 	and.w	r3, r3, #31
 8016476:	b29a      	uxth	r2, r3
 8016478:	4b62      	ldr	r3, [pc, #392]	@ (8016604 <DrawChar+0x2b0>)
 801647a:	68db      	ldr	r3, [r3, #12]
 801647c:	4961      	ldr	r1, [pc, #388]	@ (8016604 <DrawChar+0x2b0>)
 801647e:	015b      	lsls	r3, r3, #5
 8016480:	440b      	add	r3, r1
 8016482:	681b      	ldr	r3, [r3, #0]
 8016484:	0a9b      	lsrs	r3, r3, #10
 8016486:	b29b      	uxth	r3, r3
 8016488:	015b      	lsls	r3, r3, #5
 801648a:	b29b      	uxth	r3, r3
 801648c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016490:	b29b      	uxth	r3, r3
 8016492:	4313      	orrs	r3, r2
 8016494:	b29a      	uxth	r2, r3
 8016496:	4b5b      	ldr	r3, [pc, #364]	@ (8016604 <DrawChar+0x2b0>)
 8016498:	68db      	ldr	r3, [r3, #12]
 801649a:	495a      	ldr	r1, [pc, #360]	@ (8016604 <DrawChar+0x2b0>)
 801649c:	015b      	lsls	r3, r3, #5
 801649e:	440b      	add	r3, r1
 80164a0:	681b      	ldr	r3, [r3, #0]
 80164a2:	0cdb      	lsrs	r3, r3, #19
 80164a4:	b29b      	uxth	r3, r3
 80164a6:	02db      	lsls	r3, r3, #11
 80164a8:	b29b      	uxth	r3, r3
 80164aa:	4313      	orrs	r3, r2
 80164ac:	b29a      	uxth	r2, r3
 80164ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80164b2:	005b      	lsls	r3, r3, #1
 80164b4:	33c0      	adds	r3, #192	@ 0xc0
 80164b6:	443b      	add	r3, r7
 80164b8:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80164bc:	e02f      	b.n	801651e <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80164be:	4b51      	ldr	r3, [pc, #324]	@ (8016604 <DrawChar+0x2b0>)
 80164c0:	68db      	ldr	r3, [r3, #12]
 80164c2:	4a50      	ldr	r2, [pc, #320]	@ (8016604 <DrawChar+0x2b0>)
 80164c4:	015b      	lsls	r3, r3, #5
 80164c6:	4413      	add	r3, r2
 80164c8:	3304      	adds	r3, #4
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	08db      	lsrs	r3, r3, #3
 80164ce:	b29b      	uxth	r3, r3
 80164d0:	f003 031f 	and.w	r3, r3, #31
 80164d4:	b29a      	uxth	r2, r3
 80164d6:	4b4b      	ldr	r3, [pc, #300]	@ (8016604 <DrawChar+0x2b0>)
 80164d8:	68db      	ldr	r3, [r3, #12]
 80164da:	494a      	ldr	r1, [pc, #296]	@ (8016604 <DrawChar+0x2b0>)
 80164dc:	015b      	lsls	r3, r3, #5
 80164de:	440b      	add	r3, r1
 80164e0:	3304      	adds	r3, #4
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	0a9b      	lsrs	r3, r3, #10
 80164e6:	b29b      	uxth	r3, r3
 80164e8:	015b      	lsls	r3, r3, #5
 80164ea:	b29b      	uxth	r3, r3
 80164ec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	4313      	orrs	r3, r2
 80164f4:	b29a      	uxth	r2, r3
 80164f6:	4b43      	ldr	r3, [pc, #268]	@ (8016604 <DrawChar+0x2b0>)
 80164f8:	68db      	ldr	r3, [r3, #12]
 80164fa:	4942      	ldr	r1, [pc, #264]	@ (8016604 <DrawChar+0x2b0>)
 80164fc:	015b      	lsls	r3, r3, #5
 80164fe:	440b      	add	r3, r1
 8016500:	3304      	adds	r3, #4
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	0cdb      	lsrs	r3, r3, #19
 8016506:	b29b      	uxth	r3, r3
 8016508:	02db      	lsls	r3, r3, #11
 801650a:	b29b      	uxth	r3, r3
 801650c:	4313      	orrs	r3, r2
 801650e:	b29a      	uxth	r2, r3
 8016510:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016514:	005b      	lsls	r3, r3, #1
 8016516:	33c0      	adds	r3, #192	@ 0xc0
 8016518:	443b      	add	r3, r7
 801651a:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 801651e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016522:	3301      	adds	r3, #1
 8016524:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016528:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801652c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016530:	429a      	cmp	r2, r3
 8016532:	d384      	bcc.n	801643e <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8016534:	68b9      	ldr	r1, [r7, #8]
 8016536:	1c4b      	adds	r3, r1, #1
 8016538:	60bb      	str	r3, [r7, #8]
 801653a:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 801653e:	2301      	movs	r3, #1
 8016540:	9300      	str	r3, [sp, #0]
 8016542:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016546:	68f8      	ldr	r0, [r7, #12]
 8016548:	f7ff fd9c 	bl	8016084 <UTIL_LCD_FillRGBRect>
 801654c:	e048      	b.n	80165e0 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 801654e:	2300      	movs	r3, #0
 8016550:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016554:	e032      	b.n	80165bc <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8016556:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801655a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801655e:	1ad2      	subs	r2, r2, r3
 8016560:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016564:	4413      	add	r3, r2
 8016566:	3b01      	subs	r3, #1
 8016568:	2201      	movs	r2, #1
 801656a:	fa02 f303 	lsl.w	r3, r2, r3
 801656e:	461a      	mov	r2, r3
 8016570:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016574:	4013      	ands	r3, r2
 8016576:	2b00      	cmp	r3, #0
 8016578:	d00d      	beq.n	8016596 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801657a:	4b22      	ldr	r3, [pc, #136]	@ (8016604 <DrawChar+0x2b0>)
 801657c:	68db      	ldr	r3, [r3, #12]
 801657e:	4a21      	ldr	r2, [pc, #132]	@ (8016604 <DrawChar+0x2b0>)
 8016580:	015b      	lsls	r3, r3, #5
 8016582:	4413      	add	r3, r2
 8016584:	681a      	ldr	r2, [r3, #0]
 8016586:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801658a:	009b      	lsls	r3, r3, #2
 801658c:	33c0      	adds	r3, #192	@ 0xc0
 801658e:	443b      	add	r3, r7
 8016590:	f843 2cac 	str.w	r2, [r3, #-172]
 8016594:	e00d      	b.n	80165b2 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8016596:	4b1b      	ldr	r3, [pc, #108]	@ (8016604 <DrawChar+0x2b0>)
 8016598:	68db      	ldr	r3, [r3, #12]
 801659a:	4a1a      	ldr	r2, [pc, #104]	@ (8016604 <DrawChar+0x2b0>)
 801659c:	015b      	lsls	r3, r3, #5
 801659e:	4413      	add	r3, r2
 80165a0:	3304      	adds	r3, #4
 80165a2:	681a      	ldr	r2, [r3, #0]
 80165a4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80165a8:	009b      	lsls	r3, r3, #2
 80165aa:	33c0      	adds	r3, #192	@ 0xc0
 80165ac:	443b      	add	r3, r7
 80165ae:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 80165b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80165b6:	3301      	adds	r3, #1
 80165b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80165bc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80165c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d3c6      	bcc.n	8016556 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80165c8:	68b9      	ldr	r1, [r7, #8]
 80165ca:	1c4b      	adds	r3, r1, #1
 80165cc:	60bb      	str	r3, [r7, #8]
 80165ce:	f107 0214 	add.w	r2, r7, #20
 80165d2:	2301      	movs	r3, #1
 80165d4:	9300      	str	r3, [sp, #0]
 80165d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80165da:	68f8      	ldr	r0, [r7, #12]
 80165dc:	f7ff fd52 	bl	8016084 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80165e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80165e4:	3301      	adds	r3, #1
 80165e6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80165ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80165ee:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80165f2:	429a      	cmp	r2, r3
 80165f4:	f4ff aedc 	bcc.w	80163b0 <DrawChar+0x5c>
    }
  }
}
 80165f8:	bf00      	nop
 80165fa:	bf00      	nop
 80165fc:	37c0      	adds	r7, #192	@ 0xc0
 80165fe:	46bd      	mov	sp, r7
 8016600:	bd80      	pop	{r7, pc}
 8016602:	bf00      	nop
 8016604:	20001c0c 	.word	0x20001c0c

08016608 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8016608:	b480      	push	{r7}
 801660a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 801660c:	4b05      	ldr	r3, [pc, #20]	@ (8016624 <UTIL_LPM_Init+0x1c>)
 801660e:	2200      	movs	r2, #0
 8016610:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8016612:	4b05      	ldr	r3, [pc, #20]	@ (8016628 <UTIL_LPM_Init+0x20>)
 8016614:	2200      	movs	r2, #0
 8016616:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016618:	bf00      	nop
 801661a:	46bd      	mov	sp, r7
 801661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016620:	4770      	bx	lr
 8016622:	bf00      	nop
 8016624:	20001c78 	.word	0x20001c78
 8016628:	20001c7c 	.word	0x20001c7c

0801662c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 801662c:	b480      	push	{r7}
 801662e:	b087      	sub	sp, #28
 8016630:	af00      	add	r7, sp, #0
 8016632:	6078      	str	r0, [r7, #4]
 8016634:	460b      	mov	r3, r1
 8016636:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016638:	f3ef 8310 	mrs	r3, PRIMASK
 801663c:	613b      	str	r3, [r7, #16]
  return(result);
 801663e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016640:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016642:	b672      	cpsid	i
}
 8016644:	bf00      	nop
  
  switch(state)
 8016646:	78fb      	ldrb	r3, [r7, #3]
 8016648:	2b00      	cmp	r3, #0
 801664a:	d008      	beq.n	801665e <UTIL_LPM_SetOffMode+0x32>
 801664c:	2b01      	cmp	r3, #1
 801664e:	d10e      	bne.n	801666e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016650:	4b0d      	ldr	r3, [pc, #52]	@ (8016688 <UTIL_LPM_SetOffMode+0x5c>)
 8016652:	681a      	ldr	r2, [r3, #0]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	4313      	orrs	r3, r2
 8016658:	4a0b      	ldr	r2, [pc, #44]	@ (8016688 <UTIL_LPM_SetOffMode+0x5c>)
 801665a:	6013      	str	r3, [r2, #0]
      break;
 801665c:	e008      	b.n	8016670 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	43da      	mvns	r2, r3
 8016662:	4b09      	ldr	r3, [pc, #36]	@ (8016688 <UTIL_LPM_SetOffMode+0x5c>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	4013      	ands	r3, r2
 8016668:	4a07      	ldr	r2, [pc, #28]	@ (8016688 <UTIL_LPM_SetOffMode+0x5c>)
 801666a:	6013      	str	r3, [r2, #0]
      break;
 801666c:	e000      	b.n	8016670 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 801666e:	bf00      	nop
 8016670:	697b      	ldr	r3, [r7, #20]
 8016672:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	f383 8810 	msr	PRIMASK, r3
}
 801667a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801667c:	bf00      	nop
 801667e:	371c      	adds	r7, #28
 8016680:	46bd      	mov	sp, r7
 8016682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016686:	4770      	bx	lr
 8016688:	20001c7c 	.word	0x20001c7c

0801668c <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801668c:	b580      	push	{r7, lr}
 801668e:	b090      	sub	sp, #64	@ 0x40
 8016690:	af00      	add	r7, sp, #0
 8016692:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8016694:	4b73      	ldr	r3, [pc, #460]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801669a:	4b72      	ldr	r3, [pc, #456]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 801669c:	681a      	ldr	r2, [r3, #0]
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	4013      	ands	r3, r2
 80166a2:	4a70      	ldr	r2, [pc, #448]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 80166a4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 80166a6:	4b70      	ldr	r3, [pc, #448]	@ (8016868 <UTIL_SEQ_Run+0x1dc>)
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 80166ac:	4b6f      	ldr	r3, [pc, #444]	@ (801686c <UTIL_SEQ_Run+0x1e0>)
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 80166b2:	4b6f      	ldr	r3, [pc, #444]	@ (8016870 <UTIL_SEQ_Run+0x1e4>)
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80166b8:	4b6e      	ldr	r3, [pc, #440]	@ (8016874 <UTIL_SEQ_Run+0x1e8>)
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80166be:	e08d      	b.n	80167dc <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80166c0:	2300      	movs	r3, #0
 80166c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80166c4:	e002      	b.n	80166cc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80166c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80166c8:	3301      	adds	r3, #1
 80166ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80166cc:	4a6a      	ldr	r2, [pc, #424]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 80166ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80166d0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80166d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166d6:	401a      	ands	r2, r3
 80166d8:	4b62      	ldr	r3, [pc, #392]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	4013      	ands	r3, r2
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d0f1      	beq.n	80166c6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80166e2:	4a65      	ldr	r2, [pc, #404]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 80166e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80166e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80166ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80166ec:	401a      	ands	r2, r3
 80166ee:	4b5d      	ldr	r3, [pc, #372]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	4013      	ands	r3, r2
 80166f4:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80166f6:	4a60      	ldr	r2, [pc, #384]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 80166f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80166fa:	00db      	lsls	r3, r3, #3
 80166fc:	4413      	add	r3, r2
 80166fe:	685a      	ldr	r2, [r3, #4]
 8016700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016702:	4013      	ands	r3, r2
 8016704:	2b00      	cmp	r3, #0
 8016706:	d106      	bne.n	8016716 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016708:	4a5b      	ldr	r2, [pc, #364]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 801670a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801670c:	00db      	lsls	r3, r3, #3
 801670e:	4413      	add	r3, r2
 8016710:	f04f 32ff 	mov.w	r2, #4294967295
 8016714:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8016716:	4a58      	ldr	r2, [pc, #352]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 8016718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801671a:	00db      	lsls	r3, r3, #3
 801671c:	4413      	add	r3, r2
 801671e:	685a      	ldr	r2, [r3, #4]
 8016720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016722:	4013      	ands	r3, r2
 8016724:	4618      	mov	r0, r3
 8016726:	f000 f973 	bl	8016a10 <SEQ_BitPosition>
 801672a:	4603      	mov	r3, r0
 801672c:	461a      	mov	r2, r3
 801672e:	4b53      	ldr	r3, [pc, #332]	@ (801687c <UTIL_SEQ_Run+0x1f0>)
 8016730:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016732:	4a51      	ldr	r2, [pc, #324]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 8016734:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016736:	00db      	lsls	r3, r3, #3
 8016738:	4413      	add	r3, r2
 801673a:	685a      	ldr	r2, [r3, #4]
 801673c:	4b4f      	ldr	r3, [pc, #316]	@ (801687c <UTIL_SEQ_Run+0x1f0>)
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	2101      	movs	r1, #1
 8016742:	fa01 f303 	lsl.w	r3, r1, r3
 8016746:	43db      	mvns	r3, r3
 8016748:	401a      	ands	r2, r3
 801674a:	494b      	ldr	r1, [pc, #300]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 801674c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801674e:	00db      	lsls	r3, r3, #3
 8016750:	440b      	add	r3, r1
 8016752:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016754:	f3ef 8310 	mrs	r3, PRIMASK
 8016758:	61bb      	str	r3, [r7, #24]
  return(result);
 801675a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801675c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801675e:	b672      	cpsid	i
}
 8016760:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016762:	4b46      	ldr	r3, [pc, #280]	@ (801687c <UTIL_SEQ_Run+0x1f0>)
 8016764:	681b      	ldr	r3, [r3, #0]
 8016766:	2201      	movs	r2, #1
 8016768:	fa02 f303 	lsl.w	r3, r2, r3
 801676c:	43da      	mvns	r2, r3
 801676e:	4b3e      	ldr	r3, [pc, #248]	@ (8016868 <UTIL_SEQ_Run+0x1dc>)
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	4013      	ands	r3, r2
 8016774:	4a3c      	ldr	r2, [pc, #240]	@ (8016868 <UTIL_SEQ_Run+0x1dc>)
 8016776:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016778:	2302      	movs	r3, #2
 801677a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801677c:	e013      	b.n	80167a6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801677e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016780:	3b01      	subs	r3, #1
 8016782:	4a3d      	ldr	r2, [pc, #244]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 8016784:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016788:	4b3c      	ldr	r3, [pc, #240]	@ (801687c <UTIL_SEQ_Run+0x1f0>)
 801678a:	681b      	ldr	r3, [r3, #0]
 801678c:	2201      	movs	r2, #1
 801678e:	fa02 f303 	lsl.w	r3, r2, r3
 8016792:	43da      	mvns	r2, r3
 8016794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016796:	3b01      	subs	r3, #1
 8016798:	400a      	ands	r2, r1
 801679a:	4937      	ldr	r1, [pc, #220]	@ (8016878 <UTIL_SEQ_Run+0x1ec>)
 801679c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80167a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167a2:	3b01      	subs	r3, #1
 80167a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80167a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d1e8      	bne.n	801677e <UTIL_SEQ_Run+0xf2>
 80167ac:	6a3b      	ldr	r3, [r7, #32]
 80167ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	f383 8810 	msr	PRIMASK, r3
}
 80167b6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80167b8:	4b30      	ldr	r3, [pc, #192]	@ (801687c <UTIL_SEQ_Run+0x1f0>)
 80167ba:	681b      	ldr	r3, [r3, #0]
 80167bc:	4a30      	ldr	r2, [pc, #192]	@ (8016880 <UTIL_SEQ_Run+0x1f4>)
 80167be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80167c2:	4798      	blx	r3

    local_taskset = TaskSet;
 80167c4:	4b28      	ldr	r3, [pc, #160]	@ (8016868 <UTIL_SEQ_Run+0x1dc>)
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80167ca:	4b28      	ldr	r3, [pc, #160]	@ (801686c <UTIL_SEQ_Run+0x1e0>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80167d0:	4b27      	ldr	r3, [pc, #156]	@ (8016870 <UTIL_SEQ_Run+0x1e4>)
 80167d2:	681b      	ldr	r3, [r3, #0]
 80167d4:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80167d6:	4b27      	ldr	r3, [pc, #156]	@ (8016874 <UTIL_SEQ_Run+0x1e8>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80167dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80167de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167e0:	401a      	ands	r2, r3
 80167e2:	4b20      	ldr	r3, [pc, #128]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	4013      	ands	r3, r2
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d005      	beq.n	80167f8 <UTIL_SEQ_Run+0x16c>
 80167ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80167ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80167f0:	4013      	ands	r3, r2
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	f43f af64 	beq.w	80166c0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80167f8:	4b20      	ldr	r3, [pc, #128]	@ (801687c <UTIL_SEQ_Run+0x1f0>)
 80167fa:	f04f 32ff 	mov.w	r2, #4294967295
 80167fe:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016800:	f000 f8f8 	bl	80169f4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016804:	f3ef 8310 	mrs	r3, PRIMASK
 8016808:	613b      	str	r3, [r7, #16]
  return(result);
 801680a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801680c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801680e:	b672      	cpsid	i
}
 8016810:	bf00      	nop
  local_taskset = TaskSet;
 8016812:	4b15      	ldr	r3, [pc, #84]	@ (8016868 <UTIL_SEQ_Run+0x1dc>)
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8016818:	4b14      	ldr	r3, [pc, #80]	@ (801686c <UTIL_SEQ_Run+0x1e0>)
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801681e:	4b14      	ldr	r3, [pc, #80]	@ (8016870 <UTIL_SEQ_Run+0x1e4>)
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8016824:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016828:	401a      	ands	r2, r3
 801682a:	4b0e      	ldr	r3, [pc, #56]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 801682c:	681b      	ldr	r3, [r3, #0]
 801682e:	4013      	ands	r3, r2
 8016830:	2b00      	cmp	r3, #0
 8016832:	d107      	bne.n	8016844 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8016834:	4b0f      	ldr	r3, [pc, #60]	@ (8016874 <UTIL_SEQ_Run+0x1e8>)
 8016836:	681a      	ldr	r2, [r3, #0]
 8016838:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801683a:	4013      	ands	r3, r2
 801683c:	2b00      	cmp	r3, #0
 801683e:	d101      	bne.n	8016844 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8016840:	f7f0 fc2c 	bl	800709c <UTIL_SEQ_Idle>
 8016844:	69fb      	ldr	r3, [r7, #28]
 8016846:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	f383 8810 	msr	PRIMASK, r3
}
 801684e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8016850:	f000 f8d7 	bl	8016a02 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8016854:	4a03      	ldr	r2, [pc, #12]	@ (8016864 <UTIL_SEQ_Run+0x1d8>)
 8016856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016858:	6013      	str	r3, [r2, #0]

  return;
 801685a:	bf00      	nop
}
 801685c:	3740      	adds	r7, #64	@ 0x40
 801685e:	46bd      	mov	sp, r7
 8016860:	bd80      	pop	{r7, pc}
 8016862:	bf00      	nop
 8016864:	200000a4 	.word	0x200000a4
 8016868:	20001c80 	.word	0x20001c80
 801686c:	20001c84 	.word	0x20001c84
 8016870:	200000a0 	.word	0x200000a0
 8016874:	20001c88 	.word	0x20001c88
 8016878:	20001d10 	.word	0x20001d10
 801687c:	20001c8c 	.word	0x20001c8c
 8016880:	20001c90 	.word	0x20001c90

08016884 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b088      	sub	sp, #32
 8016888:	af00      	add	r7, sp, #0
 801688a:	60f8      	str	r0, [r7, #12]
 801688c:	60b9      	str	r1, [r7, #8]
 801688e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016890:	f3ef 8310 	mrs	r3, PRIMASK
 8016894:	617b      	str	r3, [r7, #20]
  return(result);
 8016896:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016898:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801689a:	b672      	cpsid	i
}
 801689c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801689e:	68f8      	ldr	r0, [r7, #12]
 80168a0:	f000 f8b6 	bl	8016a10 <SEQ_BitPosition>
 80168a4:	4603      	mov	r3, r0
 80168a6:	4619      	mov	r1, r3
 80168a8:	4a06      	ldr	r2, [pc, #24]	@ (80168c4 <UTIL_SEQ_RegTask+0x40>)
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80168b0:	69fb      	ldr	r3, [r7, #28]
 80168b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168b4:	69bb      	ldr	r3, [r7, #24]
 80168b6:	f383 8810 	msr	PRIMASK, r3
}
 80168ba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80168bc:	bf00      	nop
}
 80168be:	3720      	adds	r7, #32
 80168c0:	46bd      	mov	sp, r7
 80168c2:	bd80      	pop	{r7, pc}
 80168c4:	20001c90 	.word	0x20001c90

080168c8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80168c8:	b480      	push	{r7}
 80168ca:	b087      	sub	sp, #28
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168d2:	f3ef 8310 	mrs	r3, PRIMASK
 80168d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80168d8:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80168da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80168dc:	b672      	cpsid	i
}
 80168de:	bf00      	nop

  TaskSet |= TaskId_bm;
 80168e0:	4b0d      	ldr	r3, [pc, #52]	@ (8016918 <UTIL_SEQ_SetTask+0x50>)
 80168e2:	681a      	ldr	r2, [r3, #0]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	4313      	orrs	r3, r2
 80168e8:	4a0b      	ldr	r2, [pc, #44]	@ (8016918 <UTIL_SEQ_SetTask+0x50>)
 80168ea:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80168ec:	4a0b      	ldr	r2, [pc, #44]	@ (801691c <UTIL_SEQ_SetTask+0x54>)
 80168ee:	683b      	ldr	r3, [r7, #0]
 80168f0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	431a      	orrs	r2, r3
 80168f8:	4908      	ldr	r1, [pc, #32]	@ (801691c <UTIL_SEQ_SetTask+0x54>)
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8016900:	697b      	ldr	r3, [r7, #20]
 8016902:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016904:	693b      	ldr	r3, [r7, #16]
 8016906:	f383 8810 	msr	PRIMASK, r3
}
 801690a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801690c:	bf00      	nop
}
 801690e:	371c      	adds	r7, #28
 8016910:	46bd      	mov	sp, r7
 8016912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016916:	4770      	bx	lr
 8016918:	20001c80 	.word	0x20001c80
 801691c:	20001d10 	.word	0x20001d10

08016920 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016920:	b480      	push	{r7}
 8016922:	b087      	sub	sp, #28
 8016924:	af00      	add	r7, sp, #0
 8016926:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016928:	f3ef 8310 	mrs	r3, PRIMASK
 801692c:	60fb      	str	r3, [r7, #12]
  return(result);
 801692e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016930:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016932:	b672      	cpsid	i
}
 8016934:	bf00      	nop

  EvtSet |= EvtId_bm;
 8016936:	4b09      	ldr	r3, [pc, #36]	@ (801695c <UTIL_SEQ_SetEvt+0x3c>)
 8016938:	681a      	ldr	r2, [r3, #0]
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	4313      	orrs	r3, r2
 801693e:	4a07      	ldr	r2, [pc, #28]	@ (801695c <UTIL_SEQ_SetEvt+0x3c>)
 8016940:	6013      	str	r3, [r2, #0]
 8016942:	697b      	ldr	r3, [r7, #20]
 8016944:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016946:	693b      	ldr	r3, [r7, #16]
 8016948:	f383 8810 	msr	PRIMASK, r3
}
 801694c:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801694e:	bf00      	nop
}
 8016950:	371c      	adds	r7, #28
 8016952:	46bd      	mov	sp, r7
 8016954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016958:	4770      	bx	lr
 801695a:	bf00      	nop
 801695c:	20001c84 	.word	0x20001c84

08016960 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8016960:	b580      	push	{r7, lr}
 8016962:	b088      	sub	sp, #32
 8016964:	af00      	add	r7, sp, #0
 8016966:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8016968:	4b1f      	ldr	r3, [pc, #124]	@ (80169e8 <UTIL_SEQ_WaitEvt+0x88>)
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 801696e:	4b1e      	ldr	r3, [pc, #120]	@ (80169e8 <UTIL_SEQ_WaitEvt+0x88>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016976:	d102      	bne.n	801697e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8016978:	2300      	movs	r3, #0
 801697a:	61fb      	str	r3, [r7, #28]
 801697c:	e005      	b.n	801698a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 801697e:	4b1a      	ldr	r3, [pc, #104]	@ (80169e8 <UTIL_SEQ_WaitEvt+0x88>)
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	2201      	movs	r2, #1
 8016984:	fa02 f303 	lsl.w	r3, r2, r3
 8016988:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 801698a:	4b18      	ldr	r3, [pc, #96]	@ (80169ec <UTIL_SEQ_WaitEvt+0x8c>)
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016990:	4a16      	ldr	r2, [pc, #88]	@ (80169ec <UTIL_SEQ_WaitEvt+0x8c>)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8016996:	e003      	b.n	80169a0 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8016998:	6879      	ldr	r1, [r7, #4]
 801699a:	69f8      	ldr	r0, [r7, #28]
 801699c:	f7f0 fb86 	bl	80070ac <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 80169a0:	4b13      	ldr	r3, [pc, #76]	@ (80169f0 <UTIL_SEQ_WaitEvt+0x90>)
 80169a2:	681a      	ldr	r2, [r3, #0]
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	4013      	ands	r3, r2
 80169a8:	2b00      	cmp	r3, #0
 80169aa:	d0f5      	beq.n	8016998 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 80169ac:	4a0e      	ldr	r2, [pc, #56]	@ (80169e8 <UTIL_SEQ_WaitEvt+0x88>)
 80169ae:	69bb      	ldr	r3, [r7, #24]
 80169b0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169b2:	f3ef 8310 	mrs	r3, PRIMASK
 80169b6:	60bb      	str	r3, [r7, #8]
  return(result);
 80169b8:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80169ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80169bc:	b672      	cpsid	i
}
 80169be:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	43da      	mvns	r2, r3
 80169c4:	4b0a      	ldr	r3, [pc, #40]	@ (80169f0 <UTIL_SEQ_WaitEvt+0x90>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	4013      	ands	r3, r2
 80169ca:	4a09      	ldr	r2, [pc, #36]	@ (80169f0 <UTIL_SEQ_WaitEvt+0x90>)
 80169cc:	6013      	str	r3, [r2, #0]
 80169ce:	693b      	ldr	r3, [r7, #16]
 80169d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	f383 8810 	msr	PRIMASK, r3
}
 80169d8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 80169da:	4a04      	ldr	r2, [pc, #16]	@ (80169ec <UTIL_SEQ_WaitEvt+0x8c>)
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	6013      	str	r3, [r2, #0]
  return;
 80169e0:	bf00      	nop
}
 80169e2:	3720      	adds	r7, #32
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}
 80169e8:	20001c8c 	.word	0x20001c8c
 80169ec:	20001c88 	.word	0x20001c88
 80169f0:	20001c84 	.word	0x20001c84

080169f4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 80169f4:	b480      	push	{r7}
 80169f6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 80169f8:	bf00      	nop
}
 80169fa:	46bd      	mov	sp, r7
 80169fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a00:	4770      	bx	lr

08016a02 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8016a02:	b480      	push	{r7}
 8016a04:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016a06:	bf00      	nop
}
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a0e:	4770      	bx	lr

08016a10 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016a10:	b480      	push	{r7}
 8016a12:	b085      	sub	sp, #20
 8016a14:	af00      	add	r7, sp, #0
 8016a16:	6078      	str	r0, [r7, #4]
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8016a1c:	68fb      	ldr	r3, [r7, #12]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d101      	bne.n	8016a26 <SEQ_BitPosition+0x16>
    return 32U;
 8016a22:	2320      	movs	r3, #32
 8016a24:	e003      	b.n	8016a2e <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	fab3 f383 	clz	r3, r3
 8016a2c:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8016a2e:	f1c3 031f 	rsb	r3, r3, #31
 8016a32:	b2db      	uxtb	r3, r3
}
 8016a34:	4618      	mov	r0, r3
 8016a36:	3714      	adds	r7, #20
 8016a38:	46bd      	mov	sp, r7
 8016a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3e:	4770      	bx	lr

08016a40 <__assert_func>:
 8016a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a42:	4614      	mov	r4, r2
 8016a44:	461a      	mov	r2, r3
 8016a46:	4b09      	ldr	r3, [pc, #36]	@ (8016a6c <__assert_func+0x2c>)
 8016a48:	681b      	ldr	r3, [r3, #0]
 8016a4a:	4605      	mov	r5, r0
 8016a4c:	68d8      	ldr	r0, [r3, #12]
 8016a4e:	b954      	cbnz	r4, 8016a66 <__assert_func+0x26>
 8016a50:	4b07      	ldr	r3, [pc, #28]	@ (8016a70 <__assert_func+0x30>)
 8016a52:	461c      	mov	r4, r3
 8016a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a58:	9100      	str	r1, [sp, #0]
 8016a5a:	462b      	mov	r3, r5
 8016a5c:	4905      	ldr	r1, [pc, #20]	@ (8016a74 <__assert_func+0x34>)
 8016a5e:	f000 f96f 	bl	8016d40 <fiprintf>
 8016a62:	f000 fb28 	bl	80170b6 <abort>
 8016a66:	4b04      	ldr	r3, [pc, #16]	@ (8016a78 <__assert_func+0x38>)
 8016a68:	e7f4      	b.n	8016a54 <__assert_func+0x14>
 8016a6a:	bf00      	nop
 8016a6c:	200000b4 	.word	0x200000b4
 8016a70:	080191ff 	.word	0x080191ff
 8016a74:	080191d1 	.word	0x080191d1
 8016a78:	080191c4 	.word	0x080191c4

08016a7c <malloc>:
 8016a7c:	4b02      	ldr	r3, [pc, #8]	@ (8016a88 <malloc+0xc>)
 8016a7e:	4601      	mov	r1, r0
 8016a80:	6818      	ldr	r0, [r3, #0]
 8016a82:	f000 b82d 	b.w	8016ae0 <_malloc_r>
 8016a86:	bf00      	nop
 8016a88:	200000b4 	.word	0x200000b4

08016a8c <free>:
 8016a8c:	4b02      	ldr	r3, [pc, #8]	@ (8016a98 <free+0xc>)
 8016a8e:	4601      	mov	r1, r0
 8016a90:	6818      	ldr	r0, [r3, #0]
 8016a92:	f000 bb17 	b.w	80170c4 <_free_r>
 8016a96:	bf00      	nop
 8016a98:	200000b4 	.word	0x200000b4

08016a9c <sbrk_aligned>:
 8016a9c:	b570      	push	{r4, r5, r6, lr}
 8016a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8016adc <sbrk_aligned+0x40>)
 8016aa0:	460c      	mov	r4, r1
 8016aa2:	6831      	ldr	r1, [r6, #0]
 8016aa4:	4605      	mov	r5, r0
 8016aa6:	b911      	cbnz	r1, 8016aae <sbrk_aligned+0x12>
 8016aa8:	f000 faa6 	bl	8016ff8 <_sbrk_r>
 8016aac:	6030      	str	r0, [r6, #0]
 8016aae:	4621      	mov	r1, r4
 8016ab0:	4628      	mov	r0, r5
 8016ab2:	f000 faa1 	bl	8016ff8 <_sbrk_r>
 8016ab6:	1c43      	adds	r3, r0, #1
 8016ab8:	d103      	bne.n	8016ac2 <sbrk_aligned+0x26>
 8016aba:	f04f 34ff 	mov.w	r4, #4294967295
 8016abe:	4620      	mov	r0, r4
 8016ac0:	bd70      	pop	{r4, r5, r6, pc}
 8016ac2:	1cc4      	adds	r4, r0, #3
 8016ac4:	f024 0403 	bic.w	r4, r4, #3
 8016ac8:	42a0      	cmp	r0, r4
 8016aca:	d0f8      	beq.n	8016abe <sbrk_aligned+0x22>
 8016acc:	1a21      	subs	r1, r4, r0
 8016ace:	4628      	mov	r0, r5
 8016ad0:	f000 fa92 	bl	8016ff8 <_sbrk_r>
 8016ad4:	3001      	adds	r0, #1
 8016ad6:	d1f2      	bne.n	8016abe <sbrk_aligned+0x22>
 8016ad8:	e7ef      	b.n	8016aba <sbrk_aligned+0x1e>
 8016ada:	bf00      	nop
 8016adc:	20001d20 	.word	0x20001d20

08016ae0 <_malloc_r>:
 8016ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ae4:	1ccd      	adds	r5, r1, #3
 8016ae6:	f025 0503 	bic.w	r5, r5, #3
 8016aea:	3508      	adds	r5, #8
 8016aec:	2d0c      	cmp	r5, #12
 8016aee:	bf38      	it	cc
 8016af0:	250c      	movcc	r5, #12
 8016af2:	2d00      	cmp	r5, #0
 8016af4:	4606      	mov	r6, r0
 8016af6:	db01      	blt.n	8016afc <_malloc_r+0x1c>
 8016af8:	42a9      	cmp	r1, r5
 8016afa:	d904      	bls.n	8016b06 <_malloc_r+0x26>
 8016afc:	230c      	movs	r3, #12
 8016afe:	6033      	str	r3, [r6, #0]
 8016b00:	2000      	movs	r0, #0
 8016b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016bdc <_malloc_r+0xfc>
 8016b0a:	f000 f869 	bl	8016be0 <__malloc_lock>
 8016b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8016b12:	461c      	mov	r4, r3
 8016b14:	bb44      	cbnz	r4, 8016b68 <_malloc_r+0x88>
 8016b16:	4629      	mov	r1, r5
 8016b18:	4630      	mov	r0, r6
 8016b1a:	f7ff ffbf 	bl	8016a9c <sbrk_aligned>
 8016b1e:	1c43      	adds	r3, r0, #1
 8016b20:	4604      	mov	r4, r0
 8016b22:	d158      	bne.n	8016bd6 <_malloc_r+0xf6>
 8016b24:	f8d8 4000 	ldr.w	r4, [r8]
 8016b28:	4627      	mov	r7, r4
 8016b2a:	2f00      	cmp	r7, #0
 8016b2c:	d143      	bne.n	8016bb6 <_malloc_r+0xd6>
 8016b2e:	2c00      	cmp	r4, #0
 8016b30:	d04b      	beq.n	8016bca <_malloc_r+0xea>
 8016b32:	6823      	ldr	r3, [r4, #0]
 8016b34:	4639      	mov	r1, r7
 8016b36:	4630      	mov	r0, r6
 8016b38:	eb04 0903 	add.w	r9, r4, r3
 8016b3c:	f000 fa5c 	bl	8016ff8 <_sbrk_r>
 8016b40:	4581      	cmp	r9, r0
 8016b42:	d142      	bne.n	8016bca <_malloc_r+0xea>
 8016b44:	6821      	ldr	r1, [r4, #0]
 8016b46:	1a6d      	subs	r5, r5, r1
 8016b48:	4629      	mov	r1, r5
 8016b4a:	4630      	mov	r0, r6
 8016b4c:	f7ff ffa6 	bl	8016a9c <sbrk_aligned>
 8016b50:	3001      	adds	r0, #1
 8016b52:	d03a      	beq.n	8016bca <_malloc_r+0xea>
 8016b54:	6823      	ldr	r3, [r4, #0]
 8016b56:	442b      	add	r3, r5
 8016b58:	6023      	str	r3, [r4, #0]
 8016b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8016b5e:	685a      	ldr	r2, [r3, #4]
 8016b60:	bb62      	cbnz	r2, 8016bbc <_malloc_r+0xdc>
 8016b62:	f8c8 7000 	str.w	r7, [r8]
 8016b66:	e00f      	b.n	8016b88 <_malloc_r+0xa8>
 8016b68:	6822      	ldr	r2, [r4, #0]
 8016b6a:	1b52      	subs	r2, r2, r5
 8016b6c:	d420      	bmi.n	8016bb0 <_malloc_r+0xd0>
 8016b6e:	2a0b      	cmp	r2, #11
 8016b70:	d917      	bls.n	8016ba2 <_malloc_r+0xc2>
 8016b72:	1961      	adds	r1, r4, r5
 8016b74:	42a3      	cmp	r3, r4
 8016b76:	6025      	str	r5, [r4, #0]
 8016b78:	bf18      	it	ne
 8016b7a:	6059      	strne	r1, [r3, #4]
 8016b7c:	6863      	ldr	r3, [r4, #4]
 8016b7e:	bf08      	it	eq
 8016b80:	f8c8 1000 	streq.w	r1, [r8]
 8016b84:	5162      	str	r2, [r4, r5]
 8016b86:	604b      	str	r3, [r1, #4]
 8016b88:	4630      	mov	r0, r6
 8016b8a:	f000 f82f 	bl	8016bec <__malloc_unlock>
 8016b8e:	f104 000b 	add.w	r0, r4, #11
 8016b92:	1d23      	adds	r3, r4, #4
 8016b94:	f020 0007 	bic.w	r0, r0, #7
 8016b98:	1ac2      	subs	r2, r0, r3
 8016b9a:	bf1c      	itt	ne
 8016b9c:	1a1b      	subne	r3, r3, r0
 8016b9e:	50a3      	strne	r3, [r4, r2]
 8016ba0:	e7af      	b.n	8016b02 <_malloc_r+0x22>
 8016ba2:	6862      	ldr	r2, [r4, #4]
 8016ba4:	42a3      	cmp	r3, r4
 8016ba6:	bf0c      	ite	eq
 8016ba8:	f8c8 2000 	streq.w	r2, [r8]
 8016bac:	605a      	strne	r2, [r3, #4]
 8016bae:	e7eb      	b.n	8016b88 <_malloc_r+0xa8>
 8016bb0:	4623      	mov	r3, r4
 8016bb2:	6864      	ldr	r4, [r4, #4]
 8016bb4:	e7ae      	b.n	8016b14 <_malloc_r+0x34>
 8016bb6:	463c      	mov	r4, r7
 8016bb8:	687f      	ldr	r7, [r7, #4]
 8016bba:	e7b6      	b.n	8016b2a <_malloc_r+0x4a>
 8016bbc:	461a      	mov	r2, r3
 8016bbe:	685b      	ldr	r3, [r3, #4]
 8016bc0:	42a3      	cmp	r3, r4
 8016bc2:	d1fb      	bne.n	8016bbc <_malloc_r+0xdc>
 8016bc4:	2300      	movs	r3, #0
 8016bc6:	6053      	str	r3, [r2, #4]
 8016bc8:	e7de      	b.n	8016b88 <_malloc_r+0xa8>
 8016bca:	230c      	movs	r3, #12
 8016bcc:	6033      	str	r3, [r6, #0]
 8016bce:	4630      	mov	r0, r6
 8016bd0:	f000 f80c 	bl	8016bec <__malloc_unlock>
 8016bd4:	e794      	b.n	8016b00 <_malloc_r+0x20>
 8016bd6:	6005      	str	r5, [r0, #0]
 8016bd8:	e7d6      	b.n	8016b88 <_malloc_r+0xa8>
 8016bda:	bf00      	nop
 8016bdc:	20001d24 	.word	0x20001d24

08016be0 <__malloc_lock>:
 8016be0:	4801      	ldr	r0, [pc, #4]	@ (8016be8 <__malloc_lock+0x8>)
 8016be2:	f000 ba56 	b.w	8017092 <__retarget_lock_acquire_recursive>
 8016be6:	bf00      	nop
 8016be8:	20001e68 	.word	0x20001e68

08016bec <__malloc_unlock>:
 8016bec:	4801      	ldr	r0, [pc, #4]	@ (8016bf4 <__malloc_unlock+0x8>)
 8016bee:	f000 ba51 	b.w	8017094 <__retarget_lock_release_recursive>
 8016bf2:	bf00      	nop
 8016bf4:	20001e68 	.word	0x20001e68

08016bf8 <std>:
 8016bf8:	2300      	movs	r3, #0
 8016bfa:	b510      	push	{r4, lr}
 8016bfc:	4604      	mov	r4, r0
 8016bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8016c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c06:	6083      	str	r3, [r0, #8]
 8016c08:	8181      	strh	r1, [r0, #12]
 8016c0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8016c0c:	81c2      	strh	r2, [r0, #14]
 8016c0e:	6183      	str	r3, [r0, #24]
 8016c10:	4619      	mov	r1, r3
 8016c12:	2208      	movs	r2, #8
 8016c14:	305c      	adds	r0, #92	@ 0x5c
 8016c16:	f000 f9a5 	bl	8016f64 <memset>
 8016c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8016c50 <std+0x58>)
 8016c1c:	6263      	str	r3, [r4, #36]	@ 0x24
 8016c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8016c54 <std+0x5c>)
 8016c20:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016c22:	4b0d      	ldr	r3, [pc, #52]	@ (8016c58 <std+0x60>)
 8016c24:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016c26:	4b0d      	ldr	r3, [pc, #52]	@ (8016c5c <std+0x64>)
 8016c28:	6323      	str	r3, [r4, #48]	@ 0x30
 8016c2a:	4b0d      	ldr	r3, [pc, #52]	@ (8016c60 <std+0x68>)
 8016c2c:	6224      	str	r4, [r4, #32]
 8016c2e:	429c      	cmp	r4, r3
 8016c30:	d006      	beq.n	8016c40 <std+0x48>
 8016c32:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016c36:	4294      	cmp	r4, r2
 8016c38:	d002      	beq.n	8016c40 <std+0x48>
 8016c3a:	33d0      	adds	r3, #208	@ 0xd0
 8016c3c:	429c      	cmp	r4, r3
 8016c3e:	d105      	bne.n	8016c4c <std+0x54>
 8016c40:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016c48:	f000 ba22 	b.w	8017090 <__retarget_lock_init_recursive>
 8016c4c:	bd10      	pop	{r4, pc}
 8016c4e:	bf00      	nop
 8016c50:	08016e6d 	.word	0x08016e6d
 8016c54:	08016e8f 	.word	0x08016e8f
 8016c58:	08016ec7 	.word	0x08016ec7
 8016c5c:	08016eeb 	.word	0x08016eeb
 8016c60:	20001d28 	.word	0x20001d28

08016c64 <stdio_exit_handler>:
 8016c64:	4a02      	ldr	r2, [pc, #8]	@ (8016c70 <stdio_exit_handler+0xc>)
 8016c66:	4903      	ldr	r1, [pc, #12]	@ (8016c74 <stdio_exit_handler+0x10>)
 8016c68:	4803      	ldr	r0, [pc, #12]	@ (8016c78 <stdio_exit_handler+0x14>)
 8016c6a:	f000 b87b 	b.w	8016d64 <_fwalk_sglue>
 8016c6e:	bf00      	nop
 8016c70:	200000a8 	.word	0x200000a8
 8016c74:	08017ab1 	.word	0x08017ab1
 8016c78:	200000b8 	.word	0x200000b8

08016c7c <cleanup_stdio>:
 8016c7c:	6841      	ldr	r1, [r0, #4]
 8016c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8016cb0 <cleanup_stdio+0x34>)
 8016c80:	4299      	cmp	r1, r3
 8016c82:	b510      	push	{r4, lr}
 8016c84:	4604      	mov	r4, r0
 8016c86:	d001      	beq.n	8016c8c <cleanup_stdio+0x10>
 8016c88:	f000 ff12 	bl	8017ab0 <_fflush_r>
 8016c8c:	68a1      	ldr	r1, [r4, #8]
 8016c8e:	4b09      	ldr	r3, [pc, #36]	@ (8016cb4 <cleanup_stdio+0x38>)
 8016c90:	4299      	cmp	r1, r3
 8016c92:	d002      	beq.n	8016c9a <cleanup_stdio+0x1e>
 8016c94:	4620      	mov	r0, r4
 8016c96:	f000 ff0b 	bl	8017ab0 <_fflush_r>
 8016c9a:	68e1      	ldr	r1, [r4, #12]
 8016c9c:	4b06      	ldr	r3, [pc, #24]	@ (8016cb8 <cleanup_stdio+0x3c>)
 8016c9e:	4299      	cmp	r1, r3
 8016ca0:	d004      	beq.n	8016cac <cleanup_stdio+0x30>
 8016ca2:	4620      	mov	r0, r4
 8016ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ca8:	f000 bf02 	b.w	8017ab0 <_fflush_r>
 8016cac:	bd10      	pop	{r4, pc}
 8016cae:	bf00      	nop
 8016cb0:	20001d28 	.word	0x20001d28
 8016cb4:	20001d90 	.word	0x20001d90
 8016cb8:	20001df8 	.word	0x20001df8

08016cbc <global_stdio_init.part.0>:
 8016cbc:	b510      	push	{r4, lr}
 8016cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8016cec <global_stdio_init.part.0+0x30>)
 8016cc0:	4c0b      	ldr	r4, [pc, #44]	@ (8016cf0 <global_stdio_init.part.0+0x34>)
 8016cc2:	4a0c      	ldr	r2, [pc, #48]	@ (8016cf4 <global_stdio_init.part.0+0x38>)
 8016cc4:	601a      	str	r2, [r3, #0]
 8016cc6:	4620      	mov	r0, r4
 8016cc8:	2200      	movs	r2, #0
 8016cca:	2104      	movs	r1, #4
 8016ccc:	f7ff ff94 	bl	8016bf8 <std>
 8016cd0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016cd4:	2201      	movs	r2, #1
 8016cd6:	2109      	movs	r1, #9
 8016cd8:	f7ff ff8e 	bl	8016bf8 <std>
 8016cdc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016ce0:	2202      	movs	r2, #2
 8016ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ce6:	2112      	movs	r1, #18
 8016ce8:	f7ff bf86 	b.w	8016bf8 <std>
 8016cec:	20001e60 	.word	0x20001e60
 8016cf0:	20001d28 	.word	0x20001d28
 8016cf4:	08016c65 	.word	0x08016c65

08016cf8 <__sfp_lock_acquire>:
 8016cf8:	4801      	ldr	r0, [pc, #4]	@ (8016d00 <__sfp_lock_acquire+0x8>)
 8016cfa:	f000 b9ca 	b.w	8017092 <__retarget_lock_acquire_recursive>
 8016cfe:	bf00      	nop
 8016d00:	20001e69 	.word	0x20001e69

08016d04 <__sfp_lock_release>:
 8016d04:	4801      	ldr	r0, [pc, #4]	@ (8016d0c <__sfp_lock_release+0x8>)
 8016d06:	f000 b9c5 	b.w	8017094 <__retarget_lock_release_recursive>
 8016d0a:	bf00      	nop
 8016d0c:	20001e69 	.word	0x20001e69

08016d10 <__sinit>:
 8016d10:	b510      	push	{r4, lr}
 8016d12:	4604      	mov	r4, r0
 8016d14:	f7ff fff0 	bl	8016cf8 <__sfp_lock_acquire>
 8016d18:	6a23      	ldr	r3, [r4, #32]
 8016d1a:	b11b      	cbz	r3, 8016d24 <__sinit+0x14>
 8016d1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d20:	f7ff bff0 	b.w	8016d04 <__sfp_lock_release>
 8016d24:	4b04      	ldr	r3, [pc, #16]	@ (8016d38 <__sinit+0x28>)
 8016d26:	6223      	str	r3, [r4, #32]
 8016d28:	4b04      	ldr	r3, [pc, #16]	@ (8016d3c <__sinit+0x2c>)
 8016d2a:	681b      	ldr	r3, [r3, #0]
 8016d2c:	2b00      	cmp	r3, #0
 8016d2e:	d1f5      	bne.n	8016d1c <__sinit+0xc>
 8016d30:	f7ff ffc4 	bl	8016cbc <global_stdio_init.part.0>
 8016d34:	e7f2      	b.n	8016d1c <__sinit+0xc>
 8016d36:	bf00      	nop
 8016d38:	08016c7d 	.word	0x08016c7d
 8016d3c:	20001e60 	.word	0x20001e60

08016d40 <fiprintf>:
 8016d40:	b40e      	push	{r1, r2, r3}
 8016d42:	b503      	push	{r0, r1, lr}
 8016d44:	4601      	mov	r1, r0
 8016d46:	ab03      	add	r3, sp, #12
 8016d48:	4805      	ldr	r0, [pc, #20]	@ (8016d60 <fiprintf+0x20>)
 8016d4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8016d4e:	6800      	ldr	r0, [r0, #0]
 8016d50:	9301      	str	r3, [sp, #4]
 8016d52:	f000 fb83 	bl	801745c <_vfiprintf_r>
 8016d56:	b002      	add	sp, #8
 8016d58:	f85d eb04 	ldr.w	lr, [sp], #4
 8016d5c:	b003      	add	sp, #12
 8016d5e:	4770      	bx	lr
 8016d60:	200000b4 	.word	0x200000b4

08016d64 <_fwalk_sglue>:
 8016d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016d68:	4607      	mov	r7, r0
 8016d6a:	4688      	mov	r8, r1
 8016d6c:	4614      	mov	r4, r2
 8016d6e:	2600      	movs	r6, #0
 8016d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016d74:	f1b9 0901 	subs.w	r9, r9, #1
 8016d78:	d505      	bpl.n	8016d86 <_fwalk_sglue+0x22>
 8016d7a:	6824      	ldr	r4, [r4, #0]
 8016d7c:	2c00      	cmp	r4, #0
 8016d7e:	d1f7      	bne.n	8016d70 <_fwalk_sglue+0xc>
 8016d80:	4630      	mov	r0, r6
 8016d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016d86:	89ab      	ldrh	r3, [r5, #12]
 8016d88:	2b01      	cmp	r3, #1
 8016d8a:	d907      	bls.n	8016d9c <_fwalk_sglue+0x38>
 8016d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016d90:	3301      	adds	r3, #1
 8016d92:	d003      	beq.n	8016d9c <_fwalk_sglue+0x38>
 8016d94:	4629      	mov	r1, r5
 8016d96:	4638      	mov	r0, r7
 8016d98:	47c0      	blx	r8
 8016d9a:	4306      	orrs	r6, r0
 8016d9c:	3568      	adds	r5, #104	@ 0x68
 8016d9e:	e7e9      	b.n	8016d74 <_fwalk_sglue+0x10>

08016da0 <iprintf>:
 8016da0:	b40f      	push	{r0, r1, r2, r3}
 8016da2:	b507      	push	{r0, r1, r2, lr}
 8016da4:	4906      	ldr	r1, [pc, #24]	@ (8016dc0 <iprintf+0x20>)
 8016da6:	ab04      	add	r3, sp, #16
 8016da8:	6808      	ldr	r0, [r1, #0]
 8016daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8016dae:	6881      	ldr	r1, [r0, #8]
 8016db0:	9301      	str	r3, [sp, #4]
 8016db2:	f000 fb53 	bl	801745c <_vfiprintf_r>
 8016db6:	b003      	add	sp, #12
 8016db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8016dbc:	b004      	add	sp, #16
 8016dbe:	4770      	bx	lr
 8016dc0:	200000b4 	.word	0x200000b4

08016dc4 <sniprintf>:
 8016dc4:	b40c      	push	{r2, r3}
 8016dc6:	b530      	push	{r4, r5, lr}
 8016dc8:	4b17      	ldr	r3, [pc, #92]	@ (8016e28 <sniprintf+0x64>)
 8016dca:	1e0c      	subs	r4, r1, #0
 8016dcc:	681d      	ldr	r5, [r3, #0]
 8016dce:	b09d      	sub	sp, #116	@ 0x74
 8016dd0:	da08      	bge.n	8016de4 <sniprintf+0x20>
 8016dd2:	238b      	movs	r3, #139	@ 0x8b
 8016dd4:	602b      	str	r3, [r5, #0]
 8016dd6:	f04f 30ff 	mov.w	r0, #4294967295
 8016dda:	b01d      	add	sp, #116	@ 0x74
 8016ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016de0:	b002      	add	sp, #8
 8016de2:	4770      	bx	lr
 8016de4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016de8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016dec:	bf14      	ite	ne
 8016dee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016df2:	4623      	moveq	r3, r4
 8016df4:	9304      	str	r3, [sp, #16]
 8016df6:	9307      	str	r3, [sp, #28]
 8016df8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016dfc:	9002      	str	r0, [sp, #8]
 8016dfe:	9006      	str	r0, [sp, #24]
 8016e00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016e04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016e06:	ab21      	add	r3, sp, #132	@ 0x84
 8016e08:	a902      	add	r1, sp, #8
 8016e0a:	4628      	mov	r0, r5
 8016e0c:	9301      	str	r3, [sp, #4]
 8016e0e:	f000 f9ff 	bl	8017210 <_svfiprintf_r>
 8016e12:	1c43      	adds	r3, r0, #1
 8016e14:	bfbc      	itt	lt
 8016e16:	238b      	movlt	r3, #139	@ 0x8b
 8016e18:	602b      	strlt	r3, [r5, #0]
 8016e1a:	2c00      	cmp	r4, #0
 8016e1c:	d0dd      	beq.n	8016dda <sniprintf+0x16>
 8016e1e:	9b02      	ldr	r3, [sp, #8]
 8016e20:	2200      	movs	r2, #0
 8016e22:	701a      	strb	r2, [r3, #0]
 8016e24:	e7d9      	b.n	8016dda <sniprintf+0x16>
 8016e26:	bf00      	nop
 8016e28:	200000b4 	.word	0x200000b4

08016e2c <siprintf>:
 8016e2c:	b40e      	push	{r1, r2, r3}
 8016e2e:	b500      	push	{lr}
 8016e30:	b09c      	sub	sp, #112	@ 0x70
 8016e32:	ab1d      	add	r3, sp, #116	@ 0x74
 8016e34:	9002      	str	r0, [sp, #8]
 8016e36:	9006      	str	r0, [sp, #24]
 8016e38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016e3c:	4809      	ldr	r0, [pc, #36]	@ (8016e64 <siprintf+0x38>)
 8016e3e:	9107      	str	r1, [sp, #28]
 8016e40:	9104      	str	r1, [sp, #16]
 8016e42:	4909      	ldr	r1, [pc, #36]	@ (8016e68 <siprintf+0x3c>)
 8016e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e48:	9105      	str	r1, [sp, #20]
 8016e4a:	6800      	ldr	r0, [r0, #0]
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	a902      	add	r1, sp, #8
 8016e50:	f000 f9de 	bl	8017210 <_svfiprintf_r>
 8016e54:	9b02      	ldr	r3, [sp, #8]
 8016e56:	2200      	movs	r2, #0
 8016e58:	701a      	strb	r2, [r3, #0]
 8016e5a:	b01c      	add	sp, #112	@ 0x70
 8016e5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e60:	b003      	add	sp, #12
 8016e62:	4770      	bx	lr
 8016e64:	200000b4 	.word	0x200000b4
 8016e68:	ffff0208 	.word	0xffff0208

08016e6c <__sread>:
 8016e6c:	b510      	push	{r4, lr}
 8016e6e:	460c      	mov	r4, r1
 8016e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e74:	f000 f8ae 	bl	8016fd4 <_read_r>
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	bfab      	itete	ge
 8016e7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016e7e:	89a3      	ldrhlt	r3, [r4, #12]
 8016e80:	181b      	addge	r3, r3, r0
 8016e82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016e86:	bfac      	ite	ge
 8016e88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016e8a:	81a3      	strhlt	r3, [r4, #12]
 8016e8c:	bd10      	pop	{r4, pc}

08016e8e <__swrite>:
 8016e8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e92:	461f      	mov	r7, r3
 8016e94:	898b      	ldrh	r3, [r1, #12]
 8016e96:	05db      	lsls	r3, r3, #23
 8016e98:	4605      	mov	r5, r0
 8016e9a:	460c      	mov	r4, r1
 8016e9c:	4616      	mov	r6, r2
 8016e9e:	d505      	bpl.n	8016eac <__swrite+0x1e>
 8016ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ea4:	2302      	movs	r3, #2
 8016ea6:	2200      	movs	r2, #0
 8016ea8:	f000 f882 	bl	8016fb0 <_lseek_r>
 8016eac:	89a3      	ldrh	r3, [r4, #12]
 8016eae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016eb2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016eb6:	81a3      	strh	r3, [r4, #12]
 8016eb8:	4632      	mov	r2, r6
 8016eba:	463b      	mov	r3, r7
 8016ebc:	4628      	mov	r0, r5
 8016ebe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016ec2:	f000 b8a9 	b.w	8017018 <_write_r>

08016ec6 <__sseek>:
 8016ec6:	b510      	push	{r4, lr}
 8016ec8:	460c      	mov	r4, r1
 8016eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ece:	f000 f86f 	bl	8016fb0 <_lseek_r>
 8016ed2:	1c43      	adds	r3, r0, #1
 8016ed4:	89a3      	ldrh	r3, [r4, #12]
 8016ed6:	bf15      	itete	ne
 8016ed8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016eda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016ede:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016ee2:	81a3      	strheq	r3, [r4, #12]
 8016ee4:	bf18      	it	ne
 8016ee6:	81a3      	strhne	r3, [r4, #12]
 8016ee8:	bd10      	pop	{r4, pc}

08016eea <__sclose>:
 8016eea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eee:	f000 b84f 	b.w	8016f90 <_close_r>

08016ef2 <_vsniprintf_r>:
 8016ef2:	b530      	push	{r4, r5, lr}
 8016ef4:	4614      	mov	r4, r2
 8016ef6:	2c00      	cmp	r4, #0
 8016ef8:	b09b      	sub	sp, #108	@ 0x6c
 8016efa:	4605      	mov	r5, r0
 8016efc:	461a      	mov	r2, r3
 8016efe:	da05      	bge.n	8016f0c <_vsniprintf_r+0x1a>
 8016f00:	238b      	movs	r3, #139	@ 0x8b
 8016f02:	6003      	str	r3, [r0, #0]
 8016f04:	f04f 30ff 	mov.w	r0, #4294967295
 8016f08:	b01b      	add	sp, #108	@ 0x6c
 8016f0a:	bd30      	pop	{r4, r5, pc}
 8016f0c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016f10:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016f14:	bf14      	ite	ne
 8016f16:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016f1a:	4623      	moveq	r3, r4
 8016f1c:	9302      	str	r3, [sp, #8]
 8016f1e:	9305      	str	r3, [sp, #20]
 8016f20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016f24:	9100      	str	r1, [sp, #0]
 8016f26:	9104      	str	r1, [sp, #16]
 8016f28:	f8ad 300e 	strh.w	r3, [sp, #14]
 8016f2c:	4669      	mov	r1, sp
 8016f2e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8016f30:	f000 f96e 	bl	8017210 <_svfiprintf_r>
 8016f34:	1c43      	adds	r3, r0, #1
 8016f36:	bfbc      	itt	lt
 8016f38:	238b      	movlt	r3, #139	@ 0x8b
 8016f3a:	602b      	strlt	r3, [r5, #0]
 8016f3c:	2c00      	cmp	r4, #0
 8016f3e:	d0e3      	beq.n	8016f08 <_vsniprintf_r+0x16>
 8016f40:	9b00      	ldr	r3, [sp, #0]
 8016f42:	2200      	movs	r2, #0
 8016f44:	701a      	strb	r2, [r3, #0]
 8016f46:	e7df      	b.n	8016f08 <_vsniprintf_r+0x16>

08016f48 <vsniprintf>:
 8016f48:	b507      	push	{r0, r1, r2, lr}
 8016f4a:	9300      	str	r3, [sp, #0]
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	460a      	mov	r2, r1
 8016f50:	4601      	mov	r1, r0
 8016f52:	4803      	ldr	r0, [pc, #12]	@ (8016f60 <vsniprintf+0x18>)
 8016f54:	6800      	ldr	r0, [r0, #0]
 8016f56:	f7ff ffcc 	bl	8016ef2 <_vsniprintf_r>
 8016f5a:	b003      	add	sp, #12
 8016f5c:	f85d fb04 	ldr.w	pc, [sp], #4
 8016f60:	200000b4 	.word	0x200000b4

08016f64 <memset>:
 8016f64:	4402      	add	r2, r0
 8016f66:	4603      	mov	r3, r0
 8016f68:	4293      	cmp	r3, r2
 8016f6a:	d100      	bne.n	8016f6e <memset+0xa>
 8016f6c:	4770      	bx	lr
 8016f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8016f72:	e7f9      	b.n	8016f68 <memset+0x4>

08016f74 <strchr>:
 8016f74:	b2c9      	uxtb	r1, r1
 8016f76:	4603      	mov	r3, r0
 8016f78:	4618      	mov	r0, r3
 8016f7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016f7e:	b112      	cbz	r2, 8016f86 <strchr+0x12>
 8016f80:	428a      	cmp	r2, r1
 8016f82:	d1f9      	bne.n	8016f78 <strchr+0x4>
 8016f84:	4770      	bx	lr
 8016f86:	2900      	cmp	r1, #0
 8016f88:	bf18      	it	ne
 8016f8a:	2000      	movne	r0, #0
 8016f8c:	4770      	bx	lr
	...

08016f90 <_close_r>:
 8016f90:	b538      	push	{r3, r4, r5, lr}
 8016f92:	4d06      	ldr	r5, [pc, #24]	@ (8016fac <_close_r+0x1c>)
 8016f94:	2300      	movs	r3, #0
 8016f96:	4604      	mov	r4, r0
 8016f98:	4608      	mov	r0, r1
 8016f9a:	602b      	str	r3, [r5, #0]
 8016f9c:	f7f1 fd80 	bl	8008aa0 <_close>
 8016fa0:	1c43      	adds	r3, r0, #1
 8016fa2:	d102      	bne.n	8016faa <_close_r+0x1a>
 8016fa4:	682b      	ldr	r3, [r5, #0]
 8016fa6:	b103      	cbz	r3, 8016faa <_close_r+0x1a>
 8016fa8:	6023      	str	r3, [r4, #0]
 8016faa:	bd38      	pop	{r3, r4, r5, pc}
 8016fac:	20001e64 	.word	0x20001e64

08016fb0 <_lseek_r>:
 8016fb0:	b538      	push	{r3, r4, r5, lr}
 8016fb2:	4d07      	ldr	r5, [pc, #28]	@ (8016fd0 <_lseek_r+0x20>)
 8016fb4:	4604      	mov	r4, r0
 8016fb6:	4608      	mov	r0, r1
 8016fb8:	4611      	mov	r1, r2
 8016fba:	2200      	movs	r2, #0
 8016fbc:	602a      	str	r2, [r5, #0]
 8016fbe:	461a      	mov	r2, r3
 8016fc0:	f7f1 fd95 	bl	8008aee <_lseek>
 8016fc4:	1c43      	adds	r3, r0, #1
 8016fc6:	d102      	bne.n	8016fce <_lseek_r+0x1e>
 8016fc8:	682b      	ldr	r3, [r5, #0]
 8016fca:	b103      	cbz	r3, 8016fce <_lseek_r+0x1e>
 8016fcc:	6023      	str	r3, [r4, #0]
 8016fce:	bd38      	pop	{r3, r4, r5, pc}
 8016fd0:	20001e64 	.word	0x20001e64

08016fd4 <_read_r>:
 8016fd4:	b538      	push	{r3, r4, r5, lr}
 8016fd6:	4d07      	ldr	r5, [pc, #28]	@ (8016ff4 <_read_r+0x20>)
 8016fd8:	4604      	mov	r4, r0
 8016fda:	4608      	mov	r0, r1
 8016fdc:	4611      	mov	r1, r2
 8016fde:	2200      	movs	r2, #0
 8016fe0:	602a      	str	r2, [r5, #0]
 8016fe2:	461a      	mov	r2, r3
 8016fe4:	f7f1 fd3f 	bl	8008a66 <_read>
 8016fe8:	1c43      	adds	r3, r0, #1
 8016fea:	d102      	bne.n	8016ff2 <_read_r+0x1e>
 8016fec:	682b      	ldr	r3, [r5, #0]
 8016fee:	b103      	cbz	r3, 8016ff2 <_read_r+0x1e>
 8016ff0:	6023      	str	r3, [r4, #0]
 8016ff2:	bd38      	pop	{r3, r4, r5, pc}
 8016ff4:	20001e64 	.word	0x20001e64

08016ff8 <_sbrk_r>:
 8016ff8:	b538      	push	{r3, r4, r5, lr}
 8016ffa:	4d06      	ldr	r5, [pc, #24]	@ (8017014 <_sbrk_r+0x1c>)
 8016ffc:	2300      	movs	r3, #0
 8016ffe:	4604      	mov	r4, r0
 8017000:	4608      	mov	r0, r1
 8017002:	602b      	str	r3, [r5, #0]
 8017004:	f7f1 fd80 	bl	8008b08 <_sbrk>
 8017008:	1c43      	adds	r3, r0, #1
 801700a:	d102      	bne.n	8017012 <_sbrk_r+0x1a>
 801700c:	682b      	ldr	r3, [r5, #0]
 801700e:	b103      	cbz	r3, 8017012 <_sbrk_r+0x1a>
 8017010:	6023      	str	r3, [r4, #0]
 8017012:	bd38      	pop	{r3, r4, r5, pc}
 8017014:	20001e64 	.word	0x20001e64

08017018 <_write_r>:
 8017018:	b538      	push	{r3, r4, r5, lr}
 801701a:	4d07      	ldr	r5, [pc, #28]	@ (8017038 <_write_r+0x20>)
 801701c:	4604      	mov	r4, r0
 801701e:	4608      	mov	r0, r1
 8017020:	4611      	mov	r1, r2
 8017022:	2200      	movs	r2, #0
 8017024:	602a      	str	r2, [r5, #0]
 8017026:	461a      	mov	r2, r3
 8017028:	f7fb fcaa 	bl	8012980 <_write>
 801702c:	1c43      	adds	r3, r0, #1
 801702e:	d102      	bne.n	8017036 <_write_r+0x1e>
 8017030:	682b      	ldr	r3, [r5, #0]
 8017032:	b103      	cbz	r3, 8017036 <_write_r+0x1e>
 8017034:	6023      	str	r3, [r4, #0]
 8017036:	bd38      	pop	{r3, r4, r5, pc}
 8017038:	20001e64 	.word	0x20001e64

0801703c <__errno>:
 801703c:	4b01      	ldr	r3, [pc, #4]	@ (8017044 <__errno+0x8>)
 801703e:	6818      	ldr	r0, [r3, #0]
 8017040:	4770      	bx	lr
 8017042:	bf00      	nop
 8017044:	200000b4 	.word	0x200000b4

08017048 <__libc_init_array>:
 8017048:	b570      	push	{r4, r5, r6, lr}
 801704a:	4d0d      	ldr	r5, [pc, #52]	@ (8017080 <__libc_init_array+0x38>)
 801704c:	4c0d      	ldr	r4, [pc, #52]	@ (8017084 <__libc_init_array+0x3c>)
 801704e:	1b64      	subs	r4, r4, r5
 8017050:	10a4      	asrs	r4, r4, #2
 8017052:	2600      	movs	r6, #0
 8017054:	42a6      	cmp	r6, r4
 8017056:	d109      	bne.n	801706c <__libc_init_array+0x24>
 8017058:	4d0b      	ldr	r5, [pc, #44]	@ (8017088 <__libc_init_array+0x40>)
 801705a:	4c0c      	ldr	r4, [pc, #48]	@ (801708c <__libc_init_array+0x44>)
 801705c:	f000 fefc 	bl	8017e58 <_init>
 8017060:	1b64      	subs	r4, r4, r5
 8017062:	10a4      	asrs	r4, r4, #2
 8017064:	2600      	movs	r6, #0
 8017066:	42a6      	cmp	r6, r4
 8017068:	d105      	bne.n	8017076 <__libc_init_array+0x2e>
 801706a:	bd70      	pop	{r4, r5, r6, pc}
 801706c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017070:	4798      	blx	r3
 8017072:	3601      	adds	r6, #1
 8017074:	e7ee      	b.n	8017054 <__libc_init_array+0xc>
 8017076:	f855 3b04 	ldr.w	r3, [r5], #4
 801707a:	4798      	blx	r3
 801707c:	3601      	adds	r6, #1
 801707e:	e7f2      	b.n	8017066 <__libc_init_array+0x1e>
 8017080:	0801923c 	.word	0x0801923c
 8017084:	0801923c 	.word	0x0801923c
 8017088:	0801923c 	.word	0x0801923c
 801708c:	08019240 	.word	0x08019240

08017090 <__retarget_lock_init_recursive>:
 8017090:	4770      	bx	lr

08017092 <__retarget_lock_acquire_recursive>:
 8017092:	4770      	bx	lr

08017094 <__retarget_lock_release_recursive>:
 8017094:	4770      	bx	lr

08017096 <__aeabi_memcpy>:
 8017096:	f000 b800 	b.w	801709a <memcpy>

0801709a <memcpy>:
 801709a:	440a      	add	r2, r1
 801709c:	4291      	cmp	r1, r2
 801709e:	f100 33ff 	add.w	r3, r0, #4294967295
 80170a2:	d100      	bne.n	80170a6 <memcpy+0xc>
 80170a4:	4770      	bx	lr
 80170a6:	b510      	push	{r4, lr}
 80170a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170b0:	4291      	cmp	r1, r2
 80170b2:	d1f9      	bne.n	80170a8 <memcpy+0xe>
 80170b4:	bd10      	pop	{r4, pc}

080170b6 <abort>:
 80170b6:	b508      	push	{r3, lr}
 80170b8:	2006      	movs	r0, #6
 80170ba:	f000 fdf7 	bl	8017cac <raise>
 80170be:	2001      	movs	r0, #1
 80170c0:	f7f1 fcc6 	bl	8008a50 <_exit>

080170c4 <_free_r>:
 80170c4:	b538      	push	{r3, r4, r5, lr}
 80170c6:	4605      	mov	r5, r0
 80170c8:	2900      	cmp	r1, #0
 80170ca:	d041      	beq.n	8017150 <_free_r+0x8c>
 80170cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170d0:	1f0c      	subs	r4, r1, #4
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	bfb8      	it	lt
 80170d6:	18e4      	addlt	r4, r4, r3
 80170d8:	f7ff fd82 	bl	8016be0 <__malloc_lock>
 80170dc:	4a1d      	ldr	r2, [pc, #116]	@ (8017154 <_free_r+0x90>)
 80170de:	6813      	ldr	r3, [r2, #0]
 80170e0:	b933      	cbnz	r3, 80170f0 <_free_r+0x2c>
 80170e2:	6063      	str	r3, [r4, #4]
 80170e4:	6014      	str	r4, [r2, #0]
 80170e6:	4628      	mov	r0, r5
 80170e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80170ec:	f7ff bd7e 	b.w	8016bec <__malloc_unlock>
 80170f0:	42a3      	cmp	r3, r4
 80170f2:	d908      	bls.n	8017106 <_free_r+0x42>
 80170f4:	6820      	ldr	r0, [r4, #0]
 80170f6:	1821      	adds	r1, r4, r0
 80170f8:	428b      	cmp	r3, r1
 80170fa:	bf01      	itttt	eq
 80170fc:	6819      	ldreq	r1, [r3, #0]
 80170fe:	685b      	ldreq	r3, [r3, #4]
 8017100:	1809      	addeq	r1, r1, r0
 8017102:	6021      	streq	r1, [r4, #0]
 8017104:	e7ed      	b.n	80170e2 <_free_r+0x1e>
 8017106:	461a      	mov	r2, r3
 8017108:	685b      	ldr	r3, [r3, #4]
 801710a:	b10b      	cbz	r3, 8017110 <_free_r+0x4c>
 801710c:	42a3      	cmp	r3, r4
 801710e:	d9fa      	bls.n	8017106 <_free_r+0x42>
 8017110:	6811      	ldr	r1, [r2, #0]
 8017112:	1850      	adds	r0, r2, r1
 8017114:	42a0      	cmp	r0, r4
 8017116:	d10b      	bne.n	8017130 <_free_r+0x6c>
 8017118:	6820      	ldr	r0, [r4, #0]
 801711a:	4401      	add	r1, r0
 801711c:	1850      	adds	r0, r2, r1
 801711e:	4283      	cmp	r3, r0
 8017120:	6011      	str	r1, [r2, #0]
 8017122:	d1e0      	bne.n	80170e6 <_free_r+0x22>
 8017124:	6818      	ldr	r0, [r3, #0]
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	6053      	str	r3, [r2, #4]
 801712a:	4408      	add	r0, r1
 801712c:	6010      	str	r0, [r2, #0]
 801712e:	e7da      	b.n	80170e6 <_free_r+0x22>
 8017130:	d902      	bls.n	8017138 <_free_r+0x74>
 8017132:	230c      	movs	r3, #12
 8017134:	602b      	str	r3, [r5, #0]
 8017136:	e7d6      	b.n	80170e6 <_free_r+0x22>
 8017138:	6820      	ldr	r0, [r4, #0]
 801713a:	1821      	adds	r1, r4, r0
 801713c:	428b      	cmp	r3, r1
 801713e:	bf04      	itt	eq
 8017140:	6819      	ldreq	r1, [r3, #0]
 8017142:	685b      	ldreq	r3, [r3, #4]
 8017144:	6063      	str	r3, [r4, #4]
 8017146:	bf04      	itt	eq
 8017148:	1809      	addeq	r1, r1, r0
 801714a:	6021      	streq	r1, [r4, #0]
 801714c:	6054      	str	r4, [r2, #4]
 801714e:	e7ca      	b.n	80170e6 <_free_r+0x22>
 8017150:	bd38      	pop	{r3, r4, r5, pc}
 8017152:	bf00      	nop
 8017154:	20001d24 	.word	0x20001d24

08017158 <__ssputs_r>:
 8017158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801715c:	688e      	ldr	r6, [r1, #8]
 801715e:	461f      	mov	r7, r3
 8017160:	42be      	cmp	r6, r7
 8017162:	680b      	ldr	r3, [r1, #0]
 8017164:	4682      	mov	sl, r0
 8017166:	460c      	mov	r4, r1
 8017168:	4690      	mov	r8, r2
 801716a:	d82d      	bhi.n	80171c8 <__ssputs_r+0x70>
 801716c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017170:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017174:	d026      	beq.n	80171c4 <__ssputs_r+0x6c>
 8017176:	6965      	ldr	r5, [r4, #20]
 8017178:	6909      	ldr	r1, [r1, #16]
 801717a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801717e:	eba3 0901 	sub.w	r9, r3, r1
 8017182:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017186:	1c7b      	adds	r3, r7, #1
 8017188:	444b      	add	r3, r9
 801718a:	106d      	asrs	r5, r5, #1
 801718c:	429d      	cmp	r5, r3
 801718e:	bf38      	it	cc
 8017190:	461d      	movcc	r5, r3
 8017192:	0553      	lsls	r3, r2, #21
 8017194:	d527      	bpl.n	80171e6 <__ssputs_r+0x8e>
 8017196:	4629      	mov	r1, r5
 8017198:	f7ff fca2 	bl	8016ae0 <_malloc_r>
 801719c:	4606      	mov	r6, r0
 801719e:	b360      	cbz	r0, 80171fa <__ssputs_r+0xa2>
 80171a0:	6921      	ldr	r1, [r4, #16]
 80171a2:	464a      	mov	r2, r9
 80171a4:	f7ff ff79 	bl	801709a <memcpy>
 80171a8:	89a3      	ldrh	r3, [r4, #12]
 80171aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80171ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171b2:	81a3      	strh	r3, [r4, #12]
 80171b4:	6126      	str	r6, [r4, #16]
 80171b6:	6165      	str	r5, [r4, #20]
 80171b8:	444e      	add	r6, r9
 80171ba:	eba5 0509 	sub.w	r5, r5, r9
 80171be:	6026      	str	r6, [r4, #0]
 80171c0:	60a5      	str	r5, [r4, #8]
 80171c2:	463e      	mov	r6, r7
 80171c4:	42be      	cmp	r6, r7
 80171c6:	d900      	bls.n	80171ca <__ssputs_r+0x72>
 80171c8:	463e      	mov	r6, r7
 80171ca:	6820      	ldr	r0, [r4, #0]
 80171cc:	4632      	mov	r2, r6
 80171ce:	4641      	mov	r1, r8
 80171d0:	f000 fd2a 	bl	8017c28 <memmove>
 80171d4:	68a3      	ldr	r3, [r4, #8]
 80171d6:	1b9b      	subs	r3, r3, r6
 80171d8:	60a3      	str	r3, [r4, #8]
 80171da:	6823      	ldr	r3, [r4, #0]
 80171dc:	4433      	add	r3, r6
 80171de:	6023      	str	r3, [r4, #0]
 80171e0:	2000      	movs	r0, #0
 80171e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171e6:	462a      	mov	r2, r5
 80171e8:	f000 fd7c 	bl	8017ce4 <_realloc_r>
 80171ec:	4606      	mov	r6, r0
 80171ee:	2800      	cmp	r0, #0
 80171f0:	d1e0      	bne.n	80171b4 <__ssputs_r+0x5c>
 80171f2:	6921      	ldr	r1, [r4, #16]
 80171f4:	4650      	mov	r0, sl
 80171f6:	f7ff ff65 	bl	80170c4 <_free_r>
 80171fa:	230c      	movs	r3, #12
 80171fc:	f8ca 3000 	str.w	r3, [sl]
 8017200:	89a3      	ldrh	r3, [r4, #12]
 8017202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017206:	81a3      	strh	r3, [r4, #12]
 8017208:	f04f 30ff 	mov.w	r0, #4294967295
 801720c:	e7e9      	b.n	80171e2 <__ssputs_r+0x8a>
	...

08017210 <_svfiprintf_r>:
 8017210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017214:	4698      	mov	r8, r3
 8017216:	898b      	ldrh	r3, [r1, #12]
 8017218:	061b      	lsls	r3, r3, #24
 801721a:	b09d      	sub	sp, #116	@ 0x74
 801721c:	4607      	mov	r7, r0
 801721e:	460d      	mov	r5, r1
 8017220:	4614      	mov	r4, r2
 8017222:	d510      	bpl.n	8017246 <_svfiprintf_r+0x36>
 8017224:	690b      	ldr	r3, [r1, #16]
 8017226:	b973      	cbnz	r3, 8017246 <_svfiprintf_r+0x36>
 8017228:	2140      	movs	r1, #64	@ 0x40
 801722a:	f7ff fc59 	bl	8016ae0 <_malloc_r>
 801722e:	6028      	str	r0, [r5, #0]
 8017230:	6128      	str	r0, [r5, #16]
 8017232:	b930      	cbnz	r0, 8017242 <_svfiprintf_r+0x32>
 8017234:	230c      	movs	r3, #12
 8017236:	603b      	str	r3, [r7, #0]
 8017238:	f04f 30ff 	mov.w	r0, #4294967295
 801723c:	b01d      	add	sp, #116	@ 0x74
 801723e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017242:	2340      	movs	r3, #64	@ 0x40
 8017244:	616b      	str	r3, [r5, #20]
 8017246:	2300      	movs	r3, #0
 8017248:	9309      	str	r3, [sp, #36]	@ 0x24
 801724a:	2320      	movs	r3, #32
 801724c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017250:	f8cd 800c 	str.w	r8, [sp, #12]
 8017254:	2330      	movs	r3, #48	@ 0x30
 8017256:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80173f4 <_svfiprintf_r+0x1e4>
 801725a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801725e:	f04f 0901 	mov.w	r9, #1
 8017262:	4623      	mov	r3, r4
 8017264:	469a      	mov	sl, r3
 8017266:	f813 2b01 	ldrb.w	r2, [r3], #1
 801726a:	b10a      	cbz	r2, 8017270 <_svfiprintf_r+0x60>
 801726c:	2a25      	cmp	r2, #37	@ 0x25
 801726e:	d1f9      	bne.n	8017264 <_svfiprintf_r+0x54>
 8017270:	ebba 0b04 	subs.w	fp, sl, r4
 8017274:	d00b      	beq.n	801728e <_svfiprintf_r+0x7e>
 8017276:	465b      	mov	r3, fp
 8017278:	4622      	mov	r2, r4
 801727a:	4629      	mov	r1, r5
 801727c:	4638      	mov	r0, r7
 801727e:	f7ff ff6b 	bl	8017158 <__ssputs_r>
 8017282:	3001      	adds	r0, #1
 8017284:	f000 80a7 	beq.w	80173d6 <_svfiprintf_r+0x1c6>
 8017288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801728a:	445a      	add	r2, fp
 801728c:	9209      	str	r2, [sp, #36]	@ 0x24
 801728e:	f89a 3000 	ldrb.w	r3, [sl]
 8017292:	2b00      	cmp	r3, #0
 8017294:	f000 809f 	beq.w	80173d6 <_svfiprintf_r+0x1c6>
 8017298:	2300      	movs	r3, #0
 801729a:	f04f 32ff 	mov.w	r2, #4294967295
 801729e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80172a2:	f10a 0a01 	add.w	sl, sl, #1
 80172a6:	9304      	str	r3, [sp, #16]
 80172a8:	9307      	str	r3, [sp, #28]
 80172aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80172ae:	931a      	str	r3, [sp, #104]	@ 0x68
 80172b0:	4654      	mov	r4, sl
 80172b2:	2205      	movs	r2, #5
 80172b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80172b8:	484e      	ldr	r0, [pc, #312]	@ (80173f4 <_svfiprintf_r+0x1e4>)
 80172ba:	f7ee fc79 	bl	8005bb0 <memchr>
 80172be:	9a04      	ldr	r2, [sp, #16]
 80172c0:	b9d8      	cbnz	r0, 80172fa <_svfiprintf_r+0xea>
 80172c2:	06d0      	lsls	r0, r2, #27
 80172c4:	bf44      	itt	mi
 80172c6:	2320      	movmi	r3, #32
 80172c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172cc:	0711      	lsls	r1, r2, #28
 80172ce:	bf44      	itt	mi
 80172d0:	232b      	movmi	r3, #43	@ 0x2b
 80172d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80172d6:	f89a 3000 	ldrb.w	r3, [sl]
 80172da:	2b2a      	cmp	r3, #42	@ 0x2a
 80172dc:	d015      	beq.n	801730a <_svfiprintf_r+0xfa>
 80172de:	9a07      	ldr	r2, [sp, #28]
 80172e0:	4654      	mov	r4, sl
 80172e2:	2000      	movs	r0, #0
 80172e4:	f04f 0c0a 	mov.w	ip, #10
 80172e8:	4621      	mov	r1, r4
 80172ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80172ee:	3b30      	subs	r3, #48	@ 0x30
 80172f0:	2b09      	cmp	r3, #9
 80172f2:	d94b      	bls.n	801738c <_svfiprintf_r+0x17c>
 80172f4:	b1b0      	cbz	r0, 8017324 <_svfiprintf_r+0x114>
 80172f6:	9207      	str	r2, [sp, #28]
 80172f8:	e014      	b.n	8017324 <_svfiprintf_r+0x114>
 80172fa:	eba0 0308 	sub.w	r3, r0, r8
 80172fe:	fa09 f303 	lsl.w	r3, r9, r3
 8017302:	4313      	orrs	r3, r2
 8017304:	9304      	str	r3, [sp, #16]
 8017306:	46a2      	mov	sl, r4
 8017308:	e7d2      	b.n	80172b0 <_svfiprintf_r+0xa0>
 801730a:	9b03      	ldr	r3, [sp, #12]
 801730c:	1d19      	adds	r1, r3, #4
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	9103      	str	r1, [sp, #12]
 8017312:	2b00      	cmp	r3, #0
 8017314:	bfbb      	ittet	lt
 8017316:	425b      	neglt	r3, r3
 8017318:	f042 0202 	orrlt.w	r2, r2, #2
 801731c:	9307      	strge	r3, [sp, #28]
 801731e:	9307      	strlt	r3, [sp, #28]
 8017320:	bfb8      	it	lt
 8017322:	9204      	strlt	r2, [sp, #16]
 8017324:	7823      	ldrb	r3, [r4, #0]
 8017326:	2b2e      	cmp	r3, #46	@ 0x2e
 8017328:	d10a      	bne.n	8017340 <_svfiprintf_r+0x130>
 801732a:	7863      	ldrb	r3, [r4, #1]
 801732c:	2b2a      	cmp	r3, #42	@ 0x2a
 801732e:	d132      	bne.n	8017396 <_svfiprintf_r+0x186>
 8017330:	9b03      	ldr	r3, [sp, #12]
 8017332:	1d1a      	adds	r2, r3, #4
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	9203      	str	r2, [sp, #12]
 8017338:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801733c:	3402      	adds	r4, #2
 801733e:	9305      	str	r3, [sp, #20]
 8017340:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8017404 <_svfiprintf_r+0x1f4>
 8017344:	7821      	ldrb	r1, [r4, #0]
 8017346:	2203      	movs	r2, #3
 8017348:	4650      	mov	r0, sl
 801734a:	f7ee fc31 	bl	8005bb0 <memchr>
 801734e:	b138      	cbz	r0, 8017360 <_svfiprintf_r+0x150>
 8017350:	9b04      	ldr	r3, [sp, #16]
 8017352:	eba0 000a 	sub.w	r0, r0, sl
 8017356:	2240      	movs	r2, #64	@ 0x40
 8017358:	4082      	lsls	r2, r0
 801735a:	4313      	orrs	r3, r2
 801735c:	3401      	adds	r4, #1
 801735e:	9304      	str	r3, [sp, #16]
 8017360:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017364:	4824      	ldr	r0, [pc, #144]	@ (80173f8 <_svfiprintf_r+0x1e8>)
 8017366:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801736a:	2206      	movs	r2, #6
 801736c:	f7ee fc20 	bl	8005bb0 <memchr>
 8017370:	2800      	cmp	r0, #0
 8017372:	d036      	beq.n	80173e2 <_svfiprintf_r+0x1d2>
 8017374:	4b21      	ldr	r3, [pc, #132]	@ (80173fc <_svfiprintf_r+0x1ec>)
 8017376:	bb1b      	cbnz	r3, 80173c0 <_svfiprintf_r+0x1b0>
 8017378:	9b03      	ldr	r3, [sp, #12]
 801737a:	3307      	adds	r3, #7
 801737c:	f023 0307 	bic.w	r3, r3, #7
 8017380:	3308      	adds	r3, #8
 8017382:	9303      	str	r3, [sp, #12]
 8017384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017386:	4433      	add	r3, r6
 8017388:	9309      	str	r3, [sp, #36]	@ 0x24
 801738a:	e76a      	b.n	8017262 <_svfiprintf_r+0x52>
 801738c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017390:	460c      	mov	r4, r1
 8017392:	2001      	movs	r0, #1
 8017394:	e7a8      	b.n	80172e8 <_svfiprintf_r+0xd8>
 8017396:	2300      	movs	r3, #0
 8017398:	3401      	adds	r4, #1
 801739a:	9305      	str	r3, [sp, #20]
 801739c:	4619      	mov	r1, r3
 801739e:	f04f 0c0a 	mov.w	ip, #10
 80173a2:	4620      	mov	r0, r4
 80173a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80173a8:	3a30      	subs	r2, #48	@ 0x30
 80173aa:	2a09      	cmp	r2, #9
 80173ac:	d903      	bls.n	80173b6 <_svfiprintf_r+0x1a6>
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d0c6      	beq.n	8017340 <_svfiprintf_r+0x130>
 80173b2:	9105      	str	r1, [sp, #20]
 80173b4:	e7c4      	b.n	8017340 <_svfiprintf_r+0x130>
 80173b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80173ba:	4604      	mov	r4, r0
 80173bc:	2301      	movs	r3, #1
 80173be:	e7f0      	b.n	80173a2 <_svfiprintf_r+0x192>
 80173c0:	ab03      	add	r3, sp, #12
 80173c2:	9300      	str	r3, [sp, #0]
 80173c4:	462a      	mov	r2, r5
 80173c6:	4b0e      	ldr	r3, [pc, #56]	@ (8017400 <_svfiprintf_r+0x1f0>)
 80173c8:	a904      	add	r1, sp, #16
 80173ca:	4638      	mov	r0, r7
 80173cc:	f3af 8000 	nop.w
 80173d0:	1c42      	adds	r2, r0, #1
 80173d2:	4606      	mov	r6, r0
 80173d4:	d1d6      	bne.n	8017384 <_svfiprintf_r+0x174>
 80173d6:	89ab      	ldrh	r3, [r5, #12]
 80173d8:	065b      	lsls	r3, r3, #25
 80173da:	f53f af2d 	bmi.w	8017238 <_svfiprintf_r+0x28>
 80173de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173e0:	e72c      	b.n	801723c <_svfiprintf_r+0x2c>
 80173e2:	ab03      	add	r3, sp, #12
 80173e4:	9300      	str	r3, [sp, #0]
 80173e6:	462a      	mov	r2, r5
 80173e8:	4b05      	ldr	r3, [pc, #20]	@ (8017400 <_svfiprintf_r+0x1f0>)
 80173ea:	a904      	add	r1, sp, #16
 80173ec:	4638      	mov	r0, r7
 80173ee:	f000 f9bb 	bl	8017768 <_printf_i>
 80173f2:	e7ed      	b.n	80173d0 <_svfiprintf_r+0x1c0>
 80173f4:	08019200 	.word	0x08019200
 80173f8:	0801920a 	.word	0x0801920a
 80173fc:	00000000 	.word	0x00000000
 8017400:	08017159 	.word	0x08017159
 8017404:	08019206 	.word	0x08019206

08017408 <__sfputc_r>:
 8017408:	6893      	ldr	r3, [r2, #8]
 801740a:	3b01      	subs	r3, #1
 801740c:	2b00      	cmp	r3, #0
 801740e:	b410      	push	{r4}
 8017410:	6093      	str	r3, [r2, #8]
 8017412:	da08      	bge.n	8017426 <__sfputc_r+0x1e>
 8017414:	6994      	ldr	r4, [r2, #24]
 8017416:	42a3      	cmp	r3, r4
 8017418:	db01      	blt.n	801741e <__sfputc_r+0x16>
 801741a:	290a      	cmp	r1, #10
 801741c:	d103      	bne.n	8017426 <__sfputc_r+0x1e>
 801741e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017422:	f000 bb6d 	b.w	8017b00 <__swbuf_r>
 8017426:	6813      	ldr	r3, [r2, #0]
 8017428:	1c58      	adds	r0, r3, #1
 801742a:	6010      	str	r0, [r2, #0]
 801742c:	7019      	strb	r1, [r3, #0]
 801742e:	4608      	mov	r0, r1
 8017430:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017434:	4770      	bx	lr

08017436 <__sfputs_r>:
 8017436:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017438:	4606      	mov	r6, r0
 801743a:	460f      	mov	r7, r1
 801743c:	4614      	mov	r4, r2
 801743e:	18d5      	adds	r5, r2, r3
 8017440:	42ac      	cmp	r4, r5
 8017442:	d101      	bne.n	8017448 <__sfputs_r+0x12>
 8017444:	2000      	movs	r0, #0
 8017446:	e007      	b.n	8017458 <__sfputs_r+0x22>
 8017448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801744c:	463a      	mov	r2, r7
 801744e:	4630      	mov	r0, r6
 8017450:	f7ff ffda 	bl	8017408 <__sfputc_r>
 8017454:	1c43      	adds	r3, r0, #1
 8017456:	d1f3      	bne.n	8017440 <__sfputs_r+0xa>
 8017458:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801745c <_vfiprintf_r>:
 801745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017460:	460d      	mov	r5, r1
 8017462:	b09d      	sub	sp, #116	@ 0x74
 8017464:	4614      	mov	r4, r2
 8017466:	4698      	mov	r8, r3
 8017468:	4606      	mov	r6, r0
 801746a:	b118      	cbz	r0, 8017474 <_vfiprintf_r+0x18>
 801746c:	6a03      	ldr	r3, [r0, #32]
 801746e:	b90b      	cbnz	r3, 8017474 <_vfiprintf_r+0x18>
 8017470:	f7ff fc4e 	bl	8016d10 <__sinit>
 8017474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017476:	07d9      	lsls	r1, r3, #31
 8017478:	d405      	bmi.n	8017486 <_vfiprintf_r+0x2a>
 801747a:	89ab      	ldrh	r3, [r5, #12]
 801747c:	059a      	lsls	r2, r3, #22
 801747e:	d402      	bmi.n	8017486 <_vfiprintf_r+0x2a>
 8017480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017482:	f7ff fe06 	bl	8017092 <__retarget_lock_acquire_recursive>
 8017486:	89ab      	ldrh	r3, [r5, #12]
 8017488:	071b      	lsls	r3, r3, #28
 801748a:	d501      	bpl.n	8017490 <_vfiprintf_r+0x34>
 801748c:	692b      	ldr	r3, [r5, #16]
 801748e:	b99b      	cbnz	r3, 80174b8 <_vfiprintf_r+0x5c>
 8017490:	4629      	mov	r1, r5
 8017492:	4630      	mov	r0, r6
 8017494:	f000 fb72 	bl	8017b7c <__swsetup_r>
 8017498:	b170      	cbz	r0, 80174b8 <_vfiprintf_r+0x5c>
 801749a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801749c:	07dc      	lsls	r4, r3, #31
 801749e:	d504      	bpl.n	80174aa <_vfiprintf_r+0x4e>
 80174a0:	f04f 30ff 	mov.w	r0, #4294967295
 80174a4:	b01d      	add	sp, #116	@ 0x74
 80174a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174aa:	89ab      	ldrh	r3, [r5, #12]
 80174ac:	0598      	lsls	r0, r3, #22
 80174ae:	d4f7      	bmi.n	80174a0 <_vfiprintf_r+0x44>
 80174b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80174b2:	f7ff fdef 	bl	8017094 <__retarget_lock_release_recursive>
 80174b6:	e7f3      	b.n	80174a0 <_vfiprintf_r+0x44>
 80174b8:	2300      	movs	r3, #0
 80174ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80174bc:	2320      	movs	r3, #32
 80174be:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80174c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80174c6:	2330      	movs	r3, #48	@ 0x30
 80174c8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017678 <_vfiprintf_r+0x21c>
 80174cc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80174d0:	f04f 0901 	mov.w	r9, #1
 80174d4:	4623      	mov	r3, r4
 80174d6:	469a      	mov	sl, r3
 80174d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174dc:	b10a      	cbz	r2, 80174e2 <_vfiprintf_r+0x86>
 80174de:	2a25      	cmp	r2, #37	@ 0x25
 80174e0:	d1f9      	bne.n	80174d6 <_vfiprintf_r+0x7a>
 80174e2:	ebba 0b04 	subs.w	fp, sl, r4
 80174e6:	d00b      	beq.n	8017500 <_vfiprintf_r+0xa4>
 80174e8:	465b      	mov	r3, fp
 80174ea:	4622      	mov	r2, r4
 80174ec:	4629      	mov	r1, r5
 80174ee:	4630      	mov	r0, r6
 80174f0:	f7ff ffa1 	bl	8017436 <__sfputs_r>
 80174f4:	3001      	adds	r0, #1
 80174f6:	f000 80a7 	beq.w	8017648 <_vfiprintf_r+0x1ec>
 80174fa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174fc:	445a      	add	r2, fp
 80174fe:	9209      	str	r2, [sp, #36]	@ 0x24
 8017500:	f89a 3000 	ldrb.w	r3, [sl]
 8017504:	2b00      	cmp	r3, #0
 8017506:	f000 809f 	beq.w	8017648 <_vfiprintf_r+0x1ec>
 801750a:	2300      	movs	r3, #0
 801750c:	f04f 32ff 	mov.w	r2, #4294967295
 8017510:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017514:	f10a 0a01 	add.w	sl, sl, #1
 8017518:	9304      	str	r3, [sp, #16]
 801751a:	9307      	str	r3, [sp, #28]
 801751c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017520:	931a      	str	r3, [sp, #104]	@ 0x68
 8017522:	4654      	mov	r4, sl
 8017524:	2205      	movs	r2, #5
 8017526:	f814 1b01 	ldrb.w	r1, [r4], #1
 801752a:	4853      	ldr	r0, [pc, #332]	@ (8017678 <_vfiprintf_r+0x21c>)
 801752c:	f7ee fb40 	bl	8005bb0 <memchr>
 8017530:	9a04      	ldr	r2, [sp, #16]
 8017532:	b9d8      	cbnz	r0, 801756c <_vfiprintf_r+0x110>
 8017534:	06d1      	lsls	r1, r2, #27
 8017536:	bf44      	itt	mi
 8017538:	2320      	movmi	r3, #32
 801753a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801753e:	0713      	lsls	r3, r2, #28
 8017540:	bf44      	itt	mi
 8017542:	232b      	movmi	r3, #43	@ 0x2b
 8017544:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017548:	f89a 3000 	ldrb.w	r3, [sl]
 801754c:	2b2a      	cmp	r3, #42	@ 0x2a
 801754e:	d015      	beq.n	801757c <_vfiprintf_r+0x120>
 8017550:	9a07      	ldr	r2, [sp, #28]
 8017552:	4654      	mov	r4, sl
 8017554:	2000      	movs	r0, #0
 8017556:	f04f 0c0a 	mov.w	ip, #10
 801755a:	4621      	mov	r1, r4
 801755c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017560:	3b30      	subs	r3, #48	@ 0x30
 8017562:	2b09      	cmp	r3, #9
 8017564:	d94b      	bls.n	80175fe <_vfiprintf_r+0x1a2>
 8017566:	b1b0      	cbz	r0, 8017596 <_vfiprintf_r+0x13a>
 8017568:	9207      	str	r2, [sp, #28]
 801756a:	e014      	b.n	8017596 <_vfiprintf_r+0x13a>
 801756c:	eba0 0308 	sub.w	r3, r0, r8
 8017570:	fa09 f303 	lsl.w	r3, r9, r3
 8017574:	4313      	orrs	r3, r2
 8017576:	9304      	str	r3, [sp, #16]
 8017578:	46a2      	mov	sl, r4
 801757a:	e7d2      	b.n	8017522 <_vfiprintf_r+0xc6>
 801757c:	9b03      	ldr	r3, [sp, #12]
 801757e:	1d19      	adds	r1, r3, #4
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	9103      	str	r1, [sp, #12]
 8017584:	2b00      	cmp	r3, #0
 8017586:	bfbb      	ittet	lt
 8017588:	425b      	neglt	r3, r3
 801758a:	f042 0202 	orrlt.w	r2, r2, #2
 801758e:	9307      	strge	r3, [sp, #28]
 8017590:	9307      	strlt	r3, [sp, #28]
 8017592:	bfb8      	it	lt
 8017594:	9204      	strlt	r2, [sp, #16]
 8017596:	7823      	ldrb	r3, [r4, #0]
 8017598:	2b2e      	cmp	r3, #46	@ 0x2e
 801759a:	d10a      	bne.n	80175b2 <_vfiprintf_r+0x156>
 801759c:	7863      	ldrb	r3, [r4, #1]
 801759e:	2b2a      	cmp	r3, #42	@ 0x2a
 80175a0:	d132      	bne.n	8017608 <_vfiprintf_r+0x1ac>
 80175a2:	9b03      	ldr	r3, [sp, #12]
 80175a4:	1d1a      	adds	r2, r3, #4
 80175a6:	681b      	ldr	r3, [r3, #0]
 80175a8:	9203      	str	r2, [sp, #12]
 80175aa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80175ae:	3402      	adds	r4, #2
 80175b0:	9305      	str	r3, [sp, #20]
 80175b2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017688 <_vfiprintf_r+0x22c>
 80175b6:	7821      	ldrb	r1, [r4, #0]
 80175b8:	2203      	movs	r2, #3
 80175ba:	4650      	mov	r0, sl
 80175bc:	f7ee faf8 	bl	8005bb0 <memchr>
 80175c0:	b138      	cbz	r0, 80175d2 <_vfiprintf_r+0x176>
 80175c2:	9b04      	ldr	r3, [sp, #16]
 80175c4:	eba0 000a 	sub.w	r0, r0, sl
 80175c8:	2240      	movs	r2, #64	@ 0x40
 80175ca:	4082      	lsls	r2, r0
 80175cc:	4313      	orrs	r3, r2
 80175ce:	3401      	adds	r4, #1
 80175d0:	9304      	str	r3, [sp, #16]
 80175d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175d6:	4829      	ldr	r0, [pc, #164]	@ (801767c <_vfiprintf_r+0x220>)
 80175d8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80175dc:	2206      	movs	r2, #6
 80175de:	f7ee fae7 	bl	8005bb0 <memchr>
 80175e2:	2800      	cmp	r0, #0
 80175e4:	d03f      	beq.n	8017666 <_vfiprintf_r+0x20a>
 80175e6:	4b26      	ldr	r3, [pc, #152]	@ (8017680 <_vfiprintf_r+0x224>)
 80175e8:	bb1b      	cbnz	r3, 8017632 <_vfiprintf_r+0x1d6>
 80175ea:	9b03      	ldr	r3, [sp, #12]
 80175ec:	3307      	adds	r3, #7
 80175ee:	f023 0307 	bic.w	r3, r3, #7
 80175f2:	3308      	adds	r3, #8
 80175f4:	9303      	str	r3, [sp, #12]
 80175f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175f8:	443b      	add	r3, r7
 80175fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80175fc:	e76a      	b.n	80174d4 <_vfiprintf_r+0x78>
 80175fe:	fb0c 3202 	mla	r2, ip, r2, r3
 8017602:	460c      	mov	r4, r1
 8017604:	2001      	movs	r0, #1
 8017606:	e7a8      	b.n	801755a <_vfiprintf_r+0xfe>
 8017608:	2300      	movs	r3, #0
 801760a:	3401      	adds	r4, #1
 801760c:	9305      	str	r3, [sp, #20]
 801760e:	4619      	mov	r1, r3
 8017610:	f04f 0c0a 	mov.w	ip, #10
 8017614:	4620      	mov	r0, r4
 8017616:	f810 2b01 	ldrb.w	r2, [r0], #1
 801761a:	3a30      	subs	r2, #48	@ 0x30
 801761c:	2a09      	cmp	r2, #9
 801761e:	d903      	bls.n	8017628 <_vfiprintf_r+0x1cc>
 8017620:	2b00      	cmp	r3, #0
 8017622:	d0c6      	beq.n	80175b2 <_vfiprintf_r+0x156>
 8017624:	9105      	str	r1, [sp, #20]
 8017626:	e7c4      	b.n	80175b2 <_vfiprintf_r+0x156>
 8017628:	fb0c 2101 	mla	r1, ip, r1, r2
 801762c:	4604      	mov	r4, r0
 801762e:	2301      	movs	r3, #1
 8017630:	e7f0      	b.n	8017614 <_vfiprintf_r+0x1b8>
 8017632:	ab03      	add	r3, sp, #12
 8017634:	9300      	str	r3, [sp, #0]
 8017636:	462a      	mov	r2, r5
 8017638:	4b12      	ldr	r3, [pc, #72]	@ (8017684 <_vfiprintf_r+0x228>)
 801763a:	a904      	add	r1, sp, #16
 801763c:	4630      	mov	r0, r6
 801763e:	f3af 8000 	nop.w
 8017642:	4607      	mov	r7, r0
 8017644:	1c78      	adds	r0, r7, #1
 8017646:	d1d6      	bne.n	80175f6 <_vfiprintf_r+0x19a>
 8017648:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801764a:	07d9      	lsls	r1, r3, #31
 801764c:	d405      	bmi.n	801765a <_vfiprintf_r+0x1fe>
 801764e:	89ab      	ldrh	r3, [r5, #12]
 8017650:	059a      	lsls	r2, r3, #22
 8017652:	d402      	bmi.n	801765a <_vfiprintf_r+0x1fe>
 8017654:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8017656:	f7ff fd1d 	bl	8017094 <__retarget_lock_release_recursive>
 801765a:	89ab      	ldrh	r3, [r5, #12]
 801765c:	065b      	lsls	r3, r3, #25
 801765e:	f53f af1f 	bmi.w	80174a0 <_vfiprintf_r+0x44>
 8017662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017664:	e71e      	b.n	80174a4 <_vfiprintf_r+0x48>
 8017666:	ab03      	add	r3, sp, #12
 8017668:	9300      	str	r3, [sp, #0]
 801766a:	462a      	mov	r2, r5
 801766c:	4b05      	ldr	r3, [pc, #20]	@ (8017684 <_vfiprintf_r+0x228>)
 801766e:	a904      	add	r1, sp, #16
 8017670:	4630      	mov	r0, r6
 8017672:	f000 f879 	bl	8017768 <_printf_i>
 8017676:	e7e4      	b.n	8017642 <_vfiprintf_r+0x1e6>
 8017678:	08019200 	.word	0x08019200
 801767c:	0801920a 	.word	0x0801920a
 8017680:	00000000 	.word	0x00000000
 8017684:	08017437 	.word	0x08017437
 8017688:	08019206 	.word	0x08019206

0801768c <_printf_common>:
 801768c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017690:	4616      	mov	r6, r2
 8017692:	4698      	mov	r8, r3
 8017694:	688a      	ldr	r2, [r1, #8]
 8017696:	690b      	ldr	r3, [r1, #16]
 8017698:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801769c:	4293      	cmp	r3, r2
 801769e:	bfb8      	it	lt
 80176a0:	4613      	movlt	r3, r2
 80176a2:	6033      	str	r3, [r6, #0]
 80176a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80176a8:	4607      	mov	r7, r0
 80176aa:	460c      	mov	r4, r1
 80176ac:	b10a      	cbz	r2, 80176b2 <_printf_common+0x26>
 80176ae:	3301      	adds	r3, #1
 80176b0:	6033      	str	r3, [r6, #0]
 80176b2:	6823      	ldr	r3, [r4, #0]
 80176b4:	0699      	lsls	r1, r3, #26
 80176b6:	bf42      	ittt	mi
 80176b8:	6833      	ldrmi	r3, [r6, #0]
 80176ba:	3302      	addmi	r3, #2
 80176bc:	6033      	strmi	r3, [r6, #0]
 80176be:	6825      	ldr	r5, [r4, #0]
 80176c0:	f015 0506 	ands.w	r5, r5, #6
 80176c4:	d106      	bne.n	80176d4 <_printf_common+0x48>
 80176c6:	f104 0a19 	add.w	sl, r4, #25
 80176ca:	68e3      	ldr	r3, [r4, #12]
 80176cc:	6832      	ldr	r2, [r6, #0]
 80176ce:	1a9b      	subs	r3, r3, r2
 80176d0:	42ab      	cmp	r3, r5
 80176d2:	dc26      	bgt.n	8017722 <_printf_common+0x96>
 80176d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80176d8:	6822      	ldr	r2, [r4, #0]
 80176da:	3b00      	subs	r3, #0
 80176dc:	bf18      	it	ne
 80176de:	2301      	movne	r3, #1
 80176e0:	0692      	lsls	r2, r2, #26
 80176e2:	d42b      	bmi.n	801773c <_printf_common+0xb0>
 80176e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80176e8:	4641      	mov	r1, r8
 80176ea:	4638      	mov	r0, r7
 80176ec:	47c8      	blx	r9
 80176ee:	3001      	adds	r0, #1
 80176f0:	d01e      	beq.n	8017730 <_printf_common+0xa4>
 80176f2:	6823      	ldr	r3, [r4, #0]
 80176f4:	6922      	ldr	r2, [r4, #16]
 80176f6:	f003 0306 	and.w	r3, r3, #6
 80176fa:	2b04      	cmp	r3, #4
 80176fc:	bf02      	ittt	eq
 80176fe:	68e5      	ldreq	r5, [r4, #12]
 8017700:	6833      	ldreq	r3, [r6, #0]
 8017702:	1aed      	subeq	r5, r5, r3
 8017704:	68a3      	ldr	r3, [r4, #8]
 8017706:	bf0c      	ite	eq
 8017708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801770c:	2500      	movne	r5, #0
 801770e:	4293      	cmp	r3, r2
 8017710:	bfc4      	itt	gt
 8017712:	1a9b      	subgt	r3, r3, r2
 8017714:	18ed      	addgt	r5, r5, r3
 8017716:	2600      	movs	r6, #0
 8017718:	341a      	adds	r4, #26
 801771a:	42b5      	cmp	r5, r6
 801771c:	d11a      	bne.n	8017754 <_printf_common+0xc8>
 801771e:	2000      	movs	r0, #0
 8017720:	e008      	b.n	8017734 <_printf_common+0xa8>
 8017722:	2301      	movs	r3, #1
 8017724:	4652      	mov	r2, sl
 8017726:	4641      	mov	r1, r8
 8017728:	4638      	mov	r0, r7
 801772a:	47c8      	blx	r9
 801772c:	3001      	adds	r0, #1
 801772e:	d103      	bne.n	8017738 <_printf_common+0xac>
 8017730:	f04f 30ff 	mov.w	r0, #4294967295
 8017734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017738:	3501      	adds	r5, #1
 801773a:	e7c6      	b.n	80176ca <_printf_common+0x3e>
 801773c:	18e1      	adds	r1, r4, r3
 801773e:	1c5a      	adds	r2, r3, #1
 8017740:	2030      	movs	r0, #48	@ 0x30
 8017742:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8017746:	4422      	add	r2, r4
 8017748:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801774c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017750:	3302      	adds	r3, #2
 8017752:	e7c7      	b.n	80176e4 <_printf_common+0x58>
 8017754:	2301      	movs	r3, #1
 8017756:	4622      	mov	r2, r4
 8017758:	4641      	mov	r1, r8
 801775a:	4638      	mov	r0, r7
 801775c:	47c8      	blx	r9
 801775e:	3001      	adds	r0, #1
 8017760:	d0e6      	beq.n	8017730 <_printf_common+0xa4>
 8017762:	3601      	adds	r6, #1
 8017764:	e7d9      	b.n	801771a <_printf_common+0x8e>
	...

08017768 <_printf_i>:
 8017768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801776c:	7e0f      	ldrb	r7, [r1, #24]
 801776e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017770:	2f78      	cmp	r7, #120	@ 0x78
 8017772:	4691      	mov	r9, r2
 8017774:	4680      	mov	r8, r0
 8017776:	460c      	mov	r4, r1
 8017778:	469a      	mov	sl, r3
 801777a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801777e:	d807      	bhi.n	8017790 <_printf_i+0x28>
 8017780:	2f62      	cmp	r7, #98	@ 0x62
 8017782:	d80a      	bhi.n	801779a <_printf_i+0x32>
 8017784:	2f00      	cmp	r7, #0
 8017786:	f000 80d2 	beq.w	801792e <_printf_i+0x1c6>
 801778a:	2f58      	cmp	r7, #88	@ 0x58
 801778c:	f000 80b9 	beq.w	8017902 <_printf_i+0x19a>
 8017790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8017794:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017798:	e03a      	b.n	8017810 <_printf_i+0xa8>
 801779a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801779e:	2b15      	cmp	r3, #21
 80177a0:	d8f6      	bhi.n	8017790 <_printf_i+0x28>
 80177a2:	a101      	add	r1, pc, #4	@ (adr r1, 80177a8 <_printf_i+0x40>)
 80177a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80177a8:	08017801 	.word	0x08017801
 80177ac:	08017815 	.word	0x08017815
 80177b0:	08017791 	.word	0x08017791
 80177b4:	08017791 	.word	0x08017791
 80177b8:	08017791 	.word	0x08017791
 80177bc:	08017791 	.word	0x08017791
 80177c0:	08017815 	.word	0x08017815
 80177c4:	08017791 	.word	0x08017791
 80177c8:	08017791 	.word	0x08017791
 80177cc:	08017791 	.word	0x08017791
 80177d0:	08017791 	.word	0x08017791
 80177d4:	08017915 	.word	0x08017915
 80177d8:	0801783f 	.word	0x0801783f
 80177dc:	080178cf 	.word	0x080178cf
 80177e0:	08017791 	.word	0x08017791
 80177e4:	08017791 	.word	0x08017791
 80177e8:	08017937 	.word	0x08017937
 80177ec:	08017791 	.word	0x08017791
 80177f0:	0801783f 	.word	0x0801783f
 80177f4:	08017791 	.word	0x08017791
 80177f8:	08017791 	.word	0x08017791
 80177fc:	080178d7 	.word	0x080178d7
 8017800:	6833      	ldr	r3, [r6, #0]
 8017802:	1d1a      	adds	r2, r3, #4
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	6032      	str	r2, [r6, #0]
 8017808:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801780c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8017810:	2301      	movs	r3, #1
 8017812:	e09d      	b.n	8017950 <_printf_i+0x1e8>
 8017814:	6833      	ldr	r3, [r6, #0]
 8017816:	6820      	ldr	r0, [r4, #0]
 8017818:	1d19      	adds	r1, r3, #4
 801781a:	6031      	str	r1, [r6, #0]
 801781c:	0606      	lsls	r6, r0, #24
 801781e:	d501      	bpl.n	8017824 <_printf_i+0xbc>
 8017820:	681d      	ldr	r5, [r3, #0]
 8017822:	e003      	b.n	801782c <_printf_i+0xc4>
 8017824:	0645      	lsls	r5, r0, #25
 8017826:	d5fb      	bpl.n	8017820 <_printf_i+0xb8>
 8017828:	f9b3 5000 	ldrsh.w	r5, [r3]
 801782c:	2d00      	cmp	r5, #0
 801782e:	da03      	bge.n	8017838 <_printf_i+0xd0>
 8017830:	232d      	movs	r3, #45	@ 0x2d
 8017832:	426d      	negs	r5, r5
 8017834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017838:	4859      	ldr	r0, [pc, #356]	@ (80179a0 <_printf_i+0x238>)
 801783a:	230a      	movs	r3, #10
 801783c:	e011      	b.n	8017862 <_printf_i+0xfa>
 801783e:	6821      	ldr	r1, [r4, #0]
 8017840:	6833      	ldr	r3, [r6, #0]
 8017842:	0608      	lsls	r0, r1, #24
 8017844:	f853 5b04 	ldr.w	r5, [r3], #4
 8017848:	d402      	bmi.n	8017850 <_printf_i+0xe8>
 801784a:	0649      	lsls	r1, r1, #25
 801784c:	bf48      	it	mi
 801784e:	b2ad      	uxthmi	r5, r5
 8017850:	2f6f      	cmp	r7, #111	@ 0x6f
 8017852:	4853      	ldr	r0, [pc, #332]	@ (80179a0 <_printf_i+0x238>)
 8017854:	6033      	str	r3, [r6, #0]
 8017856:	bf14      	ite	ne
 8017858:	230a      	movne	r3, #10
 801785a:	2308      	moveq	r3, #8
 801785c:	2100      	movs	r1, #0
 801785e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8017862:	6866      	ldr	r6, [r4, #4]
 8017864:	60a6      	str	r6, [r4, #8]
 8017866:	2e00      	cmp	r6, #0
 8017868:	bfa2      	ittt	ge
 801786a:	6821      	ldrge	r1, [r4, #0]
 801786c:	f021 0104 	bicge.w	r1, r1, #4
 8017870:	6021      	strge	r1, [r4, #0]
 8017872:	b90d      	cbnz	r5, 8017878 <_printf_i+0x110>
 8017874:	2e00      	cmp	r6, #0
 8017876:	d04b      	beq.n	8017910 <_printf_i+0x1a8>
 8017878:	4616      	mov	r6, r2
 801787a:	fbb5 f1f3 	udiv	r1, r5, r3
 801787e:	fb03 5711 	mls	r7, r3, r1, r5
 8017882:	5dc7      	ldrb	r7, [r0, r7]
 8017884:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017888:	462f      	mov	r7, r5
 801788a:	42bb      	cmp	r3, r7
 801788c:	460d      	mov	r5, r1
 801788e:	d9f4      	bls.n	801787a <_printf_i+0x112>
 8017890:	2b08      	cmp	r3, #8
 8017892:	d10b      	bne.n	80178ac <_printf_i+0x144>
 8017894:	6823      	ldr	r3, [r4, #0]
 8017896:	07df      	lsls	r7, r3, #31
 8017898:	d508      	bpl.n	80178ac <_printf_i+0x144>
 801789a:	6923      	ldr	r3, [r4, #16]
 801789c:	6861      	ldr	r1, [r4, #4]
 801789e:	4299      	cmp	r1, r3
 80178a0:	bfde      	ittt	le
 80178a2:	2330      	movle	r3, #48	@ 0x30
 80178a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80178a8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80178ac:	1b92      	subs	r2, r2, r6
 80178ae:	6122      	str	r2, [r4, #16]
 80178b0:	f8cd a000 	str.w	sl, [sp]
 80178b4:	464b      	mov	r3, r9
 80178b6:	aa03      	add	r2, sp, #12
 80178b8:	4621      	mov	r1, r4
 80178ba:	4640      	mov	r0, r8
 80178bc:	f7ff fee6 	bl	801768c <_printf_common>
 80178c0:	3001      	adds	r0, #1
 80178c2:	d14a      	bne.n	801795a <_printf_i+0x1f2>
 80178c4:	f04f 30ff 	mov.w	r0, #4294967295
 80178c8:	b004      	add	sp, #16
 80178ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80178ce:	6823      	ldr	r3, [r4, #0]
 80178d0:	f043 0320 	orr.w	r3, r3, #32
 80178d4:	6023      	str	r3, [r4, #0]
 80178d6:	4833      	ldr	r0, [pc, #204]	@ (80179a4 <_printf_i+0x23c>)
 80178d8:	2778      	movs	r7, #120	@ 0x78
 80178da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80178de:	6823      	ldr	r3, [r4, #0]
 80178e0:	6831      	ldr	r1, [r6, #0]
 80178e2:	061f      	lsls	r7, r3, #24
 80178e4:	f851 5b04 	ldr.w	r5, [r1], #4
 80178e8:	d402      	bmi.n	80178f0 <_printf_i+0x188>
 80178ea:	065f      	lsls	r7, r3, #25
 80178ec:	bf48      	it	mi
 80178ee:	b2ad      	uxthmi	r5, r5
 80178f0:	6031      	str	r1, [r6, #0]
 80178f2:	07d9      	lsls	r1, r3, #31
 80178f4:	bf44      	itt	mi
 80178f6:	f043 0320 	orrmi.w	r3, r3, #32
 80178fa:	6023      	strmi	r3, [r4, #0]
 80178fc:	b11d      	cbz	r5, 8017906 <_printf_i+0x19e>
 80178fe:	2310      	movs	r3, #16
 8017900:	e7ac      	b.n	801785c <_printf_i+0xf4>
 8017902:	4827      	ldr	r0, [pc, #156]	@ (80179a0 <_printf_i+0x238>)
 8017904:	e7e9      	b.n	80178da <_printf_i+0x172>
 8017906:	6823      	ldr	r3, [r4, #0]
 8017908:	f023 0320 	bic.w	r3, r3, #32
 801790c:	6023      	str	r3, [r4, #0]
 801790e:	e7f6      	b.n	80178fe <_printf_i+0x196>
 8017910:	4616      	mov	r6, r2
 8017912:	e7bd      	b.n	8017890 <_printf_i+0x128>
 8017914:	6833      	ldr	r3, [r6, #0]
 8017916:	6825      	ldr	r5, [r4, #0]
 8017918:	6961      	ldr	r1, [r4, #20]
 801791a:	1d18      	adds	r0, r3, #4
 801791c:	6030      	str	r0, [r6, #0]
 801791e:	062e      	lsls	r6, r5, #24
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	d501      	bpl.n	8017928 <_printf_i+0x1c0>
 8017924:	6019      	str	r1, [r3, #0]
 8017926:	e002      	b.n	801792e <_printf_i+0x1c6>
 8017928:	0668      	lsls	r0, r5, #25
 801792a:	d5fb      	bpl.n	8017924 <_printf_i+0x1bc>
 801792c:	8019      	strh	r1, [r3, #0]
 801792e:	2300      	movs	r3, #0
 8017930:	6123      	str	r3, [r4, #16]
 8017932:	4616      	mov	r6, r2
 8017934:	e7bc      	b.n	80178b0 <_printf_i+0x148>
 8017936:	6833      	ldr	r3, [r6, #0]
 8017938:	1d1a      	adds	r2, r3, #4
 801793a:	6032      	str	r2, [r6, #0]
 801793c:	681e      	ldr	r6, [r3, #0]
 801793e:	6862      	ldr	r2, [r4, #4]
 8017940:	2100      	movs	r1, #0
 8017942:	4630      	mov	r0, r6
 8017944:	f7ee f934 	bl	8005bb0 <memchr>
 8017948:	b108      	cbz	r0, 801794e <_printf_i+0x1e6>
 801794a:	1b80      	subs	r0, r0, r6
 801794c:	6060      	str	r0, [r4, #4]
 801794e:	6863      	ldr	r3, [r4, #4]
 8017950:	6123      	str	r3, [r4, #16]
 8017952:	2300      	movs	r3, #0
 8017954:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017958:	e7aa      	b.n	80178b0 <_printf_i+0x148>
 801795a:	6923      	ldr	r3, [r4, #16]
 801795c:	4632      	mov	r2, r6
 801795e:	4649      	mov	r1, r9
 8017960:	4640      	mov	r0, r8
 8017962:	47d0      	blx	sl
 8017964:	3001      	adds	r0, #1
 8017966:	d0ad      	beq.n	80178c4 <_printf_i+0x15c>
 8017968:	6823      	ldr	r3, [r4, #0]
 801796a:	079b      	lsls	r3, r3, #30
 801796c:	d413      	bmi.n	8017996 <_printf_i+0x22e>
 801796e:	68e0      	ldr	r0, [r4, #12]
 8017970:	9b03      	ldr	r3, [sp, #12]
 8017972:	4298      	cmp	r0, r3
 8017974:	bfb8      	it	lt
 8017976:	4618      	movlt	r0, r3
 8017978:	e7a6      	b.n	80178c8 <_printf_i+0x160>
 801797a:	2301      	movs	r3, #1
 801797c:	4632      	mov	r2, r6
 801797e:	4649      	mov	r1, r9
 8017980:	4640      	mov	r0, r8
 8017982:	47d0      	blx	sl
 8017984:	3001      	adds	r0, #1
 8017986:	d09d      	beq.n	80178c4 <_printf_i+0x15c>
 8017988:	3501      	adds	r5, #1
 801798a:	68e3      	ldr	r3, [r4, #12]
 801798c:	9903      	ldr	r1, [sp, #12]
 801798e:	1a5b      	subs	r3, r3, r1
 8017990:	42ab      	cmp	r3, r5
 8017992:	dcf2      	bgt.n	801797a <_printf_i+0x212>
 8017994:	e7eb      	b.n	801796e <_printf_i+0x206>
 8017996:	2500      	movs	r5, #0
 8017998:	f104 0619 	add.w	r6, r4, #25
 801799c:	e7f5      	b.n	801798a <_printf_i+0x222>
 801799e:	bf00      	nop
 80179a0:	08019211 	.word	0x08019211
 80179a4:	08019222 	.word	0x08019222

080179a8 <__sflush_r>:
 80179a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80179ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179b0:	0716      	lsls	r6, r2, #28
 80179b2:	4605      	mov	r5, r0
 80179b4:	460c      	mov	r4, r1
 80179b6:	d454      	bmi.n	8017a62 <__sflush_r+0xba>
 80179b8:	684b      	ldr	r3, [r1, #4]
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	dc02      	bgt.n	80179c4 <__sflush_r+0x1c>
 80179be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	dd48      	ble.n	8017a56 <__sflush_r+0xae>
 80179c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179c6:	2e00      	cmp	r6, #0
 80179c8:	d045      	beq.n	8017a56 <__sflush_r+0xae>
 80179ca:	2300      	movs	r3, #0
 80179cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80179d0:	682f      	ldr	r7, [r5, #0]
 80179d2:	6a21      	ldr	r1, [r4, #32]
 80179d4:	602b      	str	r3, [r5, #0]
 80179d6:	d030      	beq.n	8017a3a <__sflush_r+0x92>
 80179d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80179da:	89a3      	ldrh	r3, [r4, #12]
 80179dc:	0759      	lsls	r1, r3, #29
 80179de:	d505      	bpl.n	80179ec <__sflush_r+0x44>
 80179e0:	6863      	ldr	r3, [r4, #4]
 80179e2:	1ad2      	subs	r2, r2, r3
 80179e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80179e6:	b10b      	cbz	r3, 80179ec <__sflush_r+0x44>
 80179e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80179ea:	1ad2      	subs	r2, r2, r3
 80179ec:	2300      	movs	r3, #0
 80179ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80179f0:	6a21      	ldr	r1, [r4, #32]
 80179f2:	4628      	mov	r0, r5
 80179f4:	47b0      	blx	r6
 80179f6:	1c43      	adds	r3, r0, #1
 80179f8:	89a3      	ldrh	r3, [r4, #12]
 80179fa:	d106      	bne.n	8017a0a <__sflush_r+0x62>
 80179fc:	6829      	ldr	r1, [r5, #0]
 80179fe:	291d      	cmp	r1, #29
 8017a00:	d82b      	bhi.n	8017a5a <__sflush_r+0xb2>
 8017a02:	4a2a      	ldr	r2, [pc, #168]	@ (8017aac <__sflush_r+0x104>)
 8017a04:	410a      	asrs	r2, r1
 8017a06:	07d6      	lsls	r6, r2, #31
 8017a08:	d427      	bmi.n	8017a5a <__sflush_r+0xb2>
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	6062      	str	r2, [r4, #4]
 8017a0e:	04d9      	lsls	r1, r3, #19
 8017a10:	6922      	ldr	r2, [r4, #16]
 8017a12:	6022      	str	r2, [r4, #0]
 8017a14:	d504      	bpl.n	8017a20 <__sflush_r+0x78>
 8017a16:	1c42      	adds	r2, r0, #1
 8017a18:	d101      	bne.n	8017a1e <__sflush_r+0x76>
 8017a1a:	682b      	ldr	r3, [r5, #0]
 8017a1c:	b903      	cbnz	r3, 8017a20 <__sflush_r+0x78>
 8017a1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8017a20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017a22:	602f      	str	r7, [r5, #0]
 8017a24:	b1b9      	cbz	r1, 8017a56 <__sflush_r+0xae>
 8017a26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017a2a:	4299      	cmp	r1, r3
 8017a2c:	d002      	beq.n	8017a34 <__sflush_r+0x8c>
 8017a2e:	4628      	mov	r0, r5
 8017a30:	f7ff fb48 	bl	80170c4 <_free_r>
 8017a34:	2300      	movs	r3, #0
 8017a36:	6363      	str	r3, [r4, #52]	@ 0x34
 8017a38:	e00d      	b.n	8017a56 <__sflush_r+0xae>
 8017a3a:	2301      	movs	r3, #1
 8017a3c:	4628      	mov	r0, r5
 8017a3e:	47b0      	blx	r6
 8017a40:	4602      	mov	r2, r0
 8017a42:	1c50      	adds	r0, r2, #1
 8017a44:	d1c9      	bne.n	80179da <__sflush_r+0x32>
 8017a46:	682b      	ldr	r3, [r5, #0]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d0c6      	beq.n	80179da <__sflush_r+0x32>
 8017a4c:	2b1d      	cmp	r3, #29
 8017a4e:	d001      	beq.n	8017a54 <__sflush_r+0xac>
 8017a50:	2b16      	cmp	r3, #22
 8017a52:	d11e      	bne.n	8017a92 <__sflush_r+0xea>
 8017a54:	602f      	str	r7, [r5, #0]
 8017a56:	2000      	movs	r0, #0
 8017a58:	e022      	b.n	8017aa0 <__sflush_r+0xf8>
 8017a5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a5e:	b21b      	sxth	r3, r3
 8017a60:	e01b      	b.n	8017a9a <__sflush_r+0xf2>
 8017a62:	690f      	ldr	r7, [r1, #16]
 8017a64:	2f00      	cmp	r7, #0
 8017a66:	d0f6      	beq.n	8017a56 <__sflush_r+0xae>
 8017a68:	0793      	lsls	r3, r2, #30
 8017a6a:	680e      	ldr	r6, [r1, #0]
 8017a6c:	bf08      	it	eq
 8017a6e:	694b      	ldreq	r3, [r1, #20]
 8017a70:	600f      	str	r7, [r1, #0]
 8017a72:	bf18      	it	ne
 8017a74:	2300      	movne	r3, #0
 8017a76:	eba6 0807 	sub.w	r8, r6, r7
 8017a7a:	608b      	str	r3, [r1, #8]
 8017a7c:	f1b8 0f00 	cmp.w	r8, #0
 8017a80:	dde9      	ble.n	8017a56 <__sflush_r+0xae>
 8017a82:	6a21      	ldr	r1, [r4, #32]
 8017a84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017a86:	4643      	mov	r3, r8
 8017a88:	463a      	mov	r2, r7
 8017a8a:	4628      	mov	r0, r5
 8017a8c:	47b0      	blx	r6
 8017a8e:	2800      	cmp	r0, #0
 8017a90:	dc08      	bgt.n	8017aa4 <__sflush_r+0xfc>
 8017a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017a96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017a9a:	81a3      	strh	r3, [r4, #12]
 8017a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8017aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017aa4:	4407      	add	r7, r0
 8017aa6:	eba8 0800 	sub.w	r8, r8, r0
 8017aaa:	e7e7      	b.n	8017a7c <__sflush_r+0xd4>
 8017aac:	dfbffffe 	.word	0xdfbffffe

08017ab0 <_fflush_r>:
 8017ab0:	b538      	push	{r3, r4, r5, lr}
 8017ab2:	690b      	ldr	r3, [r1, #16]
 8017ab4:	4605      	mov	r5, r0
 8017ab6:	460c      	mov	r4, r1
 8017ab8:	b913      	cbnz	r3, 8017ac0 <_fflush_r+0x10>
 8017aba:	2500      	movs	r5, #0
 8017abc:	4628      	mov	r0, r5
 8017abe:	bd38      	pop	{r3, r4, r5, pc}
 8017ac0:	b118      	cbz	r0, 8017aca <_fflush_r+0x1a>
 8017ac2:	6a03      	ldr	r3, [r0, #32]
 8017ac4:	b90b      	cbnz	r3, 8017aca <_fflush_r+0x1a>
 8017ac6:	f7ff f923 	bl	8016d10 <__sinit>
 8017aca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d0f3      	beq.n	8017aba <_fflush_r+0xa>
 8017ad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017ad4:	07d0      	lsls	r0, r2, #31
 8017ad6:	d404      	bmi.n	8017ae2 <_fflush_r+0x32>
 8017ad8:	0599      	lsls	r1, r3, #22
 8017ada:	d402      	bmi.n	8017ae2 <_fflush_r+0x32>
 8017adc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017ade:	f7ff fad8 	bl	8017092 <__retarget_lock_acquire_recursive>
 8017ae2:	4628      	mov	r0, r5
 8017ae4:	4621      	mov	r1, r4
 8017ae6:	f7ff ff5f 	bl	80179a8 <__sflush_r>
 8017aea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017aec:	07da      	lsls	r2, r3, #31
 8017aee:	4605      	mov	r5, r0
 8017af0:	d4e4      	bmi.n	8017abc <_fflush_r+0xc>
 8017af2:	89a3      	ldrh	r3, [r4, #12]
 8017af4:	059b      	lsls	r3, r3, #22
 8017af6:	d4e1      	bmi.n	8017abc <_fflush_r+0xc>
 8017af8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017afa:	f7ff facb 	bl	8017094 <__retarget_lock_release_recursive>
 8017afe:	e7dd      	b.n	8017abc <_fflush_r+0xc>

08017b00 <__swbuf_r>:
 8017b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b02:	460e      	mov	r6, r1
 8017b04:	4614      	mov	r4, r2
 8017b06:	4605      	mov	r5, r0
 8017b08:	b118      	cbz	r0, 8017b12 <__swbuf_r+0x12>
 8017b0a:	6a03      	ldr	r3, [r0, #32]
 8017b0c:	b90b      	cbnz	r3, 8017b12 <__swbuf_r+0x12>
 8017b0e:	f7ff f8ff 	bl	8016d10 <__sinit>
 8017b12:	69a3      	ldr	r3, [r4, #24]
 8017b14:	60a3      	str	r3, [r4, #8]
 8017b16:	89a3      	ldrh	r3, [r4, #12]
 8017b18:	071a      	lsls	r2, r3, #28
 8017b1a:	d501      	bpl.n	8017b20 <__swbuf_r+0x20>
 8017b1c:	6923      	ldr	r3, [r4, #16]
 8017b1e:	b943      	cbnz	r3, 8017b32 <__swbuf_r+0x32>
 8017b20:	4621      	mov	r1, r4
 8017b22:	4628      	mov	r0, r5
 8017b24:	f000 f82a 	bl	8017b7c <__swsetup_r>
 8017b28:	b118      	cbz	r0, 8017b32 <__swbuf_r+0x32>
 8017b2a:	f04f 37ff 	mov.w	r7, #4294967295
 8017b2e:	4638      	mov	r0, r7
 8017b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	6922      	ldr	r2, [r4, #16]
 8017b36:	1a98      	subs	r0, r3, r2
 8017b38:	6963      	ldr	r3, [r4, #20]
 8017b3a:	b2f6      	uxtb	r6, r6
 8017b3c:	4283      	cmp	r3, r0
 8017b3e:	4637      	mov	r7, r6
 8017b40:	dc05      	bgt.n	8017b4e <__swbuf_r+0x4e>
 8017b42:	4621      	mov	r1, r4
 8017b44:	4628      	mov	r0, r5
 8017b46:	f7ff ffb3 	bl	8017ab0 <_fflush_r>
 8017b4a:	2800      	cmp	r0, #0
 8017b4c:	d1ed      	bne.n	8017b2a <__swbuf_r+0x2a>
 8017b4e:	68a3      	ldr	r3, [r4, #8]
 8017b50:	3b01      	subs	r3, #1
 8017b52:	60a3      	str	r3, [r4, #8]
 8017b54:	6823      	ldr	r3, [r4, #0]
 8017b56:	1c5a      	adds	r2, r3, #1
 8017b58:	6022      	str	r2, [r4, #0]
 8017b5a:	701e      	strb	r6, [r3, #0]
 8017b5c:	6962      	ldr	r2, [r4, #20]
 8017b5e:	1c43      	adds	r3, r0, #1
 8017b60:	429a      	cmp	r2, r3
 8017b62:	d004      	beq.n	8017b6e <__swbuf_r+0x6e>
 8017b64:	89a3      	ldrh	r3, [r4, #12]
 8017b66:	07db      	lsls	r3, r3, #31
 8017b68:	d5e1      	bpl.n	8017b2e <__swbuf_r+0x2e>
 8017b6a:	2e0a      	cmp	r6, #10
 8017b6c:	d1df      	bne.n	8017b2e <__swbuf_r+0x2e>
 8017b6e:	4621      	mov	r1, r4
 8017b70:	4628      	mov	r0, r5
 8017b72:	f7ff ff9d 	bl	8017ab0 <_fflush_r>
 8017b76:	2800      	cmp	r0, #0
 8017b78:	d0d9      	beq.n	8017b2e <__swbuf_r+0x2e>
 8017b7a:	e7d6      	b.n	8017b2a <__swbuf_r+0x2a>

08017b7c <__swsetup_r>:
 8017b7c:	b538      	push	{r3, r4, r5, lr}
 8017b7e:	4b29      	ldr	r3, [pc, #164]	@ (8017c24 <__swsetup_r+0xa8>)
 8017b80:	4605      	mov	r5, r0
 8017b82:	6818      	ldr	r0, [r3, #0]
 8017b84:	460c      	mov	r4, r1
 8017b86:	b118      	cbz	r0, 8017b90 <__swsetup_r+0x14>
 8017b88:	6a03      	ldr	r3, [r0, #32]
 8017b8a:	b90b      	cbnz	r3, 8017b90 <__swsetup_r+0x14>
 8017b8c:	f7ff f8c0 	bl	8016d10 <__sinit>
 8017b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b94:	0719      	lsls	r1, r3, #28
 8017b96:	d422      	bmi.n	8017bde <__swsetup_r+0x62>
 8017b98:	06da      	lsls	r2, r3, #27
 8017b9a:	d407      	bmi.n	8017bac <__swsetup_r+0x30>
 8017b9c:	2209      	movs	r2, #9
 8017b9e:	602a      	str	r2, [r5, #0]
 8017ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ba4:	81a3      	strh	r3, [r4, #12]
 8017ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8017baa:	e033      	b.n	8017c14 <__swsetup_r+0x98>
 8017bac:	0758      	lsls	r0, r3, #29
 8017bae:	d512      	bpl.n	8017bd6 <__swsetup_r+0x5a>
 8017bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017bb2:	b141      	cbz	r1, 8017bc6 <__swsetup_r+0x4a>
 8017bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017bb8:	4299      	cmp	r1, r3
 8017bba:	d002      	beq.n	8017bc2 <__swsetup_r+0x46>
 8017bbc:	4628      	mov	r0, r5
 8017bbe:	f7ff fa81 	bl	80170c4 <_free_r>
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8017bc6:	89a3      	ldrh	r3, [r4, #12]
 8017bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017bcc:	81a3      	strh	r3, [r4, #12]
 8017bce:	2300      	movs	r3, #0
 8017bd0:	6063      	str	r3, [r4, #4]
 8017bd2:	6923      	ldr	r3, [r4, #16]
 8017bd4:	6023      	str	r3, [r4, #0]
 8017bd6:	89a3      	ldrh	r3, [r4, #12]
 8017bd8:	f043 0308 	orr.w	r3, r3, #8
 8017bdc:	81a3      	strh	r3, [r4, #12]
 8017bde:	6923      	ldr	r3, [r4, #16]
 8017be0:	b94b      	cbnz	r3, 8017bf6 <__swsetup_r+0x7a>
 8017be2:	89a3      	ldrh	r3, [r4, #12]
 8017be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017bec:	d003      	beq.n	8017bf6 <__swsetup_r+0x7a>
 8017bee:	4621      	mov	r1, r4
 8017bf0:	4628      	mov	r0, r5
 8017bf2:	f000 f8cb 	bl	8017d8c <__smakebuf_r>
 8017bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bfa:	f013 0201 	ands.w	r2, r3, #1
 8017bfe:	d00a      	beq.n	8017c16 <__swsetup_r+0x9a>
 8017c00:	2200      	movs	r2, #0
 8017c02:	60a2      	str	r2, [r4, #8]
 8017c04:	6962      	ldr	r2, [r4, #20]
 8017c06:	4252      	negs	r2, r2
 8017c08:	61a2      	str	r2, [r4, #24]
 8017c0a:	6922      	ldr	r2, [r4, #16]
 8017c0c:	b942      	cbnz	r2, 8017c20 <__swsetup_r+0xa4>
 8017c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017c12:	d1c5      	bne.n	8017ba0 <__swsetup_r+0x24>
 8017c14:	bd38      	pop	{r3, r4, r5, pc}
 8017c16:	0799      	lsls	r1, r3, #30
 8017c18:	bf58      	it	pl
 8017c1a:	6962      	ldrpl	r2, [r4, #20]
 8017c1c:	60a2      	str	r2, [r4, #8]
 8017c1e:	e7f4      	b.n	8017c0a <__swsetup_r+0x8e>
 8017c20:	2000      	movs	r0, #0
 8017c22:	e7f7      	b.n	8017c14 <__swsetup_r+0x98>
 8017c24:	200000b4 	.word	0x200000b4

08017c28 <memmove>:
 8017c28:	4288      	cmp	r0, r1
 8017c2a:	b510      	push	{r4, lr}
 8017c2c:	eb01 0402 	add.w	r4, r1, r2
 8017c30:	d902      	bls.n	8017c38 <memmove+0x10>
 8017c32:	4284      	cmp	r4, r0
 8017c34:	4623      	mov	r3, r4
 8017c36:	d807      	bhi.n	8017c48 <memmove+0x20>
 8017c38:	1e43      	subs	r3, r0, #1
 8017c3a:	42a1      	cmp	r1, r4
 8017c3c:	d008      	beq.n	8017c50 <memmove+0x28>
 8017c3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017c46:	e7f8      	b.n	8017c3a <memmove+0x12>
 8017c48:	4402      	add	r2, r0
 8017c4a:	4601      	mov	r1, r0
 8017c4c:	428a      	cmp	r2, r1
 8017c4e:	d100      	bne.n	8017c52 <memmove+0x2a>
 8017c50:	bd10      	pop	{r4, pc}
 8017c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017c56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017c5a:	e7f7      	b.n	8017c4c <memmove+0x24>

08017c5c <_raise_r>:
 8017c5c:	291f      	cmp	r1, #31
 8017c5e:	b538      	push	{r3, r4, r5, lr}
 8017c60:	4605      	mov	r5, r0
 8017c62:	460c      	mov	r4, r1
 8017c64:	d904      	bls.n	8017c70 <_raise_r+0x14>
 8017c66:	2316      	movs	r3, #22
 8017c68:	6003      	str	r3, [r0, #0]
 8017c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8017c6e:	bd38      	pop	{r3, r4, r5, pc}
 8017c70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017c72:	b112      	cbz	r2, 8017c7a <_raise_r+0x1e>
 8017c74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017c78:	b94b      	cbnz	r3, 8017c8e <_raise_r+0x32>
 8017c7a:	4628      	mov	r0, r5
 8017c7c:	f000 f830 	bl	8017ce0 <_getpid_r>
 8017c80:	4622      	mov	r2, r4
 8017c82:	4601      	mov	r1, r0
 8017c84:	4628      	mov	r0, r5
 8017c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017c8a:	f000 b817 	b.w	8017cbc <_kill_r>
 8017c8e:	2b01      	cmp	r3, #1
 8017c90:	d00a      	beq.n	8017ca8 <_raise_r+0x4c>
 8017c92:	1c59      	adds	r1, r3, #1
 8017c94:	d103      	bne.n	8017c9e <_raise_r+0x42>
 8017c96:	2316      	movs	r3, #22
 8017c98:	6003      	str	r3, [r0, #0]
 8017c9a:	2001      	movs	r0, #1
 8017c9c:	e7e7      	b.n	8017c6e <_raise_r+0x12>
 8017c9e:	2100      	movs	r1, #0
 8017ca0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017ca4:	4620      	mov	r0, r4
 8017ca6:	4798      	blx	r3
 8017ca8:	2000      	movs	r0, #0
 8017caa:	e7e0      	b.n	8017c6e <_raise_r+0x12>

08017cac <raise>:
 8017cac:	4b02      	ldr	r3, [pc, #8]	@ (8017cb8 <raise+0xc>)
 8017cae:	4601      	mov	r1, r0
 8017cb0:	6818      	ldr	r0, [r3, #0]
 8017cb2:	f7ff bfd3 	b.w	8017c5c <_raise_r>
 8017cb6:	bf00      	nop
 8017cb8:	200000b4 	.word	0x200000b4

08017cbc <_kill_r>:
 8017cbc:	b538      	push	{r3, r4, r5, lr}
 8017cbe:	4d07      	ldr	r5, [pc, #28]	@ (8017cdc <_kill_r+0x20>)
 8017cc0:	2300      	movs	r3, #0
 8017cc2:	4604      	mov	r4, r0
 8017cc4:	4608      	mov	r0, r1
 8017cc6:	4611      	mov	r1, r2
 8017cc8:	602b      	str	r3, [r5, #0]
 8017cca:	f7f0 feb1 	bl	8008a30 <_kill>
 8017cce:	1c43      	adds	r3, r0, #1
 8017cd0:	d102      	bne.n	8017cd8 <_kill_r+0x1c>
 8017cd2:	682b      	ldr	r3, [r5, #0]
 8017cd4:	b103      	cbz	r3, 8017cd8 <_kill_r+0x1c>
 8017cd6:	6023      	str	r3, [r4, #0]
 8017cd8:	bd38      	pop	{r3, r4, r5, pc}
 8017cda:	bf00      	nop
 8017cdc:	20001e64 	.word	0x20001e64

08017ce0 <_getpid_r>:
 8017ce0:	f7f0 be9e 	b.w	8008a20 <_getpid>

08017ce4 <_realloc_r>:
 8017ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ce8:	4680      	mov	r8, r0
 8017cea:	4615      	mov	r5, r2
 8017cec:	460c      	mov	r4, r1
 8017cee:	b921      	cbnz	r1, 8017cfa <_realloc_r+0x16>
 8017cf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cf4:	4611      	mov	r1, r2
 8017cf6:	f7fe bef3 	b.w	8016ae0 <_malloc_r>
 8017cfa:	b92a      	cbnz	r2, 8017d08 <_realloc_r+0x24>
 8017cfc:	f7ff f9e2 	bl	80170c4 <_free_r>
 8017d00:	2400      	movs	r4, #0
 8017d02:	4620      	mov	r0, r4
 8017d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d08:	f000 f89e 	bl	8017e48 <_malloc_usable_size_r>
 8017d0c:	4285      	cmp	r5, r0
 8017d0e:	4606      	mov	r6, r0
 8017d10:	d802      	bhi.n	8017d18 <_realloc_r+0x34>
 8017d12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017d16:	d8f4      	bhi.n	8017d02 <_realloc_r+0x1e>
 8017d18:	4629      	mov	r1, r5
 8017d1a:	4640      	mov	r0, r8
 8017d1c:	f7fe fee0 	bl	8016ae0 <_malloc_r>
 8017d20:	4607      	mov	r7, r0
 8017d22:	2800      	cmp	r0, #0
 8017d24:	d0ec      	beq.n	8017d00 <_realloc_r+0x1c>
 8017d26:	42b5      	cmp	r5, r6
 8017d28:	462a      	mov	r2, r5
 8017d2a:	4621      	mov	r1, r4
 8017d2c:	bf28      	it	cs
 8017d2e:	4632      	movcs	r2, r6
 8017d30:	f7ff f9b3 	bl	801709a <memcpy>
 8017d34:	4621      	mov	r1, r4
 8017d36:	4640      	mov	r0, r8
 8017d38:	f7ff f9c4 	bl	80170c4 <_free_r>
 8017d3c:	463c      	mov	r4, r7
 8017d3e:	e7e0      	b.n	8017d02 <_realloc_r+0x1e>

08017d40 <__swhatbuf_r>:
 8017d40:	b570      	push	{r4, r5, r6, lr}
 8017d42:	460c      	mov	r4, r1
 8017d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017d48:	2900      	cmp	r1, #0
 8017d4a:	b096      	sub	sp, #88	@ 0x58
 8017d4c:	4615      	mov	r5, r2
 8017d4e:	461e      	mov	r6, r3
 8017d50:	da0d      	bge.n	8017d6e <__swhatbuf_r+0x2e>
 8017d52:	89a3      	ldrh	r3, [r4, #12]
 8017d54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017d58:	f04f 0100 	mov.w	r1, #0
 8017d5c:	bf14      	ite	ne
 8017d5e:	2340      	movne	r3, #64	@ 0x40
 8017d60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017d64:	2000      	movs	r0, #0
 8017d66:	6031      	str	r1, [r6, #0]
 8017d68:	602b      	str	r3, [r5, #0]
 8017d6a:	b016      	add	sp, #88	@ 0x58
 8017d6c:	bd70      	pop	{r4, r5, r6, pc}
 8017d6e:	466a      	mov	r2, sp
 8017d70:	f000 f848 	bl	8017e04 <_fstat_r>
 8017d74:	2800      	cmp	r0, #0
 8017d76:	dbec      	blt.n	8017d52 <__swhatbuf_r+0x12>
 8017d78:	9901      	ldr	r1, [sp, #4]
 8017d7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017d7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017d82:	4259      	negs	r1, r3
 8017d84:	4159      	adcs	r1, r3
 8017d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017d8a:	e7eb      	b.n	8017d64 <__swhatbuf_r+0x24>

08017d8c <__smakebuf_r>:
 8017d8c:	898b      	ldrh	r3, [r1, #12]
 8017d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017d90:	079d      	lsls	r5, r3, #30
 8017d92:	4606      	mov	r6, r0
 8017d94:	460c      	mov	r4, r1
 8017d96:	d507      	bpl.n	8017da8 <__smakebuf_r+0x1c>
 8017d98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017d9c:	6023      	str	r3, [r4, #0]
 8017d9e:	6123      	str	r3, [r4, #16]
 8017da0:	2301      	movs	r3, #1
 8017da2:	6163      	str	r3, [r4, #20]
 8017da4:	b003      	add	sp, #12
 8017da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017da8:	ab01      	add	r3, sp, #4
 8017daa:	466a      	mov	r2, sp
 8017dac:	f7ff ffc8 	bl	8017d40 <__swhatbuf_r>
 8017db0:	9f00      	ldr	r7, [sp, #0]
 8017db2:	4605      	mov	r5, r0
 8017db4:	4639      	mov	r1, r7
 8017db6:	4630      	mov	r0, r6
 8017db8:	f7fe fe92 	bl	8016ae0 <_malloc_r>
 8017dbc:	b948      	cbnz	r0, 8017dd2 <__smakebuf_r+0x46>
 8017dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dc2:	059a      	lsls	r2, r3, #22
 8017dc4:	d4ee      	bmi.n	8017da4 <__smakebuf_r+0x18>
 8017dc6:	f023 0303 	bic.w	r3, r3, #3
 8017dca:	f043 0302 	orr.w	r3, r3, #2
 8017dce:	81a3      	strh	r3, [r4, #12]
 8017dd0:	e7e2      	b.n	8017d98 <__smakebuf_r+0xc>
 8017dd2:	89a3      	ldrh	r3, [r4, #12]
 8017dd4:	6020      	str	r0, [r4, #0]
 8017dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017dda:	81a3      	strh	r3, [r4, #12]
 8017ddc:	9b01      	ldr	r3, [sp, #4]
 8017dde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017de2:	b15b      	cbz	r3, 8017dfc <__smakebuf_r+0x70>
 8017de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017de8:	4630      	mov	r0, r6
 8017dea:	f000 f81d 	bl	8017e28 <_isatty_r>
 8017dee:	b128      	cbz	r0, 8017dfc <__smakebuf_r+0x70>
 8017df0:	89a3      	ldrh	r3, [r4, #12]
 8017df2:	f023 0303 	bic.w	r3, r3, #3
 8017df6:	f043 0301 	orr.w	r3, r3, #1
 8017dfa:	81a3      	strh	r3, [r4, #12]
 8017dfc:	89a3      	ldrh	r3, [r4, #12]
 8017dfe:	431d      	orrs	r5, r3
 8017e00:	81a5      	strh	r5, [r4, #12]
 8017e02:	e7cf      	b.n	8017da4 <__smakebuf_r+0x18>

08017e04 <_fstat_r>:
 8017e04:	b538      	push	{r3, r4, r5, lr}
 8017e06:	4d07      	ldr	r5, [pc, #28]	@ (8017e24 <_fstat_r+0x20>)
 8017e08:	2300      	movs	r3, #0
 8017e0a:	4604      	mov	r4, r0
 8017e0c:	4608      	mov	r0, r1
 8017e0e:	4611      	mov	r1, r2
 8017e10:	602b      	str	r3, [r5, #0]
 8017e12:	f7f0 fe51 	bl	8008ab8 <_fstat>
 8017e16:	1c43      	adds	r3, r0, #1
 8017e18:	d102      	bne.n	8017e20 <_fstat_r+0x1c>
 8017e1a:	682b      	ldr	r3, [r5, #0]
 8017e1c:	b103      	cbz	r3, 8017e20 <_fstat_r+0x1c>
 8017e1e:	6023      	str	r3, [r4, #0]
 8017e20:	bd38      	pop	{r3, r4, r5, pc}
 8017e22:	bf00      	nop
 8017e24:	20001e64 	.word	0x20001e64

08017e28 <_isatty_r>:
 8017e28:	b538      	push	{r3, r4, r5, lr}
 8017e2a:	4d06      	ldr	r5, [pc, #24]	@ (8017e44 <_isatty_r+0x1c>)
 8017e2c:	2300      	movs	r3, #0
 8017e2e:	4604      	mov	r4, r0
 8017e30:	4608      	mov	r0, r1
 8017e32:	602b      	str	r3, [r5, #0]
 8017e34:	f7f0 fe50 	bl	8008ad8 <_isatty>
 8017e38:	1c43      	adds	r3, r0, #1
 8017e3a:	d102      	bne.n	8017e42 <_isatty_r+0x1a>
 8017e3c:	682b      	ldr	r3, [r5, #0]
 8017e3e:	b103      	cbz	r3, 8017e42 <_isatty_r+0x1a>
 8017e40:	6023      	str	r3, [r4, #0]
 8017e42:	bd38      	pop	{r3, r4, r5, pc}
 8017e44:	20001e64 	.word	0x20001e64

08017e48 <_malloc_usable_size_r>:
 8017e48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e4c:	1f18      	subs	r0, r3, #4
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	bfbc      	itt	lt
 8017e52:	580b      	ldrlt	r3, [r1, r0]
 8017e54:	18c0      	addlt	r0, r0, r3
 8017e56:	4770      	bx	lr

08017e58 <_init>:
 8017e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e5a:	bf00      	nop
 8017e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e5e:	bc08      	pop	{r3}
 8017e60:	469e      	mov	lr, r3
 8017e62:	4770      	bx	lr

08017e64 <_fini>:
 8017e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e66:	bf00      	nop
 8017e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017e6a:	bc08      	pop	{r3}
 8017e6c:	469e      	mov	lr, r3
 8017e6e:	4770      	bx	lr
