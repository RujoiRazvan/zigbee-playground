
Zigbee_OnOff_Server_Coord.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017e18  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013ac  08017f58  08017f58  00018f58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08019304  08019304  0001a304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801930c  0801930c  0001a30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08019310  08019310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000108  20000008  08019314  0001b008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  20000110  0801941c  0001b110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001d4c  20000130  0801942d  0001b130  2**4
                  ALLOC
  9 ._user_heap_stack 0001a004  20001e7c  0801942d  0001be7c  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  0001b121  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  0001c000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  0001c000  2**2
                  ALLOC
 13 MB_MEM2       00000a76  200300e4  200300e4  0001c000  2**2
                  ALLOC
 14 .debug_line   00040c47  00000000  00000000  0001b155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line_str 0000008f  00000000  00000000  0005bd9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_info   00048dda  00000000  00000000  0005be2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000874f  00000000  00000000  000a4c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00004150  00000000  00000000  000ad358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00110ed6  00000000  00000000  000b14a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 000027da  00000000  00000000  001c237e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002f184  00000000  00000000  001c4b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      00005fde  00000000  00000000  001f3cdc  2**0
                  CONTENTS, READONLY
 23 .iar.rtmodel  00000288  00000000  00000000  001f9cba  2**0
                  CONTENTS, READONLY
 24 .iar_vfe_header 00000030  00000000  00000000  001f9f44  2**2
                  CONTENTS, READONLY
 25 .debug_frame  0000fa68  00000000  00000000  001f9f74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00002815  00000000  00000000  002099dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000665  00000000  00000000  0020c1f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    00005e2e  00000000  00000000  0020c856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 00001511  00000000  00000000  00212684  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  00213b95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000130 	.word	0x20000130
 800015c:	00000000 	.word	0x00000000
 8000160:	08017f40 	.word	0x08017f40

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000134 	.word	0x20000134
 800017c:	08017f40 	.word	0x08017f40

08000180 <ZbZclAttrAddSorted>:
 8000180:	b430      	push	{r4, r5}
 8000182:	0002      	movs	r2, r0
 8000184:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000186:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 800018a:	42a0      	cmp	r0, r4
 800018c:	d001      	beq.n	8000192 <??ZbZclAttrAddSorted_0>
 800018e:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 8000190:	e000      	b.n	8000194 <??ZbZclAttrAddSorted_1>

08000192 <??ZbZclAttrAddSorted_0>:
 8000192:	2000      	movs	r0, #0

08000194 <??ZbZclAttrAddSorted_1>:
 8000194:	2800      	cmp	r0, #0
 8000196:	d017      	beq.n	80001c8 <??ZbZclAttrAddSorted_2>
 8000198:	0003      	movs	r3, r0
 800019a:	688c      	ldr	r4, [r1, #8]
 800019c:	8824      	ldrh	r4, [r4, #0]
 800019e:	689d      	ldr	r5, [r3, #8]
 80001a0:	882d      	ldrh	r5, [r5, #0]
 80001a2:	42ac      	cmp	r4, r5
 80001a4:	d207      	bcs.n	80001b6 <??ZbZclAttrAddSorted_3>
 80001a6:	600b      	str	r3, [r1, #0]
 80001a8:	685c      	ldr	r4, [r3, #4]
 80001aa:	604c      	str	r4, [r1, #4]
 80001ac:	680c      	ldr	r4, [r1, #0]
 80001ae:	6061      	str	r1, [r4, #4]
 80001b0:	684c      	ldr	r4, [r1, #4]
 80001b2:	6021      	str	r1, [r4, #0]
 80001b4:	e011      	b.n	80001da <??ZbZclAttrAddSorted_4>

080001b6 <??ZbZclAttrAddSorted_3>:
 80001b6:	6804      	ldr	r4, [r0, #0]
 80001b8:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 80001bc:	42ac      	cmp	r4, r5
 80001be:	d001      	beq.n	80001c4 <??ZbZclAttrAddSorted_5>
 80001c0:	6800      	ldr	r0, [r0, #0]
 80001c2:	e7e7      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c4 <??ZbZclAttrAddSorted_5>:
 80001c4:	2000      	movs	r0, #0
 80001c6:	e7e5      	b.n	8000194 <??ZbZclAttrAddSorted_1>

080001c8 <??ZbZclAttrAddSorted_2>:
 80001c8:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80001cc:	600c      	str	r4, [r1, #0]
 80001ce:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80001d0:	604c      	str	r4, [r1, #4]
 80001d2:	680c      	ldr	r4, [r1, #0]
 80001d4:	6061      	str	r1, [r4, #4]
 80001d6:	684c      	ldr	r4, [r1, #4]
 80001d8:	6021      	str	r1, [r4, #0]

080001da <??ZbZclAttrAddSorted_4>:
 80001da:	bc30      	pop	{r4, r5}
 80001dc:	4770      	bx	lr

080001de <ZbZclAttrFind>:
 80001de:	b430      	push	{r4, r5}
 80001e0:	0003      	movs	r3, r0
 80001e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80001e4:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 80001e8:	4290      	cmp	r0, r2
 80001ea:	d001      	beq.n	80001f0 <??ZbZclAttrFind_0>
 80001ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80001ee:	e000      	b.n	80001f2 <??ZbZclAttrFind_1>

080001f0 <??ZbZclAttrFind_0>:
 80001f0:	2200      	movs	r2, #0

080001f2 <??ZbZclAttrFind_1>:
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d012      	beq.n	800021c <??ZbZclAttrFind_2>
 80001f6:	0014      	movs	r4, r2
 80001f8:	68a0      	ldr	r0, [r4, #8]
 80001fa:	8800      	ldrh	r0, [r0, #0]
 80001fc:	000d      	movs	r5, r1
 80001fe:	b2ad      	uxth	r5, r5
 8000200:	42a8      	cmp	r0, r5
 8000202:	d005      	beq.n	8000210 <??ZbZclAttrFind_3>
 8000204:	6810      	ldr	r0, [r2, #0]
 8000206:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 800020a:	42a8      	cmp	r0, r5
 800020c:	d004      	beq.n	8000218 <??ZbZclAttrFind_4>
 800020e:	e001      	b.n	8000214 <??ZbZclAttrFind_5>

08000210 <??ZbZclAttrFind_3>:
 8000210:	0020      	movs	r0, r4
 8000212:	e004      	b.n	800021e <??ZbZclAttrFind_6>

08000214 <??ZbZclAttrFind_5>:
 8000214:	6812      	ldr	r2, [r2, #0]
 8000216:	e7ec      	b.n	80001f2 <??ZbZclAttrFind_1>

08000218 <??ZbZclAttrFind_4>:
 8000218:	2200      	movs	r2, #0
 800021a:	e7ea      	b.n	80001f2 <??ZbZclAttrFind_1>

0800021c <??ZbZclAttrFind_2>:
 800021c:	2000      	movs	r0, #0

0800021e <??ZbZclAttrFind_6>:
 800021e:	bc30      	pop	{r4, r5}
 8000220:	4770      	bx	lr

08000222 <ZbZclAttrHandleDiscover>:
 8000222:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000226:	b09f      	sub	sp, #124	@ 0x7c
 8000228:	0004      	movs	r4, r0
 800022a:	000d      	movs	r5, r1
 800022c:	0016      	movs	r6, r2
 800022e:	2708      	movs	r7, #8
 8000230:	f05f 0800 	movs.w	r8, #0
 8000234:	f10d 0908 	add.w	r9, sp, #8
 8000238:	4642      	mov	r2, r8
 800023a:	0039      	movs	r1, r7
 800023c:	4648      	mov	r0, r9
 800023e:	f005 fd25 	bl	8005c8c <__aeabi_memset>
 8000242:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000244:	2803      	cmp	r0, #3
 8000246:	d206      	bcs.n	8000256 <??ZbZclAttrHandleDiscover_0>
 8000248:	2380      	movs	r3, #128	@ 0x80
 800024a:	002a      	movs	r2, r5
 800024c:	0031      	movs	r1, r6
 800024e:	0020      	movs	r0, r4
 8000250:	f014 f8af 	bl	80143b2 <ZbZclSendDefaultResponse>
 8000254:	e070      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000256 <??ZbZclAttrHandleDiscover_0>:
 8000256:	f05f 0800 	movs.w	r8, #0
 800025a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800025c:	4641      	mov	r1, r8
 800025e:	b2c9      	uxtb	r1, r1
 8000260:	4408      	add	r0, r1
 8000262:	f004 fbf1 	bl	8004a48 <pletoh16>
 8000266:	0007      	movs	r7, r0
 8000268:	f118 0802 	adds.w	r8, r8, #2
 800026c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800026e:	4641      	mov	r1, r8
 8000270:	b2c9      	uxtb	r1, r1
 8000272:	5c40      	ldrb	r0, [r0, r1]
 8000274:	f88d 0004 	strb.w	r0, [sp, #4]
 8000278:	f118 0801 	adds.w	r8, r8, #1
 800027c:	2000      	movs	r0, #0
 800027e:	f88d 0008 	strb.w	r0, [sp, #8]
 8000282:	7868      	ldrb	r0, [r5, #1]
 8000284:	f88d 0009 	strb.w	r0, [sp, #9]
 8000288:	78a8      	ldrb	r0, [r5, #2]
 800028a:	2800      	cmp	r0, #0
 800028c:	d101      	bne.n	8000292 <??ZbZclAttrHandleDiscover_2>
 800028e:	2001      	movs	r0, #1
 8000290:	e000      	b.n	8000294 <??ZbZclAttrHandleDiscover_3>

08000292 <??ZbZclAttrHandleDiscover_2>:
 8000292:	2000      	movs	r0, #0

08000294 <??ZbZclAttrHandleDiscover_3>:
 8000294:	f88d 000a 	strb.w	r0, [sp, #10]
 8000298:	2001      	movs	r0, #1
 800029a:	f88d 000b 	strb.w	r0, [sp, #11]
 800029e:	88a8      	ldrh	r0, [r5, #4]
 80002a0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80002a4:	79a8      	ldrb	r0, [r5, #6]
 80002a6:	f88d 000e 	strb.w	r0, [sp, #14]
 80002aa:	200d      	movs	r0, #13
 80002ac:	f88d 000f 	strb.w	r0, [sp, #15]
 80002b0:	2239      	movs	r2, #57	@ 0x39
 80002b2:	a910      	add	r1, sp, #64	@ 0x40
 80002b4:	a802      	add	r0, sp, #8
 80002b6:	f004 fa55 	bl	8004764 <ZbZclAppendHeader>
 80002ba:	4682      	mov	sl, r0
 80002bc:	f1ba 0f00 	cmp.w	sl, #0
 80002c0:	d506      	bpl.n	80002d0 <??ZbZclAttrHandleDiscover_4>
 80002c2:	2380      	movs	r3, #128	@ 0x80
 80002c4:	002a      	movs	r2, r5
 80002c6:	0031      	movs	r1, r6
 80002c8:	0020      	movs	r0, r4
 80002ca:	f014 f872 	bl	80143b2 <ZbZclSendDefaultResponse>
 80002ce:	e033      	b.n	8000338 <??ZbZclAttrHandleDiscover_1>

080002d0 <??ZbZclAttrHandleDiscover_4>:
 80002d0:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 80002d4:	9000      	str	r0, [sp, #0]
 80002d6:	a810      	add	r0, sp, #64	@ 0x40
 80002d8:	eb00 030a 	add.w	r3, r0, sl
 80002dc:	aa01      	add	r2, sp, #4
 80002de:	0039      	movs	r1, r7
 80002e0:	b289      	uxth	r1, r1
 80002e2:	0020      	movs	r0, r4
 80002e4:	f000 f82b 	bl	800033e <ZbZclAttrDiscoverGetList>
 80002e8:	4681      	mov	r9, r0
 80002ea:	eb19 090a 	adds.w	r9, r9, sl
 80002ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d104      	bne.n	8000300 <??ZbZclAttrHandleDiscover_5>
 80002f6:	0030      	movs	r0, r6
 80002f8:	f013 fb94 	bl	8013a24 <ZbApsAddrIsBcast>
 80002fc:	2800      	cmp	r0, #0
 80002fe:	d11b      	bne.n	8000338 <??ZbZclAttrHandleDiscover_1>

08000300 <??ZbZclAttrHandleDiscover_5>:
 8000300:	0032      	movs	r2, r6
 8000302:	a904      	add	r1, sp, #16
 8000304:	0020      	movs	r0, r4
 8000306:	f003 fccc 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 800030a:	a804      	add	r0, sp, #16
 800030c:	f116 0110 	adds.w	r1, r6, #16
 8000310:	2210      	movs	r2, #16
 8000312:	f016 ff34 	bl	801717e <__aeabi_memcpy>
 8000316:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 800031a:	f003 fc5a 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 800031e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000322:	a810      	add	r0, sp, #64	@ 0x40
 8000324:	900a      	str	r0, [sp, #40]	@ 0x28
 8000326:	4648      	mov	r0, r9
 8000328:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800032c:	2300      	movs	r3, #0
 800032e:	2200      	movs	r2, #0
 8000330:	a904      	add	r1, sp, #16
 8000332:	68a0      	ldr	r0, [r4, #8]
 8000334:	f013 fafc 	bl	8013930 <ZbApsdeDataReqCallback>

08000338 <??ZbZclAttrHandleDiscover_1>:
 8000338:	b020      	add	sp, #128	@ 0x80
 800033a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800033e <ZbZclAttrDiscoverGetList>:
 800033e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000342:	0005      	movs	r5, r0
 8000344:	0016      	movs	r6, r2
 8000346:	001f      	movs	r7, r3
 8000348:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800034c:	f05f 0a00 	movs.w	sl, #0
 8000350:	f05f 0b00 	movs.w	fp, #0
 8000354:	2000      	movs	r0, #0
 8000356:	f807 000b 	strb.w	r0, [r7, fp]
 800035a:	f11b 0b01 	adds.w	fp, fp, #1
 800035e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8000360:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8000364:	4288      	cmp	r0, r1
 8000366:	d001      	beq.n	800036c <??ZbZclAttrDiscoverGetList_0>
 8000368:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 800036a:	e000      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

0800036c <??ZbZclAttrDiscoverGetList_0>:
 800036c:	2400      	movs	r4, #0

0800036e <??ZbZclAttrDiscoverGetList_1>:
 800036e:	2c00      	cmp	r4, #0
 8000370:	d030      	beq.n	80003d4 <??ZbZclAttrDiscoverGetList_2>
 8000372:	46a1      	mov	r9, r4
 8000374:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000378:	8800      	ldrh	r0, [r0, #0]
 800037a:	f8bd 1000 	ldrh.w	r1, [sp]
 800037e:	4288      	cmp	r0, r1
 8000380:	d31f      	bcc.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

08000382 <??ZbZclAttrDiscoverGetList_4>:
 8000382:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8000386:	8880      	ldrh	r0, [r0, #4]
 8000388:	0400      	lsls	r0, r0, #16
 800038a:	d41a      	bmi.n	80003c2 <??ZbZclAttrDiscoverGetList_3>

0800038c <??ZbZclAttrDiscoverGetList_5>:
 800038c:	4650      	mov	r0, sl
 800038e:	7831      	ldrb	r1, [r6, #0]
 8000390:	b2c0      	uxtb	r0, r0
 8000392:	4288      	cmp	r0, r1
 8000394:	d21e      	bcs.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

08000396 <??ZbZclAttrDiscoverGetList_6>:
 8000396:	f11b 0003 	adds.w	r0, fp, #3
 800039a:	4580      	cmp	r8, r0
 800039c:	d31a      	bcc.n	80003d4 <??ZbZclAttrDiscoverGetList_2>

0800039e <??ZbZclAttrDiscoverGetList_7>:
 800039e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003a2:	8801      	ldrh	r1, [r0, #0]
 80003a4:	eb07 000b 	add.w	r0, r7, fp
 80003a8:	f004 fb9a 	bl	8004ae0 <putle16>
 80003ac:	f11b 0b02 	adds.w	fp, fp, #2
 80003b0:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80003b4:	7880      	ldrb	r0, [r0, #2]
 80003b6:	f807 000b 	strb.w	r0, [r7, fp]
 80003ba:	f11b 0b01 	adds.w	fp, fp, #1
 80003be:	f11a 0a01 	adds.w	sl, sl, #1

080003c2 <??ZbZclAttrDiscoverGetList_3>:
 80003c2:	6820      	ldr	r0, [r4, #0]
 80003c4:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80003c8:	4288      	cmp	r0, r1
 80003ca:	d001      	beq.n	80003d0 <??ZbZclAttrDiscoverGetList_8>
 80003cc:	6824      	ldr	r4, [r4, #0]
 80003ce:	e7ce      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d0 <??ZbZclAttrDiscoverGetList_8>:
 80003d0:	2400      	movs	r4, #0
 80003d2:	e7cc      	b.n	800036e <??ZbZclAttrDiscoverGetList_1>

080003d4 <??ZbZclAttrDiscoverGetList_2>:
 80003d4:	2c00      	cmp	r4, #0
 80003d6:	d101      	bne.n	80003dc <??ZbZclAttrDiscoverGetList_9>
 80003d8:	2001      	movs	r0, #1
 80003da:	7038      	strb	r0, [r7, #0]

080003dc <??ZbZclAttrDiscoverGetList_9>:
 80003dc:	f886 a000 	strb.w	sl, [r6]
 80003e0:	4658      	mov	r0, fp
 80003e2:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080003e6 <ZbZclAttrRead>:
 80003e6:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003ea:	b088      	sub	sp, #32
 80003ec:	4680      	mov	r8, r0
 80003ee:	0014      	movs	r4, r2
 80003f0:	001d      	movs	r5, r3
 80003f2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80003f4:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80003f8:	4640      	mov	r0, r8
 80003fa:	f7ff fef0 	bl	80001de <ZbZclAttrFind>
 80003fe:	0007      	movs	r7, r0
 8000400:	2f00      	cmp	r7, #0
 8000402:	d101      	bne.n	8000408 <??ZbZclAttrRead_0>
 8000404:	2086      	movs	r0, #134	@ 0x86
 8000406:	e03c      	b.n	8000482 <??ZbZclAttrRead_1>

08000408 <??ZbZclAttrRead_0>:
 8000408:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800040c:	2800      	cmp	r0, #0
 800040e:	d005      	beq.n	800041c <??ZbZclAttrRead_2>
 8000410:	68b8      	ldr	r0, [r7, #8]
 8000412:	7900      	ldrb	r0, [r0, #4]
 8000414:	0780      	lsls	r0, r0, #30
 8000416:	d401      	bmi.n	800041c <??ZbZclAttrRead_2>
 8000418:	208c      	movs	r0, #140	@ 0x8c
 800041a:	e032      	b.n	8000482 <??ZbZclAttrRead_1>

0800041c <??ZbZclAttrRead_2>:
 800041c:	2c00      	cmp	r4, #0
 800041e:	d002      	beq.n	8000426 <??ZbZclAttrRead_3>
 8000420:	68b8      	ldr	r0, [r7, #8]
 8000422:	7880      	ldrb	r0, [r0, #2]
 8000424:	7020      	strb	r0, [r4, #0]

08000426 <??ZbZclAttrRead_3>:
 8000426:	2d00      	cmp	r5, #0
 8000428:	d001      	beq.n	800042e <??ZbZclAttrRead_4>
 800042a:	2e00      	cmp	r6, #0
 800042c:	d105      	bne.n	800043a <??ZbZclAttrRead_5>

0800042e <??ZbZclAttrRead_4>:
 800042e:	2c00      	cmp	r4, #0
 8000430:	d001      	beq.n	8000436 <??ZbZclAttrRead_6>
 8000432:	2000      	movs	r0, #0
 8000434:	e025      	b.n	8000482 <??ZbZclAttrRead_1>

08000436 <??ZbZclAttrRead_6>:
 8000436:	2089      	movs	r0, #137	@ 0x89
 8000438:	e023      	b.n	8000482 <??ZbZclAttrRead_1>

0800043a <??ZbZclAttrRead_5>:
 800043a:	68b8      	ldr	r0, [r7, #8]
 800043c:	7900      	ldrb	r0, [r0, #4]
 800043e:	06c0      	lsls	r0, r0, #27
 8000440:	d519      	bpl.n	8000476 <??ZbZclAttrRead_7>
 8000442:	f05f 0920 	movs.w	r9, #32
 8000446:	f05f 0a00 	movs.w	sl, #0
 800044a:	46eb      	mov	fp, sp
 800044c:	4652      	mov	r2, sl
 800044e:	4649      	mov	r1, r9
 8000450:	4658      	mov	r0, fp
 8000452:	f005 fc1b 	bl	8005c8c <__aeabi_memset>
 8000456:	68b8      	ldr	r0, [r7, #8]
 8000458:	9000      	str	r0, [sp, #0]
 800045a:	2000      	movs	r0, #0
 800045c:	f88d 0004 	strb.w	r0, [sp, #4]
 8000460:	9502      	str	r5, [sp, #8]
 8000462:	9603      	str	r6, [sp, #12]
 8000464:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000468:	9007      	str	r0, [sp, #28]
 800046a:	466a      	mov	r2, sp
 800046c:	0039      	movs	r1, r7
 800046e:	4640      	mov	r0, r8
 8000470:	f001 fce6 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000474:	e005      	b.n	8000482 <??ZbZclAttrRead_1>

08000476 <??ZbZclAttrRead_7>:
 8000476:	0033      	movs	r3, r6
 8000478:	002a      	movs	r2, r5
 800047a:	0039      	movs	r1, r7
 800047c:	4640      	mov	r0, r8
 800047e:	f000 f803 	bl	8000488 <ZbZclAttrDefaultRead>

08000482 <??ZbZclAttrRead_1>:
 8000482:	b009      	add	sp, #36	@ 0x24
 8000484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000488 <ZbZclAttrDefaultRead>:
 8000488:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800048c:	0005      	movs	r5, r0
 800048e:	000e      	movs	r6, r1
 8000490:	0017      	movs	r7, r2
 8000492:	001c      	movs	r4, r3
 8000494:	f05f 0800 	movs.w	r8, #0
 8000498:	f05f 0900 	movs.w	r9, #0
 800049c:	68b0      	ldr	r0, [r6, #8]
 800049e:	7880      	ldrb	r0, [r0, #2]
 80004a0:	2808      	cmp	r0, #8
 80004a2:	d065      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004a4:	2809      	cmp	r0, #9
 80004a6:	d06b      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004a8:	280a      	cmp	r0, #10
 80004aa:	d071      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004ac:	280b      	cmp	r0, #11
 80004ae:	d077      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004b0:	280c      	cmp	r0, #12
 80004b2:	d07d      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004b4:	280d      	cmp	r0, #13
 80004b6:	f000 8083 	beq.w	80005c0 <??ZbZclAttrDefaultRead_5>
 80004ba:	280e      	cmp	r0, #14
 80004bc:	f000 8088 	beq.w	80005d0 <??ZbZclAttrDefaultRead_6>
 80004c0:	280f      	cmp	r0, #15
 80004c2:	f000 808d 	beq.w	80005e0 <??ZbZclAttrDefaultRead_7>
 80004c6:	2810      	cmp	r0, #16
 80004c8:	d052      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ca:	2818      	cmp	r0, #24
 80004cc:	d050      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ce:	2819      	cmp	r0, #25
 80004d0:	d056      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004d2:	281a      	cmp	r0, #26
 80004d4:	d05c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004d6:	281b      	cmp	r0, #27
 80004d8:	d062      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004da:	281c      	cmp	r0, #28
 80004dc:	d068      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004de:	281d      	cmp	r0, #29
 80004e0:	d06e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 80004e2:	281e      	cmp	r0, #30
 80004e4:	d074      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 80004e6:	281f      	cmp	r0, #31
 80004e8:	d07a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 80004ea:	2820      	cmp	r0, #32
 80004ec:	d040      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 80004ee:	2821      	cmp	r0, #33	@ 0x21
 80004f0:	d046      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 80004f2:	2822      	cmp	r0, #34	@ 0x22
 80004f4:	d04c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 80004f6:	2823      	cmp	r0, #35	@ 0x23
 80004f8:	d052      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 80004fa:	2824      	cmp	r0, #36	@ 0x24
 80004fc:	d058      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 80004fe:	2825      	cmp	r0, #37	@ 0x25
 8000500:	d05e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000502:	2826      	cmp	r0, #38	@ 0x26
 8000504:	d064      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000506:	2827      	cmp	r0, #39	@ 0x27
 8000508:	d06a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800050a:	2828      	cmp	r0, #40	@ 0x28
 800050c:	d030      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800050e:	2829      	cmp	r0, #41	@ 0x29
 8000510:	d036      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000512:	282a      	cmp	r0, #42	@ 0x2a
 8000514:	d03c      	beq.n	8000590 <??ZbZclAttrDefaultRead_2>
 8000516:	282b      	cmp	r0, #43	@ 0x2b
 8000518:	d042      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800051a:	282c      	cmp	r0, #44	@ 0x2c
 800051c:	d048      	beq.n	80005b0 <??ZbZclAttrDefaultRead_4>
 800051e:	282d      	cmp	r0, #45	@ 0x2d
 8000520:	d04e      	beq.n	80005c0 <??ZbZclAttrDefaultRead_5>
 8000522:	282e      	cmp	r0, #46	@ 0x2e
 8000524:	d054      	beq.n	80005d0 <??ZbZclAttrDefaultRead_6>
 8000526:	282f      	cmp	r0, #47	@ 0x2f
 8000528:	d05a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800052a:	2830      	cmp	r0, #48	@ 0x30
 800052c:	d020      	beq.n	8000570 <??ZbZclAttrDefaultRead_0>
 800052e:	2831      	cmp	r0, #49	@ 0x31
 8000530:	d026      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000532:	2838      	cmp	r0, #56	@ 0x38
 8000534:	d024      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000536:	2839      	cmp	r0, #57	@ 0x39
 8000538:	d032      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800053a:	283a      	cmp	r0, #58	@ 0x3a
 800053c:	d050      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800053e:	2841      	cmp	r0, #65	@ 0x41
 8000540:	d05e      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000542:	2842      	cmp	r0, #66	@ 0x42
 8000544:	d05c      	beq.n	8000600 <??ZbZclAttrDefaultRead_8>
 8000546:	2843      	cmp	r0, #67	@ 0x43
 8000548:	d071      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054a:	2844      	cmp	r0, #68	@ 0x44
 800054c:	d06f      	beq.n	800062e <??ZbZclAttrDefaultRead_9>
 800054e:	28e0      	cmp	r0, #224	@ 0xe0
 8000550:	d026      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000552:	28e1      	cmp	r0, #225	@ 0xe1
 8000554:	d024      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000556:	28e2      	cmp	r0, #226	@ 0xe2
 8000558:	d022      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 800055a:	28e8      	cmp	r0, #232	@ 0xe8
 800055c:	d010      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 800055e:	28e9      	cmp	r0, #233	@ 0xe9
 8000560:	d00e      	beq.n	8000580 <??ZbZclAttrDefaultRead_1>
 8000562:	28ea      	cmp	r0, #234	@ 0xea
 8000564:	d01c      	beq.n	80005a0 <??ZbZclAttrDefaultRead_3>
 8000566:	28f0      	cmp	r0, #240	@ 0xf0
 8000568:	d03a      	beq.n	80005e0 <??ZbZclAttrDefaultRead_7>
 800056a:	28f1      	cmp	r0, #241	@ 0xf1
 800056c:	d040      	beq.n	80005f0 <??ZbZclAttrDefaultRead_10>
 800056e:	e078      	b.n	8000662 <??ZbZclAttrDefaultRead_11>

08000570 <??ZbZclAttrDefaultRead_0>:
 8000570:	2c00      	cmp	r4, #0
 8000572:	d102      	bne.n	800057a <??ZbZclAttrDefaultRead_12>
 8000574:	2089      	movs	r0, #137	@ 0x89
 8000576:	4681      	mov	r9, r0
 8000578:	e075      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800057a <??ZbZclAttrDefaultRead_12>:
 800057a:	2001      	movs	r0, #1
 800057c:	4680      	mov	r8, r0
 800057e:	e072      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000580 <??ZbZclAttrDefaultRead_1>:
 8000580:	2c02      	cmp	r4, #2
 8000582:	d202      	bcs.n	800058a <??ZbZclAttrDefaultRead_14>
 8000584:	2089      	movs	r0, #137	@ 0x89
 8000586:	4681      	mov	r9, r0
 8000588:	e06d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800058a <??ZbZclAttrDefaultRead_14>:
 800058a:	2002      	movs	r0, #2
 800058c:	4680      	mov	r8, r0
 800058e:	e06a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000590 <??ZbZclAttrDefaultRead_2>:
 8000590:	2c03      	cmp	r4, #3
 8000592:	d202      	bcs.n	800059a <??ZbZclAttrDefaultRead_15>
 8000594:	2089      	movs	r0, #137	@ 0x89
 8000596:	4681      	mov	r9, r0
 8000598:	e065      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800059a <??ZbZclAttrDefaultRead_15>:
 800059a:	2003      	movs	r0, #3
 800059c:	4680      	mov	r8, r0
 800059e:	e062      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005a0 <??ZbZclAttrDefaultRead_3>:
 80005a0:	2c04      	cmp	r4, #4
 80005a2:	d202      	bcs.n	80005aa <??ZbZclAttrDefaultRead_16>
 80005a4:	2089      	movs	r0, #137	@ 0x89
 80005a6:	4681      	mov	r9, r0
 80005a8:	e05d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005aa <??ZbZclAttrDefaultRead_16>:
 80005aa:	2004      	movs	r0, #4
 80005ac:	4680      	mov	r8, r0
 80005ae:	e05a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005b0 <??ZbZclAttrDefaultRead_4>:
 80005b0:	2c05      	cmp	r4, #5
 80005b2:	d202      	bcs.n	80005ba <??ZbZclAttrDefaultRead_17>
 80005b4:	2089      	movs	r0, #137	@ 0x89
 80005b6:	4681      	mov	r9, r0
 80005b8:	e055      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ba <??ZbZclAttrDefaultRead_17>:
 80005ba:	2005      	movs	r0, #5
 80005bc:	4680      	mov	r8, r0
 80005be:	e052      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005c0 <??ZbZclAttrDefaultRead_5>:
 80005c0:	2c06      	cmp	r4, #6
 80005c2:	d202      	bcs.n	80005ca <??ZbZclAttrDefaultRead_18>
 80005c4:	2089      	movs	r0, #137	@ 0x89
 80005c6:	4681      	mov	r9, r0
 80005c8:	e04d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ca <??ZbZclAttrDefaultRead_18>:
 80005ca:	2006      	movs	r0, #6
 80005cc:	4680      	mov	r8, r0
 80005ce:	e04a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005d0 <??ZbZclAttrDefaultRead_6>:
 80005d0:	2c07      	cmp	r4, #7
 80005d2:	d202      	bcs.n	80005da <??ZbZclAttrDefaultRead_19>
 80005d4:	2089      	movs	r0, #137	@ 0x89
 80005d6:	4681      	mov	r9, r0
 80005d8:	e045      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005da <??ZbZclAttrDefaultRead_19>:
 80005da:	2007      	movs	r0, #7
 80005dc:	4680      	mov	r8, r0
 80005de:	e042      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005e0 <??ZbZclAttrDefaultRead_7>:
 80005e0:	2c08      	cmp	r4, #8
 80005e2:	d202      	bcs.n	80005ea <??ZbZclAttrDefaultRead_20>
 80005e4:	2089      	movs	r0, #137	@ 0x89
 80005e6:	4681      	mov	r9, r0
 80005e8:	e03d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005ea <??ZbZclAttrDefaultRead_20>:
 80005ea:	2008      	movs	r0, #8
 80005ec:	4680      	mov	r8, r0
 80005ee:	e03a      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005f0 <??ZbZclAttrDefaultRead_10>:
 80005f0:	2c10      	cmp	r4, #16
 80005f2:	d202      	bcs.n	80005fa <??ZbZclAttrDefaultRead_21>
 80005f4:	2089      	movs	r0, #137	@ 0x89
 80005f6:	4681      	mov	r9, r0
 80005f8:	e035      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

080005fa <??ZbZclAttrDefaultRead_21>:
 80005fa:	2010      	movs	r0, #16
 80005fc:	4680      	mov	r8, r0
 80005fe:	e032      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000600 <??ZbZclAttrDefaultRead_8>:
 8000600:	2c00      	cmp	r4, #0
 8000602:	d102      	bne.n	800060a <??ZbZclAttrDefaultRead_22>
 8000604:	2089      	movs	r0, #137	@ 0x89
 8000606:	4681      	mov	r9, r0
 8000608:	e02d      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800060a <??ZbZclAttrDefaultRead_22>:
 800060a:	68f0      	ldr	r0, [r6, #12]
 800060c:	7800      	ldrb	r0, [r0, #0]
 800060e:	0001      	movs	r1, r0
 8000610:	b2c9      	uxtb	r1, r1
 8000612:	29ff      	cmp	r1, #255	@ 0xff
 8000614:	d101      	bne.n	800061a <??ZbZclAttrDefaultRead_23>
 8000616:	2100      	movs	r1, #0
 8000618:	0008      	movs	r0, r1

0800061a <??ZbZclAttrDefaultRead_23>:
 800061a:	0001      	movs	r1, r0
 800061c:	b2c9      	uxtb	r1, r1
 800061e:	1c49      	adds	r1, r1, #1
 8000620:	4688      	mov	r8, r1
 8000622:	4544      	cmp	r4, r8
 8000624:	d202      	bcs.n	800062c <??ZbZclAttrDefaultRead_24>
 8000626:	2189      	movs	r1, #137	@ 0x89
 8000628:	4689      	mov	r9, r1
 800062a:	e01c      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062c <??ZbZclAttrDefaultRead_24>:
 800062c:	e01b      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

0800062e <??ZbZclAttrDefaultRead_9>:
 800062e:	2c00      	cmp	r4, #0
 8000630:	d102      	bne.n	8000638 <??ZbZclAttrDefaultRead_25>
 8000632:	2089      	movs	r0, #137	@ 0x89
 8000634:	4681      	mov	r9, r0
 8000636:	e016      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000638 <??ZbZclAttrDefaultRead_25>:
 8000638:	68f0      	ldr	r0, [r6, #12]
 800063a:	f004 fa05 	bl	8004a48 <pletoh16>
 800063e:	0001      	movs	r1, r0
 8000640:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000644:	b289      	uxth	r1, r1
 8000646:	4291      	cmp	r1, r2
 8000648:	d101      	bne.n	800064e <??ZbZclAttrDefaultRead_26>
 800064a:	2100      	movs	r1, #0
 800064c:	0008      	movs	r0, r1

0800064e <??ZbZclAttrDefaultRead_26>:
 800064e:	0001      	movs	r1, r0
 8000650:	b289      	uxth	r1, r1
 8000652:	1c89      	adds	r1, r1, #2
 8000654:	4688      	mov	r8, r1
 8000656:	4544      	cmp	r4, r8
 8000658:	d202      	bcs.n	8000660 <??ZbZclAttrDefaultRead_27>
 800065a:	2189      	movs	r1, #137	@ 0x89
 800065c:	4689      	mov	r9, r1
 800065e:	e002      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000660 <??ZbZclAttrDefaultRead_27>:
 8000660:	e001      	b.n	8000666 <??ZbZclAttrDefaultRead_13>

08000662 <??ZbZclAttrDefaultRead_11>:
 8000662:	2086      	movs	r0, #134	@ 0x86
 8000664:	4681      	mov	r9, r0

08000666 <??ZbZclAttrDefaultRead_13>:
 8000666:	4648      	mov	r0, r9
 8000668:	b2c0      	uxtb	r0, r0
 800066a:	2800      	cmp	r0, #0
 800066c:	d109      	bne.n	8000682 <??ZbZclAttrDefaultRead_28>
 800066e:	f8cd 8000 	str.w	r8, [sp]
 8000672:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 8000676:	46bb      	mov	fp, r7
 8000678:	9a00      	ldr	r2, [sp, #0]
 800067a:	4651      	mov	r1, sl
 800067c:	4658      	mov	r0, fp
 800067e:	f016 fd7e 	bl	801717e <__aeabi_memcpy>

08000682 <??ZbZclAttrDefaultRead_28>:
 8000682:	4648      	mov	r0, r9
 8000684:	b2c0      	uxtb	r0, r0
 8000686:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800068a <ZbZclAttrWrite>:
 800068a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800068e:	b096      	sub	sp, #88	@ 0x58
 8000690:	4680      	mov	r8, r0
 8000692:	4699      	mov	r9, r3
 8000694:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 8000698:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 800069a:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 800069e:	4640      	mov	r0, r8
 80006a0:	f7ff fd9d 	bl	80001de <ZbZclAttrFind>
 80006a4:	0006      	movs	r6, r0
 80006a6:	2e00      	cmp	r6, #0
 80006a8:	d101      	bne.n	80006ae <??ZbZclAttrWrite_0>
 80006aa:	2086      	movs	r0, #134	@ 0x86
 80006ac:	e0a2      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006ae <??ZbZclAttrWrite_0>:
 80006ae:	68b0      	ldr	r0, [r6, #8]
 80006b0:	7900      	ldrb	r0, [r0, #4]
 80006b2:	f010 0001 	ands.w	r0, r0, #1
 80006b6:	b2c0      	uxtb	r0, r0
 80006b8:	2800      	cmp	r0, #0
 80006ba:	d105      	bne.n	80006c8 <??ZbZclAttrWrite_2>
 80006bc:	0038      	movs	r0, r7
 80006be:	b280      	uxth	r0, r0
 80006c0:	0780      	lsls	r0, r0, #30
 80006c2:	d401      	bmi.n	80006c8 <??ZbZclAttrWrite_2>
 80006c4:	2088      	movs	r0, #136	@ 0x88
 80006c6:	e095      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006c8 <??ZbZclAttrWrite_2>:
 80006c8:	2300      	movs	r3, #0
 80006ca:	4652      	mov	r2, sl
 80006cc:	4649      	mov	r1, r9
 80006ce:	68b0      	ldr	r0, [r6, #8]
 80006d0:	7880      	ldrb	r0, [r0, #2]
 80006d2:	f000 fcb0 	bl	8001036 <ZbZclAttrParseLength>
 80006d6:	9005      	str	r0, [sp, #20]
 80006d8:	9805      	ldr	r0, [sp, #20]
 80006da:	2800      	cmp	r0, #0
 80006dc:	d501      	bpl.n	80006e2 <??ZbZclAttrWrite_3>
 80006de:	2087      	movs	r0, #135	@ 0x87
 80006e0:	e088      	b.n	80007f4 <??ZbZclAttrWrite_1>

080006e2 <??ZbZclAttrWrite_3>:
 80006e2:	68b0      	ldr	r0, [r6, #8]
 80006e4:	7880      	ldrb	r0, [r0, #2]
 80006e6:	f000 ff83 	bl	80015f0 <ZbZclAttrIsInteger>
 80006ea:	2800      	cmp	r0, #0
 80006ec:	d026      	beq.n	800073c <??ZbZclAttrWrite_4>
 80006ee:	aa04      	add	r2, sp, #16
 80006f0:	4649      	mov	r1, r9
 80006f2:	68b0      	ldr	r0, [r6, #8]
 80006f4:	7880      	ldrb	r0, [r0, #2]
 80006f6:	f000 fe4d 	bl	8001394 <ZbZclParseInteger>
 80006fa:	0004      	movs	r4, r0
 80006fc:	000d      	movs	r5, r1
 80006fe:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8000702:	2800      	cmp	r0, #0
 8000704:	d002      	beq.n	800070c <??ZbZclAttrWrite_5>
 8000706:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800070a:	e073      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800070c <??ZbZclAttrWrite_5>:
 800070c:	68b0      	ldr	r0, [r6, #8]
 800070e:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8000712:	f006 f81f 	bl	8006754 <__aeabi_d2lz>
 8000716:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800071a:	68b0      	ldr	r0, [r6, #8]
 800071c:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8000720:	f006 f818 	bl	8006754 <__aeabi_d2lz>
 8000724:	e9cd 0100 	strd	r0, r1, [sp]
 8000728:	68b0      	ldr	r0, [r6, #8]
 800072a:	7882      	ldrb	r2, [r0, #2]
 800072c:	0020      	movs	r0, r4
 800072e:	0029      	movs	r1, r5
 8000730:	f000 ff74 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8000734:	2800      	cmp	r0, #0
 8000736:	d101      	bne.n	800073c <??ZbZclAttrWrite_4>
 8000738:	2087      	movs	r0, #135	@ 0x87
 800073a:	e05b      	b.n	80007f4 <??ZbZclAttrWrite_1>

0800073c <??ZbZclAttrWrite_4>:
 800073c:	68b0      	ldr	r0, [r6, #8]
 800073e:	7900      	ldrb	r0, [r0, #4]
 8000740:	0680      	lsls	r0, r0, #26
 8000742:	d522      	bpl.n	800078a <??ZbZclAttrWrite_6>
 8000744:	2420      	movs	r4, #32
 8000746:	2500      	movs	r5, #0
 8000748:	f10d 0b18 	add.w	fp, sp, #24
 800074c:	002a      	movs	r2, r5
 800074e:	0021      	movs	r1, r4
 8000750:	4658      	mov	r0, fp
 8000752:	f005 fa9b 	bl	8005c8c <__aeabi_memset>
 8000756:	68b0      	ldr	r0, [r6, #8]
 8000758:	9006      	str	r0, [sp, #24]
 800075a:	2001      	movs	r0, #1
 800075c:	f88d 001c 	strb.w	r0, [sp, #28]
 8000760:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8000762:	900c      	str	r0, [sp, #48]	@ 0x30
 8000764:	f8cd 9020 	str.w	r9, [sp, #32]
 8000768:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800076c:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8000770:	68f0      	ldr	r0, [r6, #12]
 8000772:	900b      	str	r0, [sp, #44]	@ 0x2c
 8000774:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8000778:	900d      	str	r0, [sp, #52]	@ 0x34
 800077a:	aa06      	add	r2, sp, #24
 800077c:	0031      	movs	r1, r6
 800077e:	4640      	mov	r0, r8
 8000780:	f001 fb5e 	bl	8001e40 <ZbZclAttrCallbackExec>
 8000784:	f88d 0010 	strb.w	r0, [sp, #16]
 8000788:	e028      	b.n	80007dc <??ZbZclAttrWrite_7>

0800078a <??ZbZclAttrWrite_6>:
 800078a:	003b      	movs	r3, r7
 800078c:	b29b      	uxth	r3, r3
 800078e:	464a      	mov	r2, r9
 8000790:	0031      	movs	r1, r6
 8000792:	4640      	mov	r0, r8
 8000794:	f000 f85e 	bl	8000854 <ZbZclAttrDefaultWrite>
 8000798:	f88d 0010 	strb.w	r0, [sp, #16]
 800079c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007a0:	2800      	cmp	r0, #0
 80007a2:	d11b      	bne.n	80007dc <??ZbZclAttrWrite_7>
 80007a4:	68b0      	ldr	r0, [r6, #8]
 80007a6:	7900      	ldrb	r0, [r0, #4]
 80007a8:	0640      	lsls	r0, r0, #25
 80007aa:	d517      	bpl.n	80007dc <??ZbZclAttrWrite_7>
 80007ac:	2420      	movs	r4, #32
 80007ae:	2500      	movs	r5, #0
 80007b0:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 80007b4:	002a      	movs	r2, r5
 80007b6:	0021      	movs	r1, r4
 80007b8:	4658      	mov	r0, fp
 80007ba:	f005 fa67 	bl	8005c8c <__aeabi_memset>
 80007be:	68b0      	ldr	r0, [r6, #8]
 80007c0:	900e      	str	r0, [sp, #56]	@ 0x38
 80007c2:	2002      	movs	r0, #2
 80007c4:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 80007c8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80007ca:	9014      	str	r0, [sp, #80]	@ 0x50
 80007cc:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80007d0:	9015      	str	r0, [sp, #84]	@ 0x54
 80007d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80007d4:	0031      	movs	r1, r6
 80007d6:	4640      	mov	r0, r8
 80007d8:	f001 fb32 	bl	8001e40 <ZbZclAttrCallbackExec>

080007dc <??ZbZclAttrWrite_7>:
 80007dc:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e0:	2800      	cmp	r0, #0
 80007e2:	d002      	beq.n	80007ea <??ZbZclAttrWrite_8>
 80007e4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80007e8:	e004      	b.n	80007f4 <??ZbZclAttrWrite_1>

080007ea <??ZbZclAttrWrite_8>:
 80007ea:	0031      	movs	r1, r6
 80007ec:	4640      	mov	r0, r8
 80007ee:	f000 f804 	bl	80007fa <ZbZclAttrPostWrite>
 80007f2:	2000      	movs	r0, #0

080007f4 <??ZbZclAttrWrite_1>:
 80007f4:	b019      	add	sp, #100	@ 0x64
 80007f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080007fa <ZbZclAttrPostWrite>:
 80007fa:	b538      	push	{r3, r4, r5, lr}
 80007fc:	0005      	movs	r5, r0
 80007fe:	000c      	movs	r4, r1
 8000800:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8000802:	2800      	cmp	r0, #0
 8000804:	d004      	beq.n	8000810 <??ZbZclAttrPostWrite_0>
 8000806:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800080a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800080c:	f013 fb7e 	bl	8013f0c <ZbTimerReset>

08000810 <??ZbZclAttrPostWrite_0>:
 8000810:	2c00      	cmp	r4, #0
 8000812:	d005      	beq.n	8000820 <??ZbZclAttrPostWrite_1>
 8000814:	2200      	movs	r2, #0
 8000816:	68a0      	ldr	r0, [r4, #8]
 8000818:	8801      	ldrh	r1, [r0, #0]
 800081a:	0028      	movs	r0, r5
 800081c:	f001 ffcb 	bl	80027b6 <zcl_attr_reporting_check>

08000820 <??ZbZclAttrPostWrite_1>:
 8000820:	bd31      	pop	{r0, r4, r5, pc}

08000822 <ZbZclAttrPersist>:
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	0005      	movs	r5, r0
 8000826:	000e      	movs	r6, r1
 8000828:	0031      	movs	r1, r6
 800082a:	b289      	uxth	r1, r1
 800082c:	0028      	movs	r0, r5
 800082e:	f7ff fcd6 	bl	80001de <ZbZclAttrFind>
 8000832:	0004      	movs	r4, r0
 8000834:	2c00      	cmp	r4, #0
 8000836:	d101      	bne.n	800083c <??ZbZclAttrPersist_0>
 8000838:	2000      	movs	r0, #0
 800083a:	e00a      	b.n	8000852 <??ZbZclAttrPersist_1>

0800083c <??ZbZclAttrPersist_0>:
 800083c:	68a0      	ldr	r0, [r4, #8]
 800083e:	7900      	ldrb	r0, [r0, #4]
 8000840:	0740      	lsls	r0, r0, #29
 8000842:	d401      	bmi.n	8000848 <??ZbZclAttrPersist_2>
 8000844:	2000      	movs	r0, #0
 8000846:	e004      	b.n	8000852 <??ZbZclAttrPersist_1>

08000848 <??ZbZclAttrPersist_2>:
 8000848:	0021      	movs	r1, r4
 800084a:	0028      	movs	r0, r5
 800084c:	f7ff ffd5 	bl	80007fa <ZbZclAttrPostWrite>
 8000850:	2001      	movs	r0, #1

08000852 <??ZbZclAttrPersist_1>:
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <ZbZclAttrDefaultWrite>:
 8000854:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000858:	0006      	movs	r6, r0
 800085a:	000f      	movs	r7, r1
 800085c:	0014      	movs	r4, r2
 800085e:	4698      	mov	r8, r3
 8000860:	2500      	movs	r5, #0
 8000862:	f05f 0900 	movs.w	r9, #0
 8000866:	2c00      	cmp	r4, #0
 8000868:	d101      	bne.n	800086e <??ZbZclAttrDefaultWrite_0>
 800086a:	2001      	movs	r0, #1
 800086c:	e0d6      	b.n	8000a1c <??ZbZclAttrDefaultWrite_1>

0800086e <??ZbZclAttrDefaultWrite_0>:
 800086e:	68b8      	ldr	r0, [r7, #8]
 8000870:	7880      	ldrb	r0, [r0, #2]
 8000872:	2808      	cmp	r0, #8
 8000874:	d062      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000876:	2809      	cmp	r0, #9
 8000878:	d063      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800087a:	280a      	cmp	r0, #10
 800087c:	d064      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 800087e:	280b      	cmp	r0, #11
 8000880:	d065      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000882:	280c      	cmp	r0, #12
 8000884:	d066      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 8000886:	280d      	cmp	r0, #13
 8000888:	d067      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 800088a:	280e      	cmp	r0, #14
 800088c:	d068      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 800088e:	280f      	cmp	r0, #15
 8000890:	d069      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000892:	2810      	cmp	r0, #16
 8000894:	d052      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 8000896:	2818      	cmp	r0, #24
 8000898:	d050      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 800089a:	2819      	cmp	r0, #25
 800089c:	d051      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800089e:	281a      	cmp	r0, #26
 80008a0:	d052      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008a2:	281b      	cmp	r0, #27
 80008a4:	d053      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008a6:	281c      	cmp	r0, #28
 80008a8:	d054      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008aa:	281d      	cmp	r0, #29
 80008ac:	d055      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ae:	281e      	cmp	r0, #30
 80008b0:	d056      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008b2:	281f      	cmp	r0, #31
 80008b4:	d057      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008b6:	2820      	cmp	r0, #32
 80008b8:	d040      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008ba:	2821      	cmp	r0, #33	@ 0x21
 80008bc:	d041      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008be:	2822      	cmp	r0, #34	@ 0x22
 80008c0:	d042      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008c2:	2823      	cmp	r0, #35	@ 0x23
 80008c4:	d043      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008c6:	2824      	cmp	r0, #36	@ 0x24
 80008c8:	d044      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ca:	2825      	cmp	r0, #37	@ 0x25
 80008cc:	d045      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ce:	2826      	cmp	r0, #38	@ 0x26
 80008d0:	d046      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008d2:	2827      	cmp	r0, #39	@ 0x27
 80008d4:	d047      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008d6:	2828      	cmp	r0, #40	@ 0x28
 80008d8:	d030      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008da:	2829      	cmp	r0, #41	@ 0x29
 80008dc:	d031      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008de:	282a      	cmp	r0, #42	@ 0x2a
 80008e0:	d032      	beq.n	8000948 <??ZbZclAttrDefaultWrite_4>
 80008e2:	282b      	cmp	r0, #43	@ 0x2b
 80008e4:	d033      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 80008e6:	282c      	cmp	r0, #44	@ 0x2c
 80008e8:	d034      	beq.n	8000954 <??ZbZclAttrDefaultWrite_6>
 80008ea:	282d      	cmp	r0, #45	@ 0x2d
 80008ec:	d035      	beq.n	800095a <??ZbZclAttrDefaultWrite_7>
 80008ee:	282e      	cmp	r0, #46	@ 0x2e
 80008f0:	d036      	beq.n	8000960 <??ZbZclAttrDefaultWrite_8>
 80008f2:	282f      	cmp	r0, #47	@ 0x2f
 80008f4:	d037      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 80008f6:	2830      	cmp	r0, #48	@ 0x30
 80008f8:	d020      	beq.n	800093c <??ZbZclAttrDefaultWrite_2>
 80008fa:	2831      	cmp	r0, #49	@ 0x31
 80008fc:	d021      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 80008fe:	2838      	cmp	r0, #56	@ 0x38
 8000900:	d01f      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 8000902:	2839      	cmp	r0, #57	@ 0x39
 8000904:	d023      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000906:	283a      	cmp	r0, #58	@ 0x3a
 8000908:	d02d      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 800090a:	2841      	cmp	r0, #65	@ 0x41
 800090c:	d031      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 800090e:	2842      	cmp	r0, #66	@ 0x42
 8000910:	d02f      	beq.n	8000972 <??ZbZclAttrDefaultWrite_10>
 8000912:	2843      	cmp	r0, #67	@ 0x43
 8000914:	d049      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 8000916:	2844      	cmp	r0, #68	@ 0x44
 8000918:	d047      	beq.n	80009aa <??ZbZclAttrDefaultWrite_11>
 800091a:	28e0      	cmp	r0, #224	@ 0xe0
 800091c:	d017      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 800091e:	28e1      	cmp	r0, #225	@ 0xe1
 8000920:	d015      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000922:	28e2      	cmp	r0, #226	@ 0xe2
 8000924:	d013      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000926:	28e8      	cmp	r0, #232	@ 0xe8
 8000928:	d00b      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092a:	28e9      	cmp	r0, #233	@ 0xe9
 800092c:	d009      	beq.n	8000942 <??ZbZclAttrDefaultWrite_3>
 800092e:	28ea      	cmp	r0, #234	@ 0xea
 8000930:	d00d      	beq.n	800094e <??ZbZclAttrDefaultWrite_5>
 8000932:	28f0      	cmp	r0, #240	@ 0xf0
 8000934:	d017      	beq.n	8000966 <??ZbZclAttrDefaultWrite_9>
 8000936:	28f1      	cmp	r0, #241	@ 0xf1
 8000938:	d018      	beq.n	800096c <??ZbZclAttrDefaultWrite_12>
 800093a:	e058      	b.n	80009ee <??ZbZclAttrDefaultWrite_13>

0800093c <??ZbZclAttrDefaultWrite_2>:
 800093c:	2001      	movs	r0, #1
 800093e:	0005      	movs	r5, r0
 8000940:	e057      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000942 <??ZbZclAttrDefaultWrite_3>:
 8000942:	2002      	movs	r0, #2
 8000944:	0005      	movs	r5, r0
 8000946:	e054      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000948 <??ZbZclAttrDefaultWrite_4>:
 8000948:	2003      	movs	r0, #3
 800094a:	0005      	movs	r5, r0
 800094c:	e051      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800094e <??ZbZclAttrDefaultWrite_5>:
 800094e:	2004      	movs	r0, #4
 8000950:	0005      	movs	r5, r0
 8000952:	e04e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000954 <??ZbZclAttrDefaultWrite_6>:
 8000954:	2005      	movs	r0, #5
 8000956:	0005      	movs	r5, r0
 8000958:	e04b      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800095a <??ZbZclAttrDefaultWrite_7>:
 800095a:	2006      	movs	r0, #6
 800095c:	0005      	movs	r5, r0
 800095e:	e048      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000960 <??ZbZclAttrDefaultWrite_8>:
 8000960:	2007      	movs	r0, #7
 8000962:	0005      	movs	r5, r0
 8000964:	e045      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000966 <??ZbZclAttrDefaultWrite_9>:
 8000966:	2008      	movs	r0, #8
 8000968:	0005      	movs	r5, r0
 800096a:	e042      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800096c <??ZbZclAttrDefaultWrite_12>:
 800096c:	2010      	movs	r0, #16
 800096e:	0005      	movs	r5, r0
 8000970:	e03f      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000972 <??ZbZclAttrDefaultWrite_10>:
 8000972:	6938      	ldr	r0, [r7, #16]
 8000974:	2800      	cmp	r0, #0
 8000976:	d102      	bne.n	800097e <??ZbZclAttrDefaultWrite_15>
 8000978:	2089      	movs	r0, #137	@ 0x89
 800097a:	4681      	mov	r9, r0
 800097c:	e039      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

0800097e <??ZbZclAttrDefaultWrite_15>:
 800097e:	7820      	ldrb	r0, [r4, #0]
 8000980:	0001      	movs	r1, r0
 8000982:	b2c9      	uxtb	r1, r1
 8000984:	29ff      	cmp	r1, #255	@ 0xff
 8000986:	d105      	bne.n	8000994 <??ZbZclAttrDefaultWrite_16>
 8000988:	21ff      	movs	r1, #255	@ 0xff
 800098a:	68fa      	ldr	r2, [r7, #12]
 800098c:	7011      	strb	r1, [r2, #0]
 800098e:	2100      	movs	r1, #0
 8000990:	000d      	movs	r5, r1
 8000992:	e02e      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

08000994 <??ZbZclAttrDefaultWrite_16>:
 8000994:	0001      	movs	r1, r0
 8000996:	b2c9      	uxtb	r1, r1
 8000998:	1c49      	adds	r1, r1, #1
 800099a:	000d      	movs	r5, r1
 800099c:	6939      	ldr	r1, [r7, #16]
 800099e:	42a9      	cmp	r1, r5
 80009a0:	d202      	bcs.n	80009a8 <??ZbZclAttrDefaultWrite_17>
 80009a2:	2189      	movs	r1, #137	@ 0x89
 80009a4:	4689      	mov	r9, r1
 80009a6:	e024      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009a8 <??ZbZclAttrDefaultWrite_17>:
 80009a8:	e023      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009aa <??ZbZclAttrDefaultWrite_11>:
 80009aa:	6938      	ldr	r0, [r7, #16]
 80009ac:	2802      	cmp	r0, #2
 80009ae:	d202      	bcs.n	80009b6 <??ZbZclAttrDefaultWrite_18>
 80009b0:	2089      	movs	r0, #137	@ 0x89
 80009b2:	4681      	mov	r9, r0
 80009b4:	e01d      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009b6 <??ZbZclAttrDefaultWrite_18>:
 80009b6:	0020      	movs	r0, r4
 80009b8:	f004 f846 	bl	8004a48 <pletoh16>
 80009bc:	4682      	mov	sl, r0
 80009be:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80009c2:	4650      	mov	r0, sl
 80009c4:	000a      	movs	r2, r1
 80009c6:	b280      	uxth	r0, r0
 80009c8:	4290      	cmp	r0, r2
 80009ca:	d105      	bne.n	80009d8 <??ZbZclAttrDefaultWrite_19>
 80009cc:	68f8      	ldr	r0, [r7, #12]
 80009ce:	f004 f887 	bl	8004ae0 <putle16>
 80009d2:	2000      	movs	r0, #0
 80009d4:	0005      	movs	r5, r0
 80009d6:	e00c      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009d8 <??ZbZclAttrDefaultWrite_19>:
 80009d8:	4650      	mov	r0, sl
 80009da:	b280      	uxth	r0, r0
 80009dc:	1c80      	adds	r0, r0, #2
 80009de:	0005      	movs	r5, r0
 80009e0:	6938      	ldr	r0, [r7, #16]
 80009e2:	42a8      	cmp	r0, r5
 80009e4:	d202      	bcs.n	80009ec <??ZbZclAttrDefaultWrite_20>
 80009e6:	2089      	movs	r0, #137	@ 0x89
 80009e8:	4681      	mov	r9, r0
 80009ea:	e002      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ec <??ZbZclAttrDefaultWrite_20>:
 80009ec:	e001      	b.n	80009f2 <??ZbZclAttrDefaultWrite_14>

080009ee <??ZbZclAttrDefaultWrite_13>:
 80009ee:	2086      	movs	r0, #134	@ 0x86
 80009f0:	4681      	mov	r9, r0

080009f2 <??ZbZclAttrDefaultWrite_14>:
 80009f2:	4648      	mov	r0, r9
 80009f4:	b2c0      	uxtb	r0, r0
 80009f6:	2800      	cmp	r0, #0
 80009f8:	d10e      	bne.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 80009fa:	4640      	mov	r0, r8
 80009fc:	b280      	uxth	r0, r0
 80009fe:	07c0      	lsls	r0, r0, #31
 8000a00:	d40a      	bmi.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a02:	2d00      	cmp	r5, #0
 8000a04:	d008      	beq.n	8000a18 <??ZbZclAttrDefaultWrite_21>
 8000a06:	9500      	str	r5, [sp, #0]
 8000a08:	46a2      	mov	sl, r4
 8000a0a:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 8000a0e:	9a00      	ldr	r2, [sp, #0]
 8000a10:	4651      	mov	r1, sl
 8000a12:	4658      	mov	r0, fp
 8000a14:	f016 fbb3 	bl	801717e <__aeabi_memcpy>

08000a18 <??ZbZclAttrDefaultWrite_21>:
 8000a18:	4648      	mov	r0, r9
 8000a1a:	b2c0      	uxtb	r0, r0

08000a1c <??ZbZclAttrDefaultWrite_1>:
 8000a1c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000a20 <ZbZclAttrDefaultValue>:
 8000a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a24:	0004      	movs	r4, r0
 8000a26:	4688      	mov	r8, r1
 8000a28:	0015      	movs	r5, r2
 8000a2a:	2600      	movs	r6, #0
 8000a2c:	f05f 37ff 	movs.w	r7, #4294967295
 8000a30:	0020      	movs	r0, r4
 8000a32:	b2c0      	uxtb	r0, r0
 8000a34:	2800      	cmp	r0, #0
 8000a36:	f000 80a1 	beq.w	8000b7c <??ZbZclAttrDefaultValue_0>
 8000a3a:	2808      	cmp	r0, #8
 8000a3c:	f000 80e7 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000a40:	2809      	cmp	r0, #9
 8000a42:	f000 80da 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000a46:	280a      	cmp	r0, #10
 8000a48:	f000 80cd 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000a4c:	280b      	cmp	r0, #11
 8000a4e:	f000 80c0 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000a52:	280c      	cmp	r0, #12
 8000a54:	f000 80b3 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000a58:	280d      	cmp	r0, #13
 8000a5a:	f000 80a6 	beq.w	8000baa <??ZbZclAttrDefaultValue_6>
 8000a5e:	280e      	cmp	r0, #14
 8000a60:	f000 8099 	beq.w	8000b96 <??ZbZclAttrDefaultValue_7>
 8000a64:	280f      	cmp	r0, #15
 8000a66:	f000 808c 	beq.w	8000b82 <??ZbZclAttrDefaultValue_8>
 8000a6a:	2810      	cmp	r0, #16
 8000a6c:	f000 80db 	beq.w	8000c26 <??ZbZclAttrDefaultValue_9>
 8000a70:	2818      	cmp	r0, #24
 8000a72:	f000 8126 	beq.w	8000cc2 <??ZbZclAttrDefaultValue_10>
 8000a76:	2819      	cmp	r0, #25
 8000a78:	f000 8119 	beq.w	8000cae <??ZbZclAttrDefaultValue_11>
 8000a7c:	281a      	cmp	r0, #26
 8000a7e:	f000 810c 	beq.w	8000c9a <??ZbZclAttrDefaultValue_12>
 8000a82:	281b      	cmp	r0, #27
 8000a84:	f000 80ff 	beq.w	8000c86 <??ZbZclAttrDefaultValue_13>
 8000a88:	281c      	cmp	r0, #28
 8000a8a:	f000 80f2 	beq.w	8000c72 <??ZbZclAttrDefaultValue_14>
 8000a8e:	281d      	cmp	r0, #29
 8000a90:	f000 80e5 	beq.w	8000c5e <??ZbZclAttrDefaultValue_15>
 8000a94:	281e      	cmp	r0, #30
 8000a96:	f000 80d8 	beq.w	8000c4a <??ZbZclAttrDefaultValue_16>
 8000a9a:	281f      	cmp	r0, #31
 8000a9c:	f000 80cb 	beq.w	8000c36 <??ZbZclAttrDefaultValue_17>
 8000aa0:	2820      	cmp	r0, #32
 8000aa2:	f000 80b4 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000aa6:	2821      	cmp	r0, #33	@ 0x21
 8000aa8:	f000 80a7 	beq.w	8000bfa <??ZbZclAttrDefaultValue_2>
 8000aac:	2822      	cmp	r0, #34	@ 0x22
 8000aae:	f000 809a 	beq.w	8000be6 <??ZbZclAttrDefaultValue_3>
 8000ab2:	2823      	cmp	r0, #35	@ 0x23
 8000ab4:	f000 808d 	beq.w	8000bd2 <??ZbZclAttrDefaultValue_4>
 8000ab8:	2824      	cmp	r0, #36	@ 0x24
 8000aba:	f000 8080 	beq.w	8000bbe <??ZbZclAttrDefaultValue_5>
 8000abe:	2825      	cmp	r0, #37	@ 0x25
 8000ac0:	d073      	beq.n	8000baa <??ZbZclAttrDefaultValue_6>
 8000ac2:	2826      	cmp	r0, #38	@ 0x26
 8000ac4:	d067      	beq.n	8000b96 <??ZbZclAttrDefaultValue_7>
 8000ac6:	2827      	cmp	r0, #39	@ 0x27
 8000ac8:	d05b      	beq.n	8000b82 <??ZbZclAttrDefaultValue_8>
 8000aca:	2828      	cmp	r0, #40	@ 0x28
 8000acc:	f000 814b 	beq.w	8000d66 <??ZbZclAttrDefaultValue_18>
 8000ad0:	2829      	cmp	r0, #41	@ 0x29
 8000ad2:	f000 813e 	beq.w	8000d52 <??ZbZclAttrDefaultValue_19>
 8000ad6:	282a      	cmp	r0, #42	@ 0x2a
 8000ad8:	f000 8131 	beq.w	8000d3e <??ZbZclAttrDefaultValue_20>
 8000adc:	282b      	cmp	r0, #43	@ 0x2b
 8000ade:	f000 8124 	beq.w	8000d2a <??ZbZclAttrDefaultValue_21>
 8000ae2:	282c      	cmp	r0, #44	@ 0x2c
 8000ae4:	f000 8117 	beq.w	8000d16 <??ZbZclAttrDefaultValue_22>
 8000ae8:	282d      	cmp	r0, #45	@ 0x2d
 8000aea:	f000 810a 	beq.w	8000d02 <??ZbZclAttrDefaultValue_23>
 8000aee:	282e      	cmp	r0, #46	@ 0x2e
 8000af0:	f000 80fd 	beq.w	8000cee <??ZbZclAttrDefaultValue_24>
 8000af4:	282f      	cmp	r0, #47	@ 0x2f
 8000af6:	f000 80f0 	beq.w	8000cda <??ZbZclAttrDefaultValue_25>
 8000afa:	2830      	cmp	r0, #48	@ 0x30
 8000afc:	f000 8087 	beq.w	8000c0e <??ZbZclAttrDefaultValue_1>
 8000b00:	2831      	cmp	r0, #49	@ 0x31
 8000b02:	d07a      	beq.n	8000bfa <??ZbZclAttrDefaultValue_2>
 8000b04:	2838      	cmp	r0, #56	@ 0x38
 8000b06:	f000 813a 	beq.w	8000d7e <??ZbZclAttrDefaultValue_26>
 8000b0a:	2839      	cmp	r0, #57	@ 0x39
 8000b0c:	f000 8142 	beq.w	8000d94 <??ZbZclAttrDefaultValue_27>
 8000b10:	283a      	cmp	r0, #58	@ 0x3a
 8000b12:	f000 8149 	beq.w	8000da8 <??ZbZclAttrDefaultValue_28>
 8000b16:	2841      	cmp	r0, #65	@ 0x41
 8000b18:	f000 8152 	beq.w	8000dc0 <??ZbZclAttrDefaultValue_29>
 8000b1c:	2842      	cmp	r0, #66	@ 0x42
 8000b1e:	f000 8159 	beq.w	8000dd4 <??ZbZclAttrDefaultValue_30>
 8000b22:	2843      	cmp	r0, #67	@ 0x43
 8000b24:	f000 8160 	beq.w	8000de8 <??ZbZclAttrDefaultValue_31>
 8000b28:	2844      	cmp	r0, #68	@ 0x44
 8000b2a:	f000 8168 	beq.w	8000dfe <??ZbZclAttrDefaultValue_32>
 8000b2e:	2848      	cmp	r0, #72	@ 0x48
 8000b30:	f000 818b 	beq.w	8000e4a <??ZbZclAttrDefaultValue_33>
 8000b34:	284c      	cmp	r0, #76	@ 0x4c
 8000b36:	f000 8192 	beq.w	8000e5e <??ZbZclAttrDefaultValue_34>
 8000b3a:	2850      	cmp	r0, #80	@ 0x50
 8000b3c:	f000 8199 	beq.w	8000e72 <??ZbZclAttrDefaultValue_35>
 8000b40:	2851      	cmp	r0, #81	@ 0x51
 8000b42:	f000 81a0 	beq.w	8000e86 <??ZbZclAttrDefaultValue_36>
 8000b46:	28e0      	cmp	r0, #224	@ 0xe0
 8000b48:	f000 81a7 	beq.w	8000e9a <??ZbZclAttrDefaultValue_37>
 8000b4c:	28e1      	cmp	r0, #225	@ 0xe1
 8000b4e:	f000 81ae 	beq.w	8000eae <??ZbZclAttrDefaultValue_38>
 8000b52:	28e2      	cmp	r0, #226	@ 0xe2
 8000b54:	f000 81b5 	beq.w	8000ec2 <??ZbZclAttrDefaultValue_39>
 8000b58:	28e8      	cmp	r0, #232	@ 0xe8
 8000b5a:	f000 81bc 	beq.w	8000ed6 <??ZbZclAttrDefaultValue_40>
 8000b5e:	28e9      	cmp	r0, #233	@ 0xe9
 8000b60:	f000 81c3 	beq.w	8000eea <??ZbZclAttrDefaultValue_41>
 8000b64:	28ea      	cmp	r0, #234	@ 0xea
 8000b66:	f000 81ca 	beq.w	8000efe <??ZbZclAttrDefaultValue_42>
 8000b6a:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6c:	f000 8152 	beq.w	8000e14 <??ZbZclAttrDefaultValue_43>
 8000b70:	28f1      	cmp	r0, #241	@ 0xf1
 8000b72:	f000 815b 	beq.w	8000e2c <??ZbZclAttrDefaultValue_44>
 8000b76:	28ff      	cmp	r0, #255	@ 0xff
 8000b78:	f040 81cb 	bne.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b7c <??ZbZclAttrDefaultValue_0>:
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	0007      	movs	r7, r0
 8000b80:	e1c7      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000b82 <??ZbZclAttrDefaultValue_8>:
 8000b82:	1c70      	adds	r0, r6, #1
 8000b84:	4285      	cmp	r5, r0
 8000b86:	f0c0 81c4 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b8a <??ZbZclAttrDefaultValue_47>:
 8000b8a:	20ff      	movs	r0, #255	@ 0xff
 8000b8c:	f888 0000 	strb.w	r0, [r8]
 8000b90:	f118 0801 	adds.w	r8, r8, #1
 8000b94:	1c76      	adds	r6, r6, #1

08000b96 <??ZbZclAttrDefaultValue_7>:
 8000b96:	1c70      	adds	r0, r6, #1
 8000b98:	4285      	cmp	r5, r0
 8000b9a:	f0c0 81ba 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000b9e <??ZbZclAttrDefaultValue_48>:
 8000b9e:	20ff      	movs	r0, #255	@ 0xff
 8000ba0:	f888 0000 	strb.w	r0, [r8]
 8000ba4:	f118 0801 	adds.w	r8, r8, #1
 8000ba8:	1c76      	adds	r6, r6, #1

08000baa <??ZbZclAttrDefaultValue_6>:
 8000baa:	1c70      	adds	r0, r6, #1
 8000bac:	4285      	cmp	r5, r0
 8000bae:	f0c0 81b0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bb2 <??ZbZclAttrDefaultValue_49>:
 8000bb2:	20ff      	movs	r0, #255	@ 0xff
 8000bb4:	f888 0000 	strb.w	r0, [r8]
 8000bb8:	f118 0801 	adds.w	r8, r8, #1
 8000bbc:	1c76      	adds	r6, r6, #1

08000bbe <??ZbZclAttrDefaultValue_5>:
 8000bbe:	1c70      	adds	r0, r6, #1
 8000bc0:	4285      	cmp	r5, r0
 8000bc2:	f0c0 81a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bc6 <??ZbZclAttrDefaultValue_50>:
 8000bc6:	20ff      	movs	r0, #255	@ 0xff
 8000bc8:	f888 0000 	strb.w	r0, [r8]
 8000bcc:	f118 0801 	adds.w	r8, r8, #1
 8000bd0:	1c76      	adds	r6, r6, #1

08000bd2 <??ZbZclAttrDefaultValue_4>:
 8000bd2:	1c70      	adds	r0, r6, #1
 8000bd4:	4285      	cmp	r5, r0
 8000bd6:	f0c0 819c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bda <??ZbZclAttrDefaultValue_51>:
 8000bda:	20ff      	movs	r0, #255	@ 0xff
 8000bdc:	f888 0000 	strb.w	r0, [r8]
 8000be0:	f118 0801 	adds.w	r8, r8, #1
 8000be4:	1c76      	adds	r6, r6, #1

08000be6 <??ZbZclAttrDefaultValue_3>:
 8000be6:	1c70      	adds	r0, r6, #1
 8000be8:	4285      	cmp	r5, r0
 8000bea:	f0c0 8192 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000bee <??ZbZclAttrDefaultValue_52>:
 8000bee:	20ff      	movs	r0, #255	@ 0xff
 8000bf0:	f888 0000 	strb.w	r0, [r8]
 8000bf4:	f118 0801 	adds.w	r8, r8, #1
 8000bf8:	1c76      	adds	r6, r6, #1

08000bfa <??ZbZclAttrDefaultValue_2>:
 8000bfa:	1c70      	adds	r0, r6, #1
 8000bfc:	4285      	cmp	r5, r0
 8000bfe:	f0c0 8188 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c02 <??ZbZclAttrDefaultValue_53>:
 8000c02:	20ff      	movs	r0, #255	@ 0xff
 8000c04:	f888 0000 	strb.w	r0, [r8]
 8000c08:	f118 0801 	adds.w	r8, r8, #1
 8000c0c:	1c76      	adds	r6, r6, #1

08000c0e <??ZbZclAttrDefaultValue_1>:
 8000c0e:	1c70      	adds	r0, r6, #1
 8000c10:	4285      	cmp	r5, r0
 8000c12:	f0c0 817e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c16 <??ZbZclAttrDefaultValue_54>:
 8000c16:	20ff      	movs	r0, #255	@ 0xff
 8000c18:	f888 0000 	strb.w	r0, [r8]
 8000c1c:	f118 0801 	adds.w	r8, r8, #1
 8000c20:	1c76      	adds	r6, r6, #1
 8000c22:	0037      	movs	r7, r6
 8000c24:	e175      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c26 <??ZbZclAttrDefaultValue_9>:
 8000c26:	2000      	movs	r0, #0
 8000c28:	f888 0000 	strb.w	r0, [r8]
 8000c2c:	f118 0801 	adds.w	r8, r8, #1
 8000c30:	2001      	movs	r0, #1
 8000c32:	0007      	movs	r7, r0
 8000c34:	e16d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000c36 <??ZbZclAttrDefaultValue_17>:
 8000c36:	1c70      	adds	r0, r6, #1
 8000c38:	4285      	cmp	r5, r0
 8000c3a:	f0c0 816a 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c3e <??ZbZclAttrDefaultValue_55>:
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f888 0000 	strb.w	r0, [r8]
 8000c44:	f118 0801 	adds.w	r8, r8, #1
 8000c48:	1c76      	adds	r6, r6, #1

08000c4a <??ZbZclAttrDefaultValue_16>:
 8000c4a:	1c70      	adds	r0, r6, #1
 8000c4c:	4285      	cmp	r5, r0
 8000c4e:	f0c0 8160 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c52 <??ZbZclAttrDefaultValue_56>:
 8000c52:	2000      	movs	r0, #0
 8000c54:	f888 0000 	strb.w	r0, [r8]
 8000c58:	f118 0801 	adds.w	r8, r8, #1
 8000c5c:	1c76      	adds	r6, r6, #1

08000c5e <??ZbZclAttrDefaultValue_15>:
 8000c5e:	1c70      	adds	r0, r6, #1
 8000c60:	4285      	cmp	r5, r0
 8000c62:	f0c0 8156 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c66 <??ZbZclAttrDefaultValue_57>:
 8000c66:	2000      	movs	r0, #0
 8000c68:	f888 0000 	strb.w	r0, [r8]
 8000c6c:	f118 0801 	adds.w	r8, r8, #1
 8000c70:	1c76      	adds	r6, r6, #1

08000c72 <??ZbZclAttrDefaultValue_14>:
 8000c72:	1c70      	adds	r0, r6, #1
 8000c74:	4285      	cmp	r5, r0
 8000c76:	f0c0 814c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c7a <??ZbZclAttrDefaultValue_58>:
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f888 0000 	strb.w	r0, [r8]
 8000c80:	f118 0801 	adds.w	r8, r8, #1
 8000c84:	1c76      	adds	r6, r6, #1

08000c86 <??ZbZclAttrDefaultValue_13>:
 8000c86:	1c70      	adds	r0, r6, #1
 8000c88:	4285      	cmp	r5, r0
 8000c8a:	f0c0 8142 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000c8e <??ZbZclAttrDefaultValue_59>:
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f888 0000 	strb.w	r0, [r8]
 8000c94:	f118 0801 	adds.w	r8, r8, #1
 8000c98:	1c76      	adds	r6, r6, #1

08000c9a <??ZbZclAttrDefaultValue_12>:
 8000c9a:	1c70      	adds	r0, r6, #1
 8000c9c:	4285      	cmp	r5, r0
 8000c9e:	f0c0 8138 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ca2 <??ZbZclAttrDefaultValue_60>:
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f888 0000 	strb.w	r0, [r8]
 8000ca8:	f118 0801 	adds.w	r8, r8, #1
 8000cac:	1c76      	adds	r6, r6, #1

08000cae <??ZbZclAttrDefaultValue_11>:
 8000cae:	1c70      	adds	r0, r6, #1
 8000cb0:	4285      	cmp	r5, r0
 8000cb2:	f0c0 812e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cb6 <??ZbZclAttrDefaultValue_61>:
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f888 0000 	strb.w	r0, [r8]
 8000cbc:	f118 0801 	adds.w	r8, r8, #1
 8000cc0:	1c76      	adds	r6, r6, #1

08000cc2 <??ZbZclAttrDefaultValue_10>:
 8000cc2:	1c70      	adds	r0, r6, #1
 8000cc4:	4285      	cmp	r5, r0
 8000cc6:	f0c0 8124 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cca <??ZbZclAttrDefaultValue_62>:
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f888 0000 	strb.w	r0, [r8]
 8000cd0:	f118 0801 	adds.w	r8, r8, #1
 8000cd4:	1c76      	adds	r6, r6, #1
 8000cd6:	0037      	movs	r7, r6
 8000cd8:	e11b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000cda <??ZbZclAttrDefaultValue_25>:
 8000cda:	1c70      	adds	r0, r6, #1
 8000cdc:	4285      	cmp	r5, r0
 8000cde:	f0c0 8118 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000ce2 <??ZbZclAttrDefaultValue_63>:
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f888 0000 	strb.w	r0, [r8]
 8000ce8:	f118 0801 	adds.w	r8, r8, #1
 8000cec:	1c76      	adds	r6, r6, #1

08000cee <??ZbZclAttrDefaultValue_24>:
 8000cee:	1c70      	adds	r0, r6, #1
 8000cf0:	4285      	cmp	r5, r0
 8000cf2:	f0c0 810e 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000cf6 <??ZbZclAttrDefaultValue_64>:
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	f888 0000 	strb.w	r0, [r8]
 8000cfc:	f118 0801 	adds.w	r8, r8, #1
 8000d00:	1c76      	adds	r6, r6, #1

08000d02 <??ZbZclAttrDefaultValue_23>:
 8000d02:	1c70      	adds	r0, r6, #1
 8000d04:	4285      	cmp	r5, r0
 8000d06:	f0c0 8104 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d0a <??ZbZclAttrDefaultValue_65>:
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f888 0000 	strb.w	r0, [r8]
 8000d10:	f118 0801 	adds.w	r8, r8, #1
 8000d14:	1c76      	adds	r6, r6, #1

08000d16 <??ZbZclAttrDefaultValue_22>:
 8000d16:	1c70      	adds	r0, r6, #1
 8000d18:	4285      	cmp	r5, r0
 8000d1a:	f0c0 80fa 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d1e <??ZbZclAttrDefaultValue_66>:
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f888 0000 	strb.w	r0, [r8]
 8000d24:	f118 0801 	adds.w	r8, r8, #1
 8000d28:	1c76      	adds	r6, r6, #1

08000d2a <??ZbZclAttrDefaultValue_21>:
 8000d2a:	1c70      	adds	r0, r6, #1
 8000d2c:	4285      	cmp	r5, r0
 8000d2e:	f0c0 80f0 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d32 <??ZbZclAttrDefaultValue_67>:
 8000d32:	2000      	movs	r0, #0
 8000d34:	f888 0000 	strb.w	r0, [r8]
 8000d38:	f118 0801 	adds.w	r8, r8, #1
 8000d3c:	1c76      	adds	r6, r6, #1

08000d3e <??ZbZclAttrDefaultValue_20>:
 8000d3e:	1c70      	adds	r0, r6, #1
 8000d40:	4285      	cmp	r5, r0
 8000d42:	f0c0 80e6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d46 <??ZbZclAttrDefaultValue_68>:
 8000d46:	2000      	movs	r0, #0
 8000d48:	f888 0000 	strb.w	r0, [r8]
 8000d4c:	f118 0801 	adds.w	r8, r8, #1
 8000d50:	1c76      	adds	r6, r6, #1

08000d52 <??ZbZclAttrDefaultValue_19>:
 8000d52:	1c70      	adds	r0, r6, #1
 8000d54:	4285      	cmp	r5, r0
 8000d56:	f0c0 80dc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d5a <??ZbZclAttrDefaultValue_69>:
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	f888 0000 	strb.w	r0, [r8]
 8000d60:	f118 0801 	adds.w	r8, r8, #1
 8000d64:	1c76      	adds	r6, r6, #1

08000d66 <??ZbZclAttrDefaultValue_18>:
 8000d66:	1c70      	adds	r0, r6, #1
 8000d68:	4285      	cmp	r5, r0
 8000d6a:	f0c0 80d2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d6e <??ZbZclAttrDefaultValue_70>:
 8000d6e:	2080      	movs	r0, #128	@ 0x80
 8000d70:	f888 0000 	strb.w	r0, [r8]
 8000d74:	f118 0801 	adds.w	r8, r8, #1
 8000d78:	1c76      	adds	r6, r6, #1
 8000d7a:	0037      	movs	r7, r6
 8000d7c:	e0c9      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d7e <??ZbZclAttrDefaultValue_26>:
 8000d7e:	2d02      	cmp	r5, #2
 8000d80:	f0c0 80c7 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d84 <??ZbZclAttrDefaultValue_71>:
 8000d84:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8000d88:	4640      	mov	r0, r8
 8000d8a:	f003 fea9 	bl	8004ae0 <putle16>
 8000d8e:	2002      	movs	r0, #2
 8000d90:	0007      	movs	r7, r0
 8000d92:	e0be      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000d94 <??ZbZclAttrDefaultValue_27>:
 8000d94:	2d04      	cmp	r5, #4
 8000d96:	f0c0 80bc 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000d9a <??ZbZclAttrDefaultValue_72>:
 8000d9a:	495f      	ldr	r1, [pc, #380]	@ (8000f18 <??DataTable1>)
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	f003 feb1 	bl	8004b04 <putle32>
 8000da2:	2004      	movs	r0, #4
 8000da4:	0007      	movs	r7, r0
 8000da6:	e0b4      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000da8 <??ZbZclAttrDefaultValue_28>:
 8000da8:	2d08      	cmp	r5, #8
 8000daa:	f0c0 80b2 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dae <??ZbZclAttrDefaultValue_73>:
 8000dae:	f07f 0201 	mvns.w	r2, #1
 8000db2:	4b5a      	ldr	r3, [pc, #360]	@ (8000f1c <??DataTable1_1>)
 8000db4:	4640      	mov	r0, r8
 8000db6:	f003 fed8 	bl	8004b6a <putle64>
 8000dba:	2008      	movs	r0, #8
 8000dbc:	0007      	movs	r7, r0
 8000dbe:	e0a8      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc0 <??ZbZclAttrDefaultValue_29>:
 8000dc0:	2d02      	cmp	r5, #2
 8000dc2:	f0c0 80a6 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dc6 <??ZbZclAttrDefaultValue_74>:
 8000dc6:	21ff      	movs	r1, #255	@ 0xff
 8000dc8:	4640      	mov	r0, r8
 8000dca:	f003 fe89 	bl	8004ae0 <putle16>
 8000dce:	2002      	movs	r0, #2
 8000dd0:	0007      	movs	r7, r0
 8000dd2:	e09e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dd4 <??ZbZclAttrDefaultValue_30>:
 8000dd4:	2d02      	cmp	r5, #2
 8000dd6:	f0c0 809c 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dda <??ZbZclAttrDefaultValue_75>:
 8000dda:	21ff      	movs	r1, #255	@ 0xff
 8000ddc:	4640      	mov	r0, r8
 8000dde:	f003 fe7f 	bl	8004ae0 <putle16>
 8000de2:	2002      	movs	r0, #2
 8000de4:	0007      	movs	r7, r0
 8000de6:	e094      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000de8 <??ZbZclAttrDefaultValue_31>:
 8000de8:	2d04      	cmp	r5, #4
 8000dea:	f0c0 8092 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000dee <??ZbZclAttrDefaultValue_76>:
 8000dee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000df2:	4640      	mov	r0, r8
 8000df4:	f003 fe86 	bl	8004b04 <putle32>
 8000df8:	2004      	movs	r0, #4
 8000dfa:	0007      	movs	r7, r0
 8000dfc:	e089      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000dfe <??ZbZclAttrDefaultValue_32>:
 8000dfe:	2d04      	cmp	r5, #4
 8000e00:	f0c0 8087 	bcc.w	8000f12 <??ZbZclAttrDefaultValue_45>

08000e04 <??ZbZclAttrDefaultValue_77>:
 8000e04:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e08:	4640      	mov	r0, r8
 8000e0a:	f003 fe7b 	bl	8004b04 <putle32>
 8000e0e:	2004      	movs	r0, #4
 8000e10:	0007      	movs	r7, r0
 8000e12:	e07e      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e14 <??ZbZclAttrDefaultValue_43>:
 8000e14:	2d08      	cmp	r5, #8
 8000e16:	d37c      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e18 <??ZbZclAttrDefaultValue_78>:
 8000e18:	f05f 32ff 	movs.w	r2, #4294967295
 8000e1c:	f05f 33ff 	movs.w	r3, #4294967295
 8000e20:	4640      	mov	r0, r8
 8000e22:	f003 fea2 	bl	8004b6a <putle64>
 8000e26:	2008      	movs	r0, #8
 8000e28:	0007      	movs	r7, r0
 8000e2a:	e072      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e2c <??ZbZclAttrDefaultValue_44>:
 8000e2c:	2d10      	cmp	r5, #16
 8000e2e:	d370      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e30 <??ZbZclAttrDefaultValue_79>:
 8000e30:	f05f 0910 	movs.w	r9, #16
 8000e34:	f05f 0a00 	movs.w	sl, #0
 8000e38:	46c3      	mov	fp, r8
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	4649      	mov	r1, r9
 8000e3e:	4658      	mov	r0, fp
 8000e40:	f004 ff24 	bl	8005c8c <__aeabi_memset>
 8000e44:	2010      	movs	r0, #16
 8000e46:	0007      	movs	r7, r0
 8000e48:	e063      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4a <??ZbZclAttrDefaultValue_33>:
 8000e4a:	2d02      	cmp	r5, #2
 8000e4c:	d361      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e4e <??ZbZclAttrDefaultValue_80>:
 8000e4e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e52:	4640      	mov	r0, r8
 8000e54:	f003 fe44 	bl	8004ae0 <putle16>
 8000e58:	2002      	movs	r0, #2
 8000e5a:	0007      	movs	r7, r0
 8000e5c:	e059      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e5e <??ZbZclAttrDefaultValue_34>:
 8000e5e:	2d02      	cmp	r5, #2
 8000e60:	d357      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e62 <??ZbZclAttrDefaultValue_81>:
 8000e62:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e66:	4640      	mov	r0, r8
 8000e68:	f003 fe3a 	bl	8004ae0 <putle16>
 8000e6c:	2002      	movs	r0, #2
 8000e6e:	0007      	movs	r7, r0
 8000e70:	e04f      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e72 <??ZbZclAttrDefaultValue_35>:
 8000e72:	2d02      	cmp	r5, #2
 8000e74:	d34d      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e76 <??ZbZclAttrDefaultValue_82>:
 8000e76:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e7a:	4640      	mov	r0, r8
 8000e7c:	f003 fe30 	bl	8004ae0 <putle16>
 8000e80:	2002      	movs	r0, #2
 8000e82:	0007      	movs	r7, r0
 8000e84:	e045      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e86 <??ZbZclAttrDefaultValue_36>:
 8000e86:	2d02      	cmp	r5, #2
 8000e88:	d343      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e8a <??ZbZclAttrDefaultValue_83>:
 8000e8a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000e8e:	4640      	mov	r0, r8
 8000e90:	f003 fe26 	bl	8004ae0 <putle16>
 8000e94:	2002      	movs	r0, #2
 8000e96:	0007      	movs	r7, r0
 8000e98:	e03b      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9a <??ZbZclAttrDefaultValue_37>:
 8000e9a:	2d04      	cmp	r5, #4
 8000e9c:	d339      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000e9e <??ZbZclAttrDefaultValue_84>:
 8000e9e:	f05f 31ff 	movs.w	r1, #4294967295
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	f003 fe2e 	bl	8004b04 <putle32>
 8000ea8:	2004      	movs	r0, #4
 8000eaa:	0007      	movs	r7, r0
 8000eac:	e031      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eae <??ZbZclAttrDefaultValue_38>:
 8000eae:	2d04      	cmp	r5, #4
 8000eb0:	d32f      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eb2 <??ZbZclAttrDefaultValue_85>:
 8000eb2:	f05f 31ff 	movs.w	r1, #4294967295
 8000eb6:	4640      	mov	r0, r8
 8000eb8:	f003 fe24 	bl	8004b04 <putle32>
 8000ebc:	2004      	movs	r0, #4
 8000ebe:	0007      	movs	r7, r0
 8000ec0:	e027      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec2 <??ZbZclAttrDefaultValue_39>:
 8000ec2:	2d04      	cmp	r5, #4
 8000ec4:	d325      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ec6 <??ZbZclAttrDefaultValue_86>:
 8000ec6:	f05f 31ff 	movs.w	r1, #4294967295
 8000eca:	4640      	mov	r0, r8
 8000ecc:	f003 fe1a 	bl	8004b04 <putle32>
 8000ed0:	2004      	movs	r0, #4
 8000ed2:	0007      	movs	r7, r0
 8000ed4:	e01d      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000ed6 <??ZbZclAttrDefaultValue_40>:
 8000ed6:	2d02      	cmp	r5, #2
 8000ed8:	d31b      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eda <??ZbZclAttrDefaultValue_87>:
 8000eda:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ede:	4640      	mov	r0, r8
 8000ee0:	f003 fdfe 	bl	8004ae0 <putle16>
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	0007      	movs	r7, r0
 8000ee8:	e013      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eea <??ZbZclAttrDefaultValue_41>:
 8000eea:	2d02      	cmp	r5, #2
 8000eec:	d311      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000eee <??ZbZclAttrDefaultValue_88>:
 8000eee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	f003 fdf4 	bl	8004ae0 <putle16>
 8000ef8:	2002      	movs	r0, #2
 8000efa:	0007      	movs	r7, r0
 8000efc:	e009      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000efe <??ZbZclAttrDefaultValue_42>:
 8000efe:	2d04      	cmp	r5, #4
 8000f00:	d307      	bcc.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f02 <??ZbZclAttrDefaultValue_89>:
 8000f02:	f05f 31ff 	movs.w	r1, #4294967295
 8000f06:	4640      	mov	r0, r8
 8000f08:	f003 fdfc 	bl	8004b04 <putle32>
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	0007      	movs	r7, r0
 8000f10:	e7ff      	b.n	8000f12 <??ZbZclAttrDefaultValue_45>

08000f12 <??ZbZclAttrDefaultValue_45>:
 8000f12:	0038      	movs	r0, r7
 8000f14:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000f18 <??DataTable1>:
 8000f18:	fffe 00ff                                   ....

08000f1c <??DataTable1_1>:
 8000f1c:	ffff 001f                                   ....

08000f20 <ZbZclAttrTypeLength>:
 8000f20:	0001      	movs	r1, r0
 8000f22:	0008      	movs	r0, r1
 8000f24:	b2c0      	uxtb	r0, r0
 8000f26:	2800      	cmp	r0, #0
 8000f28:	f000 8081 	beq.w	800102e <??ZbZclAttrTypeLength_0>
 8000f2c:	2808      	cmp	r0, #8
 8000f2e:	d06c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f30:	2809      	cmp	r0, #9
 8000f32:	d06c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f34:	280a      	cmp	r0, #10
 8000f36:	d06c      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f38:	280b      	cmp	r0, #11
 8000f3a:	d06c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f3c:	280c      	cmp	r0, #12
 8000f3e:	d06c      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f40:	280d      	cmp	r0, #13
 8000f42:	d06c      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f44:	280e      	cmp	r0, #14
 8000f46:	d06c      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f48:	280f      	cmp	r0, #15
 8000f4a:	d06c      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f4c:	2810      	cmp	r0, #16
 8000f4e:	d05c      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f50:	2818      	cmp	r0, #24
 8000f52:	d05a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f54:	2819      	cmp	r0, #25
 8000f56:	d05a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f58:	281a      	cmp	r0, #26
 8000f5a:	d05a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f5c:	281b      	cmp	r0, #27
 8000f5e:	d05a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f60:	281c      	cmp	r0, #28
 8000f62:	d05a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f64:	281d      	cmp	r0, #29
 8000f66:	d05a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f68:	281e      	cmp	r0, #30
 8000f6a:	d05a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f6c:	281f      	cmp	r0, #31
 8000f6e:	d05a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f70:	2820      	cmp	r0, #32
 8000f72:	d04a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f74:	2821      	cmp	r0, #33	@ 0x21
 8000f76:	d04a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f78:	2822      	cmp	r0, #34	@ 0x22
 8000f7a:	d04a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f7c:	2823      	cmp	r0, #35	@ 0x23
 8000f7e:	d04a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000f80:	2824      	cmp	r0, #36	@ 0x24
 8000f82:	d04a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000f84:	2825      	cmp	r0, #37	@ 0x25
 8000f86:	d04a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000f88:	2826      	cmp	r0, #38	@ 0x26
 8000f8a:	d04a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000f8c:	2827      	cmp	r0, #39	@ 0x27
 8000f8e:	d04a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000f90:	2828      	cmp	r0, #40	@ 0x28
 8000f92:	d03a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000f94:	2829      	cmp	r0, #41	@ 0x29
 8000f96:	d03a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000f98:	282a      	cmp	r0, #42	@ 0x2a
 8000f9a:	d03a      	beq.n	8001012 <??ZbZclAttrTypeLength_3>
 8000f9c:	282b      	cmp	r0, #43	@ 0x2b
 8000f9e:	d03a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fa0:	282c      	cmp	r0, #44	@ 0x2c
 8000fa2:	d03a      	beq.n	800101a <??ZbZclAttrTypeLength_5>
 8000fa4:	282d      	cmp	r0, #45	@ 0x2d
 8000fa6:	d03a      	beq.n	800101e <??ZbZclAttrTypeLength_6>
 8000fa8:	282e      	cmp	r0, #46	@ 0x2e
 8000faa:	d03a      	beq.n	8001022 <??ZbZclAttrTypeLength_7>
 8000fac:	282f      	cmp	r0, #47	@ 0x2f
 8000fae:	d03a      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fb0:	2830      	cmp	r0, #48	@ 0x30
 8000fb2:	d02a      	beq.n	800100a <??ZbZclAttrTypeLength_1>
 8000fb4:	2831      	cmp	r0, #49	@ 0x31
 8000fb6:	d02a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fb8:	2838      	cmp	r0, #56	@ 0x38
 8000fba:	d028      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000fbc:	2839      	cmp	r0, #57	@ 0x39
 8000fbe:	d02a      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fc0:	283a      	cmp	r0, #58	@ 0x3a
 8000fc2:	d030      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8000fc4:	2841      	cmp	r0, #65	@ 0x41
 8000fc6:	d032      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fc8:	2842      	cmp	r0, #66	@ 0x42
 8000fca:	d030      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fcc:	2843      	cmp	r0, #67	@ 0x43
 8000fce:	d02e      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd0:	2844      	cmp	r0, #68	@ 0x44
 8000fd2:	d02c      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd4:	2848      	cmp	r0, #72	@ 0x48
 8000fd6:	d02a      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fd8:	284c      	cmp	r0, #76	@ 0x4c
 8000fda:	d028      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fdc:	2850      	cmp	r0, #80	@ 0x50
 8000fde:	d026      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe0:	2851      	cmp	r0, #81	@ 0x51
 8000fe2:	d024      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8000fe4:	28e0      	cmp	r0, #224	@ 0xe0
 8000fe6:	d016      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fe8:	28e1      	cmp	r0, #225	@ 0xe1
 8000fea:	d014      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000fec:	28e2      	cmp	r0, #226	@ 0xe2
 8000fee:	d012      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ff0:	28e8      	cmp	r0, #232	@ 0xe8
 8000ff2:	d00c      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff4:	28e9      	cmp	r0, #233	@ 0xe9
 8000ff6:	d00a      	beq.n	800100e <??ZbZclAttrTypeLength_2>
 8000ff8:	28ea      	cmp	r0, #234	@ 0xea
 8000ffa:	d00c      	beq.n	8001016 <??ZbZclAttrTypeLength_4>
 8000ffc:	28f0      	cmp	r0, #240	@ 0xf0
 8000ffe:	d012      	beq.n	8001026 <??ZbZclAttrTypeLength_8>
 8001000:	28f1      	cmp	r0, #241	@ 0xf1
 8001002:	d012      	beq.n	800102a <??ZbZclAttrTypeLength_9>
 8001004:	28ff      	cmp	r0, #255	@ 0xff
 8001006:	d012      	beq.n	800102e <??ZbZclAttrTypeLength_0>
 8001008:	e013      	b.n	8001032 <??ZbZclAttrTypeLength_10>

0800100a <??ZbZclAttrTypeLength_1>:
 800100a:	2001      	movs	r0, #1
 800100c:	e012      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800100e <??ZbZclAttrTypeLength_2>:
 800100e:	2002      	movs	r0, #2
 8001010:	e010      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001012 <??ZbZclAttrTypeLength_3>:
 8001012:	2003      	movs	r0, #3
 8001014:	e00e      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001016 <??ZbZclAttrTypeLength_4>:
 8001016:	2004      	movs	r0, #4
 8001018:	e00c      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101a <??ZbZclAttrTypeLength_5>:
 800101a:	2005      	movs	r0, #5
 800101c:	e00a      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800101e <??ZbZclAttrTypeLength_6>:
 800101e:	2006      	movs	r0, #6
 8001020:	e008      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001022 <??ZbZclAttrTypeLength_7>:
 8001022:	2007      	movs	r0, #7
 8001024:	e006      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001026 <??ZbZclAttrTypeLength_8>:
 8001026:	2008      	movs	r0, #8
 8001028:	e004      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102a <??ZbZclAttrTypeLength_9>:
 800102a:	2010      	movs	r0, #16
 800102c:	e002      	b.n	8001034 <??ZbZclAttrTypeLength_11>

0800102e <??ZbZclAttrTypeLength_0>:
 800102e:	2000      	movs	r0, #0
 8001030:	e000      	b.n	8001034 <??ZbZclAttrTypeLength_11>

08001032 <??ZbZclAttrTypeLength_10>:
 8001032:	2000      	movs	r0, #0

08001034 <??ZbZclAttrTypeLength_11>:
 8001034:	4770      	bx	lr

08001036 <ZbZclAttrParseLength>:
 8001036:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800103a:	0006      	movs	r6, r0
 800103c:	000c      	movs	r4, r1
 800103e:	0015      	movs	r5, r2
 8001040:	001f      	movs	r7, r3
 8001042:	0038      	movs	r0, r7
 8001044:	b2c0      	uxtb	r0, r0
 8001046:	280f      	cmp	r0, #15
 8001048:	d302      	bcc.n	8001050 <??ZbZclAttrParseLength_0>
 800104a:	f05f 30ff 	movs.w	r0, #4294967295
 800104e:	e0a1      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001050 <??ZbZclAttrParseLength_0>:
 8001050:	0030      	movs	r0, r6
 8001052:	b2c0      	uxtb	r0, r0
 8001054:	f7ff ff64 	bl	8000f20 <ZbZclAttrTypeLength>
 8001058:	0001      	movs	r1, r0
 800105a:	2901      	cmp	r1, #1
 800105c:	db06      	blt.n	800106c <??ZbZclAttrParseLength_2>
 800105e:	428d      	cmp	r5, r1
 8001060:	d202      	bcs.n	8001068 <??ZbZclAttrParseLength_3>
 8001062:	f05f 30ff 	movs.w	r0, #4294967295
 8001066:	e095      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001068 <??ZbZclAttrParseLength_3>:
 8001068:	0008      	movs	r0, r1
 800106a:	e093      	b.n	8001194 <??ZbZclAttrParseLength_1>

0800106c <??ZbZclAttrParseLength_2>:
 800106c:	2c00      	cmp	r4, #0
 800106e:	d101      	bne.n	8001074 <??ZbZclAttrParseLength_4>
 8001070:	0028      	movs	r0, r5
 8001072:	e08f      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001074 <??ZbZclAttrParseLength_4>:
 8001074:	f05f 39ff 	movs.w	r9, #4294967295
 8001078:	0030      	movs	r0, r6
 800107a:	b2c0      	uxtb	r0, r0
 800107c:	3841      	subs	r0, #65	@ 0x41
 800107e:	2801      	cmp	r0, #1
 8001080:	d90a      	bls.n	8001098 <??ZbZclAttrParseLength_5>
 8001082:	1e80      	subs	r0, r0, #2
 8001084:	2801      	cmp	r0, #1
 8001086:	d914      	bls.n	80010b2 <??ZbZclAttrParseLength_6>
 8001088:	1f40      	subs	r0, r0, #5
 800108a:	d027      	beq.n	80010dc <??ZbZclAttrParseLength_7>
 800108c:	1f00      	subs	r0, r0, #4
 800108e:	d04b      	beq.n	8001128 <??ZbZclAttrParseLength_8>
 8001090:	1f00      	subs	r0, r0, #4
 8001092:	2801      	cmp	r0, #1
 8001094:	d922      	bls.n	80010dc <??ZbZclAttrParseLength_7>
 8001096:	e074      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001098 <??ZbZclAttrParseLength_5>:
 8001098:	2d00      	cmp	r5, #0
 800109a:	d072      	beq.n	8001182 <??ZbZclAttrParseLength_10>

0800109c <??ZbZclAttrParseLength_11>:
 800109c:	7820      	ldrb	r0, [r4, #0]
 800109e:	28ff      	cmp	r0, #255	@ 0xff
 80010a0:	d102      	bne.n	80010a8 <??ZbZclAttrParseLength_12>
 80010a2:	f05f 0901 	movs.w	r9, #1
 80010a6:	e003      	b.n	80010b0 <??ZbZclAttrParseLength_13>

080010a8 <??ZbZclAttrParseLength_12>:
 80010a8:	f894 9000 	ldrb.w	r9, [r4]
 80010ac:	f119 0901 	adds.w	r9, r9, #1

080010b0 <??ZbZclAttrParseLength_13>:
 80010b0:	e067      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010b2 <??ZbZclAttrParseLength_6>:
 80010b2:	2d02      	cmp	r5, #2
 80010b4:	d365      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010b6 <??ZbZclAttrParseLength_14>:
 80010b6:	0020      	movs	r0, r4
 80010b8:	f003 fcc6 	bl	8004a48 <pletoh16>
 80010bc:	4680      	mov	r8, r0
 80010be:	4640      	mov	r0, r8
 80010c0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80010c4:	b280      	uxth	r0, r0
 80010c6:	4288      	cmp	r0, r1
 80010c8:	d102      	bne.n	80010d0 <??ZbZclAttrParseLength_15>
 80010ca:	f05f 0902 	movs.w	r9, #2
 80010ce:	e004      	b.n	80010da <??ZbZclAttrParseLength_16>

080010d0 <??ZbZclAttrParseLength_15>:
 80010d0:	46c1      	mov	r9, r8
 80010d2:	fa1f f989 	uxth.w	r9, r9
 80010d6:	f119 0902 	adds.w	r9, r9, #2

080010da <??ZbZclAttrParseLength_16>:
 80010da:	e052      	b.n	8001182 <??ZbZclAttrParseLength_10>

080010dc <??ZbZclAttrParseLength_7>:
 80010dc:	2d03      	cmp	r5, #3
 80010de:	d350      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

080010e0 <??ZbZclAttrParseLength_17>:
 80010e0:	7820      	ldrb	r0, [r4, #0]
 80010e2:	4683      	mov	fp, r0
 80010e4:	1c60      	adds	r0, r4, #1
 80010e6:	f003 fcaf 	bl	8004a48 <pletoh16>
 80010ea:	4680      	mov	r8, r0
 80010ec:	2003      	movs	r0, #3
 80010ee:	4681      	mov	r9, r0

080010f0 <??ZbZclAttrParseLength_18>:
 80010f0:	4640      	mov	r0, r8
 80010f2:	b280      	uxth	r0, r0
 80010f4:	2800      	cmp	r0, #0
 80010f6:	d016      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 80010f8:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 80010fc:	4640      	mov	r0, r8
 80010fe:	b280      	uxth	r0, r0
 8001100:	4550      	cmp	r0, sl
 8001102:	d010      	beq.n	8001126 <??ZbZclAttrParseLength_19>
 8001104:	1c7b      	adds	r3, r7, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	ebb5 0209 	subs.w	r2, r5, r9
 800110c:	eb04 0109 	add.w	r1, r4, r9
 8001110:	4658      	mov	r0, fp
 8001112:	b2c0      	uxtb	r0, r0
 8001114:	f7ff ff8f 	bl	8001036 <ZbZclAttrParseLength>
 8001118:	2800      	cmp	r0, #0
 800111a:	d43b      	bmi.n	8001194 <??ZbZclAttrParseLength_1>

0800111c <??ZbZclAttrParseLength_20>:
 800111c:	eb10 0909 	adds.w	r9, r0, r9
 8001120:	eb1a 0808 	adds.w	r8, sl, r8
 8001124:	e7e4      	b.n	80010f0 <??ZbZclAttrParseLength_18>

08001126 <??ZbZclAttrParseLength_19>:
 8001126:	e02c      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001128 <??ZbZclAttrParseLength_8>:
 8001128:	2d02      	cmp	r5, #2
 800112a:	d32a      	bcc.n	8001182 <??ZbZclAttrParseLength_10>

0800112c <??ZbZclAttrParseLength_21>:
 800112c:	0020      	movs	r0, r4
 800112e:	f003 fc8b 	bl	8004a48 <pletoh16>
 8001132:	4680      	mov	r8, r0
 8001134:	2002      	movs	r0, #2
 8001136:	4681      	mov	r9, r0

08001138 <??ZbZclAttrParseLength_22>:
 8001138:	4640      	mov	r0, r8
 800113a:	b280      	uxth	r0, r0
 800113c:	2800      	cmp	r0, #0
 800113e:	d01f      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 8001140:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8001144:	4640      	mov	r0, r8
 8001146:	b280      	uxth	r0, r0
 8001148:	4550      	cmp	r0, sl
 800114a:	d019      	beq.n	8001180 <??ZbZclAttrParseLength_23>
 800114c:	f119 0001 	adds.w	r0, r9, #1
 8001150:	4285      	cmp	r5, r0
 8001152:	d315      	bcc.n	8001180 <??ZbZclAttrParseLength_23>

08001154 <??ZbZclAttrParseLength_24>:
 8001154:	f814 0009 	ldrb.w	r0, [r4, r9]
 8001158:	4683      	mov	fp, r0
 800115a:	f119 0901 	adds.w	r9, r9, #1
 800115e:	1c7b      	adds	r3, r7, #1
 8001160:	b2db      	uxtb	r3, r3
 8001162:	ebb5 0209 	subs.w	r2, r5, r9
 8001166:	eb04 0109 	add.w	r1, r4, r9
 800116a:	4658      	mov	r0, fp
 800116c:	b2c0      	uxtb	r0, r0
 800116e:	f7ff ff62 	bl	8001036 <ZbZclAttrParseLength>
 8001172:	2800      	cmp	r0, #0
 8001174:	d404      	bmi.n	8001180 <??ZbZclAttrParseLength_23>

08001176 <??ZbZclAttrParseLength_25>:
 8001176:	eb10 0909 	adds.w	r9, r0, r9
 800117a:	eb1a 0808 	adds.w	r8, sl, r8
 800117e:	e7db      	b.n	8001138 <??ZbZclAttrParseLength_22>

08001180 <??ZbZclAttrParseLength_23>:
 8001180:	e7ff      	b.n	8001182 <??ZbZclAttrParseLength_10>

08001182 <??ZbZclAttrParseLength_10>:
 8001182:	f1b9 0f00 	cmp.w	r9, #0
 8001186:	d401      	bmi.n	800118c <??ZbZclAttrParseLength_26>
 8001188:	454d      	cmp	r5, r9
 800118a:	d202      	bcs.n	8001192 <??ZbZclAttrParseLength_27>

0800118c <??ZbZclAttrParseLength_26>:
 800118c:	f05f 30ff 	movs.w	r0, #4294967295
 8001190:	e000      	b.n	8001194 <??ZbZclAttrParseLength_1>

08001192 <??ZbZclAttrParseLength_27>:
 8001192:	4648      	mov	r0, r9

08001194 <??ZbZclAttrParseLength_1>:
 8001194:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001198 <ZbZclAttrIsAnalog>:
 8001198:	0001      	movs	r1, r0
 800119a:	0008      	movs	r0, r1
 800119c:	b2c0      	uxtb	r0, r0
 800119e:	2820      	cmp	r0, #32
 80011a0:	db05      	blt.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011a2:	0008      	movs	r0, r1
 80011a4:	b2c0      	uxtb	r0, r0
 80011a6:	2828      	cmp	r0, #40	@ 0x28
 80011a8:	da01      	bge.n	80011ae <??ZbZclAttrIsAnalog_0>
 80011aa:	2001      	movs	r0, #1
 80011ac:	e026      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011ae <??ZbZclAttrIsAnalog_0>:
 80011ae:	0008      	movs	r0, r1
 80011b0:	b2c0      	uxtb	r0, r0
 80011b2:	2828      	cmp	r0, #40	@ 0x28
 80011b4:	db05      	blt.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011b6:	0008      	movs	r0, r1
 80011b8:	b2c0      	uxtb	r0, r0
 80011ba:	2830      	cmp	r0, #48	@ 0x30
 80011bc:	da01      	bge.n	80011c2 <??ZbZclAttrIsAnalog_2>
 80011be:	2001      	movs	r0, #1
 80011c0:	e01c      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011c2 <??ZbZclAttrIsAnalog_2>:
 80011c2:	0008      	movs	r0, r1
 80011c4:	b2c0      	uxtb	r0, r0
 80011c6:	2838      	cmp	r0, #56	@ 0x38
 80011c8:	d007      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011ca:	0008      	movs	r0, r1
 80011cc:	b2c0      	uxtb	r0, r0
 80011ce:	2839      	cmp	r0, #57	@ 0x39
 80011d0:	d003      	beq.n	80011da <??ZbZclAttrIsAnalog_3>
 80011d2:	0008      	movs	r0, r1
 80011d4:	b2c0      	uxtb	r0, r0
 80011d6:	283a      	cmp	r0, #58	@ 0x3a
 80011d8:	d101      	bne.n	80011de <??ZbZclAttrIsAnalog_4>

080011da <??ZbZclAttrIsAnalog_3>:
 80011da:	2001      	movs	r0, #1
 80011dc:	e00e      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011de <??ZbZclAttrIsAnalog_4>:
 80011de:	0008      	movs	r0, r1
 80011e0:	b2c0      	uxtb	r0, r0
 80011e2:	28e0      	cmp	r0, #224	@ 0xe0
 80011e4:	d007      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011e6:	0008      	movs	r0, r1
 80011e8:	b2c0      	uxtb	r0, r0
 80011ea:	28e1      	cmp	r0, #225	@ 0xe1
 80011ec:	d003      	beq.n	80011f6 <??ZbZclAttrIsAnalog_5>
 80011ee:	0008      	movs	r0, r1
 80011f0:	b2c0      	uxtb	r0, r0
 80011f2:	28e2      	cmp	r0, #226	@ 0xe2
 80011f4:	d101      	bne.n	80011fa <??ZbZclAttrIsAnalog_6>

080011f6 <??ZbZclAttrIsAnalog_5>:
 80011f6:	2001      	movs	r0, #1
 80011f8:	e000      	b.n	80011fc <??ZbZclAttrIsAnalog_1>

080011fa <??ZbZclAttrIsAnalog_6>:
 80011fa:	2000      	movs	r0, #0

080011fc <??ZbZclAttrIsAnalog_1>:
 80011fc:	4770      	bx	lr
	...

08001200 <ZbZclAppendInteger>:
 8001200:	b4f0      	push	{r4, r5, r6, r7}
 8001202:	0004      	movs	r4, r0
 8001204:	000d      	movs	r5, r1
 8001206:	9904      	ldr	r1, [sp, #16]
 8001208:	2700      	movs	r7, #0
 800120a:	2600      	movs	r6, #0
 800120c:	0010      	movs	r0, r2
 800120e:	b2c0      	uxtb	r0, r0
 8001210:	2808      	cmp	r0, #8
 8001212:	f000 80b2 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001216:	2809      	cmp	r0, #9
 8001218:	f000 80a4 	beq.w	8001364 <??ZbZclAppendInteger_1>
 800121c:	280a      	cmp	r0, #10
 800121e:	f000 8096 	beq.w	800134e <??ZbZclAppendInteger_2>
 8001222:	280b      	cmp	r0, #11
 8001224:	f000 8088 	beq.w	8001338 <??ZbZclAppendInteger_3>
 8001228:	280c      	cmp	r0, #12
 800122a:	d07a      	beq.n	8001322 <??ZbZclAppendInteger_4>
 800122c:	280d      	cmp	r0, #13
 800122e:	d06d      	beq.n	800130c <??ZbZclAppendInteger_5>
 8001230:	280e      	cmp	r0, #14
 8001232:	d060      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001234:	280f      	cmp	r0, #15
 8001236:	d053      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001238:	2810      	cmp	r0, #16
 800123a:	d042      	beq.n	80012c2 <??ZbZclAppendInteger_8>
 800123c:	2818      	cmp	r0, #24
 800123e:	f000 809c 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001242:	2819      	cmp	r0, #25
 8001244:	f000 808e 	beq.w	8001364 <??ZbZclAppendInteger_1>
 8001248:	281a      	cmp	r0, #26
 800124a:	f000 8080 	beq.w	800134e <??ZbZclAppendInteger_2>
 800124e:	281b      	cmp	r0, #27
 8001250:	d072      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001252:	281c      	cmp	r0, #28
 8001254:	d065      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001256:	281d      	cmp	r0, #29
 8001258:	d058      	beq.n	800130c <??ZbZclAppendInteger_5>
 800125a:	281e      	cmp	r0, #30
 800125c:	d04b      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 800125e:	281f      	cmp	r0, #31
 8001260:	d03e      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001262:	2820      	cmp	r0, #32
 8001264:	f000 8089 	beq.w	800137a <??ZbZclAppendInteger_0>
 8001268:	2821      	cmp	r0, #33	@ 0x21
 800126a:	d07b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800126c:	2822      	cmp	r0, #34	@ 0x22
 800126e:	d06e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001270:	2823      	cmp	r0, #35	@ 0x23
 8001272:	d061      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001274:	2824      	cmp	r0, #36	@ 0x24
 8001276:	d054      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001278:	2825      	cmp	r0, #37	@ 0x25
 800127a:	d047      	beq.n	800130c <??ZbZclAppendInteger_5>
 800127c:	2826      	cmp	r0, #38	@ 0x26
 800127e:	d03a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 8001280:	2827      	cmp	r0, #39	@ 0x27
 8001282:	d02d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 8001284:	2828      	cmp	r0, #40	@ 0x28
 8001286:	d078      	beq.n	800137a <??ZbZclAppendInteger_0>
 8001288:	2829      	cmp	r0, #41	@ 0x29
 800128a:	d06b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 800128c:	282a      	cmp	r0, #42	@ 0x2a
 800128e:	d05e      	beq.n	800134e <??ZbZclAppendInteger_2>
 8001290:	282b      	cmp	r0, #43	@ 0x2b
 8001292:	d051      	beq.n	8001338 <??ZbZclAppendInteger_3>
 8001294:	282c      	cmp	r0, #44	@ 0x2c
 8001296:	d044      	beq.n	8001322 <??ZbZclAppendInteger_4>
 8001298:	282d      	cmp	r0, #45	@ 0x2d
 800129a:	d037      	beq.n	800130c <??ZbZclAppendInteger_5>
 800129c:	282e      	cmp	r0, #46	@ 0x2e
 800129e:	d02a      	beq.n	80012f6 <??ZbZclAppendInteger_6>
 80012a0:	282f      	cmp	r0, #47	@ 0x2f
 80012a2:	d01d      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012a4:	2830      	cmp	r0, #48	@ 0x30
 80012a6:	d068      	beq.n	800137a <??ZbZclAppendInteger_0>
 80012a8:	2831      	cmp	r0, #49	@ 0x31
 80012aa:	d05b      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012ac:	28e2      	cmp	r0, #226	@ 0xe2
 80012ae:	d043      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012b0:	28e8      	cmp	r0, #232	@ 0xe8
 80012b2:	d057      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b4:	28e9      	cmp	r0, #233	@ 0xe9
 80012b6:	d055      	beq.n	8001364 <??ZbZclAppendInteger_1>
 80012b8:	28ea      	cmp	r0, #234	@ 0xea
 80012ba:	d03d      	beq.n	8001338 <??ZbZclAppendInteger_3>
 80012bc:	28f0      	cmp	r0, #240	@ 0xf0
 80012be:	d00f      	beq.n	80012e0 <??ZbZclAppendInteger_7>
 80012c0:	e064      	b.n	800138c <??ZbZclAppendInteger_9>

080012c2 <??ZbZclAppendInteger_8>:
 80012c2:	2900      	cmp	r1, #0
 80012c4:	d102      	bne.n	80012cc <??ZbZclAppendInteger_10>
 80012c6:	f05f 30ff 	movs.w	r0, #4294967295
 80012ca:	e061      	b.n	8001390 <??ZbZclAppendInteger_11>

080012cc <??ZbZclAppendInteger_10>:
 80012cc:	2d00      	cmp	r5, #0
 80012ce:	d101      	bne.n	80012d4 <??ZbZclAppendInteger_12>
 80012d0:	2c00      	cmp	r4, #0
 80012d2:	d001      	beq.n	80012d8 <??ZbZclAppendInteger_13>

080012d4 <??ZbZclAppendInteger_12>:
 80012d4:	2001      	movs	r0, #1
 80012d6:	e000      	b.n	80012da <??ZbZclAppendInteger_14>

080012d8 <??ZbZclAppendInteger_13>:
 80012d8:	2000      	movs	r0, #0

080012da <??ZbZclAppendInteger_14>:
 80012da:	7018      	strb	r0, [r3, #0]
 80012dc:	2001      	movs	r0, #1
 80012de:	e057      	b.n	8001390 <??ZbZclAppendInteger_11>

080012e0 <??ZbZclAppendInteger_7>:
 80012e0:	428f      	cmp	r7, r1
 80012e2:	d302      	bcc.n	80012ea <??ZbZclAppendInteger_15>
 80012e4:	f05f 30ff 	movs.w	r0, #4294967295
 80012e8:	e052      	b.n	8001390 <??ZbZclAppendInteger_11>

080012ea <??ZbZclAppendInteger_15>:
 80012ea:	55dc      	strb	r4, [r3, r7]
 80012ec:	1c7f      	adds	r7, r7, #1
 80012ee:	0a24      	lsrs	r4, r4, #8
 80012f0:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80012f4:	0a2d      	lsrs	r5, r5, #8

080012f6 <??ZbZclAppendInteger_6>:
 80012f6:	428f      	cmp	r7, r1
 80012f8:	d302      	bcc.n	8001300 <??ZbZclAppendInteger_16>
 80012fa:	f05f 30ff 	movs.w	r0, #4294967295
 80012fe:	e047      	b.n	8001390 <??ZbZclAppendInteger_11>

08001300 <??ZbZclAppendInteger_16>:
 8001300:	55dc      	strb	r4, [r3, r7]
 8001302:	1c7f      	adds	r7, r7, #1
 8001304:	0a24      	lsrs	r4, r4, #8
 8001306:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800130a:	0a2d      	lsrs	r5, r5, #8

0800130c <??ZbZclAppendInteger_5>:
 800130c:	428f      	cmp	r7, r1
 800130e:	d302      	bcc.n	8001316 <??ZbZclAppendInteger_17>
 8001310:	f05f 30ff 	movs.w	r0, #4294967295
 8001314:	e03c      	b.n	8001390 <??ZbZclAppendInteger_11>

08001316 <??ZbZclAppendInteger_17>:
 8001316:	55dc      	strb	r4, [r3, r7]
 8001318:	1c7f      	adds	r7, r7, #1
 800131a:	0a24      	lsrs	r4, r4, #8
 800131c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001320:	0a2d      	lsrs	r5, r5, #8

08001322 <??ZbZclAppendInteger_4>:
 8001322:	428f      	cmp	r7, r1
 8001324:	d302      	bcc.n	800132c <??ZbZclAppendInteger_18>
 8001326:	f05f 30ff 	movs.w	r0, #4294967295
 800132a:	e031      	b.n	8001390 <??ZbZclAppendInteger_11>

0800132c <??ZbZclAppendInteger_18>:
 800132c:	55dc      	strb	r4, [r3, r7]
 800132e:	1c7f      	adds	r7, r7, #1
 8001330:	0a24      	lsrs	r4, r4, #8
 8001332:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001336:	0a2d      	lsrs	r5, r5, #8

08001338 <??ZbZclAppendInteger_3>:
 8001338:	428f      	cmp	r7, r1
 800133a:	d302      	bcc.n	8001342 <??ZbZclAppendInteger_19>
 800133c:	f05f 30ff 	movs.w	r0, #4294967295
 8001340:	e026      	b.n	8001390 <??ZbZclAppendInteger_11>

08001342 <??ZbZclAppendInteger_19>:
 8001342:	55dc      	strb	r4, [r3, r7]
 8001344:	1c7f      	adds	r7, r7, #1
 8001346:	0a24      	lsrs	r4, r4, #8
 8001348:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800134c:	0a2d      	lsrs	r5, r5, #8

0800134e <??ZbZclAppendInteger_2>:
 800134e:	428f      	cmp	r7, r1
 8001350:	d302      	bcc.n	8001358 <??ZbZclAppendInteger_20>
 8001352:	f05f 30ff 	movs.w	r0, #4294967295
 8001356:	e01b      	b.n	8001390 <??ZbZclAppendInteger_11>

08001358 <??ZbZclAppendInteger_20>:
 8001358:	55dc      	strb	r4, [r3, r7]
 800135a:	1c7f      	adds	r7, r7, #1
 800135c:	0a24      	lsrs	r4, r4, #8
 800135e:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001362:	0a2d      	lsrs	r5, r5, #8

08001364 <??ZbZclAppendInteger_1>:
 8001364:	428f      	cmp	r7, r1
 8001366:	d302      	bcc.n	800136e <??ZbZclAppendInteger_21>
 8001368:	f05f 30ff 	movs.w	r0, #4294967295
 800136c:	e010      	b.n	8001390 <??ZbZclAppendInteger_11>

0800136e <??ZbZclAppendInteger_21>:
 800136e:	55dc      	strb	r4, [r3, r7]
 8001370:	1c7f      	adds	r7, r7, #1
 8001372:	0a24      	lsrs	r4, r4, #8
 8001374:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8001378:	0a2d      	lsrs	r5, r5, #8

0800137a <??ZbZclAppendInteger_0>:
 800137a:	428f      	cmp	r7, r1
 800137c:	d302      	bcc.n	8001384 <??ZbZclAppendInteger_22>
 800137e:	f05f 30ff 	movs.w	r0, #4294967295
 8001382:	e005      	b.n	8001390 <??ZbZclAppendInteger_11>

08001384 <??ZbZclAppendInteger_22>:
 8001384:	55dc      	strb	r4, [r3, r7]
 8001386:	1c7f      	adds	r7, r7, #1
 8001388:	0038      	movs	r0, r7
 800138a:	e001      	b.n	8001390 <??ZbZclAppendInteger_11>

0800138c <??ZbZclAppendInteger_9>:
 800138c:	f05f 30ff 	movs.w	r0, #4294967295

08001390 <??ZbZclAppendInteger_11>:
 8001390:	bcf0      	pop	{r4, r5, r6, r7}
 8001392:	4770      	bx	lr

08001394 <ZbZclParseInteger>:
 8001394:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001398:	4683      	mov	fp, r0
 800139a:	000e      	movs	r6, r1
 800139c:	4692      	mov	sl, r2
 800139e:	2700      	movs	r7, #0
 80013a0:	2400      	movs	r4, #0
 80013a2:	2500      	movs	r5, #0
 80013a4:	f05f 0800 	movs.w	r8, #0
 80013a8:	f05f 0900 	movs.w	r9, #0
 80013ac:	4658      	mov	r0, fp
 80013ae:	b2c0      	uxtb	r0, r0
 80013b0:	f000 f91e 	bl	80015f0 <ZbZclAttrIsInteger>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d105      	bne.n	80013c4 <??ZbZclParseInteger_0>
 80013b8:	208d      	movs	r0, #141	@ 0x8d
 80013ba:	f88a 0000 	strb.w	r0, [sl]
 80013be:	2000      	movs	r0, #0
 80013c0:	2100      	movs	r1, #0
 80013c2:	e113      	b.n	80015ec <??ZbZclParseInteger_1>

080013c4 <??ZbZclParseInteger_0>:
 80013c4:	2000      	movs	r0, #0
 80013c6:	f88a 0000 	strb.w	r0, [sl]
 80013ca:	4658      	mov	r0, fp
 80013cc:	b2c0      	uxtb	r0, r0
 80013ce:	2808      	cmp	r0, #8
 80013d0:	f000 8097 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013d4:	2809      	cmp	r0, #9
 80013d6:	f000 808a 	beq.w	80014ee <??ZbZclParseInteger_3>
 80013da:	280a      	cmp	r0, #10
 80013dc:	d07d      	beq.n	80014da <??ZbZclParseInteger_4>
 80013de:	280b      	cmp	r0, #11
 80013e0:	d071      	beq.n	80014c6 <??ZbZclParseInteger_5>
 80013e2:	280c      	cmp	r0, #12
 80013e4:	d065      	beq.n	80014b2 <??ZbZclParseInteger_6>
 80013e6:	280d      	cmp	r0, #13
 80013e8:	d059      	beq.n	800149e <??ZbZclParseInteger_7>
 80013ea:	280e      	cmp	r0, #14
 80013ec:	d04d      	beq.n	800148a <??ZbZclParseInteger_8>
 80013ee:	280f      	cmp	r0, #15
 80013f0:	d046      	beq.n	8001480 <??ZbZclParseInteger_9>
 80013f2:	2810      	cmp	r0, #16
 80013f4:	f000 8085 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013f8:	2818      	cmp	r0, #24
 80013fa:	f000 8082 	beq.w	8001502 <??ZbZclParseInteger_2>
 80013fe:	2819      	cmp	r0, #25
 8001400:	d075      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001402:	281a      	cmp	r0, #26
 8001404:	d069      	beq.n	80014da <??ZbZclParseInteger_4>
 8001406:	281b      	cmp	r0, #27
 8001408:	d05d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800140a:	281c      	cmp	r0, #28
 800140c:	d051      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800140e:	281d      	cmp	r0, #29
 8001410:	d045      	beq.n	800149e <??ZbZclParseInteger_7>
 8001412:	281e      	cmp	r0, #30
 8001414:	d039      	beq.n	800148a <??ZbZclParseInteger_8>
 8001416:	281f      	cmp	r0, #31
 8001418:	d032      	beq.n	8001480 <??ZbZclParseInteger_9>
 800141a:	2820      	cmp	r0, #32
 800141c:	d071      	beq.n	8001502 <??ZbZclParseInteger_2>
 800141e:	2821      	cmp	r0, #33	@ 0x21
 8001420:	d065      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001422:	2822      	cmp	r0, #34	@ 0x22
 8001424:	d059      	beq.n	80014da <??ZbZclParseInteger_4>
 8001426:	2823      	cmp	r0, #35	@ 0x23
 8001428:	d04d      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800142a:	2824      	cmp	r0, #36	@ 0x24
 800142c:	d041      	beq.n	80014b2 <??ZbZclParseInteger_6>
 800142e:	2825      	cmp	r0, #37	@ 0x25
 8001430:	d035      	beq.n	800149e <??ZbZclParseInteger_7>
 8001432:	2826      	cmp	r0, #38	@ 0x26
 8001434:	d029      	beq.n	800148a <??ZbZclParseInteger_8>
 8001436:	2827      	cmp	r0, #39	@ 0x27
 8001438:	d022      	beq.n	8001480 <??ZbZclParseInteger_9>
 800143a:	2828      	cmp	r0, #40	@ 0x28
 800143c:	f000 80ac 	beq.w	8001598 <??ZbZclParseInteger_10>
 8001440:	2829      	cmp	r0, #41	@ 0x29
 8001442:	f000 809f 	beq.w	8001584 <??ZbZclParseInteger_11>
 8001446:	282a      	cmp	r0, #42	@ 0x2a
 8001448:	f000 8092 	beq.w	8001570 <??ZbZclParseInteger_12>
 800144c:	282b      	cmp	r0, #43	@ 0x2b
 800144e:	f000 8085 	beq.w	800155c <??ZbZclParseInteger_13>
 8001452:	282c      	cmp	r0, #44	@ 0x2c
 8001454:	d078      	beq.n	8001548 <??ZbZclParseInteger_14>
 8001456:	282d      	cmp	r0, #45	@ 0x2d
 8001458:	d06c      	beq.n	8001534 <??ZbZclParseInteger_15>
 800145a:	282e      	cmp	r0, #46	@ 0x2e
 800145c:	d060      	beq.n	8001520 <??ZbZclParseInteger_16>
 800145e:	282f      	cmp	r0, #47	@ 0x2f
 8001460:	d059      	beq.n	8001516 <??ZbZclParseInteger_17>
 8001462:	2830      	cmp	r0, #48	@ 0x30
 8001464:	d04d      	beq.n	8001502 <??ZbZclParseInteger_2>
 8001466:	2831      	cmp	r0, #49	@ 0x31
 8001468:	d041      	beq.n	80014ee <??ZbZclParseInteger_3>
 800146a:	28e2      	cmp	r0, #226	@ 0xe2
 800146c:	d02b      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800146e:	28e8      	cmp	r0, #232	@ 0xe8
 8001470:	d03d      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001472:	28e9      	cmp	r0, #233	@ 0xe9
 8001474:	d03b      	beq.n	80014ee <??ZbZclParseInteger_3>
 8001476:	28ea      	cmp	r0, #234	@ 0xea
 8001478:	d025      	beq.n	80014c6 <??ZbZclParseInteger_5>
 800147a:	28f0      	cmp	r0, #240	@ 0xf0
 800147c:	f040 80b1 	bne.w	80015e2 <??ZbZclParseInteger_18>

08001480 <??ZbZclParseInteger_9>:
 8001480:	5df0      	ldrb	r0, [r6, r7]
 8001482:	2100      	movs	r1, #0
 8001484:	4304      	orrs	r4, r0
 8001486:	430d      	orrs	r5, r1
 8001488:	1c7f      	adds	r7, r7, #1

0800148a <??ZbZclParseInteger_8>:
 800148a:	5df0      	ldrb	r0, [r6, r7]
 800148c:	2100      	movs	r1, #0
 800148e:	003a      	movs	r2, r7
 8001490:	b2d2      	uxtb	r2, r2
 8001492:	00d2      	lsls	r2, r2, #3
 8001494:	f004 fc9c 	bl	8005dd0 <__aeabi_llsl>
 8001498:	4304      	orrs	r4, r0
 800149a:	430d      	orrs	r5, r1
 800149c:	1c7f      	adds	r7, r7, #1

0800149e <??ZbZclParseInteger_7>:
 800149e:	5df0      	ldrb	r0, [r6, r7]
 80014a0:	2100      	movs	r1, #0
 80014a2:	003a      	movs	r2, r7
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	00d2      	lsls	r2, r2, #3
 80014a8:	f004 fc92 	bl	8005dd0 <__aeabi_llsl>
 80014ac:	4304      	orrs	r4, r0
 80014ae:	430d      	orrs	r5, r1
 80014b0:	1c7f      	adds	r7, r7, #1

080014b2 <??ZbZclParseInteger_6>:
 80014b2:	5df0      	ldrb	r0, [r6, r7]
 80014b4:	2100      	movs	r1, #0
 80014b6:	003a      	movs	r2, r7
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	00d2      	lsls	r2, r2, #3
 80014bc:	f004 fc88 	bl	8005dd0 <__aeabi_llsl>
 80014c0:	4304      	orrs	r4, r0
 80014c2:	430d      	orrs	r5, r1
 80014c4:	1c7f      	adds	r7, r7, #1

080014c6 <??ZbZclParseInteger_5>:
 80014c6:	5df0      	ldrb	r0, [r6, r7]
 80014c8:	2100      	movs	r1, #0
 80014ca:	003a      	movs	r2, r7
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	00d2      	lsls	r2, r2, #3
 80014d0:	f004 fc7e 	bl	8005dd0 <__aeabi_llsl>
 80014d4:	4304      	orrs	r4, r0
 80014d6:	430d      	orrs	r5, r1
 80014d8:	1c7f      	adds	r7, r7, #1

080014da <??ZbZclParseInteger_4>:
 80014da:	5df0      	ldrb	r0, [r6, r7]
 80014dc:	2100      	movs	r1, #0
 80014de:	003a      	movs	r2, r7
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	00d2      	lsls	r2, r2, #3
 80014e4:	f004 fc74 	bl	8005dd0 <__aeabi_llsl>
 80014e8:	4304      	orrs	r4, r0
 80014ea:	430d      	orrs	r5, r1
 80014ec:	1c7f      	adds	r7, r7, #1

080014ee <??ZbZclParseInteger_3>:
 80014ee:	5df0      	ldrb	r0, [r6, r7]
 80014f0:	2100      	movs	r1, #0
 80014f2:	003a      	movs	r2, r7
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	00d2      	lsls	r2, r2, #3
 80014f8:	f004 fc6a 	bl	8005dd0 <__aeabi_llsl>
 80014fc:	4304      	orrs	r4, r0
 80014fe:	430d      	orrs	r5, r1
 8001500:	1c7f      	adds	r7, r7, #1

08001502 <??ZbZclParseInteger_2>:
 8001502:	5df0      	ldrb	r0, [r6, r7]
 8001504:	2100      	movs	r1, #0
 8001506:	003a      	movs	r2, r7
 8001508:	b2d2      	uxtb	r2, r2
 800150a:	00d2      	lsls	r2, r2, #3
 800150c:	f004 fc60 	bl	8005dd0 <__aeabi_llsl>
 8001510:	4320      	orrs	r0, r4
 8001512:	4329      	orrs	r1, r5
 8001514:	e06a      	b.n	80015ec <??ZbZclParseInteger_1>

08001516 <??ZbZclParseInteger_17>:
 8001516:	5df0      	ldrb	r0, [r6, r7]
 8001518:	2100      	movs	r1, #0
 800151a:	4304      	orrs	r4, r0
 800151c:	430d      	orrs	r5, r1
 800151e:	1c7f      	adds	r7, r7, #1

08001520 <??ZbZclParseInteger_16>:
 8001520:	5df0      	ldrb	r0, [r6, r7]
 8001522:	2100      	movs	r1, #0
 8001524:	003a      	movs	r2, r7
 8001526:	b2d2      	uxtb	r2, r2
 8001528:	00d2      	lsls	r2, r2, #3
 800152a:	f004 fc51 	bl	8005dd0 <__aeabi_llsl>
 800152e:	4304      	orrs	r4, r0
 8001530:	430d      	orrs	r5, r1
 8001532:	1c7f      	adds	r7, r7, #1

08001534 <??ZbZclParseInteger_15>:
 8001534:	5df0      	ldrb	r0, [r6, r7]
 8001536:	2100      	movs	r1, #0
 8001538:	003a      	movs	r2, r7
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	00d2      	lsls	r2, r2, #3
 800153e:	f004 fc47 	bl	8005dd0 <__aeabi_llsl>
 8001542:	4304      	orrs	r4, r0
 8001544:	430d      	orrs	r5, r1
 8001546:	1c7f      	adds	r7, r7, #1

08001548 <??ZbZclParseInteger_14>:
 8001548:	5df0      	ldrb	r0, [r6, r7]
 800154a:	2100      	movs	r1, #0
 800154c:	003a      	movs	r2, r7
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	00d2      	lsls	r2, r2, #3
 8001552:	f004 fc3d 	bl	8005dd0 <__aeabi_llsl>
 8001556:	4304      	orrs	r4, r0
 8001558:	430d      	orrs	r5, r1
 800155a:	1c7f      	adds	r7, r7, #1

0800155c <??ZbZclParseInteger_13>:
 800155c:	5df0      	ldrb	r0, [r6, r7]
 800155e:	2100      	movs	r1, #0
 8001560:	003a      	movs	r2, r7
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	00d2      	lsls	r2, r2, #3
 8001566:	f004 fc33 	bl	8005dd0 <__aeabi_llsl>
 800156a:	4304      	orrs	r4, r0
 800156c:	430d      	orrs	r5, r1
 800156e:	1c7f      	adds	r7, r7, #1

08001570 <??ZbZclParseInteger_12>:
 8001570:	5df0      	ldrb	r0, [r6, r7]
 8001572:	2100      	movs	r1, #0
 8001574:	003a      	movs	r2, r7
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	00d2      	lsls	r2, r2, #3
 800157a:	f004 fc29 	bl	8005dd0 <__aeabi_llsl>
 800157e:	4304      	orrs	r4, r0
 8001580:	430d      	orrs	r5, r1
 8001582:	1c7f      	adds	r7, r7, #1

08001584 <??ZbZclParseInteger_11>:
 8001584:	5df0      	ldrb	r0, [r6, r7]
 8001586:	2100      	movs	r1, #0
 8001588:	003a      	movs	r2, r7
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	00d2      	lsls	r2, r2, #3
 800158e:	f004 fc1f 	bl	8005dd0 <__aeabi_llsl>
 8001592:	4304      	orrs	r4, r0
 8001594:	430d      	orrs	r5, r1
 8001596:	1c7f      	adds	r7, r7, #1

08001598 <??ZbZclParseInteger_10>:
 8001598:	5df0      	ldrb	r0, [r6, r7]
 800159a:	2100      	movs	r1, #0
 800159c:	003a      	movs	r2, r7
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	00d2      	lsls	r2, r2, #3
 80015a2:	f004 fc15 	bl	8005dd0 <__aeabi_llsl>
 80015a6:	4320      	orrs	r0, r4
 80015a8:	4329      	orrs	r1, r5
 80015aa:	003a      	movs	r2, r7
 80015ac:	1c57      	adds	r7, r2, #1
 80015ae:	5cb2      	ldrb	r2, [r6, r2]
 80015b0:	0612      	lsls	r2, r2, #24
 80015b2:	d515      	bpl.n	80015e0 <??ZbZclParseInteger_19>
 80015b4:	2f08      	cmp	r7, #8
 80015b6:	d213      	bcs.n	80015e0 <??ZbZclParseInteger_19>
 80015b8:	0004      	movs	r4, r0
 80015ba:	000d      	movs	r5, r1
 80015bc:	2001      	movs	r0, #1
 80015be:	2100      	movs	r1, #0
 80015c0:	f1d7 0208 	rsbs	r2, r7, #8
 80015c4:	b2d2      	uxtb	r2, r2
 80015c6:	00d2      	lsls	r2, r2, #3
 80015c8:	f004 fc02 	bl	8005dd0 <__aeabi_llsl>
 80015cc:	1e40      	subs	r0, r0, #1
 80015ce:	f171 0100 	sbcs.w	r1, r1, #0
 80015d2:	003a      	movs	r2, r7
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	00d2      	lsls	r2, r2, #3
 80015d8:	f004 fbfa 	bl	8005dd0 <__aeabi_llsl>
 80015dc:	4320      	orrs	r0, r4
 80015de:	4329      	orrs	r1, r5

080015e0 <??ZbZclParseInteger_19>:
 80015e0:	e004      	b.n	80015ec <??ZbZclParseInteger_1>

080015e2 <??ZbZclParseInteger_18>:
 80015e2:	208d      	movs	r0, #141	@ 0x8d
 80015e4:	f88a 0000 	strb.w	r0, [sl]
 80015e8:	2000      	movs	r0, #0
 80015ea:	2100      	movs	r1, #0

080015ec <??ZbZclParseInteger_1>:
 80015ec:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015f0 <ZbZclAttrIsInteger>:
 80015f0:	0001      	movs	r1, r0
 80015f2:	2200      	movs	r2, #0
 80015f4:	0008      	movs	r0, r1
 80015f6:	b2c0      	uxtb	r0, r0
 80015f8:	3808      	subs	r0, #8
 80015fa:	2808      	cmp	r0, #8
 80015fc:	d909      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 80015fe:	3810      	subs	r0, #16
 8001600:	2819      	cmp	r0, #25
 8001602:	d906      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 8001604:	38ca      	subs	r0, #202	@ 0xca
 8001606:	d004      	beq.n	8001612 <??ZbZclAttrIsInteger_0>
 8001608:	1f80      	subs	r0, r0, #6
 800160a:	2802      	cmp	r0, #2
 800160c:	d901      	bls.n	8001612 <??ZbZclAttrIsInteger_0>
 800160e:	3808      	subs	r0, #8
 8001610:	d101      	bne.n	8001616 <??ZbZclAttrIsInteger_1>

08001612 <??ZbZclAttrIsInteger_0>:
 8001612:	2001      	movs	r0, #1
 8001614:	e000      	b.n	8001618 <??ZbZclAttrIsInteger_2>

08001616 <??ZbZclAttrIsInteger_1>:
 8001616:	2000      	movs	r0, #0

08001618 <??ZbZclAttrIsInteger_2>:
 8001618:	b2c0      	uxtb	r0, r0
 800161a:	4770      	bx	lr

0800161c <ZbZclAttrIntegerRangeCheck>:
 800161c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8001620:	0004      	movs	r4, r0
 8001622:	000d      	movs	r5, r1
 8001624:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8001628:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800162c:	0010      	movs	r0, r2
 800162e:	b2c0      	uxtb	r0, r0
 8001630:	2810      	cmp	r0, #16
 8001632:	d045      	beq.n	80016c0 <??ZbZclAttrIntegerRangeCheck_0>
 8001634:	2818      	cmp	r0, #24
 8001636:	d051      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001638:	2819      	cmp	r0, #25
 800163a:	d060      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 800163c:	281a      	cmp	r0, #26
 800163e:	d072      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 8001640:	281b      	cmp	r0, #27
 8001642:	f000 8086 	beq.w	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 8001646:	281c      	cmp	r0, #28
 8001648:	f000 8098 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 800164c:	281d      	cmp	r0, #29
 800164e:	f000 80a7 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 8001652:	281e      	cmp	r0, #30
 8001654:	f000 80b9 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001658:	281f      	cmp	r0, #31
 800165a:	f000 80cd 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 800165e:	2820      	cmp	r0, #32
 8001660:	d03c      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 8001662:	2821      	cmp	r0, #33	@ 0x21
 8001664:	d04b      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 8001666:	2822      	cmp	r0, #34	@ 0x22
 8001668:	d05d      	beq.n	8001726 <??ZbZclAttrIntegerRangeCheck_3>
 800166a:	2823      	cmp	r0, #35	@ 0x23
 800166c:	d071      	beq.n	8001752 <??ZbZclAttrIntegerRangeCheck_4>
 800166e:	2824      	cmp	r0, #36	@ 0x24
 8001670:	f000 8084 	beq.w	800177c <??ZbZclAttrIntegerRangeCheck_5>
 8001674:	2825      	cmp	r0, #37	@ 0x25
 8001676:	f000 8093 	beq.w	80017a0 <??ZbZclAttrIntegerRangeCheck_6>
 800167a:	2826      	cmp	r0, #38	@ 0x26
 800167c:	f000 80a5 	beq.w	80017ca <??ZbZclAttrIntegerRangeCheck_7>
 8001680:	2827      	cmp	r0, #39	@ 0x27
 8001682:	f000 80b9 	beq.w	80017f8 <??ZbZclAttrIntegerRangeCheck_8>
 8001686:	2828      	cmp	r0, #40	@ 0x28
 8001688:	f000 80c1 	beq.w	800180e <??ZbZclAttrIntegerRangeCheck_9>
 800168c:	2829      	cmp	r0, #41	@ 0x29
 800168e:	f000 80d9 	beq.w	8001844 <??ZbZclAttrIntegerRangeCheck_10>
 8001692:	282a      	cmp	r0, #42	@ 0x2a
 8001694:	f000 80f0 	beq.w	8001878 <??ZbZclAttrIntegerRangeCheck_11>
 8001698:	282b      	cmp	r0, #43	@ 0x2b
 800169a:	f000 8107 	beq.w	80018ac <??ZbZclAttrIntegerRangeCheck_12>
 800169e:	282c      	cmp	r0, #44	@ 0x2c
 80016a0:	f000 8120 	beq.w	80018e4 <??ZbZclAttrIntegerRangeCheck_13>
 80016a4:	282d      	cmp	r0, #45	@ 0x2d
 80016a6:	f000 8136 	beq.w	8001916 <??ZbZclAttrIntegerRangeCheck_14>
 80016aa:	282e      	cmp	r0, #46	@ 0x2e
 80016ac:	f000 814b 	beq.w	8001946 <??ZbZclAttrIntegerRangeCheck_15>
 80016b0:	282f      	cmp	r0, #47	@ 0x2f
 80016b2:	f000 8160 	beq.w	8001976 <??ZbZclAttrIntegerRangeCheck_16>
 80016b6:	2830      	cmp	r0, #48	@ 0x30
 80016b8:	d010      	beq.n	80016dc <??ZbZclAttrIntegerRangeCheck_1>
 80016ba:	2831      	cmp	r0, #49	@ 0x31
 80016bc:	d01f      	beq.n	80016fe <??ZbZclAttrIntegerRangeCheck_2>
 80016be:	e164      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016c0 <??ZbZclAttrIntegerRangeCheck_0>:
 80016c0:	2d00      	cmp	r5, #0
 80016c2:	d103      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c4:	2cff      	cmp	r4, #255	@ 0xff
 80016c6:	d101      	bne.n	80016cc <??ZbZclAttrIntegerRangeCheck_18>
 80016c8:	2001      	movs	r0, #1
 80016ca:	e176      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016cc <??ZbZclAttrIntegerRangeCheck_18>:
 80016cc:	2d00      	cmp	r5, #0
 80016ce:	db04      	blt.n	80016da <??ZbZclAttrIntegerRangeCheck_20>
 80016d0:	dc01      	bgt.n	80016d6 <??ZbZclAttrIntegerRangeCheck_21>
 80016d2:	2c02      	cmp	r4, #2
 80016d4:	d301      	bcc.n	80016da <??ZbZclAttrIntegerRangeCheck_20>

080016d6 <??ZbZclAttrIntegerRangeCheck_21>:
 80016d6:	2000      	movs	r0, #0
 80016d8:	e16f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016da <??ZbZclAttrIntegerRangeCheck_20>:
 80016da:	e156      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016dc <??ZbZclAttrIntegerRangeCheck_1>:
 80016dc:	2d00      	cmp	r5, #0
 80016de:	d103      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e0:	2cff      	cmp	r4, #255	@ 0xff
 80016e2:	d101      	bne.n	80016e8 <??ZbZclAttrIntegerRangeCheck_23>
 80016e4:	2001      	movs	r0, #1
 80016e6:	e168      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016e8 <??ZbZclAttrIntegerRangeCheck_23>:
 80016e8:	2d00      	cmp	r5, #0
 80016ea:	d405      	bmi.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016ec:	2d00      	cmp	r5, #0
 80016ee:	db05      	blt.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>
 80016f0:	dc02      	bgt.n	80016f8 <??ZbZclAttrIntegerRangeCheck_24>
 80016f2:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80016f6:	d301      	bcc.n	80016fc <??ZbZclAttrIntegerRangeCheck_25>

080016f8 <??ZbZclAttrIntegerRangeCheck_24>:
 80016f8:	2000      	movs	r0, #0
 80016fa:	e15e      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080016fc <??ZbZclAttrIntegerRangeCheck_25>:
 80016fc:	e145      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080016fe <??ZbZclAttrIntegerRangeCheck_2>:
 80016fe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001702:	2100      	movs	r1, #0
 8001704:	428d      	cmp	r5, r1
 8001706:	d103      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 8001708:	4284      	cmp	r4, r0
 800170a:	d101      	bne.n	8001710 <??ZbZclAttrIntegerRangeCheck_27>
 800170c:	2001      	movs	r0, #1
 800170e:	e154      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001710 <??ZbZclAttrIntegerRangeCheck_27>:
 8001710:	2d00      	cmp	r5, #0
 8001712:	d405      	bmi.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 8001714:	2d00      	cmp	r5, #0
 8001716:	db05      	blt.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>
 8001718:	dc02      	bgt.n	8001720 <??ZbZclAttrIntegerRangeCheck_28>
 800171a:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800171e:	d301      	bcc.n	8001724 <??ZbZclAttrIntegerRangeCheck_29>

08001720 <??ZbZclAttrIntegerRangeCheck_28>:
 8001720:	2000      	movs	r0, #0
 8001722:	e14a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001724 <??ZbZclAttrIntegerRangeCheck_29>:
 8001724:	e131      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001726 <??ZbZclAttrIntegerRangeCheck_3>:
 8001726:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 800172a:	2100      	movs	r1, #0
 800172c:	428d      	cmp	r5, r1
 800172e:	d103      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001730:	4284      	cmp	r4, r0
 8001732:	d101      	bne.n	8001738 <??ZbZclAttrIntegerRangeCheck_31>
 8001734:	2001      	movs	r0, #1
 8001736:	e140      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001738 <??ZbZclAttrIntegerRangeCheck_31>:
 8001738:	2d00      	cmp	r5, #0
 800173a:	d407      	bmi.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 800173c:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 8001740:	2100      	movs	r1, #0
 8001742:	428d      	cmp	r5, r1
 8001744:	db04      	blt.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>
 8001746:	dc01      	bgt.n	800174c <??ZbZclAttrIntegerRangeCheck_32>
 8001748:	4284      	cmp	r4, r0
 800174a:	d301      	bcc.n	8001750 <??ZbZclAttrIntegerRangeCheck_33>

0800174c <??ZbZclAttrIntegerRangeCheck_32>:
 800174c:	2000      	movs	r0, #0
 800174e:	e134      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001750 <??ZbZclAttrIntegerRangeCheck_33>:
 8001750:	e11b      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001752 <??ZbZclAttrIntegerRangeCheck_4>:
 8001752:	f05f 30ff 	movs.w	r0, #4294967295
 8001756:	2100      	movs	r1, #0
 8001758:	428d      	cmp	r5, r1
 800175a:	d103      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 800175c:	4284      	cmp	r4, r0
 800175e:	d101      	bne.n	8001764 <??ZbZclAttrIntegerRangeCheck_35>
 8001760:	2001      	movs	r0, #1
 8001762:	e12a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001764 <??ZbZclAttrIntegerRangeCheck_35>:
 8001764:	2d00      	cmp	r5, #0
 8001766:	d406      	bmi.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001768:	2000      	movs	r0, #0
 800176a:	2101      	movs	r1, #1
 800176c:	428d      	cmp	r5, r1
 800176e:	db04      	blt.n	800177a <??ZbZclAttrIntegerRangeCheck_37>
 8001770:	dc01      	bgt.n	8001776 <??ZbZclAttrIntegerRangeCheck_36>
 8001772:	4284      	cmp	r4, r0
 8001774:	d301      	bcc.n	800177a <??ZbZclAttrIntegerRangeCheck_37>

08001776 <??ZbZclAttrIntegerRangeCheck_36>:
 8001776:	2000      	movs	r0, #0
 8001778:	e11f      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800177a <??ZbZclAttrIntegerRangeCheck_37>:
 800177a:	e106      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800177c <??ZbZclAttrIntegerRangeCheck_5>:
 800177c:	2dff      	cmp	r5, #255	@ 0xff
 800177e:	d104      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001780:	f1b4 3fff 	cmp.w	r4, #4294967295
 8001784:	d101      	bne.n	800178a <??ZbZclAttrIntegerRangeCheck_39>
 8001786:	2001      	movs	r0, #1
 8001788:	e117      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800178a <??ZbZclAttrIntegerRangeCheck_39>:
 800178a:	2d00      	cmp	r5, #0
 800178c:	d405      	bmi.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 800178e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001792:	db04      	blt.n	800179e <??ZbZclAttrIntegerRangeCheck_41>
 8001794:	dc01      	bgt.n	800179a <??ZbZclAttrIntegerRangeCheck_40>
 8001796:	2c00      	cmp	r4, #0
 8001798:	d301      	bcc.n	800179e <??ZbZclAttrIntegerRangeCheck_41>

0800179a <??ZbZclAttrIntegerRangeCheck_40>:
 800179a:	2000      	movs	r0, #0
 800179c:	e10d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800179e <??ZbZclAttrIntegerRangeCheck_41>:
 800179e:	e0f4      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017a0 <??ZbZclAttrIntegerRangeCheck_6>:
 80017a0:	f05f 30ff 	movs.w	r0, #4294967295
 80017a4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80017a8:	428d      	cmp	r5, r1
 80017aa:	d103      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017ac:	4284      	cmp	r4, r0
 80017ae:	d101      	bne.n	80017b4 <??ZbZclAttrIntegerRangeCheck_43>
 80017b0:	2001      	movs	r0, #1
 80017b2:	e102      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017b4 <??ZbZclAttrIntegerRangeCheck_43>:
 80017b4:	2d00      	cmp	r5, #0
 80017b6:	d405      	bmi.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017b8:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 80017bc:	db04      	blt.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>
 80017be:	dc01      	bgt.n	80017c4 <??ZbZclAttrIntegerRangeCheck_44>
 80017c0:	2c00      	cmp	r4, #0
 80017c2:	d301      	bcc.n	80017c8 <??ZbZclAttrIntegerRangeCheck_45>

080017c4 <??ZbZclAttrIntegerRangeCheck_44>:
 80017c4:	2000      	movs	r0, #0
 80017c6:	e0f8      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017c8 <??ZbZclAttrIntegerRangeCheck_45>:
 80017c8:	e0df      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017ca <??ZbZclAttrIntegerRangeCheck_7>:
 80017ca:	f05f 30ff 	movs.w	r0, #4294967295
 80017ce:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 80017d2:	428d      	cmp	r5, r1
 80017d4:	d103      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017d6:	4284      	cmp	r4, r0
 80017d8:	d101      	bne.n	80017de <??ZbZclAttrIntegerRangeCheck_47>
 80017da:	2001      	movs	r0, #1
 80017dc:	e0ed      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017de <??ZbZclAttrIntegerRangeCheck_47>:
 80017de:	2d00      	cmp	r5, #0
 80017e0:	d407      	bmi.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017e2:	2000      	movs	r0, #0
 80017e4:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 80017e8:	428d      	cmp	r5, r1
 80017ea:	db04      	blt.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>
 80017ec:	dc01      	bgt.n	80017f2 <??ZbZclAttrIntegerRangeCheck_48>
 80017ee:	4284      	cmp	r4, r0
 80017f0:	d301      	bcc.n	80017f6 <??ZbZclAttrIntegerRangeCheck_49>

080017f2 <??ZbZclAttrIntegerRangeCheck_48>:
 80017f2:	2000      	movs	r0, #0
 80017f4:	e0e1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080017f6 <??ZbZclAttrIntegerRangeCheck_49>:
 80017f6:	e0c8      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080017f8 <??ZbZclAttrIntegerRangeCheck_8>:
 80017f8:	f05f 30ff 	movs.w	r0, #4294967295
 80017fc:	f05f 31ff 	movs.w	r1, #4294967295
 8001800:	428d      	cmp	r5, r1
 8001802:	d103      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001804:	4284      	cmp	r4, r0
 8001806:	d101      	bne.n	800180c <??ZbZclAttrIntegerRangeCheck_51>
 8001808:	2001      	movs	r0, #1
 800180a:	e0d6      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800180c <??ZbZclAttrIntegerRangeCheck_51>:
 800180c:	e0bd      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800180e <??ZbZclAttrIntegerRangeCheck_9>:
 800180e:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001812:	f05f 31ff 	movs.w	r1, #4294967295
 8001816:	428d      	cmp	r5, r1
 8001818:	d103      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181a:	4284      	cmp	r4, r0
 800181c:	d101      	bne.n	8001822 <??ZbZclAttrIntegerRangeCheck_52>
 800181e:	2001      	movs	r0, #1
 8001820:	e0cb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001822 <??ZbZclAttrIntegerRangeCheck_52>:
 8001822:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8001826:	f05f 31ff 	movs.w	r1, #4294967295
 800182a:	428d      	cmp	r5, r1
 800182c:	db07      	blt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800182e:	dc01      	bgt.n	8001834 <??ZbZclAttrIntegerRangeCheck_54>
 8001830:	4284      	cmp	r4, r0
 8001832:	d304      	bcc.n	800183e <??ZbZclAttrIntegerRangeCheck_53>

08001834 <??ZbZclAttrIntegerRangeCheck_54>:
 8001834:	2d00      	cmp	r5, #0
 8001836:	db04      	blt.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>
 8001838:	dc01      	bgt.n	800183e <??ZbZclAttrIntegerRangeCheck_53>
 800183a:	2c80      	cmp	r4, #128	@ 0x80
 800183c:	d301      	bcc.n	8001842 <??ZbZclAttrIntegerRangeCheck_55>

0800183e <??ZbZclAttrIntegerRangeCheck_53>:
 800183e:	2000      	movs	r0, #0
 8001840:	e0bb      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001842 <??ZbZclAttrIntegerRangeCheck_55>:
 8001842:	e0a2      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001844 <??ZbZclAttrIntegerRangeCheck_10>:
 8001844:	485e      	ldr	r0, [pc, #376]	@ (80019c0 <??DataTable1>)
 8001846:	f05f 31ff 	movs.w	r1, #4294967295
 800184a:	428d      	cmp	r5, r1
 800184c:	d103      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 800184e:	4284      	cmp	r4, r0
 8001850:	d101      	bne.n	8001856 <??ZbZclAttrIntegerRangeCheck_57>
 8001852:	2001      	movs	r0, #1
 8001854:	e0b1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001856 <??ZbZclAttrIntegerRangeCheck_57>:
 8001856:	485a      	ldr	r0, [pc, #360]	@ (80019c0 <??DataTable1>)
 8001858:	f05f 31ff 	movs.w	r1, #4294967295
 800185c:	428d      	cmp	r5, r1
 800185e:	db08      	blt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 8001860:	dc01      	bgt.n	8001866 <??ZbZclAttrIntegerRangeCheck_59>
 8001862:	4284      	cmp	r4, r0
 8001864:	d305      	bcc.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>

08001866 <??ZbZclAttrIntegerRangeCheck_59>:
 8001866:	2d00      	cmp	r5, #0
 8001868:	db05      	blt.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>
 800186a:	dc02      	bgt.n	8001872 <??ZbZclAttrIntegerRangeCheck_58>
 800186c:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8001870:	d301      	bcc.n	8001876 <??ZbZclAttrIntegerRangeCheck_60>

08001872 <??ZbZclAttrIntegerRangeCheck_58>:
 8001872:	2000      	movs	r0, #0
 8001874:	e0a1      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001876 <??ZbZclAttrIntegerRangeCheck_60>:
 8001876:	e088      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001878 <??ZbZclAttrIntegerRangeCheck_11>:
 8001878:	4852      	ldr	r0, [pc, #328]	@ (80019c4 <??DataTable1_1>)
 800187a:	f05f 31ff 	movs.w	r1, #4294967295
 800187e:	428d      	cmp	r5, r1
 8001880:	d103      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001882:	4284      	cmp	r4, r0
 8001884:	d101      	bne.n	800188a <??ZbZclAttrIntegerRangeCheck_62>
 8001886:	2001      	movs	r0, #1
 8001888:	e097      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800188a <??ZbZclAttrIntegerRangeCheck_62>:
 800188a:	484e      	ldr	r0, [pc, #312]	@ (80019c4 <??DataTable1_1>)
 800188c:	f05f 31ff 	movs.w	r1, #4294967295
 8001890:	428d      	cmp	r5, r1
 8001892:	db08      	blt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 8001894:	dc01      	bgt.n	800189a <??ZbZclAttrIntegerRangeCheck_64>
 8001896:	4284      	cmp	r4, r0
 8001898:	d305      	bcc.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>

0800189a <??ZbZclAttrIntegerRangeCheck_64>:
 800189a:	2d00      	cmp	r5, #0
 800189c:	db05      	blt.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>
 800189e:	dc02      	bgt.n	80018a6 <??ZbZclAttrIntegerRangeCheck_63>
 80018a0:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80018a4:	d301      	bcc.n	80018aa <??ZbZclAttrIntegerRangeCheck_65>

080018a6 <??ZbZclAttrIntegerRangeCheck_63>:
 80018a6:	2000      	movs	r0, #0
 80018a8:	e087      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018aa <??ZbZclAttrIntegerRangeCheck_65>:
 80018aa:	e06e      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018ac <??ZbZclAttrIntegerRangeCheck_12>:
 80018ac:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018b0:	f05f 31ff 	movs.w	r1, #4294967295
 80018b4:	428d      	cmp	r5, r1
 80018b6:	d103      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018b8:	4284      	cmp	r4, r0
 80018ba:	d101      	bne.n	80018c0 <??ZbZclAttrIntegerRangeCheck_67>
 80018bc:	2001      	movs	r0, #1
 80018be:	e07c      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018c0 <??ZbZclAttrIntegerRangeCheck_67>:
 80018c0:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 80018c4:	f05f 31ff 	movs.w	r1, #4294967295
 80018c8:	428d      	cmp	r5, r1
 80018ca:	db08      	blt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018cc:	dc01      	bgt.n	80018d2 <??ZbZclAttrIntegerRangeCheck_69>
 80018ce:	4284      	cmp	r4, r0
 80018d0:	d305      	bcc.n	80018de <??ZbZclAttrIntegerRangeCheck_68>

080018d2 <??ZbZclAttrIntegerRangeCheck_69>:
 80018d2:	2d00      	cmp	r5, #0
 80018d4:	db05      	blt.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>
 80018d6:	dc02      	bgt.n	80018de <??ZbZclAttrIntegerRangeCheck_68>
 80018d8:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 80018dc:	d301      	bcc.n	80018e2 <??ZbZclAttrIntegerRangeCheck_70>

080018de <??ZbZclAttrIntegerRangeCheck_68>:
 80018de:	2000      	movs	r0, #0
 80018e0:	e06b      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018e2 <??ZbZclAttrIntegerRangeCheck_70>:
 80018e2:	e052      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

080018e4 <??ZbZclAttrIntegerRangeCheck_13>:
 80018e4:	2000      	movs	r0, #0
 80018e6:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018ea:	428d      	cmp	r5, r1
 80018ec:	d103      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018ee:	4284      	cmp	r4, r0
 80018f0:	d101      	bne.n	80018f6 <??ZbZclAttrIntegerRangeCheck_72>
 80018f2:	2001      	movs	r0, #1
 80018f4:	e061      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

080018f6 <??ZbZclAttrIntegerRangeCheck_72>:
 80018f6:	2000      	movs	r0, #0
 80018f8:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 80018fc:	428d      	cmp	r5, r1
 80018fe:	db07      	blt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 8001900:	dc01      	bgt.n	8001906 <??ZbZclAttrIntegerRangeCheck_74>
 8001902:	4284      	cmp	r4, r0
 8001904:	d304      	bcc.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>

08001906 <??ZbZclAttrIntegerRangeCheck_74>:
 8001906:	2d80      	cmp	r5, #128	@ 0x80
 8001908:	db04      	blt.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>
 800190a:	dc01      	bgt.n	8001910 <??ZbZclAttrIntegerRangeCheck_73>
 800190c:	2c00      	cmp	r4, #0
 800190e:	d301      	bcc.n	8001914 <??ZbZclAttrIntegerRangeCheck_75>

08001910 <??ZbZclAttrIntegerRangeCheck_73>:
 8001910:	2000      	movs	r0, #0
 8001912:	e052      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001914 <??ZbZclAttrIntegerRangeCheck_75>:
 8001914:	e039      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001916 <??ZbZclAttrIntegerRangeCheck_14>:
 8001916:	2000      	movs	r0, #0
 8001918:	4929      	ldr	r1, [pc, #164]	@ (80019c0 <??DataTable1>)
 800191a:	428d      	cmp	r5, r1
 800191c:	d103      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 800191e:	4284      	cmp	r4, r0
 8001920:	d101      	bne.n	8001926 <??ZbZclAttrIntegerRangeCheck_77>
 8001922:	2001      	movs	r0, #1
 8001924:	e049      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001926 <??ZbZclAttrIntegerRangeCheck_77>:
 8001926:	2000      	movs	r0, #0
 8001928:	4925      	ldr	r1, [pc, #148]	@ (80019c0 <??DataTable1>)
 800192a:	428d      	cmp	r5, r1
 800192c:	db08      	blt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800192e:	dc01      	bgt.n	8001934 <??ZbZclAttrIntegerRangeCheck_79>
 8001930:	4284      	cmp	r4, r0
 8001932:	d305      	bcc.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>

08001934 <??ZbZclAttrIntegerRangeCheck_79>:
 8001934:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8001938:	db04      	blt.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>
 800193a:	dc01      	bgt.n	8001940 <??ZbZclAttrIntegerRangeCheck_78>
 800193c:	2c00      	cmp	r4, #0
 800193e:	d301      	bcc.n	8001944 <??ZbZclAttrIntegerRangeCheck_80>

08001940 <??ZbZclAttrIntegerRangeCheck_78>:
 8001940:	2000      	movs	r0, #0
 8001942:	e03a      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001944 <??ZbZclAttrIntegerRangeCheck_80>:
 8001944:	e021      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001946 <??ZbZclAttrIntegerRangeCheck_15>:
 8001946:	2000      	movs	r0, #0
 8001948:	491e      	ldr	r1, [pc, #120]	@ (80019c4 <??DataTable1_1>)
 800194a:	428d      	cmp	r5, r1
 800194c:	d103      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 800194e:	4284      	cmp	r4, r0
 8001950:	d101      	bne.n	8001956 <??ZbZclAttrIntegerRangeCheck_82>
 8001952:	2001      	movs	r0, #1
 8001954:	e031      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001956 <??ZbZclAttrIntegerRangeCheck_82>:
 8001956:	2000      	movs	r0, #0
 8001958:	491a      	ldr	r1, [pc, #104]	@ (80019c4 <??DataTable1_1>)
 800195a:	428d      	cmp	r5, r1
 800195c:	db08      	blt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800195e:	dc01      	bgt.n	8001964 <??ZbZclAttrIntegerRangeCheck_84>
 8001960:	4284      	cmp	r4, r0
 8001962:	d305      	bcc.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>

08001964 <??ZbZclAttrIntegerRangeCheck_84>:
 8001964:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 8001968:	db04      	blt.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>
 800196a:	dc01      	bgt.n	8001970 <??ZbZclAttrIntegerRangeCheck_83>
 800196c:	2c00      	cmp	r4, #0
 800196e:	d301      	bcc.n	8001974 <??ZbZclAttrIntegerRangeCheck_85>

08001970 <??ZbZclAttrIntegerRangeCheck_83>:
 8001970:	2000      	movs	r0, #0
 8001972:	e022      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001974 <??ZbZclAttrIntegerRangeCheck_85>:
 8001974:	e009      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

08001976 <??ZbZclAttrIntegerRangeCheck_16>:
 8001976:	2000      	movs	r0, #0
 8001978:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 800197c:	428d      	cmp	r5, r1
 800197e:	d103      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001980:	4284      	cmp	r4, r0
 8001982:	d101      	bne.n	8001988 <??ZbZclAttrIntegerRangeCheck_87>
 8001984:	2001      	movs	r0, #1
 8001986:	e018      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

08001988 <??ZbZclAttrIntegerRangeCheck_87>:
 8001988:	e7ff      	b.n	800198a <??ZbZclAttrIntegerRangeCheck_17>

0800198a <??ZbZclAttrIntegerRangeCheck_17>:
 800198a:	ea56 0008 	orrs.w	r0, r6, r8
 800198e:	ea57 0109 	orrs.w	r1, r7, r9
 8001992:	2900      	cmp	r1, #0
 8001994:	d103      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 8001996:	2800      	cmp	r0, #0
 8001998:	d101      	bne.n	800199e <??ZbZclAttrIntegerRangeCheck_88>
 800199a:	2001      	movs	r0, #1
 800199c:	e00d      	b.n	80019ba <??ZbZclAttrIntegerRangeCheck_19>

0800199e <??ZbZclAttrIntegerRangeCheck_88>:
 800199e:	42bd      	cmp	r5, r7
 80019a0:	db09      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019a2:	dc01      	bgt.n	80019a8 <??ZbZclAttrIntegerRangeCheck_90>
 80019a4:	42b4      	cmp	r4, r6
 80019a6:	d306      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019a8 <??ZbZclAttrIntegerRangeCheck_90>:
 80019a8:	45a9      	cmp	r9, r5
 80019aa:	db04      	blt.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>
 80019ac:	dc01      	bgt.n	80019b2 <??ZbZclAttrIntegerRangeCheck_91>
 80019ae:	45a0      	cmp	r8, r4
 80019b0:	d301      	bcc.n	80019b6 <??ZbZclAttrIntegerRangeCheck_89>

080019b2 <??ZbZclAttrIntegerRangeCheck_91>:
 80019b2:	2001      	movs	r0, #1
 80019b4:	e000      	b.n	80019b8 <??ZbZclAttrIntegerRangeCheck_92>

080019b6 <??ZbZclAttrIntegerRangeCheck_89>:
 80019b6:	2000      	movs	r0, #0

080019b8 <??ZbZclAttrIntegerRangeCheck_92>:
 80019b8:	b2c0      	uxtb	r0, r0

080019ba <??ZbZclAttrIntegerRangeCheck_19>:
 80019ba:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80019be:	4770      	bx	lr

080019c0 <??DataTable1>:
 80019c0:	8000 ffff                                   ....

080019c4 <??DataTable1_1>:
 80019c4:	0000 ff80                                   ....

080019c8 <ZbZclAttrIntegerRead>:
 80019c8:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019cc:	b085      	sub	sp, #20
 80019ce:	0006      	movs	r6, r0
 80019d0:	000f      	movs	r7, r1
 80019d2:	0015      	movs	r5, r2
 80019d4:	001c      	movs	r4, r3
 80019d6:	2000      	movs	r0, #0
 80019d8:	f88d 0009 	strb.w	r0, [sp, #9]
 80019dc:	f05f 0808 	movs.w	r8, #8
 80019e0:	f05f 0900 	movs.w	r9, #0
 80019e4:	f10d 0a0c 	add.w	sl, sp, #12
 80019e8:	464a      	mov	r2, r9
 80019ea:	4641      	mov	r1, r8
 80019ec:	4650      	mov	r0, sl
 80019ee:	f004 f94d 	bl	8005c8c <__aeabi_memset>
 80019f2:	2000      	movs	r0, #0
 80019f4:	9001      	str	r0, [sp, #4]
 80019f6:	2008      	movs	r0, #8
 80019f8:	9000      	str	r0, [sp, #0]
 80019fa:	ab03      	add	r3, sp, #12
 80019fc:	f10d 0209 	add.w	r2, sp, #9
 8001a00:	0039      	movs	r1, r7
 8001a02:	b289      	uxth	r1, r1
 8001a04:	0030      	movs	r0, r6
 8001a06:	f7fe fcee 	bl	80003e6 <ZbZclAttrRead>
 8001a0a:	f88d 0008 	strb.w	r0, [sp, #8]
 8001a0e:	2c00      	cmp	r4, #0
 8001a10:	d002      	beq.n	8001a18 <??ZbZclAttrIntegerRead_0>
 8001a12:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a16:	7020      	strb	r0, [r4, #0]

08001a18 <??ZbZclAttrIntegerRead_0>:
 8001a18:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d002      	beq.n	8001a26 <??ZbZclAttrIntegerRead_1>
 8001a20:	2000      	movs	r0, #0
 8001a22:	2100      	movs	r1, #0
 8001a24:	e01a      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a26 <??ZbZclAttrIntegerRead_1>:
 8001a26:	aa02      	add	r2, sp, #8
 8001a28:	a903      	add	r1, sp, #12
 8001a2a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a2e:	f7ff fcb1 	bl	8001394 <ZbZclParseInteger>
 8001a32:	0002      	movs	r2, r0
 8001a34:	000b      	movs	r3, r1
 8001a36:	2c00      	cmp	r4, #0
 8001a38:	d002      	beq.n	8001a40 <??ZbZclAttrIntegerRead_3>
 8001a3a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a3e:	7020      	strb	r0, [r4, #0]

08001a40 <??ZbZclAttrIntegerRead_3>:
 8001a40:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001a44:	2800      	cmp	r0, #0
 8001a46:	d002      	beq.n	8001a4e <??ZbZclAttrIntegerRead_4>
 8001a48:	2000      	movs	r0, #0
 8001a4a:	2100      	movs	r1, #0
 8001a4c:	e006      	b.n	8001a5c <??ZbZclAttrIntegerRead_2>

08001a4e <??ZbZclAttrIntegerRead_4>:
 8001a4e:	2d00      	cmp	r5, #0
 8001a50:	d002      	beq.n	8001a58 <??ZbZclAttrIntegerRead_5>
 8001a52:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8001a56:	7028      	strb	r0, [r5, #0]

08001a58 <??ZbZclAttrIntegerRead_5>:
 8001a58:	0010      	movs	r0, r2
 8001a5a:	0019      	movs	r1, r3

08001a5c <??ZbZclAttrIntegerRead_2>:
 8001a5c:	b006      	add	sp, #24
 8001a5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08001a62 <ZbZclAttrIntegerWrite>:
 8001a62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a66:	b087      	sub	sp, #28
 8001a68:	4680      	mov	r8, r0
 8001a6a:	4689      	mov	r9, r1
 8001a6c:	0014      	movs	r4, r2
 8001a6e:	001d      	movs	r5, r3
 8001a70:	f1b8 0f00 	cmp.w	r8, #0
 8001a74:	d101      	bne.n	8001a7a <??ZbZclAttrIntegerWrite_0>
 8001a76:	2087      	movs	r0, #135	@ 0x87
 8001a78:	e042      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a7a <??ZbZclAttrIntegerWrite_0>:
 8001a7a:	ab04      	add	r3, sp, #16
 8001a7c:	f10d 0211 	add.w	r2, sp, #17
 8001a80:	4649      	mov	r1, r9
 8001a82:	b289      	uxth	r1, r1
 8001a84:	4640      	mov	r0, r8
 8001a86:	f7ff ff9f 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001a8a:	0006      	movs	r6, r0
 8001a8c:	000f      	movs	r7, r1
 8001a8e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a92:	2800      	cmp	r0, #0
 8001a94:	d002      	beq.n	8001a9c <??ZbZclAttrIntegerWrite_2>
 8001a96:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001a9a:	e031      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001a9c <??ZbZclAttrIntegerWrite_2>:
 8001a9c:	42af      	cmp	r7, r5
 8001a9e:	d103      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa0:	42a6      	cmp	r6, r4
 8001aa2:	d101      	bne.n	8001aa8 <??ZbZclAttrIntegerWrite_3>
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	e02b      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001aa8 <??ZbZclAttrIntegerWrite_3>:
 8001aa8:	2000      	movs	r0, #0
 8001aaa:	2100      	movs	r1, #0
 8001aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	e9cd 0100 	strd	r0, r1, [sp]
 8001ab8:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8001abc:	0020      	movs	r0, r4
 8001abe:	0029      	movs	r1, r5
 8001ac0:	f7ff fdac 	bl	800161c <ZbZclAttrIntegerRangeCheck>
 8001ac4:	2800      	cmp	r0, #0
 8001ac6:	d101      	bne.n	8001acc <??ZbZclAttrIntegerWrite_4>
 8001ac8:	2087      	movs	r0, #135	@ 0x87
 8001aca:	e019      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001acc <??ZbZclAttrIntegerWrite_4>:
 8001acc:	0022      	movs	r2, r4
 8001ace:	002b      	movs	r3, r5
 8001ad0:	a805      	add	r0, sp, #20
 8001ad2:	f003 f84a 	bl	8004b6a <putle64>
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	9001      	str	r0, [sp, #4]
 8001ada:	2008      	movs	r0, #8
 8001adc:	9000      	str	r0, [sp, #0]
 8001ade:	ab05      	add	r3, sp, #20
 8001ae0:	464a      	mov	r2, r9
 8001ae2:	b292      	uxth	r2, r2
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4640      	mov	r0, r8
 8001ae8:	f7fe fdcf 	bl	800068a <ZbZclAttrWrite>
 8001aec:	f88d 0010 	strb.w	r0, [sp, #16]
 8001af0:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d002      	beq.n	8001afe <??ZbZclAttrIntegerWrite_5>
 8001af8:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001afc:	e000      	b.n	8001b00 <??ZbZclAttrIntegerWrite_1>

08001afe <??ZbZclAttrIntegerWrite_5>:
 8001afe:	2000      	movs	r0, #0

08001b00 <??ZbZclAttrIntegerWrite_1>:
 8001b00:	b007      	add	sp, #28
 8001b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001b06 <ZbZclAttrIntegerIncrement>:
 8001b06:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	468b      	mov	fp, r1
 8001b0e:	0016      	movs	r6, r2
 8001b10:	001f      	movs	r7, r3
 8001b12:	f05f 0a00 	movs.w	sl, #0
 8001b16:	466b      	mov	r3, sp
 8001b18:	f10d 0201 	add.w	r2, sp, #1
 8001b1c:	4659      	mov	r1, fp
 8001b1e:	b289      	uxth	r1, r1
 8001b20:	9804      	ldr	r0, [sp, #16]
 8001b22:	f7ff ff51 	bl	80019c8 <ZbZclAttrIntegerRead>
 8001b26:	0002      	movs	r2, r0
 8001b28:	000b      	movs	r3, r1
 8001b2a:	f89d 0000 	ldrb.w	r0, [sp]
 8001b2e:	2800      	cmp	r0, #0
 8001b30:	d002      	beq.n	8001b38 <??ZbZclAttrIntegerIncrement_0>
 8001b32:	f89d 0000 	ldrb.w	r0, [sp]
 8001b36:	e03e      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001b38 <??ZbZclAttrIntegerIncrement_0>:
 8001b38:	eb12 0806 	adds.w	r8, r2, r6
 8001b3c:	eb53 0907 	adcs.w	r9, r3, r7
 8001b40:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b44:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8001b48:	f7ff f9ea 	bl	8000f20 <ZbZclAttrTypeLength>
 8001b4c:	9001      	str	r0, [sp, #4]
 8001b4e:	9801      	ldr	r0, [sp, #4]
 8001b50:	2801      	cmp	r0, #1
 8001b52:	d017      	beq.n	8001b84 <??ZbZclAttrIntegerIncrement_2>
 8001b54:	2802      	cmp	r0, #2
 8001b56:	d00b      	beq.n	8001b70 <??ZbZclAttrIntegerIncrement_3>
 8001b58:	2804      	cmp	r0, #4
 8001b5a:	d002      	beq.n	8001b62 <??ZbZclAttrIntegerIncrement_4>
 8001b5c:	2808      	cmp	r0, #8
 8001b5e:	d118      	bne.n	8001b92 <??ZbZclAttrIntegerIncrement_5>

08001b60 <??ZbZclAttrIntegerIncrement_6>:
 8001b60:	e019      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b62 <??ZbZclAttrIntegerIncrement_4>:
 8001b62:	f038 0000 	bics.w	r0, r8, #0
 8001b66:	f039 31ff 	bics.w	r1, r9, #4294967295
 8001b6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b6e:	e012      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b70 <??ZbZclAttrIntegerIncrement_3>:
 8001b70:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001b74:	2100      	movs	r1, #0
 8001b76:	ea18 0000 	ands.w	r0, r8, r0
 8001b7a:	ea19 0101 	ands.w	r1, r9, r1
 8001b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b82:	e008      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b84 <??ZbZclAttrIntegerIncrement_2>:
 8001b84:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8001b88:	f019 0100 	ands.w	r1, r9, #0
 8001b8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001b90:	e001      	b.n	8001b96 <??ZbZclAttrIntegerIncrement_7>

08001b92 <??ZbZclAttrIntegerIncrement_5>:
 8001b92:	2001      	movs	r0, #1
 8001b94:	4682      	mov	sl, r0

08001b96 <??ZbZclAttrIntegerIncrement_7>:
 8001b96:	4650      	mov	r0, sl
 8001b98:	b2c0      	uxtb	r0, r0
 8001b9a:	2800      	cmp	r0, #0
 8001b9c:	d001      	beq.n	8001ba2 <??ZbZclAttrIntegerIncrement_8>
 8001b9e:	2086      	movs	r0, #134	@ 0x86
 8001ba0:	e009      	b.n	8001bb6 <??ZbZclAttrIntegerIncrement_1>

08001ba2 <??ZbZclAttrIntegerIncrement_8>:
 8001ba2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8001ba6:	0022      	movs	r2, r4
 8001ba8:	002b      	movs	r3, r5
 8001baa:	4659      	mov	r1, fp
 8001bac:	b289      	uxth	r1, r1
 8001bae:	9804      	ldr	r0, [sp, #16]
 8001bb0:	f7ff ff57 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8001bb4:	2000      	movs	r0, #0

08001bb6 <??ZbZclAttrIntegerIncrement_1>:
 8001bb6:	b005      	add	sp, #20
 8001bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001bbc <ZbZclAttrEuiRead>:
 8001bbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001bc0:	b084      	sub	sp, #16
 8001bc2:	0005      	movs	r5, r0
 8001bc4:	000e      	movs	r6, r1
 8001bc6:	0014      	movs	r4, r2
 8001bc8:	f05f 0808 	movs.w	r8, #8
 8001bcc:	f05f 0900 	movs.w	r9, #0
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	464a      	mov	r2, r9
 8001bd4:	4641      	mov	r1, r8
 8001bd6:	0038      	movs	r0, r7
 8001bd8:	f004 f858 	bl	8005c8c <__aeabi_memset>
 8001bdc:	2000      	movs	r0, #0
 8001bde:	9001      	str	r0, [sp, #4]
 8001be0:	2008      	movs	r0, #8
 8001be2:	9000      	str	r0, [sp, #0]
 8001be4:	ab02      	add	r3, sp, #8
 8001be6:	2200      	movs	r2, #0
 8001be8:	0031      	movs	r1, r6
 8001bea:	b289      	uxth	r1, r1
 8001bec:	0028      	movs	r0, r5
 8001bee:	f7fe fbfa 	bl	80003e6 <ZbZclAttrRead>
 8001bf2:	0007      	movs	r7, r0
 8001bf4:	2c00      	cmp	r4, #0
 8001bf6:	d000      	beq.n	8001bfa <??ZbZclAttrEuiRead_0>
 8001bf8:	7027      	strb	r7, [r4, #0]

08001bfa <??ZbZclAttrEuiRead_0>:
 8001bfa:	0038      	movs	r0, r7
 8001bfc:	b2c0      	uxtb	r0, r0
 8001bfe:	2800      	cmp	r0, #0
 8001c00:	d002      	beq.n	8001c08 <??ZbZclAttrEuiRead_1>
 8001c02:	2000      	movs	r0, #0
 8001c04:	2100      	movs	r1, #0
 8001c06:	e002      	b.n	8001c0e <??ZbZclAttrEuiRead_2>

08001c08 <??ZbZclAttrEuiRead_1>:
 8001c08:	a802      	add	r0, sp, #8
 8001c0a:	f002 ff5b 	bl	8004ac4 <pletoh64>

08001c0e <??ZbZclAttrEuiRead_2>:
 8001c0e:	b005      	add	sp, #20
 8001c10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c14 <ZbZclAttrEuiWrite>:
 8001c14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c18:	b085      	sub	sp, #20
 8001c1a:	4680      	mov	r8, r0
 8001c1c:	4689      	mov	r9, r1
 8001c1e:	0014      	movs	r4, r2
 8001c20:	001d      	movs	r5, r3
 8001c22:	f1b8 0f00 	cmp.w	r8, #0
 8001c26:	d101      	bne.n	8001c2c <??ZbZclAttrEuiWrite_0>
 8001c28:	2087      	movs	r0, #135	@ 0x87
 8001c2a:	e02e      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c2c <??ZbZclAttrEuiWrite_0>:
 8001c2c:	aa02      	add	r2, sp, #8
 8001c2e:	4649      	mov	r1, r9
 8001c30:	b289      	uxth	r1, r1
 8001c32:	4640      	mov	r0, r8
 8001c34:	f7ff ffc2 	bl	8001bbc <ZbZclAttrEuiRead>
 8001c38:	0006      	movs	r6, r0
 8001c3a:	000f      	movs	r7, r1
 8001c3c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c40:	2800      	cmp	r0, #0
 8001c42:	d002      	beq.n	8001c4a <??ZbZclAttrEuiWrite_2>
 8001c44:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c48:	e01f      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c4a <??ZbZclAttrEuiWrite_2>:
 8001c4a:	42af      	cmp	r7, r5
 8001c4c:	d103      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c4e:	42a6      	cmp	r6, r4
 8001c50:	d101      	bne.n	8001c56 <??ZbZclAttrEuiWrite_3>
 8001c52:	2000      	movs	r0, #0
 8001c54:	e019      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c56 <??ZbZclAttrEuiWrite_3>:
 8001c56:	0022      	movs	r2, r4
 8001c58:	002b      	movs	r3, r5
 8001c5a:	a803      	add	r0, sp, #12
 8001c5c:	f002 ff85 	bl	8004b6a <putle64>
 8001c60:	2002      	movs	r0, #2
 8001c62:	9001      	str	r0, [sp, #4]
 8001c64:	2008      	movs	r0, #8
 8001c66:	9000      	str	r0, [sp, #0]
 8001c68:	ab03      	add	r3, sp, #12
 8001c6a:	464a      	mov	r2, r9
 8001c6c:	b292      	uxth	r2, r2
 8001c6e:	2100      	movs	r1, #0
 8001c70:	4640      	mov	r0, r8
 8001c72:	f7fe fd0a 	bl	800068a <ZbZclAttrWrite>
 8001c76:	f88d 0008 	strb.w	r0, [sp, #8]
 8001c7a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c7e:	2800      	cmp	r0, #0
 8001c80:	d002      	beq.n	8001c88 <??ZbZclAttrEuiWrite_4>
 8001c82:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8001c86:	e000      	b.n	8001c8a <??ZbZclAttrEuiWrite_1>

08001c88 <??ZbZclAttrEuiWrite_4>:
 8001c88:	2000      	movs	r0, #0

08001c8a <??ZbZclAttrEuiWrite_1>:
 8001c8a:	b005      	add	sp, #20
 8001c8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08001c90 <ZbZclAttrAppendList>:
 8001c90:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c94:	b089      	sub	sp, #36	@ 0x24
 8001c96:	0007      	movs	r7, r0
 8001c98:	000e      	movs	r6, r1
 8001c9a:	68b8      	ldr	r0, [r7, #8]
 8001c9c:	9008      	str	r0, [sp, #32]
 8001c9e:	2e00      	cmp	r6, #0
 8001ca0:	d002      	beq.n	8001ca8 <??ZbZclAttrAppendList_0>
 8001ca2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001ca4:	2800      	cmp	r0, #0
 8001ca6:	d101      	bne.n	8001cac <??ZbZclAttrAppendList_1>

08001ca8 <??ZbZclAttrAppendList_0>:
 8001ca8:	2000      	movs	r0, #0
 8001caa:	e0c6      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cac <??ZbZclAttrAppendList_1>:
 8001cac:	f05f 0800 	movs.w	r8, #0

08001cb0 <??ZbZclAttrAppendList_3>:
 8001cb0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001cb2:	4580      	cmp	r8, r0
 8001cb4:	f080 80bd 	bcs.w	8001e32 <??ZbZclAttrAppendList_4>
 8001cb8:	f05f 0928 	movs.w	r9, #40	@ 0x28
 8001cbc:	fb09 f008 	mul.w	r0, r9, r8
 8001cc0:	4430      	add	r0, r6
 8001cc2:	7900      	ldrb	r0, [r0, #4]
 8001cc4:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 8001cc8:	d007      	beq.n	8001cda <??ZbZclAttrAppendList_5>
 8001cca:	fb09 f008 	mul.w	r0, r9, r8
 8001cce:	4430      	add	r0, r6
 8001cd0:	68c0      	ldr	r0, [r0, #12]
 8001cd2:	2800      	cmp	r0, #0
 8001cd4:	d101      	bne.n	8001cda <??ZbZclAttrAppendList_5>
 8001cd6:	2001      	movs	r0, #1
 8001cd8:	e0af      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001cda <??ZbZclAttrAppendList_5>:
 8001cda:	fb09 f008 	mul.w	r0, r9, r8
 8001cde:	5a31      	ldrh	r1, [r6, r0]
 8001ce0:	0038      	movs	r0, r7
 8001ce2:	f7fe fa7c 	bl	80001de <ZbZclAttrFind>
 8001ce6:	0005      	movs	r5, r0
 8001ce8:	2d00      	cmp	r5, #0
 8001cea:	d003      	beq.n	8001cf4 <??ZbZclAttrAppendList_6>
 8001cec:	0029      	movs	r1, r5
 8001cee:	0038      	movs	r0, r7
 8001cf0:	f000 f8b6 	bl	8001e60 <ZbZclAttrFreeAttr>

08001cf4 <??ZbZclAttrAppendList_6>:
 8001cf4:	2418      	movs	r4, #24
 8001cf6:	f05f 0a00 	movs.w	sl, #0
 8001cfa:	f10d 0b04 	add.w	fp, sp, #4
 8001cfe:	4652      	mov	r2, sl
 8001d00:	0021      	movs	r1, r4
 8001d02:	4658      	mov	r0, fp
 8001d04:	f003 ffc2 	bl	8005c8c <__aeabi_memset>
 8001d08:	a801      	add	r0, sp, #4
 8001d0a:	9001      	str	r0, [sp, #4]
 8001d0c:	a801      	add	r0, sp, #4
 8001d0e:	9002      	str	r0, [sp, #8]
 8001d10:	fb09 f008 	mul.w	r0, r9, r8
 8001d14:	4430      	add	r0, r6
 8001d16:	9003      	str	r0, [sp, #12]
 8001d18:	fb09 f008 	mul.w	r0, r9, r8
 8001d1c:	4430      	add	r0, r6
 8001d1e:	7900      	ldrb	r0, [r0, #4]
 8001d20:	0780      	lsls	r0, r0, #30
 8001d22:	d50b      	bpl.n	8001d3c <??ZbZclAttrAppendList_7>
 8001d24:	fb09 f008 	mul.w	r0, r9, r8
 8001d28:	4430      	add	r0, r6
 8001d2a:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8001d2c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8001d30:	fb09 f008 	mul.w	r0, r9, r8
 8001d34:	4430      	add	r0, r6
 8001d36:	8c00      	ldrh	r0, [r0, #32]
 8001d38:	f8ad 0018 	strh.w	r0, [sp, #24]

08001d3c <??ZbZclAttrAppendList_7>:
 8001d3c:	fb09 f008 	mul.w	r0, r9, r8
 8001d40:	4430      	add	r0, r6
 8001d42:	7900      	ldrb	r0, [r0, #4]
 8001d44:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 8001d48:	2830      	cmp	r0, #48	@ 0x30
 8001d4a:	d108      	bne.n	8001d5e <??ZbZclAttrAppendList_8>
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	9000      	str	r0, [sp, #0]
 8001d50:	fb09 f908 	mul.w	r9, r9, r8
 8001d54:	eb06 0009 	add.w	r0, r6, r9
 8001d58:	6880      	ldr	r0, [r0, #8]
 8001d5a:	9005      	str	r0, [sp, #20]
 8001d5c:	e034      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001d5e <??ZbZclAttrAppendList_8>:
 8001d5e:	fb09 f008 	mul.w	r0, r9, r8
 8001d62:	4430      	add	r0, r6
 8001d64:	6880      	ldr	r0, [r0, #8]
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d01f      	beq.n	8001daa <??ZbZclAttrAppendList_10>
 8001d6a:	fb09 f908 	mul.w	r9, r9, r8
 8001d6e:	eb06 0009 	add.w	r0, r6, r9
 8001d72:	6880      	ldr	r0, [r0, #8]
 8001d74:	9005      	str	r0, [sp, #20]
 8001d76:	9803      	ldr	r0, [sp, #12]
 8001d78:	7880      	ldrb	r0, [r0, #2]
 8001d7a:	2841      	cmp	r0, #65	@ 0x41
 8001d7c:	d003      	beq.n	8001d86 <??ZbZclAttrAppendList_11>
 8001d7e:	9803      	ldr	r0, [sp, #12]
 8001d80:	7880      	ldrb	r0, [r0, #2]
 8001d82:	2842      	cmp	r0, #66	@ 0x42
 8001d84:	d103      	bne.n	8001d8e <??ZbZclAttrAppendList_12>

08001d86 <??ZbZclAttrAppendList_11>:
 8001d86:	9805      	ldr	r0, [sp, #20]
 8001d88:	1c40      	adds	r0, r0, #1
 8001d8a:	9005      	str	r0, [sp, #20]
 8001d8c:	e00a      	b.n	8001da4 <??ZbZclAttrAppendList_13>

08001d8e <??ZbZclAttrAppendList_12>:
 8001d8e:	9803      	ldr	r0, [sp, #12]
 8001d90:	7880      	ldrb	r0, [r0, #2]
 8001d92:	2843      	cmp	r0, #67	@ 0x43
 8001d94:	d003      	beq.n	8001d9e <??ZbZclAttrAppendList_14>
 8001d96:	9803      	ldr	r0, [sp, #12]
 8001d98:	7880      	ldrb	r0, [r0, #2]
 8001d9a:	2844      	cmp	r0, #68	@ 0x44
 8001d9c:	d102      	bne.n	8001da4 <??ZbZclAttrAppendList_13>

08001d9e <??ZbZclAttrAppendList_14>:
 8001d9e:	9805      	ldr	r0, [sp, #20]
 8001da0:	1c80      	adds	r0, r0, #2
 8001da2:	9005      	str	r0, [sp, #20]

08001da4 <??ZbZclAttrAppendList_13>:
 8001da4:	9805      	ldr	r0, [sp, #20]
 8001da6:	9000      	str	r0, [sp, #0]
 8001da8:	e00e      	b.n	8001dc8 <??ZbZclAttrAppendList_9>

08001daa <??ZbZclAttrAppendList_10>:
 8001daa:	fb09 f908 	mul.w	r9, r9, r8
 8001dae:	eb06 0009 	add.w	r0, r6, r9
 8001db2:	7880      	ldrb	r0, [r0, #2]
 8001db4:	f7ff f8b4 	bl	8000f20 <ZbZclAttrTypeLength>
 8001db8:	9005      	str	r0, [sp, #20]
 8001dba:	9805      	ldr	r0, [sp, #20]
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d101      	bne.n	8001dc4 <??ZbZclAttrAppendList_15>
 8001dc0:	208d      	movs	r0, #141	@ 0x8d
 8001dc2:	e03a      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001dc4 <??ZbZclAttrAppendList_15>:
 8001dc4:	9805      	ldr	r0, [sp, #20]
 8001dc6:	9000      	str	r0, [sp, #0]

08001dc8 <??ZbZclAttrAppendList_9>:
 8001dc8:	2300      	movs	r3, #0
 8001dca:	a236      	add	r2, pc, #216	@ (adr r2, 8001ea4 <??DataTable1>)
 8001dcc:	9900      	ldr	r1, [sp, #0]
 8001dce:	3118      	adds	r1, #24
 8001dd0:	9808      	ldr	r0, [sp, #32]
 8001dd2:	f012 fc2b 	bl	801462c <zb_heap_alloc>
 8001dd6:	0004      	movs	r4, r0
 8001dd8:	2c00      	cmp	r4, #0
 8001dda:	d101      	bne.n	8001de0 <??ZbZclAttrAppendList_16>
 8001ddc:	2089      	movs	r0, #137	@ 0x89
 8001dde:	e02c      	b.n	8001e3a <??ZbZclAttrAppendList_2>

08001de0 <??ZbZclAttrAppendList_16>:
 8001de0:	2518      	movs	r5, #24
 8001de2:	f10d 0904 	add.w	r9, sp, #4
 8001de6:	46a2      	mov	sl, r4
 8001de8:	002a      	movs	r2, r5
 8001dea:	4649      	mov	r1, r9
 8001dec:	4650      	mov	r0, sl
 8001dee:	f015 f9c6 	bl	801717e <__aeabi_memcpy>
 8001df2:	9800      	ldr	r0, [sp, #0]
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d00c      	beq.n	8001e12 <??ZbZclAttrAppendList_17>
 8001df8:	f114 0018 	adds.w	r0, r4, #24
 8001dfc:	60e0      	str	r0, [r4, #12]
 8001dfe:	9800      	ldr	r0, [sp, #0]
 8001e00:	9007      	str	r0, [sp, #28]
 8001e02:	2500      	movs	r5, #0
 8001e04:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8001e08:	002a      	movs	r2, r5
 8001e0a:	9907      	ldr	r1, [sp, #28]
 8001e0c:	4648      	mov	r0, r9
 8001e0e:	f003 ff3d 	bl	8005c8c <__aeabi_memset>

08001e12 <??ZbZclAttrAppendList_17>:
 8001e12:	0021      	movs	r1, r4
 8001e14:	0038      	movs	r0, r7
 8001e16:	f7fe f9b3 	bl	8000180 <ZbZclAttrAddSorted>
 8001e1a:	68e0      	ldr	r0, [r4, #12]
 8001e1c:	2800      	cmp	r0, #0
 8001e1e:	d005      	beq.n	8001e2c <??ZbZclAttrAppendList_18>
 8001e20:	6922      	ldr	r2, [r4, #16]
 8001e22:	68e1      	ldr	r1, [r4, #12]
 8001e24:	68a0      	ldr	r0, [r4, #8]
 8001e26:	7880      	ldrb	r0, [r0, #2]
 8001e28:	f7fe fdfa 	bl	8000a20 <ZbZclAttrDefaultValue>

08001e2c <??ZbZclAttrAppendList_18>:
 8001e2c:	f118 0801 	adds.w	r8, r8, #1
 8001e30:	e73e      	b.n	8001cb0 <??ZbZclAttrAppendList_3>

08001e32 <??ZbZclAttrAppendList_4>:
 8001e32:	0038      	movs	r0, r7
 8001e34:	f000 ff3a 	bl	8002cac <zcl_reporting_create_default_reports>
 8001e38:	2000      	movs	r0, #0

08001e3a <??ZbZclAttrAppendList_2>:
 8001e3a:	b00b      	add	sp, #44	@ 0x2c
 8001e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e40 <ZbZclAttrCallbackExec>:
 8001e40:	b570      	push	{r4, r5, r6, lr}
 8001e42:	0004      	movs	r4, r0
 8001e44:	000d      	movs	r5, r1
 8001e46:	0016      	movs	r6, r2
 8001e48:	68a8      	ldr	r0, [r5, #8]
 8001e4a:	68c0      	ldr	r0, [r0, #12]
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d005      	beq.n	8001e5c <??ZbZclAttrCallbackExec_0>
 8001e50:	0031      	movs	r1, r6
 8001e52:	0020      	movs	r0, r4
 8001e54:	68aa      	ldr	r2, [r5, #8]
 8001e56:	68d2      	ldr	r2, [r2, #12]
 8001e58:	4790      	blx	r2
 8001e5a:	e000      	b.n	8001e5e <??ZbZclAttrCallbackExec_1>

08001e5c <??ZbZclAttrCallbackExec_0>:
 8001e5c:	2001      	movs	r0, #1

08001e5e <??ZbZclAttrCallbackExec_1>:
 8001e5e:	bd70      	pop	{r4, r5, r6, pc}

08001e60 <ZbZclAttrFreeAttr>:
 8001e60:	b538      	push	{r3, r4, r5, lr}
 8001e62:	0004      	movs	r4, r0
 8001e64:	000d      	movs	r5, r1
 8001e66:	68a8      	ldr	r0, [r5, #8]
 8001e68:	7900      	ldrb	r0, [r0, #4]
 8001e6a:	0780      	lsls	r0, r0, #30
 8001e6c:	d50b      	bpl.n	8001e86 <??ZbZclAttrFreeAttr_0>
 8001e6e:	2200      	movs	r2, #0
 8001e70:	68a8      	ldr	r0, [r5, #8]
 8001e72:	8801      	ldrh	r1, [r0, #0]
 8001e74:	0020      	movs	r0, r4
 8001e76:	f000 fdfd 	bl	8002a74 <zcl_cluster_attr_report_delete>
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	68a8      	ldr	r0, [r5, #8]
 8001e7e:	8801      	ldrh	r1, [r0, #0]
 8001e80:	0020      	movs	r0, r4
 8001e82:	f000 fdf7 	bl	8002a74 <zcl_cluster_attr_report_delete>

08001e86 <??ZbZclAttrFreeAttr_0>:
 8001e86:	6868      	ldr	r0, [r5, #4]
 8001e88:	6829      	ldr	r1, [r5, #0]
 8001e8a:	6048      	str	r0, [r1, #4]
 8001e8c:	6828      	ldr	r0, [r5, #0]
 8001e8e:	6869      	ldr	r1, [r5, #4]
 8001e90:	6008      	str	r0, [r1, #0]
 8001e92:	602d      	str	r5, [r5, #0]
 8001e94:	606d      	str	r5, [r5, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	a202      	add	r2, pc, #8	@ (adr r2, 8001ea4 <??DataTable1>)
 8001e9a:	0029      	movs	r1, r5
 8001e9c:	68a0      	ldr	r0, [r4, #8]
 8001e9e:	f012 fbd4 	bl	801464a <zb_heap_free>
 8001ea2:	bd31      	pop	{r0, r4, r5, pc}

08001ea4 <??DataTable1>:
 8001ea4:	0000 0000                                   ....

08001ea8 <ZbZclAttrFreeList>:
 8001ea8:	b570      	push	{r4, r5, r6, lr}
 8001eaa:	0005      	movs	r5, r0

08001eac <??ZbZclAttrFreeList_0>:
 8001eac:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8001eae:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8001eb2:	4288      	cmp	r0, r1
 8001eb4:	d001      	beq.n	8001eba <??ZbZclAttrFreeList_1>
 8001eb6:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8001eb8:	e000      	b.n	8001ebc <??ZbZclAttrFreeList_2>

08001eba <??ZbZclAttrFreeList_1>:
 8001eba:	2400      	movs	r4, #0

08001ebc <??ZbZclAttrFreeList_2>:
 8001ebc:	2c00      	cmp	r4, #0
 8001ebe:	d005      	beq.n	8001ecc <??ZbZclAttrFreeList_3>

08001ec0 <??ZbZclAttrFreeList_4>:
 8001ec0:	0026      	movs	r6, r4
 8001ec2:	0031      	movs	r1, r6
 8001ec4:	0028      	movs	r0, r5
 8001ec6:	f7ff ffcb 	bl	8001e60 <ZbZclAttrFreeAttr>
 8001eca:	e7ef      	b.n	8001eac <??ZbZclAttrFreeList_0>

08001ecc <??ZbZclAttrFreeList_3>:
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
	...

08001ed0 <zcl_reporting_send_conf>:
 8001ed0:	000b      	movs	r3, r1
 8001ed2:	7e02      	ldrb	r2, [r0, #24]
 8001ed4:	2a00      	cmp	r2, #0
 8001ed6:	d004      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ed8:	7e02      	ldrb	r2, [r0, #24]
 8001eda:	2aa4      	cmp	r2, #164	@ 0xa4
 8001edc:	d001      	beq.n	8001ee2 <??zcl_reporting_send_conf_0>
 8001ede:	7e02      	ldrb	r2, [r0, #24]
 8001ee0:	2aa3      	cmp	r2, #163	@ 0xa3

08001ee2 <??zcl_reporting_send_conf_0>:
 8001ee2:	4770      	bx	lr

08001ee4 <report_command_timer>:
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	0004      	movs	r4, r0
 8001ee8:	000d      	movs	r5, r1
 8001eea:	002e      	movs	r6, r5
 8001eec:	f116 0108 	adds.w	r1, r6, #8
 8001ef0:	6830      	ldr	r0, [r6, #0]
 8001ef2:	f000 f852 	bl	8001f9a <zcl_reporting_send_report>
 8001ef6:	6870      	ldr	r0, [r6, #4]
 8001ef8:	f011 ffd4 	bl	8013ea4 <ZbTimerFree>
 8001efc:	2300      	movs	r3, #0
 8001efe:	a2cf      	add	r2, pc, #828	@ (adr r2, 800223c <??DataTable4>)
 8001f00:	0031      	movs	r1, r6
 8001f02:	6830      	ldr	r0, [r6, #0]
 8001f04:	6880      	ldr	r0, [r0, #8]
 8001f06:	f012 fba0 	bl	801464a <zb_heap_free>
 8001f0a:	bd70      	pop	{r4, r5, r6, pc}

08001f0c <zcl_reporting_queue_report>:
 8001f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f10:	0006      	movs	r6, r0
 8001f12:	000f      	movs	r7, r1
 8001f14:	0014      	movs	r4, r2
 8001f16:	2c00      	cmp	r4, #0
 8001f18:	d104      	bne.n	8001f24 <??zcl_reporting_queue_report_0>
 8001f1a:	0039      	movs	r1, r7
 8001f1c:	0030      	movs	r0, r6
 8001f1e:	f000 f83c 	bl	8001f9a <zcl_reporting_send_report>
 8001f22:	e037      	b.n	8001f94 <??zcl_reporting_queue_report_1>

08001f24 <??zcl_reporting_queue_report_0>:
 8001f24:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8001f28:	2300      	movs	r3, #0
 8001f2a:	4642      	mov	r2, r8
 8001f2c:	2198      	movs	r1, #152	@ 0x98
 8001f2e:	68b0      	ldr	r0, [r6, #8]
 8001f30:	f012 fb7c 	bl	801462c <zb_heap_alloc>
 8001f34:	0005      	movs	r5, r0
 8001f36:	2d00      	cmp	r5, #0
 8001f38:	d101      	bne.n	8001f3e <??zcl_reporting_queue_report_2>
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	e02b      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f3e <??zcl_reporting_queue_report_2>:
 8001f3e:	f05f 0998 	movs.w	r9, #152	@ 0x98
 8001f42:	f05f 0a00 	movs.w	sl, #0
 8001f46:	46ab      	mov	fp, r5
 8001f48:	4652      	mov	r2, sl
 8001f4a:	4649      	mov	r1, r9
 8001f4c:	4658      	mov	r0, fp
 8001f4e:	f003 fe9d 	bl	8005c8c <__aeabi_memset>
 8001f52:	002a      	movs	r2, r5
 8001f54:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 8002bf0 <??DataTable9>
 8001f58:	68b0      	ldr	r0, [r6, #8]
 8001f5a:	f011 ff51 	bl	8013e00 <ZbTimerAlloc>
 8001f5e:	6068      	str	r0, [r5, #4]
 8001f60:	6868      	ldr	r0, [r5, #4]
 8001f62:	2800      	cmp	r0, #0
 8001f64:	d107      	bne.n	8001f76 <??zcl_reporting_queue_report_4>
 8001f66:	2300      	movs	r3, #0
 8001f68:	4642      	mov	r2, r8
 8001f6a:	0029      	movs	r1, r5
 8001f6c:	68b0      	ldr	r0, [r6, #8]
 8001f6e:	f012 fb6c 	bl	801464a <zb_heap_free>
 8001f72:	2000      	movs	r0, #0
 8001f74:	e00f      	b.n	8001f96 <??zcl_reporting_queue_report_3>

08001f76 <??zcl_reporting_queue_report_4>:
 8001f76:	602e      	str	r6, [r5, #0]
 8001f78:	f05f 0890 	movs.w	r8, #144	@ 0x90
 8001f7c:	46b9      	mov	r9, r7
 8001f7e:	f115 0a08 	adds.w	sl, r5, #8
 8001f82:	4642      	mov	r2, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	4650      	mov	r0, sl
 8001f88:	f015 f8f9 	bl	801717e <__aeabi_memcpy>
 8001f8c:	0021      	movs	r1, r4
 8001f8e:	6868      	ldr	r0, [r5, #4]
 8001f90:	f011 ffbc 	bl	8013f0c <ZbTimerReset>

08001f94 <??zcl_reporting_queue_report_1>:
 8001f94:	2001      	movs	r0, #1

08001f96 <??zcl_reporting_queue_report_3>:
 8001f96:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001f9a <zcl_reporting_send_report>:
 8001f9a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f9e:	b0cc      	sub	sp, #304	@ 0x130
 8001fa0:	0005      	movs	r5, r0
 8001fa2:	000e      	movs	r6, r1
 8001fa4:	2400      	movs	r4, #0
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	f88d 0004 	strb.w	r0, [sp, #4]
 8001fac:	8a28      	ldrh	r0, [r5, #16]
 8001fae:	2800      	cmp	r0, #0
 8001fb0:	d001      	beq.n	8001fb6 <??zcl_reporting_send_report_0>
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	e000      	b.n	8001fb8 <??zcl_reporting_send_report_1>

08001fb6 <??zcl_reporting_send_report_0>:
 8001fb6:	2000      	movs	r0, #0

08001fb8 <??zcl_reporting_send_report_1>:
 8001fb8:	f88d 0005 	strb.w	r0, [sp, #5]
 8001fbc:	8a28      	ldrh	r0, [r5, #16]
 8001fbe:	f8ad 0008 	strh.w	r0, [sp, #8]
 8001fc2:	7f28      	ldrb	r0, [r5, #28]
 8001fc4:	2800      	cmp	r0, #0
 8001fc6:	d103      	bne.n	8001fd0 <??zcl_reporting_send_report_2>
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f88d 0006 	strb.w	r0, [sp, #6]
 8001fce:	e002      	b.n	8001fd6 <??zcl_reporting_send_report_3>

08001fd0 <??zcl_reporting_send_report_2>:
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	f88d 0006 	strb.w	r0, [sp, #6]

08001fd6 <??zcl_reporting_send_report_3>:
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f88d 0007 	strb.w	r0, [sp, #7]
 8001fdc:	f012 f965 	bl	80142aa <ZbZclGetNextSeqnum>
 8001fe0:	f88d 000a 	strb.w	r0, [sp, #10]
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f88d 000b 	strb.w	r0, [sp, #11]
 8001fea:	2205      	movs	r2, #5
 8001fec:	a903      	add	r1, sp, #12
 8001fee:	a801      	add	r0, sp, #4
 8001ff0:	f002 fbb8 	bl	8004764 <ZbZclAppendHeader>
 8001ff4:	0007      	movs	r7, r0
 8001ff6:	2f01      	cmp	r7, #1
 8001ff8:	f2c0 8093 	blt.w	8002122 <??zcl_reporting_send_report_4>

08001ffc <??zcl_reporting_send_report_5>:
 8001ffc:	a91a      	add	r1, sp, #104	@ 0x68
 8001ffe:	a803      	add	r0, sp, #12
 8002000:	0022      	movs	r2, r4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8002008:	0038      	movs	r0, r7
 800200a:	b2c0      	uxtb	r0, r0
 800200c:	aa1a      	add	r2, sp, #104	@ 0x68
 800200e:	0023      	movs	r3, r4
 8002010:	b2db      	uxtb	r3, r3
 8002012:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002016:	6050      	str	r0, [r2, #4]
 8002018:	1c64      	adds	r4, r4, #1
 800201a:	2000      	movs	r0, #0
 800201c:	4680      	mov	r8, r0

0800201e <??zcl_reporting_send_report_6>:
 800201e:	f1b8 0f0c 	cmp.w	r8, #12
 8002022:	d22e      	bcs.n	8002082 <??zcl_reporting_send_report_7>
 8002024:	220c      	movs	r2, #12
 8002026:	fb02 f008 	mul.w	r0, r2, r8
 800202a:	4430      	add	r0, r6
 800202c:	7a00      	ldrb	r0, [r0, #8]
 800202e:	2800      	cmp	r0, #0
 8002030:	d027      	beq.n	8002082 <??zcl_reporting_send_report_7>

08002032 <??zcl_reporting_send_report_8>:
 8002032:	fb02 f008 	mul.w	r0, r2, r8
 8002036:	4430      	add	r0, r6
 8002038:	3009      	adds	r0, #9
 800203a:	0023      	movs	r3, r4
 800203c:	b2db      	uxtb	r3, r3
 800203e:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002042:	2003      	movs	r0, #3
 8002044:	ab1a      	add	r3, sp, #104	@ 0x68
 8002046:	46a4      	mov	ip, r4
 8002048:	fa5f fc8c 	uxtb.w	ip, ip
 800204c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002050:	6058      	str	r0, [r3, #4]
 8002052:	1c64      	adds	r4, r4, #1
 8002054:	fb02 f008 	mul.w	r0, r2, r8
 8002058:	4430      	add	r0, r6
 800205a:	6840      	ldr	r0, [r0, #4]
 800205c:	0023      	movs	r3, r4
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002064:	fb02 f208 	mul.w	r2, r2, r8
 8002068:	eb06 0002 	add.w	r0, r6, r2
 800206c:	7a00      	ldrb	r0, [r0, #8]
 800206e:	aa1a      	add	r2, sp, #104	@ 0x68
 8002070:	0023      	movs	r3, r4
 8002072:	b2db      	uxtb	r3, r3
 8002074:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002078:	6050      	str	r0, [r2, #4]
 800207a:	1c64      	adds	r4, r4, #1
 800207c:	f118 0801 	adds.w	r8, r8, #1
 8002080:	e7cd      	b.n	800201e <??zcl_reporting_send_report_6>

08002082 <??zcl_reporting_send_report_7>:
 8002082:	2200      	movs	r2, #0
 8002084:	a906      	add	r1, sp, #24
 8002086:	0028      	movs	r0, r5
 8002088:	f001 fe0b 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 800208c:	a806      	add	r0, sp, #24
 800208e:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8002bf8 <??DataTable9_2>
 8002092:	6809      	ldr	r1, [r1, #0]
 8002094:	2210      	movs	r2, #16
 8002096:	f015 f872 	bl	801717e <__aeabi_memcpy>
 800209a:	2001      	movs	r0, #1
 800209c:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020a0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020a4:	f050 0004 	orrs.w	r0, r0, #4
 80020a8:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020ac:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020b0:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 80020b4:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80020b8:	7ca8      	ldrb	r0, [r5, #18]
 80020ba:	28ab      	cmp	r0, #171	@ 0xab
 80020bc:	d005      	beq.n	80020ca <??zcl_reporting_send_report_9>
 80020be:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 80020c2:	f050 0002 	orrs.w	r0, r0, #2
 80020c6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

080020ca <??zcl_reporting_send_report_9>:
 80020ca:	2001      	movs	r0, #1
 80020cc:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 80020d0:	2000      	movs	r0, #0
 80020d2:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 80020d6:	a81a      	add	r0, sp, #104	@ 0x68
 80020d8:	900c      	str	r0, [sp, #48]	@ 0x30
 80020da:	0020      	movs	r0, r4
 80020dc:	b2c0      	uxtb	r0, r0
 80020de:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80020e2:	68ab      	ldr	r3, [r5, #8]
 80020e4:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8002bfc <??DataTable9_3>
 80020e8:	a906      	add	r1, sp, #24
 80020ea:	68a8      	ldr	r0, [r5, #8]
 80020ec:	f011 fc20 	bl	8013930 <ZbApsdeDataReqCallback>
 80020f0:	f88d 0000 	strb.w	r0, [sp]
 80020f4:	f89d 0000 	ldrb.w	r0, [sp]
 80020f8:	2800      	cmp	r0, #0
 80020fa:	d012      	beq.n	8002122 <??zcl_reporting_send_report_4>
 80020fc:	f05f 0920 	movs.w	r9, #32
 8002100:	f05f 0a00 	movs.w	sl, #0
 8002104:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8002108:	4652      	mov	r2, sl
 800210a:	4649      	mov	r1, r9
 800210c:	4658      	mov	r0, fp
 800210e:	f003 fdbd 	bl	8005c8c <__aeabi_memset>
 8002112:	f89d 0000 	ldrb.w	r0, [sp]
 8002116:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 800211a:	68a9      	ldr	r1, [r5, #8]
 800211c:	a812      	add	r0, sp, #72	@ 0x48
 800211e:	f7ff fed7 	bl	8001ed0 <zcl_reporting_send_conf>

08002122 <??zcl_reporting_send_report_4>:
 8002122:	f05f 0900 	movs.w	r9, #0

08002126 <??zcl_reporting_send_report_10>:
 8002126:	f1b9 0f0c 	cmp.w	r9, #12
 800212a:	d21e      	bcs.n	800216a <??zcl_reporting_send_report_11>
 800212c:	f05f 080c 	movs.w	r8, #12
 8002130:	fb08 f009 	mul.w	r0, r8, r9
 8002134:	4430      	add	r0, r6
 8002136:	6840      	ldr	r0, [r0, #4]
 8002138:	2800      	cmp	r0, #0
 800213a:	d016      	beq.n	800216a <??zcl_reporting_send_report_11>

0800213c <??zcl_reporting_send_report_12>:
 800213c:	2300      	movs	r3, #0
 800213e:	a23f      	add	r2, pc, #252	@ (adr r2, 800223c <??DataTable4>)
 8002140:	fb08 f009 	mul.w	r0, r8, r9
 8002144:	4430      	add	r0, r6
 8002146:	6841      	ldr	r1, [r0, #4]
 8002148:	68a8      	ldr	r0, [r5, #8]
 800214a:	f012 fa7e 	bl	801464a <zb_heap_free>
 800214e:	2000      	movs	r0, #0
 8002150:	fb08 f109 	mul.w	r1, r8, r9
 8002154:	4431      	add	r1, r6
 8002156:	6048      	str	r0, [r1, #4]
 8002158:	2000      	movs	r0, #0
 800215a:	fb08 f809 	mul.w	r8, r8, r9
 800215e:	eb06 0108 	add.w	r1, r6, r8
 8002162:	7208      	strb	r0, [r1, #8]
 8002164:	f119 0901 	adds.w	r9, r9, #1
 8002168:	e7dd      	b.n	8002126 <??zcl_reporting_send_report_10>

0800216a <??zcl_reporting_send_report_11>:
 800216a:	b04d      	add	sp, #308	@ 0x134
 800216c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002170 <zcl_report_check_time>:
 8002170:	4281      	cmp	r1, r0
 8002172:	d201      	bcs.n	8002178 <??zcl_report_check_time_0>
 8002174:	0008      	movs	r0, r1
 8002176:	e7ff      	b.n	8002178 <??zcl_report_check_time_0>

08002178 <??zcl_report_check_time_0>:
 8002178:	4770      	bx	lr

0800217a <zcl_report_kick>:
 800217a:	b538      	push	{r3, r4, r5, lr}
 800217c:	0004      	movs	r4, r0
 800217e:	000d      	movs	r5, r1
 8002180:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002182:	2800      	cmp	r0, #0
 8002184:	d101      	bne.n	800218a <??zcl_report_kick_0>
 8002186:	2000      	movs	r0, #0
 8002188:	e00d      	b.n	80021a6 <??zcl_report_kick_1>

0800218a <??zcl_report_kick_0>:
 800218a:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 800218e:	2800      	cmp	r0, #0
 8002190:	d001      	beq.n	8002196 <??zcl_report_kick_2>
 8002192:	2001      	movs	r0, #1
 8002194:	e007      	b.n	80021a6 <??zcl_report_kick_1>

08002196 <??zcl_report_kick_2>:
 8002196:	2001      	movs	r0, #1
 8002198:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 800219c:	0029      	movs	r1, r5
 800219e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80021a0:	f011 feb4 	bl	8013f0c <ZbTimerReset>
 80021a4:	2001      	movs	r0, #1

080021a6 <??zcl_report_kick_1>:
 80021a6:	bd32      	pop	{r1, r4, r5, pc}

080021a8 <ZbZclAttrReportKick>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	0004      	movs	r4, r0
 80021ac:	000d      	movs	r5, r1
 80021ae:	0016      	movs	r6, r2
 80021b0:	001f      	movs	r7, r3
 80021b2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80021b4:	2800      	cmp	r0, #0
 80021b6:	d001      	beq.n	80021bc <??ZbZclAttrReportKick_0>
 80021b8:	2001      	movs	r0, #1
 80021ba:	e010      	b.n	80021de <??ZbZclAttrReportKick_1>

080021bc <??ZbZclAttrReportKick_0>:
 80021bc:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 80021c0:	6426      	str	r6, [r4, #64]	@ 0x40
 80021c2:	6467      	str	r7, [r4, #68]	@ 0x44
 80021c4:	2100      	movs	r1, #0
 80021c6:	0020      	movs	r0, r4
 80021c8:	f7ff ffd7 	bl	800217a <zcl_report_kick>
 80021cc:	2800      	cmp	r0, #0
 80021ce:	d105      	bne.n	80021dc <??ZbZclAttrReportKick_2>
 80021d0:	2000      	movs	r0, #0
 80021d2:	6420      	str	r0, [r4, #64]	@ 0x40
 80021d4:	2000      	movs	r0, #0
 80021d6:	6460      	str	r0, [r4, #68]	@ 0x44
 80021d8:	2001      	movs	r0, #1
 80021da:	e000      	b.n	80021de <??ZbZclAttrReportKick_1>

080021dc <??ZbZclAttrReportKick_2>:
 80021dc:	2000      	movs	r0, #0

080021de <??ZbZclAttrReportKick_1>:
 80021de:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080021e0 <zcl_report_append_attr>:
 80021e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021e4:	0004      	movs	r4, r0
 80021e6:	000d      	movs	r5, r1
 80021e8:	0016      	movs	r6, r2
 80021ea:	001f      	movs	r7, r3
 80021ec:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 80021f0:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 80021f4:	2300      	movs	r3, #0
 80021f6:	a211      	add	r2, pc, #68	@ (adr r2, 800223c <??DataTable4>)
 80021f8:	4649      	mov	r1, r9
 80021fa:	0020      	movs	r0, r4
 80021fc:	f012 fa16 	bl	801462c <zb_heap_alloc>
 8002200:	6068      	str	r0, [r5, #4]
 8002202:	6868      	ldr	r0, [r5, #4]
 8002204:	2800      	cmp	r0, #0
 8002206:	d101      	bne.n	800220c <??zcl_report_append_attr_0>
 8002208:	2000      	movs	r0, #0
 800220a:	e014      	b.n	8002236 <??zcl_report_append_attr_1>

0800220c <??zcl_report_append_attr_0>:
 800220c:	f8cd 9000 	str.w	r9, [sp]
 8002210:	46c2      	mov	sl, r8
 8002212:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8002216:	9a00      	ldr	r2, [sp, #0]
 8002218:	4651      	mov	r1, sl
 800221a:	4658      	mov	r0, fp
 800221c:	f014 ffaf 	bl	801717e <__aeabi_memcpy>
 8002220:	f885 9008 	strb.w	r9, [r5, #8]
 8002224:	802e      	strh	r6, [r5, #0]
 8002226:	0031      	movs	r1, r6
 8002228:	b289      	uxth	r1, r1
 800222a:	f115 0009 	adds.w	r0, r5, #9
 800222e:	f002 fc57 	bl	8004ae0 <putle16>
 8002232:	72ef      	strb	r7, [r5, #11]
 8002234:	2001      	movs	r0, #1

08002236 <??zcl_report_append_attr_1>:
 8002236:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800223c <??DataTable4>:
 800223c:	0000 0000                                   ....

08002240 <zcl_cluster_report_check_timeout>:
 8002240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002244:	0006      	movs	r6, r0
 8002246:	000f      	movs	r7, r1
 8002248:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800224a:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 800224e:	4288      	cmp	r0, r1
 8002250:	d001      	beq.n	8002256 <??zcl_cluster_report_check_timeout_0>
 8002252:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002254:	e000      	b.n	8002258 <??zcl_cluster_report_check_timeout_1>

08002256 <??zcl_cluster_report_check_timeout_0>:
 8002256:	2000      	movs	r0, #0

08002258 <??zcl_cluster_report_check_timeout_1>:
 8002258:	2800      	cmp	r0, #0
 800225a:	d101      	bne.n	8002260 <??zcl_cluster_report_check_timeout_2>
 800225c:	2000      	movs	r0, #0
 800225e:	e042      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

08002260 <??zcl_cluster_report_check_timeout_2>:
 8002260:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 8002262:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8002266:	4288      	cmp	r0, r1
 8002268:	d001      	beq.n	800226e <??zcl_cluster_report_check_timeout_4>
 800226a:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 800226c:	e000      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

0800226e <??zcl_cluster_report_check_timeout_4>:
 800226e:	2500      	movs	r5, #0

08002270 <??zcl_cluster_report_check_timeout_5>:
 8002270:	2d00      	cmp	r5, #0
 8002272:	d037      	beq.n	80022e4 <??zcl_cluster_report_check_timeout_6>
 8002274:	46a8      	mov	r8, r5
 8002276:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 800227a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800227e:	4288      	cmp	r0, r1
 8002280:	d027      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

08002282 <??zcl_cluster_report_check_timeout_8>:
 8002282:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 8002286:	2800      	cmp	r0, #0
 8002288:	d00e      	beq.n	80022a8 <??zcl_cluster_report_check_timeout_9>
 800228a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800228e:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 8002292:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002296:	fb00 1909 	mla	r9, r0, r9, r1
 800229a:	4649      	mov	r1, r9
 800229c:	0038      	movs	r0, r7
 800229e:	f011 fe65 	bl	8013f6c <ZbTimeoutRemaining>
 80022a2:	0004      	movs	r4, r0
 80022a4:	2c00      	cmp	r4, #0
 80022a6:	d114      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022a8 <??zcl_cluster_report_check_timeout_9>:
 80022a8:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80022ac:	2800      	cmp	r0, #0
 80022ae:	d010      	beq.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022b0 <??zcl_cluster_report_check_timeout_10>:
 80022b0:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80022b4:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 80022b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80022bc:	fb00 1909 	mla	r9, r0, r9, r1
 80022c0:	4649      	mov	r1, r9
 80022c2:	0038      	movs	r0, r7
 80022c4:	f011 fe52 	bl	8013f6c <ZbTimeoutRemaining>
 80022c8:	0004      	movs	r4, r0
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	d101      	bne.n	80022d2 <??zcl_cluster_report_check_timeout_7>

080022ce <??zcl_cluster_report_check_timeout_11>:
 80022ce:	2001      	movs	r0, #1
 80022d0:	e009      	b.n	80022e6 <??zcl_cluster_report_check_timeout_3>

080022d2 <??zcl_cluster_report_check_timeout_7>:
 80022d2:	6828      	ldr	r0, [r5, #0]
 80022d4:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80022d8:	4288      	cmp	r0, r1
 80022da:	d001      	beq.n	80022e0 <??zcl_cluster_report_check_timeout_12>
 80022dc:	682d      	ldr	r5, [r5, #0]
 80022de:	e7c7      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e0 <??zcl_cluster_report_check_timeout_12>:
 80022e0:	2500      	movs	r5, #0
 80022e2:	e7c5      	b.n	8002270 <??zcl_cluster_report_check_timeout_5>

080022e4 <??zcl_cluster_report_check_timeout_6>:
 80022e4:	2000      	movs	r0, #0

080022e6 <??zcl_cluster_report_check_timeout_3>:
 80022e6:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080022ec <zcl_cluster_reports_timer>:
 80022ec:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022f0:	b081      	sub	sp, #4
 80022f2:	ed2d 8b04 	vpush	{d8-d9}
 80022f6:	b0b0      	sub	sp, #192	@ 0xc0
 80022f8:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 80022fa:	9003      	str	r0, [sp, #12]
 80022fc:	2000      	movs	r0, #0
 80022fe:	9005      	str	r0, [sp, #20]
 8002300:	2000      	movs	r0, #0
 8002302:	9007      	str	r0, [sp, #28]
 8002304:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8002c00 <??DataTable9_4>
 8002308:	9006      	str	r0, [sp, #24]
 800230a:	2000      	movs	r0, #0
 800230c:	f88d 0010 	strb.w	r0, [sp, #16]
 8002310:	f05f 0b00 	movs.w	fp, #0
 8002314:	9803      	ldr	r0, [sp, #12]
 8002316:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800231a:	f88d 000b 	strb.w	r0, [sp, #11]
 800231e:	2000      	movs	r0, #0
 8002320:	f88d 000a 	strb.w	r0, [sp, #10]
 8002324:	2000      	movs	r0, #0
 8002326:	9903      	ldr	r1, [sp, #12]
 8002328:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 800232c:	2000      	movs	r0, #0
 800232e:	9903      	ldr	r1, [sp, #12]
 8002330:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8002334:	9803      	ldr	r0, [sp, #12]
 8002336:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002338:	9903      	ldr	r1, [sp, #12]
 800233a:	3130      	adds	r1, #48	@ 0x30
 800233c:	4288      	cmp	r0, r1
 800233e:	d002      	beq.n	8002346 <??zcl_cluster_reports_timer_1>
 8002340:	9803      	ldr	r0, [sp, #12]
 8002342:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002344:	e000      	b.n	8002348 <??zcl_cluster_reports_timer_2>

08002346 <??zcl_cluster_reports_timer_1>:
 8002346:	2000      	movs	r0, #0

08002348 <??zcl_cluster_reports_timer_2>:
 8002348:	2800      	cmp	r0, #0
 800234a:	f000 81f7 	beq.w	800273c <??zcl_cluster_reports_timer_3>

0800234e <??zcl_cluster_reports_timer_4>:
 800234e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002350:	f011 ff2f 	bl	80141b2 <ZbZclUptime>
 8002354:	9009      	str	r0, [sp, #36]	@ 0x24
 8002356:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8002358:	9803      	ldr	r0, [sp, #12]
 800235a:	f7ff ff71 	bl	8002240 <zcl_cluster_report_check_timeout>
 800235e:	2800      	cmp	r0, #0
 8002360:	d004      	beq.n	800236c <??zcl_cluster_reports_timer_5>
 8002362:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002364:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 8002368:	900b      	str	r0, [sp, #44]	@ 0x2c
 800236a:	e001      	b.n	8002370 <??zcl_cluster_reports_timer_6>

0800236c <??zcl_cluster_reports_timer_5>:
 800236c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800236e:	900b      	str	r0, [sp, #44]	@ 0x2c

08002370 <??zcl_cluster_reports_timer_6>:
 8002370:	2490      	movs	r4, #144	@ 0x90
 8002372:	2500      	movs	r5, #0
 8002374:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8002378:	002a      	movs	r2, r5
 800237a:	0021      	movs	r1, r4
 800237c:	4640      	mov	r0, r8
 800237e:	f003 fc85 	bl	8005c8c <__aeabi_memset>
 8002382:	2000      	movs	r0, #0
 8002384:	4682      	mov	sl, r0
 8002386:	2000      	movs	r0, #0
 8002388:	f88d 0008 	strb.w	r0, [sp, #8]
 800238c:	9803      	ldr	r0, [sp, #12]
 800238e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8002390:	9903      	ldr	r1, [sp, #12]
 8002392:	3130      	adds	r1, #48	@ 0x30
 8002394:	4288      	cmp	r0, r1
 8002396:	d002      	beq.n	800239e <??zcl_cluster_reports_timer_7>
 8002398:	9803      	ldr	r0, [sp, #12]
 800239a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 800239c:	e000      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800239e <??zcl_cluster_reports_timer_7>:
 800239e:	2600      	movs	r6, #0

080023a0 <??zcl_cluster_reports_timer_8>:
 80023a0:	2e00      	cmp	r6, #0
 80023a2:	f000 817b 	beq.w	800269c <??zcl_cluster_reports_timer_9>
 80023a6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023aa:	f88d 0009 	strb.w	r0, [sp, #9]
 80023ae:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8002c00 <??DataTable9_4>
 80023b2:	900a      	str	r0, [sp, #40]	@ 0x28
 80023b4:	0037      	movs	r7, r6
 80023b6:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80023b8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80023bc:	4288      	cmp	r0, r1
 80023be:	f000 8164 	beq.w	800268a <??zcl_cluster_reports_timer_10>

080023c2 <??zcl_cluster_reports_timer_11>:
 80023c2:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023c6:	2800      	cmp	r0, #0
 80023c8:	d116      	bne.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ca:	8c38      	ldrh	r0, [r7, #32]
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d013      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023d0:	6939      	ldr	r1, [r7, #16]
 80023d2:	8c3c      	ldrh	r4, [r7, #32]
 80023d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80023d8:	fb00 1404 	mla	r4, r0, r4, r1
 80023dc:	0021      	movs	r1, r4
 80023de:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80023e0:	f011 fdc4 	bl	8013f6c <ZbTimeoutRemaining>
 80023e4:	9008      	str	r0, [sp, #32]
 80023e6:	9808      	ldr	r0, [sp, #32]
 80023e8:	2800      	cmp	r0, #0
 80023ea:	d005      	beq.n	80023f8 <??zcl_cluster_reports_timer_12>
 80023ec:	9908      	ldr	r1, [sp, #32]
 80023ee:	9806      	ldr	r0, [sp, #24]
 80023f0:	f7ff febe 	bl	8002170 <zcl_report_check_time>
 80023f4:	9006      	str	r0, [sp, #24]
 80023f6:	e148      	b.n	800268a <??zcl_cluster_reports_timer_10>

080023f8 <??zcl_cluster_reports_timer_12>:
 80023f8:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d115      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002400:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002402:	2800      	cmp	r0, #0
 8002404:	d012      	beq.n	800242c <??zcl_cluster_reports_timer_13>
 8002406:	6939      	ldr	r1, [r7, #16]
 8002408:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800240a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800240e:	fb00 1404 	mla	r4, r0, r4, r1
 8002412:	0021      	movs	r1, r4
 8002414:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8002416:	f011 fda9 	bl	8013f6c <ZbTimeoutRemaining>
 800241a:	900a      	str	r0, [sp, #40]	@ 0x28
 800241c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800241e:	2800      	cmp	r0, #0
 8002420:	d104      	bne.n	800242c <??zcl_cluster_reports_timer_13>
 8002422:	2001      	movs	r0, #1
 8002424:	f88d 0009 	strb.w	r0, [sp, #9]
 8002428:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800242a:	6138      	str	r0, [r7, #16]

0800242c <??zcl_cluster_reports_timer_13>:
 800242c:	9803      	ldr	r0, [sp, #12]
 800242e:	8982      	ldrh	r2, [r0, #12]
 8002430:	9803      	ldr	r0, [sp, #12]
 8002432:	7b81      	ldrb	r1, [r0, #14]
 8002434:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002436:	f011 fbe0 	bl	8013bfa <ZbApsBindSrcExists>
 800243a:	2800      	cmp	r0, #0
 800243c:	d105      	bne.n	800244a <??zcl_cluster_reports_timer_14>
 800243e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002440:	9806      	ldr	r0, [sp, #24]
 8002442:	f7ff fe95 	bl	8002170 <zcl_report_check_time>
 8002446:	9006      	str	r0, [sp, #24]
 8002448:	e11f      	b.n	800268a <??zcl_cluster_reports_timer_10>

0800244a <??zcl_cluster_reports_timer_14>:
 800244a:	9805      	ldr	r0, [sp, #20]
 800244c:	2800      	cmp	r0, #0
 800244e:	d10b      	bne.n	8002468 <??zcl_cluster_reports_timer_15>
 8002450:	2300      	movs	r3, #0
 8002452:	a28a      	add	r2, pc, #552	@ (adr r2, 800267c <??zcl_cluster_reports_timer_0>)
 8002454:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002458:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800245a:	f012 f8e7 	bl	801462c <zb_heap_alloc>
 800245e:	9005      	str	r0, [sp, #20]
 8002460:	9805      	ldr	r0, [sp, #20]
 8002462:	2800      	cmp	r0, #0
 8002464:	f000 816a 	beq.w	800273c <??zcl_cluster_reports_timer_3>

08002468 <??zcl_cluster_reports_timer_15>:
 8002468:	2000      	movs	r0, #0
 800246a:	9001      	str	r0, [sp, #4]
 800246c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002470:	9000      	str	r0, [sp, #0]
 8002472:	9b05      	ldr	r3, [sp, #20]
 8002474:	f10d 0211 	add.w	r2, sp, #17
 8002478:	89b9      	ldrh	r1, [r7, #12]
 800247a:	9803      	ldr	r0, [sp, #12]
 800247c:	f7fd ffb3 	bl	80003e6 <ZbZclAttrRead>
 8002480:	2800      	cmp	r0, #0
 8002482:	d003      	beq.n	800248c <??zcl_cluster_reports_timer_16>
 8002484:	0038      	movs	r0, r7
 8002486:	f000 fb0a 	bl	8002a9e <zcl_reporting_disable>
 800248a:	e094      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

0800248c <??zcl_cluster_reports_timer_16>:
 800248c:	2300      	movs	r3, #0
 800248e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002492:	9905      	ldr	r1, [sp, #20]
 8002494:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8002498:	f7fe fdcd 	bl	8001036 <ZbZclAttrParseLength>
 800249c:	9007      	str	r0, [sp, #28]
 800249e:	9807      	ldr	r0, [sp, #28]
 80024a0:	2800      	cmp	r0, #0
 80024a2:	d503      	bpl.n	80024ac <??zcl_cluster_reports_timer_18>
 80024a4:	0038      	movs	r0, r7
 80024a6:	f000 fafa 	bl	8002a9e <zcl_reporting_disable>
 80024aa:	e084      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024ac <??zcl_cluster_reports_timer_18>:
 80024ac:	9807      	ldr	r0, [sp, #28]
 80024ae:	2800      	cmp	r0, #0
 80024b0:	f000 8081 	beq.w	80025b6 <??zcl_cluster_reports_timer_17>

080024b4 <??zcl_cluster_reports_timer_19>:
 80024b4:	7bb8      	ldrb	r0, [r7, #14]
 80024b6:	2838      	cmp	r0, #56	@ 0x38
 80024b8:	db37      	blt.n	800252a <??zcl_cluster_reports_timer_20>
 80024ba:	7bb8      	ldrb	r0, [r7, #14]
 80024bc:	283b      	cmp	r0, #59	@ 0x3b
 80024be:	da34      	bge.n	800252a <??zcl_cluster_reports_timer_20>
 80024c0:	f10d 0201 	add.w	r2, sp, #1
 80024c4:	9905      	ldr	r1, [sp, #20]
 80024c6:	7bb8      	ldrb	r0, [r7, #14]
 80024c8:	f002 fc9d 	bl	8004e06 <ZbZclParseFloat>
 80024cc:	eeb0 8a40 	vmov.f32	s16, s0
 80024d0:	eef0 8a60 	vmov.f32	s17, s1
 80024d4:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80024d8:	2800      	cmp	r0, #0
 80024da:	d003      	beq.n	80024e4 <??zcl_cluster_reports_timer_21>
 80024dc:	0038      	movs	r0, r7
 80024de:	f000 fade 	bl	8002a9e <zcl_reporting_disable>
 80024e2:	e068      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

080024e4 <??zcl_cluster_reports_timer_21>:
 80024e4:	ec51 0b18 	vmov	r0, r1, d8
 80024e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80024ec:	f003 fc80 	bl	8005df0 <__aeabi_dsub>
 80024f0:	ec41 0b19 	vmov	d9, r0, r1
 80024f4:	ec51 0b19 	vmov	r0, r1, d9
 80024f8:	2200      	movs	r2, #0
 80024fa:	2300      	movs	r3, #0
 80024fc:	f004 f890 	bl	8006620 <__aeabi_cdcmpeq>
 8002500:	d205      	bcs.n	800250e <??zcl_cluster_reports_timer_22>
 8002502:	ec51 0b19 	vmov	r0, r1, d9
 8002506:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800250a:	ec41 0b19 	vmov	d9, r0, r1

0800250e <??zcl_cluster_reports_timer_22>:
 800250e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002512:	2800      	cmp	r0, #0
 8002514:	d106      	bne.n	8002524 <??zcl_cluster_reports_timer_23>
 8002516:	ec51 0b19 	vmov	r0, r1, d9
 800251a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800251e:	f004 f87f 	bl	8006620 <__aeabi_cdcmpeq>
 8002522:	d348      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002524 <??zcl_cluster_reports_timer_23>:
 8002524:	ed87 8b06 	vstr	d8, [r7, #24]
 8002528:	e040      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800252a <??zcl_cluster_reports_timer_20>:
 800252a:	7bb8      	ldrb	r0, [r7, #14]
 800252c:	f7fe fe34 	bl	8001198 <ZbZclAttrIsAnalog>
 8002530:	2800      	cmp	r0, #0
 8002532:	d02b      	beq.n	800258c <??zcl_cluster_reports_timer_25>
 8002534:	466a      	mov	r2, sp
 8002536:	9905      	ldr	r1, [sp, #20]
 8002538:	7bb8      	ldrb	r0, [r7, #14]
 800253a:	f7fe ff2b 	bl	8001394 <ZbZclParseInteger>
 800253e:	0004      	movs	r4, r0
 8002540:	000d      	movs	r5, r1
 8002542:	f89d 0000 	ldrb.w	r0, [sp]
 8002546:	2800      	cmp	r0, #0
 8002548:	d003      	beq.n	8002552 <??zcl_cluster_reports_timer_26>
 800254a:	0038      	movs	r0, r7
 800254c:	f000 faa7 	bl	8002a9e <zcl_reporting_disable>
 8002550:	e031      	b.n	80025b6 <??zcl_cluster_reports_timer_17>

08002552 <??zcl_cluster_reports_timer_26>:
 8002552:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002556:	ebb4 0800 	subs.w	r8, r4, r0
 800255a:	eb75 0901 	sbcs.w	r9, r5, r1
 800255e:	f1b9 0f00 	cmp.w	r9, #0
 8002562:	d503      	bpl.n	800256c <??zcl_cluster_reports_timer_27>
 8002564:	f1d8 0800 	rsbs	r8, r8, #0
 8002568:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

0800256c <??zcl_cluster_reports_timer_27>:
 800256c:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002570:	2800      	cmp	r0, #0
 8002572:	d108      	bne.n	8002586 <??zcl_cluster_reports_timer_28>
 8002574:	4640      	mov	r0, r8
 8002576:	4649      	mov	r1, r9
 8002578:	f003 fdc4 	bl	8006104 <__aeabi_l2d>
 800257c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002580:	f004 f84e 	bl	8006620 <__aeabi_cdcmpeq>
 8002584:	d317      	bcc.n	80025b6 <??zcl_cluster_reports_timer_17>

08002586 <??zcl_cluster_reports_timer_28>:
 8002586:	e9c7 4506 	strd	r4, r5, [r7, #24]
 800258a:	e00f      	b.n	80025ac <??zcl_cluster_reports_timer_24>

0800258c <??zcl_cluster_reports_timer_25>:
 800258c:	9a07      	ldr	r2, [sp, #28]
 800258e:	9905      	ldr	r1, [sp, #20]
 8002590:	2000      	movs	r0, #0
 8002592:	f012 f869 	bl	8014668 <WpanCrc>
 8002596:	0001      	movs	r1, r0
 8002598:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800259c:	2800      	cmp	r0, #0
 800259e:	d104      	bne.n	80025aa <??zcl_cluster_reports_timer_29>
 80025a0:	8b38      	ldrh	r0, [r7, #24]
 80025a2:	000a      	movs	r2, r1
 80025a4:	b292      	uxth	r2, r2
 80025a6:	4290      	cmp	r0, r2
 80025a8:	d005      	beq.n	80025b6 <??zcl_cluster_reports_timer_17>

080025aa <??zcl_cluster_reports_timer_29>:
 80025aa:	8339      	strh	r1, [r7, #24]

080025ac <??zcl_cluster_reports_timer_24>:
 80025ac:	2001      	movs	r0, #1
 80025ae:	f88d 0009 	strb.w	r0, [sp, #9]
 80025b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80025b4:	6138      	str	r0, [r7, #16]

080025b6 <??zcl_cluster_reports_timer_17>:
 80025b6:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80025ba:	2800      	cmp	r0, #0
 80025bc:	d060      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025be:	9807      	ldr	r0, [sp, #28]
 80025c0:	2800      	cmp	r0, #0
 80025c2:	d05d      	beq.n	8002680 <??zcl_cluster_reports_timer_30>
 80025c4:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80025c8:	1c40      	adds	r0, r0, #1
 80025ca:	f88d 0010 	strb.w	r0, [sp, #16]
 80025ce:	4650      	mov	r0, sl
 80025d0:	b2c0      	uxtb	r0, r0
 80025d2:	280c      	cmp	r0, #12
 80025d4:	d007      	beq.n	80025e6 <??zcl_cluster_reports_timer_31>
 80025d6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80025da:	9907      	ldr	r1, [sp, #28]
 80025dc:	fa51 f080 	uxtab	r0, r1, r0
 80025e0:	1cc0      	adds	r0, r0, #3
 80025e2:	2837      	cmp	r0, #55	@ 0x37
 80025e4:	d314      	bcc.n	8002610 <??zcl_cluster_reports_timer_32>

080025e6 <??zcl_cluster_reports_timer_31>:
 80025e6:	465a      	mov	r2, fp
 80025e8:	a90c      	add	r1, sp, #48	@ 0x30
 80025ea:	9803      	ldr	r0, [sp, #12]
 80025ec:	f7ff fc8e 	bl	8001f0c <zcl_reporting_queue_report>
 80025f0:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80025f4:	2490      	movs	r4, #144	@ 0x90
 80025f6:	2500      	movs	r5, #0
 80025f8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80025fc:	002a      	movs	r2, r5
 80025fe:	0021      	movs	r1, r4
 8002600:	4640      	mov	r0, r8
 8002602:	f003 fb43 	bl	8005c8c <__aeabi_memset>
 8002606:	2000      	movs	r0, #0
 8002608:	4682      	mov	sl, r0
 800260a:	2000      	movs	r0, #0
 800260c:	f88d 0008 	strb.w	r0, [sp, #8]

08002610 <??zcl_cluster_reports_timer_32>:
 8002610:	9807      	ldr	r0, [sp, #28]
 8002612:	9001      	str	r0, [sp, #4]
 8002614:	9805      	ldr	r0, [sp, #20]
 8002616:	9000      	str	r0, [sp, #0]
 8002618:	7bbb      	ldrb	r3, [r7, #14]
 800261a:	89ba      	ldrh	r2, [r7, #12]
 800261c:	a90c      	add	r1, sp, #48	@ 0x30
 800261e:	4654      	mov	r4, sl
 8002620:	b2e4      	uxtb	r4, r4
 8002622:	200c      	movs	r0, #12
 8002624:	4344      	muls	r4, r0
 8002626:	4421      	add	r1, r4
 8002628:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800262a:	f7ff fdd9 	bl	80021e0 <zcl_report_append_attr>
 800262e:	2800      	cmp	r0, #0
 8002630:	d02b      	beq.n	800268a <??zcl_cluster_reports_timer_10>

08002632 <??zcl_cluster_reports_timer_33>:
 8002632:	f11a 0a01 	adds.w	sl, sl, #1
 8002636:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800263a:	9807      	ldr	r0, [sp, #28]
 800263c:	1841      	adds	r1, r0, r1
 800263e:	1cc9      	adds	r1, r1, #3
 8002640:	f88d 1008 	strb.w	r1, [sp, #8]
 8002644:	8c38      	ldrh	r0, [r7, #32]
 8002646:	2800      	cmp	r0, #0
 8002648:	d005      	beq.n	8002656 <??zcl_cluster_reports_timer_34>
 800264a:	8c39      	ldrh	r1, [r7, #32]
 800264c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002650:	4341      	muls	r1, r0
 8002652:	9108      	str	r1, [sp, #32]
 8002654:	e00b      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002656 <??zcl_cluster_reports_timer_34>:
 8002656:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8002658:	2800      	cmp	r0, #0
 800265a:	d005      	beq.n	8002668 <??zcl_cluster_reports_timer_36>
 800265c:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 800265e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002662:	4341      	muls	r1, r0
 8002664:	9108      	str	r1, [sp, #32]
 8002666:	e002      	b.n	800266e <??zcl_cluster_reports_timer_35>

08002668 <??zcl_cluster_reports_timer_36>:
 8002668:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8002c00 <??DataTable9_4>
 800266c:	9008      	str	r0, [sp, #32]

0800266e <??zcl_cluster_reports_timer_35>:
 800266e:	9908      	ldr	r1, [sp, #32]
 8002670:	9806      	ldr	r0, [sp, #24]
 8002672:	f7ff fd7d 	bl	8002170 <zcl_report_check_time>
 8002676:	9006      	str	r0, [sp, #24]
 8002678:	e007      	b.n	800268a <??zcl_cluster_reports_timer_10>
 800267a:	bf00      	nop

0800267c <??zcl_cluster_reports_timer_0>:
 800267c:	0000 0000                                   ....

08002680 <??zcl_cluster_reports_timer_30>:
 8002680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8002682:	9806      	ldr	r0, [sp, #24]
 8002684:	f7ff fd74 	bl	8002170 <zcl_report_check_time>
 8002688:	9006      	str	r0, [sp, #24]

0800268a <??zcl_cluster_reports_timer_10>:
 800268a:	6830      	ldr	r0, [r6, #0]
 800268c:	9903      	ldr	r1, [sp, #12]
 800268e:	3130      	adds	r1, #48	@ 0x30
 8002690:	4288      	cmp	r0, r1
 8002692:	d001      	beq.n	8002698 <??zcl_cluster_reports_timer_37>
 8002694:	6836      	ldr	r6, [r6, #0]
 8002696:	e683      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

08002698 <??zcl_cluster_reports_timer_37>:
 8002698:	2600      	movs	r6, #0
 800269a:	e681      	b.n	80023a0 <??zcl_cluster_reports_timer_8>

0800269c <??zcl_cluster_reports_timer_9>:
 800269c:	9805      	ldr	r0, [sp, #20]
 800269e:	2800      	cmp	r0, #0
 80026a0:	d04c      	beq.n	800273c <??zcl_cluster_reports_timer_3>
 80026a2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80026a6:	2800      	cmp	r0, #0
 80026a8:	d042      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 80026aa:	2001      	movs	r0, #1
 80026ac:	9007      	str	r0, [sp, #28]
 80026ae:	2001      	movs	r0, #1
 80026b0:	9905      	ldr	r1, [sp, #20]
 80026b2:	7008      	strb	r0, [r1, #0]
 80026b4:	4650      	mov	r0, sl
 80026b6:	b2c0      	uxtb	r0, r0
 80026b8:	280c      	cmp	r0, #12
 80026ba:	d007      	beq.n	80026cc <??zcl_cluster_reports_timer_39>
 80026bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80026c0:	9907      	ldr	r1, [sp, #28]
 80026c2:	fa51 f080 	uxtab	r0, r1, r0
 80026c6:	1cc0      	adds	r0, r0, #3
 80026c8:	2837      	cmp	r0, #55	@ 0x37
 80026ca:	d314      	bcc.n	80026f6 <??zcl_cluster_reports_timer_40>

080026cc <??zcl_cluster_reports_timer_39>:
 80026cc:	465a      	mov	r2, fp
 80026ce:	a90c      	add	r1, sp, #48	@ 0x30
 80026d0:	9803      	ldr	r0, [sp, #12]
 80026d2:	f7ff fc1b 	bl	8001f0c <zcl_reporting_queue_report>
 80026d6:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 80026da:	2490      	movs	r4, #144	@ 0x90
 80026dc:	2500      	movs	r5, #0
 80026de:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80026e2:	002a      	movs	r2, r5
 80026e4:	0021      	movs	r1, r4
 80026e6:	4640      	mov	r0, r8
 80026e8:	f003 fad0 	bl	8005c8c <__aeabi_memset>
 80026ec:	2000      	movs	r0, #0
 80026ee:	4682      	mov	sl, r0
 80026f0:	2000      	movs	r0, #0
 80026f2:	f88d 0008 	strb.w	r0, [sp, #8]

080026f6 <??zcl_cluster_reports_timer_40>:
 80026f6:	9807      	ldr	r0, [sp, #28]
 80026f8:	9001      	str	r0, [sp, #4]
 80026fa:	9805      	ldr	r0, [sp, #20]
 80026fc:	9000      	str	r0, [sp, #0]
 80026fe:	2330      	movs	r3, #48	@ 0x30
 8002700:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002704:	a90c      	add	r1, sp, #48	@ 0x30
 8002706:	4654      	mov	r4, sl
 8002708:	b2e4      	uxtb	r4, r4
 800270a:	200c      	movs	r0, #12
 800270c:	4344      	muls	r4, r0
 800270e:	4421      	add	r1, r4
 8002710:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002712:	f7ff fd65 	bl	80021e0 <zcl_report_append_attr>
 8002716:	2800      	cmp	r0, #0
 8002718:	d001      	beq.n	800271e <??zcl_cluster_reports_timer_41>
 800271a:	f11a 0a01 	adds.w	sl, sl, #1

0800271e <??zcl_cluster_reports_timer_41>:
 800271e:	4650      	mov	r0, sl
 8002720:	b2c0      	uxtb	r0, r0
 8002722:	2800      	cmp	r0, #0
 8002724:	d004      	beq.n	8002730 <??zcl_cluster_reports_timer_38>
 8002726:	465a      	mov	r2, fp
 8002728:	a90c      	add	r1, sp, #48	@ 0x30
 800272a:	9803      	ldr	r0, [sp, #12]
 800272c:	f7ff fbee 	bl	8001f0c <zcl_reporting_queue_report>

08002730 <??zcl_cluster_reports_timer_38>:
 8002730:	2300      	movs	r3, #0
 8002732:	a2ba      	add	r2, pc, #744	@ (adr r2, 8002a1c <??DataTable7>)
 8002734:	9905      	ldr	r1, [sp, #20]
 8002736:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002738:	f011 ff87 	bl	801464a <zb_heap_free>

0800273c <??zcl_cluster_reports_timer_3>:
 800273c:	9806      	ldr	r0, [sp, #24]
 800273e:	28c8      	cmp	r0, #200	@ 0xc8
 8002740:	d201      	bcs.n	8002746 <??zcl_cluster_reports_timer_42>
 8002742:	20c8      	movs	r0, #200	@ 0xc8
 8002744:	9006      	str	r0, [sp, #24]

08002746 <??zcl_cluster_reports_timer_42>:
 8002746:	9803      	ldr	r0, [sp, #12]
 8002748:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800274a:	2800      	cmp	r0, #0
 800274c:	d00c      	beq.n	8002768 <??zcl_cluster_reports_timer_43>
 800274e:	9803      	ldr	r0, [sp, #12]
 8002750:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8002752:	9906      	ldr	r1, [sp, #24]
 8002754:	9803      	ldr	r0, [sp, #12]
 8002756:	9b03      	ldr	r3, [sp, #12]
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4798      	blx	r3
 800275c:	2000      	movs	r0, #0
 800275e:	9903      	ldr	r1, [sp, #12]
 8002760:	6408      	str	r0, [r1, #64]	@ 0x40
 8002762:	2000      	movs	r0, #0
 8002764:	9903      	ldr	r1, [sp, #12]
 8002766:	6448      	str	r0, [r1, #68]	@ 0x44

08002768 <??zcl_cluster_reports_timer_43>:
 8002768:	2301      	movs	r3, #1
 800276a:	f10d 020a 	add.w	r2, sp, #10
 800276e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002772:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8002774:	f011 fcac 	bl	80140d0 <ZbNwkGet>
 8002778:	2800      	cmp	r0, #0
 800277a:	d002      	beq.n	8002782 <??zcl_cluster_reports_timer_44>
 800277c:	2000      	movs	r0, #0
 800277e:	f88d 000a 	strb.w	r0, [sp, #10]

08002782 <??zcl_cluster_reports_timer_44>:
 8002782:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8002786:	2800      	cmp	r0, #0
 8002788:	d110      	bne.n	80027ac <??zcl_cluster_reports_timer_45>
 800278a:	9803      	ldr	r0, [sp, #12]
 800278c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800278e:	9903      	ldr	r1, [sp, #12]
 8002790:	3130      	adds	r1, #48	@ 0x30
 8002792:	4288      	cmp	r0, r1
 8002794:	d002      	beq.n	800279c <??zcl_cluster_reports_timer_46>
 8002796:	9803      	ldr	r0, [sp, #12]
 8002798:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800279a:	e000      	b.n	800279e <??zcl_cluster_reports_timer_47>

0800279c <??zcl_cluster_reports_timer_46>:
 800279c:	2000      	movs	r0, #0

0800279e <??zcl_cluster_reports_timer_47>:
 800279e:	2800      	cmp	r0, #0
 80027a0:	d004      	beq.n	80027ac <??zcl_cluster_reports_timer_45>
 80027a2:	9906      	ldr	r1, [sp, #24]
 80027a4:	9803      	ldr	r0, [sp, #12]
 80027a6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80027a8:	f011 fbb0 	bl	8013f0c <ZbTimerReset>

080027ac <??zcl_cluster_reports_timer_45>:
 80027ac:	b030      	add	sp, #192	@ 0xc0
 80027ae:	ecbd 8b04 	vpop	{d8-d9}
 80027b2:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080027b6 <zcl_attr_reporting_check>:
 80027b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027b8:	0005      	movs	r5, r0
 80027ba:	000e      	movs	r6, r1
 80027bc:	0017      	movs	r7, r2
 80027be:	2000      	movs	r0, #0
 80027c0:	f88d 0000 	strb.w	r0, [sp]
 80027c4:	2301      	movs	r3, #1
 80027c6:	466a      	mov	r2, sp
 80027c8:	f240 410c 	movw	r1, #1036	@ 0x40c
 80027cc:	68a8      	ldr	r0, [r5, #8]
 80027ce:	f011 fc7f 	bl	80140d0 <ZbNwkGet>
 80027d2:	2800      	cmp	r0, #0
 80027d4:	d002      	beq.n	80027dc <??zcl_attr_reporting_check_0>
 80027d6:	2000      	movs	r0, #0
 80027d8:	f88d 0000 	strb.w	r0, [sp]

080027dc <??zcl_attr_reporting_check_0>:
 80027dc:	f89d 0000 	ldrb.w	r0, [sp]
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d10d      	bne.n	8002800 <??zcl_attr_reporting_check_1>
 80027e4:	003a      	movs	r2, r7
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	0031      	movs	r1, r6
 80027ea:	b289      	uxth	r1, r1
 80027ec:	0028      	movs	r0, r5
 80027ee:	f000 f81a 	bl	8002826 <zcl_reporting_find>
 80027f2:	0004      	movs	r4, r0
 80027f4:	2c00      	cmp	r4, #0
 80027f6:	d003      	beq.n	8002800 <??zcl_attr_reporting_check_1>
 80027f8:	21c8      	movs	r1, #200	@ 0xc8
 80027fa:	0028      	movs	r0, r5
 80027fc:	f7ff fcbd 	bl	800217a <zcl_report_kick>

08002800 <??zcl_attr_reporting_check_1>:
 8002800:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08002802 <ZbZclReportCleanup>:
 8002802:	b570      	push	{r4, r5, r6, lr}
 8002804:	0005      	movs	r5, r0

08002806 <??ZbZclReportCleanup_0>:
 8002806:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8002808:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 800280c:	4288      	cmp	r0, r1
 800280e:	d001      	beq.n	8002814 <??ZbZclReportCleanup_1>
 8002810:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8002812:	e000      	b.n	8002816 <??ZbZclReportCleanup_2>

08002814 <??ZbZclReportCleanup_1>:
 8002814:	2400      	movs	r4, #0

08002816 <??ZbZclReportCleanup_2>:
 8002816:	2c00      	cmp	r4, #0
 8002818:	d004      	beq.n	8002824 <??ZbZclReportCleanup_3>

0800281a <??ZbZclReportCleanup_4>:
 800281a:	0026      	movs	r6, r4
 800281c:	0030      	movs	r0, r6
 800281e:	f000 f8ff 	bl	8002a20 <zcl_reporting_delete>
 8002822:	e7f0      	b.n	8002806 <??ZbZclReportCleanup_0>

08002824 <??ZbZclReportCleanup_3>:
 8002824:	bd70      	pop	{r4, r5, r6, pc}

08002826 <zcl_reporting_find>:
 8002826:	b470      	push	{r4, r5, r6}
 8002828:	0004      	movs	r4, r0
 800282a:	000b      	movs	r3, r1
 800282c:	0010      	movs	r0, r2
 800282e:	b2c0      	uxtb	r0, r0
 8002830:	2801      	cmp	r0, #1
 8002832:	d101      	bne.n	8002838 <??zcl_reporting_find_0>
 8002834:	2000      	movs	r0, #0
 8002836:	e01c      	b.n	8002872 <??zcl_reporting_find_1>

08002838 <??zcl_reporting_find_0>:
 8002838:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800283a:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 800283e:	4288      	cmp	r0, r1
 8002840:	d001      	beq.n	8002846 <??zcl_reporting_find_2>
 8002842:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002844:	e000      	b.n	8002848 <??zcl_reporting_find_3>

08002846 <??zcl_reporting_find_2>:
 8002846:	2100      	movs	r1, #0

08002848 <??zcl_reporting_find_3>:
 8002848:	2900      	cmp	r1, #0
 800284a:	d011      	beq.n	8002870 <??zcl_reporting_find_4>
 800284c:	000d      	movs	r5, r1
 800284e:	89a8      	ldrh	r0, [r5, #12]
 8002850:	001e      	movs	r6, r3
 8002852:	b2b6      	uxth	r6, r6
 8002854:	42b0      	cmp	r0, r6
 8002856:	d005      	beq.n	8002864 <??zcl_reporting_find_5>
 8002858:	6808      	ldr	r0, [r1, #0]
 800285a:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 800285e:	42b0      	cmp	r0, r6
 8002860:	d004      	beq.n	800286c <??zcl_reporting_find_6>
 8002862:	e001      	b.n	8002868 <??zcl_reporting_find_7>

08002864 <??zcl_reporting_find_5>:
 8002864:	0028      	movs	r0, r5
 8002866:	e004      	b.n	8002872 <??zcl_reporting_find_1>

08002868 <??zcl_reporting_find_7>:
 8002868:	6809      	ldr	r1, [r1, #0]
 800286a:	e7ed      	b.n	8002848 <??zcl_reporting_find_3>

0800286c <??zcl_reporting_find_6>:
 800286c:	2100      	movs	r1, #0
 800286e:	e7eb      	b.n	8002848 <??zcl_reporting_find_3>

08002870 <??zcl_reporting_find_4>:
 8002870:	2000      	movs	r0, #0

08002872 <??zcl_reporting_find_1>:
 8002872:	bc70      	pop	{r4, r5, r6}
 8002874:	4770      	bx	lr

08002876 <zcl_reporting_stack_event>:
 8002876:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800287a:	0006      	movs	r6, r0
 800287c:	000f      	movs	r7, r1
 800287e:	4690      	mov	r8, r2
 8002880:	4699      	mov	r9, r3
 8002882:	46ca      	mov	sl, r9
 8002884:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 8002888:	d001      	beq.n	800288e <??zcl_reporting_stack_event_0>
 800288a:	2000      	movs	r0, #0
 800288c:	e01b      	b.n	80028c6 <??zcl_reporting_stack_event_1>

0800288e <??zcl_reporting_stack_event_0>:
 800288e:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 8002892:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8002896:	4288      	cmp	r0, r1
 8002898:	d002      	beq.n	80028a0 <??zcl_reporting_stack_event_2>
 800289a:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 800289e:	e000      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028a0 <??zcl_reporting_stack_event_2>:
 80028a0:	2400      	movs	r4, #0

080028a2 <??zcl_reporting_stack_event_3>:
 80028a2:	2c00      	cmp	r4, #0
 80028a4:	d00e      	beq.n	80028c4 <??zcl_reporting_stack_event_4>
 80028a6:	0025      	movs	r5, r4
 80028a8:	2201      	movs	r2, #1
 80028aa:	0029      	movs	r1, r5
 80028ac:	0030      	movs	r0, r6
 80028ae:	f000 f947 	bl	8002b40 <zcl_reporting_reset_defaults>
 80028b2:	6820      	ldr	r0, [r4, #0]
 80028b4:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 80028b8:	4288      	cmp	r0, r1
 80028ba:	d001      	beq.n	80028c0 <??zcl_reporting_stack_event_5>
 80028bc:	6824      	ldr	r4, [r4, #0]
 80028be:	e7f0      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c0 <??zcl_reporting_stack_event_5>:
 80028c0:	2400      	movs	r4, #0
 80028c2:	e7ee      	b.n	80028a2 <??zcl_reporting_stack_event_3>

080028c4 <??zcl_reporting_stack_event_4>:
 80028c4:	2000      	movs	r0, #0

080028c6 <??zcl_reporting_stack_event_1>:
 80028c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080028ca <zcl_reporting_save_curr_val>:
 80028ca:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 80028ce:	0005      	movs	r5, r0
 80028d0:	000e      	movs	r6, r1
 80028d2:	68af      	ldr	r7, [r5, #8]
 80028d4:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 80028d8:	2300      	movs	r3, #0
 80028da:	464a      	mov	r2, r9
 80028dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80028e0:	0038      	movs	r0, r7
 80028e2:	f011 fea3 	bl	801462c <zb_heap_alloc>
 80028e6:	0004      	movs	r4, r0
 80028e8:	2c00      	cmp	r4, #0
 80028ea:	d101      	bne.n	80028f0 <??zcl_reporting_save_curr_val_0>
 80028ec:	2089      	movs	r0, #137	@ 0x89
 80028ee:	e05d      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

080028f0 <??zcl_reporting_save_curr_val_0>:
 80028f0:	2001      	movs	r0, #1
 80028f2:	9001      	str	r0, [sp, #4]
 80028f4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80028f8:	9000      	str	r0, [sp, #0]
 80028fa:	0023      	movs	r3, r4
 80028fc:	f10d 0209 	add.w	r2, sp, #9
 8002900:	89b1      	ldrh	r1, [r6, #12]
 8002902:	0028      	movs	r0, r5
 8002904:	f7fd fd6f 	bl	80003e6 <ZbZclAttrRead>
 8002908:	f88d 0008 	strb.w	r0, [sp, #8]
 800290c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002910:	2800      	cmp	r0, #0
 8002912:	d002      	beq.n	800291a <??zcl_reporting_save_curr_val_2>
 8002914:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002918:	e048      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800291a <??zcl_reporting_save_curr_val_2>:
 800291a:	7bb0      	ldrb	r0, [r6, #14]
 800291c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8002920:	4288      	cmp	r0, r1
 8002922:	d001      	beq.n	8002928 <??zcl_reporting_save_curr_val_3>
 8002924:	208d      	movs	r0, #141	@ 0x8d
 8002926:	e041      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002928 <??zcl_reporting_save_curr_val_3>:
 8002928:	2300      	movs	r3, #0
 800292a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800292e:	0021      	movs	r1, r4
 8002930:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8002934:	f7fe fb7f 	bl	8001036 <ZbZclAttrParseLength>
 8002938:	4680      	mov	r8, r0
 800293a:	f1b8 0f00 	cmp.w	r8, #0
 800293e:	d501      	bpl.n	8002944 <??zcl_reporting_save_curr_val_4>
 8002940:	2089      	movs	r0, #137	@ 0x89
 8002942:	e033      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002944 <??zcl_reporting_save_curr_val_4>:
 8002944:	7bb0      	ldrb	r0, [r6, #14]
 8002946:	f7fe fc27 	bl	8001198 <ZbZclAttrIsAnalog>
 800294a:	2800      	cmp	r0, #0
 800294c:	d106      	bne.n	800295c <??zcl_reporting_save_curr_val_5>
 800294e:	4642      	mov	r2, r8
 8002950:	0021      	movs	r1, r4
 8002952:	2000      	movs	r0, #0
 8002954:	f011 fe88 	bl	8014668 <WpanCrc>
 8002958:	8330      	strh	r0, [r6, #24]
 800295a:	e020      	b.n	800299e <??zcl_reporting_save_curr_val_6>

0800295c <??zcl_reporting_save_curr_val_5>:
 800295c:	7bb0      	ldrb	r0, [r6, #14]
 800295e:	f002 fd77 	bl	8005450 <ZbZclAttrIsFloat>
 8002962:	2800      	cmp	r0, #0
 8002964:	d00d      	beq.n	8002982 <??zcl_reporting_save_curr_val_7>
 8002966:	aa02      	add	r2, sp, #8
 8002968:	0021      	movs	r1, r4
 800296a:	7bb0      	ldrb	r0, [r6, #14]
 800296c:	f002 fa4b 	bl	8004e06 <ZbZclParseFloat>
 8002970:	ed86 0b06 	vstr	d0, [r6, #24]
 8002974:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002978:	2800      	cmp	r0, #0
 800297a:	d010      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 800297c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002980:	e014      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

08002982 <??zcl_reporting_save_curr_val_7>:
 8002982:	aa02      	add	r2, sp, #8
 8002984:	0021      	movs	r1, r4
 8002986:	7bb0      	ldrb	r0, [r6, #14]
 8002988:	f7fe fd04 	bl	8001394 <ZbZclParseInteger>
 800298c:	e9c6 0106 	strd	r0, r1, [r6, #24]
 8002990:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002994:	2800      	cmp	r0, #0
 8002996:	d002      	beq.n	800299e <??zcl_reporting_save_curr_val_6>
 8002998:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800299c:	e006      	b.n	80029ac <??zcl_reporting_save_curr_val_1>

0800299e <??zcl_reporting_save_curr_val_6>:
 800299e:	2300      	movs	r3, #0
 80029a0:	464a      	mov	r2, r9
 80029a2:	0021      	movs	r1, r4
 80029a4:	0038      	movs	r0, r7
 80029a6:	f011 fe50 	bl	801464a <zb_heap_free>
 80029aa:	2000      	movs	r0, #0

080029ac <??zcl_reporting_save_curr_val_1>:
 80029ac:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

080029b0 <zcl_reporting_create_new>:
 80029b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029b4:	0006      	movs	r6, r0
 80029b6:	000f      	movs	r7, r1
 80029b8:	f8d6 8008 	ldr.w	r8, [r6, #8]
 80029bc:	2200      	movs	r2, #0
 80029be:	89b9      	ldrh	r1, [r7, #12]
 80029c0:	0030      	movs	r0, r6
 80029c2:	f7ff ff30 	bl	8002826 <zcl_reporting_find>
 80029c6:	0005      	movs	r5, r0
 80029c8:	2d00      	cmp	r5, #0
 80029ca:	d001      	beq.n	80029d0 <??zcl_reporting_create_new_0>
 80029cc:	0028      	movs	r0, r5
 80029ce:	e023      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029d0 <??zcl_reporting_create_new_0>:
 80029d0:	2300      	movs	r3, #0
 80029d2:	a212      	add	r2, pc, #72	@ (adr r2, 8002a1c <??DataTable7>)
 80029d4:	2138      	movs	r1, #56	@ 0x38
 80029d6:	4640      	mov	r0, r8
 80029d8:	f011 fe28 	bl	801462c <zb_heap_alloc>
 80029dc:	0004      	movs	r4, r0
 80029de:	2c00      	cmp	r4, #0
 80029e0:	d101      	bne.n	80029e6 <??zcl_reporting_create_new_2>
 80029e2:	2000      	movs	r0, #0
 80029e4:	e018      	b.n	8002a18 <??zcl_reporting_create_new_1>

080029e6 <??zcl_reporting_create_new_2>:
 80029e6:	2538      	movs	r5, #56	@ 0x38
 80029e8:	46b9      	mov	r9, r7
 80029ea:	46a2      	mov	sl, r4
 80029ec:	002a      	movs	r2, r5
 80029ee:	4649      	mov	r1, r9
 80029f0:	4650      	mov	r0, sl
 80029f2:	f014 fbc4 	bl	801717e <__aeabi_memcpy>
 80029f6:	6024      	str	r4, [r4, #0]
 80029f8:	6064      	str	r4, [r4, #4]
 80029fa:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 80029fe:	6020      	str	r0, [r4, #0]
 8002a00:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8002a02:	6060      	str	r0, [r4, #4]
 8002a04:	6820      	ldr	r0, [r4, #0]
 8002a06:	6044      	str	r4, [r0, #4]
 8002a08:	6860      	ldr	r0, [r4, #4]
 8002a0a:	6004      	str	r4, [r0, #0]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	0021      	movs	r1, r4
 8002a10:	4640      	mov	r0, r8
 8002a12:	f000 f895 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002a16:	0020      	movs	r0, r4

08002a18 <??zcl_reporting_create_new_1>:
 8002a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002a1c <??DataTable7>:
 8002a1c:	0000 0000                                   ....

08002a20 <zcl_reporting_delete>:
 8002a20:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002a22:	0004      	movs	r4, r0
 8002a24:	68a5      	ldr	r5, [r4, #8]
 8002a26:	68ae      	ldr	r6, [r5, #8]
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f88d 0000 	strb.w	r0, [sp]
 8002a2e:	6860      	ldr	r0, [r4, #4]
 8002a30:	6821      	ldr	r1, [r4, #0]
 8002a32:	6048      	str	r0, [r1, #4]
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	6861      	ldr	r1, [r4, #4]
 8002a38:	6008      	str	r0, [r1, #0]
 8002a3a:	6024      	str	r4, [r4, #0]
 8002a3c:	6064      	str	r4, [r4, #4]
 8002a3e:	2300      	movs	r3, #0
 8002a40:	a26c      	add	r2, pc, #432	@ (adr r2, 8002bf4 <??DataTable9_1>)
 8002a42:	0021      	movs	r1, r4
 8002a44:	0030      	movs	r0, r6
 8002a46:	f011 fe00 	bl	801464a <zb_heap_free>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	466a      	mov	r2, sp
 8002a4e:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002a52:	0030      	movs	r0, r6
 8002a54:	f011 fb3c 	bl	80140d0 <ZbNwkGet>
 8002a58:	2800      	cmp	r0, #0
 8002a5a:	d002      	beq.n	8002a62 <??zcl_reporting_delete_0>
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f88d 0000 	strb.w	r0, [sp]

08002a62 <??zcl_reporting_delete_0>:
 8002a62:	f89d 0000 	ldrb.w	r0, [sp]
 8002a66:	2800      	cmp	r0, #0
 8002a68:	d103      	bne.n	8002a72 <??zcl_reporting_delete_1>
 8002a6a:	21c8      	movs	r1, #200	@ 0xc8
 8002a6c:	0028      	movs	r0, r5
 8002a6e:	f7ff fb84 	bl	800217a <zcl_report_kick>

08002a72 <??zcl_reporting_delete_1>:
 8002a72:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002a74 <zcl_cluster_attr_report_delete>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	0005      	movs	r5, r0
 8002a78:	000e      	movs	r6, r1
 8002a7a:	0017      	movs	r7, r2
 8002a7c:	003a      	movs	r2, r7
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	0031      	movs	r1, r6
 8002a82:	b289      	uxth	r1, r1
 8002a84:	0028      	movs	r0, r5
 8002a86:	f7ff fece 	bl	8002826 <zcl_reporting_find>
 8002a8a:	0004      	movs	r4, r0
 8002a8c:	2c00      	cmp	r4, #0
 8002a8e:	d101      	bne.n	8002a94 <??zcl_cluster_attr_report_delete_0>
 8002a90:	2000      	movs	r0, #0
 8002a92:	e003      	b.n	8002a9c <??zcl_cluster_attr_report_delete_1>

08002a94 <??zcl_cluster_attr_report_delete_0>:
 8002a94:	0020      	movs	r0, r4
 8002a96:	f7ff ffc3 	bl	8002a20 <zcl_reporting_delete>
 8002a9a:	2001      	movs	r0, #1

08002a9c <??zcl_cluster_attr_report_delete_1>:
 8002a9c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08002a9e <zcl_reporting_disable>:
 8002a9e:	b538      	push	{r3, r4, r5, lr}
 8002aa0:	0004      	movs	r4, r0
 8002aa2:	68a0      	ldr	r0, [r4, #8]
 8002aa4:	6885      	ldr	r5, [r0, #8]
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f88d 0000 	strb.w	r0, [sp]
 8002aac:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ab0:	8460      	strh	r0, [r4, #34]	@ 0x22
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	8420      	strh	r0, [r4, #32]
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	466a      	mov	r2, sp
 8002aba:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002abe:	0028      	movs	r0, r5
 8002ac0:	f011 fb06 	bl	80140d0 <ZbNwkGet>
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	d002      	beq.n	8002ace <??zcl_reporting_disable_0>
 8002ac8:	2000      	movs	r0, #0
 8002aca:	f88d 0000 	strb.w	r0, [sp]

08002ace <??zcl_reporting_disable_0>:
 8002ace:	f89d 0000 	ldrb.w	r0, [sp]
 8002ad2:	2800      	cmp	r0, #0
 8002ad4:	d103      	bne.n	8002ade <??zcl_reporting_disable_1>
 8002ad6:	21c8      	movs	r1, #200	@ 0xc8
 8002ad8:	68a0      	ldr	r0, [r4, #8]
 8002ada:	f7ff fb4e 	bl	800217a <zcl_report_kick>

08002ade <??zcl_reporting_disable_1>:
 8002ade:	bd31      	pop	{r0, r4, r5, pc}

08002ae0 <zcl_reporting_check_default_intvl>:
 8002ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002ae4:	880a      	ldrh	r2, [r1, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d00e      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002aea:	880a      	ldrh	r2, [r1, #0]
 8002aec:	2a00      	cmp	r2, #0
 8002aee:	d00b      	beq.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002af0:	880a      	ldrh	r2, [r1, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d102      	bne.n	8002afc <??zcl_reporting_check_default_intvl_1>
 8002af6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8002afa:	800a      	strh	r2, [r1, #0]

08002afc <??zcl_reporting_check_default_intvl_1>:
 8002afc:	880a      	ldrh	r2, [r1, #0]
 8002afe:	8803      	ldrh	r3, [r0, #0]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d201      	bcs.n	8002b08 <??zcl_reporting_check_default_intvl_0>
 8002b04:	2200      	movs	r2, #0
 8002b06:	8002      	strh	r2, [r0, #0]

08002b08 <??zcl_reporting_check_default_intvl_0>:
 8002b08:	4770      	bx	lr

08002b0a <zcl_reporting_config_attr_defaults>:
 8002b0a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b0c:	0004      	movs	r4, r0
 8002b0e:	000d      	movs	r5, r1
 8002b10:	0016      	movs	r6, r2
 8002b12:	8aa8      	ldrh	r0, [r5, #20]
 8002b14:	f8ad 0002 	strh.w	r0, [sp, #2]
 8002b18:	8ae8      	ldrh	r0, [r5, #22]
 8002b1a:	f8ad 0000 	strh.w	r0, [sp]
 8002b1e:	4669      	mov	r1, sp
 8002b20:	f10d 0002 	add.w	r0, sp, #2
 8002b24:	f7ff ffdc 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 8002b28:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8002b2c:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002b2e:	f8bd 0000 	ldrh.w	r0, [sp]
 8002b32:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8002b34:	2200      	movs	r2, #0
 8002b36:	0031      	movs	r1, r6
 8002b38:	0020      	movs	r0, r4
 8002b3a:	f000 f801 	bl	8002b40 <zcl_reporting_reset_defaults>
 8002b3e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002b40 <zcl_reporting_reset_defaults>:
 8002b40:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8002b42:	0004      	movs	r4, r0
 8002b44:	000d      	movs	r5, r1
 8002b46:	0016      	movs	r6, r2
 8002b48:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8002b4a:	8428      	strh	r0, [r5, #32]
 8002b4c:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8002b4e:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b50:	8c28      	ldrh	r0, [r5, #32]
 8002b52:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002b56:	4288      	cmp	r0, r1
 8002b58:	d106      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b5a:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8002b5c:	2800      	cmp	r0, #0
 8002b5e:	d103      	bne.n	8002b68 <??zcl_reporting_reset_defaults_0>
 8002b60:	203d      	movs	r0, #61	@ 0x3d
 8002b62:	8468      	strh	r0, [r5, #34]	@ 0x22
 8002b64:	2000      	movs	r0, #0
 8002b66:	8428      	strh	r0, [r5, #32]

08002b68 <??zcl_reporting_reset_defaults_0>:
 8002b68:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8002b6c:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8002b70:	0020      	movs	r0, r4
 8002b72:	f011 fb1e 	bl	80141b2 <ZbZclUptime>
 8002b76:	6128      	str	r0, [r5, #16]
 8002b78:	0030      	movs	r0, r6
 8002b7a:	b2c0      	uxtb	r0, r0
 8002b7c:	2800      	cmp	r0, #0
 8002b7e:	d013      	beq.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002b80:	2301      	movs	r3, #1
 8002b82:	466a      	mov	r2, sp
 8002b84:	f240 410c 	movw	r1, #1036	@ 0x40c
 8002b88:	0020      	movs	r0, r4
 8002b8a:	f011 faa1 	bl	80140d0 <ZbNwkGet>
 8002b8e:	2800      	cmp	r0, #0
 8002b90:	d002      	beq.n	8002b98 <??zcl_reporting_reset_defaults_2>
 8002b92:	2000      	movs	r0, #0
 8002b94:	f88d 0000 	strb.w	r0, [sp]

08002b98 <??zcl_reporting_reset_defaults_2>:
 8002b98:	f89d 0000 	ldrb.w	r0, [sp]
 8002b9c:	2800      	cmp	r0, #0
 8002b9e:	d103      	bne.n	8002ba8 <??zcl_reporting_reset_defaults_1>
 8002ba0:	21c8      	movs	r1, #200	@ 0xc8
 8002ba2:	68a8      	ldr	r0, [r5, #8]
 8002ba4:	f7ff fae9 	bl	800217a <zcl_report_kick>

08002ba8 <??zcl_reporting_reset_defaults_1>:
 8002ba8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08002baa <zcl_reporting_epsilon_default>:
 8002baa:	b538      	push	{r3, r4, r5, lr}
 8002bac:	0004      	movs	r4, r0
 8002bae:	000d      	movs	r5, r1
 8002bb0:	0028      	movs	r0, r5
 8002bb2:	b2c0      	uxtb	r0, r0
 8002bb4:	2838      	cmp	r0, #56	@ 0x38
 8002bb6:	db09      	blt.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bb8:	0028      	movs	r0, r5
 8002bba:	b2c0      	uxtb	r0, r0
 8002bbc:	283b      	cmp	r0, #59	@ 0x3b
 8002bbe:	da05      	bge.n	8002bcc <??zcl_reporting_epsilon_default_0>
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 8003794 <??DataTable11>
 8002bc6:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002bca:	e00f      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002bcc <??zcl_reporting_epsilon_default_0>:
 8002bcc:	0028      	movs	r0, r5
 8002bce:	b2c0      	uxtb	r0, r0
 8002bd0:	f7fe fae2 	bl	8001198 <ZbZclAttrIsAnalog>
 8002bd4:	2800      	cmp	r0, #0
 8002bd6:	d005      	beq.n	8002be4 <??zcl_reporting_epsilon_default_2>
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 8003794 <??DataTable11>
 8002bde:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8002be2:	e003      	b.n	8002bec <??zcl_reporting_epsilon_default_1>

08002be4 <??zcl_reporting_epsilon_default_2>:
 8002be4:	2000      	movs	r0, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002bec <??zcl_reporting_epsilon_default_1>:
 8002bec:	bd31      	pop	{r0, r4, r5, pc}
	...

08002bf0 <??DataTable9>:
 8002bf0:	1ee5 0800                                   ....

08002bf4 <??DataTable9_1>:
 8002bf4:	0000 0000                                   ....

08002bf8 <??DataTable9_2>:
 8002bf8:	00a0 2000                                   ... 

08002bfc <??DataTable9_3>:
 8002bfc:	1ed1 0800                                   ....

08002c00 <??DataTable9_4>:
 8002c00:	ee80 0036                                   ..6.

08002c04 <zcl_reporting_epsilon_check>:
 8002c04:	b510      	push	{r4, lr}
 8002c06:	0004      	movs	r4, r0
 8002c08:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002c0c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8002c0e:	4281      	cmp	r1, r0
 8002c10:	d101      	bne.n	8002c16 <??zcl_reporting_epsilon_check_0>
 8002c12:	2001      	movs	r0, #1
 8002c14:	e049      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c16 <??zcl_reporting_epsilon_check_0>:
 8002c16:	8c21      	ldrh	r1, [r4, #32]
 8002c18:	4281      	cmp	r1, r0
 8002c1a:	d104      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c1c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	d101      	bne.n	8002c26 <??zcl_reporting_epsilon_check_2>
 8002c22:	2001      	movs	r0, #1
 8002c24:	e041      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c26 <??zcl_reporting_epsilon_check_2>:
 8002c26:	7ba0      	ldrb	r0, [r4, #14]
 8002c28:	2838      	cmp	r0, #56	@ 0x38
 8002c2a:	db1d      	blt.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c2c:	7ba0      	ldrb	r0, [r4, #14]
 8002c2e:	283b      	cmp	r0, #59	@ 0x3b
 8002c30:	da1a      	bge.n	8002c68 <??zcl_reporting_epsilon_check_3>
 8002c32:	8c20      	ldrh	r0, [r4, #32]
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d108      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c38:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	2100      	movs	r1, #0
 8002c40:	f003 fcee 	bl	8006620 <__aeabi_cdcmpeq>
 8002c44:	d101      	bne.n	8002c4a <??zcl_reporting_epsilon_check_4>
 8002c46:	2000      	movs	r0, #0
 8002c48:	e02f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c4a <??zcl_reporting_epsilon_check_4>:
 8002c4a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2300      	movs	r3, #0
 8002c52:	f003 fce5 	bl	8006620 <__aeabi_cdcmpeq>
 8002c56:	d205      	bcs.n	8002c64 <??zcl_reporting_epsilon_check_5>
 8002c58:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c5c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002c60:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002c64 <??zcl_reporting_epsilon_check_5>:
 8002c64:	2001      	movs	r0, #1
 8002c66:	e020      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c68 <??zcl_reporting_epsilon_check_3>:
 8002c68:	7ba0      	ldrb	r0, [r4, #14]
 8002c6a:	f7fe fa95 	bl	8001198 <ZbZclAttrIsAnalog>
 8002c6e:	2800      	cmp	r0, #0
 8002c70:	d01a      	beq.n	8002ca8 <??zcl_reporting_epsilon_check_6>
 8002c72:	8c20      	ldrh	r0, [r4, #32]
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d108      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c78:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8002c7c:	2000      	movs	r0, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f003 fcce 	bl	8006620 <__aeabi_cdcmpeq>
 8002c84:	d101      	bne.n	8002c8a <??zcl_reporting_epsilon_check_7>
 8002c86:	2000      	movs	r0, #0
 8002c88:	e00f      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002c8a <??zcl_reporting_epsilon_check_7>:
 8002c8a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2300      	movs	r3, #0
 8002c92:	f003 fcc5 	bl	8006620 <__aeabi_cdcmpeq>
 8002c96:	d205      	bcs.n	8002ca4 <??zcl_reporting_epsilon_check_8>
 8002c98:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8002c9c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8002ca0:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08002ca4 <??zcl_reporting_epsilon_check_8>:
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	e000      	b.n	8002caa <??zcl_reporting_epsilon_check_1>

08002ca8 <??zcl_reporting_epsilon_check_6>:
 8002ca8:	2001      	movs	r0, #1

08002caa <??zcl_reporting_epsilon_check_1>:
 8002caa:	bd10      	pop	{r4, pc}

08002cac <zcl_reporting_create_default_reports>:
 8002cac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb0:	b090      	sub	sp, #64	@ 0x40
 8002cb2:	0005      	movs	r5, r0
 8002cb4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002cb6:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002cba:	4288      	cmp	r0, r1
 8002cbc:	d001      	beq.n	8002cc2 <??zcl_reporting_create_default_reports_0>
 8002cbe:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8002cc0:	e000      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002cc2 <??zcl_reporting_create_default_reports_0>:
 8002cc2:	2400      	movs	r4, #0

08002cc4 <??zcl_reporting_create_default_reports_1>:
 8002cc4:	2c00      	cmp	r4, #0
 8002cc6:	d054      	beq.n	8002d72 <??zcl_reporting_create_default_reports_2>
 8002cc8:	0026      	movs	r6, r4
 8002cca:	68b0      	ldr	r0, [r6, #8]
 8002ccc:	7900      	ldrb	r0, [r0, #4]
 8002cce:	0780      	lsls	r0, r0, #30
 8002cd0:	d546      	bpl.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002cd2 <??zcl_reporting_create_default_reports_4>:
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	68b0      	ldr	r0, [r6, #8]
 8002cd6:	8801      	ldrh	r1, [r0, #0]
 8002cd8:	0028      	movs	r0, r5
 8002cda:	f7ff fda4 	bl	8002826 <zcl_reporting_find>
 8002cde:	9001      	str	r0, [sp, #4]
 8002ce0:	9801      	ldr	r0, [sp, #4]
 8002ce2:	2800      	cmp	r0, #0
 8002ce4:	d13c      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>

08002ce6 <??zcl_reporting_create_default_reports_5>:
 8002ce6:	2738      	movs	r7, #56	@ 0x38
 8002ce8:	f05f 0800 	movs.w	r8, #0
 8002cec:	f10d 0908 	add.w	r9, sp, #8
 8002cf0:	4642      	mov	r2, r8
 8002cf2:	0039      	movs	r1, r7
 8002cf4:	4648      	mov	r0, r9
 8002cf6:	f002 ffc9 	bl	8005c8c <__aeabi_memset>
 8002cfa:	68b0      	ldr	r0, [r6, #8]
 8002cfc:	8800      	ldrh	r0, [r0, #0]
 8002cfe:	f8ad 0014 	strh.w	r0, [sp, #20]
 8002d02:	9504      	str	r5, [sp, #16]
 8002d04:	68b0      	ldr	r0, [r6, #8]
 8002d06:	7880      	ldrb	r0, [r0, #2]
 8002d08:	f88d 0016 	strb.w	r0, [sp, #22]
 8002d0c:	68b0      	ldr	r0, [r6, #8]
 8002d0e:	7881      	ldrb	r1, [r0, #2]
 8002d10:	a802      	add	r0, sp, #8
 8002d12:	f7ff ff4a 	bl	8002baa <zcl_reporting_epsilon_default>
 8002d16:	f05f 0908 	movs.w	r9, #8
 8002d1a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8002d1e:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8002d22:	464a      	mov	r2, r9
 8002d24:	4651      	mov	r1, sl
 8002d26:	4658      	mov	r0, fp
 8002d28:	f014 fa29 	bl	801717e <__aeabi_memcpy>
 8002d2c:	aa02      	add	r2, sp, #8
 8002d2e:	0031      	movs	r1, r6
 8002d30:	68a8      	ldr	r0, [r5, #8]
 8002d32:	f7ff feea 	bl	8002b0a <zcl_reporting_config_attr_defaults>
 8002d36:	a902      	add	r1, sp, #8
 8002d38:	0028      	movs	r0, r5
 8002d3a:	f7ff fdc6 	bl	80028ca <zcl_reporting_save_curr_val>
 8002d3e:	f88d 0000 	strb.w	r0, [sp]
 8002d42:	f89d 0000 	ldrb.w	r0, [sp]
 8002d46:	2800      	cmp	r0, #0
 8002d48:	d002      	beq.n	8002d50 <??zcl_reporting_create_default_reports_6>
 8002d4a:	f89d 0000 	ldrb.w	r0, [sp]
 8002d4e:	e011      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d50 <??zcl_reporting_create_default_reports_6>:
 8002d50:	a902      	add	r1, sp, #8
 8002d52:	0028      	movs	r0, r5
 8002d54:	f7ff fe2c 	bl	80029b0 <zcl_reporting_create_new>
 8002d58:	2800      	cmp	r0, #0
 8002d5a:	d101      	bne.n	8002d60 <??zcl_reporting_create_default_reports_3>
 8002d5c:	2089      	movs	r0, #137	@ 0x89
 8002d5e:	e009      	b.n	8002d74 <??zcl_reporting_create_default_reports_7>

08002d60 <??zcl_reporting_create_default_reports_3>:
 8002d60:	6820      	ldr	r0, [r4, #0]
 8002d62:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002d66:	4288      	cmp	r0, r1
 8002d68:	d001      	beq.n	8002d6e <??zcl_reporting_create_default_reports_8>
 8002d6a:	6824      	ldr	r4, [r4, #0]
 8002d6c:	e7aa      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d6e <??zcl_reporting_create_default_reports_8>:
 8002d6e:	2400      	movs	r4, #0
 8002d70:	e7a8      	b.n	8002cc4 <??zcl_reporting_create_default_reports_1>

08002d72 <??zcl_reporting_create_default_reports_2>:
 8002d72:	2000      	movs	r0, #0

08002d74 <??zcl_reporting_create_default_reports_7>:
 8002d74:	b011      	add	sp, #68	@ 0x44
 8002d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d7a <ZbZclHandleConfigReport>:
 8002d7a:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d7e:	b0c8      	sub	sp, #288	@ 0x120
 8002d80:	0004      	movs	r4, r0
 8002d82:	0015      	movs	r5, r2
 8002d84:	68a0      	ldr	r0, [r4, #8]
 8002d86:	9001      	str	r0, [sp, #4]
 8002d88:	2700      	movs	r7, #0
 8002d8a:	2000      	movs	r0, #0
 8002d8c:	f88d 0003 	strb.w	r0, [sp, #3]
 8002d90:	2600      	movs	r6, #0
 8002d92:	2000      	movs	r0, #0
 8002d94:	f88d 0002 	strb.w	r0, [sp, #2]
 8002d98:	f05f 0808 	movs.w	r8, #8
 8002d9c:	f05f 0900 	movs.w	r9, #0
 8002da0:	f10d 0a0c 	add.w	sl, sp, #12
 8002da4:	464a      	mov	r2, r9
 8002da6:	4641      	mov	r1, r8
 8002da8:	4650      	mov	r0, sl
 8002daa:	f002 ff6f 	bl	8005c8c <__aeabi_memset>
 8002dae:	2000      	movs	r0, #0
 8002db0:	f88d 000c 	strb.w	r0, [sp, #12]
 8002db4:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002db6:	7840      	ldrb	r0, [r0, #1]
 8002db8:	f88d 000d 	strb.w	r0, [sp, #13]
 8002dbc:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dbe:	7880      	ldrb	r0, [r0, #2]
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	d003      	beq.n	8002dcc <??ZbZclHandleConfigReport_0>
 8002dc4:	2000      	movs	r0, #0
 8002dc6:	f88d 000e 	strb.w	r0, [sp, #14]
 8002dca:	e002      	b.n	8002dd2 <??ZbZclHandleConfigReport_1>

08002dcc <??ZbZclHandleConfigReport_0>:
 8002dcc:	2001      	movs	r0, #1
 8002dce:	f88d 000e 	strb.w	r0, [sp, #14]

08002dd2 <??ZbZclHandleConfigReport_1>:
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f88d 000f 	strb.w	r0, [sp, #15]
 8002dd8:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002dda:	8880      	ldrh	r0, [r0, #4]
 8002ddc:	f8ad 0010 	strh.w	r0, [sp, #16]
 8002de0:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8002de2:	7980      	ldrb	r0, [r0, #6]
 8002de4:	f88d 0012 	strb.w	r0, [sp, #18]
 8002de8:	2007      	movs	r0, #7
 8002dea:	f88d 0013 	strb.w	r0, [sp, #19]
 8002dee:	2205      	movs	r2, #5
 8002df0:	a916      	add	r1, sp, #88	@ 0x58
 8002df2:	a803      	add	r0, sp, #12
 8002df4:	f001 fcb6 	bl	8004764 <ZbZclAppendHeader>
 8002df8:	9005      	str	r0, [sp, #20]
 8002dfa:	9805      	ldr	r0, [sp, #20]
 8002dfc:	2800      	cmp	r0, #0
 8002dfe:	d506      	bpl.n	8002e0e <??ZbZclHandleConfigReport_2>
 8002e00:	2380      	movs	r3, #128	@ 0x80
 8002e02:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e04:	0029      	movs	r1, r5
 8002e06:	0020      	movs	r0, r4
 8002e08:	f011 fad3 	bl	80143b2 <ZbZclSendDefaultResponse>
 8002e0c:	e236      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e0e <??ZbZclHandleConfigReport_2>:
 8002e0e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e10:	4286      	cmp	r6, r0
 8002e12:	f080 81b4 	bcs.w	800317e <??ZbZclHandleConfigReport_4>
 8002e16:	f05f 0900 	movs.w	r9, #0
 8002e1a:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8002e1e:	f05f 0a00 	movs.w	sl, #0
 8002e22:	f10d 0b18 	add.w	fp, sp, #24
 8002e26:	4652      	mov	r2, sl
 8002e28:	4641      	mov	r1, r8
 8002e2a:	4658      	mov	r0, fp
 8002e2c:	f002 ff2e 	bl	8005c8c <__aeabi_memset>
 8002e30:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e32:	1cf1      	adds	r1, r6, #3
 8002e34:	4288      	cmp	r0, r1
 8002e36:	d206      	bcs.n	8002e46 <??ZbZclHandleConfigReport_5>
 8002e38:	2380      	movs	r3, #128	@ 0x80
 8002e3a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e3c:	0029      	movs	r1, r5
 8002e3e:	0020      	movs	r0, r4
 8002e40:	f011 fab7 	bl	80143b2 <ZbZclSendDefaultResponse>
 8002e44:	e21a      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e46 <??ZbZclHandleConfigReport_5>:
 8002e46:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e48:	5d80      	ldrb	r0, [r0, r6]
 8002e4a:	f88d 0001 	strb.w	r0, [sp, #1]
 8002e4e:	1c76      	adds	r6, r6, #1
 8002e50:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e52:	4430      	add	r0, r6
 8002e54:	f001 fdf8 	bl	8004a48 <pletoh16>
 8002e58:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8002e5c:	1cb6      	adds	r6, r6, #2
 8002e5e:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002e62:	2800      	cmp	r0, #0
 8002e64:	f040 8159 	bne.w	800311a <??ZbZclHandleConfigReport_6>
 8002e68:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e6a:	1cb1      	adds	r1, r6, #2
 8002e6c:	4288      	cmp	r0, r1
 8002e6e:	d206      	bcs.n	8002e7e <??ZbZclHandleConfigReport_7>
 8002e70:	2380      	movs	r3, #128	@ 0x80
 8002e72:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8002e74:	0029      	movs	r1, r5
 8002e76:	0020      	movs	r0, r4
 8002e78:	f011 fa9b 	bl	80143b2 <ZbZclSendDefaultResponse>
 8002e7c:	e1fe      	b.n	800327c <??ZbZclHandleConfigReport_3>

08002e7e <??ZbZclHandleConfigReport_7>:
 8002e7e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e80:	1c71      	adds	r1, r6, #1
 8002e82:	4288      	cmp	r0, r1
 8002e84:	f0c0 808f 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e88 <??ZbZclHandleConfigReport_9>:
 8002e88:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e8a:	5d80      	ldrb	r0, [r0, r6]
 8002e8c:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8002e90:	1c76      	adds	r6, r6, #1
 8002e92:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002e94:	1cb1      	adds	r1, r6, #2
 8002e96:	4288      	cmp	r0, r1
 8002e98:	f0c0 8085 	bcc.w	8002fa6 <??ZbZclHandleConfigReport_19>

08002e9c <??ZbZclHandleConfigReport_10>:
 8002e9c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002e9e:	4430      	add	r0, r6
 8002ea0:	f001 fdd2 	bl	8004a48 <pletoh16>
 8002ea4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8002ea8:	1cb6      	adds	r6, r6, #2
 8002eaa:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002eac:	1cb1      	adds	r1, r6, #2
 8002eae:	4288      	cmp	r0, r1
 8002eb0:	d379      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002eb2 <??ZbZclHandleConfigReport_11>:
 8002eb2:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002eb4:	4430      	add	r0, r6
 8002eb6:	f001 fdc7 	bl	8004a48 <pletoh16>
 8002eba:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8002ebe:	1cb6      	adds	r6, r6, #2
 8002ec0:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8002ec2:	1c71      	adds	r1, r6, #1
 8002ec4:	4288      	cmp	r0, r1
 8002ec6:	d36e      	bcc.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002ec8 <??ZbZclHandleConfigReport_12>:
 8002ec8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ecc:	2848      	cmp	r0, #72	@ 0x48
 8002ece:	d00b      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ed4:	284c      	cmp	r0, #76	@ 0x4c
 8002ed6:	d007      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ed8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002edc:	2850      	cmp	r0, #80	@ 0x50
 8002ede:	d003      	beq.n	8002ee8 <??ZbZclHandleConfigReport_13>
 8002ee0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ee4:	2851      	cmp	r0, #81	@ 0x51
 8002ee6:	d103      	bne.n	8002ef0 <??ZbZclHandleConfigReport_14>

08002ee8 <??ZbZclHandleConfigReport_13>:
 8002ee8:	208c      	movs	r0, #140	@ 0x8c
 8002eea:	f88d 0000 	strb.w	r0, [sp]
 8002eee:	e12e      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002ef0 <??ZbZclHandleConfigReport_14>:
 8002ef0:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002ef4:	2838      	cmp	r0, #56	@ 0x38
 8002ef6:	db29      	blt.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002ef8:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002efc:	283b      	cmp	r0, #59	@ 0x3b
 8002efe:	da25      	bge.n	8002f4c <??ZbZclHandleConfigReport_16>
 8002f00:	2300      	movs	r3, #0
 8002f02:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f04:	1b92      	subs	r2, r2, r6
 8002f06:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f08:	eb00 0106 	add.w	r1, r0, r6
 8002f0c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f10:	f7fe f891 	bl	8001036 <ZbZclAttrParseLength>
 8002f14:	9002      	str	r0, [sp, #8]
 8002f16:	9802      	ldr	r0, [sp, #8]
 8002f18:	2800      	cmp	r0, #0
 8002f1a:	d503      	bpl.n	8002f24 <??ZbZclHandleConfigReport_17>
 8002f1c:	2085      	movs	r0, #133	@ 0x85
 8002f1e:	f88d 0000 	strb.w	r0, [sp]
 8002f22:	e114      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f24 <??ZbZclHandleConfigReport_17>:
 8002f24:	466a      	mov	r2, sp
 8002f26:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f28:	eb00 0106 	add.w	r1, r0, r6
 8002f2c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f30:	f001 ff69 	bl	8004e06 <ZbZclParseFloat>
 8002f34:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8002f38:	f89d 0000 	ldrb.w	r0, [sp]
 8002f3c:	2800      	cmp	r0, #0
 8002f3e:	f040 8106 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f42 <??ZbZclHandleConfigReport_18>:
 8002f42:	9802      	ldr	r0, [sp, #8]
 8002f44:	1986      	adds	r6, r0, r6
 8002f46:	2001      	movs	r0, #1
 8002f48:	4681      	mov	r9, r0
 8002f4a:	e02c      	b.n	8002fa6 <??ZbZclHandleConfigReport_19>

08002f4c <??ZbZclHandleConfigReport_16>:
 8002f4c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f50:	f7fe f922 	bl	8001198 <ZbZclAttrIsAnalog>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d026      	beq.n	8002fa6 <??ZbZclHandleConfigReport_19>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8002f5c:	1b92      	subs	r2, r2, r6
 8002f5e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f60:	eb00 0106 	add.w	r1, r0, r6
 8002f64:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f68:	f7fe f865 	bl	8001036 <ZbZclAttrParseLength>
 8002f6c:	9002      	str	r0, [sp, #8]
 8002f6e:	9802      	ldr	r0, [sp, #8]
 8002f70:	2800      	cmp	r0, #0
 8002f72:	d503      	bpl.n	8002f7c <??ZbZclHandleConfigReport_20>
 8002f74:	2085      	movs	r0, #133	@ 0x85
 8002f76:	f88d 0000 	strb.w	r0, [sp]
 8002f7a:	e0e8      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002f7c <??ZbZclHandleConfigReport_20>:
 8002f7c:	466a      	mov	r2, sp
 8002f7e:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002f80:	eb00 0106 	add.w	r1, r0, r6
 8002f84:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8002f88:	f7fe fa04 	bl	8001394 <ZbZclParseInteger>
 8002f8c:	f003 f8ba 	bl	8006104 <__aeabi_l2d>
 8002f90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8002f94:	f89d 0000 	ldrb.w	r0, [sp]
 8002f98:	2800      	cmp	r0, #0
 8002f9a:	f040 80d8 	bne.w	800314e <??ZbZclHandleConfigReport_15>

08002f9e <??ZbZclHandleConfigReport_21>:
 8002f9e:	9802      	ldr	r0, [sp, #8]
 8002fa0:	1986      	adds	r6, r0, r6
 8002fa2:	2001      	movs	r0, #1
 8002fa4:	4681      	mov	r9, r0

08002fa6 <??ZbZclHandleConfigReport_19>:
 8002fa6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002faa:	0020      	movs	r0, r4
 8002fac:	f7fd f917 	bl	80001de <ZbZclAttrFind>
 8002fb0:	4682      	mov	sl, r0
 8002fb2:	f1ba 0f00 	cmp.w	sl, #0
 8002fb6:	d103      	bne.n	8002fc0 <??ZbZclHandleConfigReport_22>
 8002fb8:	2086      	movs	r0, #134	@ 0x86
 8002fba:	f88d 0000 	strb.w	r0, [sp]
 8002fbe:	e0c6      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fc0 <??ZbZclHandleConfigReport_22>:
 8002fc0:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fc4:	8880      	ldrh	r0, [r0, #4]
 8002fc6:	0400      	lsls	r0, r0, #16
 8002fc8:	d503      	bpl.n	8002fd2 <??ZbZclHandleConfigReport_23>
 8002fca:	2086      	movs	r0, #134	@ 0x86
 8002fcc:	f88d 0000 	strb.w	r0, [sp]
 8002fd0:	e0bd      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fd2 <??ZbZclHandleConfigReport_23>:
 8002fd2:	f8da 0008 	ldr.w	r0, [sl, #8]
 8002fd6:	7900      	ldrb	r0, [r0, #4]
 8002fd8:	0780      	lsls	r0, r0, #30
 8002fda:	d403      	bmi.n	8002fe4 <??ZbZclHandleConfigReport_24>
 8002fdc:	208c      	movs	r0, #140	@ 0x8c
 8002fde:	f88d 0000 	strb.w	r0, [sp]
 8002fe2:	e0b4      	b.n	800314e <??ZbZclHandleConfigReport_15>

08002fe4 <??ZbZclHandleConfigReport_24>:
 8002fe4:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8002fe8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8002fec:	4558      	cmp	r0, fp
 8002fee:	d101      	bne.n	8002ff4 <??ZbZclHandleConfigReport_25>
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	4681      	mov	r9, r0

08002ff4 <??ZbZclHandleConfigReport_25>:
 8002ff4:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8002ff8:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8002ffc:	0020      	movs	r0, r4
 8002ffe:	f7ff fc12 	bl	8002826 <zcl_reporting_find>
 8003002:	4680      	mov	r8, r0
 8003004:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003008:	4558      	cmp	r0, fp
 800300a:	d11b      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 800300c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003010:	2800      	cmp	r0, #0
 8003012:	d117      	bne.n	8003044 <??ZbZclHandleConfigReport_26>
 8003014:	2000      	movs	r0, #0
 8003016:	4681      	mov	r9, r0
 8003018:	f1b8 0f00 	cmp.w	r8, #0
 800301c:	d00d      	beq.n	800303a <??ZbZclHandleConfigReport_27>
 800301e:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 8003022:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003026:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 800302a:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 800302e:	2200      	movs	r2, #0
 8003030:	a906      	add	r1, sp, #24
 8003032:	9801      	ldr	r0, [sp, #4]
 8003034:	f7ff fd84 	bl	8002b40 <zcl_reporting_reset_defaults>
 8003038:	e004      	b.n	8003044 <??ZbZclHandleConfigReport_26>

0800303a <??ZbZclHandleConfigReport_27>:
 800303a:	aa06      	add	r2, sp, #24
 800303c:	4651      	mov	r1, sl
 800303e:	9801      	ldr	r0, [sp, #4]
 8003040:	f7ff fd63 	bl	8002b0a <zcl_reporting_config_attr_defaults>

08003044 <??ZbZclHandleConfigReport_26>:
 8003044:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003048:	f8da 1008 	ldr.w	r1, [sl, #8]
 800304c:	7889      	ldrb	r1, [r1, #2]
 800304e:	4288      	cmp	r0, r1
 8003050:	d003      	beq.n	800305a <??ZbZclHandleConfigReport_28>
 8003052:	208d      	movs	r0, #141	@ 0x8d
 8003054:	f88d 0000 	strb.w	r0, [sp]
 8003058:	e079      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800305a <??ZbZclHandleConfigReport_28>:
 800305a:	f1b8 0f00 	cmp.w	r8, #0
 800305e:	d021      	beq.n	80030a4 <??ZbZclHandleConfigReport_29>
 8003060:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003064:	f8a8 0020 	strh.w	r0, [r8, #32]
 8003068:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 800306c:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8003070:	4648      	mov	r0, r9
 8003072:	b2c0      	uxtb	r0, r0
 8003074:	2800      	cmp	r0, #0
 8003076:	d00c      	beq.n	8003092 <??ZbZclHandleConfigReport_30>
 8003078:	a806      	add	r0, sp, #24
 800307a:	f7ff fdc3 	bl	8002c04 <zcl_reporting_epsilon_check>
 800307e:	2800      	cmp	r0, #0
 8003080:	d103      	bne.n	800308a <??ZbZclHandleConfigReport_31>
 8003082:	2085      	movs	r0, #133	@ 0x85
 8003084:	f88d 0000 	strb.w	r0, [sp]
 8003088:	e061      	b.n	800314e <??ZbZclHandleConfigReport_15>

0800308a <??ZbZclHandleConfigReport_31>:
 800308a:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 800308e:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

08003092 <??ZbZclHandleConfigReport_30>:
 8003092:	9801      	ldr	r0, [sp, #4]
 8003094:	f011 f88d 	bl	80141b2 <ZbZclUptime>
 8003098:	f8c8 0010 	str.w	r0, [r8, #16]
 800309c:	2001      	movs	r0, #1
 800309e:	f88d 0002 	strb.w	r0, [sp, #2]
 80030a2:	e6b4      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

080030a4 <??ZbZclHandleConfigReport_29>:
 80030a4:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 80030a8:	4558      	cmp	r0, fp
 80030aa:	f43f aeb0 	beq.w	8002e0e <??ZbZclHandleConfigReport_2>

080030ae <??ZbZclHandleConfigReport_32>:
 80030ae:	9408      	str	r4, [sp, #32]
 80030b0:	4648      	mov	r0, r9
 80030b2:	b2c0      	uxtb	r0, r0
 80030b4:	2800      	cmp	r0, #0
 80030b6:	d008      	beq.n	80030ca <??ZbZclHandleConfigReport_33>
 80030b8:	a806      	add	r0, sp, #24
 80030ba:	f7ff fda3 	bl	8002c04 <zcl_reporting_epsilon_check>
 80030be:	2800      	cmp	r0, #0
 80030c0:	d108      	bne.n	80030d4 <??ZbZclHandleConfigReport_34>
 80030c2:	2085      	movs	r0, #133	@ 0x85
 80030c4:	f88d 0000 	strb.w	r0, [sp]
 80030c8:	e041      	b.n	800314e <??ZbZclHandleConfigReport_15>

080030ca <??ZbZclHandleConfigReport_33>:
 80030ca:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 80030ce:	a806      	add	r0, sp, #24
 80030d0:	f7ff fd6b 	bl	8002baa <zcl_reporting_epsilon_default>

080030d4 <??ZbZclHandleConfigReport_34>:
 80030d4:	2008      	movs	r0, #8
 80030d6:	9015      	str	r0, [sp, #84]	@ 0x54
 80030d8:	a810      	add	r0, sp, #64	@ 0x40
 80030da:	9014      	str	r0, [sp, #80]	@ 0x50
 80030dc:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 80030e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80030e2:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80030e4:	4658      	mov	r0, fp
 80030e6:	f014 f84a 	bl	801717e <__aeabi_memcpy>
 80030ea:	a906      	add	r1, sp, #24
 80030ec:	0020      	movs	r0, r4
 80030ee:	f7ff fbec 	bl	80028ca <zcl_reporting_save_curr_val>
 80030f2:	f88d 0000 	strb.w	r0, [sp]
 80030f6:	f89d 0000 	ldrb.w	r0, [sp]
 80030fa:	2800      	cmp	r0, #0
 80030fc:	d127      	bne.n	800314e <??ZbZclHandleConfigReport_15>

080030fe <??ZbZclHandleConfigReport_35>:
 80030fe:	a906      	add	r1, sp, #24
 8003100:	0020      	movs	r0, r4
 8003102:	f7ff fc55 	bl	80029b0 <zcl_reporting_create_new>
 8003106:	2800      	cmp	r0, #0
 8003108:	d103      	bne.n	8003112 <??ZbZclHandleConfigReport_36>
 800310a:	2189      	movs	r1, #137	@ 0x89
 800310c:	f88d 1000 	strb.w	r1, [sp]
 8003110:	e01d      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003112 <??ZbZclHandleConfigReport_36>:
 8003112:	2101      	movs	r1, #1
 8003114:	f88d 1002 	strb.w	r1, [sp, #2]
 8003118:	e679      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800311a <??ZbZclHandleConfigReport_6>:
 800311a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800311e:	2801      	cmp	r0, #1
 8003120:	d10e      	bne.n	8003140 <??ZbZclHandleConfigReport_37>
 8003122:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003124:	1cb1      	adds	r1, r6, #2
 8003126:	4288      	cmp	r0, r1
 8003128:	d206      	bcs.n	8003138 <??ZbZclHandleConfigReport_38>
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800312e:	0029      	movs	r1, r5
 8003130:	0020      	movs	r0, r4
 8003132:	f011 f93e 	bl	80143b2 <ZbZclSendDefaultResponse>
 8003136:	e0a1      	b.n	800327c <??ZbZclHandleConfigReport_3>

08003138 <??ZbZclHandleConfigReport_38>:
 8003138:	208c      	movs	r0, #140	@ 0x8c
 800313a:	f88d 0000 	strb.w	r0, [sp]
 800313e:	e006      	b.n	800314e <??ZbZclHandleConfigReport_15>

08003140 <??ZbZclHandleConfigReport_37>:
 8003140:	2380      	movs	r3, #128	@ 0x80
 8003142:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003144:	0029      	movs	r1, r5
 8003146:	0020      	movs	r0, r4
 8003148:	f011 f933 	bl	80143b2 <ZbZclSendDefaultResponse>
 800314c:	e096      	b.n	800327c <??ZbZclHandleConfigReport_3>

0800314e <??ZbZclHandleConfigReport_15>:
 800314e:	f89d 0000 	ldrb.w	r0, [sp]
 8003152:	f88d 0003 	strb.w	r0, [sp, #3]
 8003156:	1d38      	adds	r0, r7, #4
 8003158:	2837      	cmp	r0, #55	@ 0x37
 800315a:	d210      	bcs.n	800317e <??ZbZclHandleConfigReport_4>

0800315c <??ZbZclHandleConfigReport_39>:
 800315c:	a83a      	add	r0, sp, #232	@ 0xe8
 800315e:	f89d 1000 	ldrb.w	r1, [sp]
 8003162:	55c1      	strb	r1, [r0, r7]
 8003164:	1c7f      	adds	r7, r7, #1
 8003166:	f89d 1001 	ldrb.w	r1, [sp, #1]
 800316a:	55c1      	strb	r1, [r0, r7]
 800316c:	1c7f      	adds	r7, r7, #1
 800316e:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8003172:	a83a      	add	r0, sp, #232	@ 0xe8
 8003174:	4438      	add	r0, r7
 8003176:	f001 fcb3 	bl	8004ae0 <putle16>
 800317a:	1cbf      	adds	r7, r7, #2
 800317c:	e647      	b.n	8002e0e <??ZbZclHandleConfigReport_2>

0800317e <??ZbZclHandleConfigReport_4>:
 800317e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003182:	2800      	cmp	r0, #0
 8003184:	d105      	bne.n	8003192 <??ZbZclHandleConfigReport_40>
 8003186:	2000      	movs	r0, #0
 8003188:	2100      	movs	r1, #0
 800318a:	aa3a      	add	r2, sp, #232	@ 0xe8
 800318c:	5411      	strb	r1, [r2, r0]
 800318e:	1c40      	adds	r0, r0, #1
 8003190:	0007      	movs	r7, r0

08003192 <??ZbZclHandleConfigReport_40>:
 8003192:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8003196:	2800      	cmp	r0, #0
 8003198:	d127      	bne.n	80031ea <??ZbZclHandleConfigReport_41>
 800319a:	f05f 0920 	movs.w	r9, #32
 800319e:	f05f 0800 	movs.w	r8, #0
 80031a2:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80031a6:	4642      	mov	r2, r8
 80031a8:	4649      	mov	r1, r9
 80031aa:	4650      	mov	r0, sl
 80031ac:	f002 fd6e 	bl	8005c8c <__aeabi_memset>
 80031b0:	9801      	ldr	r0, [sp, #4]
 80031b2:	f010 faa7 	bl	8013704 <ZbExtendedAddress>
 80031b6:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 80031ba:	8868      	ldrh	r0, [r5, #2]
 80031bc:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 80031c0:	89a0      	ldrh	r0, [r4, #12]
 80031c2:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 80031c6:	2003      	movs	r0, #3
 80031c8:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 80031cc:	8a68      	ldrh	r0, [r5, #18]
 80031ce:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 80031d2:	8ae8      	ldrh	r0, [r5, #22]
 80031d4:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 80031d8:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 80031dc:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 80031e0:	aa30      	add	r2, sp, #192	@ 0xc0
 80031e2:	a918      	add	r1, sp, #96	@ 0x60
 80031e4:	9801      	ldr	r0, [sp, #4]
 80031e6:	f010 fcd8 	bl	8013b9a <ZbApsmeBindReq>

080031ea <??ZbZclHandleConfigReport_41>:
 80031ea:	2200      	movs	r2, #0
 80031ec:	a924      	add	r1, sp, #144	@ 0x90
 80031ee:	0020      	movs	r0, r4
 80031f0:	f000 fd57 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 80031f4:	a824      	add	r0, sp, #144	@ 0x90
 80031f6:	f115 0110 	adds.w	r1, r5, #16
 80031fa:	2210      	movs	r2, #16
 80031fc:	f013 ffbf 	bl	801717e <__aeabi_memcpy>
 8003200:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003204:	f000 fce5 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 8003208:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 800320c:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 8003210:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8003214:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8003218:	2001      	movs	r0, #1
 800321a:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 800321e:	2000      	movs	r0, #0
 8003220:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 8003224:	a816      	add	r0, sp, #88	@ 0x58
 8003226:	9020      	str	r0, [sp, #128]	@ 0x80
 8003228:	a820      	add	r0, sp, #128	@ 0x80
 800322a:	9905      	ldr	r1, [sp, #20]
 800322c:	6041      	str	r1, [r0, #4]
 800322e:	a93a      	add	r1, sp, #232	@ 0xe8
 8003230:	6081      	str	r1, [r0, #8]
 8003232:	60c7      	str	r7, [r0, #12]
 8003234:	a820      	add	r0, sp, #128	@ 0x80
 8003236:	902a      	str	r0, [sp, #168]	@ 0xa8
 8003238:	2002      	movs	r0, #2
 800323a:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 800323e:	2300      	movs	r3, #0
 8003240:	2200      	movs	r2, #0
 8003242:	a924      	add	r1, sp, #144	@ 0x90
 8003244:	9801      	ldr	r0, [sp, #4]
 8003246:	f010 fb73 	bl	8013930 <ZbApsdeDataReqCallback>
 800324a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800324e:	2800      	cmp	r0, #0
 8003250:	d014      	beq.n	800327c <??ZbZclHandleConfigReport_3>
 8003252:	2301      	movs	r3, #1
 8003254:	f10d 0201 	add.w	r2, sp, #1
 8003258:	f240 410c 	movw	r1, #1036	@ 0x40c
 800325c:	9801      	ldr	r0, [sp, #4]
 800325e:	f010 ff37 	bl	80140d0 <ZbNwkGet>
 8003262:	2800      	cmp	r0, #0
 8003264:	d002      	beq.n	800326c <??ZbZclHandleConfigReport_43>
 8003266:	2000      	movs	r0, #0
 8003268:	f88d 0001 	strb.w	r0, [sp, #1]

0800326c <??ZbZclHandleConfigReport_43>:
 800326c:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003270:	2800      	cmp	r0, #0
 8003272:	d103      	bne.n	800327c <??ZbZclHandleConfigReport_3>
 8003274:	21c8      	movs	r1, #200	@ 0xc8
 8003276:	0020      	movs	r0, r4
 8003278:	f7fe ff7f 	bl	800217a <zcl_report_kick>

0800327c <??ZbZclHandleConfigReport_3>:
 800327c:	b049      	add	sp, #292	@ 0x124
 800327e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003282 <ZbZclHandleReadReport>:
 8003282:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003286:	b09a      	sub	sp, #104	@ 0x68
 8003288:	4680      	mov	r8, r0
 800328a:	4691      	mov	r9, r2
 800328c:	f05f 0a00 	movs.w	sl, #0
 8003290:	2300      	movs	r3, #0
 8003292:	a28d      	add	r2, pc, #564	@ (adr r2, 80034c8 <??DataTable10>)
 8003294:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 8003298:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800329c:	f011 f9c6 	bl	801462c <zb_heap_alloc>
 80032a0:	0007      	movs	r7, r0
 80032a2:	2f00      	cmp	r7, #0
 80032a4:	d106      	bne.n	80032b4 <??ZbZclHandleReadReport_0>
 80032a6:	2389      	movs	r3, #137	@ 0x89
 80032a8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80032aa:	4649      	mov	r1, r9
 80032ac:	4640      	mov	r0, r8
 80032ae:	f011 f880 	bl	80143b2 <ZbZclSendDefaultResponse>
 80032b2:	e105      	b.n	80034c0 <??ZbZclHandleReadReport_1>

080032b4 <??ZbZclHandleReadReport_0>:
 80032b4:	2408      	movs	r4, #8
 80032b6:	2500      	movs	r5, #0
 80032b8:	ae01      	add	r6, sp, #4
 80032ba:	002a      	movs	r2, r5
 80032bc:	0021      	movs	r1, r4
 80032be:	0030      	movs	r0, r6
 80032c0:	f002 fce4 	bl	8005c8c <__aeabi_memset>
 80032c4:	2000      	movs	r0, #0
 80032c6:	f88d 0004 	strb.w	r0, [sp, #4]
 80032ca:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032cc:	7840      	ldrb	r0, [r0, #1]
 80032ce:	f88d 0005 	strb.w	r0, [sp, #5]
 80032d2:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032d4:	7880      	ldrb	r0, [r0, #2]
 80032d6:	2800      	cmp	r0, #0
 80032d8:	d103      	bne.n	80032e2 <??ZbZclHandleReadReport_2>
 80032da:	2001      	movs	r0, #1
 80032dc:	f88d 0006 	strb.w	r0, [sp, #6]
 80032e0:	e002      	b.n	80032e8 <??ZbZclHandleReadReport_3>

080032e2 <??ZbZclHandleReadReport_2>:
 80032e2:	2000      	movs	r0, #0
 80032e4:	f88d 0006 	strb.w	r0, [sp, #6]

080032e8 <??ZbZclHandleReadReport_3>:
 80032e8:	2001      	movs	r0, #1
 80032ea:	f88d 0007 	strb.w	r0, [sp, #7]
 80032ee:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f0:	8880      	ldrh	r0, [r0, #4]
 80032f2:	f8ad 0008 	strh.w	r0, [sp, #8]
 80032f6:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80032f8:	7980      	ldrb	r0, [r0, #6]
 80032fa:	f88d 000a 	strb.w	r0, [sp, #10]
 80032fe:	2009      	movs	r0, #9
 8003300:	f88d 000b 	strb.w	r0, [sp, #11]
 8003304:	2205      	movs	r2, #5
 8003306:	0039      	movs	r1, r7
 8003308:	a801      	add	r0, sp, #4
 800330a:	f001 fa2b 	bl	8004764 <ZbZclAppendHeader>
 800330e:	0004      	movs	r4, r0
 8003310:	2c00      	cmp	r4, #0
 8003312:	d506      	bpl.n	8003322 <??ZbZclHandleReadReport_4>
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8003318:	4649      	mov	r1, r9
 800331a:	4640      	mov	r0, r8
 800331c:	f011 f849 	bl	80143b2 <ZbZclSendDefaultResponse>
 8003320:	e0ce      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003322 <??ZbZclHandleReadReport_4>:
 8003322:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003326:	4582      	cmp	sl, r0
 8003328:	f080 80a1 	bcs.w	800346e <??ZbZclHandleReadReport_5>
 800332c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8003330:	f11a 0103 	adds.w	r1, sl, #3
 8003334:	4288      	cmp	r0, r1
 8003336:	d206      	bcs.n	8003346 <??ZbZclHandleReadReport_6>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800333c:	4649      	mov	r1, r9
 800333e:	4640      	mov	r0, r8
 8003340:	f011 f837 	bl	80143b2 <ZbZclSendDefaultResponse>
 8003344:	e0bc      	b.n	80034c0 <??ZbZclHandleReadReport_1>

08003346 <??ZbZclHandleReadReport_6>:
 8003346:	4650      	mov	r0, sl
 8003348:	f110 0a01 	adds.w	sl, r0, #1
 800334c:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 8003350:	5c08      	ldrb	r0, [r1, r0]
 8003352:	2800      	cmp	r0, #0
 8003354:	d003      	beq.n	800335e <??ZbZclHandleReadReport_7>
 8003356:	2001      	movs	r0, #1
 8003358:	f88d 0000 	strb.w	r0, [sp]
 800335c:	e002      	b.n	8003364 <??ZbZclHandleReadReport_8>

0800335e <??ZbZclHandleReadReport_7>:
 800335e:	2000      	movs	r0, #0
 8003360:	f88d 0000 	strb.w	r0, [sp]

08003364 <??ZbZclHandleReadReport_8>:
 8003364:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 8003368:	4450      	add	r0, sl
 800336a:	f001 fb6d 	bl	8004a48 <pletoh16>
 800336e:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003372:	f11a 0a02 	adds.w	sl, sl, #2
 8003376:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800337a:	4640      	mov	r0, r8
 800337c:	f7fc ff2f 	bl	80001de <ZbZclAttrFind>
 8003380:	0006      	movs	r6, r0
 8003382:	2e00      	cmp	r6, #0
 8003384:	d102      	bne.n	800338c <??ZbZclHandleReadReport_9>
 8003386:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 800338a:	e05c      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800338c <??ZbZclHandleReadReport_9>:
 800338c:	68b0      	ldr	r0, [r6, #8]
 800338e:	7900      	ldrb	r0, [r0, #4]
 8003390:	0780      	lsls	r0, r0, #30
 8003392:	d402      	bmi.n	800339a <??ZbZclHandleReadReport_11>
 8003394:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 8003398:	e055      	b.n	8003446 <??ZbZclHandleReadReport_10>

0800339a <??ZbZclHandleReadReport_11>:
 800339a:	f89d 2000 	ldrb.w	r2, [sp]
 800339e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80033a2:	4640      	mov	r0, r8
 80033a4:	f7ff fa3f 	bl	8002826 <zcl_reporting_find>
 80033a8:	0005      	movs	r5, r0
 80033aa:	2d00      	cmp	r5, #0
 80033ac:	d102      	bne.n	80033b4 <??ZbZclHandleReadReport_12>
 80033ae:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033b2:	e048      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033b4 <??ZbZclHandleReadReport_12>:
 80033b4:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80033b6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80033ba:	4288      	cmp	r0, r1
 80033bc:	d102      	bne.n	80033c4 <??ZbZclHandleReadReport_13>
 80033be:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 80033c2:	e040      	b.n	8003446 <??ZbZclHandleReadReport_10>

080033c4 <??ZbZclHandleReadReport_13>:
 80033c4:	2020      	movs	r0, #32
 80033c6:	9005      	str	r0, [sp, #20]
 80033c8:	2000      	movs	r0, #0
 80033ca:	9004      	str	r0, [sp, #16]
 80033cc:	f10d 0b18 	add.w	fp, sp, #24
 80033d0:	9a04      	ldr	r2, [sp, #16]
 80033d2:	9905      	ldr	r1, [sp, #20]
 80033d4:	4658      	mov	r0, fp
 80033d6:	f002 fc59 	bl	8005c8c <__aeabi_memset>
 80033da:	f89d 0000 	ldrb.w	r0, [sp]
 80033de:	2800      	cmp	r0, #0
 80033e0:	d003      	beq.n	80033ea <??ZbZclHandleReadReport_14>
 80033e2:	2001      	movs	r0, #1
 80033e4:	f88d 0018 	strb.w	r0, [sp, #24]
 80033e8:	e002      	b.n	80033f0 <??ZbZclHandleReadReport_15>

080033ea <??ZbZclHandleReadReport_14>:
 80033ea:	2000      	movs	r0, #0
 80033ec:	f88d 0018 	strb.w	r0, [sp, #24]

080033f0 <??ZbZclHandleReadReport_15>:
 80033f0:	89a8      	ldrh	r0, [r5, #12]
 80033f2:	f8ad 001a 	strh.w	r0, [sp, #26]
 80033f6:	7ba8      	ldrb	r0, [r5, #14]
 80033f8:	f88d 001c 	strb.w	r0, [sp, #28]
 80033fc:	8c28      	ldrh	r0, [r5, #32]
 80033fe:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003402:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003404:	f8ad 0020 	strh.w	r0, [sp, #32]
 8003408:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 800340c:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 8003410:	2000      	movs	r0, #0
 8003412:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8003416:	2000      	movs	r0, #0
 8003418:	5538      	strb	r0, [r7, r4]
 800341a:	1c64      	adds	r4, r4, #1
 800341c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8003420:	0020      	movs	r0, r4
 8003422:	b280      	uxth	r0, r0
 8003424:	1a12      	subs	r2, r2, r0
 8003426:	eb07 0104 	add.w	r1, r7, r4
 800342a:	a806      	add	r0, sp, #24
 800342c:	f000 f896 	bl	800355c <zcl_append_report_config_record>
 8003430:	9003      	str	r0, [sp, #12]
 8003432:	9803      	ldr	r0, [sp, #12]
 8003434:	2800      	cmp	r0, #0
 8003436:	d503      	bpl.n	8003440 <??ZbZclHandleReadReport_16>
 8003438:	1e64      	subs	r4, r4, #1
 800343a:	f05f 0b01 	movs.w	fp, #1
 800343e:	e002      	b.n	8003446 <??ZbZclHandleReadReport_10>

08003440 <??ZbZclHandleReadReport_16>:
 8003440:	9803      	ldr	r0, [sp, #12]
 8003442:	1904      	adds	r4, r0, r4
 8003444:	e76d      	b.n	8003322 <??ZbZclHandleReadReport_4>

08003446 <??ZbZclHandleReadReport_10>:
 8003446:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800344a:	1ce1      	adds	r1, r4, #3
 800344c:	4288      	cmp	r0, r1
 800344e:	d30e      	bcc.n	800346e <??ZbZclHandleReadReport_5>

08003450 <??ZbZclHandleReadReport_17>:
 8003450:	f807 b004 	strb.w	fp, [r7, r4]
 8003454:	1c64      	adds	r4, r4, #1
 8003456:	f89d 0000 	ldrb.w	r0, [sp]
 800345a:	5538      	strb	r0, [r7, r4]
 800345c:	1c64      	adds	r4, r4, #1
 800345e:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8003462:	eb07 0004 	add.w	r0, r7, r4
 8003466:	f001 fb3b 	bl	8004ae0 <putle16>
 800346a:	1ca4      	adds	r4, r4, #2
 800346c:	e759      	b.n	8003322 <??ZbZclHandleReadReport_4>

0800346e <??ZbZclHandleReadReport_5>:
 800346e:	464a      	mov	r2, r9
 8003470:	a90e      	add	r1, sp, #56	@ 0x38
 8003472:	4640      	mov	r0, r8
 8003474:	f000 fc15 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 8003478:	a80e      	add	r0, sp, #56	@ 0x38
 800347a:	f119 0110 	adds.w	r1, r9, #16
 800347e:	2210      	movs	r2, #16
 8003480:	f013 fe7d 	bl	801717e <__aeabi_memcpy>
 8003484:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 8003488:	f000 fba3 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 800348c:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 8003490:	2001      	movs	r0, #1
 8003492:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 8003496:	2000      	movs	r0, #0
 8003498:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 800349c:	9714      	str	r7, [sp, #80]	@ 0x50
 800349e:	0020      	movs	r0, r4
 80034a0:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80034a4:	2300      	movs	r3, #0
 80034a6:	2200      	movs	r2, #0
 80034a8:	a90e      	add	r1, sp, #56	@ 0x38
 80034aa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034ae:	f010 fa3f 	bl	8013930 <ZbApsdeDataReqCallback>
 80034b2:	2300      	movs	r3, #0
 80034b4:	a204      	add	r2, pc, #16	@ (adr r2, 80034c8 <??DataTable10>)
 80034b6:	0039      	movs	r1, r7
 80034b8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80034bc:	f011 f8c5 	bl	801464a <zb_heap_free>

080034c0 <??ZbZclHandleReadReport_1>:
 80034c0:	b01b      	add	sp, #108	@ 0x6c
 80034c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080034c8 <??DataTable10>:
 80034c8:	0000 0000                                   ....

080034cc <ZbZclHandleReportAttr>:
 80034cc:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80034d0:	0004      	movs	r4, r0
 80034d2:	000d      	movs	r5, r1
 80034d4:	0016      	movs	r6, r2
 80034d6:	f05f 0a00 	movs.w	sl, #0
 80034da:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80034dc:	2800      	cmp	r0, #0
 80034de:	d03b      	beq.n	8003558 <??ZbZclHandleReportAttr_0>

080034e0 <??ZbZclHandleReportAttr_1>:
 80034e0:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80034e2:	4651      	mov	r1, sl
 80034e4:	b289      	uxth	r1, r1
 80034e6:	1cc9      	adds	r1, r1, #3
 80034e8:	4288      	cmp	r0, r1
 80034ea:	d335      	bcc.n	8003558 <??ZbZclHandleReportAttr_0>

080034ec <??ZbZclHandleReportAttr_3>:
 80034ec:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034ee:	4651      	mov	r1, sl
 80034f0:	b289      	uxth	r1, r1
 80034f2:	4408      	add	r0, r1
 80034f4:	f001 faa8 	bl	8004a48 <pletoh16>
 80034f8:	0007      	movs	r7, r0
 80034fa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80034fc:	4651      	mov	r1, sl
 80034fe:	b289      	uxth	r1, r1
 8003500:	4408      	add	r0, r1
 8003502:	7880      	ldrb	r0, [r0, #2]
 8003504:	4680      	mov	r8, r0
 8003506:	f11a 0a03 	adds.w	sl, sl, #3
 800350a:	2300      	movs	r3, #0
 800350c:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800350e:	4650      	mov	r0, sl
 8003510:	b280      	uxth	r0, r0
 8003512:	1a12      	subs	r2, r2, r0
 8003514:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003516:	4651      	mov	r1, sl
 8003518:	b289      	uxth	r1, r1
 800351a:	4401      	add	r1, r0
 800351c:	4640      	mov	r0, r8
 800351e:	b2c0      	uxtb	r0, r0
 8003520:	f7fd fd89 	bl	8001036 <ZbZclAttrParseLength>
 8003524:	4681      	mov	r9, r0
 8003526:	f1b9 0f00 	cmp.w	r9, #0
 800352a:	d415      	bmi.n	8003558 <??ZbZclHandleReportAttr_0>

0800352c <??ZbZclHandleReportAttr_4>:
 800352c:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800352e:	ebb0 000a 	subs.w	r0, r0, sl
 8003532:	b280      	uxth	r0, r0
 8003534:	9001      	str	r0, [sp, #4]
 8003536:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8003538:	4651      	mov	r1, sl
 800353a:	b289      	uxth	r1, r1
 800353c:	4408      	add	r0, r1
 800353e:	9000      	str	r0, [sp, #0]
 8003540:	4643      	mov	r3, r8
 8003542:	b2db      	uxtb	r3, r3
 8003544:	003a      	movs	r2, r7
 8003546:	b292      	uxth	r2, r2
 8003548:	0031      	movs	r1, r6
 800354a:	0020      	movs	r0, r4
 800354c:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 8003550:	47e0      	blx	ip
 8003552:	eb19 0a0a 	adds.w	sl, r9, sl
 8003556:	e7c3      	b.n	80034e0 <??ZbZclHandleReportAttr_1>

08003558 <??ZbZclHandleReportAttr_0>:
 8003558:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

0800355c <zcl_append_report_config_record>:
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003560:	0005      	movs	r5, r0
 8003562:	000e      	movs	r6, r1
 8003564:	4690      	mov	r8, r2
 8003566:	2700      	movs	r7, #0
 8003568:	7828      	ldrb	r0, [r5, #0]
 800356a:	2800      	cmp	r0, #0
 800356c:	d003      	beq.n	8003576 <??zcl_append_report_config_record_0>
 800356e:	2801      	cmp	r0, #1
 8003570:	f000 80f4 	beq.w	800375c <??zcl_append_report_config_record_1>
 8003574:	e108      	b.n	8003788 <??zcl_append_report_config_record_2>

08003576 <??zcl_append_report_config_record_0>:
 8003576:	7928      	ldrb	r0, [r5, #4]
 8003578:	f001 ff6a 	bl	8005450 <ZbZclAttrIsFloat>
 800357c:	2800      	cmp	r0, #0
 800357e:	d002      	beq.n	8003586 <??zcl_append_report_config_record_3>
 8003580:	2001      	movs	r0, #1
 8003582:	4681      	mov	r9, r0
 8003584:	e009      	b.n	800359a <??zcl_append_report_config_record_4>

08003586 <??zcl_append_report_config_record_3>:
 8003586:	7928      	ldrb	r0, [r5, #4]
 8003588:	f7fd fe06 	bl	8001198 <ZbZclAttrIsAnalog>
 800358c:	2800      	cmp	r0, #0
 800358e:	d002      	beq.n	8003596 <??zcl_append_report_config_record_5>
 8003590:	2001      	movs	r0, #1
 8003592:	4681      	mov	r9, r0
 8003594:	e001      	b.n	800359a <??zcl_append_report_config_record_4>

08003596 <??zcl_append_report_config_record_5>:
 8003596:	2000      	movs	r0, #0
 8003598:	4681      	mov	r9, r0

0800359a <??zcl_append_report_config_record_4>:
 800359a:	f1b8 0f08 	cmp.w	r8, #8
 800359e:	d202      	bcs.n	80035a6 <??zcl_append_report_config_record_6>
 80035a0:	f05f 30ff 	movs.w	r0, #4294967295
 80035a4:	e0f3      	b.n	800378e <??zcl_append_report_config_record_7>

080035a6 <??zcl_append_report_config_record_6>:
 80035a6:	7828      	ldrb	r0, [r5, #0]
 80035a8:	55f0      	strb	r0, [r6, r7]
 80035aa:	1c7f      	adds	r7, r7, #1
 80035ac:	8869      	ldrh	r1, [r5, #2]
 80035ae:	eb06 0007 	add.w	r0, r6, r7
 80035b2:	f001 fa95 	bl	8004ae0 <putle16>
 80035b6:	1cbf      	adds	r7, r7, #2
 80035b8:	7928      	ldrb	r0, [r5, #4]
 80035ba:	55f0      	strb	r0, [r6, r7]
 80035bc:	1c7f      	adds	r7, r7, #1
 80035be:	88e9      	ldrh	r1, [r5, #6]
 80035c0:	eb06 0007 	add.w	r0, r6, r7
 80035c4:	f001 fa8c 	bl	8004ae0 <putle16>
 80035c8:	1cbf      	adds	r7, r7, #2
 80035ca:	8929      	ldrh	r1, [r5, #8]
 80035cc:	eb06 0007 	add.w	r0, r6, r7
 80035d0:	f001 fa86 	bl	8004ae0 <putle16>
 80035d4:	1cbf      	adds	r7, r7, #2
 80035d6:	4648      	mov	r0, r9
 80035d8:	b2c0      	uxtb	r0, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	f000 80bd 	beq.w	800375a <??zcl_append_report_config_record_8>
 80035e0:	7928      	ldrb	r0, [r5, #4]
 80035e2:	f7fd fc9d 	bl	8000f20 <ZbZclAttrTypeLength>
 80035e6:	0004      	movs	r4, r0
 80035e8:	2c00      	cmp	r4, #0
 80035ea:	d101      	bne.n	80035f0 <??zcl_append_report_config_record_9>
 80035ec:	2001      	movs	r0, #1
 80035ee:	e0ce      	b.n	800378e <??zcl_append_report_config_record_7>

080035f0 <??zcl_append_report_config_record_9>:
 80035f0:	2c01      	cmp	r4, #1
 80035f2:	d00e      	beq.n	8003612 <??zcl_append_report_config_record_10>
 80035f4:	f0c0 80af 	bcc.w	8003756 <??zcl_append_report_config_record_11>
 80035f8:	2c03      	cmp	r4, #3
 80035fa:	d02f      	beq.n	800365c <??zcl_append_report_config_record_12>
 80035fc:	d319      	bcc.n	8003632 <??zcl_append_report_config_record_13>
 80035fe:	2c05      	cmp	r4, #5
 8003600:	d054      	beq.n	80036ac <??zcl_append_report_config_record_14>
 8003602:	d33f      	bcc.n	8003684 <??zcl_append_report_config_record_15>
 8003604:	2c07      	cmp	r4, #7
 8003606:	d07c      	beq.n	8003702 <??zcl_append_report_config_record_16>
 8003608:	d365      	bcc.n	80036d6 <??zcl_append_report_config_record_17>
 800360a:	2c08      	cmp	r4, #8
 800360c:	f000 808e 	beq.w	800372c <??zcl_append_report_config_record_18>
 8003610:	e0a1      	b.n	8003756 <??zcl_append_report_config_record_11>

08003612 <??zcl_append_report_config_record_10>:
 8003612:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003616:	2201      	movs	r2, #1
 8003618:	4b5f      	ldr	r3, [pc, #380]	@ (8003798 <??DataTable11_1>)
 800361a:	f002 fff9 	bl	8006610 <__aeabi_cdrcmple>
 800361e:	d801      	bhi.n	8003624 <??zcl_append_report_config_record_19>
 8003620:	2001      	movs	r0, #1
 8003622:	e0b4      	b.n	800378e <??zcl_append_report_config_record_7>

08003624 <??zcl_append_report_config_record_19>:
 8003624:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003628:	f003 f834 	bl	8006694 <__aeabi_d2iz>
 800362c:	55f0      	strb	r0, [r6, r7]
 800362e:	1c7f      	adds	r7, r7, #1
 8003630:	e093      	b.n	800375a <??zcl_append_report_config_record_8>

08003632 <??zcl_append_report_config_record_13>:
 8003632:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003636:	2201      	movs	r2, #1
 8003638:	4b58      	ldr	r3, [pc, #352]	@ (800379c <??DataTable11_2>)
 800363a:	f002 ffe9 	bl	8006610 <__aeabi_cdrcmple>
 800363e:	d801      	bhi.n	8003644 <??zcl_append_report_config_record_20>
 8003640:	2001      	movs	r0, #1
 8003642:	e0a4      	b.n	800378e <??zcl_append_report_config_record_7>

08003644 <??zcl_append_report_config_record_20>:
 8003644:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003648:	f003 f824 	bl	8006694 <__aeabi_d2iz>
 800364c:	0001      	movs	r1, r0
 800364e:	b289      	uxth	r1, r1
 8003650:	eb06 0007 	add.w	r0, r6, r7
 8003654:	f001 fa44 	bl	8004ae0 <putle16>
 8003658:	1cbf      	adds	r7, r7, #2
 800365a:	e07e      	b.n	800375a <??zcl_append_report_config_record_8>

0800365c <??zcl_append_report_config_record_12>:
 800365c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003660:	4a4f      	ldr	r2, [pc, #316]	@ (80037a0 <??DataTable11_3>)
 8003662:	4b50      	ldr	r3, [pc, #320]	@ (80037a4 <??DataTable11_4>)
 8003664:	f002 ffd4 	bl	8006610 <__aeabi_cdrcmple>
 8003668:	d801      	bhi.n	800366e <??zcl_append_report_config_record_21>
 800366a:	2001      	movs	r0, #1
 800366c:	e08f      	b.n	800378e <??zcl_append_report_config_record_7>

0800366e <??zcl_append_report_config_record_21>:
 800366e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003672:	f003 f837 	bl	80066e4 <__aeabi_d2uiz>
 8003676:	0001      	movs	r1, r0
 8003678:	eb06 0007 	add.w	r0, r6, r7
 800367c:	f001 fa36 	bl	8004aec <putle24>
 8003680:	1cff      	adds	r7, r7, #3
 8003682:	e06a      	b.n	800375a <??zcl_append_report_config_record_8>

08003684 <??zcl_append_report_config_record_15>:
 8003684:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003688:	4a47      	ldr	r2, [pc, #284]	@ (80037a8 <??DataTable11_5>)
 800368a:	4b48      	ldr	r3, [pc, #288]	@ (80037ac <??DataTable11_6>)
 800368c:	f002 ffc0 	bl	8006610 <__aeabi_cdrcmple>
 8003690:	d801      	bhi.n	8003696 <??zcl_append_report_config_record_22>
 8003692:	2001      	movs	r0, #1
 8003694:	e07b      	b.n	800378e <??zcl_append_report_config_record_7>

08003696 <??zcl_append_report_config_record_22>:
 8003696:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800369a:	f003 f823 	bl	80066e4 <__aeabi_d2uiz>
 800369e:	0001      	movs	r1, r0
 80036a0:	eb06 0007 	add.w	r0, r6, r7
 80036a4:	f001 fa2e 	bl	8004b04 <putle32>
 80036a8:	1d3f      	adds	r7, r7, #4
 80036aa:	e056      	b.n	800375a <??zcl_append_report_config_record_8>

080036ac <??zcl_append_report_config_record_14>:
 80036ac:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036b0:	4a3f      	ldr	r2, [pc, #252]	@ (80037b0 <??DataTable11_7>)
 80036b2:	4b40      	ldr	r3, [pc, #256]	@ (80037b4 <??DataTable11_8>)
 80036b4:	f002 ffac 	bl	8006610 <__aeabi_cdrcmple>
 80036b8:	d801      	bhi.n	80036be <??zcl_append_report_config_record_23>
 80036ba:	2001      	movs	r0, #1
 80036bc:	e067      	b.n	800378e <??zcl_append_report_config_record_7>

080036be <??zcl_append_report_config_record_23>:
 80036be:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036c2:	f003 f85f 	bl	8006784 <__aeabi_d2ulz>
 80036c6:	0002      	movs	r2, r0
 80036c8:	000b      	movs	r3, r1
 80036ca:	eb06 0007 	add.w	r0, r6, r7
 80036ce:	f001 fa24 	bl	8004b1a <putle40>
 80036d2:	1d7f      	adds	r7, r7, #5
 80036d4:	e041      	b.n	800375a <??zcl_append_report_config_record_8>

080036d6 <??zcl_append_report_config_record_17>:
 80036d6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036da:	f07f 021e 	mvns.w	r2, #30
 80036de:	4b36      	ldr	r3, [pc, #216]	@ (80037b8 <??DataTable11_9>)
 80036e0:	f002 ff96 	bl	8006610 <__aeabi_cdrcmple>
 80036e4:	d801      	bhi.n	80036ea <??zcl_append_report_config_record_24>
 80036e6:	2001      	movs	r0, #1
 80036e8:	e051      	b.n	800378e <??zcl_append_report_config_record_7>

080036ea <??zcl_append_report_config_record_24>:
 80036ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80036ee:	f003 f849 	bl	8006784 <__aeabi_d2ulz>
 80036f2:	0002      	movs	r2, r0
 80036f4:	000b      	movs	r3, r1
 80036f6:	eb06 0007 	add.w	r0, r6, r7
 80036fa:	f001 fa18 	bl	8004b2e <putle48>
 80036fe:	1dbf      	adds	r7, r7, #6
 8003700:	e02b      	b.n	800375a <??zcl_append_report_config_record_8>

08003702 <??zcl_append_report_config_record_16>:
 8003702:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003706:	2201      	movs	r2, #1
 8003708:	4b2c      	ldr	r3, [pc, #176]	@ (80037bc <??DataTable11_10>)
 800370a:	f002 ff81 	bl	8006610 <__aeabi_cdrcmple>
 800370e:	d801      	bhi.n	8003714 <??zcl_append_report_config_record_25>
 8003710:	2001      	movs	r0, #1
 8003712:	e03c      	b.n	800378e <??zcl_append_report_config_record_7>

08003714 <??zcl_append_report_config_record_25>:
 8003714:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003718:	f003 f834 	bl	8006784 <__aeabi_d2ulz>
 800371c:	0002      	movs	r2, r0
 800371e:	000b      	movs	r3, r1
 8003720:	eb06 0007 	add.w	r0, r6, r7
 8003724:	f001 fa12 	bl	8004b4c <putle56>
 8003728:	1dff      	adds	r7, r7, #7
 800372a:	e016      	b.n	800375a <??zcl_append_report_config_record_8>

0800372c <??zcl_append_report_config_record_18>:
 800372c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003730:	2201      	movs	r2, #1
 8003732:	4b23      	ldr	r3, [pc, #140]	@ (80037c0 <??DataTable11_11>)
 8003734:	f002 ff6c 	bl	8006610 <__aeabi_cdrcmple>
 8003738:	d801      	bhi.n	800373e <??zcl_append_report_config_record_26>
 800373a:	2001      	movs	r0, #1
 800373c:	e027      	b.n	800378e <??zcl_append_report_config_record_7>

0800373e <??zcl_append_report_config_record_26>:
 800373e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8003742:	f003 f81f 	bl	8006784 <__aeabi_d2ulz>
 8003746:	0002      	movs	r2, r0
 8003748:	000b      	movs	r3, r1
 800374a:	eb06 0007 	add.w	r0, r6, r7
 800374e:	f001 fa0c 	bl	8004b6a <putle64>
 8003752:	3708      	adds	r7, #8
 8003754:	e001      	b.n	800375a <??zcl_append_report_config_record_8>

08003756 <??zcl_append_report_config_record_11>:
 8003756:	2001      	movs	r0, #1
 8003758:	e019      	b.n	800378e <??zcl_append_report_config_record_7>

0800375a <??zcl_append_report_config_record_8>:
 800375a:	e017      	b.n	800378c <??zcl_append_report_config_record_27>

0800375c <??zcl_append_report_config_record_1>:
 800375c:	f1b8 0f08 	cmp.w	r8, #8
 8003760:	d202      	bcs.n	8003768 <??zcl_append_report_config_record_28>
 8003762:	f05f 30ff 	movs.w	r0, #4294967295
 8003766:	e012      	b.n	800378e <??zcl_append_report_config_record_7>

08003768 <??zcl_append_report_config_record_28>:
 8003768:	7828      	ldrb	r0, [r5, #0]
 800376a:	55f0      	strb	r0, [r6, r7]
 800376c:	1c7f      	adds	r7, r7, #1
 800376e:	8869      	ldrh	r1, [r5, #2]
 8003770:	eb06 0007 	add.w	r0, r6, r7
 8003774:	f001 f9b4 	bl	8004ae0 <putle16>
 8003778:	1cbf      	adds	r7, r7, #2
 800377a:	8b29      	ldrh	r1, [r5, #24]
 800377c:	eb06 0007 	add.w	r0, r6, r7
 8003780:	f001 f9ae 	bl	8004ae0 <putle16>
 8003784:	1cbf      	adds	r7, r7, #2
 8003786:	e001      	b.n	800378c <??zcl_append_report_config_record_27>

08003788 <??zcl_append_report_config_record_2>:
 8003788:	2001      	movs	r0, #1
 800378a:	e000      	b.n	800378e <??zcl_append_report_config_record_7>

0800378c <??zcl_append_report_config_record_27>:
 800378c:	0038      	movs	r0, r7

0800378e <??zcl_append_report_config_record_7>:
 800378e:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

08003794 <??DataTable11>:
 8003794:	0000 3ff0                                   ...?

08003798 <??DataTable11_1>:
 8003798:	e000 406f                                   ..o@

0800379c <??DataTable11_2>:
 800379c:	ffe0 40ef                                   ...@

080037a0 <??DataTable11_3>:
 80037a0:	0001 e000                                   ....

080037a4 <??DataTable11_4>:
 80037a4:	ffff 416f                                   ..oA

080037a8 <??DataTable11_5>:
 80037a8:	0001 ffe0                                   ....

080037ac <??DataTable11_6>:
 80037ac:	ffff 41ef                                   ...A

080037b0 <??DataTable11_7>:
 80037b0:	e001 ffff                                   ....

080037b4 <??DataTable11_8>:
 80037b4:	ffff 426f                                   ..oB

080037b8 <??DataTable11_9>:
 80037b8:	ffff 42ef                                   ...B

080037bc <??DataTable11_10>:
 80037bc:	0000 4370                                   ..pC

080037c0 <??DataTable11_11>:
 80037c0:	0000 43f0                                   ...C

080037c4 <ZbZclAttrReportConfigReq>:
 80037c4:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	b09b      	sub	sp, #108	@ 0x6c
 80037ca:	0004      	movs	r4, r0
 80037cc:	000d      	movs	r5, r1
 80037ce:	001e      	movs	r6, r3
 80037d0:	2700      	movs	r7, #0
 80037d2:	7c28      	ldrb	r0, [r5, #16]
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d002      	beq.n	80037de <??ZbZclAttrReportConfigReq_0>
 80037d8:	7c28      	ldrb	r0, [r5, #16]
 80037da:	2807      	cmp	r0, #7
 80037dc:	d301      	bcc.n	80037e2 <??ZbZclAttrReportConfigReq_1>

080037de <??ZbZclAttrReportConfigReq_0>:
 80037de:	2001      	movs	r0, #1
 80037e0:	e059      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

080037e2 <??ZbZclAttrReportConfigReq_1>:
 80037e2:	f05f 0800 	movs.w	r8, #0

080037e6 <??ZbZclAttrReportConfigReq_3>:
 80037e6:	7c28      	ldrb	r0, [r5, #16]
 80037e8:	4580      	cmp	r8, r0
 80037ea:	d215      	bcs.n	8003818 <??ZbZclAttrReportConfigReq_4>
 80037ec:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80037f0:	4428      	add	r0, r5
 80037f2:	f110 0918 	adds.w	r9, r0, #24
 80037f6:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 80037fa:	a80c      	add	r0, sp, #48	@ 0x30
 80037fc:	eb00 0107 	add.w	r1, r0, r7
 8003800:	4648      	mov	r0, r9
 8003802:	f7ff feab 	bl	800355c <zcl_append_report_config_record>
 8003806:	0001      	movs	r1, r0
 8003808:	2901      	cmp	r1, #1
 800380a:	da01      	bge.n	8003810 <??ZbZclAttrReportConfigReq_5>
 800380c:	2001      	movs	r0, #1
 800380e:	e042      	b.n	8003896 <??ZbZclAttrReportConfigReq_2>

08003810 <??ZbZclAttrReportConfigReq_5>:
 8003810:	19cf      	adds	r7, r1, r7
 8003812:	f118 0801 	adds.w	r8, r8, #1
 8003816:	e7e6      	b.n	80037e6 <??ZbZclAttrReportConfigReq_3>

08003818 <??ZbZclAttrReportConfigReq_4>:
 8003818:	f05f 0930 	movs.w	r9, #48	@ 0x30
 800381c:	f05f 0a00 	movs.w	sl, #0
 8003820:	46eb      	mov	fp, sp
 8003822:	4652      	mov	r2, sl
 8003824:	4649      	mov	r1, r9
 8003826:	4658      	mov	r0, fp
 8003828:	f002 fa30 	bl	8005c8c <__aeabi_memset>
 800382c:	2000      	movs	r0, #0
 800382e:	f88d 001a 	strb.w	r0, [sp, #26]
 8003832:	8a20      	ldrh	r0, [r4, #16]
 8003834:	2800      	cmp	r0, #0
 8003836:	d001      	beq.n	800383c <??ZbZclAttrReportConfigReq_6>
 8003838:	2001      	movs	r0, #1
 800383a:	e000      	b.n	800383e <??ZbZclAttrReportConfigReq_7>

0800383c <??ZbZclAttrReportConfigReq_6>:
 800383c:	2000      	movs	r0, #0

0800383e <??ZbZclAttrReportConfigReq_7>:
 800383e:	f88d 001b 	strb.w	r0, [sp, #27]
 8003842:	8a20      	ldrh	r0, [r4, #16]
 8003844:	f8ad 001e 	strh.w	r0, [sp, #30]
 8003848:	2006      	movs	r0, #6
 800384a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800384e:	f010 fd2c 	bl	80142aa <ZbZclGetNextSeqnum>
 8003852:	f88d 0020 	strb.w	r0, [sp, #32]
 8003856:	4668      	mov	r0, sp
 8003858:	0029      	movs	r1, r5
 800385a:	2210      	movs	r2, #16
 800385c:	f013 fc8f 	bl	801717e <__aeabi_memcpy>
 8003860:	8aa0      	ldrh	r0, [r4, #20]
 8003862:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003866:	89a0      	ldrh	r0, [r4, #12]
 8003868:	f8ad 0012 	strh.w	r0, [sp, #18]
 800386c:	7ba0      	ldrb	r0, [r4, #14]
 800386e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003872:	8ae0      	ldrh	r0, [r4, #22]
 8003874:	f8ad 0016 	strh.w	r0, [sp, #22]
 8003878:	7e20      	ldrb	r0, [r4, #24]
 800387a:	f88d 0018 	strb.w	r0, [sp, #24]
 800387e:	7e60      	ldrb	r0, [r4, #25]
 8003880:	f88d 0019 	strb.w	r0, [sp, #25]
 8003884:	a80c      	add	r0, sp, #48	@ 0x30
 8003886:	9009      	str	r0, [sp, #36]	@ 0x24
 8003888:	970a      	str	r7, [sp, #40]	@ 0x28
 800388a:	0033      	movs	r3, r6
 800388c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800388e:	4669      	mov	r1, sp
 8003890:	68a0      	ldr	r0, [r4, #8]
 8003892:	f010 fd35 	bl	8014300 <ZbZclCommandReq>

08003896 <??ZbZclAttrReportConfigReq_2>:
 8003896:	b01d      	add	sp, #116	@ 0x74
 8003898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800389c <ZbZclAttrReportReadReq>:
 800389c:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038a0:	b09b      	sub	sp, #108	@ 0x6c
 80038a2:	0005      	movs	r5, r0
 80038a4:	000e      	movs	r6, r1
 80038a6:	001f      	movs	r7, r3
 80038a8:	2400      	movs	r4, #0
 80038aa:	7c30      	ldrb	r0, [r6, #16]
 80038ac:	2800      	cmp	r0, #0
 80038ae:	d002      	beq.n	80038b6 <??ZbZclAttrReportReadReq_0>
 80038b0:	7c30      	ldrb	r0, [r6, #16]
 80038b2:	2807      	cmp	r0, #7
 80038b4:	d301      	bcc.n	80038ba <??ZbZclAttrReportReadReq_1>

080038b6 <??ZbZclAttrReportReadReq_0>:
 80038b6:	2001      	movs	r0, #1
 80038b8:	e050      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ba <??ZbZclAttrReportReadReq_1>:
 80038ba:	f05f 0800 	movs.w	r8, #0

080038be <??ZbZclAttrReportReadReq_3>:
 80038be:	7c30      	ldrb	r0, [r6, #16]
 80038c0:	4580      	cmp	r8, r0
 80038c2:	d217      	bcs.n	80038f4 <??ZbZclAttrReportReadReq_4>
 80038c4:	1ce0      	adds	r0, r4, #3
 80038c6:	283a      	cmp	r0, #58	@ 0x3a
 80038c8:	d301      	bcc.n	80038ce <??ZbZclAttrReportReadReq_5>
 80038ca:	2001      	movs	r0, #1
 80038cc:	e046      	b.n	800395c <??ZbZclAttrReportReadReq_2>

080038ce <??ZbZclAttrReportReadReq_5>:
 80038ce:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038d2:	4430      	add	r0, r6
 80038d4:	7e00      	ldrb	r0, [r0, #24]
 80038d6:	a90c      	add	r1, sp, #48	@ 0x30
 80038d8:	5508      	strb	r0, [r1, r4]
 80038da:	1c64      	adds	r4, r4, #1
 80038dc:	ea5f 1048 	movs.w	r0, r8, lsl #5
 80038e0:	4430      	add	r0, r6
 80038e2:	8b41      	ldrh	r1, [r0, #26]
 80038e4:	a80c      	add	r0, sp, #48	@ 0x30
 80038e6:	4420      	add	r0, r4
 80038e8:	f001 f8fa 	bl	8004ae0 <putle16>
 80038ec:	1ca4      	adds	r4, r4, #2
 80038ee:	f118 0801 	adds.w	r8, r8, #1
 80038f2:	e7e4      	b.n	80038be <??ZbZclAttrReportReadReq_3>

080038f4 <??ZbZclAttrReportReadReq_4>:
 80038f4:	f05f 0930 	movs.w	r9, #48	@ 0x30
 80038f8:	f05f 0a00 	movs.w	sl, #0
 80038fc:	46eb      	mov	fp, sp
 80038fe:	4652      	mov	r2, sl
 8003900:	4649      	mov	r1, r9
 8003902:	4658      	mov	r0, fp
 8003904:	f002 f9c2 	bl	8005c8c <__aeabi_memset>
 8003908:	2000      	movs	r0, #0
 800390a:	f88d 001a 	strb.w	r0, [sp, #26]
 800390e:	2008      	movs	r0, #8
 8003910:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8003914:	f010 fcc9 	bl	80142aa <ZbZclGetNextSeqnum>
 8003918:	f88d 0020 	strb.w	r0, [sp, #32]
 800391c:	4668      	mov	r0, sp
 800391e:	0031      	movs	r1, r6
 8003920:	2210      	movs	r2, #16
 8003922:	f013 fc2c 	bl	801717e <__aeabi_memcpy>
 8003926:	8aa8      	ldrh	r0, [r5, #20]
 8003928:	f8ad 0010 	strh.w	r0, [sp, #16]
 800392c:	89a8      	ldrh	r0, [r5, #12]
 800392e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8003932:	7ba8      	ldrb	r0, [r5, #14]
 8003934:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003938:	8ae8      	ldrh	r0, [r5, #22]
 800393a:	f8ad 0016 	strh.w	r0, [sp, #22]
 800393e:	7e28      	ldrb	r0, [r5, #24]
 8003940:	f88d 0018 	strb.w	r0, [sp, #24]
 8003944:	7e68      	ldrb	r0, [r5, #25]
 8003946:	f88d 0019 	strb.w	r0, [sp, #25]
 800394a:	a80c      	add	r0, sp, #48	@ 0x30
 800394c:	9009      	str	r0, [sp, #36]	@ 0x24
 800394e:	940a      	str	r4, [sp, #40]	@ 0x28
 8003950:	003b      	movs	r3, r7
 8003952:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8003954:	4669      	mov	r1, sp
 8003956:	68a8      	ldr	r0, [r5, #8]
 8003958:	f010 fcd2 	bl	8014300 <ZbZclCommandReq>

0800395c <??ZbZclAttrReportReadReq_2>:
 800395c:	b01d      	add	sp, #116	@ 0x74
 800395e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003962 <ZbZclAttrReportConfigDefault>:
 8003962:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003966:	0007      	movs	r7, r0
 8003968:	4688      	mov	r8, r1
 800396a:	4691      	mov	r9, r2
 800396c:	469a      	mov	sl, r3
 800396e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8003970:	4641      	mov	r1, r8
 8003972:	b289      	uxth	r1, r1
 8003974:	0038      	movs	r0, r7
 8003976:	f7fc fc32 	bl	80001de <ZbZclAttrFind>
 800397a:	0005      	movs	r5, r0
 800397c:	2d00      	cmp	r5, #0
 800397e:	d101      	bne.n	8003984 <??ZbZclAttrReportConfigDefault_0>
 8003980:	2086      	movs	r0, #134	@ 0x86
 8003982:	e02b      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003984 <??ZbZclAttrReportConfigDefault_0>:
 8003984:	68a8      	ldr	r0, [r5, #8]
 8003986:	7900      	ldrb	r0, [r0, #4]
 8003988:	0780      	lsls	r0, r0, #30
 800398a:	d401      	bmi.n	8003990 <??ZbZclAttrReportConfigDefault_2>
 800398c:	208c      	movs	r0, #140	@ 0x8c
 800398e:	e025      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

08003990 <??ZbZclAttrReportConfigDefault_2>:
 8003990:	2200      	movs	r2, #0
 8003992:	4641      	mov	r1, r8
 8003994:	b289      	uxth	r1, r1
 8003996:	0038      	movs	r0, r7
 8003998:	f7fe ff45 	bl	8002826 <zcl_reporting_find>
 800399c:	0006      	movs	r6, r0
 800399e:	2e00      	cmp	r6, #0
 80039a0:	d101      	bne.n	80039a6 <??ZbZclAttrReportConfigDefault_3>
 80039a2:	208b      	movs	r0, #139	@ 0x8b
 80039a4:	e01a      	b.n	80039dc <??ZbZclAttrReportConfigDefault_1>

080039a6 <??ZbZclAttrReportConfigDefault_3>:
 80039a6:	f8ad 9002 	strh.w	r9, [sp, #2]
 80039aa:	f8ad a000 	strh.w	sl, [sp]
 80039ae:	4669      	mov	r1, sp
 80039b0:	f10d 0002 	add.w	r0, sp, #2
 80039b4:	f7ff f894 	bl	8002ae0 <zcl_reporting_check_default_intvl>
 80039b8:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80039bc:	84b0      	strh	r0, [r6, #36]	@ 0x24
 80039be:	f8bd 0000 	ldrh.w	r0, [sp]
 80039c2:	84f0      	strh	r0, [r6, #38]	@ 0x26
 80039c4:	2c00      	cmp	r4, #0
 80039c6:	d003      	beq.n	80039d0 <??ZbZclAttrReportConfigDefault_4>
 80039c8:	ed94 0b00 	vldr	d0, [r4]
 80039cc:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

080039d0 <??ZbZclAttrReportConfigDefault_4>:
 80039d0:	2201      	movs	r2, #1
 80039d2:	0031      	movs	r1, r6
 80039d4:	68b8      	ldr	r0, [r7, #8]
 80039d6:	f7ff f8b3 	bl	8002b40 <zcl_reporting_reset_defaults>
 80039da:	2000      	movs	r0, #0

080039dc <??ZbZclAttrReportConfigDefault_1>:
 80039dc:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

080039e0 <ZbZclClusterReportCallbackAttach>:
 80039e0:	65c1      	str	r1, [r0, #92]	@ 0x5c
 80039e2:	4770      	bx	lr

080039e4 <ZbZclClusterGetEndpoint>:
 80039e4:	7b80      	ldrb	r0, [r0, #14]
 80039e6:	4770      	bx	lr

080039e8 <ZbZclClusterSetCallbackArg>:
 80039e8:	6541      	str	r1, [r0, #84]	@ 0x54
 80039ea:	4770      	bx	lr

080039ec <ZbZclClusterSetMfrCode>:
 80039ec:	8201      	strh	r1, [r0, #16]
 80039ee:	4770      	bx	lr

080039f0 <ZbZclClusterGetClusterId>:
 80039f0:	8980      	ldrh	r0, [r0, #12]
 80039f2:	4770      	bx	lr

080039f4 <ZbZclClusterSetProfileId>:
 80039f4:	b538      	push	{r3, r4, r5, lr}
 80039f6:	0004      	movs	r4, r0
 80039f8:	000d      	movs	r5, r1
 80039fa:	82a5      	strh	r5, [r4, #20]
 80039fc:	7ba0      	ldrb	r0, [r4, #14]
 80039fe:	28ff      	cmp	r0, #255	@ 0xff
 8003a00:	d008      	beq.n	8003a14 <??ZbZclClusterSetProfileId_0>
 8003a02:	0020      	movs	r0, r4
 8003a04:	f010 fdba 	bl	801457c <ZbZclClusterUnbind>
 8003a08:	7f23      	ldrb	r3, [r4, #28]
 8003a0a:	8aa2      	ldrh	r2, [r4, #20]
 8003a0c:	7ba1      	ldrb	r1, [r4, #14]
 8003a0e:	0020      	movs	r0, r4
 8003a10:	f010 fd71 	bl	80144f6 <ZbZclClusterBind>

08003a14 <??ZbZclClusterSetProfileId_0>:
 8003a14:	bd31      	pop	{r0, r4, r5, pc}

08003a16 <ZbZclClusterGetProfileId>:
 8003a16:	b510      	push	{r4, lr}
 8003a18:	0004      	movs	r4, r0
 8003a1a:	7ba1      	ldrb	r1, [r4, #14]
 8003a1c:	68a0      	ldr	r0, [r4, #8]
 8003a1e:	f00f ffce 	bl	80139be <ZbApsEndpointProfile>
 8003a22:	0001      	movs	r1, r0
 8003a24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a28:	b289      	uxth	r1, r1
 8003a2a:	4291      	cmp	r1, r2
 8003a2c:	d101      	bne.n	8003a32 <??ZbZclClusterGetProfileId_0>
 8003a2e:	8aa1      	ldrh	r1, [r4, #20]
 8003a30:	0008      	movs	r0, r1

08003a32 <??ZbZclClusterGetProfileId_0>:
 8003a32:	b280      	uxth	r0, r0
 8003a34:	bd10      	pop	{r4, pc}

08003a36 <ZbZclClusterSetMinSecurity>:
 8003a36:	b430      	push	{r4, r5}
 8003a38:	0003      	movs	r3, r0
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	7d9a      	ldrb	r2, [r3, #22]
 8003a3e:	f012 0203 	ands.w	r2, r2, #3
 8003a42:	2a01      	cmp	r2, #1
 8003a44:	d101      	bne.n	8003a4a <??ZbZclClusterSetMinSecurity_0>
 8003a46:	2401      	movs	r4, #1
 8003a48:	e000      	b.n	8003a4c <??ZbZclClusterSetMinSecurity_1>

08003a4a <??ZbZclClusterSetMinSecurity_0>:
 8003a4a:	2400      	movs	r4, #0

08003a4c <??ZbZclClusterSetMinSecurity_1>:
 8003a4c:	000a      	movs	r2, r1
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	2aab      	cmp	r2, #171	@ 0xab
 8003a52:	d01d      	beq.n	8003a90 <??ZbZclClusterSetMinSecurity_2>
 8003a54:	2aac      	cmp	r2, #172	@ 0xac
 8003a56:	d00f      	beq.n	8003a78 <??ZbZclClusterSetMinSecurity_3>
 8003a58:	2aaf      	cmp	r2, #175	@ 0xaf
 8003a5a:	d123      	bne.n	8003aa4 <??ZbZclClusterSetMinSecurity_4>

08003a5c <??ZbZclClusterSetMinSecurity_5>:
 8003a5c:	8add      	ldrh	r5, [r3, #22]
 8003a5e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003a62:	4015      	ands	r5, r2
 8003a64:	82dd      	strh	r5, [r3, #22]
 8003a66:	8add      	ldrh	r5, [r3, #22]
 8003a68:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a6c:	4015      	ands	r5, r2
 8003a6e:	82dd      	strh	r5, [r3, #22]
 8003a70:	0022      	movs	r2, r4
 8003a72:	b2d2      	uxtb	r2, r2
 8003a74:	2a00      	cmp	r2, #0

08003a76 <??ZbZclClusterSetMinSecurity_6>:
 8003a76:	e017      	b.n	8003aa8 <??ZbZclClusterSetMinSecurity_7>

08003a78 <??ZbZclClusterSetMinSecurity_3>:
 8003a78:	8ada      	ldrh	r2, [r3, #22]
 8003a7a:	f052 0202 	orrs.w	r2, r2, #2
 8003a7e:	82da      	strh	r2, [r3, #22]
 8003a80:	8ada      	ldrh	r2, [r3, #22]
 8003a82:	f052 0201 	orrs.w	r2, r2, #1
 8003a86:	82da      	strh	r2, [r3, #22]
 8003a88:	0022      	movs	r2, r4
 8003a8a:	b2d2      	uxtb	r2, r2
 8003a8c:	2a00      	cmp	r2, #0

08003a8e <??ZbZclClusterSetMinSecurity_8>:
 8003a8e:	e00b      	b.n	8003aa8 <??ZbZclClusterSetMinSecurity_7>

08003a90 <??ZbZclClusterSetMinSecurity_2>:
 8003a90:	8add      	ldrh	r5, [r3, #22]
 8003a92:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8003a96:	4015      	ands	r5, r2
 8003a98:	82dd      	strh	r5, [r3, #22]
 8003a9a:	8ada      	ldrh	r2, [r3, #22]
 8003a9c:	f052 0201 	orrs.w	r2, r2, #1
 8003aa0:	82da      	strh	r2, [r3, #22]
 8003aa2:	e001      	b.n	8003aa8 <??ZbZclClusterSetMinSecurity_7>

08003aa4 <??ZbZclClusterSetMinSecurity_4>:
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	0010      	movs	r0, r2

08003aa8 <??ZbZclClusterSetMinSecurity_7>:
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	2a00      	cmp	r2, #0
 8003aae:	d000      	beq.n	8003ab2 <??ZbZclClusterSetMinSecurity_9>
 8003ab0:	7499      	strb	r1, [r3, #18]

08003ab2 <??ZbZclClusterSetMinSecurity_9>:
 8003ab2:	b2c0      	uxtb	r0, r0
 8003ab4:	bc30      	pop	{r4, r5}
 8003ab6:	4770      	bx	lr

08003ab8 <ZbZclClusterCheckMinSecurity>:
 8003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abc:	0004      	movs	r4, r0
 8003abe:	000d      	movs	r5, r1
 8003ac0:	0016      	movs	r6, r2
 8003ac2:	2700      	movs	r7, #0
 8003ac4:	7ca0      	ldrb	r0, [r4, #18]
 8003ac6:	28af      	cmp	r0, #175	@ 0xaf
 8003ac8:	d102      	bne.n	8003ad0 <??ZbZclClusterCheckMinSecurity_0>
 8003aca:	2001      	movs	r0, #1
 8003acc:	0007      	movs	r7, r0
 8003ace:	e073      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003ad0 <??ZbZclClusterCheckMinSecurity_0>:
 8003ad0:	7ca0      	ldrb	r0, [r4, #18]
 8003ad2:	28ac      	cmp	r0, #172	@ 0xac
 8003ad4:	d10a      	bne.n	8003aec <??ZbZclClusterCheckMinSecurity_2>
 8003ad6:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003ada:	28ac      	cmp	r0, #172	@ 0xac
 8003adc:	d003      	beq.n	8003ae6 <??ZbZclClusterCheckMinSecurity_3>
 8003ade:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003ae2:	28ab      	cmp	r0, #171	@ 0xab
 8003ae4:	d101      	bne.n	8003aea <??ZbZclClusterCheckMinSecurity_4>

08003ae6 <??ZbZclClusterCheckMinSecurity_3>:
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	0007      	movs	r7, r0

08003aea <??ZbZclClusterCheckMinSecurity_4>:
 8003aea:	e065      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003aec <??ZbZclClusterCheckMinSecurity_2>:
 8003aec:	7ca0      	ldrb	r0, [r4, #18]
 8003aee:	28ab      	cmp	r0, #171	@ 0xab
 8003af0:	d162      	bne.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>
 8003af2:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003af6:	28ab      	cmp	r0, #171	@ 0xab
 8003af8:	d102      	bne.n	8003b00 <??ZbZclClusterCheckMinSecurity_6>
 8003afa:	2001      	movs	r0, #1
 8003afc:	0007      	movs	r7, r0
 8003afe:	e05b      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b00 <??ZbZclClusterCheckMinSecurity_6>:
 8003b00:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8003b04:	28ac      	cmp	r0, #172	@ 0xac
 8003b06:	d157      	bne.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b08 <??ZbZclClusterCheckMinSecurity_7>:
 8003b08:	89a0      	ldrh	r0, [r4, #12]
 8003b0a:	2819      	cmp	r0, #25
 8003b0c:	d114      	bne.n	8003b38 <??ZbZclClusterCheckMinSecurity_8>
 8003b0e:	7f20      	ldrb	r0, [r4, #28]
 8003b10:	2801      	cmp	r0, #1
 8003b12:	d111      	bne.n	8003b38 <??ZbZclClusterCheckMinSecurity_8>
 8003b14:	0028      	movs	r0, r5
 8003b16:	f00f ff85 	bl	8013a24 <ZbApsAddrIsBcast>
 8003b1a:	2800      	cmp	r0, #0
 8003b1c:	d00b      	beq.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b1e:	7830      	ldrb	r0, [r6, #0]
 8003b20:	2801      	cmp	r0, #1
 8003b22:	d108      	bne.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b24:	78b0      	ldrb	r0, [r6, #2]
 8003b26:	2801      	cmp	r0, #1
 8003b28:	d105      	bne.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b2a:	79f0      	ldrb	r0, [r6, #7]
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d102      	bne.n	8003b36 <??ZbZclClusterCheckMinSecurity_9>
 8003b30:	2001      	movs	r0, #1
 8003b32:	0007      	movs	r7, r0
 8003b34:	e040      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b36 <??ZbZclClusterCheckMinSecurity_9>:
 8003b36:	e03f      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b38 <??ZbZclClusterCheckMinSecurity_8>:
 8003b38:	f240 7802 	movw	r8, #1794	@ 0x702
 8003b3c:	89a0      	ldrh	r0, [r4, #12]
 8003b3e:	4540      	cmp	r0, r8
 8003b40:	d11a      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b42:	7f20      	ldrb	r0, [r4, #28]
 8003b44:	2800      	cmp	r0, #0
 8003b46:	d117      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b48:	7830      	ldrb	r0, [r6, #0]
 8003b4a:	2800      	cmp	r0, #0
 8003b4c:	d114      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b4e:	79f0      	ldrb	r0, [r6, #7]
 8003b50:	2800      	cmp	r0, #0
 8003b52:	d111      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b54:	78b0      	ldrb	r0, [r6, #2]
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d10e      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b5a:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003b5c:	2802      	cmp	r0, #2
 8003b5e:	d30b      	bcc.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b60:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003b62:	f000 ff71 	bl	8004a48 <pletoh16>
 8003b66:	0001      	movs	r1, r0
 8003b68:	f240 3206 	movw	r2, #774	@ 0x306
 8003b6c:	b289      	uxth	r1, r1
 8003b6e:	4291      	cmp	r1, r2
 8003b70:	d102      	bne.n	8003b78 <??ZbZclClusterCheckMinSecurity_10>
 8003b72:	2101      	movs	r1, #1
 8003b74:	000f      	movs	r7, r1
 8003b76:	e01f      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003b78 <??ZbZclClusterCheckMinSecurity_10>:
 8003b78:	89a0      	ldrh	r0, [r4, #12]
 8003b7a:	4540      	cmp	r0, r8
 8003b7c:	d11b      	bne.n	8003bb6 <??ZbZclClusterCheckMinSecurity_11>
 8003b7e:	7f20      	ldrb	r0, [r4, #28]
 8003b80:	2801      	cmp	r0, #1
 8003b82:	d118      	bne.n	8003bb6 <??ZbZclClusterCheckMinSecurity_11>
 8003b84:	7830      	ldrb	r0, [r6, #0]
 8003b86:	2800      	cmp	r0, #0
 8003b88:	d114      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b8a:	79f0      	ldrb	r0, [r6, #7]
 8003b8c:	2801      	cmp	r0, #1
 8003b8e:	d111      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b90:	78b0      	ldrb	r0, [r6, #2]
 8003b92:	2801      	cmp	r0, #1
 8003b94:	d10e      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b96:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003b98:	2802      	cmp	r0, #2
 8003b9a:	d30b      	bcc.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003b9c:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003b9e:	f000 ff53 	bl	8004a48 <pletoh16>
 8003ba2:	0001      	movs	r1, r0
 8003ba4:	f240 3206 	movw	r2, #774	@ 0x306
 8003ba8:	b289      	uxth	r1, r1
 8003baa:	4291      	cmp	r1, r2
 8003bac:	d102      	bne.n	8003bb4 <??ZbZclClusterCheckMinSecurity_12>
 8003bae:	2101      	movs	r1, #1
 8003bb0:	000f      	movs	r7, r1
 8003bb2:	e001      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003bb4 <??ZbZclClusterCheckMinSecurity_12>:
 8003bb4:	e000      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003bb6 <??ZbZclClusterCheckMinSecurity_11>:
 8003bb6:	e7ff      	b.n	8003bb8 <??ZbZclClusterCheckMinSecurity_1>

08003bb8 <??ZbZclClusterCheckMinSecurity_1>:
 8003bb8:	0038      	movs	r0, r7
 8003bba:	b2c0      	uxtb	r0, r0
 8003bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003bc0 <ZbZclClusterSetTxOptions>:
 8003bc0:	05ca      	lsls	r2, r1, #23
 8003bc2:	d400      	bmi.n	8003bc6 <??ZbZclClusterSetTxOptions_0>

08003bc4 <??ZbZclClusterSetTxOptions_1>:
 8003bc4:	82c1      	strh	r1, [r0, #22]

08003bc6 <??ZbZclClusterSetTxOptions_0>:
 8003bc6:	4770      	bx	lr

08003bc8 <ZbZclClusterGetTxOptions>:
 8003bc8:	8ac0      	ldrh	r0, [r0, #22]
 8003bca:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 8003bce:	4008      	ands	r0, r1
 8003bd0:	4770      	bx	lr

08003bd2 <ZbZclTxOptsFromSecurityStatus>:
 8003bd2:	0001      	movs	r1, r0
 8003bd4:	2000      	movs	r0, #0
 8003bd6:	f050 0004 	orrs.w	r0, r0, #4
 8003bda:	f050 0008 	orrs.w	r0, r0, #8
 8003bde:	000a      	movs	r2, r1
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	2aab      	cmp	r2, #171	@ 0xab
 8003be4:	d102      	bne.n	8003bec <??ZbZclTxOptsFromSecurityStatus_0>
 8003be6:	f050 0001 	orrs.w	r0, r0, #1
 8003bea:	e007      	b.n	8003bfc <??ZbZclTxOptsFromSecurityStatus_1>

08003bec <??ZbZclTxOptsFromSecurityStatus_0>:
 8003bec:	000a      	movs	r2, r1
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	2aac      	cmp	r2, #172	@ 0xac
 8003bf2:	d103      	bne.n	8003bfc <??ZbZclTxOptsFromSecurityStatus_1>
 8003bf4:	f050 0001 	orrs.w	r0, r0, #1
 8003bf8:	f050 0002 	orrs.w	r0, r0, #2

08003bfc <??ZbZclTxOptsFromSecurityStatus_1>:
 8003bfc:	b280      	uxth	r0, r0
 8003bfe:	4770      	bx	lr

08003c00 <ZbZclClusterGetDirection>:
 8003c00:	7f00      	ldrb	r0, [r0, #28]
 8003c02:	4770      	bx	lr

08003c04 <ZbZclClusterGetDirectionStr>:
 8003c04:	0001      	movs	r1, r0
 8003c06:	7f08      	ldrb	r0, [r1, #28]
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d003      	beq.n	8003c14 <??ZbZclClusterGetDirectionStr_0>
 8003c0c:	2802      	cmp	r0, #2
 8003c0e:	d005      	beq.n	8003c1c <??ZbZclClusterGetDirectionStr_1>
 8003c10:	d302      	bcc.n	8003c18 <??ZbZclClusterGetDirectionStr_2>
 8003c12:	e005      	b.n	8003c20 <??ZbZclClusterGetDirectionStr_3>

08003c14 <??ZbZclClusterGetDirectionStr_0>:
 8003c14:	4803      	ldr	r0, [pc, #12]	@ (8003c24 <??DataTable1>)
 8003c16:	e004      	b.n	8003c22 <??ZbZclClusterGetDirectionStr_4>

08003c18 <??ZbZclClusterGetDirectionStr_2>:
 8003c18:	4803      	ldr	r0, [pc, #12]	@ (8003c28 <??DataTable1_1>)
 8003c1a:	e002      	b.n	8003c22 <??ZbZclClusterGetDirectionStr_4>

08003c1c <??ZbZclClusterGetDirectionStr_1>:
 8003c1c:	4803      	ldr	r0, [pc, #12]	@ (8003c2c <??DataTable1_2>)
 8003c1e:	e000      	b.n	8003c22 <??ZbZclClusterGetDirectionStr_4>

08003c20 <??ZbZclClusterGetDirectionStr_3>:
 8003c20:	4803      	ldr	r0, [pc, #12]	@ (8003c30 <??DataTable1_3>)

08003c22 <??ZbZclClusterGetDirectionStr_4>:
 8003c22:	4770      	bx	lr

08003c24 <??DataTable1>:
 8003c24:	8590 0801                                   ....

08003c28 <??DataTable1_1>:
 8003c28:	8598 0801                                   ....

08003c2c <??DataTable1_2>:
 8003c2c:	85a0 0801                                   ....

08003c30 <??DataTable1_3>:
 8003c30:	85a8 0801                                   ....

08003c34 <ZbZclClusterSetDiscoverRoute>:
 8003c34:	7601      	strb	r1, [r0, #24]
 8003c36:	4770      	bx	lr

08003c38 <ZbZclClusterSetRadius>:
 8003c38:	7641      	strb	r1, [r0, #25]
 8003c3a:	4770      	bx	lr

08003c3c <ZbZclClusterGetRadius>:
 8003c3c:	7e40      	ldrb	r0, [r0, #25]
 8003c3e:	4770      	bx	lr

08003c40 <ZbZclClusterSetMaxAsduLength>:
 8003c40:	b410      	push	{r4}
 8003c42:	0002      	movs	r2, r0
 8003c44:	000b      	movs	r3, r1
 8003c46:	0018      	movs	r0, r3
 8003c48:	b280      	uxth	r0, r0
 8003c4a:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 8003c4e:	42a0      	cmp	r0, r4
 8003c50:	d301      	bcc.n	8003c56 <??ZbZclClusterSetMaxAsduLength_0>
 8003c52:	2000      	movs	r0, #0
 8003c54:	e007      	b.n	8003c66 <??ZbZclClusterSetMaxAsduLength_1>

08003c56 <??ZbZclClusterSetMaxAsduLength_0>:
 8003c56:	0018      	movs	r0, r3
 8003c58:	b280      	uxth	r0, r0
 8003c5a:	2839      	cmp	r0, #57	@ 0x39
 8003c5c:	d201      	bcs.n	8003c62 <??ZbZclClusterSetMaxAsduLength_2>
 8003c5e:	2039      	movs	r0, #57	@ 0x39
 8003c60:	0003      	movs	r3, r0

08003c62 <??ZbZclClusterSetMaxAsduLength_2>:
 8003c62:	8353      	strh	r3, [r2, #26]
 8003c64:	2001      	movs	r0, #1

08003c66 <??ZbZclClusterSetMaxAsduLength_1>:
 8003c66:	bc10      	pop	{r4}
 8003c68:	4770      	bx	lr

08003c6a <ZbZclClusterGetMaxAsduLength>:
 8003c6a:	8b40      	ldrh	r0, [r0, #26]
 8003c6c:	4770      	bx	lr

08003c6e <ZbZclClusterInitCommandReq>:
 8003c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c72:	0004      	movs	r4, r0
 8003c74:	000d      	movs	r5, r1
 8003c76:	2630      	movs	r6, #48	@ 0x30
 8003c78:	2700      	movs	r7, #0
 8003c7a:	46a8      	mov	r8, r5
 8003c7c:	003a      	movs	r2, r7
 8003c7e:	0031      	movs	r1, r6
 8003c80:	4640      	mov	r0, r8
 8003c82:	f002 f803 	bl	8005c8c <__aeabi_memset>
 8003c86:	8aa0      	ldrh	r0, [r4, #20]
 8003c88:	8228      	strh	r0, [r5, #16]
 8003c8a:	89a0      	ldrh	r0, [r4, #12]
 8003c8c:	8268      	strh	r0, [r5, #18]
 8003c8e:	7ba0      	ldrb	r0, [r4, #14]
 8003c90:	82a8      	strh	r0, [r5, #20]
 8003c92:	8ae0      	ldrh	r0, [r4, #22]
 8003c94:	82e8      	strh	r0, [r5, #22]
 8003c96:	7e20      	ldrb	r0, [r4, #24]
 8003c98:	7628      	strb	r0, [r5, #24]
 8003c9a:	7e60      	ldrb	r0, [r4, #25]
 8003c9c:	7668      	strb	r0, [r5, #25]
 8003c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ca2 <ZbZclClusterInitApsdeReq>:
 8003ca2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ca6:	0005      	movs	r5, r0
 8003ca8:	000e      	movs	r6, r1
 8003caa:	0014      	movs	r4, r2
 8003cac:	2730      	movs	r7, #48	@ 0x30
 8003cae:	f05f 0800 	movs.w	r8, #0
 8003cb2:	46b1      	mov	r9, r6
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	0039      	movs	r1, r7
 8003cb8:	4648      	mov	r0, r9
 8003cba:	f001 ffe7 	bl	8005c8c <__aeabi_memset>
 8003cbe:	8aa8      	ldrh	r0, [r5, #20]
 8003cc0:	8230      	strh	r0, [r6, #16]
 8003cc2:	89a8      	ldrh	r0, [r5, #12]
 8003cc4:	8270      	strh	r0, [r6, #18]
 8003cc6:	7ba8      	ldrb	r0, [r5, #14]
 8003cc8:	82b0      	strh	r0, [r6, #20]
 8003cca:	8ae8      	ldrh	r0, [r5, #22]
 8003ccc:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8003cce:	7e28      	ldrb	r0, [r5, #24]
 8003cd0:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8003cd4:	7e68      	ldrb	r0, [r5, #25]
 8003cd6:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8003cda:	2c00      	cmp	r4, #0
 8003cdc:	d00b      	beq.n	8003cf6 <??ZbZclClusterInitApsdeReq_0>
 8003cde:	8ab0      	ldrh	r0, [r6, #20]
 8003ce0:	28ff      	cmp	r0, #255	@ 0xff
 8003ce2:	d101      	bne.n	8003ce8 <??ZbZclClusterInitApsdeReq_1>
 8003ce4:	8860      	ldrh	r0, [r4, #2]
 8003ce6:	82b0      	strh	r0, [r6, #20]

08003ce8 <??ZbZclClusterInitApsdeReq_1>:
 8003ce8:	8c20      	ldrh	r0, [r4, #32]
 8003cea:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003cee:	4288      	cmp	r0, r1
 8003cf0:	d001      	beq.n	8003cf6 <??ZbZclClusterInitApsdeReq_0>
 8003cf2:	8c20      	ldrh	r0, [r4, #32]
 8003cf4:	8230      	strh	r0, [r6, #16]

08003cf6 <??ZbZclClusterInitApsdeReq_0>:
 8003cf6:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08003cfc <zcl_persist_handle_set>:
 8003cfc:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d00:	0004      	movs	r4, r0
 8003d02:	000d      	movs	r5, r1
 8003d04:	0016      	movs	r6, r2
 8003d06:	f05f 0b00 	movs.w	fp, #0

08003d0a <??zcl_persist_handle_set_0>:
 8003d0a:	4658      	mov	r0, fp
 8003d0c:	0031      	movs	r1, r6
 8003d0e:	b280      	uxth	r0, r0
 8003d10:	b289      	uxth	r1, r1
 8003d12:	4288      	cmp	r0, r1
 8003d14:	d23c      	bcs.n	8003d90 <??zcl_persist_handle_set_1>
 8003d16:	0030      	movs	r0, r6
 8003d18:	b280      	uxth	r0, r0
 8003d1a:	4659      	mov	r1, fp
 8003d1c:	b289      	uxth	r1, r1
 8003d1e:	1d09      	adds	r1, r1, #4
 8003d20:	4288      	cmp	r0, r1
 8003d22:	d201      	bcs.n	8003d28 <??zcl_persist_handle_set_2>
 8003d24:	2087      	movs	r0, #135	@ 0x87
 8003d26:	e034      	b.n	8003d92 <??zcl_persist_handle_set_3>

08003d28 <??zcl_persist_handle_set_2>:
 8003d28:	4658      	mov	r0, fp
 8003d2a:	b280      	uxth	r0, r0
 8003d2c:	4428      	add	r0, r5
 8003d2e:	f000 fe8b 	bl	8004a48 <pletoh16>
 8003d32:	0007      	movs	r7, r0
 8003d34:	f11b 0b02 	adds.w	fp, fp, #2
 8003d38:	4658      	mov	r0, fp
 8003d3a:	b280      	uxth	r0, r0
 8003d3c:	4428      	add	r0, r5
 8003d3e:	f000 fe83 	bl	8004a48 <pletoh16>
 8003d42:	4680      	mov	r8, r0
 8003d44:	f11b 0b02 	adds.w	fp, fp, #2
 8003d48:	0030      	movs	r0, r6
 8003d4a:	b280      	uxth	r0, r0
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	b289      	uxth	r1, r1
 8003d50:	fa11 f18b 	uxtah	r1, r1, fp
 8003d54:	4288      	cmp	r0, r1
 8003d56:	da01      	bge.n	8003d5c <??zcl_persist_handle_set_4>
 8003d58:	2087      	movs	r0, #135	@ 0x87
 8003d5a:	e01a      	b.n	8003d92 <??zcl_persist_handle_set_3>

08003d5c <??zcl_persist_handle_set_4>:
 8003d5c:	4658      	mov	r0, fp
 8003d5e:	b280      	uxth	r0, r0
 8003d60:	4428      	add	r0, r5
 8003d62:	4681      	mov	r9, r0
 8003d64:	eb18 0b0b 	adds.w	fp, r8, fp
 8003d68:	2006      	movs	r0, #6
 8003d6a:	9001      	str	r0, [sp, #4]
 8003d6c:	4640      	mov	r0, r8
 8003d6e:	b280      	uxth	r0, r0
 8003d70:	9000      	str	r0, [sp, #0]
 8003d72:	464b      	mov	r3, r9
 8003d74:	003a      	movs	r2, r7
 8003d76:	b292      	uxth	r2, r2
 8003d78:	2100      	movs	r1, #0
 8003d7a:	0020      	movs	r0, r4
 8003d7c:	f7fc fc85 	bl	800068a <ZbZclAttrWrite>
 8003d80:	4682      	mov	sl, r0
 8003d82:	4650      	mov	r0, sl
 8003d84:	b2c0      	uxtb	r0, r0
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d0bf      	beq.n	8003d0a <??zcl_persist_handle_set_0>
 8003d8a:	4650      	mov	r0, sl
 8003d8c:	b2c0      	uxtb	r0, r0
 8003d8e:	e000      	b.n	8003d92 <??zcl_persist_handle_set_3>

08003d90 <??zcl_persist_handle_set_1>:
 8003d90:	2000      	movs	r0, #0

08003d92 <??zcl_persist_handle_set_3>:
 8003d92:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003d96 <ZbZclHandleReadAttr>:
 8003d96:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d9a:	b092      	sub	sp, #72	@ 0x48
 8003d9c:	0005      	movs	r5, r0
 8003d9e:	000e      	movs	r6, r1
 8003da0:	0017      	movs	r7, r2
 8003da2:	f20f 19a4 	addw	r9, pc, #420	@ 0x1a4
 8003da6:	2300      	movs	r3, #0
 8003da8:	464a      	mov	r2, r9
 8003daa:	8b69      	ldrh	r1, [r5, #26]
 8003dac:	68a8      	ldr	r0, [r5, #8]
 8003dae:	f010 fc3d 	bl	801462c <zb_heap_alloc>
 8003db2:	0004      	movs	r4, r0
 8003db4:	2c00      	cmp	r4, #0
 8003db6:	d106      	bne.n	8003dc6 <??ZbZclHandleReadAttr_0>
 8003db8:	2389      	movs	r3, #137	@ 0x89
 8003dba:	0032      	movs	r2, r6
 8003dbc:	0039      	movs	r1, r7
 8003dbe:	0028      	movs	r0, r5
 8003dc0:	f010 faf7 	bl	80143b2 <ZbZclSendDefaultResponse>
 8003dc4:	e0bd      	b.n	8003f42 <??ZbZclHandleReadAttr_1>

08003dc6 <??ZbZclHandleReadAttr_0>:
 8003dc6:	f05f 0808 	movs.w	r8, #8
 8003dca:	f05f 0a00 	movs.w	sl, #0
 8003dce:	f10d 0b0c 	add.w	fp, sp, #12
 8003dd2:	4652      	mov	r2, sl
 8003dd4:	4641      	mov	r1, r8
 8003dd6:	4658      	mov	r0, fp
 8003dd8:	f001 ff58 	bl	8005c8c <__aeabi_memset>
 8003ddc:	2000      	movs	r0, #0
 8003dde:	f88d 000c 	strb.w	r0, [sp, #12]
 8003de2:	7870      	ldrb	r0, [r6, #1]
 8003de4:	f88d 000d 	strb.w	r0, [sp, #13]
 8003de8:	78b0      	ldrb	r0, [r6, #2]
 8003dea:	2800      	cmp	r0, #0
 8003dec:	d101      	bne.n	8003df2 <??ZbZclHandleReadAttr_2>
 8003dee:	2001      	movs	r0, #1
 8003df0:	e000      	b.n	8003df4 <??ZbZclHandleReadAttr_3>

08003df2 <??ZbZclHandleReadAttr_2>:
 8003df2:	2000      	movs	r0, #0

08003df4 <??ZbZclHandleReadAttr_3>:
 8003df4:	f88d 000e 	strb.w	r0, [sp, #14]
 8003df8:	2001      	movs	r0, #1
 8003dfa:	f88d 000f 	strb.w	r0, [sp, #15]
 8003dfe:	88b0      	ldrh	r0, [r6, #4]
 8003e00:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003e04:	79b0      	ldrb	r0, [r6, #6]
 8003e06:	f88d 0012 	strb.w	r0, [sp, #18]
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f88d 0013 	strb.w	r0, [sp, #19]
 8003e10:	8b6a      	ldrh	r2, [r5, #26]
 8003e12:	0021      	movs	r1, r4
 8003e14:	a803      	add	r0, sp, #12
 8003e16:	f000 fca5 	bl	8004764 <ZbZclAppendHeader>
 8003e1a:	4680      	mov	r8, r0
 8003e1c:	f1b8 0f00 	cmp.w	r8, #0
 8003e20:	d50c      	bpl.n	8003e3c <??ZbZclHandleReadAttr_4>
 8003e22:	2300      	movs	r3, #0
 8003e24:	464a      	mov	r2, r9
 8003e26:	0021      	movs	r1, r4
 8003e28:	68a8      	ldr	r0, [r5, #8]
 8003e2a:	f010 fc0e 	bl	801464a <zb_heap_free>
 8003e2e:	2380      	movs	r3, #128	@ 0x80
 8003e30:	0032      	movs	r2, r6
 8003e32:	0039      	movs	r1, r7
 8003e34:	0028      	movs	r0, r5
 8003e36:	f010 fabc 	bl	80143b2 <ZbZclSendDefaultResponse>
 8003e3a:	e082      	b.n	8003f42 <??ZbZclHandleReadAttr_1>

08003e3c <??ZbZclHandleReadAttr_4>:
 8003e3c:	46c3      	mov	fp, r8

08003e3e <??ZbZclHandleReadAttr_5>:
 8003e3e:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8003e40:	2802      	cmp	r0, #2
 8003e42:	d353      	bcc.n	8003eec <??ZbZclHandleReadAttr_6>

08003e44 <??ZbZclHandleReadAttr_7>:
 8003e44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e46:	f000 fdff 	bl	8004a48 <pletoh16>
 8003e4a:	f8ad 000a 	strh.w	r0, [sp, #10]
 8003e4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e50:	1c80      	adds	r0, r0, #2
 8003e52:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e54:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 8003e56:	1e80      	subs	r0, r0, #2
 8003e58:	8538      	strh	r0, [r7, #40]	@ 0x28
 8003e5a:	f11b 0004 	adds.w	r0, fp, #4
 8003e5e:	8b69      	ldrh	r1, [r5, #26]
 8003e60:	4288      	cmp	r0, r1
 8003e62:	d243      	bcs.n	8003eec <??ZbZclHandleReadAttr_6>

08003e64 <??ZbZclHandleReadAttr_8>:
 8003e64:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003e68:	eb04 000b 	add.w	r0, r4, fp
 8003e6c:	f000 fe38 	bl	8004ae0 <putle16>
 8003e70:	f11b 0b02 	adds.w	fp, fp, #2
 8003e74:	2000      	movs	r0, #0
 8003e76:	9001      	str	r0, [sp, #4]
 8003e78:	8b68      	ldrh	r0, [r5, #26]
 8003e7a:	ebb0 000b 	subs.w	r0, r0, fp
 8003e7e:	1e80      	subs	r0, r0, #2
 8003e80:	9000      	str	r0, [sp, #0]
 8003e82:	eb04 000b 	add.w	r0, r4, fp
 8003e86:	1c83      	adds	r3, r0, #2
 8003e88:	aa02      	add	r2, sp, #8
 8003e8a:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8003e8e:	0028      	movs	r0, r5
 8003e90:	f7fc faa9 	bl	80003e6 <ZbZclAttrRead>
 8003e94:	4682      	mov	sl, r0
 8003e96:	f804 a00b 	strb.w	sl, [r4, fp]
 8003e9a:	f11b 0b01 	adds.w	fp, fp, #1
 8003e9e:	4650      	mov	r0, sl
 8003ea0:	b2c0      	uxtb	r0, r0
 8003ea2:	2889      	cmp	r0, #137	@ 0x89
 8003ea4:	d022      	beq.n	8003eec <??ZbZclHandleReadAttr_6>

08003ea6 <??ZbZclHandleReadAttr_9>:
 8003ea6:	4650      	mov	r0, sl
 8003ea8:	b2c0      	uxtb	r0, r0
 8003eaa:	2800      	cmp	r0, #0
 8003eac:	d1c7      	bne.n	8003e3e <??ZbZclHandleReadAttr_5>

08003eae <??ZbZclHandleReadAttr_10>:
 8003eae:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003eb2:	f804 000b 	strb.w	r0, [r4, fp]
 8003eb6:	f11b 0b01 	adds.w	fp, fp, #1
 8003eba:	2300      	movs	r3, #0
 8003ebc:	8b6a      	ldrh	r2, [r5, #26]
 8003ebe:	ebb2 020b 	subs.w	r2, r2, fp
 8003ec2:	eb04 010b 	add.w	r1, r4, fp
 8003ec6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003eca:	f7fd f8b4 	bl	8001036 <ZbZclAttrParseLength>
 8003ece:	4680      	mov	r8, r0
 8003ed0:	f1b8 0f00 	cmp.w	r8, #0
 8003ed4:	d507      	bpl.n	8003ee6 <??ZbZclHandleReadAttr_11>
 8003ed6:	f1bb 0b01 	subs.w	fp, fp, #1
 8003eda:	2087      	movs	r0, #135	@ 0x87
 8003edc:	eb04 010b 	add.w	r1, r4, fp
 8003ee0:	f801 0c01 	strb.w	r0, [r1, #-1]
 8003ee4:	e7ab      	b.n	8003e3e <??ZbZclHandleReadAttr_5>

08003ee6 <??ZbZclHandleReadAttr_11>:
 8003ee6:	eb18 0b0b 	adds.w	fp, r8, fp
 8003eea:	e7a8      	b.n	8003e3e <??ZbZclHandleReadAttr_5>

08003eec <??ZbZclHandleReadAttr_6>:
 8003eec:	003a      	movs	r2, r7
 8003eee:	a906      	add	r1, sp, #24
 8003ef0:	0028      	movs	r0, r5
 8003ef2:	f7ff fed6 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 8003ef6:	a806      	add	r0, sp, #24
 8003ef8:	f117 0110 	adds.w	r1, r7, #16
 8003efc:	2210      	movs	r2, #16
 8003efe:	f013 f93e 	bl	801717e <__aeabi_memcpy>
 8003f02:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 8003f06:	f7ff fe64 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 8003f0a:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003f0e:	7da8      	ldrb	r0, [r5, #22]
 8003f10:	0700      	lsls	r0, r0, #28
 8003f12:	d406      	bmi.n	8003f22 <??ZbZclHandleReadAttr_12>
 8003f14:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 8003f18:	f64f 70f7 	movw	r0, #65527	@ 0xfff7
 8003f1c:	4001      	ands	r1, r0
 8003f1e:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c

08003f22 <??ZbZclHandleReadAttr_12>:
 8003f22:	940c      	str	r4, [sp, #48]	@ 0x30
 8003f24:	4658      	mov	r0, fp
 8003f26:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	a906      	add	r1, sp, #24
 8003f30:	68a8      	ldr	r0, [r5, #8]
 8003f32:	f00f fcfd 	bl	8013930 <ZbApsdeDataReqCallback>
 8003f36:	2300      	movs	r3, #0
 8003f38:	464a      	mov	r2, r9
 8003f3a:	0021      	movs	r1, r4
 8003f3c:	68a8      	ldr	r0, [r5, #8]
 8003f3e:	f010 fb84 	bl	801464a <zb_heap_free>

08003f42 <??ZbZclHandleReadAttr_1>:
 8003f42:	b013      	add	sp, #76	@ 0x4c
 8003f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003f48 <??DataTable1>:
 8003f48:	0000 0000                                   ....

08003f4c <ZbZclHandleWriteAttr>:
 8003f4c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f50:	b0a3      	sub	sp, #140	@ 0x8c
 8003f52:	0016      	movs	r6, r2
 8003f54:	2701      	movs	r7, #1
 8003f56:	2500      	movs	r5, #0
 8003f58:	2400      	movs	r4, #0
 8003f5a:	f05f 0800 	movs.w	r8, #0
 8003f5e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8003f60:	79c0      	ldrb	r0, [r0, #7]
 8003f62:	f88d 000a 	strb.w	r0, [sp, #10]
 8003f66:	f05f 0900 	movs.w	r9, #0
 8003f6a:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8003f6e:	2802      	cmp	r0, #2
 8003f70:	d007      	beq.n	8003f82 <??ZbZclHandleWriteAttr_0>
 8003f72:	2803      	cmp	r0, #3
 8003f74:	d003      	beq.n	8003f7e <??ZbZclHandleWriteAttr_1>
 8003f76:	2805      	cmp	r0, #5
 8003f78:	f000 80c3 	beq.w	8004102 <??ZbZclHandleWriteAttr_2>
 8003f7c:	e116      	b.n	80041ac <??ZbZclHandleWriteAttr_3>

08003f7e <??ZbZclHandleWriteAttr_1>:
 8003f7e:	f059 0901 	orrs.w	r9, r9, #1

08003f82 <??ZbZclHandleWriteAttr_0>:
 8003f82:	2008      	movs	r0, #8
 8003f84:	9001      	str	r0, [sp, #4]
 8003f86:	2000      	movs	r0, #0
 8003f88:	9000      	str	r0, [sp, #0]
 8003f8a:	f10d 0b14 	add.w	fp, sp, #20
 8003f8e:	9a00      	ldr	r2, [sp, #0]
 8003f90:	9901      	ldr	r1, [sp, #4]
 8003f92:	4658      	mov	r0, fp
 8003f94:	f001 fe7a 	bl	8005c8c <__aeabi_memset>
 8003f98:	2000      	movs	r0, #0
 8003f9a:	f88d 0014 	strb.w	r0, [sp, #20]
 8003f9e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8003fa0:	7840      	ldrb	r0, [r0, #1]
 8003fa2:	f88d 0015 	strb.w	r0, [sp, #21]
 8003fa6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8003fa8:	7880      	ldrb	r0, [r0, #2]
 8003faa:	2800      	cmp	r0, #0
 8003fac:	d101      	bne.n	8003fb2 <??ZbZclHandleWriteAttr_4>
 8003fae:	2001      	movs	r0, #1
 8003fb0:	e000      	b.n	8003fb4 <??ZbZclHandleWriteAttr_5>

08003fb2 <??ZbZclHandleWriteAttr_4>:
 8003fb2:	2000      	movs	r0, #0

08003fb4 <??ZbZclHandleWriteAttr_5>:
 8003fb4:	f88d 0016 	strb.w	r0, [sp, #22]
 8003fb8:	2001      	movs	r0, #1
 8003fba:	f88d 0017 	strb.w	r0, [sp, #23]
 8003fbe:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8003fc0:	8880      	ldrh	r0, [r0, #4]
 8003fc2:	f8ad 0018 	strh.w	r0, [sp, #24]
 8003fc6:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8003fc8:	7980      	ldrb	r0, [r0, #6]
 8003fca:	f88d 001a 	strb.w	r0, [sp, #26]
 8003fce:	2004      	movs	r0, #4
 8003fd0:	f88d 001b 	strb.w	r0, [sp, #27]
 8003fd4:	2239      	movs	r2, #57	@ 0x39
 8003fd6:	a907      	add	r1, sp, #28
 8003fd8:	a805      	add	r0, sp, #20
 8003fda:	f000 fbc3 	bl	8004764 <ZbZclAppendHeader>
 8003fde:	0005      	movs	r5, r0
 8003fe0:	2d00      	cmp	r5, #0
 8003fe2:	d502      	bpl.n	8003fea <??ZbZclHandleWriteAttr_6>
 8003fe4:	2080      	movs	r0, #128	@ 0x80
 8003fe6:	4680      	mov	r8, r0
 8003fe8:	e0e2      	b.n	80041b0 <??ZbZclHandleWriteAttr_7>

08003fea <??ZbZclHandleWriteAttr_6>:
 8003fea:	0032      	movs	r2, r6
 8003fec:	a916      	add	r1, sp, #88	@ 0x58
 8003fee:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8003ff0:	f7ff fe57 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 8003ff4:	a816      	add	r0, sp, #88	@ 0x58
 8003ff6:	f116 0110 	adds.w	r1, r6, #16
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	f013 f8bf 	bl	801717e <__aeabi_memcpy>
 8004000:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 8004004:	f7ff fde5 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 8004008:	f8ad 007c 	strh.w	r0, [sp, #124]	@ 0x7c
 800400c:	2000      	movs	r0, #0
 800400e:	4682      	mov	sl, r0
 8004010:	2080      	movs	r0, #128	@ 0x80
 8004012:	0007      	movs	r7, r0
 8004014:	2001      	movs	r0, #1
 8004016:	f88d 0008 	strb.w	r0, [sp, #8]
 800401a:	2000      	movs	r0, #0
 800401c:	0004      	movs	r4, r0

0800401e <??ZbZclHandleWriteAttr_8>:
 800401e:	f11a 0003 	adds.w	r0, sl, #3
 8004022:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8004024:	4288      	cmp	r0, r1
 8004026:	d302      	bcc.n	800402e <??ZbZclHandleWriteAttr_9>
 8004028:	2080      	movs	r0, #128	@ 0x80
 800402a:	0007      	movs	r7, r0
 800402c:	e05c      	b.n	80040e8 <??ZbZclHandleWriteAttr_10>

0800402e <??ZbZclHandleWriteAttr_9>:
 800402e:	1ce8      	adds	r0, r5, #3
 8004030:	283a      	cmp	r0, #58	@ 0x3a
 8004032:	d305      	bcc.n	8004040 <??ZbZclHandleWriteAttr_11>
 8004034:	2001      	movs	r0, #1
 8004036:	f88d 0008 	strb.w	r0, [sp, #8]
 800403a:	2089      	movs	r0, #137	@ 0x89
 800403c:	0007      	movs	r7, r0
 800403e:	e053      	b.n	80040e8 <??ZbZclHandleWriteAttr_10>

08004040 <??ZbZclHandleWriteAttr_11>:
 8004040:	2000      	movs	r0, #0
 8004042:	f88d 0008 	strb.w	r0, [sp, #8]
 8004046:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004048:	4450      	add	r0, sl
 800404a:	f000 fcfd 	bl	8004a48 <pletoh16>
 800404e:	f8ad 000c 	strh.w	r0, [sp, #12]
 8004052:	f11a 0a02 	adds.w	sl, sl, #2
 8004056:	4650      	mov	r0, sl
 8004058:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 800405a:	5c09      	ldrb	r1, [r1, r0]
 800405c:	f88d 1009 	strb.w	r1, [sp, #9]
 8004060:	4682      	mov	sl, r0
 8004062:	f11a 0a01 	adds.w	sl, sl, #1
 8004066:	2300      	movs	r3, #0
 8004068:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800406a:	ebb2 020a 	subs.w	r2, r2, sl
 800406e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004070:	eb00 010a 	add.w	r1, r0, sl
 8004074:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8004078:	f7fc ffdd 	bl	8001036 <ZbZclAttrParseLength>
 800407c:	9004      	str	r0, [sp, #16]
 800407e:	9804      	ldr	r0, [sp, #16]
 8004080:	2800      	cmp	r0, #0
 8004082:	d50c      	bpl.n	800409e <??ZbZclHandleWriteAttr_12>
 8004084:	1c64      	adds	r4, r4, #1
 8004086:	2087      	movs	r0, #135	@ 0x87
 8004088:	a907      	add	r1, sp, #28
 800408a:	5548      	strb	r0, [r1, r5]
 800408c:	1c6d      	adds	r5, r5, #1
 800408e:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8004092:	a807      	add	r0, sp, #28
 8004094:	4428      	add	r0, r5
 8004096:	f000 fd23 	bl	8004ae0 <putle16>
 800409a:	1cad      	adds	r5, r5, #2
 800409c:	e024      	b.n	80040e8 <??ZbZclHandleWriteAttr_10>

0800409e <??ZbZclHandleWriteAttr_12>:
 800409e:	4648      	mov	r0, r9
 80040a0:	b280      	uxth	r0, r0
 80040a2:	9001      	str	r0, [sp, #4]
 80040a4:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80040a6:	ebb0 000a 	subs.w	r0, r0, sl
 80040aa:	9000      	str	r0, [sp, #0]
 80040ac:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80040ae:	eb00 030a 	add.w	r3, r0, sl
 80040b2:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80040b6:	f116 0110 	adds.w	r1, r6, #16
 80040ba:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80040bc:	f7fc fae5 	bl	800068a <ZbZclAttrWrite>
 80040c0:	0007      	movs	r7, r0
 80040c2:	9804      	ldr	r0, [sp, #16]
 80040c4:	eb10 0a0a 	adds.w	sl, r0, sl
 80040c8:	0038      	movs	r0, r7
 80040ca:	b2c0      	uxtb	r0, r0
 80040cc:	2800      	cmp	r0, #0
 80040ce:	d0a6      	beq.n	800401e <??ZbZclHandleWriteAttr_8>
 80040d0:	1c64      	adds	r4, r4, #1
 80040d2:	a807      	add	r0, sp, #28
 80040d4:	5547      	strb	r7, [r0, r5]
 80040d6:	1c6d      	adds	r5, r5, #1
 80040d8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80040dc:	a807      	add	r0, sp, #28
 80040de:	4428      	add	r0, r5
 80040e0:	f000 fcfe 	bl	8004ae0 <putle16>
 80040e4:	1cad      	adds	r5, r5, #2
 80040e6:	e79a      	b.n	800401e <??ZbZclHandleWriteAttr_8>

080040e8 <??ZbZclHandleWriteAttr_10>:
 80040e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80040ec:	2800      	cmp	r0, #0
 80040ee:	d001      	beq.n	80040f4 <??ZbZclHandleWriteAttr_13>
 80040f0:	46b8      	mov	r8, r7
 80040f2:	e05d      	b.n	80041b0 <??ZbZclHandleWriteAttr_7>

080040f4 <??ZbZclHandleWriteAttr_13>:
 80040f4:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80040f8:	2802      	cmp	r0, #2
 80040fa:	d001      	beq.n	8004100 <??ZbZclHandleWriteAttr_14>
 80040fc:	2c00      	cmp	r4, #0
 80040fe:	d000      	beq.n	8004102 <??ZbZclHandleWriteAttr_2>

08004100 <??ZbZclHandleWriteAttr_14>:
 8004100:	e056      	b.n	80041b0 <??ZbZclHandleWriteAttr_7>

08004102 <??ZbZclHandleWriteAttr_2>:
 8004102:	2000      	movs	r0, #0
 8004104:	4682      	mov	sl, r0
 8004106:	f05f 0b00 	movs.w	fp, #0

0800410a <??ZbZclHandleWriteAttr_15>:
 800410a:	f11a 0003 	adds.w	r0, sl, #3
 800410e:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8004110:	4288      	cmp	r0, r1
 8004112:	d302      	bcc.n	800411a <??ZbZclHandleWriteAttr_16>
 8004114:	465c      	mov	r4, fp
 8004116:	1c64      	adds	r4, r4, #1
 8004118:	e03b      	b.n	8004192 <??ZbZclHandleWriteAttr_17>

0800411a <??ZbZclHandleWriteAttr_16>:
 800411a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800411c:	4450      	add	r0, sl
 800411e:	f000 fc93 	bl	8004a48 <pletoh16>
 8004122:	f8ad 000c 	strh.w	r0, [sp, #12]
 8004126:	f11a 0a02 	adds.w	sl, sl, #2
 800412a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800412c:	f810 000a 	ldrb.w	r0, [r0, sl]
 8004130:	f88d 0009 	strb.w	r0, [sp, #9]
 8004134:	f11a 0a01 	adds.w	sl, sl, #1
 8004138:	2300      	movs	r3, #0
 800413a:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800413c:	ebb2 020a 	subs.w	r2, r2, sl
 8004140:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004142:	eb00 010a 	add.w	r1, r0, sl
 8004146:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800414a:	f7fc ff74 	bl	8001036 <ZbZclAttrParseLength>
 800414e:	9004      	str	r0, [sp, #16]
 8004150:	9804      	ldr	r0, [sp, #16]
 8004152:	2800      	cmp	r0, #0
 8004154:	d502      	bpl.n	800415c <??ZbZclHandleWriteAttr_18>
 8004156:	465c      	mov	r4, fp
 8004158:	1c64      	adds	r4, r4, #1
 800415a:	e01a      	b.n	8004192 <??ZbZclHandleWriteAttr_17>

0800415c <??ZbZclHandleWriteAttr_18>:
 800415c:	2000      	movs	r0, #0
 800415e:	9001      	str	r0, [sp, #4]
 8004160:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004162:	ebb0 000a 	subs.w	r0, r0, sl
 8004166:	9000      	str	r0, [sp, #0]
 8004168:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800416a:	eb00 030a 	add.w	r3, r0, sl
 800416e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8004172:	f116 0110 	adds.w	r1, r6, #16
 8004176:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8004178:	f7fc fa87 	bl	800068a <ZbZclAttrWrite>
 800417c:	0007      	movs	r7, r0
 800417e:	0038      	movs	r0, r7
 8004180:	b2c0      	uxtb	r0, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d001      	beq.n	800418a <??ZbZclHandleWriteAttr_19>
 8004186:	f11b 0b01 	adds.w	fp, fp, #1

0800418a <??ZbZclHandleWriteAttr_19>:
 800418a:	9804      	ldr	r0, [sp, #16]
 800418c:	eb10 0a0a 	adds.w	sl, r0, sl
 8004190:	e7bb      	b.n	800410a <??ZbZclHandleWriteAttr_15>

08004192 <??ZbZclHandleWriteAttr_17>:
 8004192:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8004196:	2803      	cmp	r0, #3
 8004198:	d105      	bne.n	80041a6 <??ZbZclHandleWriteAttr_20>
 800419a:	2c00      	cmp	r4, #0
 800419c:	d002      	beq.n	80041a4 <??ZbZclHandleWriteAttr_21>
 800419e:	2001      	movs	r0, #1
 80041a0:	4680      	mov	r8, r0
 80041a2:	e005      	b.n	80041b0 <??ZbZclHandleWriteAttr_7>

080041a4 <??ZbZclHandleWriteAttr_21>:
 80041a4:	e004      	b.n	80041b0 <??ZbZclHandleWriteAttr_7>

080041a6 <??ZbZclHandleWriteAttr_20>:
 80041a6:	20ff      	movs	r0, #255	@ 0xff
 80041a8:	4680      	mov	r8, r0
 80041aa:	e001      	b.n	80041b0 <??ZbZclHandleWriteAttr_7>

080041ac <??ZbZclHandleWriteAttr_3>:
 80041ac:	2081      	movs	r0, #129	@ 0x81
 80041ae:	4680      	mov	r8, r0

080041b0 <??ZbZclHandleWriteAttr_7>:
 80041b0:	4640      	mov	r0, r8
 80041b2:	b2c0      	uxtb	r0, r0
 80041b4:	2800      	cmp	r0, #0
 80041b6:	d00b      	beq.n	80041d0 <??ZbZclHandleWriteAttr_22>
 80041b8:	4640      	mov	r0, r8
 80041ba:	b2c0      	uxtb	r0, r0
 80041bc:	28ff      	cmp	r0, #255	@ 0xff
 80041be:	d006      	beq.n	80041ce <??ZbZclHandleWriteAttr_23>
 80041c0:	4643      	mov	r3, r8
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80041c6:	0031      	movs	r1, r6
 80041c8:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80041ca:	f010 f8f2 	bl	80143b2 <ZbZclSendDefaultResponse>

080041ce <??ZbZclHandleWriteAttr_23>:
 80041ce:	e01a      	b.n	8004206 <??ZbZclHandleWriteAttr_24>

080041d0 <??ZbZclHandleWriteAttr_22>:
 80041d0:	2c00      	cmp	r4, #0
 80041d2:	d10c      	bne.n	80041ee <??ZbZclHandleWriteAttr_25>
 80041d4:	2d00      	cmp	r5, #0
 80041d6:	d106      	bne.n	80041e6 <??ZbZclHandleWriteAttr_26>
 80041d8:	2301      	movs	r3, #1
 80041da:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80041dc:	0031      	movs	r1, r6
 80041de:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80041e0:	f010 f8e7 	bl	80143b2 <ZbZclSendDefaultResponse>
 80041e4:	e00f      	b.n	8004206 <??ZbZclHandleWriteAttr_24>

080041e6 <??ZbZclHandleWriteAttr_26>:
 80041e6:	2000      	movs	r0, #0
 80041e8:	a907      	add	r1, sp, #28
 80041ea:	5548      	strb	r0, [r1, r5]
 80041ec:	1c6d      	adds	r5, r5, #1

080041ee <??ZbZclHandleWriteAttr_25>:
 80041ee:	a807      	add	r0, sp, #28
 80041f0:	901c      	str	r0, [sp, #112]	@ 0x70
 80041f2:	0028      	movs	r0, r5
 80041f4:	f8ad 0074 	strh.w	r0, [sp, #116]	@ 0x74
 80041f8:	2300      	movs	r3, #0
 80041fa:	2200      	movs	r2, #0
 80041fc:	a916      	add	r1, sp, #88	@ 0x58
 80041fe:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8004200:	6880      	ldr	r0, [r0, #8]
 8004202:	f00f fb95 	bl	8013930 <ZbApsdeDataReqCallback>

08004206 <??ZbZclHandleWriteAttr_24>:
 8004206:	b025      	add	sp, #148	@ 0x94
 8004208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800420c <zcl_handle_command>:
 800420c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004210:	0004      	movs	r4, r0
 8004212:	000d      	movs	r5, r1
 8004214:	0016      	movs	r6, r2
 8004216:	79f7      	ldrb	r7, [r6, #7]
 8004218:	8868      	ldrh	r0, [r5, #2]
 800421a:	28ff      	cmp	r0, #255	@ 0xff
 800421c:	d102      	bne.n	8004224 <??zcl_handle_command_0>
 800421e:	f05f 0800 	movs.w	r8, #0
 8004222:	e001      	b.n	8004228 <??zcl_handle_command_1>

08004224 <??zcl_handle_command_0>:
 8004224:	f05f 0801 	movs.w	r8, #1

08004228 <??zcl_handle_command_1>:
 8004228:	f115 0110 	adds.w	r1, r5, #16
 800422c:	68a0      	ldr	r0, [r4, #8]
 800422e:	f00f fc1c 	bl	8013a6a <ZbApsAddrIsLocal>
 8004232:	2800      	cmp	r0, #0
 8004234:	d121      	bne.n	800427a <??zcl_handle_command_2>

08004236 <??zcl_handle_command_3>:
 8004236:	89a0      	ldrh	r0, [r4, #12]
 8004238:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 800423c:	d01d      	beq.n	800427a <??zcl_handle_command_2>

0800423e <??zcl_handle_command_4>:
 800423e:	0032      	movs	r2, r6
 8004240:	0029      	movs	r1, r5
 8004242:	0020      	movs	r0, r4
 8004244:	f7ff fc38 	bl	8003ab8 <ZbZclClusterCheckMinSecurity>
 8004248:	2800      	cmp	r0, #0
 800424a:	d107      	bne.n	800425c <??zcl_handle_command_5>
 800424c:	2301      	movs	r3, #1
 800424e:	0032      	movs	r2, r6
 8004250:	0029      	movs	r1, r5
 8004252:	0020      	movs	r0, r4
 8004254:	f010 f8ad 	bl	80143b2 <ZbZclSendDefaultResponse>
 8004258:	4640      	mov	r0, r8
 800425a:	e0f7      	b.n	800444c <??zcl_handle_command_6>

0800425c <??zcl_handle_command_5>:
 800425c:	0032      	movs	r2, r6
 800425e:	0029      	movs	r1, r5
 8004260:	68a0      	ldr	r0, [r4, #8]
 8004262:	f00f ffb9 	bl	80141d8 <ZbZclDeviceLogCheckAllow>
 8004266:	2800      	cmp	r0, #0
 8004268:	d107      	bne.n	800427a <??zcl_handle_command_2>
 800426a:	2301      	movs	r3, #1
 800426c:	0032      	movs	r2, r6
 800426e:	0029      	movs	r1, r5
 8004270:	0020      	movs	r0, r4
 8004272:	f010 f89e 	bl	80143b2 <ZbZclSendDefaultResponse>
 8004276:	4640      	mov	r0, r8
 8004278:	e0e8      	b.n	800444c <??zcl_handle_command_6>

0800427a <??zcl_handle_command_2>:
 800427a:	7830      	ldrb	r0, [r6, #0]
 800427c:	2801      	cmp	r0, #1
 800427e:	d13a      	bne.n	80042f6 <??zcl_handle_command_8>
 8004280:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004282:	2800      	cmp	r0, #0
 8004284:	d107      	bne.n	8004296 <??zcl_handle_command_9>
 8004286:	2381      	movs	r3, #129	@ 0x81
 8004288:	0032      	movs	r2, r6
 800428a:	0029      	movs	r1, r5
 800428c:	0020      	movs	r0, r4
 800428e:	f010 f890 	bl	80143b2 <ZbZclSendDefaultResponse>
 8004292:	4640      	mov	r0, r8
 8004294:	e0da      	b.n	800444c <??zcl_handle_command_6>

08004296 <??zcl_handle_command_9>:
 8004296:	7870      	ldrb	r0, [r6, #1]
 8004298:	2800      	cmp	r0, #0
 800429a:	d00e      	beq.n	80042ba <??zcl_handle_command_10>
 800429c:	8a20      	ldrh	r0, [r4, #16]
 800429e:	2800      	cmp	r0, #0
 80042a0:	d003      	beq.n	80042aa <??zcl_handle_command_11>
 80042a2:	8a20      	ldrh	r0, [r4, #16]
 80042a4:	88b1      	ldrh	r1, [r6, #4]
 80042a6:	4288      	cmp	r0, r1
 80042a8:	d012      	beq.n	80042d0 <??zcl_handle_command_12>

080042aa <??zcl_handle_command_11>:
 80042aa:	2381      	movs	r3, #129	@ 0x81
 80042ac:	0032      	movs	r2, r6
 80042ae:	0029      	movs	r1, r5
 80042b0:	0020      	movs	r0, r4
 80042b2:	f010 f87e 	bl	80143b2 <ZbZclSendDefaultResponse>
 80042b6:	4640      	mov	r0, r8
 80042b8:	e0c8      	b.n	800444c <??zcl_handle_command_6>

080042ba <??zcl_handle_command_10>:
 80042ba:	8a20      	ldrh	r0, [r4, #16]
 80042bc:	2800      	cmp	r0, #0
 80042be:	d007      	beq.n	80042d0 <??zcl_handle_command_12>
 80042c0:	2381      	movs	r3, #129	@ 0x81
 80042c2:	0032      	movs	r2, r6
 80042c4:	0029      	movs	r1, r5
 80042c6:	0020      	movs	r0, r4
 80042c8:	f010 f873 	bl	80143b2 <ZbZclSendDefaultResponse>
 80042cc:	4640      	mov	r0, r8
 80042ce:	e0bd      	b.n	800444c <??zcl_handle_command_6>

080042d0 <??zcl_handle_command_12>:
 80042d0:	002a      	movs	r2, r5
 80042d2:	0031      	movs	r1, r6
 80042d4:	0020      	movs	r0, r4
 80042d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042d8:	4798      	blx	r3
 80042da:	4681      	mov	r9, r0
 80042dc:	4648      	mov	r0, r9
 80042de:	b2c0      	uxtb	r0, r0
 80042e0:	28ff      	cmp	r0, #255	@ 0xff
 80042e2:	d006      	beq.n	80042f2 <??zcl_handle_command_13>
 80042e4:	464b      	mov	r3, r9
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	0032      	movs	r2, r6
 80042ea:	0029      	movs	r1, r5
 80042ec:	0020      	movs	r0, r4
 80042ee:	f010 f860 	bl	80143b2 <ZbZclSendDefaultResponse>

080042f2 <??zcl_handle_command_13>:
 80042f2:	4640      	mov	r0, r8
 80042f4:	e0aa      	b.n	800444c <??zcl_handle_command_6>

080042f6 <??zcl_handle_command_8>:
 80042f6:	7830      	ldrb	r0, [r6, #0]
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d007      	beq.n	800430c <??zcl_handle_command_14>
 80042fc:	2385      	movs	r3, #133	@ 0x85
 80042fe:	0032      	movs	r2, r6
 8004300:	0029      	movs	r1, r5
 8004302:	0020      	movs	r0, r4
 8004304:	f010 f855 	bl	80143b2 <ZbZclSendDefaultResponse>
 8004308:	4640      	mov	r0, r8
 800430a:	e09f      	b.n	800444c <??zcl_handle_command_6>

0800430c <??zcl_handle_command_14>:
 800430c:	0038      	movs	r0, r7
 800430e:	b2c0      	uxtb	r0, r0
 8004310:	2800      	cmp	r0, #0
 8004312:	d01c      	beq.n	800434e <??zcl_handle_command_15>
 8004314:	2801      	cmp	r0, #1
 8004316:	d03f      	beq.n	8004398 <??zcl_handle_command_16>
 8004318:	2802      	cmp	r0, #2
 800431a:	d01e      	beq.n	800435a <??zcl_handle_command_17>
 800431c:	2803      	cmp	r0, #3
 800431e:	d01c      	beq.n	800435a <??zcl_handle_command_17>
 8004320:	2804      	cmp	r0, #4
 8004322:	d039      	beq.n	8004398 <??zcl_handle_command_16>
 8004324:	2805      	cmp	r0, #5
 8004326:	d018      	beq.n	800435a <??zcl_handle_command_17>
 8004328:	2806      	cmp	r0, #6
 800432a:	d01c      	beq.n	8004366 <??zcl_handle_command_18>
 800432c:	2807      	cmp	r0, #7
 800432e:	d033      	beq.n	8004398 <??zcl_handle_command_16>
 8004330:	2808      	cmp	r0, #8
 8004332:	d01e      	beq.n	8004372 <??zcl_handle_command_19>
 8004334:	2809      	cmp	r0, #9
 8004336:	d02f      	beq.n	8004398 <??zcl_handle_command_16>
 8004338:	280a      	cmp	r0, #10
 800433a:	d020      	beq.n	800437e <??zcl_handle_command_20>
 800433c:	280b      	cmp	r0, #11
 800433e:	d02a      	beq.n	8004396 <??zcl_handle_command_21>
 8004340:	280c      	cmp	r0, #12
 8004342:	d022      	beq.n	800438a <??zcl_handle_command_22>
 8004344:	280d      	cmp	r0, #13
 8004346:	d027      	beq.n	8004398 <??zcl_handle_command_16>
 8004348:	2810      	cmp	r0, #16
 800434a:	d025      	beq.n	8004398 <??zcl_handle_command_16>
 800434c:	e025      	b.n	800439a <??zcl_handle_command_23>

0800434e <??zcl_handle_command_15>:
 800434e:	002a      	movs	r2, r5
 8004350:	0031      	movs	r1, r6
 8004352:	0020      	movs	r0, r4
 8004354:	f7ff fd1f 	bl	8003d96 <ZbZclHandleReadAttr>
 8004358:	e077      	b.n	800444a <??zcl_handle_command_24>

0800435a <??zcl_handle_command_17>:
 800435a:	002a      	movs	r2, r5
 800435c:	0031      	movs	r1, r6
 800435e:	0020      	movs	r0, r4
 8004360:	f7ff fdf4 	bl	8003f4c <ZbZclHandleWriteAttr>
 8004364:	e071      	b.n	800444a <??zcl_handle_command_24>

08004366 <??zcl_handle_command_18>:
 8004366:	002a      	movs	r2, r5
 8004368:	0031      	movs	r1, r6
 800436a:	0020      	movs	r0, r4
 800436c:	f7fe fd05 	bl	8002d7a <ZbZclHandleConfigReport>
 8004370:	e06b      	b.n	800444a <??zcl_handle_command_24>

08004372 <??zcl_handle_command_19>:
 8004372:	002a      	movs	r2, r5
 8004374:	0031      	movs	r1, r6
 8004376:	0020      	movs	r0, r4
 8004378:	f7fe ff83 	bl	8003282 <ZbZclHandleReadReport>
 800437c:	e065      	b.n	800444a <??zcl_handle_command_24>

0800437e <??zcl_handle_command_20>:
 800437e:	002a      	movs	r2, r5
 8004380:	0031      	movs	r1, r6
 8004382:	0020      	movs	r0, r4
 8004384:	f7ff f8a2 	bl	80034cc <ZbZclHandleReportAttr>
 8004388:	e05f      	b.n	800444a <??zcl_handle_command_24>

0800438a <??zcl_handle_command_22>:
 800438a:	002a      	movs	r2, r5
 800438c:	0031      	movs	r1, r6
 800438e:	0020      	movs	r0, r4
 8004390:	f7fb ff47 	bl	8000222 <ZbZclAttrHandleDiscover>
 8004394:	e059      	b.n	800444a <??zcl_handle_command_24>

08004396 <??zcl_handle_command_21>:
 8004396:	e058      	b.n	800444a <??zcl_handle_command_24>

08004398 <??zcl_handle_command_16>:
 8004398:	e057      	b.n	800444a <??zcl_handle_command_24>

0800439a <??zcl_handle_command_23>:
 800439a:	7870      	ldrb	r0, [r6, #1]
 800439c:	2800      	cmp	r0, #0
 800439e:	d04e      	beq.n	800443e <??zcl_handle_command_25>
 80043a0:	88b0      	ldrh	r0, [r6, #4]
 80043a2:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 80043a6:	4288      	cmp	r0, r1
 80043a8:	d141      	bne.n	800442e <??zcl_handle_command_26>
 80043aa:	f115 0110 	adds.w	r1, r5, #16
 80043ae:	68a0      	ldr	r0, [r4, #8]
 80043b0:	f00f fb5b 	bl	8013a6a <ZbApsAddrIsLocal>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d107      	bne.n	80043c8 <??zcl_handle_command_27>
 80043b8:	2381      	movs	r3, #129	@ 0x81
 80043ba:	0032      	movs	r2, r6
 80043bc:	0029      	movs	r1, r5
 80043be:	0020      	movs	r0, r4
 80043c0:	f00f fff7 	bl	80143b2 <ZbZclSendDefaultResponse>
 80043c4:	4640      	mov	r0, r8
 80043c6:	e041      	b.n	800444c <??zcl_handle_command_6>

080043c8 <??zcl_handle_command_27>:
 80043c8:	0038      	movs	r0, r7
 80043ca:	b2c0      	uxtb	r0, r0
 80043cc:	28f0      	cmp	r0, #240	@ 0xf0
 80043ce:	d108      	bne.n	80043e2 <??zcl_handle_command_28>
 80043d0:	78b0      	ldrb	r0, [r6, #2]
 80043d2:	2800      	cmp	r0, #0
 80043d4:	d131      	bne.n	800443a <??zcl_handle_command_29>
 80043d6:	002a      	movs	r2, r5
 80043d8:	0031      	movs	r1, r6
 80043da:	0020      	movs	r0, r4
 80043dc:	f001 fb33 	bl	8005a46 <ZbZclHandleGetSceneData>
 80043e0:	e02b      	b.n	800443a <??zcl_handle_command_29>

080043e2 <??zcl_handle_command_28>:
 80043e2:	0038      	movs	r0, r7
 80043e4:	b2c0      	uxtb	r0, r0
 80043e6:	28f1      	cmp	r0, #241	@ 0xf1
 80043e8:	d108      	bne.n	80043fc <??zcl_handle_command_30>
 80043ea:	78b0      	ldrb	r0, [r6, #2]
 80043ec:	2800      	cmp	r0, #0
 80043ee:	d124      	bne.n	800443a <??zcl_handle_command_29>
 80043f0:	002a      	movs	r2, r5
 80043f2:	0031      	movs	r1, r6
 80043f4:	0020      	movs	r0, r4
 80043f6:	f001 fba5 	bl	8005b44 <ZbZclHandleSetSceneData>
 80043fa:	e01e      	b.n	800443a <??zcl_handle_command_29>

080043fc <??zcl_handle_command_30>:
 80043fc:	0038      	movs	r0, r7
 80043fe:	b2c0      	uxtb	r0, r0
 8004400:	28f2      	cmp	r0, #242	@ 0xf2
 8004402:	d10d      	bne.n	8004420 <??zcl_handle_command_31>
 8004404:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8004406:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8004408:	0020      	movs	r0, r4
 800440a:	f7ff fc77 	bl	8003cfc <zcl_persist_handle_set>
 800440e:	4681      	mov	r9, r0
 8004410:	464b      	mov	r3, r9
 8004412:	b2db      	uxtb	r3, r3
 8004414:	0032      	movs	r2, r6
 8004416:	0029      	movs	r1, r5
 8004418:	0020      	movs	r0, r4
 800441a:	f00f ffca 	bl	80143b2 <ZbZclSendDefaultResponse>
 800441e:	e00c      	b.n	800443a <??zcl_handle_command_29>

08004420 <??zcl_handle_command_31>:
 8004420:	2381      	movs	r3, #129	@ 0x81
 8004422:	0032      	movs	r2, r6
 8004424:	0029      	movs	r1, r5
 8004426:	0020      	movs	r0, r4
 8004428:	f00f ffc3 	bl	80143b2 <ZbZclSendDefaultResponse>
 800442c:	e005      	b.n	800443a <??zcl_handle_command_29>

0800442e <??zcl_handle_command_26>:
 800442e:	2381      	movs	r3, #129	@ 0x81
 8004430:	0032      	movs	r2, r6
 8004432:	0029      	movs	r1, r5
 8004434:	0020      	movs	r0, r4
 8004436:	f00f ffbc 	bl	80143b2 <ZbZclSendDefaultResponse>

0800443a <??zcl_handle_command_29>:
 800443a:	4640      	mov	r0, r8
 800443c:	e006      	b.n	800444c <??zcl_handle_command_6>

0800443e <??zcl_handle_command_25>:
 800443e:	2381      	movs	r3, #129	@ 0x81
 8004440:	0032      	movs	r2, r6
 8004442:	0029      	movs	r1, r5
 8004444:	0020      	movs	r0, r4
 8004446:	f00f ffb4 	bl	80143b2 <ZbZclSendDefaultResponse>

0800444a <??zcl_handle_command_24>:
 800444a:	4640      	mov	r0, r8

0800444c <??zcl_handle_command_6>:
 800444c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08004450 <zcl_cluster_data_ind>:
 8004450:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8004452:	0004      	movs	r4, r0
 8004454:	000d      	movs	r5, r1
 8004456:	002e      	movs	r6, r5
 8004458:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 800445a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800445c:	4668      	mov	r0, sp
 800445e:	f000 f8fe 	bl	800465e <ZbZclParseHeader>
 8004462:	0007      	movs	r7, r0
 8004464:	2f00      	cmp	r7, #0
 8004466:	d501      	bpl.n	800446c <??zcl_cluster_data_ind_0>
 8004468:	2000      	movs	r0, #0
 800446a:	e00a      	b.n	8004482 <??zcl_cluster_data_ind_1>

0800446c <??zcl_cluster_data_ind_0>:
 800446c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800446e:	4438      	add	r0, r7
 8004470:	6260      	str	r0, [r4, #36]	@ 0x24
 8004472:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8004474:	1bc0      	subs	r0, r0, r7
 8004476:	8520      	strh	r0, [r4, #40]	@ 0x28
 8004478:	466a      	mov	r2, sp
 800447a:	0021      	movs	r1, r4
 800447c:	0030      	movs	r0, r6
 800447e:	f7ff fec5 	bl	800420c <zcl_handle_command>

08004482 <??zcl_cluster_data_ind_1>:
 8004482:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08004484 <zcl_cluster_alarm_data_ind>:
 8004484:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004488:	b098      	sub	sp, #96	@ 0x60
 800448a:	0004      	movs	r4, r0
 800448c:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800448e:	26ff      	movs	r6, #255	@ 0xff
 8004490:	2700      	movs	r7, #0
 8004492:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8004494:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004496:	a802      	add	r0, sp, #8
 8004498:	f000 f8e1 	bl	800465e <ZbZclParseHeader>
 800449c:	4680      	mov	r8, r0
 800449e:	f1b8 0f00 	cmp.w	r8, #0
 80044a2:	d501      	bpl.n	80044a8 <??zcl_cluster_alarm_data_ind_0>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e0d7      	b.n	8004658 <??zcl_cluster_alarm_data_ind_1>

080044a8 <??zcl_cluster_alarm_data_ind_0>:
 80044a8:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 80044aa:	ebb0 0008 	subs.w	r0, r0, r8
 80044ae:	8520      	strh	r0, [r4, #40]	@ 0x28
 80044b0:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80044b2:	2809      	cmp	r0, #9
 80044b4:	d001      	beq.n	80044ba <??zcl_cluster_alarm_data_ind_2>
 80044b6:	2000      	movs	r0, #0
 80044b8:	e0ce      	b.n	8004658 <??zcl_cluster_alarm_data_ind_1>

080044ba <??zcl_cluster_alarm_data_ind_2>:
 80044ba:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80044be:	2800      	cmp	r0, #0
 80044c0:	d001      	beq.n	80044c6 <??zcl_cluster_alarm_data_ind_3>
 80044c2:	2000      	movs	r0, #0
 80044c4:	e0c8      	b.n	8004658 <??zcl_cluster_alarm_data_ind_1>

080044c6 <??zcl_cluster_alarm_data_ind_3>:
 80044c6:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80044ca:	2801      	cmp	r0, #1
 80044cc:	d001      	beq.n	80044d2 <??zcl_cluster_alarm_data_ind_4>
 80044ce:	2000      	movs	r0, #0
 80044d0:	e0c2      	b.n	8004658 <??zcl_cluster_alarm_data_ind_1>

080044d2 <??zcl_cluster_alarm_data_ind_4>:
 80044d2:	f89d 000f 	ldrb.w	r0, [sp, #15]
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d002      	beq.n	80044e0 <??zcl_cluster_alarm_data_ind_5>
 80044da:	2801      	cmp	r0, #1
 80044dc:	d02a      	beq.n	8004534 <??zcl_cluster_alarm_data_ind_6>
 80044de:	e03f      	b.n	8004560 <??zcl_cluster_alarm_data_ind_7>

080044e0 <??zcl_cluster_alarm_data_ind_5>:
 80044e0:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80044e2:	f810 0008 	ldrb.w	r0, [r0, r8]
 80044e6:	f88d 0004 	strb.w	r0, [sp, #4]
 80044ea:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80044ec:	4440      	add	r0, r8
 80044ee:	1c40      	adds	r0, r0, #1
 80044f0:	f000 faaa 	bl	8004a48 <pletoh16>
 80044f4:	f8ad 0006 	strh.w	r0, [sp, #6]
 80044f8:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80044fc:	0028      	movs	r0, r5
 80044fe:	f7ff fa77 	bl	80039f0 <ZbZclClusterGetClusterId>
 8004502:	4581      	cmp	r9, r0
 8004504:	d12c      	bne.n	8004560 <??zcl_cluster_alarm_data_ind_7>

08004506 <??zcl_cluster_alarm_data_ind_9>:
 8004506:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8004508:	2800      	cmp	r0, #0
 800450a:	d104      	bne.n	8004516 <??zcl_cluster_alarm_data_ind_10>
 800450c:	2081      	movs	r0, #129	@ 0x81
 800450e:	0006      	movs	r6, r0
 8004510:	2001      	movs	r0, #1
 8004512:	0007      	movs	r7, r0
 8004514:	e024      	b.n	8004560 <??zcl_cluster_alarm_data_ind_7>

08004516 <??zcl_cluster_alarm_data_ind_10>:
 8004516:	a802      	add	r0, sp, #8
 8004518:	9000      	str	r0, [sp, #0]
 800451a:	0023      	movs	r3, r4
 800451c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8004520:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004524:	0028      	movs	r0, r5
 8004526:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 800452a:	47e0      	blx	ip
 800452c:	0006      	movs	r6, r0
 800452e:	2001      	movs	r0, #1
 8004530:	0007      	movs	r7, r0
 8004532:	e015      	b.n	8004560 <??zcl_cluster_alarm_data_ind_7>

08004534 <??zcl_cluster_alarm_data_ind_6>:
 8004534:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8004536:	2800      	cmp	r0, #0
 8004538:	d104      	bne.n	8004544 <??zcl_cluster_alarm_data_ind_11>
 800453a:	2081      	movs	r0, #129	@ 0x81
 800453c:	0006      	movs	r6, r0
 800453e:	2001      	movs	r0, #1
 8004540:	0007      	movs	r7, r0
 8004542:	e00d      	b.n	8004560 <??zcl_cluster_alarm_data_ind_7>

08004544 <??zcl_cluster_alarm_data_ind_11>:
 8004544:	a802      	add	r0, sp, #8
 8004546:	9000      	str	r0, [sp, #0]
 8004548:	0023      	movs	r3, r4
 800454a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800454e:	21ff      	movs	r1, #255	@ 0xff
 8004550:	0028      	movs	r0, r5
 8004552:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8004556:	47e0      	blx	ip
 8004558:	0006      	movs	r6, r0
 800455a:	2001      	movs	r0, #1
 800455c:	0007      	movs	r7, r0
 800455e:	e7ff      	b.n	8004560 <??zcl_cluster_alarm_data_ind_7>

08004560 <??zcl_cluster_alarm_data_ind_7>:
 8004560:	0030      	movs	r0, r6
 8004562:	b2c0      	uxtb	r0, r0
 8004564:	28ff      	cmp	r0, #255	@ 0xff
 8004566:	d076      	beq.n	8004656 <??zcl_cluster_alarm_data_ind_12>
 8004568:	f89d 000e 	ldrb.w	r0, [sp, #14]
 800456c:	f88d 0000 	strb.w	r0, [sp]
 8004570:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8004574:	f88d 0002 	strb.w	r0, [sp, #2]
 8004578:	f88d 6003 	strb.w	r6, [sp, #3]
 800457c:	f05f 0a08 	movs.w	sl, #8
 8004580:	f05f 0b00 	movs.w	fp, #0
 8004584:	f10d 0908 	add.w	r9, sp, #8
 8004588:	465a      	mov	r2, fp
 800458a:	4651      	mov	r1, sl
 800458c:	4648      	mov	r0, r9
 800458e:	f001 fb7d 	bl	8005c8c <__aeabi_memset>
 8004592:	2000      	movs	r0, #0
 8004594:	f88d 0008 	strb.w	r0, [sp, #8]
 8004598:	2000      	movs	r0, #0
 800459a:	f88d 0009 	strb.w	r0, [sp, #9]
 800459e:	2001      	movs	r0, #1
 80045a0:	f88d 000a 	strb.w	r0, [sp, #10]
 80045a4:	2001      	movs	r0, #1
 80045a6:	f88d 000b 	strb.w	r0, [sp, #11]
 80045aa:	2000      	movs	r0, #0
 80045ac:	f8ad 000c 	strh.w	r0, [sp, #12]
 80045b0:	f89d 0000 	ldrb.w	r0, [sp]
 80045b4:	f88d 000e 	strb.w	r0, [sp, #14]
 80045b8:	200b      	movs	r0, #11
 80045ba:	f88d 000f 	strb.w	r0, [sp, #15]
 80045be:	2205      	movs	r2, #5
 80045c0:	a905      	add	r1, sp, #20
 80045c2:	a802      	add	r0, sp, #8
 80045c4:	f000 f8ce 	bl	8004764 <ZbZclAppendHeader>
 80045c8:	4681      	mov	r9, r0
 80045ca:	f1b9 0f00 	cmp.w	r9, #0
 80045ce:	d501      	bpl.n	80045d4 <??zcl_cluster_alarm_data_ind_13>
 80045d0:	2089      	movs	r0, #137	@ 0x89
 80045d2:	e041      	b.n	8004658 <??zcl_cluster_alarm_data_ind_1>

080045d4 <??zcl_cluster_alarm_data_ind_13>:
 80045d4:	a805      	add	r0, sp, #20
 80045d6:	9014      	str	r0, [sp, #80]	@ 0x50
 80045d8:	a814      	add	r0, sp, #80	@ 0x50
 80045da:	f8c0 9004 	str.w	r9, [r0, #4]
 80045de:	f10d 0102 	add.w	r1, sp, #2
 80045e2:	6081      	str	r1, [r0, #8]
 80045e4:	2002      	movs	r0, #2
 80045e6:	9017      	str	r0, [sp, #92]	@ 0x5c
 80045e8:	2030      	movs	r0, #48	@ 0x30
 80045ea:	9004      	str	r0, [sp, #16]
 80045ec:	f05f 0a00 	movs.w	sl, #0
 80045f0:	f10d 0b20 	add.w	fp, sp, #32
 80045f4:	4652      	mov	r2, sl
 80045f6:	9904      	ldr	r1, [sp, #16]
 80045f8:	4658      	mov	r0, fp
 80045fa:	f001 fb47 	bl	8005c8c <__aeabi_memset>
 80045fe:	a808      	add	r0, sp, #32
 8004600:	f114 0110 	adds.w	r1, r4, #16
 8004604:	2210      	movs	r2, #16
 8004606:	f012 fdba 	bl	801717e <__aeabi_memcpy>
 800460a:	8aa8      	ldrh	r0, [r5, #20]
 800460c:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8004610:	2009      	movs	r0, #9
 8004612:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8004616:	7ba8      	ldrb	r0, [r5, #14]
 8004618:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 800461c:	a814      	add	r0, sp, #80	@ 0x50
 800461e:	900e      	str	r0, [sp, #56]	@ 0x38
 8004620:	2002      	movs	r0, #2
 8004622:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8004626:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 800462a:	f7ff fad2 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 800462e:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8004632:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 8004636:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 800463a:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 800463e:	2000      	movs	r0, #0
 8004640:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 8004644:	2000      	movs	r0, #0
 8004646:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
 800464a:	2300      	movs	r3, #0
 800464c:	2200      	movs	r2, #0
 800464e:	a908      	add	r1, sp, #32
 8004650:	68a8      	ldr	r0, [r5, #8]
 8004652:	f00f f96d 	bl	8013930 <ZbApsdeDataReqCallback>

08004656 <??zcl_cluster_alarm_data_ind_12>:
 8004656:	0038      	movs	r0, r7

08004658 <??zcl_cluster_alarm_data_ind_1>:
 8004658:	b019      	add	sp, #100	@ 0x64
 800465a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800465e <ZbZclParseHeader>:
 800465e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004662:	0004      	movs	r4, r0
 8004664:	000d      	movs	r5, r1
 8004666:	0016      	movs	r6, r2
 8004668:	2700      	movs	r7, #0
 800466a:	2e03      	cmp	r6, #3
 800466c:	d202      	bcs.n	8004674 <??ZbZclParseHeader_0>
 800466e:	f05f 30ff 	movs.w	r0, #4294967295
 8004672:	e035      	b.n	80046e0 <??ZbZclParseHeader_1>

08004674 <??ZbZclParseHeader_0>:
 8004674:	f05f 0808 	movs.w	r8, #8
 8004678:	f05f 0900 	movs.w	r9, #0
 800467c:	46a2      	mov	sl, r4
 800467e:	464a      	mov	r2, r9
 8004680:	4641      	mov	r1, r8
 8004682:	4650      	mov	r0, sl
 8004684:	f001 fb02 	bl	8005c8c <__aeabi_memset>
 8004688:	5de8      	ldrb	r0, [r5, r7]
 800468a:	f010 0003 	ands.w	r0, r0, #3
 800468e:	7020      	strb	r0, [r4, #0]
 8004690:	5de8      	ldrb	r0, [r5, r7]
 8004692:	b2c0      	uxtb	r0, r0
 8004694:	0880      	lsrs	r0, r0, #2
 8004696:	f010 0001 	ands.w	r0, r0, #1
 800469a:	7060      	strb	r0, [r4, #1]
 800469c:	5de8      	ldrb	r0, [r5, r7]
 800469e:	b2c0      	uxtb	r0, r0
 80046a0:	08c0      	lsrs	r0, r0, #3
 80046a2:	f010 0001 	ands.w	r0, r0, #1
 80046a6:	70a0      	strb	r0, [r4, #2]
 80046a8:	5de8      	ldrb	r0, [r5, r7]
 80046aa:	b2c0      	uxtb	r0, r0
 80046ac:	0900      	lsrs	r0, r0, #4
 80046ae:	f010 0001 	ands.w	r0, r0, #1
 80046b2:	70e0      	strb	r0, [r4, #3]
 80046b4:	1c7f      	adds	r7, r7, #1
 80046b6:	7860      	ldrb	r0, [r4, #1]
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d00a      	beq.n	80046d2 <??ZbZclParseHeader_2>
 80046bc:	2e05      	cmp	r6, #5
 80046be:	d202      	bcs.n	80046c6 <??ZbZclParseHeader_3>
 80046c0:	f05f 30ff 	movs.w	r0, #4294967295
 80046c4:	e00c      	b.n	80046e0 <??ZbZclParseHeader_1>

080046c6 <??ZbZclParseHeader_3>:
 80046c6:	eb05 0007 	add.w	r0, r5, r7
 80046ca:	f000 f9bd 	bl	8004a48 <pletoh16>
 80046ce:	80a0      	strh	r0, [r4, #4]
 80046d0:	1cbf      	adds	r7, r7, #2

080046d2 <??ZbZclParseHeader_2>:
 80046d2:	5de8      	ldrb	r0, [r5, r7]
 80046d4:	71a0      	strb	r0, [r4, #6]
 80046d6:	1c7f      	adds	r7, r7, #1
 80046d8:	5de8      	ldrb	r0, [r5, r7]
 80046da:	71e0      	strb	r0, [r4, #7]
 80046dc:	1c7f      	adds	r7, r7, #1
 80046de:	0038      	movs	r0, r7

080046e0 <??ZbZclParseHeader_1>:
 80046e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080046e4 <ZbZclPrependHeader>:
 80046e4:	b470      	push	{r4, r5, r6}
 80046e6:	0003      	movs	r3, r0
 80046e8:	2400      	movs	r4, #0
 80046ea:	0015      	movs	r5, r2
 80046ec:	2600      	movs	r6, #0
 80046ee:	7858      	ldrb	r0, [r3, #1]
 80046f0:	2800      	cmp	r0, #0
 80046f2:	d004      	beq.n	80046fe <??ZbZclPrependHeader_0>
 80046f4:	2a05      	cmp	r2, #5
 80046f6:	d202      	bcs.n	80046fe <??ZbZclPrependHeader_0>
 80046f8:	f05f 30ff 	movs.w	r0, #4294967295
 80046fc:	e030      	b.n	8004760 <??ZbZclPrependHeader_1>

080046fe <??ZbZclPrependHeader_0>:
 80046fe:	2a03      	cmp	r2, #3
 8004700:	d202      	bcs.n	8004708 <??ZbZclPrependHeader_2>
 8004702:	f05f 30ff 	movs.w	r0, #4294967295
 8004706:	e02b      	b.n	8004760 <??ZbZclPrependHeader_1>

08004708 <??ZbZclPrependHeader_2>:
 8004708:	1e6d      	subs	r5, r5, #1
 800470a:	79d8      	ldrb	r0, [r3, #7]
 800470c:	5548      	strb	r0, [r1, r5]
 800470e:	1c76      	adds	r6, r6, #1
 8004710:	1e6d      	subs	r5, r5, #1
 8004712:	7998      	ldrb	r0, [r3, #6]
 8004714:	5548      	strb	r0, [r1, r5]
 8004716:	1c76      	adds	r6, r6, #1
 8004718:	7858      	ldrb	r0, [r3, #1]
 800471a:	2800      	cmp	r0, #0
 800471c:	d009      	beq.n	8004732 <??ZbZclPrependHeader_3>
 800471e:	1e6d      	subs	r5, r5, #1
 8004720:	8898      	ldrh	r0, [r3, #4]
 8004722:	b280      	uxth	r0, r0
 8004724:	0a00      	lsrs	r0, r0, #8
 8004726:	5548      	strb	r0, [r1, r5]
 8004728:	1c76      	adds	r6, r6, #1
 800472a:	1e6d      	subs	r5, r5, #1
 800472c:	8898      	ldrh	r0, [r3, #4]
 800472e:	5548      	strb	r0, [r1, r5]
 8004730:	1c76      	adds	r6, r6, #1

08004732 <??ZbZclPrependHeader_3>:
 8004732:	7818      	ldrb	r0, [r3, #0]
 8004734:	f010 0003 	ands.w	r0, r0, #3
 8004738:	4304      	orrs	r4, r0
 800473a:	7858      	ldrb	r0, [r3, #1]
 800473c:	2800      	cmp	r0, #0
 800473e:	d001      	beq.n	8004744 <??ZbZclPrependHeader_4>
 8004740:	f054 0404 	orrs.w	r4, r4, #4

08004744 <??ZbZclPrependHeader_4>:
 8004744:	7898      	ldrb	r0, [r3, #2]
 8004746:	2801      	cmp	r0, #1
 8004748:	d101      	bne.n	800474e <??ZbZclPrependHeader_5>
 800474a:	f054 0408 	orrs.w	r4, r4, #8

0800474e <??ZbZclPrependHeader_5>:
 800474e:	78d8      	ldrb	r0, [r3, #3]
 8004750:	2801      	cmp	r0, #1
 8004752:	d101      	bne.n	8004758 <??ZbZclPrependHeader_6>
 8004754:	f054 0410 	orrs.w	r4, r4, #16

08004758 <??ZbZclPrependHeader_6>:
 8004758:	1e6d      	subs	r5, r5, #1
 800475a:	554c      	strb	r4, [r1, r5]
 800475c:	1c76      	adds	r6, r6, #1
 800475e:	0030      	movs	r0, r6

08004760 <??ZbZclPrependHeader_1>:
 8004760:	bc70      	pop	{r4, r5, r6}
 8004762:	4770      	bx	lr

08004764 <ZbZclAppendHeader>:
 8004764:	b430      	push	{r4, r5}
 8004766:	0003      	movs	r3, r0
 8004768:	2400      	movs	r4, #0
 800476a:	2500      	movs	r5, #0
 800476c:	7858      	ldrb	r0, [r3, #1]
 800476e:	2800      	cmp	r0, #0
 8004770:	d004      	beq.n	800477c <??ZbZclAppendHeader_0>
 8004772:	2a05      	cmp	r2, #5
 8004774:	d202      	bcs.n	800477c <??ZbZclAppendHeader_0>
 8004776:	f05f 30ff 	movs.w	r0, #4294967295
 800477a:	e02b      	b.n	80047d4 <??ZbZclAppendHeader_1>

0800477c <??ZbZclAppendHeader_0>:
 800477c:	2a03      	cmp	r2, #3
 800477e:	d202      	bcs.n	8004786 <??ZbZclAppendHeader_2>
 8004780:	f05f 30ff 	movs.w	r0, #4294967295
 8004784:	e026      	b.n	80047d4 <??ZbZclAppendHeader_1>

08004786 <??ZbZclAppendHeader_2>:
 8004786:	7818      	ldrb	r0, [r3, #0]
 8004788:	f010 0003 	ands.w	r0, r0, #3
 800478c:	4304      	orrs	r4, r0
 800478e:	7858      	ldrb	r0, [r3, #1]
 8004790:	2800      	cmp	r0, #0
 8004792:	d001      	beq.n	8004798 <??ZbZclAppendHeader_3>
 8004794:	f054 0404 	orrs.w	r4, r4, #4

08004798 <??ZbZclAppendHeader_3>:
 8004798:	7898      	ldrb	r0, [r3, #2]
 800479a:	2801      	cmp	r0, #1
 800479c:	d101      	bne.n	80047a2 <??ZbZclAppendHeader_4>
 800479e:	f054 0408 	orrs.w	r4, r4, #8

080047a2 <??ZbZclAppendHeader_4>:
 80047a2:	78d8      	ldrb	r0, [r3, #3]
 80047a4:	2801      	cmp	r0, #1
 80047a6:	d101      	bne.n	80047ac <??ZbZclAppendHeader_5>
 80047a8:	f054 0410 	orrs.w	r4, r4, #16

080047ac <??ZbZclAppendHeader_5>:
 80047ac:	554c      	strb	r4, [r1, r5]
 80047ae:	1c6d      	adds	r5, r5, #1
 80047b0:	7858      	ldrb	r0, [r3, #1]
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d007      	beq.n	80047c6 <??ZbZclAppendHeader_6>
 80047b6:	8898      	ldrh	r0, [r3, #4]
 80047b8:	5548      	strb	r0, [r1, r5]
 80047ba:	1c6d      	adds	r5, r5, #1
 80047bc:	8898      	ldrh	r0, [r3, #4]
 80047be:	b280      	uxth	r0, r0
 80047c0:	0a00      	lsrs	r0, r0, #8
 80047c2:	5548      	strb	r0, [r1, r5]
 80047c4:	1c6d      	adds	r5, r5, #1

080047c6 <??ZbZclAppendHeader_6>:
 80047c6:	7998      	ldrb	r0, [r3, #6]
 80047c8:	5548      	strb	r0, [r1, r5]
 80047ca:	1c6d      	adds	r5, r5, #1
 80047cc:	79d8      	ldrb	r0, [r3, #7]
 80047ce:	5548      	strb	r0, [r1, r5]
 80047d0:	1c6d      	adds	r5, r5, #1
 80047d2:	0028      	movs	r0, r5

080047d4 <??ZbZclAppendHeader_1>:
 80047d4:	bc30      	pop	{r4, r5}
 80047d6:	4770      	bx	lr

080047d8 <ZbZclOnOffServerAlloc>:
 80047d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	0006      	movs	r6, r0
 80047de:	000f      	movs	r7, r1
 80047e0:	0014      	movs	r4, r2
 80047e2:	4698      	mov	r8, r3
 80047e4:	2000      	movs	r0, #0
 80047e6:	9000      	str	r0, [sp, #0]
 80047e8:	003b      	movs	r3, r7
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2206      	movs	r2, #6
 80047ee:	2180      	movs	r1, #128	@ 0x80
 80047f0:	0030      	movs	r0, r6
 80047f2:	f000 fe3e 	bl	8005472 <ZbZclClusterAlloc>
 80047f6:	0005      	movs	r5, r0
 80047f8:	2d00      	cmp	r5, #0
 80047fa:	d101      	bne.n	8004800 <??ZbZclOnOffServerAlloc_0>
 80047fc:	2000      	movs	r0, #0
 80047fe:	e041      	b.n	8004884 <??ZbZclOnOffServerAlloc_1>

08004800 <??ZbZclOnOffServerAlloc_0>:
 8004800:	2c00      	cmp	r4, #0
 8004802:	d00a      	beq.n	800481a <??ZbZclOnOffServerAlloc_2>
 8004804:	f05f 090c 	movs.w	r9, #12
 8004808:	46a2      	mov	sl, r4
 800480a:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 800480e:	464a      	mov	r2, r9
 8004810:	4651      	mov	r1, sl
 8004812:	4658      	mov	r0, fp
 8004814:	f012 fcb3 	bl	801717e <__aeabi_memcpy>
 8004818:	e00a      	b.n	8004830 <??ZbZclOnOffServerAlloc_3>

0800481a <??ZbZclOnOffServerAlloc_2>:
 800481a:	f05f 090c 	movs.w	r9, #12
 800481e:	f05f 0a00 	movs.w	sl, #0
 8004822:	f115 0b6c 	adds.w	fp, r5, #108	@ 0x6c
 8004826:	4652      	mov	r2, sl
 8004828:	4649      	mov	r1, r9
 800482a:	4658      	mov	r0, fp
 800482c:	f001 fa2e 	bl	8005c8c <__aeabi_memset>

08004830 <??ZbZclOnOffServerAlloc_3>:
 8004830:	2201      	movs	r2, #1
 8004832:	2300      	movs	r3, #0
 8004834:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8004838:	0028      	movs	r0, r5
 800483a:	f7fd f912 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800483e:	f20f 004d 	addw	r0, pc, #77	@ 0x4d
 8004842:	6628      	str	r0, [r5, #96]	@ 0x60
 8004844:	f20f 0089 	addw	r0, pc, #137	@ 0x89
 8004848:	6668      	str	r0, [r5, #100]	@ 0x64
 800484a:	f20f 00c1 	addw	r0, pc, #193	@ 0xc1
 800484e:	65a8      	str	r0, [r5, #88]	@ 0x58
 8004850:	2201      	movs	r2, #1
 8004852:	490d      	ldr	r1, [pc, #52]	@ (8004888 <??DataTable0>)
 8004854:	0028      	movs	r0, r5
 8004856:	f7fd fa1b 	bl	8001c90 <ZbZclAttrAppendList>
 800485a:	2800      	cmp	r0, #0
 800485c:	d004      	beq.n	8004868 <??ZbZclOnOffServerAlloc_4>
 800485e:	0028      	movs	r0, r5
 8004860:	f000 fec9 	bl	80055f6 <ZbZclClusterFree>
 8004864:	2000      	movs	r0, #0
 8004866:	e00d      	b.n	8004884 <??ZbZclOnOffServerAlloc_1>

08004868 <??ZbZclOnOffServerAlloc_4>:
 8004868:	2200      	movs	r2, #0
 800486a:	2300      	movs	r3, #0
 800486c:	2100      	movs	r1, #0
 800486e:	0028      	movs	r0, r5
 8004870:	f7fd f8f7 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004874:	4641      	mov	r1, r8
 8004876:	0028      	movs	r0, r5
 8004878:	f7ff f8b6 	bl	80039e8 <ZbZclClusterSetCallbackArg>
 800487c:	0028      	movs	r0, r5
 800487e:	f000 fe88 	bl	8005592 <ZbZclClusterAttach>
 8004882:	0028      	movs	r0, r5

08004884 <??ZbZclOnOffServerAlloc_1>:
 8004884:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004888 <??DataTable0>:
 8004888:	85b0 0801                                   ....

0800488c <onOffServerGetSceneData>:
 800488c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800488e:	0004      	movs	r4, r0
 8004890:	000d      	movs	r5, r1
 8004892:	0016      	movs	r6, r2
 8004894:	2703      	movs	r7, #3
 8004896:	2000      	movs	r0, #0
 8004898:	9001      	str	r0, [sp, #4]
 800489a:	2001      	movs	r0, #1
 800489c:	9000      	str	r0, [sp, #0]
 800489e:	ab02      	add	r3, sp, #8
 80048a0:	2200      	movs	r2, #0
 80048a2:	2100      	movs	r1, #0
 80048a4:	0020      	movs	r0, r4
 80048a6:	f7fb fd9e 	bl	80003e6 <ZbZclAttrRead>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d001      	beq.n	80048b2 <??onOffServerGetSceneData_0>
 80048ae:	2000      	movs	r0, #0
 80048b0:	e00d      	b.n	80048ce <??onOffServerGetSceneData_1>

080048b2 <??onOffServerGetSceneData_0>:
 80048b2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80048b6:	0039      	movs	r1, r7
 80048b8:	b2c9      	uxtb	r1, r1
 80048ba:	5468      	strb	r0, [r5, r1]
 80048bc:	1c7f      	adds	r7, r7, #1
 80048be:	89a1      	ldrh	r1, [r4, #12]
 80048c0:	0028      	movs	r0, r5
 80048c2:	f000 f90d 	bl	8004ae0 <putle16>
 80048c6:	1ef8      	subs	r0, r7, #3
 80048c8:	70a8      	strb	r0, [r5, #2]
 80048ca:	0038      	movs	r0, r7
 80048cc:	b2c0      	uxtb	r0, r0

080048ce <??onOffServerGetSceneData_1>:
 80048ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080048d0 <onOffServerSetSceneData>:
 80048d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048d4:	0007      	movs	r7, r0
 80048d6:	000c      	movs	r4, r1
 80048d8:	0015      	movs	r5, r2
 80048da:	001e      	movs	r6, r3
 80048dc:	0028      	movs	r0, r5
 80048de:	b2c0      	uxtb	r0, r0
 80048e0:	2801      	cmp	r0, #1
 80048e2:	d001      	beq.n	80048e8 <??onOffServerSetSceneData_0>
 80048e4:	2087      	movs	r0, #135	@ 0x87
 80048e6:	e00f      	b.n	8004908 <??onOffServerSetSceneData_1>

080048e8 <??onOffServerSetSceneData_0>:
 80048e8:	7820      	ldrb	r0, [r4, #0]
 80048ea:	2800      	cmp	r0, #0
 80048ec:	d002      	beq.n	80048f4 <??onOffServerSetSceneData_2>
 80048ee:	f05f 0801 	movs.w	r8, #1
 80048f2:	e001      	b.n	80048f8 <??onOffServerSetSceneData_3>

080048f4 <??onOffServerSetSceneData_2>:
 80048f4:	f05f 0800 	movs.w	r8, #0

080048f8 <??onOffServerSetSceneData_3>:
 80048f8:	4642      	mov	r2, r8
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	2300      	movs	r3, #0
 80048fe:	2100      	movs	r1, #0
 8004900:	0038      	movs	r0, r7
 8004902:	f7fd f8ae 	bl	8001a62 <ZbZclAttrIntegerWrite>
 8004906:	2000      	movs	r0, #0

08004908 <??onOffServerSetSceneData_1>:
 8004908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800490c <onOffServerCommand>:
 800490c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004910:	b08a      	sub	sp, #40	@ 0x28
 8004912:	4680      	mov	r8, r0
 8004914:	000c      	movs	r4, r1
 8004916:	0015      	movs	r5, r2
 8004918:	4646      	mov	r6, r8
 800491a:	27ff      	movs	r7, #255	@ 0xff
 800491c:	f05f 0918 	movs.w	r9, #24
 8004920:	f05f 0a00 	movs.w	sl, #0
 8004924:	f10d 0b10 	add.w	fp, sp, #16
 8004928:	4652      	mov	r2, sl
 800492a:	4649      	mov	r1, r9
 800492c:	4658      	mov	r0, fp
 800492e:	f001 f9ad 	bl	8005c8c <__aeabi_memset>
 8004932:	a804      	add	r0, sp, #16
 8004934:	f115 0110 	adds.w	r1, r5, #16
 8004938:	2210      	movs	r2, #16
 800493a:	f012 fc20 	bl	801717e <__aeabi_memcpy>
 800493e:	79a0      	ldrb	r0, [r4, #6]
 8004940:	f88d 0020 	strb.w	r0, [sp, #32]
 8004944:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8004948:	f7ff f943 	bl	8003bd2 <ZbZclTxOptsFromSecurityStatus>
 800494c:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8004950:	79e0      	ldrb	r0, [r4, #7]
 8004952:	2800      	cmp	r0, #0
 8004954:	d003      	beq.n	800495e <??onOffServerCommand_0>
 8004956:	2802      	cmp	r0, #2
 8004958:	d025      	beq.n	80049a6 <??onOffServerCommand_1>
 800495a:	d312      	bcc.n	8004982 <??onOffServerCommand_2>
 800495c:	e050      	b.n	8004a00 <??onOffServerCommand_3>

0800495e <??onOffServerCommand_0>:
 800495e:	6ef0      	ldr	r0, [r6, #108]	@ 0x6c
 8004960:	2800      	cmp	r0, #0
 8004962:	d007      	beq.n	8004974 <??onOffServerCommand_4>
 8004964:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 8004968:	a904      	add	r1, sp, #16
 800496a:	4640      	mov	r0, r8
 800496c:	6ef3      	ldr	r3, [r6, #108]	@ 0x6c
 800496e:	4798      	blx	r3
 8004970:	0007      	movs	r7, r0
 8004972:	e005      	b.n	8004980 <??onOffServerCommand_5>

08004974 <??onOffServerCommand_4>:
 8004974:	2200      	movs	r2, #0
 8004976:	2300      	movs	r3, #0
 8004978:	2100      	movs	r1, #0
 800497a:	4640      	mov	r0, r8
 800497c:	f7fd f871 	bl	8001a62 <ZbZclAttrIntegerWrite>

08004980 <??onOffServerCommand_5>:
 8004980:	e040      	b.n	8004a04 <??onOffServerCommand_6>

08004982 <??onOffServerCommand_2>:
 8004982:	6f30      	ldr	r0, [r6, #112]	@ 0x70
 8004984:	2800      	cmp	r0, #0
 8004986:	d007      	beq.n	8004998 <??onOffServerCommand_7>
 8004988:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 800498c:	a904      	add	r1, sp, #16
 800498e:	4640      	mov	r0, r8
 8004990:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8004992:	4798      	blx	r3
 8004994:	0007      	movs	r7, r0
 8004996:	e005      	b.n	80049a4 <??onOffServerCommand_8>

08004998 <??onOffServerCommand_7>:
 8004998:	2201      	movs	r2, #1
 800499a:	2300      	movs	r3, #0
 800499c:	2100      	movs	r1, #0
 800499e:	4640      	mov	r0, r8
 80049a0:	f7fd f85f 	bl	8001a62 <ZbZclAttrIntegerWrite>

080049a4 <??onOffServerCommand_8>:
 80049a4:	e02e      	b.n	8004a04 <??onOffServerCommand_6>

080049a6 <??onOffServerCommand_1>:
 80049a6:	6f70      	ldr	r0, [r6, #116]	@ 0x74
 80049a8:	2800      	cmp	r0, #0
 80049aa:	d007      	beq.n	80049bc <??onOffServerCommand_9>
 80049ac:	f8d8 2054 	ldr.w	r2, [r8, #84]	@ 0x54
 80049b0:	a904      	add	r1, sp, #16
 80049b2:	4640      	mov	r0, r8
 80049b4:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80049b6:	4798      	blx	r3
 80049b8:	0007      	movs	r7, r0
 80049ba:	e020      	b.n	80049fe <??onOffServerCommand_10>

080049bc <??onOffServerCommand_9>:
 80049bc:	2000      	movs	r0, #0
 80049be:	9001      	str	r0, [sp, #4]
 80049c0:	2001      	movs	r0, #1
 80049c2:	9000      	str	r0, [sp, #0]
 80049c4:	ab02      	add	r3, sp, #8
 80049c6:	2200      	movs	r2, #0
 80049c8:	2100      	movs	r1, #0
 80049ca:	4640      	mov	r0, r8
 80049cc:	f7fb fd0b 	bl	80003e6 <ZbZclAttrRead>
 80049d0:	2800      	cmp	r0, #0
 80049d2:	d002      	beq.n	80049da <??onOffServerCommand_11>
 80049d4:	2086      	movs	r0, #134	@ 0x86
 80049d6:	0007      	movs	r7, r0
 80049d8:	e014      	b.n	8004a04 <??onOffServerCommand_6>

080049da <??onOffServerCommand_11>:
 80049da:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80049de:	2800      	cmp	r0, #0
 80049e0:	d003      	beq.n	80049ea <??onOffServerCommand_12>
 80049e2:	2000      	movs	r0, #0
 80049e4:	f88d 0008 	strb.w	r0, [sp, #8]
 80049e8:	e002      	b.n	80049f0 <??onOffServerCommand_13>

080049ea <??onOffServerCommand_12>:
 80049ea:	2001      	movs	r0, #1
 80049ec:	f88d 0008 	strb.w	r0, [sp, #8]

080049f0 <??onOffServerCommand_13>:
 80049f0:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80049f4:	2300      	movs	r3, #0
 80049f6:	2100      	movs	r1, #0
 80049f8:	4640      	mov	r0, r8
 80049fa:	f7fd f832 	bl	8001a62 <ZbZclAttrIntegerWrite>

080049fe <??onOffServerCommand_10>:
 80049fe:	e001      	b.n	8004a04 <??onOffServerCommand_6>

08004a00 <??onOffServerCommand_3>:
 8004a00:	2081      	movs	r0, #129	@ 0x81
 8004a02:	0007      	movs	r7, r0

08004a04 <??onOffServerCommand_6>:
 8004a04:	0038      	movs	r0, r7
 8004a06:	b2c0      	uxtb	r0, r0
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	d106      	bne.n	8004a1a <??onOffServerCommand_14>
 8004a0c:	6ff0      	ldr	r0, [r6, #124]	@ 0x7c
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d003      	beq.n	8004a1a <??onOffServerCommand_14>
 8004a12:	79e1      	ldrb	r1, [r4, #7]
 8004a14:	6fb0      	ldr	r0, [r6, #120]	@ 0x78
 8004a16:	6ff2      	ldr	r2, [r6, #124]	@ 0x7c
 8004a18:	4790      	blx	r2

08004a1a <??onOffServerCommand_14>:
 8004a1a:	0038      	movs	r0, r7
 8004a1c:	b2c0      	uxtb	r0, r0
 8004a1e:	b00b      	add	sp, #44	@ 0x2c
 8004a20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004a24 <ZbZclOnOffServerSetLevelControlCallback>:
 8004a24:	0003      	movs	r3, r0
 8004a26:	6799      	str	r1, [r3, #120]	@ 0x78
 8004a28:	67da      	str	r2, [r3, #124]	@ 0x7c
 8004a2a:	4770      	bx	lr

08004a2c <is_little_endian>:
 8004a2c:	b081      	sub	sp, #4
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f8ad 0000 	strh.w	r0, [sp]
 8004a34:	4668      	mov	r0, sp
 8004a36:	7800      	ldrb	r0, [r0, #0]
 8004a38:	2801      	cmp	r0, #1
 8004a3a:	d101      	bne.n	8004a40 <??is_little_endian_0>
 8004a3c:	2001      	movs	r0, #1
 8004a3e:	e000      	b.n	8004a42 <??is_little_endian_1>

08004a40 <??is_little_endian_0>:
 8004a40:	2000      	movs	r0, #0

08004a42 <??is_little_endian_1>:
 8004a42:	b2c0      	uxtb	r0, r0
 8004a44:	b001      	add	sp, #4
 8004a46:	4770      	bx	lr

08004a48 <pletoh16>:
 8004a48:	0001      	movs	r1, r0
 8004a4a:	7808      	ldrb	r0, [r1, #0]
 8004a4c:	7849      	ldrb	r1, [r1, #1]
 8004a4e:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8004a52:	b280      	uxth	r0, r0
 8004a54:	4770      	bx	lr

08004a56 <pletoh24>:
 8004a56:	b510      	push	{r4, lr}
 8004a58:	0004      	movs	r4, r0
 8004a5a:	0020      	movs	r0, r4
 8004a5c:	f7ff fff4 	bl	8004a48 <pletoh16>
 8004a60:	b280      	uxth	r0, r0
 8004a62:	78a1      	ldrb	r1, [r4, #2]
 8004a64:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 8004a68:	bd10      	pop	{r4, pc}

08004a6a <pletoh32>:
 8004a6a:	b538      	push	{r3, r4, r5, lr}
 8004a6c:	0004      	movs	r4, r0
 8004a6e:	0020      	movs	r0, r4
 8004a70:	f7ff ffea 	bl	8004a48 <pletoh16>
 8004a74:	0005      	movs	r5, r0
 8004a76:	b2ad      	uxth	r5, r5
 8004a78:	1ca0      	adds	r0, r4, #2
 8004a7a:	f7ff ffe5 	bl	8004a48 <pletoh16>
 8004a7e:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8004a82:	0028      	movs	r0, r5
 8004a84:	bd32      	pop	{r1, r4, r5, pc}

08004a86 <pletoh40>:
 8004a86:	b510      	push	{r4, lr}
 8004a88:	0004      	movs	r4, r0
 8004a8a:	0020      	movs	r0, r4
 8004a8c:	f7ff ffed 	bl	8004a6a <pletoh32>
 8004a90:	7921      	ldrb	r1, [r4, #4]
 8004a92:	bd10      	pop	{r4, pc}

08004a94 <pletoh48>:
 8004a94:	b510      	push	{r4, lr}
 8004a96:	0004      	movs	r4, r0
 8004a98:	0020      	movs	r0, r4
 8004a9a:	f7ff fff4 	bl	8004a86 <pletoh40>
 8004a9e:	7962      	ldrb	r2, [r4, #5]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	0213      	lsls	r3, r2, #8
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	4310      	orrs	r0, r2
 8004aa8:	4319      	orrs	r1, r3
 8004aaa:	bd10      	pop	{r4, pc}

08004aac <pletoh56>:
 8004aac:	b510      	push	{r4, lr}
 8004aae:	0004      	movs	r4, r0
 8004ab0:	0020      	movs	r0, r4
 8004ab2:	f7ff ffef 	bl	8004a94 <pletoh48>
 8004ab6:	79a2      	ldrb	r2, [r4, #6]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	0413      	lsls	r3, r2, #16
 8004abc:	2200      	movs	r2, #0
 8004abe:	4310      	orrs	r0, r2
 8004ac0:	4319      	orrs	r1, r3
 8004ac2:	bd10      	pop	{r4, pc}

08004ac4 <pletoh64>:
 8004ac4:	b538      	push	{r3, r4, r5, lr}
 8004ac6:	0005      	movs	r5, r0
 8004ac8:	0028      	movs	r0, r5
 8004aca:	f7ff ffce 	bl	8004a6a <pletoh32>
 8004ace:	0004      	movs	r4, r0
 8004ad0:	1d28      	adds	r0, r5, #4
 8004ad2:	f7ff ffca 	bl	8004a6a <pletoh32>
 8004ad6:	0003      	movs	r3, r0
 8004ad8:	0022      	movs	r2, r4
 8004ada:	0010      	movs	r0, r2
 8004adc:	0019      	movs	r1, r3
 8004ade:	bd34      	pop	{r2, r4, r5, pc}

08004ae0 <putle16>:
 8004ae0:	7001      	strb	r1, [r0, #0]
 8004ae2:	000a      	movs	r2, r1
 8004ae4:	b292      	uxth	r2, r2
 8004ae6:	0a12      	lsrs	r2, r2, #8
 8004ae8:	7042      	strb	r2, [r0, #1]
 8004aea:	4770      	bx	lr

08004aec <putle24>:
 8004aec:	b538      	push	{r3, r4, r5, lr}
 8004aee:	0004      	movs	r4, r0
 8004af0:	000d      	movs	r5, r1
 8004af2:	0029      	movs	r1, r5
 8004af4:	b289      	uxth	r1, r1
 8004af6:	0020      	movs	r0, r4
 8004af8:	f7ff fff2 	bl	8004ae0 <putle16>
 8004afc:	0028      	movs	r0, r5
 8004afe:	0c00      	lsrs	r0, r0, #16
 8004b00:	70a0      	strb	r0, [r4, #2]
 8004b02:	bd31      	pop	{r0, r4, r5, pc}

08004b04 <putle32>:
 8004b04:	b538      	push	{r3, r4, r5, lr}
 8004b06:	0004      	movs	r4, r0
 8004b08:	000d      	movs	r5, r1
 8004b0a:	0029      	movs	r1, r5
 8004b0c:	0020      	movs	r0, r4
 8004b0e:	f7ff ffed 	bl	8004aec <putle24>
 8004b12:	0028      	movs	r0, r5
 8004b14:	0e00      	lsrs	r0, r0, #24
 8004b16:	70e0      	strb	r0, [r4, #3]
 8004b18:	bd31      	pop	{r0, r4, r5, pc}

08004b1a <putle40>:
 8004b1a:	b570      	push	{r4, r5, r6, lr}
 8004b1c:	0006      	movs	r6, r0
 8004b1e:	0014      	movs	r4, r2
 8004b20:	001d      	movs	r5, r3
 8004b22:	0021      	movs	r1, r4
 8004b24:	0030      	movs	r0, r6
 8004b26:	f7ff ffed 	bl	8004b04 <putle32>
 8004b2a:	7135      	strb	r5, [r6, #4]
 8004b2c:	bd70      	pop	{r4, r5, r6, pc}

08004b2e <putle48>:
 8004b2e:	b570      	push	{r4, r5, r6, lr}
 8004b30:	0006      	movs	r6, r0
 8004b32:	0014      	movs	r4, r2
 8004b34:	001d      	movs	r5, r3
 8004b36:	0022      	movs	r2, r4
 8004b38:	002b      	movs	r3, r5
 8004b3a:	0030      	movs	r0, r6
 8004b3c:	f7ff ffed 	bl	8004b1a <putle40>
 8004b40:	0020      	movs	r0, r4
 8004b42:	0029      	movs	r1, r5
 8004b44:	0a08      	lsrs	r0, r1, #8
 8004b46:	2100      	movs	r1, #0
 8004b48:	7170      	strb	r0, [r6, #5]
 8004b4a:	bd70      	pop	{r4, r5, r6, pc}

08004b4c <putle56>:
 8004b4c:	b570      	push	{r4, r5, r6, lr}
 8004b4e:	0006      	movs	r6, r0
 8004b50:	0014      	movs	r4, r2
 8004b52:	001d      	movs	r5, r3
 8004b54:	0022      	movs	r2, r4
 8004b56:	002b      	movs	r3, r5
 8004b58:	0030      	movs	r0, r6
 8004b5a:	f7ff ffe8 	bl	8004b2e <putle48>
 8004b5e:	0020      	movs	r0, r4
 8004b60:	0029      	movs	r1, r5
 8004b62:	0c08      	lsrs	r0, r1, #16
 8004b64:	2100      	movs	r1, #0
 8004b66:	71b0      	strb	r0, [r6, #6]
 8004b68:	bd70      	pop	{r4, r5, r6, pc}

08004b6a <putle64>:
 8004b6a:	b570      	push	{r4, r5, r6, lr}
 8004b6c:	0006      	movs	r6, r0
 8004b6e:	0014      	movs	r4, r2
 8004b70:	001d      	movs	r5, r3
 8004b72:	0022      	movs	r2, r4
 8004b74:	002b      	movs	r3, r5
 8004b76:	0030      	movs	r0, r6
 8004b78:	f7ff ffe8 	bl	8004b4c <putle56>
 8004b7c:	0020      	movs	r0, r4
 8004b7e:	0029      	movs	r1, r5
 8004b80:	0e08      	lsrs	r0, r1, #24
 8004b82:	2100      	movs	r1, #0
 8004b84:	71f0      	strb	r0, [r6, #7]
 8004b86:	bd70      	pop	{r4, r5, r6, pc}

08004b88 <ZbZclAppendFloat>:
 8004b88:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b8c:	b081      	sub	sp, #4
 8004b8e:	ed2d 8b04 	vpush	{d8-d9}
 8004b92:	b084      	sub	sp, #16
 8004b94:	eeb0 8a40 	vmov.f32	s16, s0
 8004b98:	eef0 8a60 	vmov.f32	s17, s1
 8004b9c:	000e      	movs	r6, r1
 8004b9e:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004ba2:	2838      	cmp	r0, #56	@ 0x38
 8004ba4:	d149      	bne.n	8004c3a <??ZbZclAppendFloat_0>
 8004ba6:	2400      	movs	r4, #0
 8004ba8:	2510      	movs	r5, #16
 8004baa:	f07f 070e 	mvns.w	r7, #14
 8004bae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004bb0:	2802      	cmp	r0, #2
 8004bb2:	d202      	bcs.n	8004bba <??ZbZclAppendFloat_1>
 8004bb4:	f05f 30ff 	movs.w	r0, #4294967295
 8004bb8:	e120      	b.n	8004dfc <??ZbZclAppendFloat_2>

08004bba <??ZbZclAppendFloat_1>:
 8004bba:	003a      	movs	r2, r7
 8004bbc:	0029      	movs	r1, r5
 8004bbe:	4668      	mov	r0, sp
 8004bc0:	eeb0 0a48 	vmov.f32	s0, s16
 8004bc4:	eef0 0a68 	vmov.f32	s1, s17
 8004bc8:	f000 fb08 	bl	80051dc <ZbZclFloatFrexp>
 8004bcc:	eeb0 9a40 	vmov.f32	s18, s0
 8004bd0:	eef0 9a60 	vmov.f32	s19, s1
 8004bd4:	f8dd 8000 	ldr.w	r8, [sp]
 8004bd8:	ebb8 0807 	subs.w	r8, r8, r7
 8004bdc:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8004be0:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 8004be4:	ec51 0b19 	vmov	r0, r1, d9
 8004be8:	2200      	movs	r2, #0
 8004bea:	2300      	movs	r3, #0
 8004bec:	f001 fd18 	bl	8006620 <__aeabi_cdcmpeq>
 8004bf0:	d210      	bcs.n	8004c14 <??ZbZclAppendFloat_3>
 8004bf2:	ec51 0b19 	vmov	r0, r1, d9
 8004bf6:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004bfa:	f001 fd4b 	bl	8006694 <__aeabi_d2iz>
 8004bfe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c02:	fb10 f101 	smulbb	r1, r0, r1
 8004c06:	0589      	lsls	r1, r1, #22
 8004c08:	0d89      	lsrs	r1, r1, #22
 8004c0a:	ea58 0101 	orrs.w	r1, r8, r1
 8004c0e:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 8004c12:	e00b      	b.n	8004c2c <??ZbZclAppendFloat_4>

08004c14 <??ZbZclAppendFloat_3>:
 8004c14:	ec51 0b19 	vmov	r0, r1, d9
 8004c18:	f001 fd3c 	bl	8006694 <__aeabi_d2iz>
 8004c1c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c20:	fb10 f101 	smulbb	r1, r0, r1
 8004c24:	0589      	lsls	r1, r1, #22
 8004c26:	0d89      	lsrs	r1, r1, #22
 8004c28:	ea58 0101 	orrs.w	r1, r8, r1

08004c2c <??ZbZclAppendFloat_4>:
 8004c2c:	7031      	strb	r1, [r6, #0]
 8004c2e:	0008      	movs	r0, r1
 8004c30:	b280      	uxth	r0, r0
 8004c32:	0a00      	lsrs	r0, r0, #8
 8004c34:	7070      	strb	r0, [r6, #1]
 8004c36:	2002      	movs	r0, #2
 8004c38:	e0e0      	b.n	8004dfc <??ZbZclAppendFloat_2>

08004c3a <??ZbZclAppendFloat_0>:
 8004c3a:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004c3e:	2839      	cmp	r0, #57	@ 0x39
 8004c40:	d14e      	bne.n	8004ce0 <??ZbZclAppendFloat_5>
 8004c42:	2400      	movs	r4, #0
 8004c44:	2580      	movs	r5, #128	@ 0x80
 8004c46:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 8004c4a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004c4c:	2804      	cmp	r0, #4
 8004c4e:	d202      	bcs.n	8004c56 <??ZbZclAppendFloat_6>
 8004c50:	f05f 30ff 	movs.w	r0, #4294967295
 8004c54:	e0d2      	b.n	8004dfc <??ZbZclAppendFloat_2>

08004c56 <??ZbZclAppendFloat_6>:
 8004c56:	003a      	movs	r2, r7
 8004c58:	0029      	movs	r1, r5
 8004c5a:	4668      	mov	r0, sp
 8004c5c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c60:	eef0 0a68 	vmov.f32	s1, s17
 8004c64:	f000 faba 	bl	80051dc <ZbZclFloatFrexp>
 8004c68:	eeb0 9a40 	vmov.f32	s18, s0
 8004c6c:	eef0 9a60 	vmov.f32	s19, s1
 8004c70:	f8dd 8000 	ldr.w	r8, [sp]
 8004c74:	ebb8 0807 	subs.w	r8, r8, r7
 8004c78:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 8004c7c:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 8004c80:	ec51 0b19 	vmov	r0, r1, d9
 8004c84:	2200      	movs	r2, #0
 8004c86:	2300      	movs	r3, #0
 8004c88:	f001 fcca 	bl	8006620 <__aeabi_cdcmpeq>
 8004c8c:	d210      	bcs.n	8004cb0 <??ZbZclAppendFloat_7>
 8004c8e:	ec51 0b19 	vmov	r0, r1, d9
 8004c92:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004c96:	f001 fd25 	bl	80066e4 <__aeabi_d2uiz>
 8004c9a:	0001      	movs	r1, r0
 8004c9c:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8004ca0:	4341      	muls	r1, r0
 8004ca2:	0249      	lsls	r1, r1, #9
 8004ca4:	0a49      	lsrs	r1, r1, #9
 8004ca6:	ea58 0101 	orrs.w	r1, r8, r1
 8004caa:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 8004cae:	e00b      	b.n	8004cc8 <??ZbZclAppendFloat_8>

08004cb0 <??ZbZclAppendFloat_7>:
 8004cb0:	ec51 0b19 	vmov	r0, r1, d9
 8004cb4:	f001 fd16 	bl	80066e4 <__aeabi_d2uiz>
 8004cb8:	0001      	movs	r1, r0
 8004cba:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8004cbe:	4341      	muls	r1, r0
 8004cc0:	0249      	lsls	r1, r1, #9
 8004cc2:	0a49      	lsrs	r1, r1, #9
 8004cc4:	ea58 0101 	orrs.w	r1, r8, r1

08004cc8 <??ZbZclAppendFloat_8>:
 8004cc8:	7031      	strb	r1, [r6, #0]
 8004cca:	0008      	movs	r0, r1
 8004ccc:	0a00      	lsrs	r0, r0, #8
 8004cce:	7070      	strb	r0, [r6, #1]
 8004cd0:	0008      	movs	r0, r1
 8004cd2:	0c00      	lsrs	r0, r0, #16
 8004cd4:	70b0      	strb	r0, [r6, #2]
 8004cd6:	0008      	movs	r0, r1
 8004cd8:	0e00      	lsrs	r0, r0, #24
 8004cda:	70f0      	strb	r0, [r6, #3]
 8004cdc:	2004      	movs	r0, #4
 8004cde:	e08d      	b.n	8004dfc <??ZbZclAppendFloat_2>

08004ce0 <??ZbZclAppendFloat_5>:
 8004ce0:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004ce4:	283a      	cmp	r0, #58	@ 0x3a
 8004ce6:	f040 8087 	bne.w	8004df8 <??ZbZclAppendFloat_9>
 8004cea:	2400      	movs	r4, #0
 8004cec:	2500      	movs	r5, #0
 8004cee:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8004cf2:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8005438 <??DataTable3>
 8004cf6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004cf8:	2808      	cmp	r0, #8
 8004cfa:	d202      	bcs.n	8004d02 <??ZbZclAppendFloat_10>
 8004cfc:	f05f 30ff 	movs.w	r0, #4294967295
 8004d00:	e07c      	b.n	8004dfc <??ZbZclAppendFloat_2>

08004d02 <??ZbZclAppendFloat_10>:
 8004d02:	4642      	mov	r2, r8
 8004d04:	0039      	movs	r1, r7
 8004d06:	4668      	mov	r0, sp
 8004d08:	eeb0 0a48 	vmov.f32	s0, s16
 8004d0c:	eef0 0a68 	vmov.f32	s1, s17
 8004d10:	f000 fa64 	bl	80051dc <ZbZclFloatFrexp>
 8004d14:	eeb0 9a40 	vmov.f32	s18, s0
 8004d18:	eef0 9a60 	vmov.f32	s19, s1
 8004d1c:	9800      	ldr	r0, [sp, #0]
 8004d1e:	17c1      	asrs	r1, r0, #31
 8004d20:	ea5f 79e8 	movs.w	r9, r8, asr #31
 8004d24:	ebb0 0008 	subs.w	r0, r0, r8
 8004d28:	eb71 0109 	sbcs.w	r1, r1, r9
 8004d2c:	0501      	lsls	r1, r0, #20
 8004d2e:	2000      	movs	r0, #0
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 800543c <??DataTable3_1>
 8004d36:	4010      	ands	r0, r2
 8004d38:	4019      	ands	r1, r3
 8004d3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d3e:	ec51 0b19 	vmov	r0, r1, d9
 8004d42:	2200      	movs	r2, #0
 8004d44:	2300      	movs	r3, #0
 8004d46:	f001 fc6b 	bl	8006620 <__aeabi_cdcmpeq>
 8004d4a:	d21f      	bcs.n	8004d8c <??ZbZclAppendFloat_11>
 8004d4c:	ec51 0b19 	vmov	r0, r1, d9
 8004d50:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004d54:	f001 fd16 	bl	8006784 <__aeabi_d2ulz>
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 8004d5e:	fba2 ab00 	umull	sl, fp, r2, r0
 8004d62:	fb02 bb01 	mla	fp, r2, r1, fp
 8004d66:	fb03 bb00 	mla	fp, r3, r0, fp
 8004d6a:	f05f 30ff 	movs.w	r0, #4294967295
 8004d6e:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8005440 <??DataTable3_2>
 8004d72:	ea1a 0000 	ands.w	r0, sl, r0
 8004d76:	ea1b 0101 	ands.w	r1, fp, r1
 8004d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d7e:	4310      	orrs	r0, r2
 8004d80:	4319      	orrs	r1, r3
 8004d82:	f050 0200 	orrs.w	r2, r0, #0
 8004d86:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 8004d8a:	e018      	b.n	8004dbe <??ZbZclAppendFloat_12>

08004d8c <??ZbZclAppendFloat_11>:
 8004d8c:	ec51 0b19 	vmov	r0, r1, d9
 8004d90:	f001 fcf8 	bl	8006784 <__aeabi_d2ulz>
 8004d94:	2200      	movs	r2, #0
 8004d96:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 8004d9a:	fba2 ab00 	umull	sl, fp, r2, r0
 8004d9e:	fb02 bb01 	mla	fp, r2, r1, fp
 8004da2:	fb03 bb00 	mla	fp, r3, r0, fp
 8004da6:	f05f 30ff 	movs.w	r0, #4294967295
 8004daa:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8005440 <??DataTable3_2>
 8004dae:	ea1a 0000 	ands.w	r0, sl, r0
 8004db2:	ea1b 0101 	ands.w	r1, fp, r1
 8004db6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004dba:	4302      	orrs	r2, r0
 8004dbc:	430b      	orrs	r3, r1

08004dbe <??ZbZclAppendFloat_12>:
 8004dbe:	7032      	strb	r2, [r6, #0]
 8004dc0:	0010      	movs	r0, r2
 8004dc2:	b280      	uxth	r0, r0
 8004dc4:	0a00      	lsrs	r0, r0, #8
 8004dc6:	7070      	strb	r0, [r6, #1]
 8004dc8:	0010      	movs	r0, r2
 8004dca:	0c00      	lsrs	r0, r0, #16
 8004dcc:	70b0      	strb	r0, [r6, #2]
 8004dce:	0010      	movs	r0, r2
 8004dd0:	0e00      	lsrs	r0, r0, #24
 8004dd2:	70f0      	strb	r0, [r6, #3]
 8004dd4:	7133      	strb	r3, [r6, #4]
 8004dd6:	0010      	movs	r0, r2
 8004dd8:	0019      	movs	r1, r3
 8004dda:	0a08      	lsrs	r0, r1, #8
 8004ddc:	2100      	movs	r1, #0
 8004dde:	7170      	strb	r0, [r6, #5]
 8004de0:	0010      	movs	r0, r2
 8004de2:	0019      	movs	r1, r3
 8004de4:	0c08      	lsrs	r0, r1, #16
 8004de6:	2100      	movs	r1, #0
 8004de8:	71b0      	strb	r0, [r6, #6]
 8004dea:	0010      	movs	r0, r2
 8004dec:	0019      	movs	r1, r3
 8004dee:	0e08      	lsrs	r0, r1, #24
 8004df0:	2100      	movs	r1, #0
 8004df2:	71f0      	strb	r0, [r6, #7]
 8004df4:	2008      	movs	r0, #8
 8004df6:	e001      	b.n	8004dfc <??ZbZclAppendFloat_2>

08004df8 <??ZbZclAppendFloat_9>:
 8004df8:	f05f 30ff 	movs.w	r0, #4294967295

08004dfc <??ZbZclAppendFloat_2>:
 8004dfc:	b004      	add	sp, #16
 8004dfe:	ecbd 8b04 	vpop	{d8-d9}
 8004e02:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e06 <ZbZclParseFloat>:
 8004e06:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0a:	ed2d 8b02 	vpush	{d8}
 8004e0e:	000e      	movs	r6, r1
 8004e10:	4691      	mov	r9, r2
 8004e12:	2000      	movs	r0, #0
 8004e14:	f889 0000 	strb.w	r0, [r9]
 8004e18:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004e1c:	2838      	cmp	r0, #56	@ 0x38
 8004e1e:	d006      	beq.n	8004e2e <??ZbZclParseFloat_0>
 8004e20:	f0c0 8138 	bcc.w	8005094 <??ZbZclParseFloat_1>
 8004e24:	283a      	cmp	r0, #58	@ 0x3a
 8004e26:	f000 80ad 	beq.w	8004f84 <??ZbZclParseFloat_2>
 8004e2a:	d354      	bcc.n	8004ed6 <??ZbZclParseFloat_3>
 8004e2c:	e132      	b.n	8005094 <??ZbZclParseFloat_1>

08004e2e <??ZbZclParseFloat_0>:
 8004e2e:	0030      	movs	r0, r6
 8004e30:	f7ff fe0a 	bl	8004a48 <pletoh16>
 8004e34:	0004      	movs	r4, r0
 8004e36:	0020      	movs	r0, r4
 8004e38:	b280      	uxth	r0, r0
 8004e3a:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 8004e3e:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 8004e42:	d121      	bne.n	8004e88 <??ZbZclParseFloat_4>
 8004e44:	05a0      	lsls	r0, r4, #22
 8004e46:	d008      	beq.n	8004e5a <??ZbZclParseFloat_5>
 8004e48:	2000      	movs	r0, #0
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	2300      	movs	r3, #0
 8004e50:	f001 fab0 	bl	80063b4 <__aeabi_ddiv>
 8004e54:	ec41 0b10 	vmov	d0, r0, r1
 8004e58:	e127      	b.n	80050aa <??ZbZclParseFloat_6>

08004e5a <??ZbZclParseFloat_5>:
 8004e5a:	0420      	lsls	r0, r4, #16
 8004e5c:	d50a      	bpl.n	8004e74 <??ZbZclParseFloat_7>
 8004e5e:	2000      	movs	r0, #0
 8004e60:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 8005444 <??DataTable3_3>
 8004e64:	2200      	movs	r2, #0
 8004e66:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004e6a:	f001 faa3 	bl	80063b4 <__aeabi_ddiv>
 8004e6e:	ec41 0b10 	vmov	d0, r0, r1
 8004e72:	e008      	b.n	8004e86 <??ZbZclParseFloat_8>

08004e74 <??ZbZclParseFloat_7>:
 8004e74:	2000      	movs	r0, #0
 8004e76:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 8005444 <??DataTable3_3>
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f001 fa99 	bl	80063b4 <__aeabi_ddiv>
 8004e82:	ec41 0b10 	vmov	d0, r0, r1

08004e86 <??ZbZclParseFloat_8>:
 8004e86:	e110      	b.n	80050aa <??ZbZclParseFloat_6>

08004e88 <??ZbZclParseFloat_4>:
 8004e88:	f3c4 2884 	ubfx	r8, r4, #10, #5
 8004e8c:	4645      	mov	r5, r8
 8004e8e:	b2ad      	uxth	r5, r5
 8004e90:	3d0f      	subs	r5, #15
 8004e92:	3d0a      	subs	r5, #10
 8004e94:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 8004e98:	d004      	beq.n	8004ea4 <??ZbZclParseFloat_9>
 8004e9a:	05a7      	lsls	r7, r4, #22
 8004e9c:	0dbf      	lsrs	r7, r7, #22
 8004e9e:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 8004ea2:	e002      	b.n	8004eaa <??ZbZclParseFloat_10>

08004ea4 <??ZbZclParseFloat_9>:
 8004ea4:	1c6d      	adds	r5, r5, #1
 8004ea6:	05a7      	lsls	r7, r4, #22
 8004ea8:	0dbf      	lsrs	r7, r7, #22

08004eaa <??ZbZclParseFloat_10>:
 8004eaa:	0038      	movs	r0, r7
 8004eac:	b280      	uxth	r0, r0
 8004eae:	f001 f8dd 	bl	800606c <__aeabi_ui2d>
 8004eb2:	ec41 0b18 	vmov	d8, r0, r1
 8004eb6:	0420      	lsls	r0, r4, #16
 8004eb8:	d505      	bpl.n	8004ec6 <??ZbZclParseFloat_11>
 8004eba:	ec51 0b18 	vmov	r0, r1, d8
 8004ebe:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004ec2:	ec41 0b18 	vmov	d8, r0, r1

08004ec6 <??ZbZclParseFloat_11>:
 8004ec6:	0028      	movs	r0, r5
 8004ec8:	eeb0 0a48 	vmov.f32	s0, s16
 8004ecc:	eef0 0a68 	vmov.f32	s1, s17
 8004ed0:	f000 f8ef 	bl	80050b2 <ZbZclFloatLdexp>
 8004ed4:	e0e9      	b.n	80050aa <??ZbZclParseFloat_6>

08004ed6 <??ZbZclParseFloat_3>:
 8004ed6:	0030      	movs	r0, r6
 8004ed8:	f7ff fdc7 	bl	8004a6a <pletoh32>
 8004edc:	0004      	movs	r4, r0
 8004ede:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 8004ee2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8004ee6:	d121      	bne.n	8004f2c <??ZbZclParseFloat_12>
 8004ee8:	0260      	lsls	r0, r4, #9
 8004eea:	d008      	beq.n	8004efe <??ZbZclParseFloat_13>
 8004eec:	2000      	movs	r0, #0
 8004eee:	2100      	movs	r1, #0
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	f001 fa5e 	bl	80063b4 <__aeabi_ddiv>
 8004ef8:	ec41 0b10 	vmov	d0, r0, r1
 8004efc:	e0d5      	b.n	80050aa <??ZbZclParseFloat_6>

08004efe <??ZbZclParseFloat_13>:
 8004efe:	2c00      	cmp	r4, #0
 8004f00:	d50a      	bpl.n	8004f18 <??ZbZclParseFloat_14>
 8004f02:	2000      	movs	r0, #0
 8004f04:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 8005444 <??DataTable3_3>
 8004f08:	2200      	movs	r2, #0
 8004f0a:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004f0e:	f001 fa51 	bl	80063b4 <__aeabi_ddiv>
 8004f12:	ec41 0b10 	vmov	d0, r0, r1
 8004f16:	e008      	b.n	8004f2a <??ZbZclParseFloat_15>

08004f18 <??ZbZclParseFloat_14>:
 8004f18:	2000      	movs	r0, #0
 8004f1a:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 8005444 <??DataTable3_3>
 8004f1e:	2200      	movs	r2, #0
 8004f20:	2300      	movs	r3, #0
 8004f22:	f001 fa47 	bl	80063b4 <__aeabi_ddiv>
 8004f26:	ec41 0b10 	vmov	d0, r0, r1

08004f2a <??ZbZclParseFloat_15>:
 8004f2a:	e0be      	b.n	80050aa <??ZbZclParseFloat_6>

08004f2c <??ZbZclParseFloat_12>:
 8004f2c:	0025      	movs	r5, r4
 8004f2e:	0ded      	lsrs	r5, r5, #23
 8004f30:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 8004f34:	002f      	movs	r7, r5
 8004f36:	b2bf      	uxth	r7, r7
 8004f38:	3f7f      	subs	r7, #127	@ 0x7f
 8004f3a:	3f17      	subs	r7, #23
 8004f3c:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8004f40:	d006      	beq.n	8004f50 <??ZbZclParseFloat_16>
 8004f42:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8004f46:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8004f4a:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 8004f4e:	e004      	b.n	8004f5a <??ZbZclParseFloat_17>

08004f50 <??ZbZclParseFloat_16>:
 8004f50:	1c7f      	adds	r7, r7, #1
 8004f52:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8004f56:	ea5f 2858 	movs.w	r8, r8, lsr #9

08004f5a <??ZbZclParseFloat_17>:
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f001 f886 	bl	800606c <__aeabi_ui2d>
 8004f60:	ec41 0b18 	vmov	d8, r0, r1
 8004f64:	2c00      	cmp	r4, #0
 8004f66:	d505      	bpl.n	8004f74 <??ZbZclParseFloat_18>
 8004f68:	ec51 0b18 	vmov	r0, r1, d8
 8004f6c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004f70:	ec41 0b18 	vmov	d8, r0, r1

08004f74 <??ZbZclParseFloat_18>:
 8004f74:	0038      	movs	r0, r7
 8004f76:	eeb0 0a48 	vmov.f32	s0, s16
 8004f7a:	eef0 0a68 	vmov.f32	s1, s17
 8004f7e:	f000 f898 	bl	80050b2 <ZbZclFloatLdexp>
 8004f82:	e092      	b.n	80050aa <??ZbZclParseFloat_6>

08004f84 <??ZbZclParseFloat_2>:
 8004f84:	0030      	movs	r0, r6
 8004f86:	f7ff fd9d 	bl	8004ac4 <pletoh64>
 8004f8a:	0004      	movs	r4, r0
 8004f8c:	000d      	movs	r5, r1
 8004f8e:	2000      	movs	r0, #0
 8004f90:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 800543c <??DataTable3_1>
 8004f94:	ea14 0200 	ands.w	r2, r4, r0
 8004f98:	ea15 0301 	ands.w	r3, r5, r1
 8004f9c:	f05f 0a00 	movs.w	sl, #0
 8004fa0:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 800543c <??DataTable3_1>
 8004fa4:	455b      	cmp	r3, fp
 8004fa6:	d131      	bne.n	800500c <??ZbZclParseFloat_19>
 8004fa8:	4552      	cmp	r2, sl
 8004faa:	d12f      	bne.n	800500c <??ZbZclParseFloat_19>
 8004fac:	f05f 30ff 	movs.w	r0, #4294967295
 8004fb0:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8005440 <??DataTable3_2>
 8004fb4:	4020      	ands	r0, r4
 8004fb6:	4029      	ands	r1, r5
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d101      	bne.n	8004fc0 <??ZbZclParseFloat_20>
 8004fbc:	2800      	cmp	r0, #0
 8004fbe:	d008      	beq.n	8004fd2 <??ZbZclParseFloat_21>

08004fc0 <??ZbZclParseFloat_20>:
 8004fc0:	2000      	movs	r0, #0
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f001 f9f4 	bl	80063b4 <__aeabi_ddiv>
 8004fcc:	ec41 0b10 	vmov	d0, r0, r1
 8004fd0:	e06b      	b.n	80050aa <??ZbZclParseFloat_6>

08004fd2 <??ZbZclParseFloat_21>:
 8004fd2:	f014 0000 	ands.w	r0, r4, #0
 8004fd6:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8004fda:	2900      	cmp	r1, #0
 8004fdc:	d101      	bne.n	8004fe2 <??ZbZclParseFloat_22>
 8004fde:	2800      	cmp	r0, #0
 8004fe0:	d00a      	beq.n	8004ff8 <??ZbZclParseFloat_23>

08004fe2 <??ZbZclParseFloat_22>:
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 8005444 <??DataTable3_3>
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004fee:	f001 f9e1 	bl	80063b4 <__aeabi_ddiv>
 8004ff2:	ec41 0b10 	vmov	d0, r0, r1
 8004ff6:	e008      	b.n	800500a <??ZbZclParseFloat_24>

08004ff8 <??ZbZclParseFloat_23>:
 8004ff8:	2000      	movs	r0, #0
 8004ffa:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 8005444 <??DataTable3_3>
 8004ffe:	2200      	movs	r2, #0
 8005000:	2300      	movs	r3, #0
 8005002:	f001 f9d7 	bl	80063b4 <__aeabi_ddiv>
 8005006:	ec41 0b10 	vmov	d0, r0, r1

0800500a <??ZbZclParseFloat_24>:
 800500a:	e04e      	b.n	80050aa <??ZbZclParseFloat_6>

0800500c <??ZbZclParseFloat_19>:
 800500c:	0022      	movs	r2, r4
 800500e:	002b      	movs	r3, r5
 8005010:	0d1a      	lsrs	r2, r3, #20
 8005012:	2300      	movs	r3, #0
 8005014:	4690      	mov	r8, r2
 8005016:	ea5f 5848 	movs.w	r8, r8, lsl #21
 800501a:	ea5f 5858 	movs.w	r8, r8, lsr #21
 800501e:	4647      	mov	r7, r8
 8005020:	b2bf      	uxth	r7, r7
 8005022:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 8005026:	3f34      	subs	r7, #52	@ 0x34
 8005028:	4020      	ands	r0, r4
 800502a:	4029      	ands	r1, r5
 800502c:	2900      	cmp	r1, #0
 800502e:	d101      	bne.n	8005034 <??ZbZclParseFloat_25>
 8005030:	2800      	cmp	r0, #0
 8005032:	d00a      	beq.n	800504a <??ZbZclParseFloat_26>

08005034 <??ZbZclParseFloat_25>:
 8005034:	f05f 30ff 	movs.w	r0, #4294967295
 8005038:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8005440 <??DataTable3_2>
 800503c:	4020      	ands	r0, r4
 800503e:	4029      	ands	r1, r5
 8005040:	f110 0a00 	adds.w	sl, r0, #0
 8005044:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 8005048:	e008      	b.n	800505c <??ZbZclParseFloat_27>

0800504a <??ZbZclParseFloat_26>:
 800504a:	1c7f      	adds	r7, r7, #1
 800504c:	f05f 30ff 	movs.w	r0, #4294967295
 8005050:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8005440 <??DataTable3_2>
 8005054:	ea14 0a00 	ands.w	sl, r4, r0
 8005058:	ea15 0b01 	ands.w	fp, r5, r1

0800505c <??ZbZclParseFloat_27>:
 800505c:	4650      	mov	r0, sl
 800505e:	4659      	mov	r1, fp
 8005060:	f001 f848 	bl	80060f4 <__aeabi_ul2d>
 8005064:	ec41 0b18 	vmov	d8, r0, r1
 8005068:	f014 0000 	ands.w	r0, r4, #0
 800506c:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8005070:	2900      	cmp	r1, #0
 8005072:	d101      	bne.n	8005078 <??ZbZclParseFloat_28>
 8005074:	2800      	cmp	r0, #0
 8005076:	d005      	beq.n	8005084 <??ZbZclParseFloat_29>

08005078 <??ZbZclParseFloat_28>:
 8005078:	ec51 0b18 	vmov	r0, r1, d8
 800507c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005080:	ec41 0b18 	vmov	d8, r0, r1

08005084 <??ZbZclParseFloat_29>:
 8005084:	0038      	movs	r0, r7
 8005086:	eeb0 0a48 	vmov.f32	s0, s16
 800508a:	eef0 0a68 	vmov.f32	s1, s17
 800508e:	f000 f810 	bl	80050b2 <ZbZclFloatLdexp>
 8005092:	e00a      	b.n	80050aa <??ZbZclParseFloat_6>

08005094 <??ZbZclParseFloat_1>:
 8005094:	208d      	movs	r0, #141	@ 0x8d
 8005096:	f889 0000 	strb.w	r0, [r9]
 800509a:	2000      	movs	r0, #0
 800509c:	2100      	movs	r1, #0
 800509e:	2200      	movs	r2, #0
 80050a0:	2300      	movs	r3, #0
 80050a2:	f001 f987 	bl	80063b4 <__aeabi_ddiv>
 80050a6:	ec41 0b10 	vmov	d0, r0, r1

080050aa <??ZbZclParseFloat_6>:
 80050aa:	ecbd 8b02 	vpop	{d8}
 80050ae:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080050b2 <ZbZclFloatLdexp>:
 80050b2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050b6:	ed2d 8b04 	vpush	{d8-d9}
 80050ba:	b084      	sub	sp, #16
 80050bc:	eeb0 8a40 	vmov.f32	s16, s0
 80050c0:	eef0 8a60 	vmov.f32	s17, s1
 80050c4:	0006      	movs	r6, r0
 80050c6:	2730      	movs	r7, #48	@ 0x30
 80050c8:	ec53 2b18 	vmov	r2, r3, d8
 80050cc:	ec51 0b18 	vmov	r0, r1, d8
 80050d0:	f001 faa6 	bl	8006620 <__aeabi_cdcmpeq>
 80050d4:	d10c      	bne.n	80050f0 <??ZbZclFloatLdexp_0>
 80050d6:	ec53 2b18 	vmov	r2, r3, d8
 80050da:	ec51 0b18 	vmov	r0, r1, d8
 80050de:	f000 fe89 	bl	8005df4 <__adddf3>
 80050e2:	0002      	movs	r2, r0
 80050e4:	000b      	movs	r3, r1
 80050e6:	ec51 0b18 	vmov	r0, r1, d8
 80050ea:	f001 fa99 	bl	8006620 <__aeabi_cdcmpeq>
 80050ee:	d104      	bne.n	80050fa <??ZbZclFloatLdexp_1>

080050f0 <??ZbZclFloatLdexp_0>:
 80050f0:	eeb0 0a48 	vmov.f32	s0, s16
 80050f4:	eef0 0a68 	vmov.f32	s1, s17
 80050f8:	e06b      	b.n	80051d2 <??ZbZclFloatLdexp_2>

080050fa <??ZbZclFloatLdexp_1>:
 80050fa:	2e01      	cmp	r6, #1
 80050fc:	db2c      	blt.n	8005158 <??ZbZclFloatLdexp_3>
 80050fe:	2401      	movs	r4, #1
 8005100:	2500      	movs	r5, #0
 8005102:	0020      	movs	r0, r4
 8005104:	0029      	movs	r1, r5
 8005106:	003a      	movs	r2, r7
 8005108:	f000 fe62 	bl	8005dd0 <__aeabi_llsl>
 800510c:	4680      	mov	r8, r0
 800510e:	4689      	mov	r9, r1
 8005110:	4640      	mov	r0, r8
 8005112:	4649      	mov	r1, r9
 8005114:	f000 ffee 	bl	80060f4 <__aeabi_ul2d>
 8005118:	ec41 0b19 	vmov	d9, r0, r1

0800511c <??ZbZclFloatLdexp_4>:
 800511c:	42be      	cmp	r6, r7
 800511e:	db09      	blt.n	8005134 <??ZbZclFloatLdexp_5>
 8005120:	ec51 0b18 	vmov	r0, r1, d8
 8005124:	ec53 2b19 	vmov	r2, r3, d9
 8005128:	f001 f81a 	bl	8006160 <__aeabi_dmul>
 800512c:	ec41 0b18 	vmov	d8, r0, r1
 8005130:	1bf6      	subs	r6, r6, r7
 8005132:	e7f3      	b.n	800511c <??ZbZclFloatLdexp_4>

08005134 <??ZbZclFloatLdexp_5>:
 8005134:	0020      	movs	r0, r4
 8005136:	0029      	movs	r1, r5
 8005138:	0032      	movs	r2, r6
 800513a:	f000 fe49 	bl	8005dd0 <__aeabi_llsl>
 800513e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005146:	f000 ffd5 	bl	80060f4 <__aeabi_ul2d>
 800514a:	ec53 2b18 	vmov	r2, r3, d8
 800514e:	f001 f807 	bl	8006160 <__aeabi_dmul>
 8005152:	ec41 0b18 	vmov	d8, r0, r1
 8005156:	e038      	b.n	80051ca <??ZbZclFloatLdexp_6>

08005158 <??ZbZclFloatLdexp_3>:
 8005158:	2e00      	cmp	r6, #0
 800515a:	d536      	bpl.n	80051ca <??ZbZclFloatLdexp_6>
 800515c:	2401      	movs	r4, #1
 800515e:	2500      	movs	r5, #0
 8005160:	0020      	movs	r0, r4
 8005162:	0029      	movs	r1, r5
 8005164:	003a      	movs	r2, r7
 8005166:	f000 fe33 	bl	8005dd0 <__aeabi_llsl>
 800516a:	4682      	mov	sl, r0
 800516c:	468b      	mov	fp, r1
 800516e:	4650      	mov	r0, sl
 8005170:	4659      	mov	r1, fp
 8005172:	f000 ffbf 	bl	80060f4 <__aeabi_ul2d>
 8005176:	0002      	movs	r2, r0
 8005178:	000b      	movs	r3, r1
 800517a:	2000      	movs	r0, #0
 800517c:	49b1      	ldr	r1, [pc, #708]	@ (8005444 <??DataTable3_3>)
 800517e:	f001 f919 	bl	80063b4 <__aeabi_ddiv>
 8005182:	ec41 0b19 	vmov	d9, r0, r1
 8005186:	f1d6 0800 	rsbs	r8, r6, #0

0800518a <??ZbZclFloatLdexp_7>:
 800518a:	45b8      	cmp	r8, r7
 800518c:	db0a      	blt.n	80051a4 <??ZbZclFloatLdexp_8>
 800518e:	ec53 2b18 	vmov	r2, r3, d8
 8005192:	ec51 0b19 	vmov	r0, r1, d9
 8005196:	f000 ffe3 	bl	8006160 <__aeabi_dmul>
 800519a:	ec41 0b18 	vmov	d8, r0, r1
 800519e:	ebb8 0807 	subs.w	r8, r8, r7
 80051a2:	e7f2      	b.n	800518a <??ZbZclFloatLdexp_7>

080051a4 <??ZbZclFloatLdexp_8>:
 80051a4:	0020      	movs	r0, r4
 80051a6:	0029      	movs	r1, r5
 80051a8:	4642      	mov	r2, r8
 80051aa:	f000 fe11 	bl	8005dd0 <__aeabi_llsl>
 80051ae:	e9cd 0100 	strd	r0, r1, [sp]
 80051b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051b6:	f000 ff9d 	bl	80060f4 <__aeabi_ul2d>
 80051ba:	0002      	movs	r2, r0
 80051bc:	000b      	movs	r3, r1
 80051be:	ec51 0b18 	vmov	r0, r1, d8
 80051c2:	f001 f8f7 	bl	80063b4 <__aeabi_ddiv>
 80051c6:	ec41 0b18 	vmov	d8, r0, r1

080051ca <??ZbZclFloatLdexp_6>:
 80051ca:	eeb0 0a48 	vmov.f32	s0, s16
 80051ce:	eef0 0a68 	vmov.f32	s1, s17

080051d2 <??ZbZclFloatLdexp_2>:
 80051d2:	b004      	add	sp, #16
 80051d4:	ecbd 8b04 	vpop	{d8-d9}
 80051d8:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051dc <ZbZclFloatFrexp>:
 80051dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051e0:	ed2d 8b06 	vpush	{d8-d10}
 80051e4:	b086      	sub	sp, #24
 80051e6:	eeb0 8a40 	vmov.f32	s16, s0
 80051ea:	eef0 8a60 	vmov.f32	s17, s1
 80051ee:	4682      	mov	sl, r0
 80051f0:	000e      	movs	r6, r1
 80051f2:	4693      	mov	fp, r2
 80051f4:	2730      	movs	r7, #48	@ 0x30
 80051f6:	f05f 0800 	movs.w	r8, #0
 80051fa:	f05f 0901 	movs.w	r9, #1
 80051fe:	eeb0 9a48 	vmov.f32	s18, s16
 8005202:	eef0 9a68 	vmov.f32	s19, s17
 8005206:	ec51 0b18 	vmov	r0, r1, d8
 800520a:	2200      	movs	r2, #0
 800520c:	2300      	movs	r3, #0
 800520e:	f001 fa07 	bl	8006620 <__aeabi_cdcmpeq>
 8005212:	d208      	bcs.n	8005226 <??ZbZclFloatFrexp_0>
 8005214:	f05f 30ff 	movs.w	r0, #4294967295
 8005218:	4681      	mov	r9, r0
 800521a:	ec51 0b19 	vmov	r0, r1, d9
 800521e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005222:	ec41 0b19 	vmov	d9, r0, r1

08005226 <??ZbZclFloatFrexp_0>:
 8005226:	ec53 2b19 	vmov	r2, r3, d9
 800522a:	ec51 0b19 	vmov	r0, r1, d9
 800522e:	f001 f9f7 	bl	8006620 <__aeabi_cdcmpeq>
 8005232:	d00b      	beq.n	800524c <??ZbZclFloatFrexp_1>
 8005234:	f8ca 6000 	str.w	r6, [sl]
 8005238:	4648      	mov	r0, r9
 800523a:	f000 ff27 	bl	800608c <__aeabi_i2d>
 800523e:	2200      	movs	r2, #0
 8005240:	4b81      	ldr	r3, [pc, #516]	@ (8005448 <??DataTable3_4>)
 8005242:	f000 ff8d 	bl	8006160 <__aeabi_dmul>
 8005246:	ec41 0b10 	vmov	d0, r0, r1
 800524a:	e0ef      	b.n	800542c <??ZbZclFloatFrexp_2>

0800524c <??ZbZclFloatFrexp_1>:
 800524c:	2000      	movs	r0, #0
 800524e:	497d      	ldr	r1, [pc, #500]	@ (8005444 <??DataTable3_3>)
 8005250:	2200      	movs	r2, #0
 8005252:	2300      	movs	r3, #0
 8005254:	f001 f8ae 	bl	80063b4 <__aeabi_ddiv>
 8005258:	ec53 2b19 	vmov	r2, r3, d9
 800525c:	f001 f9e0 	bl	8006620 <__aeabi_cdcmpeq>
 8005260:	d00b      	beq.n	800527a <??ZbZclFloatFrexp_3>
 8005262:	2000      	movs	r0, #0
 8005264:	4977      	ldr	r1, [pc, #476]	@ (8005444 <??DataTable3_3>)
 8005266:	2200      	movs	r2, #0
 8005268:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 800526c:	f001 f8a2 	bl	80063b4 <__aeabi_ddiv>
 8005270:	ec53 2b19 	vmov	r2, r3, d9
 8005274:	f001 f9d4 	bl	8006620 <__aeabi_cdcmpeq>
 8005278:	d107      	bne.n	800528a <??ZbZclFloatFrexp_4>

0800527a <??ZbZclFloatFrexp_3>:
 800527a:	f8ca 6000 	str.w	r6, [sl]
 800527e:	4648      	mov	r0, r9
 8005280:	f000 ff04 	bl	800608c <__aeabi_i2d>
 8005284:	ec41 0b10 	vmov	d0, r0, r1
 8005288:	e0d0      	b.n	800542c <??ZbZclFloatFrexp_2>

0800528a <??ZbZclFloatFrexp_4>:
 800528a:	ec53 2b19 	vmov	r2, r3, d9
 800528e:	ec51 0b19 	vmov	r0, r1, d9
 8005292:	f000 fdaf 	bl	8005df4 <__adddf3>
 8005296:	ec53 2b19 	vmov	r2, r3, d9
 800529a:	f001 f9c1 	bl	8006620 <__aeabi_cdcmpeq>
 800529e:	d10b      	bne.n	80052b8 <??ZbZclFloatFrexp_5>
 80052a0:	f8ca b000 	str.w	fp, [sl]
 80052a4:	4648      	mov	r0, r9
 80052a6:	f000 fef1 	bl	800608c <__aeabi_i2d>
 80052aa:	2200      	movs	r2, #0
 80052ac:	2300      	movs	r3, #0
 80052ae:	f000 ff57 	bl	8006160 <__aeabi_dmul>
 80052b2:	ec41 0b10 	vmov	d0, r0, r1
 80052b6:	e0b9      	b.n	800542c <??ZbZclFloatFrexp_2>

080052b8 <??ZbZclFloatFrexp_5>:
 80052b8:	ec51 0b19 	vmov	r0, r1, d9
 80052bc:	2200      	movs	r2, #0
 80052be:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 80052c2:	f001 f9a5 	bl	8006610 <__aeabi_cdrcmple>
 80052c6:	d854      	bhi.n	8005372 <??ZbZclFloatFrexp_6>
 80052c8:	2001      	movs	r0, #1
 80052ca:	2100      	movs	r1, #0
 80052cc:	003a      	movs	r2, r7
 80052ce:	f000 fd7f 	bl	8005dd0 <__aeabi_llsl>
 80052d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052da:	f000 ff0b 	bl	80060f4 <__aeabi_ul2d>
 80052de:	0002      	movs	r2, r0
 80052e0:	000b      	movs	r3, r1
 80052e2:	2000      	movs	r0, #0
 80052e4:	4957      	ldr	r1, [pc, #348]	@ (8005444 <??DataTable3_3>)
 80052e6:	f001 f865 	bl	80063b4 <__aeabi_ddiv>
 80052ea:	ec41 0b1a 	vmov	d10, r0, r1
 80052ee:	2002      	movs	r0, #2
 80052f0:	2100      	movs	r1, #0
 80052f2:	003a      	movs	r2, r7
 80052f4:	f000 fd6c 	bl	8005dd0 <__aeabi_llsl>
 80052f8:	e9cd 0100 	strd	r0, r1, [sp]

080052fc <??ZbZclFloatFrexp_7>:
 80052fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005300:	f000 fef8 	bl	80060f4 <__aeabi_ul2d>
 8005304:	0002      	movs	r2, r0
 8005306:	000b      	movs	r3, r1
 8005308:	ec51 0b19 	vmov	r0, r1, d9
 800530c:	f001 f980 	bl	8006610 <__aeabi_cdrcmple>
 8005310:	d813      	bhi.n	800533a <??ZbZclFloatFrexp_8>
 8005312:	ec53 2b19 	vmov	r2, r3, d9
 8005316:	ec51 0b1a 	vmov	r0, r1, d10
 800531a:	f000 ff21 	bl	8006160 <__aeabi_dmul>
 800531e:	ec41 0b19 	vmov	d9, r0, r1
 8005322:	eb17 0808 	adds.w	r8, r7, r8
 8005326:	45b0      	cmp	r8, r6
 8005328:	dbe8      	blt.n	80052fc <??ZbZclFloatFrexp_7>
 800532a:	f8ca 6000 	str.w	r6, [sl]
 800532e:	4648      	mov	r0, r9
 8005330:	f000 feac 	bl	800608c <__aeabi_i2d>
 8005334:	ec41 0b10 	vmov	d0, r0, r1
 8005338:	e078      	b.n	800542c <??ZbZclFloatFrexp_2>

0800533a <??ZbZclFloatFrexp_8>:
 800533a:	ec51 0b19 	vmov	r0, r1, d9
 800533e:	2200      	movs	r2, #0
 8005340:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 8005344:	f001 f964 	bl	8006610 <__aeabi_cdrcmple>
 8005348:	d865      	bhi.n	8005416 <??ZbZclFloatFrexp_9>
 800534a:	ec53 2b19 	vmov	r2, r3, d9
 800534e:	2000      	movs	r0, #0
 8005350:	493e      	ldr	r1, [pc, #248]	@ (800544c <??DataTable3_5>)
 8005352:	f000 ff05 	bl	8006160 <__aeabi_dmul>
 8005356:	ec41 0b19 	vmov	d9, r0, r1
 800535a:	f118 0801 	adds.w	r8, r8, #1
 800535e:	45b0      	cmp	r8, r6
 8005360:	dbeb      	blt.n	800533a <??ZbZclFloatFrexp_8>
 8005362:	f8ca 6000 	str.w	r6, [sl]
 8005366:	4648      	mov	r0, r9
 8005368:	f000 fe90 	bl	800608c <__aeabi_i2d>
 800536c:	ec41 0b10 	vmov	d0, r0, r1
 8005370:	e05c      	b.n	800542c <??ZbZclFloatFrexp_2>

08005372 <??ZbZclFloatFrexp_6>:
 8005372:	ec51 0b19 	vmov	r0, r1, d9
 8005376:	2200      	movs	r2, #0
 8005378:	4b32      	ldr	r3, [pc, #200]	@ (8005444 <??DataTable3_3>)
 800537a:	f001 f951 	bl	8006620 <__aeabi_cdcmpeq>
 800537e:	d24a      	bcs.n	8005416 <??ZbZclFloatFrexp_9>
 8005380:	2401      	movs	r4, #1
 8005382:	2500      	movs	r5, #0
 8005384:	0020      	movs	r0, r4
 8005386:	0029      	movs	r1, r5
 8005388:	003a      	movs	r2, r7
 800538a:	f000 fd21 	bl	8005dd0 <__aeabi_llsl>
 800538e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005392:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005396:	f000 fead 	bl	80060f4 <__aeabi_ul2d>
 800539a:	ec41 0b1a 	vmov	d10, r0, r1
 800539e:	0020      	movs	r0, r4
 80053a0:	0029      	movs	r1, r5
 80053a2:	003a      	movs	r2, r7
 80053a4:	f000 fd14 	bl	8005dd0 <__aeabi_llsl>
 80053a8:	e9cd 0100 	strd	r0, r1, [sp]

080053ac <??ZbZclFloatFrexp_10>:
 80053ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80053b0:	f000 fea0 	bl	80060f4 <__aeabi_ul2d>
 80053b4:	0002      	movs	r2, r0
 80053b6:	000b      	movs	r3, r1
 80053b8:	2000      	movs	r0, #0
 80053ba:	4922      	ldr	r1, [pc, #136]	@ (8005444 <??DataTable3_3>)
 80053bc:	f000 fffa 	bl	80063b4 <__aeabi_ddiv>
 80053c0:	0002      	movs	r2, r0
 80053c2:	000b      	movs	r3, r1
 80053c4:	ec51 0b18 	vmov	r0, r1, d8
 80053c8:	f001 f92a 	bl	8006620 <__aeabi_cdcmpeq>
 80053cc:	d20e      	bcs.n	80053ec <??ZbZclFloatFrexp_11>
 80053ce:	ebb8 0007 	subs.w	r0, r8, r7
 80053d2:	4583      	cmp	fp, r0
 80053d4:	da0a      	bge.n	80053ec <??ZbZclFloatFrexp_11>

080053d6 <??ZbZclFloatFrexp_12>:
 80053d6:	ec53 2b19 	vmov	r2, r3, d9
 80053da:	ec51 0b1a 	vmov	r0, r1, d10
 80053de:	f000 febf 	bl	8006160 <__aeabi_dmul>
 80053e2:	ec41 0b19 	vmov	d9, r0, r1
 80053e6:	ebb8 0807 	subs.w	r8, r8, r7
 80053ea:	e7df      	b.n	80053ac <??ZbZclFloatFrexp_10>

080053ec <??ZbZclFloatFrexp_11>:
 80053ec:	ec51 0b19 	vmov	r0, r1, d9
 80053f0:	2200      	movs	r2, #0
 80053f2:	4b14      	ldr	r3, [pc, #80]	@ (8005444 <??DataTable3_3>)
 80053f4:	f001 f914 	bl	8006620 <__aeabi_cdcmpeq>
 80053f8:	d20d      	bcs.n	8005416 <??ZbZclFloatFrexp_9>
 80053fa:	f1b8 0801 	subs.w	r8, r8, #1
 80053fe:	45d8      	cmp	r8, fp
 8005400:	d009      	beq.n	8005416 <??ZbZclFloatFrexp_9>

08005402 <??ZbZclFloatFrexp_13>:
 8005402:	ec53 2b19 	vmov	r2, r3, d9
 8005406:	2000      	movs	r0, #0
 8005408:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 800540c:	f000 fea8 	bl	8006160 <__aeabi_dmul>
 8005410:	ec41 0b19 	vmov	d9, r0, r1
 8005414:	e7ea      	b.n	80053ec <??ZbZclFloatFrexp_11>

08005416 <??ZbZclFloatFrexp_9>:
 8005416:	f8ca 8000 	str.w	r8, [sl]
 800541a:	4648      	mov	r0, r9
 800541c:	f000 fe36 	bl	800608c <__aeabi_i2d>
 8005420:	ec53 2b19 	vmov	r2, r3, d9
 8005424:	f000 fe9c 	bl	8006160 <__aeabi_dmul>
 8005428:	ec41 0b10 	vmov	d0, r0, r1

0800542c <??ZbZclFloatFrexp_2>:
 800542c:	b006      	add	sp, #24
 800542e:	ecbd 8b06 	vpop	{d8-d10}
 8005432:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005438 <??DataTable3>:
 8005438:	fc01 ffff                                   ....

0800543c <??DataTable3_1>:
 800543c:	0000 7ff0                                   ....

08005440 <??DataTable3_2>:
 8005440:	ffff 000f                                   ....

08005444 <??DataTable3_3>:
 8005444:	0000 3ff0                                   ...?

08005448 <??DataTable3_4>:
 8005448:	0000 3ff8                                   ...?

0800544c <??DataTable3_5>:
 800544c:	0000 3fe0                                   ...?

08005450 <ZbZclAttrIsFloat>:
 8005450:	0001      	movs	r1, r0
 8005452:	0008      	movs	r0, r1
 8005454:	b2c0      	uxtb	r0, r0
 8005456:	2838      	cmp	r0, #56	@ 0x38
 8005458:	db05      	blt.n	8005466 <??ZbZclAttrIsFloat_0>
 800545a:	0008      	movs	r0, r1
 800545c:	b2c0      	uxtb	r0, r0
 800545e:	283b      	cmp	r0, #59	@ 0x3b
 8005460:	da01      	bge.n	8005466 <??ZbZclAttrIsFloat_0>
 8005462:	2001      	movs	r0, #1
 8005464:	e000      	b.n	8005468 <??ZbZclAttrIsFloat_1>

08005466 <??ZbZclAttrIsFloat_0>:
 8005466:	2000      	movs	r0, #0

08005468 <??ZbZclAttrIsFloat_1>:
 8005468:	4770      	bx	lr
	...

0800546c <zcl_cluster_command_dummy>:
 800546c:	0003      	movs	r3, r0
 800546e:	20ff      	movs	r0, #255	@ 0xff
 8005470:	4770      	bx	lr

08005472 <ZbZclClusterAlloc>:
 8005472:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005476:	0006      	movs	r6, r0
 8005478:	000f      	movs	r7, r1
 800547a:	4698      	mov	r8, r3
 800547c:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800547e:	2f6c      	cmp	r7, #108	@ 0x6c
 8005480:	d201      	bcs.n	8005486 <??ZbZclClusterAlloc_0>
 8005482:	2000      	movs	r0, #0
 8005484:	e083      	b.n	800558e <??ZbZclClusterAlloc_1>

08005486 <??ZbZclClusterAlloc_0>:
 8005486:	f20f 2914 	addw	r9, pc, #532	@ 0x214
 800548a:	2300      	movs	r3, #0
 800548c:	464a      	mov	r2, r9
 800548e:	0039      	movs	r1, r7
 8005490:	0030      	movs	r0, r6
 8005492:	f00f f8cb 	bl	801462c <zb_heap_alloc>
 8005496:	0004      	movs	r4, r0
 8005498:	2c00      	cmp	r4, #0
 800549a:	d101      	bne.n	80054a0 <??ZbZclClusterAlloc_2>
 800549c:	2000      	movs	r0, #0
 800549e:	e076      	b.n	800558e <??ZbZclClusterAlloc_1>

080054a0 <??ZbZclClusterAlloc_2>:
 80054a0:	9701      	str	r7, [sp, #4]
 80054a2:	f05f 0a00 	movs.w	sl, #0
 80054a6:	46a3      	mov	fp, r4
 80054a8:	4652      	mov	r2, sl
 80054aa:	9901      	ldr	r1, [sp, #4]
 80054ac:	4658      	mov	r0, fp
 80054ae:	f000 fbed 	bl	8005c8c <__aeabi_memset>
 80054b2:	6024      	str	r4, [r4, #0]
 80054b4:	6064      	str	r4, [r4, #4]
 80054b6:	60a6      	str	r6, [r4, #8]
 80054b8:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 80054bc:	81a0      	strh	r0, [r4, #12]
 80054be:	f884 800e 	strb.w	r8, [r4, #14]
 80054c2:	2000      	movs	r0, #0
 80054c4:	8220      	strh	r0, [r4, #16]
 80054c6:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80054ca:	82a0      	strh	r0, [r4, #20]
 80054cc:	200f      	movs	r0, #15
 80054ce:	82e0      	strh	r0, [r4, #22]
 80054d0:	2001      	movs	r0, #1
 80054d2:	7620      	strb	r0, [r4, #24]
 80054d4:	2000      	movs	r0, #0
 80054d6:	7660      	strb	r0, [r4, #25]
 80054d8:	2039      	movs	r0, #57	@ 0x39
 80054da:	8360      	strh	r0, [r4, #26]
 80054dc:	7725      	strb	r5, [r4, #28]
 80054de:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 80054e2:	6260      	str	r0, [r4, #36]	@ 0x24
 80054e4:	f114 0024 	adds.w	r0, r4, #36	@ 0x24
 80054e8:	62a0      	str	r0, [r4, #40]	@ 0x28
 80054ea:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 80054ee:	6320      	str	r0, [r4, #48]	@ 0x30
 80054f0:	f114 0030 	adds.w	r0, r4, #48	@ 0x30
 80054f4:	6360      	str	r0, [r4, #52]	@ 0x34
 80054f6:	9400      	str	r4, [sp, #0]
 80054f8:	f8df 33d4 	ldr.w	r3, [pc, #980]	@ 80058d0 <??DataTable5_1>
 80054fc:	2281      	movs	r2, #129	@ 0x81
 80054fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005502:	0030      	movs	r0, r6
 8005504:	f00e fbc0 	bl	8013c88 <ZbMsgFilterRegister>
 8005508:	62e0      	str	r0, [r4, #44]	@ 0x2c
 800550a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800550c:	2800      	cmp	r0, #0
 800550e:	d104      	bne.n	800551a <??ZbZclClusterAlloc_3>
 8005510:	0020      	movs	r0, r4
 8005512:	f000 f870 	bl	80055f6 <ZbZclClusterFree>
 8005516:	2000      	movs	r0, #0
 8005518:	e039      	b.n	800558e <??ZbZclClusterAlloc_1>

0800551a <??ZbZclClusterAlloc_3>:
 800551a:	0022      	movs	r2, r4
 800551c:	f8df 13b4 	ldr.w	r1, [pc, #948]	@ 80058d4 <??DataTable5_2>
 8005520:	0030      	movs	r0, r6
 8005522:	f00e fc6d 	bl	8013e00 <ZbTimerAlloc>
 8005526:	63a0      	str	r0, [r4, #56]	@ 0x38
 8005528:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 800552a:	2800      	cmp	r0, #0
 800552c:	d104      	bne.n	8005538 <??ZbZclClusterAlloc_4>
 800552e:	0020      	movs	r0, r4
 8005530:	f000 f861 	bl	80055f6 <ZbZclClusterFree>
 8005534:	2000      	movs	r0, #0
 8005536:	e02a      	b.n	800558e <??ZbZclClusterAlloc_1>

08005538 <??ZbZclClusterAlloc_4>:
 8005538:	0022      	movs	r2, r4
 800553a:	f20f 1125 	addw	r1, pc, #293	@ 0x125
 800553e:	0030      	movs	r0, r6
 8005540:	f00e fc5e 	bl	8013e00 <ZbTimerAlloc>
 8005544:	6520      	str	r0, [r4, #80]	@ 0x50
 8005546:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8005548:	2800      	cmp	r0, #0
 800554a:	d104      	bne.n	8005556 <??ZbZclClusterAlloc_5>
 800554c:	0020      	movs	r0, r4
 800554e:	f000 f852 	bl	80055f6 <ZbZclClusterFree>
 8005552:	2000      	movs	r0, #0
 8005554:	e01b      	b.n	800558e <??ZbZclClusterAlloc_1>

08005556 <??ZbZclClusterAlloc_5>:
 8005556:	21ac      	movs	r1, #172	@ 0xac
 8005558:	0020      	movs	r0, r4
 800555a:	f7fe fa6c 	bl	8003a36 <ZbZclClusterSetMinSecurity>
 800555e:	2201      	movs	r2, #1
 8005560:	f8df 1374 	ldr.w	r1, [pc, #884]	@ 80058d8 <??DataTable5_3>
 8005564:	0020      	movs	r0, r4
 8005566:	f7fc fb93 	bl	8001c90 <ZbZclAttrAppendList>
 800556a:	2800      	cmp	r0, #0
 800556c:	d007      	beq.n	800557e <??ZbZclClusterAlloc_6>
 800556e:	2300      	movs	r3, #0
 8005570:	464a      	mov	r2, r9
 8005572:	0021      	movs	r1, r4
 8005574:	0030      	movs	r0, r6
 8005576:	f00f f868 	bl	801464a <zb_heap_free>
 800557a:	2000      	movs	r0, #0
 800557c:	e007      	b.n	800558e <??ZbZclClusterAlloc_1>

0800557e <??ZbZclClusterAlloc_6>:
 800557e:	2201      	movs	r2, #1
 8005580:	2300      	movs	r3, #0
 8005582:	f64f 71fd 	movw	r1, #65533	@ 0xfffd
 8005586:	0020      	movs	r0, r4
 8005588:	f7fc fa6b 	bl	8001a62 <ZbZclAttrIntegerWrite>
 800558c:	0020      	movs	r0, r4

0800558e <??ZbZclClusterAlloc_1>:
 800558e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005592 <ZbZclClusterAttach>:
 8005592:	b510      	push	{r4, lr}
 8005594:	0004      	movs	r4, r0
 8005596:	7ba0      	ldrb	r0, [r4, #14]
 8005598:	28ff      	cmp	r0, #255	@ 0xff
 800559a:	d104      	bne.n	80055a6 <??ZbZclClusterAttach_0>
 800559c:	89a0      	ldrh	r0, [r4, #12]
 800559e:	2800      	cmp	r0, #0
 80055a0:	d001      	beq.n	80055a6 <??ZbZclClusterAttach_0>
 80055a2:	89a0      	ldrh	r0, [r4, #12]
 80055a4:	280a      	cmp	r0, #10

080055a6 <??ZbZclClusterAttach_0>:
 80055a6:	7ba0      	ldrb	r0, [r4, #14]
 80055a8:	28ff      	cmp	r0, #255	@ 0xff
 80055aa:	d00b      	beq.n	80055c4 <??ZbZclClusterAttach_1>
 80055ac:	7f23      	ldrb	r3, [r4, #28]
 80055ae:	8aa2      	ldrh	r2, [r4, #20]
 80055b0:	7ba1      	ldrb	r1, [r4, #14]
 80055b2:	0020      	movs	r0, r4
 80055b4:	f00e ff9f 	bl	80144f6 <ZbZclClusterBind>
 80055b8:	0001      	movs	r1, r0
 80055ba:	b2c9      	uxtb	r1, r1
 80055bc:	2900      	cmp	r1, #0
 80055be:	d001      	beq.n	80055c4 <??ZbZclClusterAttach_1>
 80055c0:	b2c0      	uxtb	r0, r0
 80055c2:	e005      	b.n	80055d0 <??ZbZclClusterAttach_2>

080055c4 <??ZbZclClusterAttach_1>:
 80055c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055c6:	2800      	cmp	r0, #0
 80055c8:	d101      	bne.n	80055ce <??ZbZclClusterAttach_3>
 80055ca:	48c4      	ldr	r0, [pc, #784]	@ (80058dc <??DataTable5_4>)
 80055cc:	65a0      	str	r0, [r4, #88]	@ 0x58

080055ce <??ZbZclClusterAttach_3>:
 80055ce:	2000      	movs	r0, #0

080055d0 <??ZbZclClusterAttach_2>:
 80055d0:	bd10      	pop	{r4, pc}

080055d2 <ZbZclClusterDetach>:
 80055d2:	b510      	push	{r4, lr}
 80055d4:	0004      	movs	r4, r0
 80055d6:	68a0      	ldr	r0, [r4, #8]
 80055d8:	2800      	cmp	r0, #0
 80055da:	d00b      	beq.n	80055f4 <??ZbZclClusterDetach_0>

080055dc <??ZbZclClusterDetach_1>:
 80055dc:	0020      	movs	r0, r4
 80055de:	f00e ffcd 	bl	801457c <ZbZclClusterUnbind>
 80055e2:	0020      	movs	r0, r4
 80055e4:	f00e fff6 	bl	80145d4 <ZbZclClusterRemoveAlarmResetHandler>
 80055e8:	7ba0      	ldrb	r0, [r4, #14]
 80055ea:	28ff      	cmp	r0, #255	@ 0xff
 80055ec:	d002      	beq.n	80055f4 <??ZbZclClusterDetach_0>
 80055ee:	0020      	movs	r0, r4
 80055f0:	f00e ff4c 	bl	801448c <ZbZclClusterEndpointRemove>

080055f4 <??ZbZclClusterDetach_0>:
 80055f4:	bd10      	pop	{r4, pc}

080055f6 <ZbZclClusterFree>:
 80055f6:	b538      	push	{r3, r4, r5, lr}
 80055f8:	0005      	movs	r5, r0
 80055fa:	68ac      	ldr	r4, [r5, #8]
 80055fc:	2c00      	cmp	r4, #0
 80055fe:	d02d      	beq.n	800565c <??ZbZclClusterFree_0>

08005600 <??ZbZclClusterFree_1>:
 8005600:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8005602:	2800      	cmp	r0, #0
 8005604:	d004      	beq.n	8005610 <??ZbZclClusterFree_2>
 8005606:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8005608:	f00e fc4c 	bl	8013ea4 <ZbTimerFree>
 800560c:	2000      	movs	r0, #0
 800560e:	6528      	str	r0, [r5, #80]	@ 0x50

08005610 <??ZbZclClusterFree_2>:
 8005610:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005612:	2800      	cmp	r0, #0
 8005614:	d004      	beq.n	8005620 <??ZbZclClusterFree_3>
 8005616:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8005618:	f00e fc44 	bl	8013ea4 <ZbTimerFree>
 800561c:	2000      	movs	r0, #0
 800561e:	63a8      	str	r0, [r5, #56]	@ 0x38

08005620 <??ZbZclClusterFree_3>:
 8005620:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8005622:	2800      	cmp	r0, #0
 8005624:	d005      	beq.n	8005632 <??ZbZclClusterFree_4>
 8005626:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8005628:	0020      	movs	r0, r4
 800562a:	f00e fb91 	bl	8013d50 <ZbMsgFilterRemove>
 800562e:	2000      	movs	r0, #0
 8005630:	62e8      	str	r0, [r5, #44]	@ 0x2c

08005632 <??ZbZclClusterFree_4>:
 8005632:	0028      	movs	r0, r5
 8005634:	f7fd f8e5 	bl	8002802 <ZbZclReportCleanup>
 8005638:	0028      	movs	r0, r5
 800563a:	f7ff ffca 	bl	80055d2 <ZbZclClusterDetach>
 800563e:	0028      	movs	r0, r5
 8005640:	f7fc fc32 	bl	8001ea8 <ZbZclAttrFreeList>
 8005644:	6ea8      	ldr	r0, [r5, #104]	@ 0x68
 8005646:	2800      	cmp	r0, #0
 8005648:	d002      	beq.n	8005650 <??ZbZclClusterFree_5>
 800564a:	0028      	movs	r0, r5
 800564c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800564e:	4788      	blx	r1

08005650 <??ZbZclClusterFree_5>:
 8005650:	2300      	movs	r3, #0
 8005652:	a212      	add	r2, pc, #72	@ (adr r2, 800569c <??DataTable4>)
 8005654:	0029      	movs	r1, r5
 8005656:	0020      	movs	r0, r4
 8005658:	f00e fff7 	bl	801464a <zb_heap_free>

0800565c <??ZbZclClusterFree_0>:
 800565c:	bd31      	pop	{r0, r4, r5, pc}
	...

08005660 <zcl_cluster_persist_timer>:
 8005660:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8005662:	0005      	movs	r5, r0
 8005664:	000e      	movs	r6, r1
 8005666:	0037      	movs	r7, r6
 8005668:	a902      	add	r1, sp, #8
 800566a:	0038      	movs	r0, r7
 800566c:	f000 f818 	bl	80056a0 <zcl_persist_read_attrs>
 8005670:	0004      	movs	r4, r0
 8005672:	2c00      	cmp	r4, #0
 8005674:	d010      	beq.n	8005698 <??zcl_cluster_persist_timer_0>
 8005676:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 800567a:	9001      	str	r0, [sp, #4]
 800567c:	9400      	str	r4, [sp, #0]
 800567e:	7bbb      	ldrb	r3, [r7, #14]
 8005680:	b29b      	uxth	r3, r3
 8005682:	7f3a      	ldrb	r2, [r7, #28]
 8005684:	89b9      	ldrh	r1, [r7, #12]
 8005686:	68b8      	ldr	r0, [r7, #8]
 8005688:	f000 f92a 	bl	80058e0 <zcl_persist_send_cache>
 800568c:	2300      	movs	r3, #0
 800568e:	a203      	add	r2, pc, #12	@ (adr r2, 800569c <??DataTable4>)
 8005690:	0021      	movs	r1, r4
 8005692:	68b8      	ldr	r0, [r7, #8]
 8005694:	f00e ffd9 	bl	801464a <zb_heap_free>

08005698 <??zcl_cluster_persist_timer_0>:
 8005698:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
	...

0800569c <??DataTable4>:
 800569c:	0000 0000                                   ....

080056a0 <zcl_persist_read_attrs>:
 80056a0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056a4:	b08c      	sub	sp, #48	@ 0x30
 80056a6:	0007      	movs	r7, r0
 80056a8:	f05f 0b00 	movs.w	fp, #0
 80056ac:	f05f 0900 	movs.w	r9, #0
 80056b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056b2:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 80056b6:	4288      	cmp	r0, r1
 80056b8:	d001      	beq.n	80056be <??zcl_persist_read_attrs_0>
 80056ba:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 80056bc:	e000      	b.n	80056c0 <??zcl_persist_read_attrs_1>

080056be <??zcl_persist_read_attrs_0>:
 80056be:	2400      	movs	r4, #0

080056c0 <??zcl_persist_read_attrs_1>:
 80056c0:	2c00      	cmp	r4, #0
 80056c2:	d01e      	beq.n	8005702 <??zcl_persist_read_attrs_2>
 80056c4:	46a0      	mov	r8, r4
 80056c6:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80056ca:	7900      	ldrb	r0, [r0, #4]
 80056cc:	0740      	lsls	r0, r0, #29
 80056ce:	d50f      	bpl.n	80056f0 <??zcl_persist_read_attrs_3>

080056d0 <??zcl_persist_read_attrs_4>:
 80056d0:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80056d4:	2800      	cmp	r0, #0
 80056d6:	d004      	beq.n	80056e2 <??zcl_persist_read_attrs_5>
 80056d8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80056dc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80056e0:	d300      	bcc.n	80056e4 <??zcl_persist_read_attrs_6>

080056e2 <??zcl_persist_read_attrs_5>:
 80056e2:	e005      	b.n	80056f0 <??zcl_persist_read_attrs_3>

080056e4 <??zcl_persist_read_attrs_6>:
 80056e4:	f119 0904 	adds.w	r9, r9, #4
 80056e8:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80056ec:	eb10 0909 	adds.w	r9, r0, r9

080056f0 <??zcl_persist_read_attrs_3>:
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 80056f6:	4288      	cmp	r0, r1
 80056f8:	d001      	beq.n	80056fe <??zcl_persist_read_attrs_7>
 80056fa:	6824      	ldr	r4, [r4, #0]
 80056fc:	e7e0      	b.n	80056c0 <??zcl_persist_read_attrs_1>

080056fe <??zcl_persist_read_attrs_7>:
 80056fe:	2400      	movs	r4, #0
 8005700:	e7de      	b.n	80056c0 <??zcl_persist_read_attrs_1>

08005702 <??zcl_persist_read_attrs_2>:
 8005702:	4648      	mov	r0, r9
 8005704:	b280      	uxth	r0, r0
 8005706:	2800      	cmp	r0, #0
 8005708:	d101      	bne.n	800570e <??zcl_persist_read_attrs_8>
 800570a:	2000      	movs	r0, #0
 800570c:	e0db      	b.n	80058c6 <??zcl_persist_read_attrs_9>

0800570e <??zcl_persist_read_attrs_8>:
 800570e:	2300      	movs	r3, #0
 8005710:	a26e      	add	r2, pc, #440	@ (adr r2, 80058cc <??DataTable5>)
 8005712:	4649      	mov	r1, r9
 8005714:	b289      	uxth	r1, r1
 8005716:	68b8      	ldr	r0, [r7, #8]
 8005718:	f00e ff88 	bl	801462c <zb_heap_alloc>
 800571c:	0005      	movs	r5, r0
 800571e:	2d00      	cmp	r5, #0
 8005720:	d101      	bne.n	8005726 <??zcl_persist_read_attrs_10>
 8005722:	2000      	movs	r0, #0
 8005724:	e0cf      	b.n	80058c6 <??zcl_persist_read_attrs_9>

08005726 <??zcl_persist_read_attrs_10>:
 8005726:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005728:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 800572c:	4288      	cmp	r0, r1
 800572e:	d001      	beq.n	8005734 <??zcl_persist_read_attrs_11>
 8005730:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8005732:	e000      	b.n	8005736 <??zcl_persist_read_attrs_12>

08005734 <??zcl_persist_read_attrs_11>:
 8005734:	2400      	movs	r4, #0

08005736 <??zcl_persist_read_attrs_12>:
 8005736:	2c00      	cmp	r4, #0
 8005738:	f000 80c1 	beq.w	80058be <??zcl_persist_read_attrs_13>
 800573c:	46a0      	mov	r8, r4
 800573e:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005742:	7900      	ldrb	r0, [r0, #4]
 8005744:	0740      	lsls	r0, r0, #29
 8005746:	f140 80b1 	bpl.w	80058ac <??zcl_persist_read_attrs_14>

0800574a <??zcl_persist_read_attrs_15>:
 800574a:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800574e:	7900      	ldrb	r0, [r0, #4]
 8005750:	06c0      	lsls	r0, r0, #27
 8005752:	d566      	bpl.n	8005822 <??zcl_persist_read_attrs_16>
 8005754:	4658      	mov	r0, fp
 8005756:	b280      	uxth	r0, r0
 8005758:	4428      	add	r0, r5
 800575a:	1d00      	adds	r0, r0, #4
 800575c:	9001      	str	r0, [sp, #4]
 800575e:	4649      	mov	r1, r9
 8005760:	b289      	uxth	r1, r1
 8005762:	4658      	mov	r0, fp
 8005764:	b280      	uxth	r0, r0
 8005766:	1a09      	subs	r1, r1, r0
 8005768:	1f08      	subs	r0, r1, #4
 800576a:	f8ad 0000 	strh.w	r0, [sp]
 800576e:	2020      	movs	r0, #32
 8005770:	9003      	str	r0, [sp, #12]
 8005772:	2000      	movs	r0, #0
 8005774:	9002      	str	r0, [sp, #8]
 8005776:	f10d 0a10 	add.w	sl, sp, #16
 800577a:	9a02      	ldr	r2, [sp, #8]
 800577c:	9903      	ldr	r1, [sp, #12]
 800577e:	4650      	mov	r0, sl
 8005780:	f000 fa84 	bl	8005c8c <__aeabi_memset>
 8005784:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005788:	9004      	str	r0, [sp, #16]
 800578a:	2000      	movs	r0, #0
 800578c:	f88d 0014 	strb.w	r0, [sp, #20]
 8005790:	9801      	ldr	r0, [sp, #4]
 8005792:	9006      	str	r0, [sp, #24]
 8005794:	f8bd 0000 	ldrh.w	r0, [sp]
 8005798:	9007      	str	r0, [sp, #28]
 800579a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800579c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800579e:	aa04      	add	r2, sp, #16
 80057a0:	4641      	mov	r1, r8
 80057a2:	0038      	movs	r0, r7
 80057a4:	f7fc fb4c 	bl	8001e40 <ZbZclAttrCallbackExec>
 80057a8:	4682      	mov	sl, r0
 80057aa:	4650      	mov	r0, sl
 80057ac:	b2c0      	uxtb	r0, r0
 80057ae:	2800      	cmp	r0, #0
 80057b0:	d17c      	bne.n	80058ac <??zcl_persist_read_attrs_14>

080057b2 <??zcl_persist_read_attrs_17>:
 80057b2:	2300      	movs	r3, #0
 80057b4:	f8bd 2000 	ldrh.w	r2, [sp]
 80057b8:	9901      	ldr	r1, [sp, #4]
 80057ba:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80057be:	7880      	ldrb	r0, [r0, #2]
 80057c0:	f7fb fc39 	bl	8001036 <ZbZclAttrParseLength>
 80057c4:	0006      	movs	r6, r0
 80057c6:	2e01      	cmp	r6, #1
 80057c8:	db02      	blt.n	80057d0 <??zcl_persist_read_attrs_18>
 80057ca:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 80057ce:	db00      	blt.n	80057d2 <??zcl_persist_read_attrs_19>

080057d0 <??zcl_persist_read_attrs_18>:
 80057d0:	e06c      	b.n	80058ac <??zcl_persist_read_attrs_14>

080057d2 <??zcl_persist_read_attrs_19>:
 80057d2:	4648      	mov	r0, r9
 80057d4:	b280      	uxth	r0, r0
 80057d6:	4659      	mov	r1, fp
 80057d8:	b289      	uxth	r1, r1
 80057da:	fa11 f186 	uxtah	r1, r1, r6
 80057de:	1d09      	adds	r1, r1, #4
 80057e0:	4288      	cmp	r0, r1
 80057e2:	d207      	bcs.n	80057f4 <??zcl_persist_read_attrs_20>
 80057e4:	2300      	movs	r3, #0
 80057e6:	a239      	add	r2, pc, #228	@ (adr r2, 80058cc <??DataTable5>)
 80057e8:	0029      	movs	r1, r5
 80057ea:	68b8      	ldr	r0, [r7, #8]
 80057ec:	f00e ff2d 	bl	801464a <zb_heap_free>
 80057f0:	2000      	movs	r0, #0
 80057f2:	e068      	b.n	80058c6 <??zcl_persist_read_attrs_9>

080057f4 <??zcl_persist_read_attrs_20>:
 80057f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80057f8:	8801      	ldrh	r1, [r0, #0]
 80057fa:	4658      	mov	r0, fp
 80057fc:	b280      	uxth	r0, r0
 80057fe:	4428      	add	r0, r5
 8005800:	f7ff f96e 	bl	8004ae0 <putle16>
 8005804:	f11b 0b02 	adds.w	fp, fp, #2
 8005808:	0030      	movs	r0, r6
 800580a:	0001      	movs	r1, r0
 800580c:	b289      	uxth	r1, r1
 800580e:	4658      	mov	r0, fp
 8005810:	b280      	uxth	r0, r0
 8005812:	4428      	add	r0, r5
 8005814:	f7ff f964 	bl	8004ae0 <putle16>
 8005818:	f11b 0b02 	adds.w	fp, fp, #2
 800581c:	eb16 0b0b 	adds.w	fp, r6, fp
 8005820:	e044      	b.n	80058ac <??zcl_persist_read_attrs_14>

08005822 <??zcl_persist_read_attrs_16>:
 8005822:	2300      	movs	r3, #0
 8005824:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005828:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800582c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8005830:	7880      	ldrb	r0, [r0, #2]
 8005832:	f7fb fc00 	bl	8001036 <ZbZclAttrParseLength>
 8005836:	0006      	movs	r6, r0
 8005838:	2e01      	cmp	r6, #1
 800583a:	db02      	blt.n	8005842 <??zcl_persist_read_attrs_21>
 800583c:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 8005840:	db00      	blt.n	8005844 <??zcl_persist_read_attrs_22>

08005842 <??zcl_persist_read_attrs_21>:
 8005842:	e033      	b.n	80058ac <??zcl_persist_read_attrs_14>

08005844 <??zcl_persist_read_attrs_22>:
 8005844:	4648      	mov	r0, r9
 8005846:	b280      	uxth	r0, r0
 8005848:	4659      	mov	r1, fp
 800584a:	b289      	uxth	r1, r1
 800584c:	fa11 f186 	uxtah	r1, r1, r6
 8005850:	1d09      	adds	r1, r1, #4
 8005852:	4288      	cmp	r0, r1
 8005854:	d207      	bcs.n	8005866 <??zcl_persist_read_attrs_23>
 8005856:	2300      	movs	r3, #0
 8005858:	a21c      	add	r2, pc, #112	@ (adr r2, 80058cc <??DataTable5>)
 800585a:	0029      	movs	r1, r5
 800585c:	68b8      	ldr	r0, [r7, #8]
 800585e:	f00e fef4 	bl	801464a <zb_heap_free>
 8005862:	2000      	movs	r0, #0
 8005864:	e02f      	b.n	80058c6 <??zcl_persist_read_attrs_9>

08005866 <??zcl_persist_read_attrs_23>:
 8005866:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800586a:	8801      	ldrh	r1, [r0, #0]
 800586c:	4658      	mov	r0, fp
 800586e:	b280      	uxth	r0, r0
 8005870:	4428      	add	r0, r5
 8005872:	f7ff f935 	bl	8004ae0 <putle16>
 8005876:	f11b 0b02 	adds.w	fp, fp, #2
 800587a:	0030      	movs	r0, r6
 800587c:	0001      	movs	r1, r0
 800587e:	b289      	uxth	r1, r1
 8005880:	4658      	mov	r0, fp
 8005882:	b280      	uxth	r0, r0
 8005884:	4428      	add	r0, r5
 8005886:	f7ff f92b 	bl	8004ae0 <putle16>
 800588a:	f11b 0b02 	adds.w	fp, fp, #2
 800588e:	9601      	str	r6, [sp, #4]
 8005890:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8005894:	9000      	str	r0, [sp, #0]
 8005896:	4658      	mov	r0, fp
 8005898:	b280      	uxth	r0, r0
 800589a:	eb05 0a00 	add.w	sl, r5, r0
 800589e:	9a01      	ldr	r2, [sp, #4]
 80058a0:	9900      	ldr	r1, [sp, #0]
 80058a2:	4650      	mov	r0, sl
 80058a4:	f011 fc6b 	bl	801717e <__aeabi_memcpy>
 80058a8:	eb16 0b0b 	adds.w	fp, r6, fp

080058ac <??zcl_persist_read_attrs_14>:
 80058ac:	6820      	ldr	r0, [r4, #0]
 80058ae:	f117 0124 	adds.w	r1, r7, #36	@ 0x24
 80058b2:	4288      	cmp	r0, r1
 80058b4:	d001      	beq.n	80058ba <??zcl_persist_read_attrs_24>
 80058b6:	6824      	ldr	r4, [r4, #0]
 80058b8:	e73d      	b.n	8005736 <??zcl_persist_read_attrs_12>

080058ba <??zcl_persist_read_attrs_24>:
 80058ba:	2400      	movs	r4, #0
 80058bc:	e73b      	b.n	8005736 <??zcl_persist_read_attrs_12>

080058be <??zcl_persist_read_attrs_13>:
 80058be:	980c      	ldr	r0, [sp, #48]	@ 0x30
 80058c0:	f8a0 b000 	strh.w	fp, [r0]
 80058c4:	0028      	movs	r0, r5

080058c6 <??zcl_persist_read_attrs_9>:
 80058c6:	b00d      	add	sp, #52	@ 0x34
 80058c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080058cc <??DataTable5>:
 80058cc:	0000 0000                                   ....

080058d0 <??DataTable5_1>:
 80058d0:	2877 0800                                   w(..

080058d4 <??DataTable5_2>:
 80058d4:	22ed 0800                                   ."..

080058d8 <??DataTable5_3>:
 80058d8:	85d8 0801                                   ....

080058dc <??DataTable5_4>:
 80058dc:	546d 0800                                   mT..

080058e0 <zcl_persist_send_cache>:
 80058e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	b098      	sub	sp, #96	@ 0x60
 80058e6:	0005      	movs	r5, r0
 80058e8:	001e      	movs	r6, r3
 80058ea:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 80058ec:	f05f 0900 	movs.w	r9, #0
 80058f0:	0030      	movs	r0, r6
 80058f2:	b280      	uxth	r0, r0
 80058f4:	28ff      	cmp	r0, #255	@ 0xff
 80058f6:	d101      	bne.n	80058fc <??zcl_persist_send_cache_0>
 80058f8:	2085      	movs	r0, #133	@ 0x85
 80058fa:	e0a1      	b.n	8005a40 <??zcl_persist_send_cache_1>

080058fc <??zcl_persist_send_cache_0>:
 80058fc:	0020      	movs	r0, r4
 80058fe:	b280      	uxth	r0, r0
 8005900:	f64f 71fb 	movw	r1, #65531	@ 0xfffb
 8005904:	4288      	cmp	r0, r1
 8005906:	d301      	bcc.n	800590c <??zcl_persist_send_cache_2>
 8005908:	2089      	movs	r0, #137	@ 0x89
 800590a:	e099      	b.n	8005a40 <??zcl_persist_send_cache_1>

0800590c <??zcl_persist_send_cache_2>:
 800590c:	f05f 0a08 	movs.w	sl, #8
 8005910:	f05f 0b00 	movs.w	fp, #0
 8005914:	466f      	mov	r7, sp
 8005916:	465a      	mov	r2, fp
 8005918:	4651      	mov	r1, sl
 800591a:	0038      	movs	r0, r7
 800591c:	f000 f9b6 	bl	8005c8c <__aeabi_memset>
 8005920:	2001      	movs	r0, #1
 8005922:	f88d 0000 	strb.w	r0, [sp]
 8005926:	2001      	movs	r0, #1
 8005928:	f88d 0001 	strb.w	r0, [sp, #1]
 800592c:	2000      	movs	r0, #0
 800592e:	f88d 0002 	strb.w	r0, [sp, #2]
 8005932:	2001      	movs	r0, #1
 8005934:	f88d 0003 	strb.w	r0, [sp, #3]
 8005938:	f64f 78fe 	movw	r8, #65534	@ 0xfffe
 800593c:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005940:	f00e fcb3 	bl	80142aa <ZbZclGetNextSeqnum>
 8005944:	f88d 0006 	strb.w	r0, [sp, #6]
 8005948:	2000      	movs	r0, #0
 800594a:	f88d 0007 	strb.w	r0, [sp, #7]
 800594e:	2205      	movs	r2, #5
 8005950:	a904      	add	r1, sp, #16
 8005952:	4668      	mov	r0, sp
 8005954:	f7fe ff06 	bl	8004764 <ZbZclAppendHeader>
 8005958:	0007      	movs	r7, r0
 800595a:	2f00      	cmp	r7, #0
 800595c:	d501      	bpl.n	8005962 <??zcl_persist_send_cache_3>
 800595e:	2085      	movs	r0, #133	@ 0x85
 8005960:	e06e      	b.n	8005a40 <??zcl_persist_send_cache_1>

08005962 <??zcl_persist_send_cache_3>:
 8005962:	f10d 0a48 	add.w	sl, sp, #72	@ 0x48
 8005966:	a804      	add	r0, sp, #16
 8005968:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 800596c:	a812      	add	r0, sp, #72	@ 0x48
 800596e:	eb00 00c9 	add.w	r0, r0, r9, lsl #3
 8005972:	6047      	str	r7, [r0, #4]
 8005974:	f119 0901 	adds.w	r9, r9, #1
 8005978:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 800597c:	a802      	add	r0, sp, #8
 800597e:	f7ff f8af 	bl	8004ae0 <putle16>
 8005982:	f89d 0068 	ldrb.w	r0, [sp, #104]	@ 0x68
 8005986:	f88d 000a 	strb.w	r0, [sp, #10]
 800598a:	a802      	add	r0, sp, #8
 800598c:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 8005990:	2003      	movs	r0, #3
 8005992:	a912      	add	r1, sp, #72	@ 0x48
 8005994:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 8005998:	6048      	str	r0, [r1, #4]
 800599a:	f119 0901 	adds.w	r9, r9, #1
 800599e:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80059a0:	f84a 0039 	str.w	r0, [sl, r9, lsl #3]
 80059a4:	0020      	movs	r0, r4
 80059a6:	b280      	uxth	r0, r0
 80059a8:	a912      	add	r1, sp, #72	@ 0x48
 80059aa:	eb01 01c9 	add.w	r1, r1, r9, lsl #3
 80059ae:	6048      	str	r0, [r1, #4]
 80059b0:	f119 0901 	adds.w	r9, r9, #1
 80059b4:	f8cd 900c 	str.w	r9, [sp, #12]
 80059b8:	f05f 0a30 	movs.w	sl, #48	@ 0x30
 80059bc:	f05f 0900 	movs.w	r9, #0
 80059c0:	f10d 0b18 	add.w	fp, sp, #24
 80059c4:	464a      	mov	r2, r9
 80059c6:	4651      	mov	r1, sl
 80059c8:	4658      	mov	r0, fp
 80059ca:	f000 f95f 	bl	8005c8c <__aeabi_memset>
 80059ce:	2003      	movs	r0, #3
 80059d0:	f88d 0018 	strb.w	r0, [sp, #24]
 80059d4:	0028      	movs	r0, r5
 80059d6:	f00d fe95 	bl	8013704 <ZbExtendedAddress>
 80059da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80059de:	20ff      	movs	r0, #255	@ 0xff
 80059e0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80059e4:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80059e8:	f8ad 0028 	strh.w	r0, [sp, #40]	@ 0x28
 80059ec:	f8ad 802a 	strh.w	r8, [sp, #42]	@ 0x2a
 80059f0:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 80059f4:	a812      	add	r0, sp, #72	@ 0x48
 80059f6:	900c      	str	r0, [sp, #48]	@ 0x30
 80059f8:	9803      	ldr	r0, [sp, #12]
 80059fa:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80059fe:	2000      	movs	r0, #0
 8005a00:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 8005a04:	2000      	movs	r0, #0
 8005a06:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 8005a0a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005a0e:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8005a12:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8005a16:	f050 0008 	orrs.w	r0, r0, #8
 8005a1a:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8005a1e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8005a22:	f050 0004 	orrs.w	r0, r0, #4
 8005a26:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	a906      	add	r1, sp, #24
 8005a30:	0028      	movs	r0, r5
 8005a32:	f00d ff7d 	bl	8013930 <ZbApsdeDataReqCallback>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d001      	beq.n	8005a3e <??zcl_persist_send_cache_4>
 8005a3a:	2001      	movs	r0, #1
 8005a3c:	e000      	b.n	8005a40 <??zcl_persist_send_cache_1>

08005a3e <??zcl_persist_send_cache_4>:
 8005a3e:	2000      	movs	r0, #0

08005a40 <??zcl_persist_send_cache_1>:
 8005a40:	b01b      	add	sp, #108	@ 0x6c
 8005a42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005a46 <ZbZclHandleGetSceneData>:
 8005a46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a4a:	b0a2      	sub	sp, #136	@ 0x88
 8005a4c:	0004      	movs	r4, r0
 8005a4e:	000d      	movs	r5, r1
 8005a50:	0016      	movs	r6, r2
 8005a52:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8005a54:	2800      	cmp	r0, #0
 8005a56:	d106      	bne.n	8005a66 <??ZbZclHandleGetSceneData_0>
 8005a58:	2381      	movs	r3, #129	@ 0x81
 8005a5a:	002a      	movs	r2, r5
 8005a5c:	0031      	movs	r1, r6
 8005a5e:	0020      	movs	r0, r4
 8005a60:	f00e fca7 	bl	80143b2 <ZbZclSendDefaultResponse>
 8005a64:	e06b      	b.n	8005b3e <??ZbZclHandleGetSceneData_1>

08005a66 <??ZbZclHandleGetSceneData_0>:
 8005a66:	2708      	movs	r7, #8
 8005a68:	f05f 0800 	movs.w	r8, #0
 8005a6c:	46e9      	mov	r9, sp
 8005a6e:	4642      	mov	r2, r8
 8005a70:	0039      	movs	r1, r7
 8005a72:	4648      	mov	r0, r9
 8005a74:	f000 f90a 	bl	8005c8c <__aeabi_memset>
 8005a78:	2000      	movs	r0, #0
 8005a7a:	f88d 0000 	strb.w	r0, [sp]
 8005a7e:	2001      	movs	r0, #1
 8005a80:	f88d 0001 	strb.w	r0, [sp, #1]
 8005a84:	78a8      	ldrb	r0, [r5, #2]
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d103      	bne.n	8005a92 <??ZbZclHandleGetSceneData_2>
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f88d 0002 	strb.w	r0, [sp, #2]
 8005a90:	e002      	b.n	8005a98 <??ZbZclHandleGetSceneData_3>

08005a92 <??ZbZclHandleGetSceneData_2>:
 8005a92:	2000      	movs	r0, #0
 8005a94:	f88d 0002 	strb.w	r0, [sp, #2]

08005a98 <??ZbZclHandleGetSceneData_3>:
 8005a98:	2001      	movs	r0, #1
 8005a9a:	f88d 0003 	strb.w	r0, [sp, #3]
 8005a9e:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8005aa2:	f8ad 0004 	strh.w	r0, [sp, #4]
 8005aa6:	79a8      	ldrb	r0, [r5, #6]
 8005aa8:	f88d 0006 	strb.w	r0, [sp, #6]
 8005aac:	20f0      	movs	r0, #240	@ 0xf0
 8005aae:	f88d 0007 	strb.w	r0, [sp, #7]
 8005ab2:	8b62      	ldrh	r2, [r4, #26]
 8005ab4:	a90e      	add	r1, sp, #56	@ 0x38
 8005ab6:	4668      	mov	r0, sp
 8005ab8:	f7fe fe54 	bl	8004764 <ZbZclAppendHeader>
 8005abc:	0007      	movs	r7, r0
 8005abe:	2f00      	cmp	r7, #0
 8005ac0:	d506      	bpl.n	8005ad0 <??ZbZclHandleGetSceneData_4>
 8005ac2:	2380      	movs	r3, #128	@ 0x80
 8005ac4:	002a      	movs	r2, r5
 8005ac6:	0031      	movs	r1, r6
 8005ac8:	0020      	movs	r0, r4
 8005aca:	f00e fc72 	bl	80143b2 <ZbZclSendDefaultResponse>
 8005ace:	e036      	b.n	8005b3e <??ZbZclHandleGetSceneData_1>

08005ad0 <??ZbZclHandleGetSceneData_4>:
 8005ad0:	46b9      	mov	r9, r7
 8005ad2:	f1d9 024d 	rsbs	r2, r9, #77	@ 0x4d
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	a80e      	add	r0, sp, #56	@ 0x38
 8005ada:	eb00 0109 	add.w	r1, r0, r9
 8005ade:	0020      	movs	r0, r4
 8005ae0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005ae2:	4798      	blx	r3
 8005ae4:	4680      	mov	r8, r0
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	b2c0      	uxtb	r0, r0
 8005aea:	2800      	cmp	r0, #0
 8005aec:	d106      	bne.n	8005afc <??ZbZclHandleGetSceneData_5>
 8005aee:	2381      	movs	r3, #129	@ 0x81
 8005af0:	002a      	movs	r2, r5
 8005af2:	0031      	movs	r1, r6
 8005af4:	0020      	movs	r0, r4
 8005af6:	f00e fc5c 	bl	80143b2 <ZbZclSendDefaultResponse>
 8005afa:	e020      	b.n	8005b3e <??ZbZclHandleGetSceneData_1>

08005afc <??ZbZclHandleGetSceneData_5>:
 8005afc:	fa59 f988 	uxtab	r9, r9, r8
 8005b00:	0032      	movs	r2, r6
 8005b02:	a902      	add	r1, sp, #8
 8005b04:	0020      	movs	r0, r4
 8005b06:	f7fe f8cc 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 8005b0a:	a802      	add	r0, sp, #8
 8005b0c:	f116 0110 	adds.w	r1, r6, #16
 8005b10:	2210      	movs	r2, #16
 8005b12:	f011 fb34 	bl	801717e <__aeabi_memcpy>
 8005b16:	2000      	movs	r0, #0
 8005b18:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 8005b22:	2000      	movs	r0, #0
 8005b24:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
 8005b28:	a80e      	add	r0, sp, #56	@ 0x38
 8005b2a:	9008      	str	r0, [sp, #32]
 8005b2c:	4648      	mov	r0, r9
 8005b2e:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8005b32:	2300      	movs	r3, #0
 8005b34:	2200      	movs	r2, #0
 8005b36:	a902      	add	r1, sp, #8
 8005b38:	68a0      	ldr	r0, [r4, #8]
 8005b3a:	f00d fef9 	bl	8013930 <ZbApsdeDataReqCallback>

08005b3e <??ZbZclHandleGetSceneData_1>:
 8005b3e:	b023      	add	sp, #140	@ 0x8c
 8005b40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005b44 <ZbZclHandleSetSceneData>:
 8005b44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b48:	b0a4      	sub	sp, #144	@ 0x90
 8005b4a:	0004      	movs	r4, r0
 8005b4c:	000d      	movs	r5, r1
 8005b4e:	0016      	movs	r6, r2
 8005b50:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d106      	bne.n	8005b64 <??ZbZclHandleSetSceneData_0>
 8005b56:	2381      	movs	r3, #129	@ 0x81
 8005b58:	002a      	movs	r2, r5
 8005b5a:	0031      	movs	r1, r6
 8005b5c:	0020      	movs	r0, r4
 8005b5e:	f00e fc28 	bl	80143b2 <ZbZclSendDefaultResponse>
 8005b62:	e086      	b.n	8005c72 <??ZbZclHandleSetSceneData_1>

08005b64 <??ZbZclHandleSetSceneData_0>:
 8005b64:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8005b66:	2805      	cmp	r0, #5
 8005b68:	da06      	bge.n	8005b78 <??ZbZclHandleSetSceneData_2>
 8005b6a:	2380      	movs	r3, #128	@ 0x80
 8005b6c:	002a      	movs	r2, r5
 8005b6e:	0031      	movs	r1, r6
 8005b70:	0020      	movs	r0, r4
 8005b72:	f00e fc1e 	bl	80143b2 <ZbZclSendDefaultResponse>
 8005b76:	e07c      	b.n	8005c72 <??ZbZclHandleSetSceneData_1>

08005b78 <??ZbZclHandleSetSceneData_2>:
 8005b78:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005b7a:	f7fe ff76 	bl	8004a6a <pletoh32>
 8005b7e:	0007      	movs	r7, r0
 8005b80:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005b82:	7900      	ldrb	r0, [r0, #4]
 8005b84:	f88d 0000 	strb.w	r0, [sp]
 8005b88:	f89d 0000 	ldrb.w	r0, [sp]
 8005b8c:	1d40      	adds	r0, r0, #5
 8005b8e:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8005b90:	4288      	cmp	r0, r1
 8005b92:	d206      	bcs.n	8005ba2 <??ZbZclHandleSetSceneData_3>
 8005b94:	2380      	movs	r3, #128	@ 0x80
 8005b96:	002a      	movs	r2, r5
 8005b98:	0031      	movs	r1, r6
 8005b9a:	0020      	movs	r0, r4
 8005b9c:	f00e fc09 	bl	80143b2 <ZbZclSendDefaultResponse>
 8005ba0:	e067      	b.n	8005c72 <??ZbZclHandleSetSceneData_1>

08005ba2 <??ZbZclHandleSetSceneData_3>:
 8005ba2:	003b      	movs	r3, r7
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	f89d 2000 	ldrb.w	r2, [sp]
 8005baa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8005bac:	1d41      	adds	r1, r0, #5
 8005bae:	0020      	movs	r0, r4
 8005bb0:	f8d4 c064 	ldr.w	ip, [r4, #100]	@ 0x64
 8005bb4:	47e0      	blx	ip
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	f05f 0908 	movs.w	r9, #8
 8005bbc:	f05f 0a00 	movs.w	sl, #0
 8005bc0:	f10d 0b04 	add.w	fp, sp, #4
 8005bc4:	4652      	mov	r2, sl
 8005bc6:	4649      	mov	r1, r9
 8005bc8:	4658      	mov	r0, fp
 8005bca:	f000 f85f 	bl	8005c8c <__aeabi_memset>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	f88d 0004 	strb.w	r0, [sp, #4]
 8005bd4:	2001      	movs	r0, #1
 8005bd6:	f88d 0005 	strb.w	r0, [sp, #5]
 8005bda:	78a8      	ldrb	r0, [r5, #2]
 8005bdc:	2800      	cmp	r0, #0
 8005bde:	d103      	bne.n	8005be8 <??ZbZclHandleSetSceneData_4>
 8005be0:	2001      	movs	r0, #1
 8005be2:	f88d 0006 	strb.w	r0, [sp, #6]
 8005be6:	e002      	b.n	8005bee <??ZbZclHandleSetSceneData_5>

08005be8 <??ZbZclHandleSetSceneData_4>:
 8005be8:	2000      	movs	r0, #0
 8005bea:	f88d 0006 	strb.w	r0, [sp, #6]

08005bee <??ZbZclHandleSetSceneData_5>:
 8005bee:	2001      	movs	r0, #1
 8005bf0:	f88d 0007 	strb.w	r0, [sp, #7]
 8005bf4:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8005bf8:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005bfc:	79a8      	ldrb	r0, [r5, #6]
 8005bfe:	f88d 000a 	strb.w	r0, [sp, #10]
 8005c02:	20f1      	movs	r0, #241	@ 0xf1
 8005c04:	f88d 000b 	strb.w	r0, [sp, #11]
 8005c08:	8b62      	ldrh	r2, [r4, #26]
 8005c0a:	a910      	add	r1, sp, #64	@ 0x40
 8005c0c:	a801      	add	r0, sp, #4
 8005c0e:	f7fe fda9 	bl	8004764 <ZbZclAppendHeader>
 8005c12:	4681      	mov	r9, r0
 8005c14:	f1b9 0f00 	cmp.w	r9, #0
 8005c18:	d506      	bpl.n	8005c28 <??ZbZclHandleSetSceneData_6>
 8005c1a:	2380      	movs	r3, #128	@ 0x80
 8005c1c:	002a      	movs	r2, r5
 8005c1e:	0031      	movs	r1, r6
 8005c20:	0020      	movs	r0, r4
 8005c22:	f00e fbc6 	bl	80143b2 <ZbZclSendDefaultResponse>
 8005c26:	e024      	b.n	8005c72 <??ZbZclHandleSetSceneData_1>

08005c28 <??ZbZclHandleSetSceneData_6>:
 8005c28:	46ca      	mov	sl, r9
 8005c2a:	a810      	add	r0, sp, #64	@ 0x40
 8005c2c:	f800 800a 	strb.w	r8, [r0, sl]
 8005c30:	f11a 0a01 	adds.w	sl, sl, #1
 8005c34:	0032      	movs	r2, r6
 8005c36:	a904      	add	r1, sp, #16
 8005c38:	0020      	movs	r0, r4
 8005c3a:	f7fe f832 	bl	8003ca2 <ZbZclClusterInitApsdeReq>
 8005c3e:	a804      	add	r0, sp, #16
 8005c40:	f116 0110 	adds.w	r1, r6, #16
 8005c44:	2210      	movs	r2, #16
 8005c46:	f011 fa9a 	bl	801717e <__aeabi_memcpy>
 8005c4a:	2000      	movs	r0, #0
 8005c4c:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8005c50:	2000      	movs	r0, #0
 8005c52:	f88d 0036 	strb.w	r0, [sp, #54]	@ 0x36
 8005c56:	2000      	movs	r0, #0
 8005c58:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 8005c5c:	a810      	add	r0, sp, #64	@ 0x40
 8005c5e:	900a      	str	r0, [sp, #40]	@ 0x28
 8005c60:	4650      	mov	r0, sl
 8005c62:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8005c66:	2300      	movs	r3, #0
 8005c68:	2200      	movs	r2, #0
 8005c6a:	a904      	add	r1, sp, #16
 8005c6c:	68a0      	ldr	r0, [r4, #8]
 8005c6e:	f00d fe5f 	bl	8013930 <ZbApsdeDataReqCallback>

08005c72 <??ZbZclHandleSetSceneData_1>:
 8005c72:	b025      	add	sp, #148	@ 0x94
 8005c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c78 <strcmp>:
 8005c78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c80:	2a01      	cmp	r2, #1
 8005c82:	bf28      	it	cs
 8005c84:	429a      	cmpcs	r2, r3
 8005c86:	d0f7      	beq.n	8005c78 <strcmp>
 8005c88:	1ad0      	subs	r0, r2, r3
 8005c8a:	4770      	bx	lr

08005c8c <__aeabi_memset>:
 8005c8c:	b470      	push	{r4, r5, r6}
 8005c8e:	0784      	lsls	r4, r0, #30
 8005c90:	d046      	beq.n	8005d20 <__aeabi_memset+0x94>
 8005c92:	1e4c      	subs	r4, r1, #1
 8005c94:	2900      	cmp	r1, #0
 8005c96:	d041      	beq.n	8005d1c <__aeabi_memset+0x90>
 8005c98:	b2d5      	uxtb	r5, r2
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	e002      	b.n	8005ca4 <__aeabi_memset+0x18>
 8005c9e:	1e61      	subs	r1, r4, #1
 8005ca0:	b3e4      	cbz	r4, 8005d1c <__aeabi_memset+0x90>
 8005ca2:	460c      	mov	r4, r1
 8005ca4:	f803 5b01 	strb.w	r5, [r3], #1
 8005ca8:	0799      	lsls	r1, r3, #30
 8005caa:	d1f8      	bne.n	8005c9e <__aeabi_memset+0x12>
 8005cac:	2c03      	cmp	r4, #3
 8005cae:	d92e      	bls.n	8005d0e <__aeabi_memset+0x82>
 8005cb0:	b2d5      	uxtb	r5, r2
 8005cb2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005cb6:	2c0f      	cmp	r4, #15
 8005cb8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005cbc:	d919      	bls.n	8005cf2 <__aeabi_memset+0x66>
 8005cbe:	4626      	mov	r6, r4
 8005cc0:	f103 0110 	add.w	r1, r3, #16
 8005cc4:	3e10      	subs	r6, #16
 8005cc6:	2e0f      	cmp	r6, #15
 8005cc8:	f841 5c10 	str.w	r5, [r1, #-16]
 8005ccc:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005cd0:	f841 5c08 	str.w	r5, [r1, #-8]
 8005cd4:	f841 5c04 	str.w	r5, [r1, #-4]
 8005cd8:	f101 0110 	add.w	r1, r1, #16
 8005cdc:	d8f2      	bhi.n	8005cc4 <__aeabi_memset+0x38>
 8005cde:	f1a4 0110 	sub.w	r1, r4, #16
 8005ce2:	f021 010f 	bic.w	r1, r1, #15
 8005ce6:	f004 040f 	and.w	r4, r4, #15
 8005cea:	3110      	adds	r1, #16
 8005cec:	2c03      	cmp	r4, #3
 8005cee:	440b      	add	r3, r1
 8005cf0:	d90d      	bls.n	8005d0e <__aeabi_memset+0x82>
 8005cf2:	461e      	mov	r6, r3
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	3904      	subs	r1, #4
 8005cf8:	2903      	cmp	r1, #3
 8005cfa:	f846 5b04 	str.w	r5, [r6], #4
 8005cfe:	d8fa      	bhi.n	8005cf6 <__aeabi_memset+0x6a>
 8005d00:	1f21      	subs	r1, r4, #4
 8005d02:	f021 0103 	bic.w	r1, r1, #3
 8005d06:	3104      	adds	r1, #4
 8005d08:	440b      	add	r3, r1
 8005d0a:	f004 0403 	and.w	r4, r4, #3
 8005d0e:	b12c      	cbz	r4, 8005d1c <__aeabi_memset+0x90>
 8005d10:	b2d2      	uxtb	r2, r2
 8005d12:	441c      	add	r4, r3
 8005d14:	f803 2b01 	strb.w	r2, [r3], #1
 8005d18:	42a3      	cmp	r3, r4
 8005d1a:	d1fb      	bne.n	8005d14 <__aeabi_memset+0x88>
 8005d1c:	bc70      	pop	{r4, r5, r6}
 8005d1e:	4770      	bx	lr
 8005d20:	460c      	mov	r4, r1
 8005d22:	4603      	mov	r3, r0
 8005d24:	e7c2      	b.n	8005cac <__aeabi_memset+0x20>
	...

08005d30 <memchr>:
 8005d30:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005d34:	2a10      	cmp	r2, #16
 8005d36:	db2b      	blt.n	8005d90 <memchr+0x60>
 8005d38:	f010 0f07 	tst.w	r0, #7
 8005d3c:	d008      	beq.n	8005d50 <memchr+0x20>
 8005d3e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d42:	3a01      	subs	r2, #1
 8005d44:	428b      	cmp	r3, r1
 8005d46:	d02d      	beq.n	8005da4 <memchr+0x74>
 8005d48:	f010 0f07 	tst.w	r0, #7
 8005d4c:	b342      	cbz	r2, 8005da0 <memchr+0x70>
 8005d4e:	d1f6      	bne.n	8005d3e <memchr+0xe>
 8005d50:	b4f0      	push	{r4, r5, r6, r7}
 8005d52:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005d56:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005d5a:	f022 0407 	bic.w	r4, r2, #7
 8005d5e:	f07f 0700 	mvns.w	r7, #0
 8005d62:	2300      	movs	r3, #0
 8005d64:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005d68:	3c08      	subs	r4, #8
 8005d6a:	ea85 0501 	eor.w	r5, r5, r1
 8005d6e:	ea86 0601 	eor.w	r6, r6, r1
 8005d72:	fa85 f547 	uadd8	r5, r5, r7
 8005d76:	faa3 f587 	sel	r5, r3, r7
 8005d7a:	fa86 f647 	uadd8	r6, r6, r7
 8005d7e:	faa5 f687 	sel	r6, r5, r7
 8005d82:	b98e      	cbnz	r6, 8005da8 <memchr+0x78>
 8005d84:	d1ee      	bne.n	8005d64 <memchr+0x34>
 8005d86:	bcf0      	pop	{r4, r5, r6, r7}
 8005d88:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005d8c:	f002 0207 	and.w	r2, r2, #7
 8005d90:	b132      	cbz	r2, 8005da0 <memchr+0x70>
 8005d92:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005d96:	3a01      	subs	r2, #1
 8005d98:	ea83 0301 	eor.w	r3, r3, r1
 8005d9c:	b113      	cbz	r3, 8005da4 <memchr+0x74>
 8005d9e:	d1f8      	bne.n	8005d92 <memchr+0x62>
 8005da0:	2000      	movs	r0, #0
 8005da2:	4770      	bx	lr
 8005da4:	3801      	subs	r0, #1
 8005da6:	4770      	bx	lr
 8005da8:	2d00      	cmp	r5, #0
 8005daa:	bf06      	itte	eq
 8005dac:	4635      	moveq	r5, r6
 8005dae:	3803      	subeq	r0, #3
 8005db0:	3807      	subne	r0, #7
 8005db2:	f015 0f01 	tst.w	r5, #1
 8005db6:	d107      	bne.n	8005dc8 <memchr+0x98>
 8005db8:	3001      	adds	r0, #1
 8005dba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005dbe:	bf02      	ittt	eq
 8005dc0:	3001      	addeq	r0, #1
 8005dc2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8005dc6:	3001      	addeq	r0, #1
 8005dc8:	bcf0      	pop	{r4, r5, r6, r7}
 8005dca:	3801      	subs	r0, #1
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <__aeabi_llsl>:
 8005dd0:	4091      	lsls	r1, r2
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	4090      	lsls	r0, r2
 8005dd6:	469c      	mov	ip, r3
 8005dd8:	3a20      	subs	r2, #32
 8005dda:	4093      	lsls	r3, r2
 8005ddc:	4319      	orrs	r1, r3
 8005dde:	4252      	negs	r2, r2
 8005de0:	4663      	mov	r3, ip
 8005de2:	40d3      	lsrs	r3, r2
 8005de4:	4319      	orrs	r1, r3
 8005de6:	4770      	bx	lr

08005de8 <__aeabi_drsub>:
 8005de8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8005dec:	e002      	b.n	8005df4 <__adddf3>
 8005dee:	bf00      	nop

08005df0 <__aeabi_dsub>:
 8005df0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08005df4 <__adddf3>:
 8005df4:	b530      	push	{r4, r5, lr}
 8005df6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8005dfa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8005dfe:	ea94 0f05 	teq	r4, r5
 8005e02:	bf08      	it	eq
 8005e04:	ea90 0f02 	teqeq	r0, r2
 8005e08:	bf1f      	itttt	ne
 8005e0a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8005e0e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8005e12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8005e16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005e1a:	f000 80e2 	beq.w	8005fe2 <__adddf3+0x1ee>
 8005e1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8005e22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8005e26:	bfb8      	it	lt
 8005e28:	426d      	neglt	r5, r5
 8005e2a:	dd0c      	ble.n	8005e46 <__adddf3+0x52>
 8005e2c:	442c      	add	r4, r5
 8005e2e:	ea80 0202 	eor.w	r2, r0, r2
 8005e32:	ea81 0303 	eor.w	r3, r1, r3
 8005e36:	ea82 0000 	eor.w	r0, r2, r0
 8005e3a:	ea83 0101 	eor.w	r1, r3, r1
 8005e3e:	ea80 0202 	eor.w	r2, r0, r2
 8005e42:	ea81 0303 	eor.w	r3, r1, r3
 8005e46:	2d36      	cmp	r5, #54	@ 0x36
 8005e48:	bf88      	it	hi
 8005e4a:	bd30      	pophi	{r4, r5, pc}
 8005e4c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8005e50:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005e54:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8005e58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8005e5c:	d002      	beq.n	8005e64 <__adddf3+0x70>
 8005e5e:	4240      	negs	r0, r0
 8005e60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005e64:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8005e68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005e6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005e70:	d002      	beq.n	8005e78 <__adddf3+0x84>
 8005e72:	4252      	negs	r2, r2
 8005e74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005e78:	ea94 0f05 	teq	r4, r5
 8005e7c:	f000 80a7 	beq.w	8005fce <__adddf3+0x1da>
 8005e80:	f1a4 0401 	sub.w	r4, r4, #1
 8005e84:	f1d5 0e20 	rsbs	lr, r5, #32
 8005e88:	db0d      	blt.n	8005ea6 <__adddf3+0xb2>
 8005e8a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8005e8e:	fa22 f205 	lsr.w	r2, r2, r5
 8005e92:	1880      	adds	r0, r0, r2
 8005e94:	f141 0100 	adc.w	r1, r1, #0
 8005e98:	fa03 f20e 	lsl.w	r2, r3, lr
 8005e9c:	1880      	adds	r0, r0, r2
 8005e9e:	fa43 f305 	asr.w	r3, r3, r5
 8005ea2:	4159      	adcs	r1, r3
 8005ea4:	e00e      	b.n	8005ec4 <__adddf3+0xd0>
 8005ea6:	f1a5 0520 	sub.w	r5, r5, #32
 8005eaa:	f10e 0e20 	add.w	lr, lr, #32
 8005eae:	2a01      	cmp	r2, #1
 8005eb0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005eb4:	bf28      	it	cs
 8005eb6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8005eba:	fa43 f305 	asr.w	r3, r3, r5
 8005ebe:	18c0      	adds	r0, r0, r3
 8005ec0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005ec4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005ec8:	d507      	bpl.n	8005eda <__adddf3+0xe6>
 8005eca:	f04f 0e00 	mov.w	lr, #0
 8005ece:	f1dc 0c00 	rsbs	ip, ip, #0
 8005ed2:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005ed6:	eb6e 0101 	sbc.w	r1, lr, r1
 8005eda:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8005ede:	d31b      	bcc.n	8005f18 <__adddf3+0x124>
 8005ee0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8005ee4:	d30c      	bcc.n	8005f00 <__adddf3+0x10c>
 8005ee6:	0849      	lsrs	r1, r1, #1
 8005ee8:	ea5f 0030 	movs.w	r0, r0, rrx
 8005eec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8005ef0:	f104 0401 	add.w	r4, r4, #1
 8005ef4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8005ef8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8005efc:	f080 809a 	bcs.w	8006034 <__adddf3+0x240>
 8005f00:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8005f04:	bf08      	it	eq
 8005f06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005f0a:	f150 0000 	adcs.w	r0, r0, #0
 8005f0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005f12:	ea41 0105 	orr.w	r1, r1, r5
 8005f16:	bd30      	pop	{r4, r5, pc}
 8005f18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8005f1c:	4140      	adcs	r0, r0
 8005f1e:	eb41 0101 	adc.w	r1, r1, r1
 8005f22:	3c01      	subs	r4, #1
 8005f24:	bf28      	it	cs
 8005f26:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8005f2a:	d2e9      	bcs.n	8005f00 <__adddf3+0x10c>
 8005f2c:	f091 0f00 	teq	r1, #0
 8005f30:	bf04      	itt	eq
 8005f32:	4601      	moveq	r1, r0
 8005f34:	2000      	moveq	r0, #0
 8005f36:	fab1 f381 	clz	r3, r1
 8005f3a:	bf08      	it	eq
 8005f3c:	3320      	addeq	r3, #32
 8005f3e:	f1a3 030b 	sub.w	r3, r3, #11
 8005f42:	f1b3 0220 	subs.w	r2, r3, #32
 8005f46:	da0c      	bge.n	8005f62 <__adddf3+0x16e>
 8005f48:	320c      	adds	r2, #12
 8005f4a:	dd08      	ble.n	8005f5e <__adddf3+0x16a>
 8005f4c:	f102 0c14 	add.w	ip, r2, #20
 8005f50:	f1c2 020c 	rsb	r2, r2, #12
 8005f54:	fa01 f00c 	lsl.w	r0, r1, ip
 8005f58:	fa21 f102 	lsr.w	r1, r1, r2
 8005f5c:	e00c      	b.n	8005f78 <__adddf3+0x184>
 8005f5e:	f102 0214 	add.w	r2, r2, #20
 8005f62:	bfd8      	it	le
 8005f64:	f1c2 0c20 	rsble	ip, r2, #32
 8005f68:	fa01 f102 	lsl.w	r1, r1, r2
 8005f6c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005f70:	bfdc      	itt	le
 8005f72:	ea41 010c 	orrle.w	r1, r1, ip
 8005f76:	4090      	lslle	r0, r2
 8005f78:	1ae4      	subs	r4, r4, r3
 8005f7a:	bfa2      	ittt	ge
 8005f7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005f80:	4329      	orrge	r1, r5
 8005f82:	bd30      	popge	{r4, r5, pc}
 8005f84:	ea6f 0404 	mvn.w	r4, r4
 8005f88:	3c1f      	subs	r4, #31
 8005f8a:	da1c      	bge.n	8005fc6 <__adddf3+0x1d2>
 8005f8c:	340c      	adds	r4, #12
 8005f8e:	dc0e      	bgt.n	8005fae <__adddf3+0x1ba>
 8005f90:	f104 0414 	add.w	r4, r4, #20
 8005f94:	f1c4 0220 	rsb	r2, r4, #32
 8005f98:	fa20 f004 	lsr.w	r0, r0, r4
 8005f9c:	fa01 f302 	lsl.w	r3, r1, r2
 8005fa0:	ea40 0003 	orr.w	r0, r0, r3
 8005fa4:	fa21 f304 	lsr.w	r3, r1, r4
 8005fa8:	ea45 0103 	orr.w	r1, r5, r3
 8005fac:	bd30      	pop	{r4, r5, pc}
 8005fae:	f1c4 040c 	rsb	r4, r4, #12
 8005fb2:	f1c4 0220 	rsb	r2, r4, #32
 8005fb6:	fa20 f002 	lsr.w	r0, r0, r2
 8005fba:	fa01 f304 	lsl.w	r3, r1, r4
 8005fbe:	ea40 0003 	orr.w	r0, r0, r3
 8005fc2:	4629      	mov	r1, r5
 8005fc4:	bd30      	pop	{r4, r5, pc}
 8005fc6:	fa21 f004 	lsr.w	r0, r1, r4
 8005fca:	4629      	mov	r1, r5
 8005fcc:	bd30      	pop	{r4, r5, pc}
 8005fce:	f094 0f00 	teq	r4, #0
 8005fd2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005fd6:	bf06      	itte	eq
 8005fd8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8005fdc:	3401      	addeq	r4, #1
 8005fde:	3d01      	subne	r5, #1
 8005fe0:	e74e      	b.n	8005e80 <__adddf3+0x8c>
 8005fe2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005fe6:	bf18      	it	ne
 8005fe8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8005fec:	d029      	beq.n	8006042 <__adddf3+0x24e>
 8005fee:	ea94 0f05 	teq	r4, r5
 8005ff2:	bf08      	it	eq
 8005ff4:	ea90 0f02 	teqeq	r0, r2
 8005ff8:	d005      	beq.n	8006006 <__adddf3+0x212>
 8005ffa:	ea54 0c00 	orrs.w	ip, r4, r0
 8005ffe:	bf04      	itt	eq
 8006000:	4619      	moveq	r1, r3
 8006002:	4610      	moveq	r0, r2
 8006004:	bd30      	pop	{r4, r5, pc}
 8006006:	ea91 0f03 	teq	r1, r3
 800600a:	bf1e      	ittt	ne
 800600c:	2100      	movne	r1, #0
 800600e:	2000      	movne	r0, #0
 8006010:	bd30      	popne	{r4, r5, pc}
 8006012:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006016:	d105      	bne.n	8006024 <__adddf3+0x230>
 8006018:	0040      	lsls	r0, r0, #1
 800601a:	4149      	adcs	r1, r1
 800601c:	bf28      	it	cs
 800601e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8006022:	bd30      	pop	{r4, r5, pc}
 8006024:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8006028:	bf3c      	itt	cc
 800602a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800602e:	bd30      	popcc	{r4, r5, pc}
 8006030:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8006034:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8006038:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800603c:	f04f 0000 	mov.w	r0, #0
 8006040:	bd30      	pop	{r4, r5, pc}
 8006042:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006046:	bf1a      	itte	ne
 8006048:	4619      	movne	r1, r3
 800604a:	4610      	movne	r0, r2
 800604c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006050:	bf1c      	itt	ne
 8006052:	460b      	movne	r3, r1
 8006054:	4602      	movne	r2, r0
 8006056:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800605a:	bf06      	itte	eq
 800605c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006060:	ea91 0f03 	teqeq	r1, r3
 8006064:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8006068:	bd30      	pop	{r4, r5, pc}
 800606a:	bf00      	nop

0800606c <__aeabi_ui2d>:
 800606c:	f090 0f00 	teq	r0, #0
 8006070:	bf04      	itt	eq
 8006072:	2100      	moveq	r1, #0
 8006074:	4770      	bxeq	lr
 8006076:	b530      	push	{r4, r5, lr}
 8006078:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800607c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006080:	f04f 0500 	mov.w	r5, #0
 8006084:	f04f 0100 	mov.w	r1, #0
 8006088:	e750      	b.n	8005f2c <__adddf3+0x138>
 800608a:	bf00      	nop

0800608c <__aeabi_i2d>:
 800608c:	f090 0f00 	teq	r0, #0
 8006090:	bf04      	itt	eq
 8006092:	2100      	moveq	r1, #0
 8006094:	4770      	bxeq	lr
 8006096:	b530      	push	{r4, r5, lr}
 8006098:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800609c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80060a0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80060a4:	bf48      	it	mi
 80060a6:	4240      	negmi	r0, r0
 80060a8:	f04f 0100 	mov.w	r1, #0
 80060ac:	e73e      	b.n	8005f2c <__adddf3+0x138>
 80060ae:	bf00      	nop

080060b0 <__aeabi_f2d>:
 80060b0:	0042      	lsls	r2, r0, #1
 80060b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80060b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80060ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80060be:	bf1f      	itttt	ne
 80060c0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80060c4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80060c8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80060cc:	4770      	bxne	lr
 80060ce:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80060d2:	bf08      	it	eq
 80060d4:	4770      	bxeq	lr
 80060d6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80060da:	bf04      	itt	eq
 80060dc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80060e0:	4770      	bxeq	lr
 80060e2:	b530      	push	{r4, r5, lr}
 80060e4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80060e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80060ec:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80060f0:	e71c      	b.n	8005f2c <__adddf3+0x138>
 80060f2:	bf00      	nop

080060f4 <__aeabi_ul2d>:
 80060f4:	ea50 0201 	orrs.w	r2, r0, r1
 80060f8:	bf08      	it	eq
 80060fa:	4770      	bxeq	lr
 80060fc:	b530      	push	{r4, r5, lr}
 80060fe:	f04f 0500 	mov.w	r5, #0
 8006102:	e00a      	b.n	800611a <__aeabi_l2d+0x16>

08006104 <__aeabi_l2d>:
 8006104:	ea50 0201 	orrs.w	r2, r0, r1
 8006108:	bf08      	it	eq
 800610a:	4770      	bxeq	lr
 800610c:	b530      	push	{r4, r5, lr}
 800610e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8006112:	d502      	bpl.n	800611a <__aeabi_l2d+0x16>
 8006114:	4240      	negs	r0, r0
 8006116:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800611a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800611e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8006122:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006126:	f43f aed8 	beq.w	8005eda <__adddf3+0xe6>
 800612a:	f04f 0203 	mov.w	r2, #3
 800612e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006132:	bf18      	it	ne
 8006134:	3203      	addne	r2, #3
 8006136:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800613a:	bf18      	it	ne
 800613c:	3203      	addne	r2, #3
 800613e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006142:	f1c2 0320 	rsb	r3, r2, #32
 8006146:	fa00 fc03 	lsl.w	ip, r0, r3
 800614a:	fa20 f002 	lsr.w	r0, r0, r2
 800614e:	fa01 fe03 	lsl.w	lr, r1, r3
 8006152:	ea40 000e 	orr.w	r0, r0, lr
 8006156:	fa21 f102 	lsr.w	r1, r1, r2
 800615a:	4414      	add	r4, r2
 800615c:	e6bd      	b.n	8005eda <__adddf3+0xe6>
 800615e:	bf00      	nop

08006160 <__aeabi_dmul>:
 8006160:	b570      	push	{r4, r5, r6, lr}
 8006162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8006166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800616a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800616e:	bf1d      	ittte	ne
 8006170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006174:	ea94 0f0c 	teqne	r4, ip
 8006178:	ea95 0f0c 	teqne	r5, ip
 800617c:	f000 f8de 	bleq	800633c <__aeabi_dmul+0x1dc>
 8006180:	442c      	add	r4, r5
 8006182:	ea81 0603 	eor.w	r6, r1, r3
 8006186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800618a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800618e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006192:	bf18      	it	ne
 8006194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800619c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061a0:	d038      	beq.n	8006214 <__aeabi_dmul+0xb4>
 80061a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80061a6:	f04f 0500 	mov.w	r5, #0
 80061aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80061ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80061b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80061b6:	f04f 0600 	mov.w	r6, #0
 80061ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80061be:	f09c 0f00 	teq	ip, #0
 80061c2:	bf18      	it	ne
 80061c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80061c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80061cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80061d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80061d4:	d204      	bcs.n	80061e0 <__aeabi_dmul+0x80>
 80061d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80061da:	416d      	adcs	r5, r5
 80061dc:	eb46 0606 	adc.w	r6, r6, r6
 80061e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80061e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80061e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80061ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80061f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80061f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80061f8:	bf88      	it	hi
 80061fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80061fe:	d81e      	bhi.n	800623e <__aeabi_dmul+0xde>
 8006200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8006204:	bf08      	it	eq
 8006206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800620a:	f150 0000 	adcs.w	r0, r0, #0
 800620e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006212:	bd70      	pop	{r4, r5, r6, pc}
 8006214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8006218:	ea46 0101 	orr.w	r1, r6, r1
 800621c:	ea40 0002 	orr.w	r0, r0, r2
 8006220:	ea81 0103 	eor.w	r1, r1, r3
 8006224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006228:	bfc2      	ittt	gt
 800622a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800622e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006232:	bd70      	popgt	{r4, r5, r6, pc}
 8006234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006238:	f04f 0e00 	mov.w	lr, #0
 800623c:	3c01      	subs	r4, #1
 800623e:	f300 80ab 	bgt.w	8006398 <__aeabi_dmul+0x238>
 8006242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8006246:	bfde      	ittt	le
 8006248:	2000      	movle	r0, #0
 800624a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800624e:	bd70      	pople	{r4, r5, r6, pc}
 8006250:	f1c4 0400 	rsb	r4, r4, #0
 8006254:	3c20      	subs	r4, #32
 8006256:	da35      	bge.n	80062c4 <__aeabi_dmul+0x164>
 8006258:	340c      	adds	r4, #12
 800625a:	dc1b      	bgt.n	8006294 <__aeabi_dmul+0x134>
 800625c:	f104 0414 	add.w	r4, r4, #20
 8006260:	f1c4 0520 	rsb	r5, r4, #32
 8006264:	fa00 f305 	lsl.w	r3, r0, r5
 8006268:	fa20 f004 	lsr.w	r0, r0, r4
 800626c:	fa01 f205 	lsl.w	r2, r1, r5
 8006270:	ea40 0002 	orr.w	r0, r0, r2
 8006274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8006278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800627c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006280:	fa21 f604 	lsr.w	r6, r1, r4
 8006284:	eb42 0106 	adc.w	r1, r2, r6
 8006288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800628c:	bf08      	it	eq
 800628e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006292:	bd70      	pop	{r4, r5, r6, pc}
 8006294:	f1c4 040c 	rsb	r4, r4, #12
 8006298:	f1c4 0520 	rsb	r5, r4, #32
 800629c:	fa00 f304 	lsl.w	r3, r0, r4
 80062a0:	fa20 f005 	lsr.w	r0, r0, r5
 80062a4:	fa01 f204 	lsl.w	r2, r1, r4
 80062a8:	ea40 0002 	orr.w	r0, r0, r2
 80062ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80062b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80062b4:	f141 0100 	adc.w	r1, r1, #0
 80062b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062bc:	bf08      	it	eq
 80062be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062c2:	bd70      	pop	{r4, r5, r6, pc}
 80062c4:	f1c4 0520 	rsb	r5, r4, #32
 80062c8:	fa00 f205 	lsl.w	r2, r0, r5
 80062cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80062d0:	fa20 f304 	lsr.w	r3, r0, r4
 80062d4:	fa01 f205 	lsl.w	r2, r1, r5
 80062d8:	ea43 0302 	orr.w	r3, r3, r2
 80062dc:	fa21 f004 	lsr.w	r0, r1, r4
 80062e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80062e4:	fa21 f204 	lsr.w	r2, r1, r4
 80062e8:	ea20 0002 	bic.w	r0, r0, r2
 80062ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80062f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80062f4:	bf08      	it	eq
 80062f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80062fa:	bd70      	pop	{r4, r5, r6, pc}
 80062fc:	f094 0f00 	teq	r4, #0
 8006300:	d10f      	bne.n	8006322 <__aeabi_dmul+0x1c2>
 8006302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8006306:	0040      	lsls	r0, r0, #1
 8006308:	eb41 0101 	adc.w	r1, r1, r1
 800630c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8006310:	bf08      	it	eq
 8006312:	3c01      	subeq	r4, #1
 8006314:	d0f7      	beq.n	8006306 <__aeabi_dmul+0x1a6>
 8006316:	ea41 0106 	orr.w	r1, r1, r6
 800631a:	f095 0f00 	teq	r5, #0
 800631e:	bf18      	it	ne
 8006320:	4770      	bxne	lr
 8006322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8006326:	0052      	lsls	r2, r2, #1
 8006328:	eb43 0303 	adc.w	r3, r3, r3
 800632c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8006330:	bf08      	it	eq
 8006332:	3d01      	subeq	r5, #1
 8006334:	d0f7      	beq.n	8006326 <__aeabi_dmul+0x1c6>
 8006336:	ea43 0306 	orr.w	r3, r3, r6
 800633a:	4770      	bx	lr
 800633c:	ea94 0f0c 	teq	r4, ip
 8006340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006344:	bf18      	it	ne
 8006346:	ea95 0f0c 	teqne	r5, ip
 800634a:	d00c      	beq.n	8006366 <__aeabi_dmul+0x206>
 800634c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006350:	bf18      	it	ne
 8006352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006356:	d1d1      	bne.n	80062fc <__aeabi_dmul+0x19c>
 8006358:	ea81 0103 	eor.w	r1, r1, r3
 800635c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8006360:	f04f 0000 	mov.w	r0, #0
 8006364:	bd70      	pop	{r4, r5, r6, pc}
 8006366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800636a:	bf06      	itte	eq
 800636c:	4610      	moveq	r0, r2
 800636e:	4619      	moveq	r1, r3
 8006370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006374:	d019      	beq.n	80063aa <__aeabi_dmul+0x24a>
 8006376:	ea94 0f0c 	teq	r4, ip
 800637a:	d102      	bne.n	8006382 <__aeabi_dmul+0x222>
 800637c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006380:	d113      	bne.n	80063aa <__aeabi_dmul+0x24a>
 8006382:	ea95 0f0c 	teq	r5, ip
 8006386:	d105      	bne.n	8006394 <__aeabi_dmul+0x234>
 8006388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800638c:	bf1c      	itt	ne
 800638e:	4610      	movne	r0, r2
 8006390:	4619      	movne	r1, r3
 8006392:	d10a      	bne.n	80063aa <__aeabi_dmul+0x24a>
 8006394:	ea81 0103 	eor.w	r1, r1, r3
 8006398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800639c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80063a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80063a4:	f04f 0000 	mov.w	r0, #0
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80063ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80063b2:	bd70      	pop	{r4, r5, r6, pc}

080063b4 <__aeabi_ddiv>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80063ba:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80063be:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80063c2:	bf1d      	ittte	ne
 80063c4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80063c8:	ea94 0f0c 	teqne	r4, ip
 80063cc:	ea95 0f0c 	teqne	r5, ip
 80063d0:	f000 f8a7 	bleq	8006522 <__aeabi_ddiv+0x16e>
 80063d4:	eba4 0405 	sub.w	r4, r4, r5
 80063d8:	ea81 0e03 	eor.w	lr, r1, r3
 80063dc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80063e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80063e4:	f000 8088 	beq.w	80064f8 <__aeabi_ddiv+0x144>
 80063e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80063ec:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80063f0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80063f4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80063f8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80063fc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006400:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006404:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006408:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800640c:	429d      	cmp	r5, r3
 800640e:	bf08      	it	eq
 8006410:	4296      	cmpeq	r6, r2
 8006412:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8006416:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800641a:	d202      	bcs.n	8006422 <__aeabi_ddiv+0x6e>
 800641c:	085b      	lsrs	r3, r3, #1
 800641e:	ea4f 0232 	mov.w	r2, r2, rrx
 8006422:	1ab6      	subs	r6, r6, r2
 8006424:	eb65 0503 	sbc.w	r5, r5, r3
 8006428:	085b      	lsrs	r3, r3, #1
 800642a:	ea4f 0232 	mov.w	r2, r2, rrx
 800642e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006432:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8006436:	ebb6 0e02 	subs.w	lr, r6, r2
 800643a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800643e:	bf22      	ittt	cs
 8006440:	1ab6      	subcs	r6, r6, r2
 8006442:	4675      	movcs	r5, lr
 8006444:	ea40 000c 	orrcs.w	r0, r0, ip
 8006448:	085b      	lsrs	r3, r3, #1
 800644a:	ea4f 0232 	mov.w	r2, r2, rrx
 800644e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006452:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006456:	bf22      	ittt	cs
 8006458:	1ab6      	subcs	r6, r6, r2
 800645a:	4675      	movcs	r5, lr
 800645c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8006460:	085b      	lsrs	r3, r3, #1
 8006462:	ea4f 0232 	mov.w	r2, r2, rrx
 8006466:	ebb6 0e02 	subs.w	lr, r6, r2
 800646a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800646e:	bf22      	ittt	cs
 8006470:	1ab6      	subcs	r6, r6, r2
 8006472:	4675      	movcs	r5, lr
 8006474:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8006478:	085b      	lsrs	r3, r3, #1
 800647a:	ea4f 0232 	mov.w	r2, r2, rrx
 800647e:	ebb6 0e02 	subs.w	lr, r6, r2
 8006482:	eb75 0e03 	sbcs.w	lr, r5, r3
 8006486:	bf22      	ittt	cs
 8006488:	1ab6      	subcs	r6, r6, r2
 800648a:	4675      	movcs	r5, lr
 800648c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8006490:	ea55 0e06 	orrs.w	lr, r5, r6
 8006494:	d018      	beq.n	80064c8 <__aeabi_ddiv+0x114>
 8006496:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800649a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800649e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80064a2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80064a6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80064aa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80064ae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80064b2:	d1c0      	bne.n	8006436 <__aeabi_ddiv+0x82>
 80064b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80064b8:	d10b      	bne.n	80064d2 <__aeabi_ddiv+0x11e>
 80064ba:	ea41 0100 	orr.w	r1, r1, r0
 80064be:	f04f 0000 	mov.w	r0, #0
 80064c2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80064c6:	e7b6      	b.n	8006436 <__aeabi_ddiv+0x82>
 80064c8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80064cc:	bf04      	itt	eq
 80064ce:	4301      	orreq	r1, r0
 80064d0:	2000      	moveq	r0, #0
 80064d2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80064d6:	bf88      	it	hi
 80064d8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80064dc:	f63f aeaf 	bhi.w	800623e <__aeabi_dmul+0xde>
 80064e0:	ebb5 0c03 	subs.w	ip, r5, r3
 80064e4:	bf04      	itt	eq
 80064e6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80064ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80064ee:	f150 0000 	adcs.w	r0, r0, #0
 80064f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80064f6:	bd70      	pop	{r4, r5, r6, pc}
 80064f8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80064fc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8006500:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8006504:	bfc2      	ittt	gt
 8006506:	ebd4 050c 	rsbsgt	r5, r4, ip
 800650a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800650e:	bd70      	popgt	{r4, r5, r6, pc}
 8006510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8006514:	f04f 0e00 	mov.w	lr, #0
 8006518:	3c01      	subs	r4, #1
 800651a:	e690      	b.n	800623e <__aeabi_dmul+0xde>
 800651c:	ea45 0e06 	orr.w	lr, r5, r6
 8006520:	e68d      	b.n	800623e <__aeabi_dmul+0xde>
 8006522:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006526:	ea94 0f0c 	teq	r4, ip
 800652a:	bf08      	it	eq
 800652c:	ea95 0f0c 	teqeq	r5, ip
 8006530:	f43f af3b 	beq.w	80063aa <__aeabi_dmul+0x24a>
 8006534:	ea94 0f0c 	teq	r4, ip
 8006538:	d10a      	bne.n	8006550 <__aeabi_ddiv+0x19c>
 800653a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800653e:	f47f af34 	bne.w	80063aa <__aeabi_dmul+0x24a>
 8006542:	ea95 0f0c 	teq	r5, ip
 8006546:	f47f af25 	bne.w	8006394 <__aeabi_dmul+0x234>
 800654a:	4610      	mov	r0, r2
 800654c:	4619      	mov	r1, r3
 800654e:	e72c      	b.n	80063aa <__aeabi_dmul+0x24a>
 8006550:	ea95 0f0c 	teq	r5, ip
 8006554:	d106      	bne.n	8006564 <__aeabi_ddiv+0x1b0>
 8006556:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800655a:	f43f aefd 	beq.w	8006358 <__aeabi_dmul+0x1f8>
 800655e:	4610      	mov	r0, r2
 8006560:	4619      	mov	r1, r3
 8006562:	e722      	b.n	80063aa <__aeabi_dmul+0x24a>
 8006564:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006568:	bf18      	it	ne
 800656a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800656e:	f47f aec5 	bne.w	80062fc <__aeabi_dmul+0x19c>
 8006572:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8006576:	f47f af0d 	bne.w	8006394 <__aeabi_dmul+0x234>
 800657a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800657e:	f47f aeeb 	bne.w	8006358 <__aeabi_dmul+0x1f8>
 8006582:	e712      	b.n	80063aa <__aeabi_dmul+0x24a>

08006584 <__gedf2>:
 8006584:	f04f 3cff 	mov.w	ip, #4294967295
 8006588:	e006      	b.n	8006598 <__cmpdf2+0x4>
 800658a:	bf00      	nop

0800658c <__ledf2>:
 800658c:	f04f 0c01 	mov.w	ip, #1
 8006590:	e002      	b.n	8006598 <__cmpdf2+0x4>
 8006592:	bf00      	nop

08006594 <__cmpdf2>:
 8006594:	f04f 0c01 	mov.w	ip, #1
 8006598:	f84d cd04 	str.w	ip, [sp, #-4]!
 800659c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80065a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065a8:	bf18      	it	ne
 80065aa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80065ae:	d01b      	beq.n	80065e8 <__cmpdf2+0x54>
 80065b0:	b001      	add	sp, #4
 80065b2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80065b6:	bf0c      	ite	eq
 80065b8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80065bc:	ea91 0f03 	teqne	r1, r3
 80065c0:	bf02      	ittt	eq
 80065c2:	ea90 0f02 	teqeq	r0, r2
 80065c6:	2000      	moveq	r0, #0
 80065c8:	4770      	bxeq	lr
 80065ca:	f110 0f00 	cmn.w	r0, #0
 80065ce:	ea91 0f03 	teq	r1, r3
 80065d2:	bf58      	it	pl
 80065d4:	4299      	cmppl	r1, r3
 80065d6:	bf08      	it	eq
 80065d8:	4290      	cmpeq	r0, r2
 80065da:	bf2c      	ite	cs
 80065dc:	17d8      	asrcs	r0, r3, #31
 80065de:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80065e2:	f040 0001 	orr.w	r0, r0, #1
 80065e6:	4770      	bx	lr
 80065e8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80065ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80065f0:	d102      	bne.n	80065f8 <__cmpdf2+0x64>
 80065f2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80065f6:	d107      	bne.n	8006608 <__cmpdf2+0x74>
 80065f8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80065fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8006600:	d1d6      	bne.n	80065b0 <__cmpdf2+0x1c>
 8006602:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8006606:	d0d3      	beq.n	80065b0 <__cmpdf2+0x1c>
 8006608:	f85d 0b04 	ldr.w	r0, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop

08006610 <__aeabi_cdrcmple>:
 8006610:	4684      	mov	ip, r0
 8006612:	4610      	mov	r0, r2
 8006614:	4662      	mov	r2, ip
 8006616:	468c      	mov	ip, r1
 8006618:	4619      	mov	r1, r3
 800661a:	4663      	mov	r3, ip
 800661c:	e000      	b.n	8006620 <__aeabi_cdcmpeq>
 800661e:	bf00      	nop

08006620 <__aeabi_cdcmpeq>:
 8006620:	b501      	push	{r0, lr}
 8006622:	f7ff ffb7 	bl	8006594 <__cmpdf2>
 8006626:	2800      	cmp	r0, #0
 8006628:	bf48      	it	mi
 800662a:	f110 0f00 	cmnmi.w	r0, #0
 800662e:	bd01      	pop	{r0, pc}

08006630 <__aeabi_dcmpeq>:
 8006630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006634:	f7ff fff4 	bl	8006620 <__aeabi_cdcmpeq>
 8006638:	bf0c      	ite	eq
 800663a:	2001      	moveq	r0, #1
 800663c:	2000      	movne	r0, #0
 800663e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006642:	bf00      	nop

08006644 <__aeabi_dcmplt>:
 8006644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006648:	f7ff ffea 	bl	8006620 <__aeabi_cdcmpeq>
 800664c:	bf34      	ite	cc
 800664e:	2001      	movcc	r0, #1
 8006650:	2000      	movcs	r0, #0
 8006652:	f85d fb08 	ldr.w	pc, [sp], #8
 8006656:	bf00      	nop

08006658 <__aeabi_dcmple>:
 8006658:	f84d ed08 	str.w	lr, [sp, #-8]!
 800665c:	f7ff ffe0 	bl	8006620 <__aeabi_cdcmpeq>
 8006660:	bf94      	ite	ls
 8006662:	2001      	movls	r0, #1
 8006664:	2000      	movhi	r0, #0
 8006666:	f85d fb08 	ldr.w	pc, [sp], #8
 800666a:	bf00      	nop

0800666c <__aeabi_dcmpge>:
 800666c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006670:	f7ff ffce 	bl	8006610 <__aeabi_cdrcmple>
 8006674:	bf94      	ite	ls
 8006676:	2001      	movls	r0, #1
 8006678:	2000      	movhi	r0, #0
 800667a:	f85d fb08 	ldr.w	pc, [sp], #8
 800667e:	bf00      	nop

08006680 <__aeabi_dcmpgt>:
 8006680:	f84d ed08 	str.w	lr, [sp, #-8]!
 8006684:	f7ff ffc4 	bl	8006610 <__aeabi_cdrcmple>
 8006688:	bf34      	ite	cc
 800668a:	2001      	movcc	r0, #1
 800668c:	2000      	movcs	r0, #0
 800668e:	f85d fb08 	ldr.w	pc, [sp], #8
 8006692:	bf00      	nop

08006694 <__aeabi_d2iz>:
 8006694:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8006698:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800669c:	d215      	bcs.n	80066ca <__aeabi_d2iz+0x36>
 800669e:	d511      	bpl.n	80066c4 <__aeabi_d2iz+0x30>
 80066a0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80066a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80066a8:	d912      	bls.n	80066d0 <__aeabi_d2iz+0x3c>
 80066aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80066ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80066b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80066b6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80066ba:	fa23 f002 	lsr.w	r0, r3, r2
 80066be:	bf18      	it	ne
 80066c0:	4240      	negne	r0, r0
 80066c2:	4770      	bx	lr
 80066c4:	f04f 0000 	mov.w	r0, #0
 80066c8:	4770      	bx	lr
 80066ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80066ce:	d105      	bne.n	80066dc <__aeabi_d2iz+0x48>
 80066d0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80066d4:	bf08      	it	eq
 80066d6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80066da:	4770      	bx	lr
 80066dc:	f04f 0000 	mov.w	r0, #0
 80066e0:	4770      	bx	lr
 80066e2:	bf00      	nop

080066e4 <__aeabi_d2uiz>:
 80066e4:	004a      	lsls	r2, r1, #1
 80066e6:	d211      	bcs.n	800670c <__aeabi_d2uiz+0x28>
 80066e8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80066ec:	d211      	bcs.n	8006712 <__aeabi_d2uiz+0x2e>
 80066ee:	d50d      	bpl.n	800670c <__aeabi_d2uiz+0x28>
 80066f0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80066f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80066f8:	d40e      	bmi.n	8006718 <__aeabi_d2uiz+0x34>
 80066fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80066fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006702:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8006706:	fa23 f002 	lsr.w	r0, r3, r2
 800670a:	4770      	bx	lr
 800670c:	f04f 0000 	mov.w	r0, #0
 8006710:	4770      	bx	lr
 8006712:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8006716:	d102      	bne.n	800671e <__aeabi_d2uiz+0x3a>
 8006718:	f04f 30ff 	mov.w	r0, #4294967295
 800671c:	4770      	bx	lr
 800671e:	f04f 0000 	mov.w	r0, #0
 8006722:	4770      	bx	lr

08006724 <__aeabi_uldivmod>:
 8006724:	b953      	cbnz	r3, 800673c <__aeabi_uldivmod+0x18>
 8006726:	b94a      	cbnz	r2, 800673c <__aeabi_uldivmod+0x18>
 8006728:	2900      	cmp	r1, #0
 800672a:	bf08      	it	eq
 800672c:	2800      	cmpeq	r0, #0
 800672e:	bf1c      	itt	ne
 8006730:	f04f 31ff 	movne.w	r1, #4294967295
 8006734:	f04f 30ff 	movne.w	r0, #4294967295
 8006738:	f000 b9a0 	b.w	8006a7c <__aeabi_idiv0>
 800673c:	f1ad 0c08 	sub.w	ip, sp, #8
 8006740:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8006744:	f000 f83c 	bl	80067c0 <__udivmoddi4>
 8006748:	f8dd e004 	ldr.w	lr, [sp, #4]
 800674c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006750:	b004      	add	sp, #16
 8006752:	4770      	bx	lr

08006754 <__aeabi_d2lz>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	2200      	movs	r2, #0
 8006758:	2300      	movs	r3, #0
 800675a:	4604      	mov	r4, r0
 800675c:	460d      	mov	r5, r1
 800675e:	f7ff ff71 	bl	8006644 <__aeabi_dcmplt>
 8006762:	b928      	cbnz	r0, 8006770 <__aeabi_d2lz+0x1c>
 8006764:	4620      	mov	r0, r4
 8006766:	4629      	mov	r1, r5
 8006768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800676c:	f000 b80a 	b.w	8006784 <__aeabi_d2ulz>
 8006770:	4620      	mov	r0, r4
 8006772:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8006776:	f000 f805 	bl	8006784 <__aeabi_d2ulz>
 800677a:	4240      	negs	r0, r0
 800677c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006780:	bd38      	pop	{r3, r4, r5, pc}
 8006782:	bf00      	nop

08006784 <__aeabi_d2ulz>:
 8006784:	b5d0      	push	{r4, r6, r7, lr}
 8006786:	4b0c      	ldr	r3, [pc, #48]	@ (80067b8 <__aeabi_d2ulz+0x34>)
 8006788:	2200      	movs	r2, #0
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	f7ff fce7 	bl	8006160 <__aeabi_dmul>
 8006792:	f7ff ffa7 	bl	80066e4 <__aeabi_d2uiz>
 8006796:	4604      	mov	r4, r0
 8006798:	f7ff fc68 	bl	800606c <__aeabi_ui2d>
 800679c:	4b07      	ldr	r3, [pc, #28]	@ (80067bc <__aeabi_d2ulz+0x38>)
 800679e:	2200      	movs	r2, #0
 80067a0:	f7ff fcde 	bl	8006160 <__aeabi_dmul>
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	f7ff fb20 	bl	8005df0 <__aeabi_dsub>
 80067b0:	f7ff ff98 	bl	80066e4 <__aeabi_d2uiz>
 80067b4:	4621      	mov	r1, r4
 80067b6:	bdd0      	pop	{r4, r6, r7, pc}
 80067b8:	3df00000 	.word	0x3df00000
 80067bc:	41f00000 	.word	0x41f00000

080067c0 <__udivmoddi4>:
 80067c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067c4:	9d08      	ldr	r5, [sp, #32]
 80067c6:	460c      	mov	r4, r1
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d14e      	bne.n	800686a <__udivmoddi4+0xaa>
 80067cc:	4694      	mov	ip, r2
 80067ce:	458c      	cmp	ip, r1
 80067d0:	4686      	mov	lr, r0
 80067d2:	fab2 f282 	clz	r2, r2
 80067d6:	d962      	bls.n	800689e <__udivmoddi4+0xde>
 80067d8:	b14a      	cbz	r2, 80067ee <__udivmoddi4+0x2e>
 80067da:	f1c2 0320 	rsb	r3, r2, #32
 80067de:	4091      	lsls	r1, r2
 80067e0:	fa20 f303 	lsr.w	r3, r0, r3
 80067e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80067e8:	4319      	orrs	r1, r3
 80067ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80067ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80067f2:	fa1f f68c 	uxth.w	r6, ip
 80067f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80067fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80067fe:	fb07 1114 	mls	r1, r7, r4, r1
 8006802:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006806:	fb04 f106 	mul.w	r1, r4, r6
 800680a:	4299      	cmp	r1, r3
 800680c:	d90a      	bls.n	8006824 <__udivmoddi4+0x64>
 800680e:	eb1c 0303 	adds.w	r3, ip, r3
 8006812:	f104 30ff 	add.w	r0, r4, #4294967295
 8006816:	f080 8112 	bcs.w	8006a3e <__udivmoddi4+0x27e>
 800681a:	4299      	cmp	r1, r3
 800681c:	f240 810f 	bls.w	8006a3e <__udivmoddi4+0x27e>
 8006820:	3c02      	subs	r4, #2
 8006822:	4463      	add	r3, ip
 8006824:	1a59      	subs	r1, r3, r1
 8006826:	fa1f f38e 	uxth.w	r3, lr
 800682a:	fbb1 f0f7 	udiv	r0, r1, r7
 800682e:	fb07 1110 	mls	r1, r7, r0, r1
 8006832:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8006836:	fb00 f606 	mul.w	r6, r0, r6
 800683a:	429e      	cmp	r6, r3
 800683c:	d90a      	bls.n	8006854 <__udivmoddi4+0x94>
 800683e:	eb1c 0303 	adds.w	r3, ip, r3
 8006842:	f100 31ff 	add.w	r1, r0, #4294967295
 8006846:	f080 80fc 	bcs.w	8006a42 <__udivmoddi4+0x282>
 800684a:	429e      	cmp	r6, r3
 800684c:	f240 80f9 	bls.w	8006a42 <__udivmoddi4+0x282>
 8006850:	4463      	add	r3, ip
 8006852:	3802      	subs	r0, #2
 8006854:	1b9b      	subs	r3, r3, r6
 8006856:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800685a:	2100      	movs	r1, #0
 800685c:	b11d      	cbz	r5, 8006866 <__udivmoddi4+0xa6>
 800685e:	40d3      	lsrs	r3, r2
 8006860:	2200      	movs	r2, #0
 8006862:	e9c5 3200 	strd	r3, r2, [r5]
 8006866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686a:	428b      	cmp	r3, r1
 800686c:	d905      	bls.n	800687a <__udivmoddi4+0xba>
 800686e:	b10d      	cbz	r5, 8006874 <__udivmoddi4+0xb4>
 8006870:	e9c5 0100 	strd	r0, r1, [r5]
 8006874:	2100      	movs	r1, #0
 8006876:	4608      	mov	r0, r1
 8006878:	e7f5      	b.n	8006866 <__udivmoddi4+0xa6>
 800687a:	fab3 f183 	clz	r1, r3
 800687e:	2900      	cmp	r1, #0
 8006880:	d146      	bne.n	8006910 <__udivmoddi4+0x150>
 8006882:	42a3      	cmp	r3, r4
 8006884:	d302      	bcc.n	800688c <__udivmoddi4+0xcc>
 8006886:	4290      	cmp	r0, r2
 8006888:	f0c0 80f0 	bcc.w	8006a6c <__udivmoddi4+0x2ac>
 800688c:	1a86      	subs	r6, r0, r2
 800688e:	eb64 0303 	sbc.w	r3, r4, r3
 8006892:	2001      	movs	r0, #1
 8006894:	2d00      	cmp	r5, #0
 8006896:	d0e6      	beq.n	8006866 <__udivmoddi4+0xa6>
 8006898:	e9c5 6300 	strd	r6, r3, [r5]
 800689c:	e7e3      	b.n	8006866 <__udivmoddi4+0xa6>
 800689e:	2a00      	cmp	r2, #0
 80068a0:	f040 8090 	bne.w	80069c4 <__udivmoddi4+0x204>
 80068a4:	eba1 040c 	sub.w	r4, r1, ip
 80068a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80068ac:	fa1f f78c 	uxth.w	r7, ip
 80068b0:	2101      	movs	r1, #1
 80068b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80068b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80068ba:	fb08 4416 	mls	r4, r8, r6, r4
 80068be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80068c2:	fb07 f006 	mul.w	r0, r7, r6
 80068c6:	4298      	cmp	r0, r3
 80068c8:	d908      	bls.n	80068dc <__udivmoddi4+0x11c>
 80068ca:	eb1c 0303 	adds.w	r3, ip, r3
 80068ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80068d2:	d202      	bcs.n	80068da <__udivmoddi4+0x11a>
 80068d4:	4298      	cmp	r0, r3
 80068d6:	f200 80cd 	bhi.w	8006a74 <__udivmoddi4+0x2b4>
 80068da:	4626      	mov	r6, r4
 80068dc:	1a1c      	subs	r4, r3, r0
 80068de:	fa1f f38e 	uxth.w	r3, lr
 80068e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80068e6:	fb08 4410 	mls	r4, r8, r0, r4
 80068ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80068ee:	fb00 f707 	mul.w	r7, r0, r7
 80068f2:	429f      	cmp	r7, r3
 80068f4:	d908      	bls.n	8006908 <__udivmoddi4+0x148>
 80068f6:	eb1c 0303 	adds.w	r3, ip, r3
 80068fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80068fe:	d202      	bcs.n	8006906 <__udivmoddi4+0x146>
 8006900:	429f      	cmp	r7, r3
 8006902:	f200 80b0 	bhi.w	8006a66 <__udivmoddi4+0x2a6>
 8006906:	4620      	mov	r0, r4
 8006908:	1bdb      	subs	r3, r3, r7
 800690a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800690e:	e7a5      	b.n	800685c <__udivmoddi4+0x9c>
 8006910:	f1c1 0620 	rsb	r6, r1, #32
 8006914:	408b      	lsls	r3, r1
 8006916:	fa22 f706 	lsr.w	r7, r2, r6
 800691a:	431f      	orrs	r7, r3
 800691c:	fa20 fc06 	lsr.w	ip, r0, r6
 8006920:	fa04 f301 	lsl.w	r3, r4, r1
 8006924:	ea43 030c 	orr.w	r3, r3, ip
 8006928:	40f4      	lsrs	r4, r6
 800692a:	fa00 f801 	lsl.w	r8, r0, r1
 800692e:	0c38      	lsrs	r0, r7, #16
 8006930:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8006934:	fbb4 fef0 	udiv	lr, r4, r0
 8006938:	fa1f fc87 	uxth.w	ip, r7
 800693c:	fb00 441e 	mls	r4, r0, lr, r4
 8006940:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006944:	fb0e f90c 	mul.w	r9, lr, ip
 8006948:	45a1      	cmp	r9, r4
 800694a:	fa02 f201 	lsl.w	r2, r2, r1
 800694e:	d90a      	bls.n	8006966 <__udivmoddi4+0x1a6>
 8006950:	193c      	adds	r4, r7, r4
 8006952:	f10e 3aff 	add.w	sl, lr, #4294967295
 8006956:	f080 8084 	bcs.w	8006a62 <__udivmoddi4+0x2a2>
 800695a:	45a1      	cmp	r9, r4
 800695c:	f240 8081 	bls.w	8006a62 <__udivmoddi4+0x2a2>
 8006960:	f1ae 0e02 	sub.w	lr, lr, #2
 8006964:	443c      	add	r4, r7
 8006966:	eba4 0409 	sub.w	r4, r4, r9
 800696a:	fa1f f983 	uxth.w	r9, r3
 800696e:	fbb4 f3f0 	udiv	r3, r4, r0
 8006972:	fb00 4413 	mls	r4, r0, r3, r4
 8006976:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800697a:	fb03 fc0c 	mul.w	ip, r3, ip
 800697e:	45a4      	cmp	ip, r4
 8006980:	d907      	bls.n	8006992 <__udivmoddi4+0x1d2>
 8006982:	193c      	adds	r4, r7, r4
 8006984:	f103 30ff 	add.w	r0, r3, #4294967295
 8006988:	d267      	bcs.n	8006a5a <__udivmoddi4+0x29a>
 800698a:	45a4      	cmp	ip, r4
 800698c:	d965      	bls.n	8006a5a <__udivmoddi4+0x29a>
 800698e:	3b02      	subs	r3, #2
 8006990:	443c      	add	r4, r7
 8006992:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8006996:	fba0 9302 	umull	r9, r3, r0, r2
 800699a:	eba4 040c 	sub.w	r4, r4, ip
 800699e:	429c      	cmp	r4, r3
 80069a0:	46ce      	mov	lr, r9
 80069a2:	469c      	mov	ip, r3
 80069a4:	d351      	bcc.n	8006a4a <__udivmoddi4+0x28a>
 80069a6:	d04e      	beq.n	8006a46 <__udivmoddi4+0x286>
 80069a8:	b155      	cbz	r5, 80069c0 <__udivmoddi4+0x200>
 80069aa:	ebb8 030e 	subs.w	r3, r8, lr
 80069ae:	eb64 040c 	sbc.w	r4, r4, ip
 80069b2:	fa04 f606 	lsl.w	r6, r4, r6
 80069b6:	40cb      	lsrs	r3, r1
 80069b8:	431e      	orrs	r6, r3
 80069ba:	40cc      	lsrs	r4, r1
 80069bc:	e9c5 6400 	strd	r6, r4, [r5]
 80069c0:	2100      	movs	r1, #0
 80069c2:	e750      	b.n	8006866 <__udivmoddi4+0xa6>
 80069c4:	f1c2 0320 	rsb	r3, r2, #32
 80069c8:	fa20 f103 	lsr.w	r1, r0, r3
 80069cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80069d0:	fa24 f303 	lsr.w	r3, r4, r3
 80069d4:	4094      	lsls	r4, r2
 80069d6:	430c      	orrs	r4, r1
 80069d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80069dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80069e0:	fa1f f78c 	uxth.w	r7, ip
 80069e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80069e8:	fb08 3110 	mls	r1, r8, r0, r3
 80069ec:	0c23      	lsrs	r3, r4, #16
 80069ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80069f2:	fb00 f107 	mul.w	r1, r0, r7
 80069f6:	4299      	cmp	r1, r3
 80069f8:	d908      	bls.n	8006a0c <__udivmoddi4+0x24c>
 80069fa:	eb1c 0303 	adds.w	r3, ip, r3
 80069fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8006a02:	d22c      	bcs.n	8006a5e <__udivmoddi4+0x29e>
 8006a04:	4299      	cmp	r1, r3
 8006a06:	d92a      	bls.n	8006a5e <__udivmoddi4+0x29e>
 8006a08:	3802      	subs	r0, #2
 8006a0a:	4463      	add	r3, ip
 8006a0c:	1a5b      	subs	r3, r3, r1
 8006a0e:	b2a4      	uxth	r4, r4
 8006a10:	fbb3 f1f8 	udiv	r1, r3, r8
 8006a14:	fb08 3311 	mls	r3, r8, r1, r3
 8006a18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8006a1c:	fb01 f307 	mul.w	r3, r1, r7
 8006a20:	42a3      	cmp	r3, r4
 8006a22:	d908      	bls.n	8006a36 <__udivmoddi4+0x276>
 8006a24:	eb1c 0404 	adds.w	r4, ip, r4
 8006a28:	f101 36ff 	add.w	r6, r1, #4294967295
 8006a2c:	d213      	bcs.n	8006a56 <__udivmoddi4+0x296>
 8006a2e:	42a3      	cmp	r3, r4
 8006a30:	d911      	bls.n	8006a56 <__udivmoddi4+0x296>
 8006a32:	3902      	subs	r1, #2
 8006a34:	4464      	add	r4, ip
 8006a36:	1ae4      	subs	r4, r4, r3
 8006a38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a3c:	e739      	b.n	80068b2 <__udivmoddi4+0xf2>
 8006a3e:	4604      	mov	r4, r0
 8006a40:	e6f0      	b.n	8006824 <__udivmoddi4+0x64>
 8006a42:	4608      	mov	r0, r1
 8006a44:	e706      	b.n	8006854 <__udivmoddi4+0x94>
 8006a46:	45c8      	cmp	r8, r9
 8006a48:	d2ae      	bcs.n	80069a8 <__udivmoddi4+0x1e8>
 8006a4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8006a4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8006a52:	3801      	subs	r0, #1
 8006a54:	e7a8      	b.n	80069a8 <__udivmoddi4+0x1e8>
 8006a56:	4631      	mov	r1, r6
 8006a58:	e7ed      	b.n	8006a36 <__udivmoddi4+0x276>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	e799      	b.n	8006992 <__udivmoddi4+0x1d2>
 8006a5e:	4630      	mov	r0, r6
 8006a60:	e7d4      	b.n	8006a0c <__udivmoddi4+0x24c>
 8006a62:	46d6      	mov	lr, sl
 8006a64:	e77f      	b.n	8006966 <__udivmoddi4+0x1a6>
 8006a66:	4463      	add	r3, ip
 8006a68:	3802      	subs	r0, #2
 8006a6a:	e74d      	b.n	8006908 <__udivmoddi4+0x148>
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	4623      	mov	r3, r4
 8006a70:	4608      	mov	r0, r1
 8006a72:	e70f      	b.n	8006894 <__udivmoddi4+0xd4>
 8006a74:	3e02      	subs	r6, #2
 8006a76:	4463      	add	r3, ip
 8006a78:	e730      	b.n	80068dc <__udivmoddi4+0x11c>
 8006a7a:	bf00      	nop

08006a7c <__aeabi_idiv0>:
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop

08006a80 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8006a80:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a82:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a84:	3304      	adds	r3, #4

08006a86 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a86:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a88:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8006a8a:	d3f9      	bcc.n	8006a80 <CopyDataInit>
  bx lr
 8006a8c:	4770      	bx	lr

08006a8e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8006a8e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8006a90:	3004      	adds	r0, #4

08006a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8006a92:	4288      	cmp	r0, r1
  bcc FillZerobss
 8006a94:	d3fb      	bcc.n	8006a8e <FillZerobss>
  bx lr
 8006a96:	4770      	bx	lr

08006a98 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006a98:	480c      	ldr	r0, [pc, #48]	@ (8006acc <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8006a9a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006a9c:	f005 f944 	bl	800bd28 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8006aa0:	480b      	ldr	r0, [pc, #44]	@ (8006ad0 <LoopForever+0x8>)
 8006aa2:	490c      	ldr	r1, [pc, #48]	@ (8006ad4 <LoopForever+0xc>)
 8006aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <LoopForever+0x10>)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f7ff ffed 	bl	8006a86 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8006aac:	480b      	ldr	r0, [pc, #44]	@ (8006adc <LoopForever+0x14>)
 8006aae:	490c      	ldr	r1, [pc, #48]	@ (8006ae0 <LoopForever+0x18>)
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f7ff ffee 	bl	8006a92 <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006ab6:	480b      	ldr	r0, [pc, #44]	@ (8006ae4 <LoopForever+0x1c>)
 8006ab8:	490b      	ldr	r1, [pc, #44]	@ (8006ae8 <LoopForever+0x20>)
 8006aba:	2300      	movs	r3, #0
 8006abc:	f7ff ffe9 	bl	8006a92 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8006ac0:	f010 fb36 	bl	8017130 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8006ac4:	f001 fbbc 	bl	8008240 <main>

08006ac8 <LoopForever>:

LoopForever:
  b LoopForever
 8006ac8:	e7fe      	b.n	8006ac8 <LoopForever>
 8006aca:	0000      	.short	0x0000
  ldr   r0, =_estack
 8006acc:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8006ad0:	20000008 	.word	0x20000008
 8006ad4:	20000110 	.word	0x20000110
 8006ad8:	08019314 	.word	0x08019314
  INIT_BSS _sbss, _ebss
 8006adc:	20000130 	.word	0x20000130
 8006ae0:	20001e7c 	.word	0x20001e7c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8006ae4:	200300e4 	.word	0x200300e4
 8006ae8:	20030b5a 	.word	0x20030b5a

08006aec <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006aec:	e7fe      	b.n	8006aec <ADC1_IRQHandler>
	...

08006af0 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8006af8:	4b07      	ldr	r3, [pc, #28]	@ (8006b18 <LL_C2_PWR_SetPowerMode+0x28>)
 8006afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006afe:	f023 0207 	bic.w	r2, r3, #7
 8006b02:	4905      	ldr	r1, [pc, #20]	@ (8006b18 <LL_C2_PWR_SetPowerMode+0x28>)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr
 8006b18:	58000400 	.word	0x58000400

08006b1c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006b24:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <LL_EXTI_EnableIT_32_63+0x24>)
 8006b26:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006b2a:	4905      	ldr	r1, [pc, #20]	@ (8006b40 <LL_EXTI_EnableIT_32_63+0x24>)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006b34:	bf00      	nop
 8006b36:	370c      	adds	r7, #12
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	58000800 	.word	0x58000800

08006b44 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 8006b4c:	4b06      	ldr	r3, [pc, #24]	@ (8006b68 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8006b4e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8006b52:	4905      	ldr	r1, [pc, #20]	@ (8006b68 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c1 30d0 	str.w	r3, [r1, #208]	@ 0xd0
}
 8006b5c:	bf00      	nop
 8006b5e:	370c      	adds	r7, #12
 8006b60:	46bd      	mov	sp, r7
 8006b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b66:	4770      	bx	lr
 8006b68:	58000800 	.word	0x58000800

08006b6c <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8006b74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b78:	4a0a      	ldr	r2, [pc, #40]	@ (8006ba4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8006b7a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 8006b7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006b82:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b86:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	021b      	lsls	r3, r3, #8
 8006b8e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006b92:	4313      	orrs	r3, r2
 8006b94:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 8006b98:	bf00      	nop
 8006b9a:	370c      	adds	r7, #12
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	cafecafe 	.word	0xcafecafe

08006ba8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8006bb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006bba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	608b      	str	r3, [r1, #8]
}
 8006bc4:	bf00      	nop
 8006bc6:	370c      	adds	r7, #12
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bce:	4770      	bx	lr

08006bd0 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bd4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bdc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006be4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006be8:	bf00      	nop
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8006bf6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006bfe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006c02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006c0a:	bf00      	nop
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr

08006c14 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8006c18:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c20:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006c24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006c28:	d101      	bne.n	8006c2e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 8006c2e:	2300      	movs	r3, #0
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 8006c3e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006c4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c4e:	d101      	bne.n	8006c54 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 8006c50:	2301      	movs	r3, #1
 8006c52:	e000      	b.n	8006c56 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8006c54:	2300      	movs	r3, #0
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr

08006c60 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006c68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c6e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006c78:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4013      	ands	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006c84:	68fb      	ldr	r3, [r7, #12]
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	685a      	ldr	r2, [r3, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	041b      	lsls	r3, r3, #16
 8006ca4:	431a      	orrs	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	605a      	str	r2, [r3, #4]
}
 8006caa:	bf00      	nop
 8006cac:	370c      	adds	r7, #12
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb4:	4770      	bx	lr

08006cb6 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006cb6:	b480      	push	{r7}
 8006cb8:	b083      	sub	sp, #12
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	605a      	str	r2, [r3, #4]
}
 8006ccc:	bf00      	nop
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695a      	ldr	r2, [r3, #20]
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	041b      	lsls	r3, r3, #16
 8006cea:	431a      	orrs	r2, r3
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	615a      	str	r2, [r3, #20]
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695a      	ldr	r2, [r3, #20]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	431a      	orrs	r2, r3
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	615a      	str	r2, [r3, #20]
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]
 8006d26:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	609a      	str	r2, [r3, #8]
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	683a      	ldr	r2, [r7, #0]
 8006d48:	619a      	str	r2, [r3, #24]
}
 8006d4a:	bf00      	nop
 8006d4c:	370c      	adds	r7, #12
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8006d56:	b480      	push	{r7}
 8006d58:	b083      	sub	sp, #12
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	22ff      	movs	r2, #255	@ 0xff
 8006d62:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006d64:	bf00      	nop
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	22ca      	movs	r2, #202	@ 0xca
 8006d7c:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2253      	movs	r2, #83	@ 0x53
 8006d82:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8006d84:	bf00      	nop
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr

08006d90 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8006d90:	b480      	push	{r7}
 8006d92:	b083      	sub	sp, #12
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	f023 0207 	bic.w	r2, r3, #7
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	431a      	orrs	r2, r3
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	609a      	str	r2, [r3, #8]
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
	...

08006db8 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8006dbc:	4b04      	ldr	r3, [pc, #16]	@ (8006dd0 <MX_APPE_Config+0x18>)
 8006dbe:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006dc2:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 8006dc4:	f000 f881 	bl	8006eca <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8006dc8:	f000 f8d0 	bl	8006f6c <Config_HSE>

  return;
 8006dcc:	bf00      	nop
}
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	58004000 	.word	0x58004000

08006dd4 <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
  System_Init( );       /**< System initialization */
 8006dd8:	f000 f8dc 	bl	8006f94 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8006ddc:	f000 f8f4 	bl	8006fc8 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8006de0:	490a      	ldr	r1, [pc, #40]	@ (8006e0c <MX_APPE_Init+0x38>)
 8006de2:	2000      	movs	r0, #0
 8006de4:	f000 ff50 	bl	8007c88 <HW_TS_Init>

/* USER CODE BEGIN MX_APPE_Init_1 */
  Init_Debug();
 8006de8:	f000 f8b0 	bl	8006f4c <Init_Debug>
  
  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8006dec:	2101      	movs	r1, #1
 8006dee:	2001      	movs	r0, #1
 8006df0:	f00f fc90 	bl	8016714 <UTIL_LPM_SetOffMode>
  LCD_DisplayInit();
 8006df4:	f000 f9ba 	bl	800716c <LCD_DisplayInit>

  Led_Init();
 8006df8:	f000 f984 	bl	8007104 <Led_Init>
  /* Initialize user buttons */
  Button_Init();
 8006dfc:	f000 f9aa 	bl	8007154 <Button_Init>
  RxUART_Init();
 8006e00:	f000 fab0 	bl	8007364 <RxUART_Init>
  
/* USER CODE END MX_APPE_Init_1 */

  appe_Tl_Init();	/* Initialize all transport layers */
 8006e04:	f000 f8ee 	bl	8006fe4 <appe_Tl_Init>
  /**
   * From now, the application is waiting for the ready event ( VS_HCI_C2_Ready )
   * received on the system channel before starting the Stack
   * This system event is received with APPE_SysUserEvtRx()
   */
   return;
 8006e08:	bf00      	nop
}
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20000340 	.word	0x20000340

08006e10 <Init_Smps>:

void Init_Smps(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8006e14:	bf00      	nop
}
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr

08006e1e <Init_Exti>:

void Init_Exti(void)
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8006e22:	2050      	movs	r0, #80	@ 0x50
 8006e24:	f7ff fe7a 	bl	8006b1c <LL_EXTI_EnableIT_32_63>

  return;
 8006e28:	bf00      	nop
}
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <LED_Deinit>:
 * @brief  LED Deinitialisation to avoid conflict with LCD display
 * @param  None
 * @retval None
 */
void LED_Deinit(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b086      	sub	sp, #24
 8006e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStructure = {0};
 8006e32:	1d3b      	adds	r3, r7, #4
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	605a      	str	r2, [r3, #4]
 8006e3a:	609a      	str	r2, [r3, #8]
 8006e3c:	60da      	str	r2, [r3, #12]
 8006e3e:	611a      	str	r2, [r3, #16]
  
  /* RGB Led de-init */
  BSP_PWM_LED_DeInit();
 8006e40:	f003 ffb8 	bl	800adb4 <BSP_PWM_LED_DeInit>
 
  /* configure SPIx MOSI for LCD */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 8006e44:	2380      	movs	r3, #128	@ 0x80
 8006e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 8006e48:	2302      	movs	r3, #2
 8006e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 8006e50:	2300      	movs	r3, #0
 8006e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 8006e54:	2305      	movs	r3, #5
 8006e56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 8006e58:	1d3b      	adds	r3, r7, #4
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e60:	f005 fe46 	bl	800caf0 <HAL_GPIO_Init>
}
 8006e64:	bf00      	nop
 8006e66:	3718      	adds	r7, #24
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <LED_On>:
 * @brief  Wrapper for RGB LED on to avoid conflict with LCD Display
 * @param  None
 * @retval None
 */
void LED_On(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  LED_Set_rgb(PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_47_0);
 8006e70:	2281      	movs	r2, #129	@ 0x81
 8006e72:	2181      	movs	r1, #129	@ 0x81
 8006e74:	2081      	movs	r0, #129	@ 0x81
 8006e76:	f000 f80c 	bl	8006e92 <LED_Set_rgb>
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <LED_Off>:
 * @brief  Wrapper for RGB LED off to avoid conflict with LCD Display
 * @param  None
 * @retval None
 */
void LED_Off(void)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	af00      	add	r7, sp, #0
  BSP_PWM_LED_Init();
 8006e82:	f003 ff39 	bl	800acf8 <BSP_PWM_LED_Init>
  BSP_PWM_LED_Off();
 8006e86:	f003 ffcd 	bl	800ae24 <BSP_PWM_LED_Off>
  LED_Deinit();
 8006e8a:	f7ff ffcf 	bl	8006e2c <LED_Deinit>
}
 8006e8e:	bf00      	nop
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <LED_Set_rgb>:
 * @brief  Wrapper to set RGB LED to avoid conflict with LCD Display
 * @param  None
 * @retval None
 */
void LED_Set_rgb(uint8_t r, uint8_t g, uint8_t b)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	4603      	mov	r3, r0
 8006e9a:	71fb      	strb	r3, [r7, #7]
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	71bb      	strb	r3, [r7, #6]
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	717b      	strb	r3, [r7, #5]
  aPwmLedGsData_TypeDef aPwmLedGsData;
  
  BSP_PWM_LED_Init();
 8006ea4:	f003 ff28 	bl	800acf8 <BSP_PWM_LED_Init>
  aPwmLedGsData[PWM_LED_RED] = r;
 8006ea8:	79fb      	ldrb	r3, [r7, #7]
 8006eaa:	733b      	strb	r3, [r7, #12]
  aPwmLedGsData[PWM_LED_GREEN] = g;
 8006eac:	79bb      	ldrb	r3, [r7, #6]
 8006eae:	737b      	strb	r3, [r7, #13]
  aPwmLedGsData[PWM_LED_BLUE] = b;
 8006eb0:	797b      	ldrb	r3, [r7, #5]
 8006eb2:	73bb      	strb	r3, [r7, #14]
  BSP_PWM_LED_On(aPwmLedGsData);
 8006eb4:	f107 030c 	add.w	r3, r7, #12
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f003 ffa7 	bl	800ae0c <BSP_PWM_LED_On>
  LED_Deinit();
 8006ebe:	f7ff ffb5 	bl	8006e2c <LED_Deinit>
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8006ece:	f000 f804 	bl	8006eda <Reset_BackupDomain>

  Reset_IPCC();
 8006ed2:	f000 f819 	bl	8006f08 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8006ed6:	bf00      	nop
}
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8006ede:	f7ff fe99 	bl	8006c14 <LL_RCC_IsActiveFlag_PINRST>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00d      	beq.n	8006f04 <Reset_BackupDomain+0x2a>
 8006ee8:	f7ff fea7 	bl	8006c3a <LL_RCC_IsActiveFlag_SFTRST>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d108      	bne.n	8006f04 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8006ef2:	f006 f90d 	bl	800d110 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8006ef6:	f006 f90b 	bl	800d110 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8006efa:	f7ff fe69 	bl	8006bd0 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8006efe:	f7ff fe78 	bl	8006bf2 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
}
 8006f06:	bd80      	pop	{r7, pc}

08006f08 <Reset_IPCC>:

static void Reset_IPCC(void)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8006f0c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006f10:	f7ff fea6 	bl	8006c60 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8006f14:	213f      	movs	r1, #63	@ 0x3f
 8006f16:	480c      	ldr	r0, [pc, #48]	@ (8006f48 <Reset_IPCC+0x40>)
 8006f18:	f7ff ff01 	bl	8006d1e <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 8006f1c:	213f      	movs	r1, #63	@ 0x3f
 8006f1e:	480a      	ldr	r0, [pc, #40]	@ (8006f48 <Reset_IPCC+0x40>)
 8006f20:	f7ff ff0b 	bl	8006d3a <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8006f24:	213f      	movs	r1, #63	@ 0x3f
 8006f26:	4808      	ldr	r0, [pc, #32]	@ (8006f48 <Reset_IPCC+0x40>)
 8006f28:	f7ff feb3 	bl	8006c92 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 8006f2c:	213f      	movs	r1, #63	@ 0x3f
 8006f2e:	4806      	ldr	r0, [pc, #24]	@ (8006f48 <Reset_IPCC+0x40>)
 8006f30:	f7ff fed2 	bl	8006cd8 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8006f34:	213f      	movs	r1, #63	@ 0x3f
 8006f36:	4804      	ldr	r0, [pc, #16]	@ (8006f48 <Reset_IPCC+0x40>)
 8006f38:	f7ff febd 	bl	8006cb6 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 8006f3c:	213f      	movs	r1, #63	@ 0x3f
 8006f3e:	4802      	ldr	r0, [pc, #8]	@ (8006f48 <Reset_IPCC+0x40>)
 8006f40:	f7ff fedc 	bl	8006cfc <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8006f44:	bf00      	nop
}
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	58000c00 	.word	0x58000c00

08006f4c <Init_Debug>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Init_Debug( void )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8006f50:	f004 ffe2 	bl	800bf18 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006f54:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006f58:	f7ff fde0 	bl	8006b1c <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006f5c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006f60:	f7ff fdf0 	bl	8006b44 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8006f64:	f00b fd6e 	bl	8012a44 <DbgTraceInit>
#endif

  return;
 8006f68:	bf00      	nop
}
 8006f6a:	bd80      	pop	{r7, pc}

08006f6c <Config_HSE>:

static void Config_HSE(void)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006f72:	2000      	movs	r0, #0
 8006f74:	f00b fde4 	bl	8012b40 <OTP_Read>
 8006f78:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d005      	beq.n	8006f8c <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	799b      	ldrb	r3, [r3, #6]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7ff fdf1 	bl	8006b6c <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006f8a:	bf00      	nop
 8006f8c:	bf00      	nop
}
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <System_Init>:

static void System_Init( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	af00      	add	r7, sp, #0
  Init_Smps( );
 8006f98:	f7ff ff3a 	bl	8006e10 <Init_Smps>

  Init_Exti( );
 8006f9c:	f7ff ff3f 	bl	8006e1e <Init_Exti>

  Init_Rtc( );
 8006fa0:	f000 f802 	bl	8006fa8 <Init_Rtc>

  return;
 8006fa4:	bf00      	nop
}
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <Init_Rtc>:

static void Init_Rtc( void )
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8006fac:	4805      	ldr	r0, [pc, #20]	@ (8006fc4 <Init_Rtc+0x1c>)
 8006fae:	f7ff fedf 	bl	8006d70 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	4803      	ldr	r0, [pc, #12]	@ (8006fc4 <Init_Rtc+0x1c>)
 8006fb6:	f7ff feeb 	bl	8006d90 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 8006fba:	4802      	ldr	r0, [pc, #8]	@ (8006fc4 <Init_Rtc+0x1c>)
 8006fbc:	f7ff fecb 	bl	8006d56 <LL_RTC_EnableWriteProtection>

  return;
 8006fc0:	bf00      	nop
}
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	40002800 	.word	0x40002800

08006fc8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8006fcc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006fd0:	f7ff fdea 	bl	8006ba8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8006fd4:	f00f fb8c 	bl	80166f0 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8006fd8:	2004      	movs	r0, #4
 8006fda:	f7ff fd89 	bl	8006af0 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

  return;
 8006fde:	bf00      	nop
}
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b088      	sub	sp, #32
 8006fe8:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 8006fea:	f00b fa99 	bl	8012520 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc );
 8006fee:	4a14      	ldr	r2, [pc, #80]	@ (8007040 <appe_Tl_Init+0x5c>)
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	2008      	movs	r0, #8
 8006ff4:	f00f fcba 	bl	801696c <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 8006ff8:	4b12      	ldr	r3, [pc, #72]	@ (8007044 <appe_Tl_Init+0x60>)
 8006ffa:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8006ffc:	4b12      	ldr	r3, [pc, #72]	@ (8007048 <appe_Tl_Init+0x64>)
 8006ffe:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8007000:	463b      	mov	r3, r7
 8007002:	4619      	mov	r1, r3
 8007004:	4811      	ldr	r0, [pc, #68]	@ (800704c <appe_Tl_Init+0x68>)
 8007006:	f00b f94d 	bl	80122a4 <shci_init>

  /**< Memory Manager channel initialization */
  memset(&tl_mm_config, 0, sizeof(TL_MM_Config_t));
 800700a:	f107 0308 	add.w	r3, r7, #8
 800700e:	2218      	movs	r2, #24
 8007010:	2100      	movs	r1, #0
 8007012:	4618      	mov	r0, r3
 8007014:	f010 f81a 	bl	801704c <memset>
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 8007018:	2300      	movs	r3, #0
 800701a:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800701c:	4b0c      	ldr	r3, [pc, #48]	@ (8007050 <appe_Tl_Init+0x6c>)
 800701e:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8007020:	4b0c      	ldr	r3, [pc, #48]	@ (8007054 <appe_Tl_Init+0x70>)
 8007022:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8007024:	f240 533c 	movw	r3, #1340	@ 0x53c
 8007028:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800702a:	f107 0308 	add.w	r3, r7, #8
 800702e:	4618      	mov	r0, r3
 8007030:	f00b fbd2 	bl	80127d8 <TL_MM_Init>

  TL_Enable();
 8007034:	f00b fa6e 	bl	8012514 <TL_Enable>

  return;
 8007038:	bf00      	nop
}
 800703a:	3720      	adds	r7, #32
 800703c:	46bd      	mov	sp, r7
 800703e:	bd80      	pop	{r7, pc}
 8007040:	080122dd 	.word	0x080122dd
 8007044:	20030620 	.word	0x20030620
 8007048:	08007059 	.word	0x08007059
 800704c:	0800706f 	.word	0x0800706f
 8007050:	2003072c 	.word	0x2003072c
 8007054:	200300e4 	.word	0x200300e4

08007058 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	4603      	mov	r3, r0
 8007060:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8007062:	bf00      	nop
}
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr

0800706e <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx( void * pPayload )
{
 800706e:	b580      	push	{r7, lr}
 8007070:	b084      	sub	sp, #16
 8007072:	af00      	add	r7, sp, #0
 8007074:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	330b      	adds	r3, #11
 800707c:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	881b      	ldrh	r3, [r3, #0]
 8007082:	b29b      	uxth	r3, r3
 8007084:	f5b3 4f12 	cmp.w	r3, #37376	@ 0x9200
 8007088:	d004      	beq.n	8007094 <APPE_SysUserEvtRx+0x26>
 800708a:	f249 2201 	movw	r2, #37377	@ 0x9201
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8007092:	e008      	b.n	80070a6 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8007094:	f000 f82a 	bl	80070ec <APPE_SysEvtReadyProcessing>
         break;
 8007098:	e005      	b.n	80070a6 <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	789b      	ldrb	r3, [r3, #2]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f806 	bl	80070b0 <APPE_SysEvtError>
         break;
 80070a4:	bf00      	nop
  }
  return;
 80070a6:	bf00      	nop
}
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}
	...

080070b0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError( SCHI_SystemErrCode_t ErrorCode)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	4603      	mov	r3, r0
 80070b8:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	2bc8      	cmp	r3, #200	@ 0xc8
 80070be:	d105      	bne.n	80070cc <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 80070c0:	4a08      	ldr	r2, [pc, #32]	@ (80070e4 <APPE_SysEvtError+0x34>)
 80070c2:	2101      	movs	r1, #1
 80070c4:	2000      	movs	r0, #0
 80070c6:	f001 fcdd 	bl	8008a84 <logApplication>
       break;
 80070ca:	e006      	b.n	80070da <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 80070cc:	79fb      	ldrb	r3, [r7, #7]
 80070ce:	4a06      	ldr	r2, [pc, #24]	@ (80070e8 <APPE_SysEvtError+0x38>)
 80070d0:	2101      	movs	r1, #1
 80070d2:	2000      	movs	r0, #0
 80070d4:	f001 fcd6 	bl	8008a84 <logApplication>
       break;
 80070d8:	bf00      	nop
  }
  return;
 80070da:	bf00      	nop
}
 80070dc:	3708      	adds	r7, #8
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}
 80070e2:	bf00      	nop
 80070e4:	08017f58 	.word	0x08017f58
 80070e8:	08017f78 	.word	0x08017f78

080070ec <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init( );
 80070f0:	f00b fbe6 	bl	80128c0 <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 80070f4:	f001 fe9a 	bl	8008e2c <APP_ZIGBEE_Init>
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80070f8:	2100      	movs	r1, #0
 80070fa:	2001      	movs	r0, #1
 80070fc:	f00f fb0a 	bl	8016714 <UTIL_LPM_SetOffMode>
  return;
 8007100:	bf00      	nop
}
 8007102:	bd80      	pop	{r7, pc}

08007104 <Led_Init>:
 * @brief  RGB LED initialisation for the application
 * @param  None
 * @retval None
 */
static void Led_Init( void )
{
 8007104:	b580      	push	{r7, lr}
 8007106:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1U)
  /**
   * Leds Initialization
   */
  // LED Red;
  LED_Set_rgb(PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF);
 8007108:	2200      	movs	r2, #0
 800710a:	2100      	movs	r1, #0
 800710c:	2081      	movs	r0, #129	@ 0x81
 800710e:	f7ff fec0 	bl	8006e92 <LED_Set_rgb>
  HAL_Delay(200);
 8007112:	20c8      	movs	r0, #200	@ 0xc8
 8007114:	f001 f9de 	bl	80084d4 <HAL_Delay>
  LED_Off();
 8007118:	f7ff feb1 	bl	8006e7e <LED_Off>
  HAL_Delay(200);
 800711c:	20c8      	movs	r0, #200	@ 0xc8
 800711e:	f001 f9d9 	bl	80084d4 <HAL_Delay>
  // LED Green;
  LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 8007122:	2200      	movs	r2, #0
 8007124:	2181      	movs	r1, #129	@ 0x81
 8007126:	2000      	movs	r0, #0
 8007128:	f7ff feb3 	bl	8006e92 <LED_Set_rgb>
  HAL_Delay(200);
 800712c:	20c8      	movs	r0, #200	@ 0xc8
 800712e:	f001 f9d1 	bl	80084d4 <HAL_Delay>
  LED_Off();
 8007132:	f7ff fea4 	bl	8006e7e <LED_Off>
  HAL_Delay(200);
 8007136:	20c8      	movs	r0, #200	@ 0xc8
 8007138:	f001 f9cc 	bl	80084d4 <HAL_Delay>
  // LED Blue;
  LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0);
 800713c:	2281      	movs	r2, #129	@ 0x81
 800713e:	2100      	movs	r1, #0
 8007140:	2000      	movs	r0, #0
 8007142:	f7ff fea6 	bl	8006e92 <LED_Set_rgb>
  HAL_Delay(200);
 8007146:	20c8      	movs	r0, #200	@ 0xc8
 8007148:	f001 f9c4 	bl	80084d4 <HAL_Delay>
  LED_Off();
 800714c:	f7ff fe97 	bl	8006e7e <LED_Off>
#endif

  return;
 8007150:	bf00      	nop
}
 8007152:	bd80      	pop	{r7, pc}

08007154 <Button_Init>:
 * @brief  Buttons initialisation used in application
 * @param  None
 * @retval None
 */
static void Button_Init( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1U)
  /**
   * Button Initialization
   */
    BSP_PB_Init(BUTTON_USER1, BUTTON_MODE_EXTI);
 8007158:	2101      	movs	r1, #1
 800715a:	2000      	movs	r0, #0
 800715c:	f003 fe8e 	bl	800ae7c <BSP_PB_Init>
    BSP_PB_Init(BUTTON_USER2, BUTTON_MODE_EXTI);
 8007160:	2101      	movs	r1, #1
 8007162:	2001      	movs	r0, #1
 8007164:	f003 fe8a 	bl	800ae7c <BSP_PB_Init>
#endif

  return;
 8007168:	bf00      	nop
}
 800716a:	bd80      	pop	{r7, pc}

0800716c <LCD_DisplayInit>:
 * @brief  LCD initialisation, display the ST logo at the startup of the board
 * @param  None
 * @retval None
 */
void LCD_DisplayInit(void)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	af00      	add	r7, sp, #0
  BSP_LCD_Init(LCD_Inst, LCD_ORIENTATION_LANDSCAPE);
 8007170:	4b27      	ldr	r3, [pc, #156]	@ (8007210 <LCD_DisplayInit+0xa4>)
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	2100      	movs	r1, #0
 8007176:	4618      	mov	r0, r3
 8007178:	f004 f9b0 	bl	800b4dc <BSP_LCD_Init>
  /* Set LCD Foreground Layer  */
  UTIL_LCD_SetFuncDriver(&LCD_Driver); /* SetFunc before setting device */
 800717c:	4825      	ldr	r0, [pc, #148]	@ (8007214 <LCD_DisplayInit+0xa8>)
 800717e:	f00e ff33 	bl	8015fe8 <UTIL_LCD_SetFuncDriver>
  UTIL_LCD_SetDevice(LCD_Inst);            /* SetDevice after funcDriver is set */
 8007182:	4b23      	ldr	r3, [pc, #140]	@ (8007210 <LCD_DisplayInit+0xa4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4618      	mov	r0, r3
 8007188:	f00e ff84 	bl	8016094 <UTIL_LCD_SetDevice>
  BSP_LCD_Clear(LCD_Inst, SSD1315_COLOR_BLACK);
 800718c:	4b20      	ldr	r3, [pc, #128]	@ (8007210 <LCD_DisplayInit+0xa4>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	2100      	movs	r1, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f004 fbc6 	bl	800b924 <BSP_LCD_Clear>
  BSP_LCD_DisplayOn(LCD_Inst);
 8007198:	4b1d      	ldr	r3, [pc, #116]	@ (8007210 <LCD_DisplayInit+0xa4>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4618      	mov	r0, r3
 800719e:	f004 fa6d 	bl	800b67c <BSP_LCD_DisplayOn>
  BSP_LCD_Refresh(LCD_Inst);
 80071a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007210 <LCD_DisplayInit+0xa4>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f004 fa94 	bl	800b6d4 <BSP_LCD_Refresh>
  UTIL_LCD_SetFont(&Font12);
 80071ac:	481a      	ldr	r0, [pc, #104]	@ (8007218 <LCD_DisplayInit+0xac>)
 80071ae:	f00e ffb9 	bl	8016124 <UTIL_LCD_SetFont>
  /* Set the LCD Text Color */
  UTIL_LCD_SetTextColor(SSD1315_COLOR_WHITE);
 80071b2:	20ff      	movs	r0, #255	@ 0xff
 80071b4:	f00e ff8e 	bl	80160d4 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(SSD1315_COLOR_BLACK);
 80071b8:	2000      	movs	r0, #0
 80071ba:	f00e ff9f 	bl	80160fc <UTIL_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_Inst,SSD1315_COLOR_BLACK);
 80071be:	4b14      	ldr	r3, [pc, #80]	@ (8007210 <LCD_DisplayInit+0xa4>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2100      	movs	r1, #0
 80071c4:	4618      	mov	r0, r3
 80071c6:	f004 fbad 	bl	800b924 <BSP_LCD_Clear>
  BSP_LCD_Refresh(LCD_Inst);
 80071ca:	4b11      	ldr	r3, [pc, #68]	@ (8007210 <LCD_DisplayInit+0xa4>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f004 fa80 	bl	800b6d4 <BSP_LCD_Refresh>
  /* Display ST Logo */
  BSP_LCD_Clear(LCD_Inst,SSD1315_COLOR_BLACK);
 80071d4:	4b0e      	ldr	r3, [pc, #56]	@ (8007210 <LCD_DisplayInit+0xa4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2100      	movs	r1, #0
 80071da:	4618      	mov	r0, r3
 80071dc:	f004 fba2 	bl	800b924 <BSP_LCD_Clear>
  BSP_LCD_Refresh(LCD_Inst);
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <LCD_DisplayInit+0xa4>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f004 fa75 	bl	800b6d4 <BSP_LCD_Refresh>
  BSP_LCD_DrawBitmap(LCD_Inst, 0, 0, (uint8_t *)stlogo);
 80071ea:	4b09      	ldr	r3, [pc, #36]	@ (8007210 <LCD_DisplayInit+0xa4>)
 80071ec:	6818      	ldr	r0, [r3, #0]
 80071ee:	4b0b      	ldr	r3, [pc, #44]	@ (800721c <LCD_DisplayInit+0xb0>)
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	f004 fa9a 	bl	800b72c <BSP_LCD_DrawBitmap>
  BSP_LCD_Refresh(LCD_Inst);
 80071f8:	4b05      	ldr	r3, [pc, #20]	@ (8007210 <LCD_DisplayInit+0xa4>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f004 fa69 	bl	800b6d4 <BSP_LCD_Refresh>
  HAL_Delay(2000);
 8007202:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8007206:	f001 f965 	bl	80084d4 <HAL_Delay>
}
 800720a:	bf00      	nop
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	2000014c 	.word	0x2000014c
 8007214:	08018aa0 	.word	0x08018aa0
 8007218:	200000a4 	.word	0x200000a4
 800721c:	08018600 	.word	0x08018600

08007220 <MX_APPE_Process>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void MX_APPE_Process(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8007224:	f04f 30ff 	mov.w	r0, #4294967295
 8007228:	f00f faa4 	bl	8016774 <UTIL_SEQ_Run>
}
 800722c:	bf00      	nop
 800722e:	bd80      	pop	{r7, pc}

08007230 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8007230:	b480      	push	{r7}
 8007232:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
  return;
 8007234:	bf00      	nop
}
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
	...

08007240 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
	/* Check the notification condition */
	if (g_ot_notification_allowed) {
 800724a:	4b11      	ldr	r3, [pc, #68]	@ (8007290 <UTIL_SEQ_EvtIdle+0x50>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <UTIL_SEQ_EvtIdle+0x18>
		UTIL_SEQ_Run(1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4);
 8007252:	2001      	movs	r0, #1
 8007254:	f00f fa8e 	bl	8016774 <UTIL_SEQ_Run>
	}	
  switch(evt_waited_bm)
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	2b02      	cmp	r3, #2
 800725c:	d003      	beq.n	8007266 <UTIL_SEQ_EvtIdle+0x26>
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	2b04      	cmp	r3, #4
 8007262:	d004      	beq.n	800726e <UTIL_SEQ_EvtIdle+0x2e>
 8007264:	e00a      	b.n	800727c <UTIL_SEQ_EvtIdle+0x3c>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8007266:	2002      	movs	r0, #2
 8007268:	f00f fa84 	bl	8016774 <UTIL_SEQ_Run>
    break;
 800726c:	e00b      	b.n	8007286 <UTIL_SEQ_EvtIdle+0x46>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800726e:	2004      	movs	r0, #4
 8007270:	f00f fbca 	bl	8016a08 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8007274:	2003      	movs	r0, #3
 8007276:	f00f fa7d 	bl	8016774 <UTIL_SEQ_Run>
    break;
 800727a:	e004      	b.n	8007286 <UTIL_SEQ_EvtIdle+0x46>
  default :
    /* default case */
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 800727c:	f04f 30ff 	mov.w	r0, #4294967295
 8007280:	f00f fa78 	bl	8016774 <UTIL_SEQ_Run>
    break;
 8007284:	bf00      	nop
  }
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20000470 	.word	0x20000470

08007294 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 800729c:	2100      	movs	r1, #0
 800729e:	2008      	movs	r0, #8
 80072a0:	f00f fb86 	bl	80169b0 <UTIL_SEQ_SetTask>
  return;
 80072a4:	bf00      	nop
}
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b082      	sub	sp, #8
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80072b4:	2001      	movs	r0, #1
 80072b6:	f00f fba7 	bl	8016a08 <UTIL_SEQ_SetEvt>
  return;
 80072ba:	bf00      	nop
}
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b082      	sub	sp, #8
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 80072ca:	2001      	movs	r0, #1
 80072cc:	f00f fbbc 	bl	8016a48 <UTIL_SEQ_WaitEvt>
  return;
 80072d0:	bf00      	nop
}
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
#if(CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	330b      	adds	r3, #11
 80072e4:	1c99      	adds	r1, r3, #2
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	7a9b      	ldrb	r3, [r3, #10]
 80072ea:	3b02      	subs	r3, #2
 80072ec:	461a      	mov	r2, r3
 80072ee:	2001      	movs	r0, #1
 80072f0:	f00b fbce 	bl	8012a90 <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE */
  /* Release buffer */
  TL_MM_EvtDone( hcievt );
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f00b faab 	bl	8012850 <TL_MM_EvtDone>
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8007302:	b580      	push	{r7, lr}
 8007304:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_USART1_UART_Init();
 8007306:	f001 f885 	bl	8008414 <MX_USART1_UART_Init>
  return;
 800730a:	bf00      	nop
#endif
}
 800730c:	bd80      	pop	{r7, pc}

0800730e <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b084      	sub	sp, #16
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	460b      	mov	r3, r1
 8007318:	607a      	str	r2, [r7, #4]
 800731a:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 800731c:	897a      	ldrh	r2, [r7, #10]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68f9      	ldr	r1, [r7, #12]
 8007322:	2000      	movs	r0, #0
 8007324:	f000 feca 	bl	80080bc <HW_UART_Transmit_DMA>

  return;
 8007328:	bf00      	nop
}
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <BSP_PB_Callback>:
  * @brief This function manage the Push button action
  * @param  Button which has been activated
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	4603      	mov	r3, r0
 8007338:	71fb      	strb	r3, [r7, #7]
  //HAL_Delay(200);
  switch (Button)
 800733a:	79fb      	ldrb	r3, [r7, #7]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d002      	beq.n	8007346 <BSP_PB_Callback+0x16>
 8007340:	2b01      	cmp	r3, #1
 8007342:	d005      	beq.n	8007350 <BSP_PB_Callback+0x20>
  case BUTTON_USER2:
    UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW2, CFG_SCH_PRIO_1);
    break;

  default:
    break;
 8007344:	e009      	b.n	800735a <BSP_PB_Callback+0x2a>
    UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW1, CFG_SCH_PRIO_1);
 8007346:	2101      	movs	r1, #1
 8007348:	2010      	movs	r0, #16
 800734a:	f00f fb31 	bl	80169b0 <UTIL_SEQ_SetTask>
    break;
 800734e:	e004      	b.n	800735a <BSP_PB_Callback+0x2a>
    UTIL_SEQ_SetTask(1U << CFG_TASK_BUTTON_SW2, CFG_SCH_PRIO_1);
 8007350:	2101      	movs	r1, #1
 8007352:	2020      	movs	r0, #32
 8007354:	f00f fb2c 	bl	80169b0 <UTIL_SEQ_SetTask>
    break;
 8007358:	bf00      	nop
  }
}
 800735a:	bf00      	nop
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <RxUART_Init>:

static void RxUART_Init(void)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8007368:	4b03      	ldr	r3, [pc, #12]	@ (8007378 <RxUART_Init+0x14>)
 800736a:	2201      	movs	r2, #1
 800736c:	4903      	ldr	r1, [pc, #12]	@ (800737c <RxUART_Init+0x18>)
 800736e:	2000      	movs	r0, #0
 8007370:	f000 fe7c 	bl	800806c <HW_UART_Receive_IT>
}
 8007374:	bf00      	nop
 8007376:	bd80      	pop	{r7, pc}
 8007378:	08007381 	.word	0x08007381
 800737c:	20000150 	.word	0x20000150

08007380 <RxCpltCallback>:

static void RxCpltCallback(void)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8007384:	4b16      	ldr	r3, [pc, #88]	@ (80073e0 <RxCpltCallback+0x60>)
 8007386:	881b      	ldrh	r3, [r3, #0]
 8007388:	2bff      	cmp	r3, #255	@ 0xff
 800738a:	d820      	bhi.n	80073ce <RxCpltCallback+0x4e>
  {
    if (aRxBuffer[0] == '\r')
 800738c:	4b15      	ldr	r3, [pc, #84]	@ (80073e4 <RxCpltCallback+0x64>)
 800738e:	781b      	ldrb	r3, [r3, #0]
 8007390:	2b0d      	cmp	r3, #13
 8007392:	d111      	bne.n	80073b8 <RxCpltCallback+0x38>
    {
      APP_DBG("received %s", CommandString);
 8007394:	4b14      	ldr	r3, [pc, #80]	@ (80073e8 <RxCpltCallback+0x68>)
 8007396:	4a15      	ldr	r2, [pc, #84]	@ (80073ec <RxCpltCallback+0x6c>)
 8007398:	2101      	movs	r1, #1
 800739a:	2000      	movs	r0, #0
 800739c:	f001 fb72 	bl	8008a84 <logApplication>

      UartCmdExecute();
 80073a0:	f000 f828 	bl	80073f4 <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 80073a4:	4b0e      	ldr	r3, [pc, #56]	@ (80073e0 <RxCpltCallback+0x60>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 80073aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073ae:	2100      	movs	r1, #0
 80073b0:	480d      	ldr	r0, [pc, #52]	@ (80073e8 <RxCpltCallback+0x68>)
 80073b2:	f00f fe4b 	bl	801704c <memset>
 80073b6:	e00a      	b.n	80073ce <RxCpltCallback+0x4e>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80073b8:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <RxCpltCallback+0x60>)
 80073ba:	881b      	ldrh	r3, [r3, #0]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	b291      	uxth	r1, r2
 80073c0:	4a07      	ldr	r2, [pc, #28]	@ (80073e0 <RxCpltCallback+0x60>)
 80073c2:	8011      	strh	r1, [r2, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	4b07      	ldr	r3, [pc, #28]	@ (80073e4 <RxCpltCallback+0x64>)
 80073c8:	7819      	ldrb	r1, [r3, #0]
 80073ca:	4b07      	ldr	r3, [pc, #28]	@ (80073e8 <RxCpltCallback+0x68>)
 80073cc:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 80073ce:	4b08      	ldr	r3, [pc, #32]	@ (80073f0 <RxCpltCallback+0x70>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	4904      	ldr	r1, [pc, #16]	@ (80073e4 <RxCpltCallback+0x64>)
 80073d4:	2000      	movs	r0, #0
 80073d6:	f000 fe49 	bl	800806c <HW_UART_Receive_IT>
}
 80073da:	bf00      	nop
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000258 	.word	0x20000258
 80073e4:	20000150 	.word	0x20000150
 80073e8:	20000158 	.word	0x20000158
 80073ec:	08017f98 	.word	0x08017f98
 80073f0:	08007381 	.word	0x08007381

080073f4 <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80073f8:	4913      	ldr	r1, [pc, #76]	@ (8007448 <UartCmdExecute+0x54>)
 80073fa:	4814      	ldr	r0, [pc, #80]	@ (800744c <UartCmdExecute+0x58>)
 80073fc:	f7fe fc3c 	bl	8005c78 <strcmp>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d108      	bne.n	8007418 <UartCmdExecute+0x24>
  {
    APP_DBG("SW1 OK");
 8007406:	4a12      	ldr	r2, [pc, #72]	@ (8007450 <UartCmdExecute+0x5c>)
 8007408:	2101      	movs	r1, #1
 800740a:	2000      	movs	r0, #0
 800740c:	f001 fb3a 	bl	8008a84 <logApplication>
//    exti_handle.Line = EXTI_LINE_4;
//    HAL_EXTI_GenerateSWI(&exti_handle);
    BSP_PB_Callback(BUTTON_USER1);
 8007410:	2000      	movs	r0, #0
 8007412:	f7ff ff8d 	bl	8007330 <BSP_PB_Callback>
  }
  else
  {
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
  }
}
 8007416:	e015      	b.n	8007444 <UartCmdExecute+0x50>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 8007418:	490e      	ldr	r1, [pc, #56]	@ (8007454 <UartCmdExecute+0x60>)
 800741a:	480c      	ldr	r0, [pc, #48]	@ (800744c <UartCmdExecute+0x58>)
 800741c:	f7fe fc2c 	bl	8005c78 <strcmp>
 8007420:	4603      	mov	r3, r0
 8007422:	2b00      	cmp	r3, #0
 8007424:	d108      	bne.n	8007438 <UartCmdExecute+0x44>
    APP_DBG("SW2 OK");
 8007426:	4a0c      	ldr	r2, [pc, #48]	@ (8007458 <UartCmdExecute+0x64>)
 8007428:	2101      	movs	r1, #1
 800742a:	2000      	movs	r0, #0
 800742c:	f001 fb2a 	bl	8008a84 <logApplication>
    BSP_PB_Callback(BUTTON_USER2);
 8007430:	2001      	movs	r0, #1
 8007432:	f7ff ff7d 	bl	8007330 <BSP_PB_Callback>
}
 8007436:	e005      	b.n	8007444 <UartCmdExecute+0x50>
    APP_DBG("NOT RECOGNIZED COMMAND : %s", CommandString);
 8007438:	4b04      	ldr	r3, [pc, #16]	@ (800744c <UartCmdExecute+0x58>)
 800743a:	4a08      	ldr	r2, [pc, #32]	@ (800745c <UartCmdExecute+0x68>)
 800743c:	2101      	movs	r1, #1
 800743e:	2000      	movs	r0, #0
 8007440:	f001 fb20 	bl	8008a84 <logApplication>
}
 8007444:	bf00      	nop
 8007446:	bd80      	pop	{r7, pc}
 8007448:	08017fa4 	.word	0x08017fa4
 800744c:	20000158 	.word	0x20000158
 8007450:	08017fa8 	.word	0x08017fa8
 8007454:	08017fb0 	.word	0x08017fb0
 8007458:	08017fb4 	.word	0x08017fb4
 800745c:	08017fbc 	.word	0x08017fbc

08007460 <LL_EXTI_EnableIT_0_31>:
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007468:	4b06      	ldr	r3, [pc, #24]	@ (8007484 <LL_EXTI_EnableIT_0_31+0x24>)
 800746a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800746e:	4905      	ldr	r1, [pc, #20]	@ (8007484 <LL_EXTI_EnableIT_0_31+0x24>)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4313      	orrs	r3, r2
 8007474:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	58000800 	.word	0x58000800

08007488 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007490:	4b05      	ldr	r3, [pc, #20]	@ (80074a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4904      	ldr	r1, [pc, #16]	@ (80074a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	4313      	orrs	r3, r2
 800749a:	600b      	str	r3, [r1, #0]

}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	58000800 	.word	0x58000800

080074ac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80074b2:	4b0d      	ldr	r3, [pc, #52]	@ (80074e8 <ReadRtcSsrValue+0x3c>)
 80074b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80074ba:	4b0b      	ldr	r3, [pc, #44]	@ (80074e8 <ReadRtcSsrValue+0x3c>)
 80074bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074be:	b29b      	uxth	r3, r3
 80074c0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 80074c2:	e005      	b.n	80074d0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 80074c8:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <ReadRtcSsrValue+0x3c>)
 80074ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074cc:	b29b      	uxth	r3, r3
 80074ce:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d1f5      	bne.n	80074c4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 80074d8:	683b      	ldr	r3, [r7, #0]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	370c      	adds	r7, #12
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	40002800 	.word	0x40002800

080074ec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	460a      	mov	r2, r1
 80074f6:	71fb      	strb	r3, [r7, #7]
 80074f8:	4613      	mov	r3, r2
 80074fa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 80074fc:	79ba      	ldrb	r2, [r7, #6]
 80074fe:	491d      	ldr	r1, [pc, #116]	@ (8007574 <LinkTimerAfter+0x88>)
 8007500:	4613      	mov	r3, r2
 8007502:	005b      	lsls	r3, r3, #1
 8007504:	4413      	add	r3, r2
 8007506:	00db      	lsls	r3, r3, #3
 8007508:	440b      	add	r3, r1
 800750a:	3315      	adds	r3, #21
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	2b06      	cmp	r3, #6
 8007514:	d009      	beq.n	800752a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8007516:	7bfa      	ldrb	r2, [r7, #15]
 8007518:	4916      	ldr	r1, [pc, #88]	@ (8007574 <LinkTimerAfter+0x88>)
 800751a:	4613      	mov	r3, r2
 800751c:	005b      	lsls	r3, r3, #1
 800751e:	4413      	add	r3, r2
 8007520:	00db      	lsls	r3, r3, #3
 8007522:	440b      	add	r3, r1
 8007524:	3314      	adds	r3, #20
 8007526:	79fa      	ldrb	r2, [r7, #7]
 8007528:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 800752a:	79fa      	ldrb	r2, [r7, #7]
 800752c:	4911      	ldr	r1, [pc, #68]	@ (8007574 <LinkTimerAfter+0x88>)
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	440b      	add	r3, r1
 8007538:	3315      	adds	r3, #21
 800753a:	7bfa      	ldrb	r2, [r7, #15]
 800753c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 800753e:	79fa      	ldrb	r2, [r7, #7]
 8007540:	490c      	ldr	r1, [pc, #48]	@ (8007574 <LinkTimerAfter+0x88>)
 8007542:	4613      	mov	r3, r2
 8007544:	005b      	lsls	r3, r3, #1
 8007546:	4413      	add	r3, r2
 8007548:	00db      	lsls	r3, r3, #3
 800754a:	440b      	add	r3, r1
 800754c:	3314      	adds	r3, #20
 800754e:	79ba      	ldrb	r2, [r7, #6]
 8007550:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8007552:	79ba      	ldrb	r2, [r7, #6]
 8007554:	4907      	ldr	r1, [pc, #28]	@ (8007574 <LinkTimerAfter+0x88>)
 8007556:	4613      	mov	r3, r2
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	4413      	add	r3, r2
 800755c:	00db      	lsls	r3, r3, #3
 800755e:	440b      	add	r3, r1
 8007560:	3315      	adds	r3, #21
 8007562:	79fa      	ldrb	r2, [r7, #7]
 8007564:	701a      	strb	r2, [r3, #0]

  return;
 8007566:	bf00      	nop
}
 8007568:	3714      	adds	r7, #20
 800756a:	46bd      	mov	sp, r7
 800756c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	2000025c 	.word	0x2000025c

08007578 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8007578:	b480      	push	{r7}
 800757a:	b085      	sub	sp, #20
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	460a      	mov	r2, r1
 8007582:	71fb      	strb	r3, [r7, #7]
 8007584:	4613      	mov	r3, r2
 8007586:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8007588:	4b29      	ldr	r3, [pc, #164]	@ (8007630 <LinkTimerBefore+0xb8>)
 800758a:	781b      	ldrb	r3, [r3, #0]
 800758c:	b2db      	uxtb	r3, r3
 800758e:	79ba      	ldrb	r2, [r7, #6]
 8007590:	429a      	cmp	r2, r3
 8007592:	d032      	beq.n	80075fa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8007594:	79ba      	ldrb	r2, [r7, #6]
 8007596:	4927      	ldr	r1, [pc, #156]	@ (8007634 <LinkTimerBefore+0xbc>)
 8007598:	4613      	mov	r3, r2
 800759a:	005b      	lsls	r3, r3, #1
 800759c:	4413      	add	r3, r2
 800759e:	00db      	lsls	r3, r3, #3
 80075a0:	440b      	add	r3, r1
 80075a2:	3314      	adds	r3, #20
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 80075a8:	7bfa      	ldrb	r2, [r7, #15]
 80075aa:	4922      	ldr	r1, [pc, #136]	@ (8007634 <LinkTimerBefore+0xbc>)
 80075ac:	4613      	mov	r3, r2
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	4413      	add	r3, r2
 80075b2:	00db      	lsls	r3, r3, #3
 80075b4:	440b      	add	r3, r1
 80075b6:	3315      	adds	r3, #21
 80075b8:	79fa      	ldrb	r2, [r7, #7]
 80075ba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 80075bc:	79fa      	ldrb	r2, [r7, #7]
 80075be:	491d      	ldr	r1, [pc, #116]	@ (8007634 <LinkTimerBefore+0xbc>)
 80075c0:	4613      	mov	r3, r2
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	4413      	add	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	440b      	add	r3, r1
 80075ca:	3315      	adds	r3, #21
 80075cc:	79ba      	ldrb	r2, [r7, #6]
 80075ce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 80075d0:	79fa      	ldrb	r2, [r7, #7]
 80075d2:	4918      	ldr	r1, [pc, #96]	@ (8007634 <LinkTimerBefore+0xbc>)
 80075d4:	4613      	mov	r3, r2
 80075d6:	005b      	lsls	r3, r3, #1
 80075d8:	4413      	add	r3, r2
 80075da:	00db      	lsls	r3, r3, #3
 80075dc:	440b      	add	r3, r1
 80075de:	3314      	adds	r3, #20
 80075e0:	7bfa      	ldrb	r2, [r7, #15]
 80075e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 80075e4:	79ba      	ldrb	r2, [r7, #6]
 80075e6:	4913      	ldr	r1, [pc, #76]	@ (8007634 <LinkTimerBefore+0xbc>)
 80075e8:	4613      	mov	r3, r2
 80075ea:	005b      	lsls	r3, r3, #1
 80075ec:	4413      	add	r3, r2
 80075ee:	00db      	lsls	r3, r3, #3
 80075f0:	440b      	add	r3, r1
 80075f2:	3314      	adds	r3, #20
 80075f4:	79fa      	ldrb	r2, [r7, #7]
 80075f6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 80075f8:	e014      	b.n	8007624 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 80075fa:	79fa      	ldrb	r2, [r7, #7]
 80075fc:	490d      	ldr	r1, [pc, #52]	@ (8007634 <LinkTimerBefore+0xbc>)
 80075fe:	4613      	mov	r3, r2
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	4413      	add	r3, r2
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	440b      	add	r3, r1
 8007608:	3315      	adds	r3, #21
 800760a:	79ba      	ldrb	r2, [r7, #6]
 800760c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 800760e:	79ba      	ldrb	r2, [r7, #6]
 8007610:	4908      	ldr	r1, [pc, #32]	@ (8007634 <LinkTimerBefore+0xbc>)
 8007612:	4613      	mov	r3, r2
 8007614:	005b      	lsls	r3, r3, #1
 8007616:	4413      	add	r3, r2
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	440b      	add	r3, r1
 800761c:	3314      	adds	r3, #20
 800761e:	79fa      	ldrb	r2, [r7, #7]
 8007620:	701a      	strb	r2, [r3, #0]
  return;
 8007622:	bf00      	nop
}
 8007624:	3714      	adds	r7, #20
 8007626:	46bd      	mov	sp, r7
 8007628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762c:	4770      	bx	lr
 800762e:	bf00      	nop
 8007630:	200002ec 	.word	0x200002ec
 8007634:	2000025c 	.word	0x2000025c

08007638 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b084      	sub	sp, #16
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007642:	4b4e      	ldr	r3, [pc, #312]	@ (800777c <linkTimer+0x144>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	b2db      	uxtb	r3, r3
 8007648:	2b06      	cmp	r3, #6
 800764a:	d118      	bne.n	800767e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 800764c:	4b4b      	ldr	r3, [pc, #300]	@ (800777c <linkTimer+0x144>)
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	b2da      	uxtb	r2, r3
 8007652:	4b4b      	ldr	r3, [pc, #300]	@ (8007780 <linkTimer+0x148>)
 8007654:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8007656:	4a49      	ldr	r2, [pc, #292]	@ (800777c <linkTimer+0x144>)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 800765c:	79fa      	ldrb	r2, [r7, #7]
 800765e:	4949      	ldr	r1, [pc, #292]	@ (8007784 <linkTimer+0x14c>)
 8007660:	4613      	mov	r3, r2
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	4413      	add	r3, r2
 8007666:	00db      	lsls	r3, r3, #3
 8007668:	440b      	add	r3, r1
 800766a:	3315      	adds	r3, #21
 800766c:	2206      	movs	r2, #6
 800766e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8007670:	4b45      	ldr	r3, [pc, #276]	@ (8007788 <linkTimer+0x150>)
 8007672:	f04f 32ff 	mov.w	r2, #4294967295
 8007676:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	81fb      	strh	r3, [r7, #14]
 800767c:	e078      	b.n	8007770 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 800767e:	f000 f909 	bl	8007894 <ReturnTimeElapsed>
 8007682:	4603      	mov	r3, r0
 8007684:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8007686:	79fa      	ldrb	r2, [r7, #7]
 8007688:	493e      	ldr	r1, [pc, #248]	@ (8007784 <linkTimer+0x14c>)
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	440b      	add	r3, r1
 8007694:	3308      	adds	r3, #8
 8007696:	6819      	ldr	r1, [r3, #0]
 8007698:	89fb      	ldrh	r3, [r7, #14]
 800769a:	79fa      	ldrb	r2, [r7, #7]
 800769c:	4419      	add	r1, r3
 800769e:	4839      	ldr	r0, [pc, #228]	@ (8007784 <linkTimer+0x14c>)
 80076a0:	4613      	mov	r3, r2
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	00db      	lsls	r3, r3, #3
 80076a8:	4403      	add	r3, r0
 80076aa:	3308      	adds	r3, #8
 80076ac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 80076ae:	79fa      	ldrb	r2, [r7, #7]
 80076b0:	4934      	ldr	r1, [pc, #208]	@ (8007784 <linkTimer+0x14c>)
 80076b2:	4613      	mov	r3, r2
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	4413      	add	r3, r2
 80076b8:	00db      	lsls	r3, r3, #3
 80076ba:	440b      	add	r3, r1
 80076bc:	3308      	adds	r3, #8
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 80076c2:	4b2e      	ldr	r3, [pc, #184]	@ (800777c <linkTimer+0x144>)
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	4619      	mov	r1, r3
 80076ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007784 <linkTimer+0x14c>)
 80076cc:	460b      	mov	r3, r1
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	440b      	add	r3, r1
 80076d2:	00db      	lsls	r3, r3, #3
 80076d4:	4413      	add	r3, r2
 80076d6:	3308      	adds	r3, #8
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d337      	bcc.n	8007750 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 80076e0:	4b26      	ldr	r3, [pc, #152]	@ (800777c <linkTimer+0x144>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 80076e6:	7b7a      	ldrb	r2, [r7, #13]
 80076e8:	4926      	ldr	r1, [pc, #152]	@ (8007784 <linkTimer+0x14c>)
 80076ea:	4613      	mov	r3, r2
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	440b      	add	r3, r1
 80076f4:	3315      	adds	r3, #21
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 80076fa:	e013      	b.n	8007724 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 80076fc:	7b7a      	ldrb	r2, [r7, #13]
 80076fe:	4921      	ldr	r1, [pc, #132]	@ (8007784 <linkTimer+0x14c>)
 8007700:	4613      	mov	r3, r2
 8007702:	005b      	lsls	r3, r3, #1
 8007704:	4413      	add	r3, r2
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	440b      	add	r3, r1
 800770a:	3315      	adds	r3, #21
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8007710:	7b7a      	ldrb	r2, [r7, #13]
 8007712:	491c      	ldr	r1, [pc, #112]	@ (8007784 <linkTimer+0x14c>)
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	440b      	add	r3, r1
 800771e:	3315      	adds	r3, #21
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8007724:	7b3b      	ldrb	r3, [r7, #12]
 8007726:	2b06      	cmp	r3, #6
 8007728:	d00b      	beq.n	8007742 <linkTimer+0x10a>
 800772a:	7b3a      	ldrb	r2, [r7, #12]
 800772c:	4915      	ldr	r1, [pc, #84]	@ (8007784 <linkTimer+0x14c>)
 800772e:	4613      	mov	r3, r2
 8007730:	005b      	lsls	r3, r3, #1
 8007732:	4413      	add	r3, r2
 8007734:	00db      	lsls	r3, r3, #3
 8007736:	440b      	add	r3, r1
 8007738:	3308      	adds	r3, #8
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68ba      	ldr	r2, [r7, #8]
 800773e:	429a      	cmp	r2, r3
 8007740:	d2dc      	bcs.n	80076fc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8007742:	7b7a      	ldrb	r2, [r7, #13]
 8007744:	79fb      	ldrb	r3, [r7, #7]
 8007746:	4611      	mov	r1, r2
 8007748:	4618      	mov	r0, r3
 800774a:	f7ff fecf 	bl	80074ec <LinkTimerAfter>
 800774e:	e00f      	b.n	8007770 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8007750:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <linkTimer+0x144>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	b2da      	uxtb	r2, r3
 8007756:	79fb      	ldrb	r3, [r7, #7]
 8007758:	4611      	mov	r1, r2
 800775a:	4618      	mov	r0, r3
 800775c:	f7ff ff0c 	bl	8007578 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8007760:	4b06      	ldr	r3, [pc, #24]	@ (800777c <linkTimer+0x144>)
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	b2da      	uxtb	r2, r3
 8007766:	4b06      	ldr	r3, [pc, #24]	@ (8007780 <linkTimer+0x148>)
 8007768:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 800776a:	4a04      	ldr	r2, [pc, #16]	@ (800777c <linkTimer+0x144>)
 800776c:	79fb      	ldrb	r3, [r7, #7]
 800776e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8007770:	89fb      	ldrh	r3, [r7, #14]
}
 8007772:	4618      	mov	r0, r3
 8007774:	3710      	adds	r7, #16
 8007776:	46bd      	mov	sp, r7
 8007778:	bd80      	pop	{r7, pc}
 800777a:	bf00      	nop
 800777c:	200002ec 	.word	0x200002ec
 8007780:	200002ed 	.word	0x200002ed
 8007784:	2000025c 	.word	0x2000025c
 8007788:	200002f0 	.word	0x200002f0

0800778c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	4603      	mov	r3, r0
 8007794:	460a      	mov	r2, r1
 8007796:	71fb      	strb	r3, [r7, #7]
 8007798:	4613      	mov	r3, r2
 800779a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 800779c:	4b39      	ldr	r3, [pc, #228]	@ (8007884 <UnlinkTimer+0xf8>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	79fa      	ldrb	r2, [r7, #7]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d111      	bne.n	80077cc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 80077a8:	4b36      	ldr	r3, [pc, #216]	@ (8007884 <UnlinkTimer+0xf8>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	4b36      	ldr	r3, [pc, #216]	@ (8007888 <UnlinkTimer+0xfc>)
 80077b0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 80077b2:	79fa      	ldrb	r2, [r7, #7]
 80077b4:	4935      	ldr	r1, [pc, #212]	@ (800788c <UnlinkTimer+0x100>)
 80077b6:	4613      	mov	r3, r2
 80077b8:	005b      	lsls	r3, r3, #1
 80077ba:	4413      	add	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	440b      	add	r3, r1
 80077c0:	3315      	adds	r3, #21
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	4b2f      	ldr	r3, [pc, #188]	@ (8007884 <UnlinkTimer+0xf8>)
 80077c8:	701a      	strb	r2, [r3, #0]
 80077ca:	e03e      	b.n	800784a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 80077cc:	79fa      	ldrb	r2, [r7, #7]
 80077ce:	492f      	ldr	r1, [pc, #188]	@ (800788c <UnlinkTimer+0x100>)
 80077d0:	4613      	mov	r3, r2
 80077d2:	005b      	lsls	r3, r3, #1
 80077d4:	4413      	add	r3, r2
 80077d6:	00db      	lsls	r3, r3, #3
 80077d8:	440b      	add	r3, r1
 80077da:	3314      	adds	r3, #20
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80077e0:	79fa      	ldrb	r2, [r7, #7]
 80077e2:	492a      	ldr	r1, [pc, #168]	@ (800788c <UnlinkTimer+0x100>)
 80077e4:	4613      	mov	r3, r2
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	4413      	add	r3, r2
 80077ea:	00db      	lsls	r3, r3, #3
 80077ec:	440b      	add	r3, r1
 80077ee:	3315      	adds	r3, #21
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80077f4:	79f9      	ldrb	r1, [r7, #7]
 80077f6:	7bfa      	ldrb	r2, [r7, #15]
 80077f8:	4824      	ldr	r0, [pc, #144]	@ (800788c <UnlinkTimer+0x100>)
 80077fa:	460b      	mov	r3, r1
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	440b      	add	r3, r1
 8007800:	00db      	lsls	r3, r3, #3
 8007802:	4403      	add	r3, r0
 8007804:	3315      	adds	r3, #21
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	b2d8      	uxtb	r0, r3
 800780a:	4920      	ldr	r1, [pc, #128]	@ (800788c <UnlinkTimer+0x100>)
 800780c:	4613      	mov	r3, r2
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	00db      	lsls	r3, r3, #3
 8007814:	440b      	add	r3, r1
 8007816:	3315      	adds	r3, #21
 8007818:	4602      	mov	r2, r0
 800781a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	2b06      	cmp	r3, #6
 8007820:	d013      	beq.n	800784a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8007822:	79f9      	ldrb	r1, [r7, #7]
 8007824:	7bba      	ldrb	r2, [r7, #14]
 8007826:	4819      	ldr	r0, [pc, #100]	@ (800788c <UnlinkTimer+0x100>)
 8007828:	460b      	mov	r3, r1
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	440b      	add	r3, r1
 800782e:	00db      	lsls	r3, r3, #3
 8007830:	4403      	add	r3, r0
 8007832:	3314      	adds	r3, #20
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	b2d8      	uxtb	r0, r3
 8007838:	4914      	ldr	r1, [pc, #80]	@ (800788c <UnlinkTimer+0x100>)
 800783a:	4613      	mov	r3, r2
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4413      	add	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	440b      	add	r3, r1
 8007844:	3314      	adds	r3, #20
 8007846:	4602      	mov	r2, r0
 8007848:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 800784a:	79fa      	ldrb	r2, [r7, #7]
 800784c:	490f      	ldr	r1, [pc, #60]	@ (800788c <UnlinkTimer+0x100>)
 800784e:	4613      	mov	r3, r2
 8007850:	005b      	lsls	r3, r3, #1
 8007852:	4413      	add	r3, r2
 8007854:	00db      	lsls	r3, r3, #3
 8007856:	440b      	add	r3, r1
 8007858:	330c      	adds	r3, #12
 800785a:	2201      	movs	r2, #1
 800785c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800785e:	4b09      	ldr	r3, [pc, #36]	@ (8007884 <UnlinkTimer+0xf8>)
 8007860:	781b      	ldrb	r3, [r3, #0]
 8007862:	b2db      	uxtb	r3, r3
 8007864:	2b06      	cmp	r3, #6
 8007866:	d107      	bne.n	8007878 <UnlinkTimer+0xec>
 8007868:	79bb      	ldrb	r3, [r7, #6]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d104      	bne.n	8007878 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800786e:	4b08      	ldr	r3, [pc, #32]	@ (8007890 <UnlinkTimer+0x104>)
 8007870:	f04f 32ff 	mov.w	r2, #4294967295
 8007874:	601a      	str	r2, [r3, #0]
  }

  return;
 8007876:	bf00      	nop
 8007878:	bf00      	nop
}
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	200002ec 	.word	0x200002ec
 8007888:	200002ed 	.word	0x200002ed
 800788c:	2000025c 	.word	0x2000025c
 8007890:	200002f0 	.word	0x200002f0

08007894 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 800789a:	4b1a      	ldr	r3, [pc, #104]	@ (8007904 <ReturnTimeElapsed+0x70>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a2:	d026      	beq.n	80078f2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 80078a4:	f7ff fe02 	bl	80074ac <ReadRtcSsrValue>
 80078a8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 80078aa:	4b16      	ldr	r3, [pc, #88]	@ (8007904 <ReturnTimeElapsed+0x70>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d805      	bhi.n	80078c0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 80078b4:	4b13      	ldr	r3, [pc, #76]	@ (8007904 <ReturnTimeElapsed+0x70>)
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	e00a      	b.n	80078d6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 80078c0:	4b11      	ldr	r3, [pc, #68]	@ (8007908 <ReturnTimeElapsed+0x74>)
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	461a      	mov	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 80078cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007904 <ReturnTimeElapsed+0x70>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	4413      	add	r3, r2
 80078d4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80078d6:	4b0d      	ldr	r3, [pc, #52]	@ (800790c <ReturnTimeElapsed+0x78>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	fb02 f303 	mul.w	r3, r2, r3
 80078e2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80078e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007910 <ReturnTimeElapsed+0x7c>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	461a      	mov	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	40d3      	lsrs	r3, r2
 80078ee:	607b      	str	r3, [r7, #4]
 80078f0:	e001      	b.n	80078f6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80078f2:	2300      	movs	r3, #0
 80078f4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	b29b      	uxth	r3, r3
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3708      	adds	r7, #8
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	200002f0 	.word	0x200002f0
 8007908:	200002f8 	.word	0x200002f8
 800790c:	200002f6 	.word	0x200002f6
 8007910:	200002f5 	.word	0x200002f5

08007914 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	4603      	mov	r3, r0
 800791c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 800791e:	88fb      	ldrh	r3, [r7, #6]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d108      	bne.n	8007936 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8007924:	f7ff fdc2 	bl	80074ac <ReadRtcSsrValue>
 8007928:	4603      	mov	r3, r0
 800792a:	4a21      	ldr	r2, [pc, #132]	@ (80079b0 <RestartWakeupCounter+0x9c>)
 800792c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 800792e:	2003      	movs	r0, #3
 8007930:	f004 fc75 	bl	800c21e <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8007934:	e039      	b.n	80079aa <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8007936:	88fb      	ldrh	r3, [r7, #6]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d803      	bhi.n	8007944 <RestartWakeupCounter+0x30>
 800793c:	4b1d      	ldr	r3, [pc, #116]	@ (80079b4 <RestartWakeupCounter+0xa0>)
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d002      	beq.n	800794a <RestartWakeupCounter+0x36>
      Value -= 1;
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	3b01      	subs	r3, #1
 8007948:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800794a:	bf00      	nop
 800794c:	4b1a      	ldr	r3, [pc, #104]	@ (80079b8 <RestartWakeupCounter+0xa4>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	f003 0304 	and.w	r3, r3, #4
 8007956:	2b00      	cmp	r3, #0
 8007958:	d0f8      	beq.n	800794c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800795a:	4b17      	ldr	r3, [pc, #92]	@ (80079b8 <RestartWakeupCounter+0xa4>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68db      	ldr	r3, [r3, #12]
 8007960:	b2da      	uxtb	r2, r3
 8007962:	4b15      	ldr	r3, [pc, #84]	@ (80079b8 <RestartWakeupCounter+0xa4>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 800796a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800796c:	4b13      	ldr	r3, [pc, #76]	@ (80079bc <RestartWakeupCounter+0xa8>)
 800796e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007972:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8007974:	2003      	movs	r0, #3
 8007976:	f004 fc60 	bl	800c23a <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 800797a:	4b11      	ldr	r3, [pc, #68]	@ (80079c0 <RestartWakeupCounter+0xac>)
 800797c:	695b      	ldr	r3, [r3, #20]
 800797e:	0c1b      	lsrs	r3, r3, #16
 8007980:	041b      	lsls	r3, r3, #16
 8007982:	88fa      	ldrh	r2, [r7, #6]
 8007984:	490e      	ldr	r1, [pc, #56]	@ (80079c0 <RestartWakeupCounter+0xac>)
 8007986:	4313      	orrs	r3, r2
 8007988:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 800798a:	f7ff fd8f 	bl	80074ac <ReadRtcSsrValue>
 800798e:	4603      	mov	r3, r0
 8007990:	4a07      	ldr	r2, [pc, #28]	@ (80079b0 <RestartWakeupCounter+0x9c>)
 8007992:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8007994:	4b08      	ldr	r3, [pc, #32]	@ (80079b8 <RestartWakeupCounter+0xa4>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	4b07      	ldr	r3, [pc, #28]	@ (80079b8 <RestartWakeupCounter+0xa4>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80079a2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 80079a4:	f3af 8000 	nop.w
  return ;
 80079a8:	bf00      	nop
}
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}
 80079b0:	200002f0 	.word	0x200002f0
 80079b4:	200002f5 	.word	0x200002f5
 80079b8:	20000340 	.word	0x20000340
 80079bc:	58000800 	.word	0x58000800
 80079c0:	40002800 	.word	0x40002800

080079c4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 80079ca:	4b45      	ldr	r3, [pc, #276]	@ (8007ae0 <RescheduleTimerList+0x11c>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80079d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80079d6:	d107      	bne.n	80079e8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80079d8:	bf00      	nop
 80079da:	4b42      	ldr	r3, [pc, #264]	@ (8007ae4 <RescheduleTimerList+0x120>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d1f8      	bne.n	80079da <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80079e8:	4b3e      	ldr	r3, [pc, #248]	@ (8007ae4 <RescheduleTimerList+0x120>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	4b3d      	ldr	r3, [pc, #244]	@ (8007ae4 <RescheduleTimerList+0x120>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80079f6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80079f8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ae8 <RescheduleTimerList+0x124>)
 80079fa:	781b      	ldrb	r3, [r3, #0]
 80079fc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80079fe:	7bfa      	ldrb	r2, [r7, #15]
 8007a00:	493a      	ldr	r1, [pc, #232]	@ (8007aec <RescheduleTimerList+0x128>)
 8007a02:	4613      	mov	r3, r2
 8007a04:	005b      	lsls	r3, r3, #1
 8007a06:	4413      	add	r3, r2
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	440b      	add	r3, r1
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8007a12:	f7ff ff3f 	bl	8007894 <ReturnTimeElapsed>
 8007a16:	4603      	mov	r3, r0
 8007a18:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 8007a1a:	88fb      	ldrh	r3, [r7, #6]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d205      	bcs.n	8007a2e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8007a22:	2300      	movs	r3, #0
 8007a24:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007a26:	4b32      	ldr	r3, [pc, #200]	@ (8007af0 <RescheduleTimerList+0x12c>)
 8007a28:	2201      	movs	r2, #1
 8007a2a:	701a      	strb	r2, [r3, #0]
 8007a2c:	e04d      	b.n	8007aca <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 8007a2e:	88fb      	ldrh	r3, [r7, #6]
 8007a30:	4a30      	ldr	r2, [pc, #192]	@ (8007af4 <RescheduleTimerList+0x130>)
 8007a32:	8812      	ldrh	r2, [r2, #0]
 8007a34:	b292      	uxth	r2, r2
 8007a36:	4413      	add	r3, r2
 8007a38:	461a      	mov	r2, r3
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d906      	bls.n	8007a4e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8007a40:	4b2c      	ldr	r3, [pc, #176]	@ (8007af4 <RescheduleTimerList+0x130>)
 8007a42:	881b      	ldrh	r3, [r3, #0]
 8007a44:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8007a46:	4b2a      	ldr	r3, [pc, #168]	@ (8007af0 <RescheduleTimerList+0x12c>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	701a      	strb	r2, [r3, #0]
 8007a4c:	e03d      	b.n	8007aca <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	88fb      	ldrh	r3, [r7, #6]
 8007a54:	1ad3      	subs	r3, r2, r3
 8007a56:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007a58:	4b25      	ldr	r3, [pc, #148]	@ (8007af0 <RescheduleTimerList+0x12c>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007a5e:	e034      	b.n	8007aca <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8007a60:	7bfa      	ldrb	r2, [r7, #15]
 8007a62:	4922      	ldr	r1, [pc, #136]	@ (8007aec <RescheduleTimerList+0x128>)
 8007a64:	4613      	mov	r3, r2
 8007a66:	005b      	lsls	r3, r3, #1
 8007a68:	4413      	add	r3, r2
 8007a6a:	00db      	lsls	r3, r3, #3
 8007a6c:	440b      	add	r3, r1
 8007a6e:	3308      	adds	r3, #8
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	88fb      	ldrh	r3, [r7, #6]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d20a      	bcs.n	8007a8e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8007a78:	7bfa      	ldrb	r2, [r7, #15]
 8007a7a:	491c      	ldr	r1, [pc, #112]	@ (8007aec <RescheduleTimerList+0x128>)
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	4413      	add	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	440b      	add	r3, r1
 8007a86:	3308      	adds	r3, #8
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	e013      	b.n	8007ab6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 8007a8e:	7bfa      	ldrb	r2, [r7, #15]
 8007a90:	4916      	ldr	r1, [pc, #88]	@ (8007aec <RescheduleTimerList+0x128>)
 8007a92:	4613      	mov	r3, r2
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	440b      	add	r3, r1
 8007a9c:	3308      	adds	r3, #8
 8007a9e:	6819      	ldr	r1, [r3, #0]
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	7bfa      	ldrb	r2, [r7, #15]
 8007aa4:	1ac9      	subs	r1, r1, r3
 8007aa6:	4811      	ldr	r0, [pc, #68]	@ (8007aec <RescheduleTimerList+0x128>)
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	005b      	lsls	r3, r3, #1
 8007aac:	4413      	add	r3, r2
 8007aae:	00db      	lsls	r3, r3, #3
 8007ab0:	4403      	add	r3, r0
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8007ab6:	7bfa      	ldrb	r2, [r7, #15]
 8007ab8:	490c      	ldr	r1, [pc, #48]	@ (8007aec <RescheduleTimerList+0x128>)
 8007aba:	4613      	mov	r3, r2
 8007abc:	005b      	lsls	r3, r3, #1
 8007abe:	4413      	add	r3, r2
 8007ac0:	00db      	lsls	r3, r3, #3
 8007ac2:	440b      	add	r3, r1
 8007ac4:	3315      	adds	r3, #21
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	2b06      	cmp	r3, #6
 8007ace:	d1c7      	bne.n	8007a60 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 8007ad0:	89bb      	ldrh	r3, [r7, #12]
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7ff ff1e 	bl	8007914 <RestartWakeupCounter>

  return ;
 8007ad8:	bf00      	nop
}
 8007ada:	3710      	adds	r7, #16
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40002800 	.word	0x40002800
 8007ae4:	20000340 	.word	0x20000340
 8007ae8:	200002ec 	.word	0x200002ec
 8007aec:	2000025c 	.word	0x2000025c
 8007af0:	200002f4 	.word	0x200002f4
 8007af4:	200002fa 	.word	0x200002fa

08007af8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08a      	sub	sp, #40	@ 0x28
 8007afc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007afe:	f3ef 8310 	mrs	r3, PRIMASK
 8007b02:	617b      	str	r3, [r7, #20]
  return(result);
 8007b04:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007b06:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8007b08:	b672      	cpsid	i
}
 8007b0a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007b0c:	4b59      	ldr	r3, [pc, #356]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	22ca      	movs	r2, #202	@ 0xca
 8007b12:	625a      	str	r2, [r3, #36]	@ 0x24
 8007b14:	4b57      	ldr	r3, [pc, #348]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2253      	movs	r2, #83	@ 0x53
 8007b1a:	625a      	str	r2, [r3, #36]	@ 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 8007b1c:	4b55      	ldr	r3, [pc, #340]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	689a      	ldr	r2, [r3, #8]
 8007b22:	4b54      	ldr	r3, [pc, #336]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b2a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 8007b2c:	4b52      	ldr	r3, [pc, #328]	@ (8007c78 <HW_TS_RTC_Wakeup_Handler+0x180>)
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8007b34:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007b38:	4950      	ldr	r1, [pc, #320]	@ (8007c7c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	005b      	lsls	r3, r3, #1
 8007b3e:	4413      	add	r3, r2
 8007b40:	00db      	lsls	r3, r3, #3
 8007b42:	440b      	add	r3, r1
 8007b44:	330c      	adds	r3, #12
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d16e      	bne.n	8007c2c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 8007b4e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007b52:	494a      	ldr	r1, [pc, #296]	@ (8007c7c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007b54:	4613      	mov	r3, r2
 8007b56:	005b      	lsls	r3, r3, #1
 8007b58:	4413      	add	r3, r2
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	440b      	add	r3, r1
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8007b62:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007b66:	4945      	ldr	r1, [pc, #276]	@ (8007c7c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007b68:	4613      	mov	r3, r2
 8007b6a:	005b      	lsls	r3, r3, #1
 8007b6c:	4413      	add	r3, r2
 8007b6e:	00db      	lsls	r3, r3, #3
 8007b70:	440b      	add	r3, r1
 8007b72:	3310      	adds	r3, #16
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8007b78:	4b41      	ldr	r3, [pc, #260]	@ (8007c80 <HW_TS_RTC_Wakeup_Handler+0x188>)
 8007b7a:	781b      	ldrb	r3, [r3, #0]
 8007b7c:	b2db      	uxtb	r3, r3
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d04c      	beq.n	8007c1c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8007b82:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007b86:	493d      	ldr	r1, [pc, #244]	@ (8007c7c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007b88:	4613      	mov	r3, r2
 8007b8a:	005b      	lsls	r3, r3, #1
 8007b8c:	4413      	add	r3, r2
 8007b8e:	00db      	lsls	r3, r3, #3
 8007b90:	440b      	add	r3, r1
 8007b92:	330d      	adds	r3, #13
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d124      	bne.n	8007be6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8007b9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7ff fdf2 	bl	800778c <UnlinkTimer>
 8007ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007baa:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bac:	693b      	ldr	r3, [r7, #16]
 8007bae:	f383 8810 	msr	PRIMASK, r3
}
 8007bb2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8007bb4:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007bb8:	4930      	ldr	r1, [pc, #192]	@ (8007c7c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8007bba:	4613      	mov	r3, r2
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	4413      	add	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	440b      	add	r3, r1
 8007bc4:	3304      	adds	r3, #4
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bcc:	4611      	mov	r1, r2
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f000 f9b8 	bl	8007f44 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007bd4:	4b27      	ldr	r3, [pc, #156]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	22ca      	movs	r2, #202	@ 0xca
 8007bda:	625a      	str	r2, [r3, #36]	@ 0x24
 8007bdc:	4b25      	ldr	r3, [pc, #148]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2253      	movs	r2, #83	@ 0x53
 8007be2:	625a      	str	r2, [r3, #36]	@ 0x24
 8007be4:	e012      	b.n	8007c0c <HW_TS_RTC_Wakeup_Handler+0x114>
 8007be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f383 8810 	msr	PRIMASK, r3
}
 8007bf0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 8007bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f000 f920 	bl	8007e3c <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007bfc:	4b1d      	ldr	r3, [pc, #116]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	22ca      	movs	r2, #202	@ 0xca
 8007c02:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c04:	4b1b      	ldr	r3, [pc, #108]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2253      	movs	r2, #83	@ 0x53
 8007c0a:	625a      	str	r2, [r3, #36]	@ 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 8007c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007c10:	69fa      	ldr	r2, [r7, #28]
 8007c12:	4619      	mov	r1, r3
 8007c14:	69b8      	ldr	r0, [r7, #24]
 8007c16:	f000 fa1b 	bl	8008050 <HW_TS_RTC_Int_AppNot>
 8007c1a:	e022      	b.n	8007c62 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 8007c1c:	f7ff fed2 	bl	80079c4 <RescheduleTimerList>
 8007c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c22:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f383 8810 	msr	PRIMASK, r3
}
 8007c2a:	e01a      	b.n	8007c62 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007c2c:	bf00      	nop
 8007c2e:	4b11      	ldr	r3, [pc, #68]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	f003 0304 	and.w	r3, r3, #4
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d0f8      	beq.n	8007c2e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	b2da      	uxtb	r2, r3
 8007c44:	4b0b      	ldr	r3, [pc, #44]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007c4c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8007c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c84 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8007c50:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007c54:	60da      	str	r2, [r3, #12]
 8007c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c58:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f383 8810 	msr	PRIMASK, r3
}
 8007c60:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007c62:	4b04      	ldr	r3, [pc, #16]	@ (8007c74 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	22ff      	movs	r2, #255	@ 0xff
 8007c68:	625a      	str	r2, [r3, #36]	@ 0x24

  return;
 8007c6a:	bf00      	nop
}
 8007c6c:	3728      	adds	r7, #40	@ 0x28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
 8007c72:	bf00      	nop
 8007c74:	20000340 	.word	0x20000340
 8007c78:	200002ec 	.word	0x200002ec
 8007c7c:	2000025c 	.word	0x2000025c
 8007c80:	200002f4 	.word	0x200002f4
 8007c84:	58000800 	.word	0x58000800

08007c88 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b088      	sub	sp, #32
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007c94:	4b5e      	ldr	r3, [pc, #376]	@ (8007e10 <HW_TS_Init+0x188>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	22ca      	movs	r2, #202	@ 0xca
 8007c9a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c9c:	4b5c      	ldr	r3, [pc, #368]	@ (8007e10 <HW_TS_Init+0x188>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2253      	movs	r2, #83	@ 0x53
 8007ca2:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8007ca4:	4b5b      	ldr	r3, [pc, #364]	@ (8007e14 <HW_TS_Init+0x18c>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	4a5a      	ldr	r2, [pc, #360]	@ (8007e14 <HW_TS_Init+0x18c>)
 8007caa:	f043 0320 	orr.w	r3, r3, #32
 8007cae:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8007cb0:	4b58      	ldr	r3, [pc, #352]	@ (8007e14 <HW_TS_Init+0x18c>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	b2db      	uxtb	r3, r3
 8007cb6:	f003 0307 	and.w	r3, r3, #7
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	f1c3 0304 	rsb	r3, r3, #4
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	4b55      	ldr	r3, [pc, #340]	@ (8007e18 <HW_TS_Init+0x190>)
 8007cc4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8007cc6:	4b53      	ldr	r3, [pc, #332]	@ (8007e14 <HW_TS_Init+0x18c>)
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007cce:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8007cd2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cd4:	693a      	ldr	r2, [r7, #16]
 8007cd6:	fa92 f2a2 	rbit	r2, r2
 8007cda:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007cdc:	68fa      	ldr	r2, [r7, #12]
 8007cde:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007ce0:	697a      	ldr	r2, [r7, #20]
 8007ce2:	2a00      	cmp	r2, #0
 8007ce4:	d101      	bne.n	8007cea <HW_TS_Init+0x62>
  {
    return 32U;
 8007ce6:	2220      	movs	r2, #32
 8007ce8:	e003      	b.n	8007cf2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	fab2 f282 	clz	r2, r2
 8007cf0:	b2d2      	uxtb	r2, r2
 8007cf2:	40d3      	lsrs	r3, r2
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	b2da      	uxtb	r2, r3
 8007cfa:	4b48      	ldr	r3, [pc, #288]	@ (8007e1c <HW_TS_Init+0x194>)
 8007cfc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 8007cfe:	4b45      	ldr	r3, [pc, #276]	@ (8007e14 <HW_TS_Init+0x18c>)
 8007d00:	691b      	ldr	r3, [r3, #16]
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	b29a      	uxth	r2, r3
 8007d0e:	4b44      	ldr	r3, [pc, #272]	@ (8007e20 <HW_TS_Init+0x198>)
 8007d10:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8007d12:	4b43      	ldr	r3, [pc, #268]	@ (8007e20 <HW_TS_Init+0x198>)
 8007d14:	881b      	ldrh	r3, [r3, #0]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	4a40      	ldr	r2, [pc, #256]	@ (8007e1c <HW_TS_Init+0x194>)
 8007d1a:	7812      	ldrb	r2, [r2, #0]
 8007d1c:	fb02 f303 	mul.w	r3, r2, r3
 8007d20:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8007d24:	4a3c      	ldr	r2, [pc, #240]	@ (8007e18 <HW_TS_Init+0x190>)
 8007d26:	7812      	ldrb	r2, [r2, #0]
 8007d28:	40d3      	lsrs	r3, r2
 8007d2a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 8007d2c:	69bb      	ldr	r3, [r7, #24]
 8007d2e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d904      	bls.n	8007d40 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8007d36:	4b3b      	ldr	r3, [pc, #236]	@ (8007e24 <HW_TS_Init+0x19c>)
 8007d38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007d3c:	801a      	strh	r2, [r3, #0]
 8007d3e:	e003      	b.n	8007d48 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	b29a      	uxth	r2, r3
 8007d44:	4b37      	ldr	r3, [pc, #220]	@ (8007e24 <HW_TS_Init+0x19c>)
 8007d46:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007d48:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007d4c:	f7ff fb9c 	bl	8007488 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8007d50:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8007d54:	f7ff fb84 	bl	8007460 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d13d      	bne.n	8007dda <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8007d5e:	4b32      	ldr	r3, [pc, #200]	@ (8007e28 <HW_TS_Init+0x1a0>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8007d64:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <HW_TS_Init+0x1a4>)
 8007d66:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	77fb      	strb	r3, [r7, #31]
 8007d70:	e00c      	b.n	8007d8c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8007d72:	7ffa      	ldrb	r2, [r7, #31]
 8007d74:	492e      	ldr	r1, [pc, #184]	@ (8007e30 <HW_TS_Init+0x1a8>)
 8007d76:	4613      	mov	r3, r2
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	4413      	add	r3, r2
 8007d7c:	00db      	lsls	r3, r3, #3
 8007d7e:	440b      	add	r3, r1
 8007d80:	330c      	adds	r3, #12
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8007d86:	7ffb      	ldrb	r3, [r7, #31]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	77fb      	strb	r3, [r7, #31]
 8007d8c:	7ffb      	ldrb	r3, [r7, #31]
 8007d8e:	2b05      	cmp	r3, #5
 8007d90:	d9ef      	bls.n	8007d72 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8007d92:	4b28      	ldr	r3, [pc, #160]	@ (8007e34 <HW_TS_Init+0x1ac>)
 8007d94:	2206      	movs	r2, #6
 8007d96:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8007d98:	4b1d      	ldr	r3, [pc, #116]	@ (8007e10 <HW_TS_Init+0x188>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	689a      	ldr	r2, [r3, #8]
 8007d9e:	4b1c      	ldr	r3, [pc, #112]	@ (8007e10 <HW_TS_Init+0x188>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007da6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8007da8:	4b19      	ldr	r3, [pc, #100]	@ (8007e10 <HW_TS_Init+0x188>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	b2da      	uxtb	r2, r3
 8007db0:	4b17      	ldr	r3, [pc, #92]	@ (8007e10 <HW_TS_Init+0x188>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007db8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8007dba:	4b1f      	ldr	r3, [pc, #124]	@ (8007e38 <HW_TS_Init+0x1b0>)
 8007dbc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007dc0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8007dc2:	2003      	movs	r0, #3
 8007dc4:	f004 fa39 	bl	800c23a <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8007dc8:	4b11      	ldr	r3, [pc, #68]	@ (8007e10 <HW_TS_Init+0x188>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	689a      	ldr	r2, [r3, #8]
 8007dce:	4b10      	ldr	r3, [pc, #64]	@ (8007e10 <HW_TS_Init+0x188>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dd6:	609a      	str	r2, [r3, #8]
 8007dd8:	e009      	b.n	8007dee <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 8007dda:	4b0d      	ldr	r3, [pc, #52]	@ (8007e10 <HW_TS_Init+0x188>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d002      	beq.n	8007dee <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8007de8:	2003      	movs	r0, #3
 8007dea:	f004 fa18 	bl	800c21e <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007dee:	4b08      	ldr	r3, [pc, #32]	@ (8007e10 <HW_TS_Init+0x188>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	22ff      	movs	r2, #255	@ 0xff
 8007df4:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8007df6:	2200      	movs	r2, #0
 8007df8:	2103      	movs	r1, #3
 8007dfa:	2003      	movs	r0, #3
 8007dfc:	f004 f9cd 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007e00:	2003      	movs	r0, #3
 8007e02:	f004 f9e4 	bl	800c1ce <HAL_NVIC_EnableIRQ>

  return;
 8007e06:	bf00      	nop
}
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
 8007e0e:	bf00      	nop
 8007e10:	20000340 	.word	0x20000340
 8007e14:	40002800 	.word	0x40002800
 8007e18:	200002f5 	.word	0x200002f5
 8007e1c:	200002f6 	.word	0x200002f6
 8007e20:	200002f8 	.word	0x200002f8
 8007e24:	200002fa 	.word	0x200002fa
 8007e28:	200002f4 	.word	0x200002f4
 8007e2c:	200002f0 	.word	0x200002f0
 8007e30:	2000025c 	.word	0x2000025c
 8007e34:	200002ec 	.word	0x200002ec
 8007e38:	58000800 	.word	0x58000800

08007e3c <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b086      	sub	sp, #24
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	4603      	mov	r3, r0
 8007e44:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e46:	f3ef 8310 	mrs	r3, PRIMASK
 8007e4a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007e4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007e50:	b672      	cpsid	i
}
 8007e52:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8007e54:	2003      	movs	r0, #3
 8007e56:	f004 f9c8 	bl	800c1ea <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007e5a:	4b34      	ldr	r3, [pc, #208]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	22ca      	movs	r2, #202	@ 0xca
 8007e60:	625a      	str	r2, [r3, #36]	@ 0x24
 8007e62:	4b32      	ldr	r3, [pc, #200]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	2253      	movs	r2, #83	@ 0x53
 8007e68:	625a      	str	r2, [r3, #36]	@ 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8007e6a:	79fa      	ldrb	r2, [r7, #7]
 8007e6c:	4930      	ldr	r1, [pc, #192]	@ (8007f30 <HW_TS_Stop+0xf4>)
 8007e6e:	4613      	mov	r3, r2
 8007e70:	005b      	lsls	r3, r3, #1
 8007e72:	4413      	add	r3, r2
 8007e74:	00db      	lsls	r3, r3, #3
 8007e76:	440b      	add	r3, r1
 8007e78:	330c      	adds	r3, #12
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b02      	cmp	r3, #2
 8007e80:	d142      	bne.n	8007f08 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	2100      	movs	r1, #0
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fc80 	bl	800778c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8007e8c:	4b29      	ldr	r3, [pc, #164]	@ (8007f34 <HW_TS_Stop+0xf8>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8007e92:	7cfb      	ldrb	r3, [r7, #19]
 8007e94:	2b06      	cmp	r3, #6
 8007e96:	d12f      	bne.n	8007ef8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8007e98:	4b27      	ldr	r3, [pc, #156]	@ (8007f38 <HW_TS_Stop+0xfc>)
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ea0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ea4:	d107      	bne.n	8007eb6 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8007ea6:	bf00      	nop
 8007ea8:	4b20      	ldr	r3, [pc, #128]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d1f8      	bne.n	8007ea8 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	689a      	ldr	r2, [r3, #8]
 8007ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec4:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8007ec6:	bf00      	nop
 8007ec8:	4b18      	ldr	r3, [pc, #96]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d0f8      	beq.n	8007ec8 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8007ed6:	4b15      	ldr	r3, [pc, #84]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	b2da      	uxtb	r2, r3
 8007ede:	4b13      	ldr	r3, [pc, #76]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8007ee6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8007ee8:	4b14      	ldr	r3, [pc, #80]	@ (8007f3c <HW_TS_Stop+0x100>)
 8007eea:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8007eee:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8007ef0:	2003      	movs	r0, #3
 8007ef2:	f004 f9a2 	bl	800c23a <HAL_NVIC_ClearPendingIRQ>
 8007ef6:	e007      	b.n	8007f08 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8007ef8:	4b11      	ldr	r3, [pc, #68]	@ (8007f40 <HW_TS_Stop+0x104>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	7cfa      	ldrb	r2, [r7, #19]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d001      	beq.n	8007f08 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 8007f04:	f7ff fd5e 	bl	80079c4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8007f08:	4b08      	ldr	r3, [pc, #32]	@ (8007f2c <HW_TS_Stop+0xf0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	22ff      	movs	r2, #255	@ 0xff
 8007f0e:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8007f10:	2003      	movs	r0, #3
 8007f12:	f004 f95c 	bl	800c1ce <HAL_NVIC_EnableIRQ>
 8007f16:	697b      	ldr	r3, [r7, #20]
 8007f18:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	f383 8810 	msr	PRIMASK, r3
}
 8007f20:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8007f22:	bf00      	nop
}
 8007f24:	3718      	adds	r7, #24
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	20000340 	.word	0x20000340
 8007f30:	2000025c 	.word	0x2000025c
 8007f34:	200002ec 	.word	0x200002ec
 8007f38:	40002800 	.word	0x40002800
 8007f3c:	58000800 	.word	0x58000800
 8007f40:	200002ed 	.word	0x200002ed

08007f44 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b086      	sub	sp, #24
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	6039      	str	r1, [r7, #0]
 8007f4e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8007f50:	79fa      	ldrb	r2, [r7, #7]
 8007f52:	493b      	ldr	r1, [pc, #236]	@ (8008040 <HW_TS_Start+0xfc>)
 8007f54:	4613      	mov	r3, r2
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	4413      	add	r3, r2
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	440b      	add	r3, r1
 8007f5e:	330c      	adds	r3, #12
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	b2db      	uxtb	r3, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d103      	bne.n	8007f70 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8007f68:	79fb      	ldrb	r3, [r7, #7]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7ff ff66 	bl	8007e3c <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f70:	f3ef 8310 	mrs	r3, PRIMASK
 8007f74:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f76:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8007f78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8007f7a:	b672      	cpsid	i
}
 8007f7c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8007f7e:	2003      	movs	r0, #3
 8007f80:	f004 f933 	bl	800c1ea <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8007f84:	4b2f      	ldr	r3, [pc, #188]	@ (8008044 <HW_TS_Start+0x100>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	22ca      	movs	r2, #202	@ 0xca
 8007f8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8007f8c:	4b2d      	ldr	r3, [pc, #180]	@ (8008044 <HW_TS_Start+0x100>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2253      	movs	r2, #83	@ 0x53
 8007f92:	625a      	str	r2, [r3, #36]	@ 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8007f94:	79fa      	ldrb	r2, [r7, #7]
 8007f96:	492a      	ldr	r1, [pc, #168]	@ (8008040 <HW_TS_Start+0xfc>)
 8007f98:	4613      	mov	r3, r2
 8007f9a:	005b      	lsls	r3, r3, #1
 8007f9c:	4413      	add	r3, r2
 8007f9e:	00db      	lsls	r3, r3, #3
 8007fa0:	440b      	add	r3, r1
 8007fa2:	330c      	adds	r3, #12
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8007fa8:	79fa      	ldrb	r2, [r7, #7]
 8007faa:	4925      	ldr	r1, [pc, #148]	@ (8008040 <HW_TS_Start+0xfc>)
 8007fac:	4613      	mov	r3, r2
 8007fae:	005b      	lsls	r3, r3, #1
 8007fb0:	4413      	add	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	440b      	add	r3, r1
 8007fb6:	3308      	adds	r3, #8
 8007fb8:	683a      	ldr	r2, [r7, #0]
 8007fba:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 8007fbc:	79fa      	ldrb	r2, [r7, #7]
 8007fbe:	4920      	ldr	r1, [pc, #128]	@ (8008040 <HW_TS_Start+0xfc>)
 8007fc0:	4613      	mov	r3, r2
 8007fc2:	005b      	lsls	r3, r3, #1
 8007fc4:	4413      	add	r3, r2
 8007fc6:	00db      	lsls	r3, r3, #3
 8007fc8:	440b      	add	r3, r1
 8007fca:	3304      	adds	r3, #4
 8007fcc:	683a      	ldr	r2, [r7, #0]
 8007fce:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8007fd0:	79fb      	ldrb	r3, [r7, #7]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7ff fb30 	bl	8007638 <linkTimer>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 8007fdc:	4b1a      	ldr	r3, [pc, #104]	@ (8008048 <HW_TS_Start+0x104>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	@ (800804c <HW_TS_Start+0x108>)
 8007fe4:	781b      	ldrb	r3, [r3, #0]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	7c7a      	ldrb	r2, [r7, #17]
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d002      	beq.n	8007ff4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 8007fee:	f7ff fce9 	bl	80079c4 <RescheduleTimerList>
 8007ff2:	e013      	b.n	800801c <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 8007ff4:	79fa      	ldrb	r2, [r7, #7]
 8007ff6:	4912      	ldr	r1, [pc, #72]	@ (8008040 <HW_TS_Start+0xfc>)
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	4413      	add	r3, r2
 8007ffe:	00db      	lsls	r3, r3, #3
 8008000:	440b      	add	r3, r1
 8008002:	3308      	adds	r3, #8
 8008004:	6819      	ldr	r1, [r3, #0]
 8008006:	8a7b      	ldrh	r3, [r7, #18]
 8008008:	79fa      	ldrb	r2, [r7, #7]
 800800a:	1ac9      	subs	r1, r1, r3
 800800c:	480c      	ldr	r0, [pc, #48]	@ (8008040 <HW_TS_Start+0xfc>)
 800800e:	4613      	mov	r3, r2
 8008010:	005b      	lsls	r3, r3, #1
 8008012:	4413      	add	r3, r2
 8008014:	00db      	lsls	r3, r3, #3
 8008016:	4403      	add	r3, r0
 8008018:	3308      	adds	r3, #8
 800801a:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800801c:	4b09      	ldr	r3, [pc, #36]	@ (8008044 <HW_TS_Start+0x100>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	22ff      	movs	r2, #255	@ 0xff
 8008022:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8008024:	2003      	movs	r0, #3
 8008026:	f004 f8d2 	bl	800c1ce <HAL_NVIC_EnableIRQ>
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802e:	68bb      	ldr	r3, [r7, #8]
 8008030:	f383 8810 	msr	PRIMASK, r3
}
 8008034:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8008036:	bf00      	nop
}
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	2000025c 	.word	0x2000025c
 8008044:	20000340 	.word	0x20000340
 8008048:	200002ec 	.word	0x200002ec
 800804c:	200002ed 	.word	0x200002ed

08008050 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	460b      	mov	r3, r1
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4798      	blx	r3

  return;
 8008062:	bf00      	nop
}
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b084      	sub	sp, #16
 8008070:	af00      	add	r7, sp, #0
 8008072:	60b9      	str	r1, [r7, #8]
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	4603      	mov	r3, r0
 8008078:	73fb      	strb	r3, [r7, #15]
 800807a:	4613      	mov	r3, r2
 800807c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10f      	bne.n	80080a4 <HW_UART_Receive_IT+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1RxCb = cb;
 8008084:	4a0a      	ldr	r2, [pc, #40]	@ (80080b0 <HW_UART_Receive_IT+0x44>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6013      	str	r3, [r2, #0]
            HW_UART_RX_IT(huart1, USART1);
 800808a:	4a09      	ldr	r2, [pc, #36]	@ (80080b0 <HW_UART_Receive_IT+0x44>)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	4b08      	ldr	r3, [pc, #32]	@ (80080b4 <HW_UART_Receive_IT+0x48>)
 8008092:	4a09      	ldr	r2, [pc, #36]	@ (80080b8 <HW_UART_Receive_IT+0x4c>)
 8008094:	601a      	str	r2, [r3, #0]
 8008096:	89bb      	ldrh	r3, [r7, #12]
 8008098:	461a      	mov	r2, r3
 800809a:	68b9      	ldr	r1, [r7, #8]
 800809c:	4805      	ldr	r0, [pc, #20]	@ (80080b4 <HW_UART_Receive_IT+0x48>)
 800809e:	f007 ff4b 	bl	800ff38 <HAL_UART_Receive_IT>
            break;
 80080a2:	e000      	b.n	80080a6 <HW_UART_Receive_IT+0x3a>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 80080a4:	bf00      	nop
    }

    return;
 80080a6:	bf00      	nop
}
 80080a8:	3710      	adds	r7, #16
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200002fc 	.word	0x200002fc
 80080b4:	20000364 	.word	0x20000364
 80080b8:	40013800 	.word	0x40013800

080080bc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	607b      	str	r3, [r7, #4]
 80080c6:	4603      	mov	r3, r0
 80080c8:	73fb      	strb	r3, [r7, #15]
 80080ca:	4613      	mov	r3, r2
 80080cc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80080d2:	2300      	movs	r3, #0
 80080d4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d10e      	bne.n	80080fa <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80080dc:	4a17      	ldr	r2, [pc, #92]	@ (800813c <HW_UART_Transmit_DMA+0x80>)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80080e2:	4b17      	ldr	r3, [pc, #92]	@ (8008140 <HW_UART_Transmit_DMA+0x84>)
 80080e4:	4a17      	ldr	r2, [pc, #92]	@ (8008144 <HW_UART_Transmit_DMA+0x88>)
 80080e6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80080e8:	89bb      	ldrh	r3, [r7, #12]
 80080ea:	461a      	mov	r2, r3
 80080ec:	68b9      	ldr	r1, [r7, #8]
 80080ee:	4814      	ldr	r0, [pc, #80]	@ (8008140 <HW_UART_Transmit_DMA+0x84>)
 80080f0:	f007 ff6e 	bl	800ffd0 <HAL_UART_Transmit_DMA>
 80080f4:	4603      	mov	r3, r0
 80080f6:	75fb      	strb	r3, [r7, #23]
            break;
 80080f8:	e000      	b.n	80080fc <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80080fa:	bf00      	nop
    }

    switch (hal_status)
 80080fc:	7dfb      	ldrb	r3, [r7, #23]
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d816      	bhi.n	8008130 <HW_UART_Transmit_DMA+0x74>
 8008102:	a201      	add	r2, pc, #4	@ (adr r2, 8008108 <HW_UART_Transmit_DMA+0x4c>)
 8008104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008108:	08008119 	.word	0x08008119
 800810c:	0800811f 	.word	0x0800811f
 8008110:	08008125 	.word	0x08008125
 8008114:	0800812b 	.word	0x0800812b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8008118:	2300      	movs	r3, #0
 800811a:	75bb      	strb	r3, [r7, #22]
            break;
 800811c:	e009      	b.n	8008132 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800811e:	2301      	movs	r3, #1
 8008120:	75bb      	strb	r3, [r7, #22]
            break;
 8008122:	e006      	b.n	8008132 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8008124:	2302      	movs	r3, #2
 8008126:	75bb      	strb	r3, [r7, #22]
            break;
 8008128:	e003      	b.n	8008132 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800812a:	2303      	movs	r3, #3
 800812c:	75bb      	strb	r3, [r7, #22]
            break;
 800812e:	e000      	b.n	8008132 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8008130:	bf00      	nop
    }

    return hw_status;
 8008132:	7dbb      	ldrb	r3, [r7, #22]
}
 8008134:	4618      	mov	r0, r3
 8008136:	3718      	adds	r7, #24
 8008138:	46bd      	mov	sp, r7
 800813a:	bd80      	pop	{r7, pc}
 800813c:	20000300 	.word	0x20000300
 8008140:	20000364 	.word	0x20000364
 8008144:	40013800 	.word	0x40013800

08008148 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b082      	sub	sp, #8
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	461a      	mov	r2, r3
 8008156:	4b09      	ldr	r3, [pc, #36]	@ (800817c <HAL_UART_RxCpltCallback+0x34>)
 8008158:	429a      	cmp	r2, r3
 800815a:	d107      	bne.n	800816c <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 800815c:	4b08      	ldr	r3, [pc, #32]	@ (8008180 <HAL_UART_RxCpltCallback+0x38>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d005      	beq.n	8008170 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8008164:	4b06      	ldr	r3, [pc, #24]	@ (8008180 <HAL_UART_RxCpltCallback+0x38>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4798      	blx	r3
            }
            break;
 800816a:	e001      	b.n	8008170 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800816c:	bf00      	nop
 800816e:	e000      	b.n	8008172 <HAL_UART_RxCpltCallback+0x2a>
            break;
 8008170:	bf00      	nop
    }

    return;
 8008172:	bf00      	nop
}
 8008174:	3708      	adds	r7, #8
 8008176:	46bd      	mov	sp, r7
 8008178:	bd80      	pop	{r7, pc}
 800817a:	bf00      	nop
 800817c:	40013800 	.word	0x40013800
 8008180:	200002fc 	.word	0x200002fc

08008184 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	461a      	mov	r2, r3
 8008192:	4b09      	ldr	r3, [pc, #36]	@ (80081b8 <HAL_UART_TxCpltCallback+0x34>)
 8008194:	429a      	cmp	r2, r3
 8008196:	d107      	bne.n	80081a8 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8008198:	4b08      	ldr	r3, [pc, #32]	@ (80081bc <HAL_UART_TxCpltCallback+0x38>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d005      	beq.n	80081ac <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 80081a0:	4b06      	ldr	r3, [pc, #24]	@ (80081bc <HAL_UART_TxCpltCallback+0x38>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4798      	blx	r3
            }
            break;
 80081a6:	e001      	b.n	80081ac <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 80081a8:	bf00      	nop
 80081aa:	e000      	b.n	80081ae <HAL_UART_TxCpltCallback+0x2a>
            break;
 80081ac:	bf00      	nop
    }

    return;
 80081ae:	bf00      	nop
}
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40013800 	.word	0x40013800
 80081bc:	20000300 	.word	0x20000300

080081c0 <LL_RCC_LSE_SetDriveCapability>:
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80081c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081d0:	f023 0218 	bic.w	r2, r3, #24
 80081d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4313      	orrs	r3, r2
 80081dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr

080081ec <LL_AHB1_GRP1_EnableClock>:
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80081f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80081f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4313      	orrs	r3, r2
 8008202:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8008204:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008208:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4013      	ands	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008210:	68fb      	ldr	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr
	...

08008220 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 8008220:	b480      	push	{r7}
 8008222:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8008224:	4b05      	ldr	r3, [pc, #20]	@ (800823c <LL_LPM_EnableSleep+0x1c>)
 8008226:	691b      	ldr	r3, [r3, #16]
 8008228:	4a04      	ldr	r2, [pc, #16]	@ (800823c <LL_LPM_EnableSleep+0x1c>)
 800822a:	f023 0304 	bic.w	r3, r3, #4
 800822e:	6113      	str	r3, [r2, #16]
}
 8008230:	bf00      	nop
 8008232:	46bd      	mov	sp, r7
 8008234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008238:	4770      	bx	lr
 800823a:	bf00      	nop
 800823c:	e000ed00 	.word	0xe000ed00

08008240 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8008244:	f003 fdd6 	bl	800bdf4 <HAL_Init>
	/* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
	MX_APPE_Config();
 8008248:	f7fe fdb6 	bl	8006db8 <MX_APPE_Config>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800824c:	f000 f810 	bl	8008270 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8008250:	f000 f87a 	bl	8008348 <PeriphCommonClock_Config>

	/* IPCC initialisation */
	MX_IPCC_Init();
 8008254:	f000 f898 	bl	8008388 <MX_IPCC_Init>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_DMA_Init();
 8008258:	f000 f92a 	bl	80084b0 <MX_DMA_Init>
	MX_RF_Init();
 800825c:	f000 f8a8 	bl	80083b0 <MX_RF_Init>
	MX_RTC_Init();
 8008260:	f000 f8ae 	bl	80083c0 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	MX_APPE_Init();
 8008264:	f7fe fdb6 	bl	8006dd4 <MX_APPE_Init>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */
		MX_APPE_Process();
 8008268:	f7fe ffda 	bl	8007220 <MX_APPE_Process>
 800826c:	e7fc      	b.n	8008268 <main+0x28>
	...

08008270 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8008270:	b580      	push	{r7, lr}
 8008272:	b09a      	sub	sp, #104	@ 0x68
 8008274:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8008276:	f107 0320 	add.w	r3, r7, #32
 800827a:	2248      	movs	r2, #72	@ 0x48
 800827c:	2100      	movs	r1, #0
 800827e:	4618      	mov	r0, r3
 8008280:	f00e fee4 	bl	801704c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8008284:	1d3b      	adds	r3, r7, #4
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
 800828a:	605a      	str	r2, [r3, #4]
 800828c:	609a      	str	r2, [r3, #8]
 800828e:	60da      	str	r2, [r3, #12]
 8008290:	611a      	str	r2, [r3, #16]
 8008292:	615a      	str	r2, [r3, #20]
 8008294:	619a      	str	r2, [r3, #24]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8008296:	f004 ff3b 	bl	800d110 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 800829a:	2010      	movs	r0, #16
 800829c:	f7ff ff90 	bl	80081c0 <LL_RCC_LSE_SetDriveCapability>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80082a0:	4b28      	ldr	r3, [pc, #160]	@ (8008344 <SystemClock_Config+0xd4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80082a8:	4a26      	ldr	r2, [pc, #152]	@ (8008344 <SystemClock_Config+0xd4>)
 80082aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80082ae:	6013      	str	r3, [r2, #0]
 80082b0:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <SystemClock_Config+0xd4>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 80082bc:	2307      	movs	r3, #7
 80082be:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80082c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80082c4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80082c6:	2301      	movs	r3, #1
 80082c8:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80082ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80082ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80082d0:	2340      	movs	r3, #64	@ 0x40
 80082d2:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80082d4:	2302      	movs	r3, #2
 80082d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80082d8:	2303      	movs	r3, #3
 80082da:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV8;
 80082dc:	2370      	movs	r3, #112	@ 0x70
 80082de:	657b      	str	r3, [r7, #84]	@ 0x54
	RCC_OscInitStruct.PLL.PLLN = 32;
 80082e0:	2320      	movs	r3, #32
 80082e2:	65bb      	str	r3, [r7, #88]	@ 0x58
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80082e4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80082e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80082ea:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80082ee:	667b      	str	r3, [r7, #100]	@ 0x64
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80082f0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80082f4:	663b      	str	r3, [r7, #96]	@ 0x60
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80082f6:	f107 0320 	add.w	r3, r7, #32
 80082fa:	4618      	mov	r0, r3
 80082fc:	f005 fb1a 	bl	800d934 <HAL_RCC_OscConfig>
 8008300:	4603      	mov	r3, r0
 8008302:	2b00      	cmp	r3, #0
 8008304:	d001      	beq.n	800830a <SystemClock_Config+0x9a>
		Error_Handler();
 8008306:	f000 f90a 	bl	800851e <Error_Handler>
	}

	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 800830a:	236f      	movs	r3, #111	@ 0x6f
 800830c:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800830e:	2303      	movs	r3, #3
 8008310:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008312:	2300      	movs	r3, #0
 8008314:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008316:	2300      	movs	r3, #0
 8008318:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800831a:	2300      	movs	r3, #0
 800831c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800831e:	2380      	movs	r3, #128	@ 0x80
 8008320:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8008326:	1d3b      	adds	r3, r7, #4
 8008328:	2103      	movs	r1, #3
 800832a:	4618      	mov	r0, r3
 800832c:	f005 fe76 	bl	800e01c <HAL_RCC_ClockConfig>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d001      	beq.n	800833a <SystemClock_Config+0xca>
		Error_Handler();
 8008336:	f000 f8f2 	bl	800851e <Error_Handler>
	}
}
 800833a:	bf00      	nop
 800833c:	3768      	adds	r7, #104	@ 0x68
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	bf00      	nop
 8008344:	58000400 	.word	0x58000400

08008348 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @Param  None
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b094      	sub	sp, #80	@ 0x50
 800834c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800834e:	463b      	mov	r3, r7
 8008350:	2250      	movs	r2, #80	@ 0x50
 8008352:	2100      	movs	r1, #0
 8008354:	4618      	mov	r0, r3
 8008356:	f00e fe79 	bl	801704c <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 800835a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800835e:	603b      	str	r3, [r7, #0]
			| RCC_PERIPHCLK_RFWAKEUP;
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8008360:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008364:	647b      	str	r3, [r7, #68]	@ 0x44
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8008366:	2300      	movs	r3, #0
 8008368:	64bb      	str	r3, [r7, #72]	@ 0x48
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 800836a:	2310      	movs	r3, #16
 800836c:	64fb      	str	r3, [r7, #76]	@ 0x4c

	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800836e:	463b      	mov	r3, r7
 8008370:	4618      	mov	r0, r3
 8008372:	f006 fa90 	bl	800e896 <HAL_RCCEx_PeriphCLKConfig>
 8008376:	4603      	mov	r3, r0
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <PeriphCommonClock_Config+0x38>
		Error_Handler();
 800837c:	f000 f8cf 	bl	800851e <Error_Handler>
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif

	/* USER CODE END Smps */
}
 8008380:	bf00      	nop
 8008382:	3750      	adds	r7, #80	@ 0x50
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <MX_IPCC_Init>:
/**
 * @brief IPCC Initialization Function
 * @param None
 * @retval None
 */
static void MX_IPCC_Init(void) {
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
	/* USER CODE END IPCC_Init 0 */

	/* USER CODE BEGIN IPCC_Init 1 */

	/* USER CODE END IPCC_Init 1 */
	hipcc.Instance = IPCC;
 800838c:	4b06      	ldr	r3, [pc, #24]	@ (80083a8 <MX_IPCC_Init+0x20>)
 800838e:	4a07      	ldr	r2, [pc, #28]	@ (80083ac <MX_IPCC_Init+0x24>)
 8008390:	601a      	str	r2, [r3, #0]
	if (HAL_IPCC_Init(&hipcc) != HAL_OK) {
 8008392:	4805      	ldr	r0, [pc, #20]	@ (80083a8 <MX_IPCC_Init+0x20>)
 8008394:	f004 fe36 	bl	800d004 <HAL_IPCC_Init>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <MX_IPCC_Init+0x1a>
		Error_Handler();
 800839e:	f000 f8be 	bl	800851e <Error_Handler>
	}
	/* USER CODE BEGIN IPCC_Init 2 */

	/* USER CODE END IPCC_Init 2 */

}
 80083a2:	bf00      	nop
 80083a4:	bd80      	pop	{r7, pc}
 80083a6:	bf00      	nop
 80083a8:	20000304 	.word	0x20000304
 80083ac:	58000c00 	.word	0x58000c00

080083b0 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 80083b0:	b480      	push	{r7}
 80083b2:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 80083b4:	bf00      	nop
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr
	...

080083c0 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80083c0:	b580      	push	{r7, lr}
 80083c2:	af00      	add	r7, sp, #0

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80083c4:	4b11      	ldr	r3, [pc, #68]	@ (800840c <MX_RTC_Init+0x4c>)
 80083c6:	4a12      	ldr	r2, [pc, #72]	@ (8008410 <MX_RTC_Init+0x50>)
 80083c8:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80083ca:	4b10      	ldr	r3, [pc, #64]	@ (800840c <MX_RTC_Init+0x4c>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 80083d0:	4b0e      	ldr	r3, [pc, #56]	@ (800840c <MX_RTC_Init+0x4c>)
 80083d2:	220f      	movs	r2, #15
 80083d4:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 80083d6:	4b0d      	ldr	r3, [pc, #52]	@ (800840c <MX_RTC_Init+0x4c>)
 80083d8:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80083dc:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80083de:	4b0b      	ldr	r3, [pc, #44]	@ (800840c <MX_RTC_Init+0x4c>)
 80083e0:	2200      	movs	r2, #0
 80083e2:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80083e4:	4b09      	ldr	r3, [pc, #36]	@ (800840c <MX_RTC_Init+0x4c>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80083ea:	4b08      	ldr	r3, [pc, #32]	@ (800840c <MX_RTC_Init+0x4c>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80083f0:	4b06      	ldr	r3, [pc, #24]	@ (800840c <MX_RTC_Init+0x4c>)
 80083f2:	2200      	movs	r2, #0
 80083f4:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80083f6:	4805      	ldr	r0, [pc, #20]	@ (800840c <MX_RTC_Init+0x4c>)
 80083f8:	f006 fcd4 	bl	800eda4 <HAL_RTC_Init>
 80083fc:	4603      	mov	r3, r0
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d001      	beq.n	8008406 <MX_RTC_Init+0x46>
		Error_Handler();
 8008402:	f000 f88c 	bl	800851e <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8008406:	bf00      	nop
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000340 	.word	0x20000340
 8008410:	40002800 	.word	0x40002800

08008414 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART1_UART_Init(void) {
 8008414:	b580      	push	{r7, lr}
 8008416:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8008418:	4b23      	ldr	r3, [pc, #140]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 800841a:	4a24      	ldr	r2, [pc, #144]	@ (80084ac <MX_USART1_UART_Init+0x98>)
 800841c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800841e:	4b22      	ldr	r3, [pc, #136]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008420:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008424:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008426:	4b20      	ldr	r3, [pc, #128]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008428:	2200      	movs	r2, #0
 800842a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800842c:	4b1e      	ldr	r3, [pc, #120]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 800842e:	2200      	movs	r2, #0
 8008430:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8008432:	4b1d      	ldr	r3, [pc, #116]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008434:	2200      	movs	r2, #0
 8008436:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8008438:	4b1b      	ldr	r3, [pc, #108]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 800843a:	220c      	movs	r2, #12
 800843c:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800843e:	4b1a      	ldr	r3, [pc, #104]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008440:	2200      	movs	r2, #0
 8008442:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8008444:	4b18      	ldr	r3, [pc, #96]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008446:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800844a:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800844c:	4b16      	ldr	r3, [pc, #88]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 800844e:	2200      	movs	r2, #0
 8008450:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008452:	4b15      	ldr	r3, [pc, #84]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008454:	2200      	movs	r2, #0
 8008456:	625a      	str	r2, [r3, #36]	@ 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008458:	4b13      	ldr	r3, [pc, #76]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 800845a:	2200      	movs	r2, #0
 800845c:	629a      	str	r2, [r3, #40]	@ 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800845e:	4812      	ldr	r0, [pc, #72]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008460:	f007 fd1a 	bl	800fe98 <HAL_UART_Init>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	d001      	beq.n	800846e <MX_USART1_UART_Init+0x5a>
		Error_Handler();
 800846a:	f000 f858 	bl	800851e <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 800846e:	2100      	movs	r1, #0
 8008470:	480d      	ldr	r0, [pc, #52]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008472:	f009 fd8a 	bl	8011f8a <HAL_UARTEx_SetTxFifoThreshold>
 8008476:	4603      	mov	r3, r0
 8008478:	2b00      	cmp	r3, #0
 800847a:	d001      	beq.n	8008480 <MX_USART1_UART_Init+0x6c>
			!= HAL_OK) {
		Error_Handler();
 800847c:	f000 f84f 	bl	800851e <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8008480:	2100      	movs	r1, #0
 8008482:	4809      	ldr	r0, [pc, #36]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008484:	f009 fdbf 	bl	8012006 <HAL_UARTEx_SetRxFifoThreshold>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <MX_USART1_UART_Init+0x7e>
			!= HAL_OK) {
		Error_Handler();
 800848e:	f000 f846 	bl	800851e <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8008492:	4805      	ldr	r0, [pc, #20]	@ (80084a8 <MX_USART1_UART_Init+0x94>)
 8008494:	f009 fd40 	bl	8011f18 <HAL_UARTEx_DisableFifoMode>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d001      	beq.n	80084a2 <MX_USART1_UART_Init+0x8e>
		Error_Handler();
 800849e:	f000 f83e 	bl	800851e <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000364 	.word	0x20000364
 80084ac:	40013800 	.word	0x40013800

080084b0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 80084b4:	2004      	movs	r0, #4
 80084b6:	f7ff fe99 	bl	80081ec <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA2_CLK_ENABLE();
 80084ba:	2002      	movs	r0, #2
 80084bc:	f7ff fe96 	bl	80081ec <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA2_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 80084c0:	2200      	movs	r2, #0
 80084c2:	210f      	movs	r1, #15
 80084c4:	203a      	movs	r0, #58	@ 0x3a
 80084c6:	f003 fe68 	bl	800c19a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 80084ca:	203a      	movs	r0, #58	@ 0x3a
 80084cc:	f003 fe7f 	bl	800c1ce <HAL_NVIC_EnableIRQ>

}
 80084d0:	bf00      	nop
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_Delay>:
/*************************************************************
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay) {
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 80084dc:	f003 fcf8 	bl	800bed0 <HAL_GetTick>
 80084e0:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d00a      	beq.n	8008504 <HAL_Delay+0x30>
		wait += HAL_GetTickFreq();
 80084ee:	f003 fd07 	bl	800bf00 <HAL_GetTickFreq>
 80084f2:	4603      	mov	r3, r0
 80084f4:	461a      	mov	r2, r3
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 80084fc:	e002      	b.n	8008504 <HAL_Delay+0x30>
		/************************************************************************************
		 * ENTER SLEEP MODE
		 ***********************************************************************************/
		LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 80084fe:	f7ff fe8f 	bl	8008220 <LL_LPM_EnableSleep>
		 */
#if defined (__CC_ARM) || defined (__ARMCC_VERSION)
    __force_stores();
  #endif

		__WFI();
 8008502:	bf30      	wfi
	while ((HAL_GetTick() - tickstart) < wait) {
 8008504:	f003 fce4 	bl	800bed0 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	429a      	cmp	r2, r3
 8008512:	d8f4      	bhi.n	80084fe <HAL_Delay+0x2a>
	}
}
 8008514:	bf00      	nop
 8008516:	bf00      	nop
 8008518:	3710      	adds	r7, #16
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}

0800851e <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800851e:	b480      	push	{r7}
 8008520:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008522:	b672      	cpsid	i
}
 8008524:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8008526:	bf00      	nop
 8008528:	e7fd      	b.n	8008526 <Error_Handler+0x8>

0800852a <LL_RCC_EnableRTC>:
{
 800852a:	b480      	push	{r7}
 800852c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800852e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008536:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800853a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800853e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008542:	bf00      	nop
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <LL_AHB2_GRP1_EnableClock>:
{
 800854c:	b480      	push	{r7}
 800854e:	b085      	sub	sp, #20
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008554:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008558:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800855a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	4313      	orrs	r3, r2
 8008562:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008564:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008568:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4013      	ands	r3, r2
 800856e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008570:	68fb      	ldr	r3, [r7, #12]
}
 8008572:	bf00      	nop
 8008574:	3714      	adds	r7, #20
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr

0800857e <LL_AHB3_GRP1_EnableClock>:
{
 800857e:	b480      	push	{r7}
 8008580:	b085      	sub	sp, #20
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8008586:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800858a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800858c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4313      	orrs	r3, r2
 8008594:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8008596:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800859a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4013      	ands	r3, r2
 80085a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80085a2:	68fb      	ldr	r3, [r7, #12]
}
 80085a4:	bf00      	nop
 80085a6:	3714      	adds	r7, #20
 80085a8:	46bd      	mov	sp, r7
 80085aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ae:	4770      	bx	lr

080085b0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80085b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085be:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	4313      	orrs	r3, r2
 80085c6:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80085c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085cc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4013      	ands	r3, r2
 80085d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80085d4:	68fb      	ldr	r3, [r7, #12]
}
 80085d6:	bf00      	nop
 80085d8:	3714      	adds	r7, #20
 80085da:	46bd      	mov	sp, r7
 80085dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e0:	4770      	bx	lr

080085e2 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80085e2:	b480      	push	{r7}
 80085e4:	b085      	sub	sp, #20
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80085ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085ee:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80085f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80085fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085fe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4013      	ands	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8008606:	68fb      	ldr	r3, [r7, #12]
}
 8008608:	bf00      	nop
 800860a:	3714      	adds	r7, #20
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8008618:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800861c:	f7ff ffaf 	bl	800857e <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_PVM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_PVM_IRQn, 0, 0);
 8008620:	2200      	movs	r2, #0
 8008622:	2100      	movs	r1, #0
 8008624:	2001      	movs	r0, #1
 8008626:	f003 fdb8 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_PVM_IRQn);
 800862a:	2001      	movs	r0, #1
 800862c:	f003 fdcf 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8008630:	2200      	movs	r2, #0
 8008632:	2100      	movs	r1, #0
 8008634:	2004      	movs	r0, #4
 8008636:	f003 fdb0 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 800863a:	2004      	movs	r0, #4
 800863c:	f003 fdc7 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8008640:	2200      	movs	r2, #0
 8008642:	2100      	movs	r1, #0
 8008644:	2005      	movs	r0, #5
 8008646:	f003 fda8 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800864a:	2005      	movs	r0, #5
 800864c:	f003 fdbf 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* C2SEV_PWR_C2H_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(C2SEV_PWR_C2H_IRQn, 0, 0);
 8008650:	2200      	movs	r2, #0
 8008652:	2100      	movs	r1, #0
 8008654:	2015      	movs	r0, #21
 8008656:	f003 fda0 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(C2SEV_PWR_C2H_IRQn);
 800865a:	2015      	movs	r0, #21
 800865c:	f003 fdb7 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn, 0, 0);
 8008660:	2200      	movs	r2, #0
 8008662:	2100      	movs	r1, #0
 8008664:	202b      	movs	r0, #43	@ 0x2b
 8008666:	f003 fd98 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn);
 800866a:	202b      	movs	r0, #43	@ 0x2b
 800866c:	f003 fdaf 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8008670:	2200      	movs	r2, #0
 8008672:	2100      	movs	r1, #0
 8008674:	202e      	movs	r0, #46	@ 0x2e
 8008676:	f003 fd90 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 800867a:	202e      	movs	r0, #46	@ 0x2e
 800867c:	f003 fda7 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8008680:	2200      	movs	r2, #0
 8008682:	2100      	movs	r1, #0
 8008684:	2036      	movs	r0, #54	@ 0x36
 8008686:	f003 fd88 	bl	800c19a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 800868a:	2036      	movs	r0, #54	@ 0x36
 800868c:	f003 fd9f 	bl	800c1ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008690:	bf00      	nop
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b082      	sub	sp, #8
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a0d      	ldr	r2, [pc, #52]	@ (80086d8 <HAL_IPCC_MspInit+0x44>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d113      	bne.n	80086ce <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 80086a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80086aa:	f7ff ff68 	bl	800857e <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 80086ae:	2200      	movs	r2, #0
 80086b0:	2100      	movs	r1, #0
 80086b2:	202c      	movs	r0, #44	@ 0x2c
 80086b4:	f003 fd71 	bl	800c19a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80086b8:	202c      	movs	r0, #44	@ 0x2c
 80086ba:	f003 fd88 	bl	800c1ce <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 80086be:	2200      	movs	r2, #0
 80086c0:	2100      	movs	r1, #0
 80086c2:	202d      	movs	r0, #45	@ 0x2d
 80086c4:	f003 fd69 	bl	800c19a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80086c8:	202d      	movs	r0, #45	@ 0x2d
 80086ca:	f003 fd80 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80086ce:	bf00      	nop
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	58000c00 	.word	0x58000c00

080086dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b096      	sub	sp, #88	@ 0x58
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80086e4:	f107 0308 	add.w	r3, r7, #8
 80086e8:	2250      	movs	r2, #80	@ 0x50
 80086ea:	2100      	movs	r1, #0
 80086ec:	4618      	mov	r0, r3
 80086ee:	f00e fcad 	bl	801704c <memset>
  if(hrtc->Instance==RTC)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008730 <HAL_RTC_MspInit+0x54>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d115      	bne.n	8008728 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80086fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008700:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8008702:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008706:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008708:	f107 0308 	add.w	r3, r7, #8
 800870c:	4618      	mov	r0, r3
 800870e:	f006 f8c2 	bl	800e896 <HAL_RCCEx_PeriphCLKConfig>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8008718:	f7ff ff01 	bl	800851e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800871c:	f7ff ff05 	bl	800852a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8008720:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8008724:	f7ff ff44 	bl	80085b0 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8008728:	bf00      	nop
 800872a:	3758      	adds	r7, #88	@ 0x58
 800872c:	46bd      	mov	sp, r7
 800872e:	bd80      	pop	{r7, pc}
 8008730:	40002800 	.word	0x40002800

08008734 <HAL_UART_MspInit>:
* This function configures the UART to send/receive information on terminal display
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b09c      	sub	sp, #112	@ 0x70
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800873c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8008740:	2200      	movs	r2, #0
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	605a      	str	r2, [r3, #4]
 8008746:	609a      	str	r2, [r3, #8]
 8008748:	60da      	str	r2, [r3, #12]
 800874a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	2250      	movs	r2, #80	@ 0x50
 8008752:	2100      	movs	r1, #0
 8008754:	4618      	mov	r0, r3
 8008756:	f00e fc79 	bl	801704c <memset>
  if(huart->Instance==USART1)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4a39      	ldr	r2, [pc, #228]	@ (8008844 <HAL_UART_MspInit+0x110>)
 8008760:	4293      	cmp	r3, r2
 8008762:	d16a      	bne.n	800883a <HAL_UART_MspInit+0x106>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008764:	2301      	movs	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008768:	2300      	movs	r3, #0
 800876a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800876c:	f107 030c 	add.w	r3, r7, #12
 8008770:	4618      	mov	r0, r3
 8008772:	f006 f890 	bl	800e896 <HAL_RCCEx_PeriphCLKConfig>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800877c:	f7ff fecf 	bl	800851e <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008780:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8008784:	f7ff ff2d 	bl	80085e2 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008788:	2001      	movs	r0, #1
 800878a:	f7ff fedf 	bl	800854c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800878e:	2002      	movs	r0, #2
 8008790:	f7ff fedc 	bl	800854c <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PA11     ------> USART1_CTS
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008794:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008798:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800879a:	2302      	movs	r3, #2
 800879c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087a2:	2300      	movs	r3, #0
 80087a4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80087a6:	2307      	movs	r3, #7
 80087a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80087aa:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80087ae:	4619      	mov	r1, r3
 80087b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80087b4:	f004 f99c 	bl	800caf0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 80087b8:	23c0      	movs	r3, #192	@ 0xc0
 80087ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087bc:	2302      	movs	r3, #2
 80087be:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80087c0:	2301      	movs	r3, #1
 80087c2:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087c4:	2303      	movs	r3, #3
 80087c6:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80087c8:	2307      	movs	r3, #7
 80087ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087cc:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80087d0:	4619      	mov	r1, r3
 80087d2:	481d      	ldr	r0, [pc, #116]	@ (8008848 <HAL_UART_MspInit+0x114>)
 80087d4:	f004 f98c 	bl	800caf0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Channel4;
 80087d8:	4b1c      	ldr	r3, [pc, #112]	@ (800884c <HAL_UART_MspInit+0x118>)
 80087da:	4a1d      	ldr	r2, [pc, #116]	@ (8008850 <HAL_UART_MspInit+0x11c>)
 80087dc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80087de:	4b1b      	ldr	r3, [pc, #108]	@ (800884c <HAL_UART_MspInit+0x118>)
 80087e0:	220f      	movs	r2, #15
 80087e2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80087e4:	4b19      	ldr	r3, [pc, #100]	@ (800884c <HAL_UART_MspInit+0x118>)
 80087e6:	2210      	movs	r2, #16
 80087e8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80087ea:	4b18      	ldr	r3, [pc, #96]	@ (800884c <HAL_UART_MspInit+0x118>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80087f0:	4b16      	ldr	r3, [pc, #88]	@ (800884c <HAL_UART_MspInit+0x118>)
 80087f2:	2280      	movs	r2, #128	@ 0x80
 80087f4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80087f6:	4b15      	ldr	r3, [pc, #84]	@ (800884c <HAL_UART_MspInit+0x118>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80087fc:	4b13      	ldr	r3, [pc, #76]	@ (800884c <HAL_UART_MspInit+0x118>)
 80087fe:	2200      	movs	r2, #0
 8008800:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8008802:	4b12      	ldr	r3, [pc, #72]	@ (800884c <HAL_UART_MspInit+0x118>)
 8008804:	2200      	movs	r2, #0
 8008806:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008808:	4b10      	ldr	r3, [pc, #64]	@ (800884c <HAL_UART_MspInit+0x118>)
 800880a:	2200      	movs	r2, #0
 800880c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800880e:	480f      	ldr	r0, [pc, #60]	@ (800884c <HAL_UART_MspInit+0x118>)
 8008810:	f003 fd22 	bl	800c258 <HAL_DMA_Init>
 8008814:	4603      	mov	r3, r0
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <HAL_UART_MspInit+0xea>
    {
      Error_Handler();
 800881a:	f7ff fe80 	bl	800851e <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a0a      	ldr	r2, [pc, #40]	@ (800884c <HAL_UART_MspInit+0x118>)
 8008822:	67da      	str	r2, [r3, #124]	@ 0x7c
 8008824:	4a09      	ldr	r2, [pc, #36]	@ (800884c <HAL_UART_MspInit+0x118>)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800882a:	2200      	movs	r2, #0
 800882c:	2100      	movs	r1, #0
 800882e:	2024      	movs	r0, #36	@ 0x24
 8008830:	f003 fcb3 	bl	800c19a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008834:	2024      	movs	r0, #36	@ 0x24
 8008836:	f003 fcca 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800883a:	bf00      	nop
 800883c:	3770      	adds	r7, #112	@ 0x70
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
 8008842:	bf00      	nop
 8008844:	40013800 	.word	0x40013800
 8008848:	48000400 	.word	0x48000400
 800884c:	200003f8 	.word	0x200003f8
 8008850:	40020444 	.word	0x40020444

08008854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008854:	b480      	push	{r7}
 8008856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008858:	bf00      	nop
 800885a:	e7fd      	b.n	8008858 <NMI_Handler+0x4>

0800885c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800885c:	b480      	push	{r7}
 800885e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008860:	bf00      	nop
 8008862:	e7fd      	b.n	8008860 <HardFault_Handler+0x4>

08008864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008864:	b480      	push	{r7}
 8008866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008868:	bf00      	nop
 800886a:	e7fd      	b.n	8008868 <MemManage_Handler+0x4>

0800886c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800886c:	b480      	push	{r7}
 800886e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008870:	bf00      	nop
 8008872:	e7fd      	b.n	8008870 <BusFault_Handler+0x4>

08008874 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008874:	b480      	push	{r7}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <UsageFault_Handler+0x4>

0800887c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008880:	bf00      	nop
 8008882:	46bd      	mov	sp, r7
 8008884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008888:	4770      	bx	lr

0800888a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800888a:	b480      	push	{r7}
 800888c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800888e:	bf00      	nop
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008898:	b480      	push	{r7}
 800889a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800889c:	bf00      	nop
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088aa:	f003 fafd 	bl	800bea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088ae:	bf00      	nop
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <PVD_PVM_IRQHandler>:

/**
  * @brief This function handles PVD/PVM0/PVM2 interrupts through EXTI lines 16/31/33.
  */
void PVD_PVM_IRQHandler(void)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_PVM_IRQn 0 */

  /* USER CODE END PVD_PVM_IRQn 0 */
  HAL_PWREx_PVD_PVM_IRQHandler();
 80088b6:	f004 fc91 	bl	800d1dc <HAL_PWREx_PVD_PVM_IRQHandler>
  /* USER CODE BEGIN PVD_PVM_IRQn 1 */

  /* USER CODE END PVD_PVM_IRQn 1 */
}
 80088ba:	bf00      	nop
 80088bc:	bd80      	pop	{r7, pc}

080088be <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 80088be:	b580      	push	{r7, lr}
 80088c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 80088c2:	f004 f859 	bl	800c978 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 80088c6:	bf00      	nop
 80088c8:	bd80      	pop	{r7, pc}

080088ca <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80088ca:	b480      	push	{r7}
 80088cc:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80088ce:	bf00      	nop
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr

080088d8 <C2SEV_PWR_C2H_IRQHandler>:

/**
  * @brief This function handles CPU2 SEV interrupt through EXTI line 40 and PWR CPU2 HOLD wake-up interrupt.
  */
void C2SEV_PWR_C2H_IRQHandler(void)
{
 80088d8:	b480      	push	{r7}
 80088da:	af00      	add	r7, sp, #0

  /* USER CODE END C2SEV_PWR_C2H_IRQn 0 */
  /* USER CODE BEGIN C2SEV_PWR_C2H_IRQn 1 */

  /* USER CODE END C2SEV_PWR_C2H_IRQn 1 */
}
 80088dc:	bf00      	nop
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80088ec:	4802      	ldr	r0, [pc, #8]	@ (80088f8 <USART1_IRQHandler+0x10>)
 80088ee:	f007 fbef 	bl	80100d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80088f2:	bf00      	nop
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000364 	.word	0x20000364

080088fc <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8008900:	f004 fb5c 	bl	800cfbc <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8008904:	bf00      	nop
 8008906:	bd80      	pop	{r7, pc}

08008908 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800890c:	4802      	ldr	r0, [pc, #8]	@ (8008918 <DMA2_Channel4_IRQHandler+0x10>)
 800890e:	f003 fe84 	bl	800c61a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 8008912:	bf00      	nop
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	200003f8 	.word	0x200003f8

0800891c <PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler>:

/**
  * @brief This function handles PWR switching on the fly, end of BLE activity, end of 802.15.4 activity, end of critical radio phase interrupt.
  */
void PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQHandler(void)
{
 800891c:	b480      	push	{r7}
 800891e:	af00      	add	r7, sp, #0

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 0 */
  /* USER CODE BEGIN PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */

  /* USER CODE END PWR_SOTF_BLEACT_802ACT_RFPHASE_IRQn 1 */
}
 8008920:	bf00      	nop
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 800892e:	f000 ffeb 	bl	8009908 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8008932:	bf00      	nop
 8008934:	bd80      	pop	{r7, pc}

08008936 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8008936:	b580      	push	{r7, lr}
 8008938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 800893a:	f001 f83b 	bl	80099b4 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 800893e:	bf00      	nop
 8008940:	bd80      	pop	{r7, pc}

08008942 <TIM1_TRG_COM_TIM17_IRQHandler>:
  * @brief  This function handles TIM17 IRQ Handler.
  * @param  None
  * @retval None
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	af00      	add	r7, sp, #0
  BSP_PWM_LED_IRQHandler();
 8008946:	f002 fa83 	bl	800ae50 <BSP_PWM_LED_IRQHandler>
}
 800894a:	bf00      	nop
 800894c:	bd80      	pop	{r7, pc}

0800894e <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 800894e:	b480      	push	{r7}
 8008950:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8008952:	bf00      	nop
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr

0800895c <RTC_WKUP_IRQHandler>:

/* USER CODE BEGIN 1 */
void RTC_WKUP_IRQHandler(void)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	af00      	add	r7, sp, #0
  HW_TS_RTC_Wakeup_Handler();
 8008960:	f7ff f8ca 	bl	8007af8 <HW_TS_RTC_Wakeup_Handler>
}
 8008964:	bf00      	nop
 8008966:	bd80      	pop	{r7, pc}

08008968 <EXTI15_10_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW_EXTI_IRQHandler(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0
  HAL_Delay(300);
 800896c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8008970:	f7ff fdb0 	bl	80084d4 <HAL_Delay>
  BSP_PB_IRQHandler(BUTTON_USER1);
 8008974:	2000      	movs	r0, #0
 8008976:	f002 fb01 	bl	800af7c <BSP_PB_IRQHandler>
  BSP_PB_IRQHandler(BUTTON_USER2);
 800897a:	2001      	movs	r0, #1
 800897c:	f002 fafe 	bl	800af7c <BSP_PB_IRQHandler>
}
 8008980:	bf00      	nop
 8008982:	bd80      	pop	{r7, pc}

08008984 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8008984:	b5b0      	push	{r4, r5, r7, lr}
 8008986:	b08a      	sub	sp, #40	@ 0x28
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
 800898c:	460b      	mov	r3, r1
 800898e:	807b      	strh	r3, [r7, #2]
 8008990:	4613      	mov	r3, r2
 8008992:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8008994:	787b      	ldrb	r3, [r7, #1]
 8008996:	2b01      	cmp	r3, #1
 8008998:	d002      	beq.n	80089a0 <logRegion+0x1c>
 800899a:	2b02      	cmp	r3, #2
 800899c:	d00a      	beq.n	80089b4 <logRegion+0x30>
 800899e:	e012      	b.n	80089c6 <logRegion+0x42>
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 80089a0:	f107 0308 	add.w	r3, r7, #8
 80089a4:	4a13      	ldr	r2, [pc, #76]	@ (80089f4 <logRegion+0x70>)
 80089a6:	461c      	mov	r4, r3
 80089a8:	4615      	mov	r5, r2
 80089aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80089ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80089ae:	682b      	ldr	r3, [r5, #0]
 80089b0:	7023      	strb	r3, [r4, #0]
      break;
 80089b2:	e011      	b.n	80089d8 <logRegion+0x54>
    case APPLI_LOG_REGION_ZIGBEE_API:
      strcpy(logRegionString, "[M4 ZIGBEE API]");
 80089b4:	f107 0308 	add.w	r3, r7, #8
 80089b8:	4a0f      	ldr	r2, [pc, #60]	@ (80089f8 <logRegion+0x74>)
 80089ba:	461c      	mov	r4, r3
 80089bc:	4613      	mov	r3, r2
 80089be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80089c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 80089c4:	e008      	b.n	80089d8 <logRegion+0x54>
    default:
      strcpy(logRegionString, "[M4]");
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	4a0c      	ldr	r2, [pc, #48]	@ (80089fc <logRegion+0x78>)
 80089cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80089d0:	6018      	str	r0, [r3, #0]
 80089d2:	3304      	adds	r3, #4
 80089d4:	7019      	strb	r1, [r3, #0]
      break;
 80089d6:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 80089d8:	8879      	ldrh	r1, [r7, #2]
 80089da:	f107 0308 	add.w	r3, r7, #8
 80089de:	4a08      	ldr	r2, [pc, #32]	@ (8008a00 <logRegion+0x7c>)
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f00e fa63 	bl	8016eac <sniprintf>
 80089e6:	4603      	mov	r3, r0
 80089e8:	b29b      	uxth	r3, r3
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	3728      	adds	r7, #40	@ 0x28
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bdb0      	pop	{r4, r5, r7, pc}
 80089f2:	bf00      	nop
 80089f4:	08017fd8 	.word	0x08017fd8
 80089f8:	08017fec 	.word	0x08017fec
 80089fc:	08017ffc 	.word	0x08017ffc
 8008a00:	08018004 	.word	0x08018004

08008a04 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d00a      	beq.n	8008a2a <levelToString+0x26>
 8008a14:	2b03      	cmp	r3, #3
 8008a16:	dc0a      	bgt.n	8008a2e <levelToString+0x2a>
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d002      	beq.n	8008a22 <levelToString+0x1e>
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d002      	beq.n	8008a26 <levelToString+0x22>
 8008a20:	e005      	b.n	8008a2e <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 8008a22:	4b06      	ldr	r3, [pc, #24]	@ (8008a3c <levelToString+0x38>)
 8008a24:	e004      	b.n	8008a30 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <levelToString+0x3c>)
 8008a28:	e002      	b.n	8008a30 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 8008a2a:	4b06      	ldr	r3, [pc, #24]	@ (8008a44 <levelToString+0x40>)
 8008a2c:	e000      	b.n	8008a30 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 8008a2e:	4b06      	ldr	r3, [pc, #24]	@ (8008a48 <levelToString+0x44>)
  }
}
 8008a30:	4618      	mov	r0, r3
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	08018008 	.word	0x08018008
 8008a40:	08018010 	.word	0x08018010
 8008a44:	08018018 	.word	0x08018018
 8008a48:	08018020 	.word	0x08018020

08008a4c <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 8008a4c:	b590      	push	{r4, r7, lr}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	807b      	strh	r3, [r7, #2]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 8008a5c:	887c      	ldrh	r4, [r7, #2]
 8008a5e:	787b      	ldrb	r3, [r7, #1]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7ff ffcf 	bl	8008a04 <levelToString>
 8008a66:	4603      	mov	r3, r0
 8008a68:	4a05      	ldr	r2, [pc, #20]	@ (8008a80 <logLevel+0x34>)
 8008a6a:	4621      	mov	r1, r4
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f00e fa1d 	bl	8016eac <sniprintf>
 8008a72:	4603      	mov	r3, r0
 8008a74:	b29b      	uxth	r3, r3
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	370c      	adds	r7, #12
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd90      	pop	{r4, r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	08018028 	.word	0x08018028

08008a84 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8008a84:	b40c      	push	{r2, r3}
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b0c4      	sub	sp, #272	@ 0x110
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a92:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008a96:	701a      	strb	r2, [r3, #0]
 8008a98:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008a9c:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8008aa0:	460a      	mov	r2, r1
 8008aa2:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008aaa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008aae:	f107 020c 	add.w	r2, r7, #12
 8008ab2:	18d0      	adds	r0, r2, r3
 8008ab4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008ab8:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8008abc:	b299      	uxth	r1, r3
 8008abe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008ac2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	f7ff ffbf 	bl	8008a4c <logLevel>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008adc:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008ae0:	f107 020c 	add.w	r2, r7, #12
 8008ae4:	18d0      	adds	r0, r2, r3
 8008ae6:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008aea:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8008aee:	b299      	uxth	r1, r3
 8008af0:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008af4:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8008af8:	781b      	ldrb	r3, [r3, #0]
 8008afa:	461a      	mov	r2, r3
 8008afc:	f7ff ff42 	bl	8008984 <logRegion>
 8008b00:	4603      	mov	r3, r0
 8008b02:	461a      	mov	r2, r3
 8008b04:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008b08:	4413      	add	r3, r2
 8008b0a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 8008b0e:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 8008b12:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b1a:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8008b1c:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008b20:	f107 020c 	add.w	r2, r7, #12
 8008b24:	18d0      	adds	r0, r2, r3
 8008b26:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008b2a:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 8008b2e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8008b3c:	f00e fa78 	bl	8017030 <vsniprintf>
 8008b40:	4603      	mov	r3, r0
 8008b42:	b29a      	uxth	r2, r3
 8008b44:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008b48:	4413      	add	r3, r2
 8008b4a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 8008b4e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 8008b58:	461a      	mov	r2, r3
 8008b5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b62:	210d      	movs	r1, #13
 8008b64:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 8008b66:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008b6a:	1c5a      	adds	r2, r3, #1
 8008b6c:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 8008b70:	461a      	mov	r2, r3
 8008b72:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b7a:	210a      	movs	r1, #10
 8008b7c:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8008b7e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8008b82:	1c5a      	adds	r2, r3, #1
 8008b84:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b8e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008b92:	2100      	movs	r1, #0
 8008b94:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 8008b96:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8008b9a:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	2b03      	cmp	r3, #3
 8008ba2:	d805      	bhi.n	8008bb0 <logApplication+0x12c>
  {
    printf("%s", logString);
 8008ba4:	f107 030c 	add.w	r3, r7, #12
 8008ba8:	4619      	mov	r1, r3
 8008baa:	4805      	ldr	r0, [pc, #20]	@ (8008bc0 <logApplication+0x13c>)
 8008bac:	f00e f96c 	bl	8016e88 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8008bb0:	bf00      	nop
 8008bb2:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bbc:	b002      	add	sp, #8
 8008bbe:	4770      	bx	lr
 8008bc0:	08018028 	.word	0x08018028

08008bc4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	af00      	add	r7, sp, #0
  return 1;
 8008bc8:	2301      	movs	r3, #1
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd2:	4770      	bx	lr

08008bd4 <_kill>:

int _kill(int pid, int sig)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
 8008bdc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008bde:	f00e faa1 	bl	8017124 <__errno>
 8008be2:	4603      	mov	r3, r0
 8008be4:	2216      	movs	r2, #22
 8008be6:	601a      	str	r2, [r3, #0]
  return -1;
 8008be8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008bec:	4618      	mov	r0, r3
 8008bee:	3708      	adds	r7, #8
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	bd80      	pop	{r7, pc}

08008bf4 <_exit>:

void _exit (int status)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f7ff ffe7 	bl	8008bd4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008c06:	bf00      	nop
 8008c08:	e7fd      	b.n	8008c06 <_exit+0x12>

08008c0a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b086      	sub	sp, #24
 8008c0e:	af00      	add	r7, sp, #0
 8008c10:	60f8      	str	r0, [r7, #12]
 8008c12:	60b9      	str	r1, [r7, #8]
 8008c14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c16:	2300      	movs	r3, #0
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	e00a      	b.n	8008c32 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c1c:	f3af 8000 	nop.w
 8008c20:	4601      	mov	r1, r0
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	60ba      	str	r2, [r7, #8]
 8008c28:	b2ca      	uxtb	r2, r1
 8008c2a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	dbf0      	blt.n	8008c1c <_read+0x12>
  }

  return len;
 8008c3a:	687b      	ldr	r3, [r7, #4]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}

08008c44 <_close>:
  }
  return len;
}

int _close(int file)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b083      	sub	sp, #12
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008c4c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	370c      	adds	r7, #12
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr

08008c5c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008c5c:	b480      	push	{r7}
 8008c5e:	b083      	sub	sp, #12
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
 8008c64:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c6c:	605a      	str	r2, [r3, #4]
  return 0;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <_isatty>:

int _isatty(int file)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008c84:	2301      	movs	r3, #1
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	370c      	adds	r7, #12
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c90:	4770      	bx	lr

08008c92 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008c92:	b480      	push	{r7}
 8008c94:	b085      	sub	sp, #20
 8008c96:	af00      	add	r7, sp, #0
 8008c98:	60f8      	str	r0, [r7, #12]
 8008c9a:	60b9      	str	r1, [r7, #8]
 8008c9c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008cb4:	4a14      	ldr	r2, [pc, #80]	@ (8008d08 <_sbrk+0x5c>)
 8008cb6:	4b15      	ldr	r3, [pc, #84]	@ (8008d0c <_sbrk+0x60>)
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cc0:	4b13      	ldr	r3, [pc, #76]	@ (8008d10 <_sbrk+0x64>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cc8:	4b11      	ldr	r3, [pc, #68]	@ (8008d10 <_sbrk+0x64>)
 8008cca:	4a12      	ldr	r2, [pc, #72]	@ (8008d14 <_sbrk+0x68>)
 8008ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cce:	4b10      	ldr	r3, [pc, #64]	@ (8008d10 <_sbrk+0x64>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d207      	bcs.n	8008cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008cdc:	f00e fa22 	bl	8017124 <__errno>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	220c      	movs	r2, #12
 8008ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	e009      	b.n	8008d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008cec:	4b08      	ldr	r3, [pc, #32]	@ (8008d10 <_sbrk+0x64>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008cf2:	4b07      	ldr	r3, [pc, #28]	@ (8008d10 <_sbrk+0x64>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	4a05      	ldr	r2, [pc, #20]	@ (8008d10 <_sbrk+0x64>)
 8008cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	20030000 	.word	0x20030000
 8008d0c:	00001000 	.word	0x00001000
 8008d10:	20000458 	.word	0x20000458
 8008d14:	20001e80 	.word	0x20001e80

08008d18 <onOff_server_off_cb>:
 * @param  srcInfo source addr of the device that send the command
 * @param  arg extra arg 
 * @retval stack status code
 */
static enum ZclStatusCodeT onOff_server_off_cb(struct ZbZclClusterT *clusterPtr, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b086      	sub	sp, #24
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	60b9      	str	r1, [r7, #8]
 8008d22:	607a      	str	r2, [r7, #4]
  uint8_t endpoint;

  endpoint = ZbZclClusterGetEndpoint(clusterPtr);
 8008d24:	68f8      	ldr	r0, [r7, #12]
 8008d26:	f7fa fe5d 	bl	80039e4 <ZbZclClusterGetEndpoint>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	75fb      	strb	r3, [r7, #23]
  if (endpoint == SW1_ENDPOINT)
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	2b11      	cmp	r3, #17
 8008d32:	d113      	bne.n	8008d5c <onOff_server_off_cb+0x44>
  {
    APP_DBG("ZCL CB - LED OFF");
 8008d34:	4a0e      	ldr	r2, [pc, #56]	@ (8008d70 <onOff_server_off_cb+0x58>)
 8008d36:	2101      	movs	r1, #1
 8008d38:	2000      	movs	r0, #0
 8008d3a:	f7ff fea3 	bl	8008a84 <logApplication>
    HAL_Delay(10);
 8008d3e:	200a      	movs	r0, #10
 8008d40:	f7ff fbc8 	bl	80084d4 <HAL_Delay>
    LED_Off();
 8008d44:	f7fe f89b 	bl	8006e7e <LED_Off>
    (void)ZbZclAttrIntegerWrite(clusterPtr, ZCL_ONOFF_ATTR_ONOFF, 0);
 8008d48:	f04f 0200 	mov.w	r2, #0
 8008d4c:	f04f 0300 	mov.w	r3, #0
 8008d50:	2100      	movs	r1, #0
 8008d52:	68f8      	ldr	r0, [r7, #12]
 8008d54:	f7f8 fe85 	bl	8001a62 <ZbZclAttrIntegerWrite>
  else
  {
    APP_DBG("Unknown endpoint");
    return ZCL_STATUS_FAILURE;
  }
  return ZCL_STATUS_SUCCESS;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	e005      	b.n	8008d68 <onOff_server_off_cb+0x50>
    APP_DBG("Unknown endpoint");
 8008d5c:	4a05      	ldr	r2, [pc, #20]	@ (8008d74 <onOff_server_off_cb+0x5c>)
 8008d5e:	2101      	movs	r1, #1
 8008d60:	2000      	movs	r0, #0
 8008d62:	f7ff fe8f 	bl	8008a84 <logApplication>
    return ZCL_STATUS_FAILURE;
 8008d66:	2301      	movs	r3, #1
} /* onOff_server_off_cb */
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3718      	adds	r7, #24
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	bd80      	pop	{r7, pc}
 8008d70:	0801802c 	.word	0x0801802c
 8008d74:	08018040 	.word	0x08018040

08008d78 <onOff_server_on_cb>:
 * @param  srcInfo source addr
 * @param  arg extra arg 
 * @retval stack status code
 */
static enum ZclStatusCodeT onOff_server_on_cb(struct ZbZclClusterT *clusterPtr, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	607a      	str	r2, [r7, #4]
  uint8_t endpoint;

  endpoint = ZbZclClusterGetEndpoint(clusterPtr);
 8008d84:	68f8      	ldr	r0, [r7, #12]
 8008d86:	f7fa fe2d 	bl	80039e4 <ZbZclClusterGetEndpoint>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	75fb      	strb	r3, [r7, #23]
  if (endpoint == SW1_ENDPOINT)
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
 8008d90:	2b11      	cmp	r3, #17
 8008d92:	d113      	bne.n	8008dbc <onOff_server_on_cb+0x44>
  {
    APP_DBG("ZCL CB - LED ON");
 8008d94:	4a0e      	ldr	r2, [pc, #56]	@ (8008dd0 <onOff_server_on_cb+0x58>)
 8008d96:	2101      	movs	r1, #1
 8008d98:	2000      	movs	r0, #0
 8008d9a:	f7ff fe73 	bl	8008a84 <logApplication>
    HAL_Delay(10);
 8008d9e:	200a      	movs	r0, #10
 8008da0:	f7ff fb98 	bl	80084d4 <HAL_Delay>
    LED_On();
 8008da4:	f7fe f862 	bl	8006e6c <LED_On>
    (void)ZbZclAttrIntegerWrite(clusterPtr, ZCL_ONOFF_ATTR_ONOFF, 1);
 8008da8:	f04f 0201 	mov.w	r2, #1
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	2100      	movs	r1, #0
 8008db2:	68f8      	ldr	r0, [r7, #12]
 8008db4:	f7f8 fe55 	bl	8001a62 <ZbZclAttrIntegerWrite>
  else
  {
    APP_DBG("Unknown endpoint");
    return ZCL_STATUS_FAILURE;
  }
  return ZCL_STATUS_SUCCESS;
 8008db8:	2300      	movs	r3, #0
 8008dba:	e005      	b.n	8008dc8 <onOff_server_on_cb+0x50>
    APP_DBG("Unknown endpoint");
 8008dbc:	4a05      	ldr	r2, [pc, #20]	@ (8008dd4 <onOff_server_on_cb+0x5c>)
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	2000      	movs	r0, #0
 8008dc2:	f7ff fe5f 	bl	8008a84 <logApplication>
    return ZCL_STATUS_FAILURE;
 8008dc6:	2301      	movs	r3, #1
} /* onOff_server_on_cb */
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3718      	adds	r7, #24
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	08018054 	.word	0x08018054
 8008dd4:	08018040 	.word	0x08018040

08008dd8 <onOff_server_toggle_cb>:
 * @param  srcInfo source addr
 * @param  arg extra arg 
 * @retval stack status code
 */
static enum ZclStatusCodeT onOff_server_toggle_cb(struct ZbZclClusterT *clusterPtr, struct ZbZclAddrInfoT *srcInfo, void *arg)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b088      	sub	sp, #32
 8008ddc:	af02      	add	r7, sp, #8
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  uint8_t attrVal;

  if (ZbZclAttrRead(clusterPtr, ZCL_ONOFF_ATTR_ONOFF, NULL,
 8008de4:	f107 0317 	add.w	r3, r7, #23
 8008de8:	2200      	movs	r2, #0
 8008dea:	9201      	str	r2, [sp, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	9200      	str	r2, [sp, #0]
 8008df0:	2200      	movs	r2, #0
 8008df2:	2100      	movs	r1, #0
 8008df4:	68f8      	ldr	r0, [r7, #12]
 8008df6:	f7f7 faf6 	bl	80003e6 <ZbZclAttrRead>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <onOff_server_toggle_cb+0x2c>
                    &attrVal, sizeof(attrVal), false) != ZCL_STATUS_SUCCESS)
  {
    return ZCL_STATUS_FAILURE;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e00f      	b.n	8008e24 <onOff_server_toggle_cb+0x4c>
  }

  if (attrVal != 0)
 8008e04:	7dfb      	ldrb	r3, [r7, #23]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d006      	beq.n	8008e18 <onOff_server_toggle_cb+0x40>
  {
    return onOff_server_off_cb(clusterPtr, srcInfo, arg);
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	68b9      	ldr	r1, [r7, #8]
 8008e0e:	68f8      	ldr	r0, [r7, #12]
 8008e10:	f7ff ff82 	bl	8008d18 <onOff_server_off_cb>
 8008e14:	4603      	mov	r3, r0
 8008e16:	e005      	b.n	8008e24 <onOff_server_toggle_cb+0x4c>
  }
  else
  {
    return onOff_server_on_cb(clusterPtr, srcInfo, arg);
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68b9      	ldr	r1, [r7, #8]
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f7ff ffab 	bl	8008d78 <onOff_server_on_cb>
 8008e22:	4603      	mov	r3, r0
  }
} /* onOff_server_toggle_cb */
 8008e24:	4618      	mov	r0, r3
 8008e26:	3718      	adds	r7, #24
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 8008e32:	4a15      	ldr	r2, [pc, #84]	@ (8008e88 <APP_ZIGBEE_Init+0x5c>)
 8008e34:	2101      	movs	r1, #1
 8008e36:	2000      	movs	r0, #0
 8008e38:	f7ff fe24 	bl	8008a84 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 8008e3c:	f000 fa3a 	bl	80092b4 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 8008e40:	4812      	ldr	r0, [pc, #72]	@ (8008e8c <APP_ZIGBEE_Init+0x60>)
 8008e42:	f000 faeb 	bl	800941c <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 8008e46:	f000 fba5 	bl	8009594 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */

  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 8008e4a:	4a11      	ldr	r2, [pc, #68]	@ (8008e90 <APP_ZIGBEE_Init+0x64>)
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	2001      	movs	r0, #1
 8008e50:	f00d fd8c 	bl	801696c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 8008e54:	4a0f      	ldr	r2, [pc, #60]	@ (8008e94 <APP_ZIGBEE_Init+0x68>)
 8008e56:	2100      	movs	r1, #0
 8008e58:	2002      	movs	r0, #2
 8008e5a:	f00d fd87 	bl	801696c <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 8008e5e:	4a0e      	ldr	r2, [pc, #56]	@ (8008e98 <APP_ZIGBEE_Init+0x6c>)
 8008e60:	2100      	movs	r1, #0
 8008e62:	2004      	movs	r0, #4
 8008e64:	f00d fd82 	bl	801696c <UTIL_SEQ_RegTask>

  /* Task associated with button action */
  UTIL_SEQ_RegTask(1U << CFG_TASK_BUTTON_SW1, UTIL_SEQ_RFU, APP_ZIGBEE_PermitJoin);
 8008e68:	4a0c      	ldr	r2, [pc, #48]	@ (8008e9c <APP_ZIGBEE_Init+0x70>)
 8008e6a:	2100      	movs	r1, #0
 8008e6c:	2010      	movs	r0, #16
 8008e6e:	f00d fd7d 	bl	801696c <UTIL_SEQ_RegTask>
  
  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 8008e72:	f009 f955 	bl	8012120 <SHCI_C2_ZIGBEE_Init>
 8008e76:	4603      	mov	r3, r0
 8008e78:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 8008e7a:	f000 f811 	bl	8008ea0 <APP_ZIGBEE_StackLayersInit>

} /* APP_ZIGBEE_Init */
 8008e7e:	bf00      	nop
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	08018064 	.word	0x08018064
 8008e8c:	20030838 	.word	0x20030838
 8008e90:	080095c5 	.word	0x080095c5
 8008e94:	080095e5 	.word	0x080095e5
 8008e98:	08008ff1 	.word	0x08008ff1
 8008e9c:	0800963d 	.word	0x0800963d

08008ea0 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 8008ea4:	4a24      	ldr	r2, [pc, #144]	@ (8008f38 <APP_ZIGBEE_StackLayersInit+0x98>)
 8008ea6:	2101      	movs	r1, #1
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	f7ff fdeb 	bl	8008a84 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f04f 0100 	mov.w	r1, #0
 8008eba:	f00a fb8f 	bl	80135dc <ZbInit>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8008f3c <APP_ZIGBEE_StackLayersInit+0x9c>)
 8008ec2:	6013      	str	r3, [r2, #0]
  assert(zigbee_app_info.zb != NULL);
 8008ec4:	4b1d      	ldr	r3, [pc, #116]	@ (8008f3c <APP_ZIGBEE_StackLayersInit+0x9c>)
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d106      	bne.n	8008eda <APP_ZIGBEE_StackLayersInit+0x3a>
 8008ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8008f40 <APP_ZIGBEE_StackLayersInit+0xa0>)
 8008ece:	4a1d      	ldr	r2, [pc, #116]	@ (8008f44 <APP_ZIGBEE_StackLayersInit+0xa4>)
 8008ed0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8008ed4:	481c      	ldr	r0, [pc, #112]	@ (8008f48 <APP_ZIGBEE_StackLayersInit+0xa8>)
 8008ed6:	f00d fe27 	bl	8016b28 <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 8008eda:	f000 f83b 	bl	8008f54 <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 8008ede:	4b17      	ldr	r3, [pc, #92]	@ (8008f3c <APP_ZIGBEE_StackLayersInit+0x9c>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	715a      	strb	r2, [r3, #5]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 8008ee4:	f002 fff4 	bl	800bed0 <HAL_GetTick>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	4a14      	ldr	r2, [pc, #80]	@ (8008f3c <APP_ZIGBEE_StackLayersInit+0x9c>)
 8008eec:	6093      	str	r3, [r2, #8]
  zigbee_app_info.startupControl = ZbStartTypeForm;
 8008eee:	4b13      	ldr	r3, [pc, #76]	@ (8008f3c <APP_ZIGBEE_StackLayersInit+0x9c>)
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	711a      	strb	r2, [r3, #4]

  /* Text Feature */
  BSP_LCD_Clear(LCD_Inst, SSD1315_COLOR_BLACK);
 8008ef4:	4b15      	ldr	r3, [pc, #84]	@ (8008f4c <APP_ZIGBEE_StackLayersInit+0xac>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	2100      	movs	r1, #0
 8008efa:	4618      	mov	r0, r3
 8008efc:	f002 fd12 	bl	800b924 <BSP_LCD_Clear>
  BSP_LCD_Refresh(LCD_Inst);
 8008f00:	4b12      	ldr	r3, [pc, #72]	@ (8008f4c <APP_ZIGBEE_StackLayersInit+0xac>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4618      	mov	r0, r3
 8008f06:	f002 fbe5 	bl	800b6d4 <BSP_LCD_Refresh>
  UTIL_LCD_DisplayStringAt(0, LINE(0), (uint8_t *)"OnOff Server Coord", CENTER_MODE);
 8008f0a:	f00d f91f 	bl	801614c <UTIL_LCD_GetFont>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	4a0f      	ldr	r2, [pc, #60]	@ (8008f50 <APP_ZIGBEE_StackLayersInit+0xb0>)
 8008f12:	2100      	movs	r1, #0
 8008f14:	2000      	movs	r0, #0
 8008f16:	f00d f9a9 	bl	801626c <UTIL_LCD_DisplayStringAt>
  BSP_LCD_Refresh(LCD_Inst);
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8008f4c <APP_ZIGBEE_StackLayersInit+0xac>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f002 fbd8 	bl	800b6d4 <BSP_LCD_Refresh>

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 8008f24:	4b05      	ldr	r3, [pc, #20]	@ (8008f3c <APP_ZIGBEE_StackLayersInit+0x9c>)
 8008f26:	2201      	movs	r2, #1
 8008f28:	735a      	strb	r2, [r3, #13]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	2004      	movs	r0, #4
 8008f2e:	f00d fd3f 	bl	80169b0 <UTIL_SEQ_SetTask>
} /* APP_ZIGBEE_StackLayersInit */
 8008f32:	bf00      	nop
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	08018074 	.word	0x08018074
 8008f3c:	20000474 	.word	0x20000474
 8008f40:	08018090 	.word	0x08018090
 8008f44:	08018a38 	.word	0x08018a38
 8008f48:	080180ac 	.word	0x080180ac
 8008f4c:	2000014c 	.word	0x2000014c
 8008f50:	08018118 	.word	0x08018118

08008f54 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure and register Zigbee application endpoints, onoff callbacks
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b088      	sub	sp, #32
 8008f58:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;
  
  /* Endpoint: SW1_ENDPOINT */
  memset(&req, 0, sizeof(req));
 8008f5a:	f107 0308 	add.w	r3, r7, #8
 8008f5e:	2218      	movs	r2, #24
 8008f60:	2100      	movs	r1, #0
 8008f62:	4618      	mov	r0, r3
 8008f64:	f00e f872 	bl	801704c <memset>
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 8008f68:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8008f6c:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_ONOFF_SWITCH;
 8008f6e:	2300      	movs	r3, #0
 8008f70:	81bb      	strh	r3, [r7, #12]
  req.endpoint = SW1_ENDPOINT;
 8008f72:	2311      	movs	r3, #17
 8008f74:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 8008f76:	4b18      	ldr	r3, [pc, #96]	@ (8008fd8 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	1d3a      	adds	r2, r7, #4
 8008f7c:	f107 0108 	add.w	r1, r7, #8
 8008f80:	4618      	mov	r0, r3
 8008f82:	f00b f963 	bl	801424c <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 8008f86:	793b      	ldrb	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d006      	beq.n	8008f9a <APP_ZIGBEE_ConfigEndpoints+0x46>
 8008f8c:	4b13      	ldr	r3, [pc, #76]	@ (8008fdc <APP_ZIGBEE_ConfigEndpoints+0x88>)
 8008f8e:	4a14      	ldr	r2, [pc, #80]	@ (8008fe0 <APP_ZIGBEE_ConfigEndpoints+0x8c>)
 8008f90:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8008f94:	4813      	ldr	r0, [pc, #76]	@ (8008fe4 <APP_ZIGBEE_ConfigEndpoints+0x90>)
 8008f96:	f00d fdc7 	bl	8016b28 <__assert_func>

  /* OnOff server */
  zigbee_app_info.onOff_server = ZbZclOnOffServerAlloc(zigbee_app_info.zb, SW1_ENDPOINT, &OnOffServerCallbacks, NULL);
 8008f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8008fd8 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 8008f9c:	6818      	ldr	r0, [r3, #0]
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4a11      	ldr	r2, [pc, #68]	@ (8008fe8 <APP_ZIGBEE_ConfigEndpoints+0x94>)
 8008fa2:	2111      	movs	r1, #17
 8008fa4:	f7fb fc18 	bl	80047d8 <ZbZclOnOffServerAlloc>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	4a0b      	ldr	r2, [pc, #44]	@ (8008fd8 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 8008fac:	6113      	str	r3, [r2, #16]
  assert(zigbee_app_info.onOff_server != NULL);
 8008fae:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 8008fb0:	691b      	ldr	r3, [r3, #16]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <APP_ZIGBEE_ConfigEndpoints+0x70>
 8008fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fec <APP_ZIGBEE_ConfigEndpoints+0x98>)
 8008fb8:	4a09      	ldr	r2, [pc, #36]	@ (8008fe0 <APP_ZIGBEE_ConfigEndpoints+0x8c>)
 8008fba:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8008fbe:	4809      	ldr	r0, [pc, #36]	@ (8008fe4 <APP_ZIGBEE_ConfigEndpoints+0x90>)
 8008fc0:	f00d fdb2 	bl	8016b28 <__assert_func>
  ZbZclClusterEndpointRegister(zigbee_app_info.onOff_server);
 8008fc4:	4b04      	ldr	r3, [pc, #16]	@ (8008fd8 <APP_ZIGBEE_ConfigEndpoints+0x84>)
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f00b fa2a 	bl	8014422 <ZbZclClusterEndpointRegister>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* USER CODE END CONFIG_ENDPOINT */
} /* APP_ZIGBEE_ConfigEndpoints */
 8008fce:	bf00      	nop
 8008fd0:	3720      	adds	r7, #32
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	20000474 	.word	0x20000474
 8008fdc:	0801812c 	.word	0x0801812c
 8008fe0:	08018a54 	.word	0x08018a54
 8008fe4:	080180ac 	.word	0x080180ac
 8008fe8:	20000008 	.word	0x20000008
 8008fec:	08018150 	.word	0x08018150

08008ff0 <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 8008ff0:	b590      	push	{r4, r7, lr}
 8008ff2:	b0f9      	sub	sp, #484	@ 0x1e4
 8008ff4:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 8008ff6:	4b68      	ldr	r3, [pc, #416]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 8008ff8:	795b      	ldrb	r3, [r3, #5]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 80ae 	beq.w	800915c <APP_ZIGBEE_NwkForm+0x16c>
 8009000:	f002 ff66 	bl	800bed0 <HAL_GetTick>
 8009004:	4602      	mov	r2, r0
 8009006:	4b64      	ldr	r3, [pc, #400]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	429a      	cmp	r2, r3
 800900c:	f0c0 80a6 	bcc.w	800915c <APP_ZIGBEE_NwkForm+0x16c>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 8009010:	4b61      	ldr	r3, [pc, #388]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2200      	movs	r2, #0
 8009016:	211f      	movs	r1, #31
 8009018:	4618      	mov	r0, r3
 800901a:	f00a fb33 	bl	8013684 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 800901e:	463b      	mov	r3, r7
 8009020:	4618      	mov	r0, r3
 8009022:	f00a fbcd 	bl	80137c0 <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_COORDINATOR");
 8009026:	4a5d      	ldr	r2, [pc, #372]	@ (800919c <APP_ZIGBEE_NwkForm+0x1ac>)
 8009028:	2101      	movs	r1, #1
 800902a:	2000      	movs	r0, #0
 800902c:	f7ff fd2a 	bl	8008a84 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 8009030:	4b59      	ldr	r3, [pc, #356]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 8009032:	791a      	ldrb	r2, [r3, #4]
 8009034:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009038:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800903c:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 8009040:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009044:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8009048:	4a55      	ldr	r2, [pc, #340]	@ (80091a0 <APP_ZIGBEE_NwkForm+0x1b0>)
 800904a:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 800904e:	4613      	mov	r3, r2
 8009050:	6818      	ldr	r0, [r3, #0]
 8009052:	6859      	ldr	r1, [r3, #4]
 8009054:	689a      	ldr	r2, [r3, #8]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 800905a:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800905e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8009062:	2201      	movs	r2, #1
 8009064:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 8009066:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800906a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800906e:	2200      	movs	r2, #0
 8009070:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 8009072:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 8009076:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800907a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800907e:	619a      	str	r2, [r3, #24]

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 8009080:	4b45      	ldr	r3, [pc, #276]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	463a      	mov	r2, r7
 8009086:	4611      	mov	r1, r2
 8009088:	4618      	mov	r0, r3
 800908a:	f000 f8a7 	bl	80091dc <ZbStartupWait>
 800908e:	4603      	mov	r3, r0
 8009090:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 8009094:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 8009098:	4a42      	ldr	r2, [pc, #264]	@ (80091a4 <APP_ZIGBEE_NwkForm+0x1b4>)
 800909a:	2101      	movs	r1, #1
 800909c:	2000      	movs	r0, #0
 800909e:	f7ff fcf1 	bl	8008a84 <logApplication>
    zigbee_app_info.join_status = status;
 80090a2:	4a3d      	ldr	r2, [pc, #244]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 80090a4:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80090a8:	7153      	strb	r3, [r2, #5]

    if (status == ZB_STATUS_SUCCESS)
 80090aa:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d146      	bne.n	8009140 <APP_ZIGBEE_NwkForm+0x150>
    {
      /* USER CODE BEGIN 0 */
      zigbee_app_info.join_delay = 0U;
 80090b2:	4b39      	ldr	r3, [pc, #228]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 80090b4:	2200      	movs	r2, #0
 80090b6:	609a      	str	r2, [r3, #8]
      zigbee_app_info.init_after_join = true;
 80090b8:	4b37      	ldr	r3, [pc, #220]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	731a      	strb	r2, [r3, #12]
	  
      /* flash x3 Green LED to inform the joining connection*/
      LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 80090be:	2200      	movs	r2, #0
 80090c0:	2181      	movs	r1, #129	@ 0x81
 80090c2:	2000      	movs	r0, #0
 80090c4:	f7fd fee5 	bl	8006e92 <LED_Set_rgb>
      HAL_Delay(500);
 80090c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80090cc:	f7ff fa02 	bl	80084d4 <HAL_Delay>
      LED_Off();
 80090d0:	f7fd fed5 	bl	8006e7e <LED_Off>
      HAL_Delay(500);
 80090d4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80090d8:	f7ff f9fc 	bl	80084d4 <HAL_Delay>
      LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 80090dc:	2200      	movs	r2, #0
 80090de:	2181      	movs	r1, #129	@ 0x81
 80090e0:	2000      	movs	r0, #0
 80090e2:	f7fd fed6 	bl	8006e92 <LED_Set_rgb>
      HAL_Delay(500);
 80090e6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80090ea:	f7ff f9f3 	bl	80084d4 <HAL_Delay>
      LED_Off();
 80090ee:	f7fd fec6 	bl	8006e7e <LED_Off>
      HAL_Delay(500);
 80090f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80090f6:	f7ff f9ed 	bl	80084d4 <HAL_Delay>
      LED_Set_rgb(PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_47_0, PWM_LED_GSDATA_OFF);
 80090fa:	2200      	movs	r2, #0
 80090fc:	2181      	movs	r1, #129	@ 0x81
 80090fe:	2000      	movs	r0, #0
 8009100:	f7fd fec7 	bl	8006e92 <LED_Set_rgb>
      HAL_Delay(500);
 8009104:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009108:	f7ff f9e4 	bl	80084d4 <HAL_Delay>
      LED_Off();
 800910c:	f7fd feb7 	bl	8006e7e <LED_Off>
      HAL_Delay(500);
 8009110:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009114:	f7ff f9de 	bl	80084d4 <HAL_Delay>
      LED_Off();
 8009118:	f7fd feb1 	bl	8006e7e <LED_Off>
      
      UTIL_LCD_ClearStringLine(2);
 800911c:	2002      	movs	r0, #2
 800911e:	f00d f841 	bl	80161a4 <UTIL_LCD_ClearStringLine>
      UTIL_LCD_DisplayStringAt(0, LINE(2), (uint8_t *)"Network Ready", CENTER_MODE);
 8009122:	f00d f813 	bl	801614c <UTIL_LCD_GetFont>
 8009126:	4603      	mov	r3, r0
 8009128:	88db      	ldrh	r3, [r3, #6]
 800912a:	005b      	lsls	r3, r3, #1
 800912c:	4619      	mov	r1, r3
 800912e:	2301      	movs	r3, #1
 8009130:	4a1d      	ldr	r2, [pc, #116]	@ (80091a8 <APP_ZIGBEE_NwkForm+0x1b8>)
 8009132:	2000      	movs	r0, #0
 8009134:	f00d f89a 	bl	801626c <UTIL_LCD_DisplayStringAt>
      BSP_LCD_Refresh(0);
 8009138:	2000      	movs	r0, #0
 800913a:	f002 facb 	bl	800b6d4 <BSP_LCD_Refresh>
 800913e:	e00d      	b.n	800915c <APP_ZIGBEE_NwkForm+0x16c>
    }
    else
    {
      /* USER CODE END 0 */
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 8009140:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8009144:	4a19      	ldr	r2, [pc, #100]	@ (80091ac <APP_ZIGBEE_NwkForm+0x1bc>)
 8009146:	2101      	movs	r1, #1
 8009148:	2000      	movs	r0, #0
 800914a:	f7ff fc9b 	bl	8008a84 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 800914e:	f002 febf 	bl	800bed0 <HAL_GetTick>
 8009152:	4603      	mov	r3, r0
 8009154:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8009158:	4a0f      	ldr	r2, [pc, #60]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 800915a:	6093      	str	r3, [r2, #8]
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 800915c:	4b0e      	ldr	r3, [pc, #56]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 800915e:	795b      	ldrb	r3, [r3, #5]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <APP_ZIGBEE_NwkForm+0x17e>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 8009164:	2100      	movs	r1, #0
 8009166:	2004      	movs	r0, #4
 8009168:	f00d fc22 	bl	80169b0 <UTIL_SEQ_SetTask>

    /* Since we're using group addressing (broadcast), shorten the broadcast timeout */
    uint32_t bcast_timeout = 3;
    ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
  }
} /* APP_ZIGBEE_NwkForm */
 800916c:	e00f      	b.n	800918e <APP_ZIGBEE_NwkForm+0x19e>
    zigbee_app_info.init_after_join = false;
 800916e:	4b0a      	ldr	r3, [pc, #40]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 8009170:	2200      	movs	r2, #0
 8009172:	731a      	strb	r2, [r3, #12]
    APP_ZIGBEE_ConfigGroupAddr();
 8009174:	f000 fa46 	bl	8009604 <APP_ZIGBEE_ConfigGroupAddr>
    uint32_t bcast_timeout = 3;
 8009178:	2303      	movs	r3, #3
 800917a:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
    ZbNwkSet(zigbee_app_info.zb, ZB_NWK_NIB_ID_NetworkBroadcastDeliveryTime, &bcast_timeout, sizeof(bcast_timeout));
 800917e:	4b06      	ldr	r3, [pc, #24]	@ (8009198 <APP_ZIGBEE_NwkForm+0x1a8>)
 8009180:	6818      	ldr	r0, [r3, #0]
 8009182:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8009186:	2304      	movs	r3, #4
 8009188:	2188      	movs	r1, #136	@ 0x88
 800918a:	f00a ffb6 	bl	80140fa <ZbNwkSet>
} /* APP_ZIGBEE_NwkForm */
 800918e:	bf00      	nop
 8009190:	f507 77f2 	add.w	r7, r7, #484	@ 0x1e4
 8009194:	46bd      	mov	sp, r7
 8009196:	bd90      	pop	{r4, r7, pc}
 8009198:	20000474 	.word	0x20000474
 800919c:	08018178 	.word	0x08018178
 80091a0:	08018b94 	.word	0x08018b94
 80091a4:	080181b0 	.word	0x080181b0
 80091a8:	080181d8 	.word	0x080181d8
 80091ac:	080181e8 	.word	0x080181e8

080091b0 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	60fb      	str	r3, [r7, #12]

  info->status = status;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	79fa      	ldrb	r2, [r7, #7]
 80091c4:	705a      	strb	r2, [r3, #1]
  info->active = false;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 80091cc:	2010      	movs	r0, #16
 80091ce:	f00d fc1b 	bl	8016a08 <UTIL_SEQ_SetEvt>
} /* ZbStartupWaitCb */
 80091d2:	bf00      	nop
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <ZbStartupWait>:
 * @param  zb :Zigbee device object pointer, config: startup config pointer
 * @param  ErrCode
 * @retval zigbee status stack code
 */
enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b084      	sub	sp, #16
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 80091e6:	2002      	movs	r0, #2
 80091e8:	f00d fcbc 	bl	8016b64 <malloc>
 80091ec:	4603      	mov	r3, r0
 80091ee:	60fb      	str	r3, [r7, #12]
  if (info == NULL) {
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d101      	bne.n	80091fa <ZbStartupWait+0x1e>
    return ZB_STATUS_ALLOC_FAIL;
 80091f6:	2370      	movs	r3, #112	@ 0x70
 80091f8:	e021      	b.n	800923e <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 80091fa:	2202      	movs	r2, #2
 80091fc:	2100      	movs	r1, #0
 80091fe:	68f8      	ldr	r0, [r7, #12]
 8009200:	f00d ff24 	bl	801704c <memset>

  info->active = true;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4a0e      	ldr	r2, [pc, #56]	@ (8009248 <ZbStartupWait+0x6c>)
 800920e:	6839      	ldr	r1, [r7, #0]
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f00a faff 	bl	8013814 <ZbStartup>
 8009216:	4603      	mov	r3, r0
 8009218:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d004      	beq.n	800922a <ZbStartupWait+0x4e>
  {
    free(info);
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f00d fca7 	bl	8016b74 <free>
    return status;
 8009226:	7afb      	ldrb	r3, [r7, #11]
 8009228:	e009      	b.n	800923e <ZbStartupWait+0x62>
  }
  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800922a:	2010      	movs	r0, #16
 800922c:	f00d fc0c 	bl	8016a48 <UTIL_SEQ_WaitEvt>
  status = info->status;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	785b      	ldrb	r3, [r3, #1]
 8009234:	72fb      	strb	r3, [r7, #11]
  free(info);
 8009236:	68f8      	ldr	r0, [r7, #12]
 8009238:	f00d fc9c 	bl	8016b74 <free>
  return status;
 800923c:	7afb      	ldrb	r3, [r7, #11]
} /* ZbStartupWait */
 800923e:	4618      	mov	r0, r3
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	080091b1 	.word	0x080091b1

0800924c <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  switch (ErrId) {
  default:
    APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 8009256:	2100      	movs	r1, #0
 8009258:	4803      	ldr	r0, [pc, #12]	@ (8009268 <APP_ZIGBEE_Error+0x1c>)
 800925a:	f000 f807 	bl	800926c <APP_ZIGBEE_TraceError>
    break;
 800925e:	bf00      	nop
  }
} /* APP_ZIGBEE_Error */
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	08018228 	.word	0x08018228

0800926c <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af02      	add	r7, sp, #8
 8009272:	6078      	str	r0, [r7, #4]
 8009274:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	9300      	str	r3, [sp, #0]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a0b      	ldr	r2, [pc, #44]	@ (80092ac <APP_ZIGBEE_TraceError+0x40>)
 800927e:	2101      	movs	r1, #1
 8009280:	2000      	movs	r0, #0
 8009282:	f7ff fbff 	bl	8008a84 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  while (1U == 1U)
  {
    UTIL_LCD_ClearStringLine(4);
 8009286:	2004      	movs	r0, #4
 8009288:	f00c ff8c 	bl	80161a4 <UTIL_LCD_ClearStringLine>
    UTIL_LCD_DisplayStringAt(0, LINE(4), (uint8_t *)"FATAL_ERROR", CENTER_MODE);
 800928c:	f00c ff5e 	bl	801614c <UTIL_LCD_GetFont>
 8009290:	4603      	mov	r3, r0
 8009292:	88db      	ldrh	r3, [r3, #6]
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	4619      	mov	r1, r3
 8009298:	2301      	movs	r3, #1
 800929a:	4a05      	ldr	r2, [pc, #20]	@ (80092b0 <APP_ZIGBEE_TraceError+0x44>)
 800929c:	2000      	movs	r0, #0
 800929e:	f00c ffe5 	bl	801626c <UTIL_LCD_DisplayStringAt>
    BSP_LCD_Refresh(0);
 80092a2:	2000      	movs	r0, #0
 80092a4:	f002 fa16 	bl	800b6d4 <BSP_LCD_Refresh>
    UTIL_LCD_ClearStringLine(4);
 80092a8:	bf00      	nop
 80092aa:	e7ec      	b.n	8009286 <APP_ZIGBEE_TraceError+0x1a>
 80092ac:	08018238 	.word	0x08018238
 80092b0:	0801825c 	.word	0x0801825c

080092b4 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b098      	sub	sp, #96	@ 0x60
 80092b8:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 80092ba:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80092be:	657b      	str	r3, [r7, #84]	@ 0x54

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success) {
 80092c0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80092c2:	f008 ff41 	bl	8012148 <SHCI_GetWirelessFwInfo>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d004      	beq.n	80092d6 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 80092cc:	2101      	movs	r1, #1
 80092ce:	2001      	movs	r0, #1
 80092d0:	f7ff ffbc 	bl	800924c <APP_ZIGBEE_Error>
    //print clusters allocated
    APP_DBG("Clusters allocated are:");  
    APP_DBG("OnOff Server on Endpoint %d",SW1_ENDPOINT);
    APP_DBG("**********************************************************");
  }
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 80092d4:	e081      	b.n	80093da <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x126>
    APP_DBG("**********************************************************");
 80092d6:	4a43      	ldr	r2, [pc, #268]	@ (80093e4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x130>)
 80092d8:	2101      	movs	r1, #1
 80092da:	2000      	movs	r0, #0
 80092dc:	f7ff fbd2 	bl	8008a84 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 80092e0:	4a41      	ldr	r2, [pc, #260]	@ (80093e8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 80092e2:	2101      	movs	r1, #1
 80092e4:	2000      	movs	r0, #0
 80092e6:	f7ff fbcd 	bl	8008a84 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 80092ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f2:	785b      	ldrb	r3, [r3, #1]
 80092f4:	461a      	mov	r2, r3
 80092f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092f8:	789b      	ldrb	r3, [r3, #2]
 80092fa:	9301      	str	r3, [sp, #4]
 80092fc:	9200      	str	r2, [sp, #0]
 80092fe:	460b      	mov	r3, r1
 8009300:	4a3a      	ldr	r2, [pc, #232]	@ (80093ec <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x138>)
 8009302:	2101      	movs	r1, #1
 8009304:	2000      	movs	r0, #0
 8009306:	f7ff fbbd 	bl	8008a84 <logApplication>
    switch (p_wireless_info->StackType) {
 800930a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800930c:	7a5b      	ldrb	r3, [r3, #9]
 800930e:	2b30      	cmp	r3, #48	@ 0x30
 8009310:	d002      	beq.n	8009318 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 8009312:	2b31      	cmp	r3, #49	@ 0x31
 8009314:	d006      	beq.n	8009324 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 8009316:	e00b      	b.n	8009330 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
      APP_DBG("FW Type : FFD Zigbee stack");
 8009318:	4a35      	ldr	r2, [pc, #212]	@ (80093f0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 800931a:	2101      	movs	r1, #1
 800931c:	2000      	movs	r0, #0
 800931e:	f7ff fbb1 	bl	8008a84 <logApplication>
      break;
 8009322:	e00a      	b.n	800933a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_DBG("FW Type : RFD Zigbee stack");
 8009324:	4a33      	ldr	r2, [pc, #204]	@ (80093f4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 8009326:	2101      	movs	r1, #1
 8009328:	2000      	movs	r0, #0
 800932a:	f7ff fbab 	bl	8008a84 <logApplication>
      break;
 800932e:	e004      	b.n	800933a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
      APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 8009330:	2101      	movs	r1, #1
 8009332:	2001      	movs	r0, #1
 8009334:	f7ff ff8a 	bl	800924c <APP_ZIGBEE_Error>
      break;
 8009338:	bf00      	nop
    char* __PathProject__ =(strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 800933a:	4b2f      	ldr	r3, [pc, #188]	@ (80093f8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 800933c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        {del = strchr(__PathProject__, '/');}
 800933e:	212f      	movs	r1, #47	@ 0x2f
 8009340:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8009342:	f00d fe8b 	bl	801705c <strchr>
 8009346:	64b8      	str	r0, [r7, #72]	@ 0x48
        int index = (int) (del - __PathProject__);
 8009348:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800934a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	647b      	str	r3, [r7, #68]	@ 0x44
        APP_DBG("Application flashed: %*.*s",index,index,__PathProject__);
 8009350:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009352:	9301      	str	r3, [sp, #4]
 8009354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009356:	9300      	str	r3, [sp, #0]
 8009358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800935a:	4a28      	ldr	r2, [pc, #160]	@ (80093fc <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 800935c:	2101      	movs	r1, #1
 800935e:	2000      	movs	r0, #0
 8009360:	f7ff fb90 	bl	8008a84 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 8009364:	230f      	movs	r3, #15
 8009366:	4a26      	ldr	r2, [pc, #152]	@ (8009400 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 8009368:	2101      	movs	r1, #1
 800936a:	2000      	movs	r0, #0
 800936c:	f7ff fb8a 	bl	8008a84 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 8009370:	4b24      	ldr	r3, [pc, #144]	@ (8009404 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 8009372:	4a25      	ldr	r2, [pc, #148]	@ (8009408 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 8009374:	2101      	movs	r1, #1
 8009376:	2000      	movs	r0, #0
 8009378:	f7ff fb84 	bl	8008a84 <logApplication>
    Z09_LL_string[0]=0;
 800937c:	2300      	movs	r3, #0
 800937e:	703b      	strb	r3, [r7, #0]
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 8009380:	2300      	movs	r3, #0
 8009382:	653b      	str	r3, [r7, #80]	@ 0x50
 8009384:	e010      	b.n	80093a8 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf4>
        sprintf(&Z09_LL_string[str_index*3],"%02x ",sec_key_ha[str_index]);
 8009386:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009388:	4613      	mov	r3, r2
 800938a:	005b      	lsls	r3, r3, #1
 800938c:	4413      	add	r3, r2
 800938e:	463a      	mov	r2, r7
 8009390:	18d0      	adds	r0, r2, r3
 8009392:	4a1c      	ldr	r2, [pc, #112]	@ (8009404 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 8009394:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009396:	4413      	add	r3, r2
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	461a      	mov	r2, r3
 800939c:	491b      	ldr	r1, [pc, #108]	@ (800940c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 800939e:	f00d fdb9 	bl	8016f14 <siprintf>
    for(int str_index=0; str_index < ZB_SEC_KEYSIZE; str_index++)
 80093a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a4:	3301      	adds	r3, #1
 80093a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80093a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093aa:	2b0f      	cmp	r3, #15
 80093ac:	d9eb      	bls.n	8009386 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd2>
    APP_DBG("Link Key value: %s",Z09_LL_string);
 80093ae:	463b      	mov	r3, r7
 80093b0:	4a17      	ldr	r2, [pc, #92]	@ (8009410 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x15c>)
 80093b2:	2101      	movs	r1, #1
 80093b4:	2000      	movs	r0, #0
 80093b6:	f7ff fb65 	bl	8008a84 <logApplication>
    APP_DBG("Clusters allocated are:");  
 80093ba:	4a16      	ldr	r2, [pc, #88]	@ (8009414 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x160>)
 80093bc:	2101      	movs	r1, #1
 80093be:	2000      	movs	r0, #0
 80093c0:	f7ff fb60 	bl	8008a84 <logApplication>
    APP_DBG("OnOff Server on Endpoint %d",SW1_ENDPOINT);
 80093c4:	2311      	movs	r3, #17
 80093c6:	4a14      	ldr	r2, [pc, #80]	@ (8009418 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x164>)
 80093c8:	2101      	movs	r1, #1
 80093ca:	2000      	movs	r0, #0
 80093cc:	f7ff fb5a 	bl	8008a84 <logApplication>
    APP_DBG("**********************************************************");
 80093d0:	4a04      	ldr	r2, [pc, #16]	@ (80093e4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x130>)
 80093d2:	2101      	movs	r1, #1
 80093d4:	2000      	movs	r0, #0
 80093d6:	f7ff fb55 	bl	8008a84 <logApplication>
} /* APP_ZIGBEE_CheckWirelessFirmwareInfo */
 80093da:	bf00      	nop
 80093dc:	3758      	adds	r7, #88	@ 0x58
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	08018268 	.word	0x08018268
 80093e8:	080182a4 	.word	0x080182a4
 80093ec:	080182c0 	.word	0x080182c0
 80093f0:	080182d8 	.word	0x080182d8
 80093f4:	080182f4 	.word	0x080182f4
 80093f8:	080180cc 	.word	0x080180cc
 80093fc:	08018310 	.word	0x08018310
 8009400:	0801832c 	.word	0x0801832c
 8009404:	08018b94 	.word	0x08018b94
 8009408:	08018340 	.word	0x08018340
 800940c:	08018350 	.word	0x08018350
 8009410:	08018358 	.word	0x08018358
 8009414:	0801836c 	.word	0x0801836c
 8009418:	08018384 	.word	0x08018384

0800941c <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 8009424:	4a04      	ldr	r2, [pc, #16]	@ (8009438 <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6013      	str	r3, [r2, #0]
} /* APP_ZIGBEE_RegisterCmdBuffer */
 800942a:	bf00      	nop
 800942c:	370c      	adds	r7, #12
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	2000045c 	.word	0x2000045c

0800943c <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800943c:	b480      	push	{r7}
 800943e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 8009440:	4b03      	ldr	r3, [pc, #12]	@ (8009450 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	330c      	adds	r3, #12
} /* ZIGBEE_Get_OTCmdPayloadBuffer */
 8009446:	4618      	mov	r0, r3
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr
 8009450:	2000045c 	.word	0x2000045c

08009454 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 8009458:	4b03      	ldr	r3, [pc, #12]	@ (8009468 <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	330b      	adds	r3, #11
} /* ZIGBEE_Get_OTCmdRspPayloadBuffer */
 800945e:	4618      	mov	r0, r3
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr
 8009468:	2000045c 	.word	0x2000045c

0800946c <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 8009470:	4b03      	ldr	r3, [pc, #12]	@ (8009480 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	330b      	adds	r3, #11
} /* ZIGBEE_Get_NotificationPayloadBuffer */
 8009476:	4618      	mov	r0, r3
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr
 8009480:	20000460 	.word	0x20000460

08009484 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 8009484:	b480      	push	{r7}
 8009486:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 8009488:	4b03      	ldr	r3, [pc, #12]	@ (8009498 <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	330b      	adds	r3, #11
}
 800948e:	4618      	mov	r0, r3
 8009490:	46bd      	mov	sp, r7
 8009492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009496:	4770      	bx	lr
 8009498:	20000464 	.word	0x20000464

0800949c <ZIGBEE_CmdTransfer>:
 * @brief  This function is used to transfer the commands from the M4 to the M0.
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b082      	sub	sp, #8
 80094a0:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 80094a2:	4b0f      	ldr	r3, [pc, #60]	@ (80094e0 <ZIGBEE_CmdTransfer+0x44>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	330c      	adds	r3, #12
 80094a8:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 80094aa:	4b0d      	ldr	r3, [pc, #52]	@ (80094e0 <ZIGBEE_CmdTransfer+0x44>)
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80094b4:	725a      	strb	r2, [r3, #9]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f042 0202 	orr.w	r2, r2, #2
 80094bc:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	3302      	adds	r3, #2
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	4b06      	ldr	r3, [pc, #24]	@ (80094e0 <ZIGBEE_CmdTransfer+0x44>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	0092      	lsls	r2, r2, #2
 80094cc:	b2d2      	uxtb	r2, r2
 80094ce:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 80094d0:	f009 f934 	bl	801273c <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 80094d4:	f000 f827 	bl	8009526 <Wait_Getting_Ack_From_M0>
} /* ZIGBEE_CmdTransfer */
 80094d8:	bf00      	nop
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	2000045c 	.word	0x2000045c

080094e4 <TL_ZIGBEE_CmdEvtReceived>:
 * @brief  This function is called when the M0+ acknowledge  the fact that it has received a Cmd
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 80094ec:	f000 f822 	bl	8009534 <Receive_Ack_From_M0>
} /* TL_ZIGBEE_CmdEvtReceived */
 80094f0:	bf00      	nop
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <TL_ZIGBEE_NotReceived>:
 * @brief  This function is called when notification from M0+ is received.
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 8009500:	4a04      	ldr	r2, [pc, #16]	@ (8009514 <TL_ZIGBEE_NotReceived+0x1c>)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 8009506:	f000 f81d 	bl	8009544 <Receive_Notification_From_M0>
} /* TL_ZIGBEE_NotReceived */
 800950a:	bf00      	nop
 800950c:	3708      	adds	r7, #8
 800950e:	46bd      	mov	sp, r7
 8009510:	bd80      	pop	{r7, pc}
 8009512:	bf00      	nop
 8009514:	20000460 	.word	0x20000460

08009518 <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800951c:	2004      	movs	r0, #4
 800951e:	f00d fa93 	bl	8016a48 <UTIL_SEQ_WaitEvt>
} /* Pre_ZigbeeCmdProcessing */
 8009522:	bf00      	nop
 8009524:	bd80      	pop	{r7, pc}

08009526 <Wait_Getting_Ack_From_M0>:
 * @brief  This function waits for getting an acknowledgment from the M0.
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 8009526:	b580      	push	{r7, lr}
 8009528:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800952a:	2002      	movs	r0, #2
 800952c:	f00d fa8c 	bl	8016a48 <UTIL_SEQ_WaitEvt>
} /* Wait_Getting_Ack_From_M0 */
 8009530:	bf00      	nop
 8009532:	bd80      	pop	{r7, pc}

08009534 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 8009538:	2002      	movs	r0, #2
 800953a:	f00d fa65 	bl	8016a08 <UTIL_SEQ_SetEvt>
} /* Receive_Ack_From_M0 */
 800953e:	bf00      	nop
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	af00      	add	r7, sp, #0
    CptReceiveNotifyFromM0++;
 8009548:	4b05      	ldr	r3, [pc, #20]	@ (8009560 <Receive_Notification_From_M0+0x1c>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	3301      	adds	r3, #1
 800954e:	4a04      	ldr	r2, [pc, #16]	@ (8009560 <Receive_Notification_From_M0+0x1c>)
 8009550:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 8009552:	2100      	movs	r1, #0
 8009554:	2001      	movs	r0, #1
 8009556:	f00d fa2b 	bl	80169b0 <UTIL_SEQ_SetTask>
}
 800955a:	bf00      	nop
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20000468 	.word	0x20000468

08009564 <TL_ZIGBEE_M0RequestReceived>:
 * @brief  This function is called when a request from M0+ is received.
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
    p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 800956c:	4a07      	ldr	r2, [pc, #28]	@ (800958c <TL_ZIGBEE_M0RequestReceived+0x28>)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6013      	str	r3, [r2, #0]

    CptReceiveRequestFromM0++;
 8009572:	4b07      	ldr	r3, [pc, #28]	@ (8009590 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	3301      	adds	r3, #1
 8009578:	4a05      	ldr	r2, [pc, #20]	@ (8009590 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800957a:	6013      	str	r3, [r2, #0]
    UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800957c:	2100      	movs	r1, #0
 800957e:	2002      	movs	r0, #2
 8009580:	f00d fa16 	bl	80169b0 <UTIL_SEQ_SetTask>
}
 8009584:	bf00      	nop
 8009586:	3708      	adds	r7, #8
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}
 800958c:	20000464 	.word	0x20000464
 8009590:	2000046c 	.word	0x2000046c

08009594 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 8009594:	b580      	push	{r7, lr}
 8009596:	af00      	add	r7, sp, #0
    ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 8009598:	4b06      	ldr	r3, [pc, #24]	@ (80095b4 <APP_ZIGBEE_TL_INIT+0x20>)
 800959a:	4a07      	ldr	r2, [pc, #28]	@ (80095b8 <APP_ZIGBEE_TL_INIT+0x24>)
 800959c:	601a      	str	r2, [r3, #0]
    ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 800959e:	4b05      	ldr	r3, [pc, #20]	@ (80095b4 <APP_ZIGBEE_TL_INIT+0x20>)
 80095a0:	4a06      	ldr	r2, [pc, #24]	@ (80095bc <APP_ZIGBEE_TL_INIT+0x28>)
 80095a2:	605a      	str	r2, [r3, #4]
    ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 80095a4:	4b03      	ldr	r3, [pc, #12]	@ (80095b4 <APP_ZIGBEE_TL_INIT+0x20>)
 80095a6:	4a06      	ldr	r2, [pc, #24]	@ (80095c0 <APP_ZIGBEE_TL_INIT+0x2c>)
 80095a8:	609a      	str	r2, [r3, #8]
    TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 80095aa:	4802      	ldr	r0, [pc, #8]	@ (80095b4 <APP_ZIGBEE_TL_INIT+0x20>)
 80095ac:	f009 f8aa 	bl	8012704 <TL_ZIGBEE_Init>
}
 80095b0:	bf00      	nop
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20030028 	.word	0x20030028
 80095b8:	20030838 	.word	0x20030838
 80095bc:	20030944 	.word	0x20030944
 80095c0:	20030a50 	.word	0x20030a50

080095c4 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 80095c8:	4b05      	ldr	r3, [pc, #20]	@ (80095e0 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d004      	beq.n	80095da <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 80095d0:	4b03      	ldr	r3, [pc, #12]	@ (80095e0 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 80095d6:	f00b f86f 	bl	80146b8 <Zigbee_CallBackProcessing>
  }
}
 80095da:	bf00      	nop
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000468 	.word	0x20000468

080095e4 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param  None
 * @return None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	af00      	add	r7, sp, #0
    if (CptReceiveRequestFromM0 != 0) {
 80095e8:	4b05      	ldr	r3, [pc, #20]	@ (8009600 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d004      	beq.n	80095fa <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
        CptReceiveRequestFromM0 = 0;
 80095f0:	4b03      	ldr	r3, [pc, #12]	@ (8009600 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	601a      	str	r2, [r3, #0]
        Zigbee_M0RequestProcessing();
 80095f6:	f00c fc35 	bl	8015e64 <Zigbee_M0RequestProcessing>
    }
}
 80095fa:	bf00      	nop
 80095fc:	bd80      	pop	{r7, pc}
 80095fe:	bf00      	nop
 8009600:	2000046c 	.word	0x2000046c

08009604 <APP_ZIGBEE_ConfigGroupAddr>:
 * @brief  Set group addressing mode
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigGroupAddr(void)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b084      	sub	sp, #16
 8009608:	af00      	add	r7, sp, #0
  struct ZbApsmeAddGroupReqT req;
  struct ZbApsmeAddGroupConfT conf;

  memset(&req, 0, sizeof(req));
 800960a:	f107 030c 	add.w	r3, r7, #12
 800960e:	2204      	movs	r2, #4
 8009610:	2100      	movs	r1, #0
 8009612:	4618      	mov	r0, r3
 8009614:	f00d fd1a 	bl	801704c <memset>
  req.endpt = SW1_ENDPOINT;
 8009618:	2311      	movs	r3, #17
 800961a:	73bb      	strb	r3, [r7, #14]
  req.groupAddr = SW1_GROUP_ADDR;
 800961c:	2301      	movs	r3, #1
 800961e:	81bb      	strh	r3, [r7, #12]
  ZbApsmeAddGroupReq(zigbee_app_info.zb, &req, &conf);
 8009620:	4b05      	ldr	r3, [pc, #20]	@ (8009638 <APP_ZIGBEE_ConfigGroupAddr+0x34>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	1d3a      	adds	r2, r7, #4
 8009626:	f107 010c 	add.w	r1, r7, #12
 800962a:	4618      	mov	r0, r3
 800962c:	f00a fa85 	bl	8013b3a <ZbApsmeAddGroupReq>

} /* APP_ZIGBEE_ConfigGroupAddr */
 8009630:	bf00      	nop
 8009632:	3710      	adds	r7, #16
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	20000474 	.word	0x20000474

0800963c <APP_ZIGBEE_PermitJoin>:
 * @brief  Send the request to NWK layer a Permit to Join the network
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_PermitJoin(void)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
  struct ZbZdoPermitJoinReqT req;
  enum ZbStatusCodeT status;

  memset(&req, 0, sizeof(req));
 8009642:	463b      	mov	r3, r7
 8009644:	2204      	movs	r2, #4
 8009646:	2100      	movs	r1, #0
 8009648:	4618      	mov	r0, r3
 800964a:	f00d fcff 	bl	801704c <memset>
  req.destAddr = ZB_NWK_ADDR_BCAST_ROUTERS;
 800964e:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8009652:	803b      	strh	r3, [r7, #0]
  req.tcSignificance = true;
 8009654:	2301      	movs	r3, #1
 8009656:	70fb      	strb	r3, [r7, #3]
  req.duration = PERMIT_JOIN_DELAY;
 8009658:	233c      	movs	r3, #60	@ 0x3c
 800965a:	70bb      	strb	r3, [r7, #2]

  APP_DBG("Send command Permit join during %ds", PERMIT_JOIN_DELAY);
 800965c:	233c      	movs	r3, #60	@ 0x3c
 800965e:	4a0a      	ldr	r2, [pc, #40]	@ (8009688 <APP_ZIGBEE_PermitJoin+0x4c>)
 8009660:	2101      	movs	r1, #1
 8009662:	2000      	movs	r0, #0
 8009664:	f7ff fa0e 	bl	8008a84 <logApplication>
  status = ZbZdoPermitJoinReq(zigbee_app_info.zb, &req, APP_ZIGBEE_ZbZdoPermitJoinReq_cb, NULL);
 8009668:	4b08      	ldr	r3, [pc, #32]	@ (800968c <APP_ZIGBEE_PermitJoin+0x50>)
 800966a:	6818      	ldr	r0, [r3, #0]
 800966c:	4639      	mov	r1, r7
 800966e:	2300      	movs	r3, #0
 8009670:	4a07      	ldr	r2, [pc, #28]	@ (8009690 <APP_ZIGBEE_PermitJoin+0x54>)
 8009672:	f00a fd57 	bl	8014124 <ZbZdoPermitJoinReq>
 8009676:	4603      	mov	r3, r0
 8009678:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);

  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_PERMIT_JOIN_REQ_RSP);
 800967a:	2020      	movs	r0, #32
 800967c:	f00d f9e4 	bl	8016a48 <UTIL_SEQ_WaitEvt>
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	080183a0 	.word	0x080183a0
 800968c:	20000474 	.word	0x20000474
 8009690:	08009695 	.word	0x08009695

08009694 <APP_ZIGBEE_ZbZdoPermitJoinReq_cb>:

static void APP_ZIGBEE_ZbZdoPermitJoinReq_cb(struct ZbZdoPermitJoinRspT *rsp, void *arg)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	6039      	str	r1, [r7, #0]
  UNUSED(arg);
  
  if(rsp->status != ZB_STATUS_SUCCESS){
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	781b      	ldrb	r3, [r3, #0]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d005      	beq.n	80096b2 <APP_ZIGBEE_ZbZdoPermitJoinReq_cb+0x1e>
    APP_DBG("Error, cannot set permit join duration");
 80096a6:	4a09      	ldr	r2, [pc, #36]	@ (80096cc <APP_ZIGBEE_ZbZdoPermitJoinReq_cb+0x38>)
 80096a8:	2101      	movs	r1, #1
 80096aa:	2000      	movs	r0, #0
 80096ac:	f7ff f9ea 	bl	8008a84 <logApplication>
 80096b0:	e004      	b.n	80096bc <APP_ZIGBEE_ZbZdoPermitJoinReq_cb+0x28>
  } else {
    APP_DBG("Permit join duration successfully changed.");
 80096b2:	4a07      	ldr	r2, [pc, #28]	@ (80096d0 <APP_ZIGBEE_ZbZdoPermitJoinReq_cb+0x3c>)
 80096b4:	2101      	movs	r1, #1
 80096b6:	2000      	movs	r0, #0
 80096b8:	f7ff f9e4 	bl	8008a84 <logApplication>
  }
  
  /* Unlock the waiting on this event */
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_PERMIT_JOIN_REQ_RSP);
 80096bc:	2020      	movs	r0, #32
 80096be:	f00d f9a3 	bl	8016a08 <UTIL_SEQ_SetEvt>
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
 80096ca:	bf00      	nop
 80096cc:	080183c4 	.word	0x080183c4
 80096d0:	080183ec 	.word	0x080183ec

080096d4 <LL_PWR_EnableBootC2>:
{
 80096d4:	b480      	push	{r7}
 80096d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80096d8:	4b05      	ldr	r3, [pc, #20]	@ (80096f0 <LL_PWR_EnableBootC2+0x1c>)
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	4a04      	ldr	r2, [pc, #16]	@ (80096f0 <LL_PWR_EnableBootC2+0x1c>)
 80096de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096e2:	60d3      	str	r3, [r2, #12]
}
 80096e4:	bf00      	nop
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr
 80096ee:	bf00      	nop
 80096f0:	58000400 	.word	0x58000400

080096f4 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80096fc:	4b06      	ldr	r3, [pc, #24]	@ (8009718 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80096fe:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8009702:	4905      	ldr	r1, [pc, #20]	@ (8009718 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	4313      	orrs	r3, r2
 8009708:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800970c:	bf00      	nop
 800970e:	370c      	adds	r7, #12
 8009710:	46bd      	mov	sp, r7
 8009712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009716:	4770      	bx	lr
 8009718:	58000800 	.word	0x58000800

0800971c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009724:	4b05      	ldr	r3, [pc, #20]	@ (800973c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009726:	6a1a      	ldr	r2, [r3, #32]
 8009728:	4904      	ldr	r1, [pc, #16]	@ (800973c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4313      	orrs	r3, r2
 800972e:	620b      	str	r3, [r1, #32]
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	58000800 	.word	0x58000800

08009740 <LL_AHB3_GRP1_EnableClock>:
{
 8009740:	b480      	push	{r7}
 8009742:	b085      	sub	sp, #20
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009748:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800974c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800974e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4313      	orrs	r3, r2
 8009756:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009758:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800975c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	4013      	ands	r3, r2
 8009762:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009764:	68fb      	ldr	r3, [r7, #12]
}
 8009766:	bf00      	nop
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr

08009772 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8009772:	b480      	push	{r7}
 8009774:	b085      	sub	sp, #20
 8009776:	af00      	add	r7, sp, #0
 8009778:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800977a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800977e:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009782:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4313      	orrs	r3, r2
 800978a:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800978e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009792:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4013      	ands	r3, r2
 800979a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800979c:	68fb      	ldr	r3, [r7, #12]
}
 800979e:	bf00      	nop
 80097a0:	3714      	adds	r7, #20
 80097a2:	46bd      	mov	sp, r7
 80097a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a8:	4770      	bx	lr

080097aa <LL_C1_IPCC_EnableIT_TXF>:
{
 80097aa:	b480      	push	{r7}
 80097ac:	b083      	sub	sp, #12
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	601a      	str	r2, [r3, #0]
}
 80097be:	bf00      	nop
 80097c0:	370c      	adds	r7, #12
 80097c2:	46bd      	mov	sp, r7
 80097c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c8:	4770      	bx	lr

080097ca <LL_C1_IPCC_EnableIT_RXO>:
{
 80097ca:	b480      	push	{r7}
 80097cc:	b083      	sub	sp, #12
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f043 0201 	orr.w	r2, r3, #1
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
 80097e0:	370c      	adds	r7, #12
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <LL_C1_IPCC_EnableTransmitChannel>:
{
 80097ea:	b480      	push	{r7}
 80097ec:	b083      	sub	sp, #12
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
 80097f2:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	685a      	ldr	r2, [r3, #4]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	041b      	lsls	r3, r3, #16
 80097fc:	43db      	mvns	r3, r3
 80097fe:	401a      	ands	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	605a      	str	r2, [r3, #4]
}
 8009804:	bf00      	nop
 8009806:	370c      	adds	r7, #12
 8009808:	46bd      	mov	sp, r7
 800980a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980e:	4770      	bx	lr

08009810 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	685a      	ldr	r2, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	041b      	lsls	r3, r3, #16
 8009822:	431a      	orrs	r2, r3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	605a      	str	r2, [r3, #4]
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	685a      	ldr	r2, [r3, #4]
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	43db      	mvns	r3, r3
 8009846:	401a      	ands	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	605a      	str	r2, [r3, #4]
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <LL_C1_IPCC_DisableReceiveChannel>:
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	685a      	ldr	r2, [r3, #4]
 8009866:	683b      	ldr	r3, [r7, #0]
 8009868:	431a      	orrs	r2, r3
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	605a      	str	r2, [r3, #4]
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <LL_C1_IPCC_ClearFlag_CHx>:
{
 800987a:	b480      	push	{r7}
 800987c:	b083      	sub	sp, #12
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	683a      	ldr	r2, [r7, #0]
 8009888:	609a      	str	r2, [r3, #8]
}
 800988a:	bf00      	nop
 800988c:	370c      	adds	r7, #12
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <LL_C1_IPCC_SetFlag_CHx>:
{
 8009896:	b480      	push	{r7}
 8009898:	b083      	sub	sp, #12
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	041a      	lsls	r2, r3, #16
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	609a      	str	r2, [r3, #8]
}
 80098a8:	bf00      	nop
 80098aa:	370c      	adds	r7, #12
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 80098b4:	b480      	push	{r7}
 80098b6:	b083      	sub	sp, #12
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68da      	ldr	r2, [r3, #12]
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	4013      	ands	r3, r2
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d101      	bne.n	80098d0 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	370c      	adds	r7, #12
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr

080098de <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80098de:	b480      	push	{r7}
 80098e0:	b083      	sub	sp, #12
 80098e2:	af00      	add	r7, sp, #0
 80098e4:	6078      	str	r0, [r7, #4]
 80098e6:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	69da      	ldr	r2, [r3, #28]
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	4013      	ands	r3, r2
 80098f0:	683a      	ldr	r2, [r7, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d101      	bne.n	80098fa <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80098f6:	2301      	movs	r3, #1
 80098f8:	e000      	b.n	80098fc <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80098fa:	2300      	movs	r3, #0
}
 80098fc:	4618      	mov	r0, r3
 80098fe:	370c      	adds	r7, #12
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800990c:	2102      	movs	r1, #2
 800990e:	4828      	ldr	r0, [pc, #160]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 8009910:	f7ff ffe5 	bl	80098de <LL_C2_IPCC_IsActiveFlag_CHx>
 8009914:	4603      	mov	r3, r0
 8009916:	2b00      	cmp	r3, #0
 8009918:	d008      	beq.n	800992c <HW_IPCC_Rx_Handler+0x24>
 800991a:	4b25      	ldr	r3, [pc, #148]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f003 0302 	and.w	r3, r3, #2
 8009922:	2b00      	cmp	r3, #0
 8009924:	d102      	bne.n	800992c <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 8009926:	f000 f8f1 	bl	8009b0c <HW_IPCC_SYS_EvtHandler>
 800992a:	e03e      	b.n	80099aa <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800992c:	2104      	movs	r1, #4
 800992e:	4820      	ldr	r0, [pc, #128]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 8009930:	f7ff ffd5 	bl	80098de <LL_C2_IPCC_IsActiveFlag_CHx>
 8009934:	4603      	mov	r3, r0
 8009936:	2b00      	cmp	r3, #0
 8009938:	d008      	beq.n	800994c <HW_IPCC_Rx_Handler+0x44>
 800993a:	4b1d      	ldr	r3, [pc, #116]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d102      	bne.n	800994c <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 8009946:	f000 f923 	bl	8009b90 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800994a:	e02e      	b.n	80099aa <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800994c:	2110      	movs	r1, #16
 800994e:	4818      	ldr	r0, [pc, #96]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 8009950:	f7ff ffc5 	bl	80098de <LL_C2_IPCC_IsActiveFlag_CHx>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d008      	beq.n	800996c <HW_IPCC_Rx_Handler+0x64>
 800995a:	4b15      	ldr	r3, [pc, #84]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f003 0310 	and.w	r3, r3, #16
 8009962:	2b00      	cmp	r3, #0
 8009964:	d102      	bne.n	800996c <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 8009966:	f000 f91f 	bl	8009ba8 <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800996a:	e01e      	b.n	80099aa <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800996c:	2101      	movs	r1, #1
 800996e:	4810      	ldr	r0, [pc, #64]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 8009970:	f7ff ffb5 	bl	80098de <LL_C2_IPCC_IsActiveFlag_CHx>
 8009974:	4603      	mov	r3, r0
 8009976:	2b00      	cmp	r3, #0
 8009978:	d008      	beq.n	800998c <HW_IPCC_Rx_Handler+0x84>
 800997a:	4b0d      	ldr	r3, [pc, #52]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	f003 0301 	and.w	r3, r3, #1
 8009982:	2b00      	cmp	r3, #0
 8009984:	d102      	bne.n	800998c <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 8009986:	f000 f885 	bl	8009a94 <HW_IPCC_BLE_EvtHandler>
 800998a:	e00e      	b.n	80099aa <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800998c:	2108      	movs	r1, #8
 800998e:	4808      	ldr	r0, [pc, #32]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 8009990:	f7ff ffa5 	bl	80098de <LL_C2_IPCC_IsActiveFlag_CHx>
 8009994:	4603      	mov	r3, r0
 8009996:	2b00      	cmp	r3, #0
 8009998:	d008      	beq.n	80099ac <HW_IPCC_Rx_Handler+0xa4>
 800999a:	4b05      	ldr	r3, [pc, #20]	@ (80099b0 <HW_IPCC_Rx_Handler+0xa8>)
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	f003 0308 	and.w	r3, r3, #8
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d102      	bne.n	80099ac <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 80099a6:	f000 f959 	bl	8009c5c <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
}
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	58000c00 	.word	0x58000c00

080099b4 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 80099b8:	2102      	movs	r1, #2
 80099ba:	4820      	ldr	r0, [pc, #128]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 80099bc:	f7ff ff7a 	bl	80098b4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80099c0:	4603      	mov	r3, r0
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d107      	bne.n	80099d6 <HW_IPCC_Tx_Handler+0x22>
 80099c6:	4b1d      	ldr	r3, [pc, #116]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 80099d2:	f000 f88f 	bl	8009af4 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 80099d6:	2104      	movs	r1, #4
 80099d8:	4818      	ldr	r0, [pc, #96]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 80099da:	f7ff ff6b 	bl	80098b4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80099de:	4603      	mov	r3, r0
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d108      	bne.n	80099f6 <HW_IPCC_Tx_Handler+0x42>
 80099e4:	4b15      	ldr	r3, [pc, #84]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d102      	bne.n	80099f6 <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 80099f0:	f000 f8c2 	bl	8009b78 <HW_IPCC_ZIGBEE_CmdEvtHandler>
 80099f4:	e01e      	b.n	8009a34 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 80099f6:	2108      	movs	r1, #8
 80099f8:	4810      	ldr	r0, [pc, #64]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 80099fa:	f7ff ff5b 	bl	80098b4 <LL_C1_IPCC_IsActiveFlag_CHx>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d108      	bne.n	8009a16 <HW_IPCC_Tx_Handler+0x62>
 8009a04:	4b0d      	ldr	r3, [pc, #52]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d102      	bne.n	8009a16 <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 8009a10:	f000 f906 	bl	8009c20 <HW_IPCC_MM_FreeBufHandler>
 8009a14:	e00e      	b.n	8009a34 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8009a16:	2120      	movs	r1, #32
 8009a18:	4808      	ldr	r0, [pc, #32]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 8009a1a:	f7ff ff4b 	bl	80098b4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d108      	bne.n	8009a36 <HW_IPCC_Tx_Handler+0x82>
 8009a24:	4b05      	ldr	r3, [pc, #20]	@ (8009a3c <HW_IPCC_Tx_Handler+0x88>)
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d102      	bne.n	8009a36 <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 8009a30:	f000 f83c 	bl	8009aac <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop
}
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	58000c00 	.word	0x58000c00

08009a40 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 8009a44:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009a48:	f7ff fe93 	bl	8009772 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8009a4c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009a50:	f7ff fe64 	bl	800971c <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 8009a54:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009a58:	f7ff fe4c 	bl	80096f4 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8009a5c:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8009a5e:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8009a60:	f7ff fe38 	bl	80096d4 <LL_PWR_EnableBootC2>

  return;
 8009a64:	bf00      	nop
}
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8009a6c:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8009a70:	f7ff fe66 	bl	8009740 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 8009a74:	4806      	ldr	r0, [pc, #24]	@ (8009a90 <HW_IPCC_Init+0x28>)
 8009a76:	f7ff fea8 	bl	80097ca <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 8009a7a:	4805      	ldr	r0, [pc, #20]	@ (8009a90 <HW_IPCC_Init+0x28>)
 8009a7c:	f7ff fe95 	bl	80097aa <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8009a80:	202c      	movs	r0, #44	@ 0x2c
 8009a82:	f002 fba4 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009a86:	202d      	movs	r0, #45	@ 0x2d
 8009a88:	f002 fba1 	bl	800c1ce <HAL_NVIC_EnableIRQ>

  return;
 8009a8c:	bf00      	nop
}
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	58000c00 	.word	0x58000c00

08009a94 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8009a98:	f008 fd7c 	bl	8012594 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8009a9c:	2101      	movs	r1, #1
 8009a9e:	4802      	ldr	r0, [pc, #8]	@ (8009aa8 <HW_IPCC_BLE_EvtHandler+0x14>)
 8009aa0:	f7ff feeb 	bl	800987a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009aa4:	bf00      	nop
}
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	58000c00 	.word	0x58000c00

08009aac <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8009ab0:	2120      	movs	r1, #32
 8009ab2:	4803      	ldr	r0, [pc, #12]	@ (8009ac0 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8009ab4:	f7ff feac 	bl	8009810 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8009ab8:	f008 fd9c 	bl	80125f4 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8009abc:	bf00      	nop
}
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	58000c00 	.word	0x58000c00

08009ac4 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009ac8:	2102      	movs	r1, #2
 8009aca:	4802      	ldr	r0, [pc, #8]	@ (8009ad4 <HW_IPCC_SYS_Init+0x10>)
 8009acc:	f7ff feb2 	bl	8009834 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009ad0:	bf00      	nop
}
 8009ad2:	bd80      	pop	{r7, pc}
 8009ad4:	58000c00 	.word	0x58000c00

08009ad8 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009adc:	2102      	movs	r1, #2
 8009ade:	4804      	ldr	r0, [pc, #16]	@ (8009af0 <HW_IPCC_SYS_SendCmd+0x18>)
 8009ae0:	f7ff fed9 	bl	8009896 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	4802      	ldr	r0, [pc, #8]	@ (8009af0 <HW_IPCC_SYS_SendCmd+0x18>)
 8009ae8:	f7ff fe7f 	bl	80097ea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009aec:	bf00      	nop
}
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	58000c00 	.word	0x58000c00

08009af4 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8009af8:	2102      	movs	r1, #2
 8009afa:	4803      	ldr	r0, [pc, #12]	@ (8009b08 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8009afc:	f7ff fe88 	bl	8009810 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8009b00:	f008 fdc8 	bl	8012694 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8009b04:	bf00      	nop
}
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	58000c00 	.word	0x58000c00

08009b0c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8009b10:	f008 fdd6 	bl	80126c0 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8009b14:	2102      	movs	r1, #2
 8009b16:	4802      	ldr	r0, [pc, #8]	@ (8009b20 <HW_IPCC_SYS_EvtHandler+0x14>)
 8009b18:	f7ff feaf 	bl	800987a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009b1c:	bf00      	nop
}
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	58000c00 	.word	0x58000c00

08009b24 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009b28:	2104      	movs	r1, #4
 8009b2a:	4804      	ldr	r0, [pc, #16]	@ (8009b3c <HW_IPCC_ZIGBEE_Init+0x18>)
 8009b2c:	f7ff fe82 	bl	8009834 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009b30:	2110      	movs	r1, #16
 8009b32:	4802      	ldr	r0, [pc, #8]	@ (8009b3c <HW_IPCC_ZIGBEE_Init+0x18>)
 8009b34:	f7ff fe7e 	bl	8009834 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009b38:	bf00      	nop
}
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	58000c00 	.word	0x58000c00

08009b40 <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8009b44:	2104      	movs	r1, #4
 8009b46:	4804      	ldr	r0, [pc, #16]	@ (8009b58 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8009b48:	f7ff fea5 	bl	8009896 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	4802      	ldr	r0, [pc, #8]	@ (8009b58 <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 8009b50:	f7ff fe4b 	bl	80097ea <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8009b54:	bf00      	nop
}
 8009b56:	bd80      	pop	{r7, pc}
 8009b58:	58000c00 	.word	0x58000c00

08009b5c <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009b60:	2104      	movs	r1, #4
 8009b62:	4804      	ldr	r0, [pc, #16]	@ (8009b74 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8009b64:	f7ff fe89 	bl	800987a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009b68:	2104      	movs	r1, #4
 8009b6a:	4802      	ldr	r0, [pc, #8]	@ (8009b74 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 8009b6c:	f7ff fe62 	bl	8009834 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009b70:	bf00      	nop
}
 8009b72:	bd80      	pop	{r7, pc}
 8009b74:	58000c00 	.word	0x58000c00

08009b78 <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 8009b7c:	2104      	movs	r1, #4
 8009b7e:	4803      	ldr	r0, [pc, #12]	@ (8009b8c <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 8009b80:	f7ff fe46 	bl	8009810 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 8009b84:	f008 fde8 	bl	8012758 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 8009b88:	bf00      	nop
}
 8009b8a:	bd80      	pop	{r7, pc}
 8009b8c:	58000c00 	.word	0x58000c00

08009b90 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 8009b94:	2104      	movs	r1, #4
 8009b96:	4803      	ldr	r0, [pc, #12]	@ (8009ba4 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 8009b98:	f7ff fe5e 	bl	8009858 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 8009b9c:	f008 fde8 	bl	8012770 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 8009ba0:	bf00      	nop
}
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	58000c00 	.word	0x58000c00

08009ba8 <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009bac:	2110      	movs	r1, #16
 8009bae:	4803      	ldr	r0, [pc, #12]	@ (8009bbc <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 8009bb0:	f7ff fe52 	bl	8009858 <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 8009bb4:	f008 fdf6 	bl	80127a4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 8009bb8:	bf00      	nop
}
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	58000c00 	.word	0x58000c00

08009bc0 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009bc4:	2110      	movs	r1, #16
 8009bc6:	4804      	ldr	r0, [pc, #16]	@ (8009bd8 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8009bc8:	f7ff fe57 	bl	800987a <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 8009bcc:	2110      	movs	r1, #16
 8009bce:	4802      	ldr	r0, [pc, #8]	@ (8009bd8 <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 8009bd0:	f7ff fe30 	bl	8009834 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009bd4:	bf00      	nop
}
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	58000c00 	.word	0x58000c00

08009bdc <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8009be4:	2108      	movs	r1, #8
 8009be6:	480c      	ldr	r0, [pc, #48]	@ (8009c18 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009be8:	f7ff fe64 	bl	80098b4 <LL_C1_IPCC_IsActiveFlag_CHx>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d007      	beq.n	8009c02 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8009bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8009c1c <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009bf8:	2108      	movs	r1, #8
 8009bfa:	4807      	ldr	r0, [pc, #28]	@ (8009c18 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009bfc:	f7ff fdf5 	bl	80097ea <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8009c00:	e006      	b.n	8009c10 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009c06:	2108      	movs	r1, #8
 8009c08:	4803      	ldr	r0, [pc, #12]	@ (8009c18 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009c0a:	f7ff fe44 	bl	8009896 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8009c0e:	bf00      	nop
}
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	58000c00 	.word	0x58000c00
 8009c1c:	20000488 	.word	0x20000488

08009c20 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009c24:	2108      	movs	r1, #8
 8009c26:	4806      	ldr	r0, [pc, #24]	@ (8009c40 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009c28:	f7ff fdf2 	bl	8009810 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8009c2c:	4b05      	ldr	r3, [pc, #20]	@ (8009c44 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8009c32:	2108      	movs	r1, #8
 8009c34:	4802      	ldr	r0, [pc, #8]	@ (8009c40 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8009c36:	f7ff fe2e 	bl	8009896 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8009c3a:	bf00      	nop
}
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	58000c00 	.word	0x58000c00
 8009c44:	20000488 	.word	0x20000488

08009c48 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009c4c:	2108      	movs	r1, #8
 8009c4e:	4802      	ldr	r0, [pc, #8]	@ (8009c58 <HW_IPCC_TRACES_Init+0x10>)
 8009c50:	f7ff fdf0 	bl	8009834 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8009c54:	bf00      	nop
}
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	58000c00 	.word	0x58000c00

08009c5c <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8009c60:	f008 fe40 	bl	80128e4 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8009c64:	2108      	movs	r1, #8
 8009c66:	4802      	ldr	r0, [pc, #8]	@ (8009c70 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8009c68:	f7ff fe07 	bl	800987a <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8009c6c:	bf00      	nop
}
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	58000c00 	.word	0x58000c00

08009c74 <SSD1315_RegisterBusIO>:
  * @param  pObj Component object pointer.
  * @param  pIO  Component IO structure pointer.
  * @retval Component status.
  */
int32_t SSD1315_RegisterBusIO(SSD1315_Object_t *pObj, SSD1315_IO_t *pIO)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
 8009c7c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d103      	bne.n	8009c8c <SSD1315_RegisterBusIO+0x18>
  {
    ret = SSD1315_ERROR;
 8009c84:	f04f 33ff 	mov.w	r3, #4294967295
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e01c      	b.n	8009cc6 <SSD1315_RegisterBusIO+0x52>
  }
  else
  {
    pObj->IO.Init           = pIO->Init;
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	681a      	ldr	r2, [r3, #0]
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit         = pIO->DeInit;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	685a      	ldr	r2, [r3, #4]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	605a      	str	r2, [r3, #4]
    pObj->IO.WriteReg       = pIO->WriteReg;
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	689a      	ldr	r2, [r3, #8]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	609a      	str	r2, [r3, #8]
    pObj->IO.ReadReg        = pIO->ReadReg;
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	68da      	ldr	r2, [r3, #12]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	60da      	str	r2, [r3, #12]
    pObj->IO.GetTick        = pIO->GetTick;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	691a      	ldr	r2, [r3, #16]
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	611a      	str	r2, [r3, #16]

    pObj->Ctx.ReadReg       = SSD1315_ReadRegWrap;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8009ce8 <SSD1315_RegisterBusIO+0x74>)
 8009cb8:	619a      	str	r2, [r3, #24]
    pObj->Ctx.WriteReg      = SSD1315_WriteRegWrap;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a0b      	ldr	r2, [pc, #44]	@ (8009cec <SSD1315_RegisterBusIO+0x78>)
 8009cbe:	615a      	str	r2, [r3, #20]
    pObj->Ctx.handle    = pObj;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	61da      	str	r2, [r3, #28]
  }

  if (pObj->IO.Init != NULL)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d004      	beq.n	8009cd8 <SSD1315_RegisterBusIO+0x64>
  {
      ret = pObj->IO.Init();
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4798      	blx	r3
 8009cd4:	60f8      	str	r0, [r7, #12]
 8009cd6:	e002      	b.n	8009cde <SSD1315_RegisterBusIO+0x6a>
  }
  else
  {
     ret = SSD1315_ERROR;
 8009cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009cdc:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009cde:	68fb      	ldr	r3, [r7, #12]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	0800ab79 	.word	0x0800ab79
 8009cec:	0800aba7 	.word	0x0800aba7

08009cf0 <SSD1315_Init>:
  * @param  ColorCoding RGB mode.
  * @param  Orientation Display orientation.
  * @retval Component status.
  */
int32_t SSD1315_Init(SSD1315_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b086      	sub	sp, #24
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	617b      	str	r3, [r7, #20]
  uint8_t data;

  if((pObj == NULL) || (Orientation > SSD1315_ORIENTATION_LANDSCAPE))
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d002      	beq.n	8009d0c <SSD1315_Init+0x1c>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d003      	beq.n	8009d14 <SSD1315_Init+0x24>
  {
    ret = SSD1315_ERROR;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d10:	617b      	str	r3, [r7, #20]
 8009d12:	e0ab      	b.n	8009e6c <SSD1315_Init+0x17c>
  }
  else
  {
    if (pObj->IsInitialized == 0)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f040 80a3 	bne.w	8009e66 <SSD1315_Init+0x176>
    {
      pObj->IsInitialized = 1;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 2020 	strb.w	r2, [r3, #32]
	  pObj->Orientation = Orientation;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	625a      	str	r2, [r3, #36]	@ 0x24
      (void)SSD1315_IO_Delay(pObj, 100);
 8009d2e:	2164      	movs	r1, #100	@ 0x64
 8009d30:	68f8      	ldr	r0, [r7, #12]
 8009d32:	f000 ff6b 	bl	800ac0c <SSD1315_IO_Delay>
      /* Driving ability setting */
      data = SSD1315_READWRITE_CMD;
 8009d36:	2380      	movs	r3, #128	@ 0x80
 8009d38:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f103 0014 	add.w	r0, r3, #20
 8009d40:	f107 0213 	add.w	r2, r7, #19
 8009d44:	2301      	movs	r3, #1
 8009d46:	2101      	movs	r1, #1
 8009d48:	f000 ff7a 	bl	800ac40 <ssd1315_write_reg>
 8009d4c:	4602      	mov	r2, r0
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	4413      	add	r3, r2
 8009d52:	617b      	str	r3, [r7, #20]
      data = SSD1315_CHARGE_PUMP_SETTING;
 8009d54:	238d      	movs	r3, #141	@ 0x8d
 8009d56:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	f103 0014 	add.w	r0, r3, #20
 8009d5e:	f107 0213 	add.w	r2, r7, #19
 8009d62:	2301      	movs	r3, #1
 8009d64:	2101      	movs	r1, #1
 8009d66:	f000 ff6b 	bl	800ac40 <ssd1315_write_reg>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	4413      	add	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]
      data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 8009d72:	2314      	movs	r3, #20
 8009d74:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	f103 0014 	add.w	r0, r3, #20
 8009d7c:	f107 0213 	add.w	r2, r7, #19
 8009d80:	2301      	movs	r3, #1
 8009d82:	2101      	movs	r1, #1
 8009d84:	f000 ff5c 	bl	800ac40 <ssd1315_write_reg>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	4413      	add	r3, r2
 8009d8e:	617b      	str	r3, [r7, #20]
      data = SSD1315_MEMORY_ADRESS_MODE;
 8009d90:	2320      	movs	r3, #32
 8009d92:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f103 0014 	add.w	r0, r3, #20
 8009d9a:	f107 0213 	add.w	r2, r7, #19
 8009d9e:	2301      	movs	r3, #1
 8009da0:	2101      	movs	r1, #1
 8009da2:	f000 ff4d 	bl	800ac40 <ssd1315_write_reg>
 8009da6:	4602      	mov	r2, r0
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	4413      	add	r3, r2
 8009dac:	617b      	str	r3, [r7, #20]
      data = SSD1315_LOWER_COLUMN_START_ADRESS;
 8009dae:	2300      	movs	r3, #0
 8009db0:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f103 0014 	add.w	r0, r3, #20
 8009db8:	f107 0213 	add.w	r2, r7, #19
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	2101      	movs	r1, #1
 8009dc0:	f000 ff3e 	bl	800ac40 <ssd1315_write_reg>
 8009dc4:	4602      	mov	r2, r0
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	4413      	add	r3, r2
 8009dca:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_START_LINE_1;
 8009dcc:	2340      	movs	r3, #64	@ 0x40
 8009dce:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f103 0014 	add.w	r0, r3, #20
 8009dd6:	f107 0213 	add.w	r2, r7, #19
 8009dda:	2301      	movs	r3, #1
 8009ddc:	2101      	movs	r1, #1
 8009dde:	f000 ff2f 	bl	800ac40 <ssd1315_write_reg>
 8009de2:	4602      	mov	r2, r0
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	4413      	add	r3, r2
 8009de8:	617b      	str	r3, [r7, #20]
      data = SSD1315_REMAPPED_MODE;
 8009dea:	23c8      	movs	r3, #200	@ 0xc8
 8009dec:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	f103 0014 	add.w	r0, r3, #20
 8009df4:	f107 0213 	add.w	r2, r7, #19
 8009df8:	2301      	movs	r3, #1
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	f000 ff20 	bl	800ac40 <ssd1315_write_reg>
 8009e00:	4602      	mov	r2, r0
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	4413      	add	r3, r2
 8009e06:	617b      	str	r3, [r7, #20]
      data = SSD1315_CONTRAST_CONTROL;
 8009e08:	23a1      	movs	r3, #161	@ 0xa1
 8009e0a:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f103 0014 	add.w	r0, r3, #20
 8009e12:	f107 0213 	add.w	r2, r7, #19
 8009e16:	2301      	movs	r3, #1
 8009e18:	2101      	movs	r1, #1
 8009e1a:	f000 ff11 	bl	800ac40 <ssd1315_write_reg>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	4413      	add	r3, r2
 8009e24:	617b      	str	r3, [r7, #20]
      data = SSD1315_DISPLAY_ON;
 8009e26:	23af      	movs	r3, #175	@ 0xaf
 8009e28:	74fb      	strb	r3, [r7, #19]
      ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f103 0014 	add.w	r0, r3, #20
 8009e30:	f107 0213 	add.w	r2, r7, #19
 8009e34:	2301      	movs	r3, #1
 8009e36:	2101      	movs	r1, #1
 8009e38:	f000 ff02 	bl	800ac40 <ssd1315_write_reg>
 8009e3c:	4602      	mov	r2, r0
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	4413      	add	r3, r2
 8009e42:	617b      	str	r3, [r7, #20]
      ssd1315_Clear(SSD1315_COLOR_BLACK); 
 8009e44:	2000      	movs	r0, #0
 8009e46:	f000 fec5 	bl	800abd4 <ssd1315_Clear>
      ret += ssd1315_write_reg(&pObj->Ctx, 1, PhysFrameBuffer,  SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	f103 0014 	add.w	r0, r3, #20
 8009e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009e54:	4a0b      	ldr	r2, [pc, #44]	@ (8009e84 <SSD1315_Init+0x194>)
 8009e56:	2101      	movs	r1, #1
 8009e58:	f000 fef2 	bl	800ac40 <ssd1315_write_reg>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	4413      	add	r3, r2
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e002      	b.n	8009e6c <SSD1315_Init+0x17c>
    }
    else
    {
      ret = SSD1315_ERROR;
 8009e66:	f04f 33ff 	mov.w	r3, #4294967295
 8009e6a:	617b      	str	r3, [r7, #20]
    }
  }
  if(ret != SSD1315_OK)
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d002      	beq.n	8009e78 <SSD1315_Init+0x188>
  {
    ret = SSD1315_ERROR;
 8009e72:	f04f 33ff 	mov.w	r3, #4294967295
 8009e76:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8009e78:	697b      	ldr	r3, [r7, #20]
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3718      	adds	r7, #24
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bd80      	pop	{r7, pc}
 8009e82:	bf00      	nop
 8009e84:	20000490 	.word	0x20000490

08009e88 <SSD1315_DeInit>:
  * @brief  De-Initialize the ssd1315 LCD Component.
  * @param  pObj Component object.
  * @retval Component status.
  */
int32_t SSD1315_DeInit(SSD1315_Object_t *pObj)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009e90:	2300      	movs	r3, #0
 8009e92:	60fb      	str	r3, [r7, #12]

  if(pObj->IsInitialized != 0U)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00a      	beq.n	8009eb4 <SSD1315_DeInit+0x2c>
  {
    ret += SSD1315_DisplayOff(pObj);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 f85e 	bl	8009f60 <SSD1315_DisplayOff>
 8009ea4:	4602      	mov	r2, r0
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	4413      	add	r3, r2
 8009eaa:	60fb      	str	r3, [r7, #12]

    pObj->IsInitialized = 0;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	f883 2020 	strb.w	r2, [r3, #32]
  }

  if(ret != SSD1315_OK)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d002      	beq.n	8009ec0 <SSD1315_DeInit+0x38>
  {
    ret = SSD1315_ERROR;
 8009eba:	f04f 33ff 	mov.w	r3, #4294967295
 8009ebe:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <SSD1315_ReadID>:
  * @param  pObj Component object.
  * @param  Id Component ID.
  * @retval The component status.
  */
int32_t SSD1315_ReadID(SSD1315_Object_t *pObj, uint32_t *Id)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b083      	sub	sp, #12
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	6078      	str	r0, [r7, #4]
 8009ed2:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Id;
  return SSD1315_ERROR;
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <SSD1315_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOn(SSD1315_Object_t *pObj)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b084      	sub	sp, #16
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  data = SSD1315_CHARGE_PUMP_SETTING;
 8009ef0:	238d      	movs	r3, #141	@ 0x8d
 8009ef2:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f103 0014 	add.w	r0, r3, #20
 8009efa:	f107 020b 	add.w	r2, r7, #11
 8009efe:	2301      	movs	r3, #1
 8009f00:	2101      	movs	r1, #1
 8009f02:	f000 fe9d 	bl	800ac40 <ssd1315_write_reg>
 8009f06:	4602      	mov	r2, r0
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_5;
 8009f0e:	2314      	movs	r3, #20
 8009f10:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f103 0014 	add.w	r0, r3, #20
 8009f18:	f107 020b 	add.w	r2, r7, #11
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	2101      	movs	r1, #1
 8009f20:	f000 fe8e 	bl	800ac40 <ssd1315_write_reg>
 8009f24:	4602      	mov	r2, r0
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	4413      	add	r3, r2
 8009f2a:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_ON;
 8009f2c:	23af      	movs	r3, #175	@ 0xaf
 8009f2e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f103 0014 	add.w	r0, r3, #20
 8009f36:	f107 020b 	add.w	r2, r7, #11
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	f000 fe7f 	bl	800ac40 <ssd1315_write_reg>
 8009f42:	4602      	mov	r2, r0
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4413      	add	r3, r2
 8009f48:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d002      	beq.n	8009f56 <SSD1315_DisplayOn+0x72>
  {
    ret = SSD1315_ERROR;
 8009f50:	f04f 33ff 	mov.w	r3, #4294967295
 8009f54:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009f56:	68fb      	ldr	r3, [r7, #12]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SSD1315_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_DisplayOff(SSD1315_Object_t *pObj)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  
  data = SSD1315_CHARGE_PUMP_SETTING;
 8009f6c:	238d      	movs	r3, #141	@ 0x8d
 8009f6e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f103 0014 	add.w	r0, r3, #20
 8009f76:	f107 020b 	add.w	r2, r7, #11
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	2101      	movs	r1, #1
 8009f7e:	f000 fe5f 	bl	800ac40 <ssd1315_write_reg>
 8009f82:	4602      	mov	r2, r0
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	60fb      	str	r3, [r7, #12]
  data = SSD1315_HIGHER_COLUMN_START_ADRESS_1;
 8009f8a:	2310      	movs	r3, #16
 8009f8c:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f103 0014 	add.w	r0, r3, #20
 8009f94:	f107 020b 	add.w	r2, r7, #11
 8009f98:	2301      	movs	r3, #1
 8009f9a:	2101      	movs	r1, #1
 8009f9c:	f000 fe50 	bl	800ac40 <ssd1315_write_reg>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	4413      	add	r3, r2
 8009fa6:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_OFF;
 8009fa8:	23ae      	movs	r3, #174	@ 0xae
 8009faa:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f103 0014 	add.w	r0, r3, #20
 8009fb2:	f107 020b 	add.w	r2, r7, #11
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	2101      	movs	r1, #1
 8009fba:	f000 fe41 	bl	800ac40 <ssd1315_write_reg>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  
  if (ret != SSD1315_OK)
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d002      	beq.n	8009fd2 <SSD1315_DisplayOff+0x72>
  {
    ret = SSD1315_ERROR;
 8009fcc:	f04f 33ff 	mov.w	r3, #4294967295
 8009fd0:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3710      	adds	r7, #16
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <SSD1315_SetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be set.
  * @retval Component status.
  */
int32_t SSD1315_SetBrightness(SSD1315_Object_t *pObj, uint32_t Brightness)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 8009fe6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	370c      	adds	r7, #12
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff4:	4770      	bx	lr

08009ff6 <SSD1315_GetBrightness>:
  * @param  pObj Component object.
  * @param  Brightness display brightness to be returned.
  * @retval Component status.
  */
int32_t SSD1315_GetBrightness(SSD1315_Object_t *pObj, uint32_t *Brightness)
{
 8009ff6:	b480      	push	{r7}
 8009ff8:	b083      	sub	sp, #12
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
 8009ffe:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Brightness;
  return SSD1315_ERROR;
 800a000:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a004:	4618      	mov	r0, r3
 800a006:	370c      	adds	r7, #12
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <SSD1315_SetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_SetOrientation(SSD1315_Object_t *pObj, uint32_t Orientation)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 800a01a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a01e:	4618      	mov	r0, r3
 800a020:	370c      	adds	r7, #12
 800a022:	46bd      	mov	sp, r7
 800a024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a028:	4770      	bx	lr

0800a02a <SSD1315_GetOrientation>:
  * @param  pObj Component object.
  * @param  Orientation SSD1315_ORIENTATION_LANDSCAPE.
  * @retval The component status.
  */
int32_t SSD1315_GetOrientation(SSD1315_Object_t *pObj, uint32_t *Orientation)
{
 800a02a:	b480      	push	{r7}
 800a02c:	b083      	sub	sp, #12
 800a02e:	af00      	add	r7, sp, #0
 800a030:	6078      	str	r0, [r7, #4]
 800a032:	6039      	str	r1, [r7, #0]
  /* Feature not supported */
  (void)pObj;
  (void)Orientation;
  return SSD1315_ERROR;
 800a034:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a038:	4618      	mov	r0, r3
 800a03a:	370c      	adds	r7, #12
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <SSD1315_SetCursor>:
  * @param  Xpos specifies the X position.
  * @param  Ypos specifies the Y position.
  * @retval The component status.
  */
int32_t SSD1315_SetCursor(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	60f8      	str	r0, [r7, #12]
 800a04c:	60b9      	str	r1, [r7, #8]
 800a04e:	607a      	str	r2, [r7, #4]
 /* Feature not supported */
 (void)pObj;
 (void)Xpos;
 (void)Ypos;
 return SSD1315_ERROR;
 800a050:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a054:	4618      	mov	r0, r3
 800a056:	3714      	adds	r7, #20
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr

0800a060 <SSD1315_Refresh>:
  * @param  pObj Component object.
  * @retval The component status.
  */

int32_t SSD1315_Refresh(SSD1315_Object_t *pObj)
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK; 
 800a068:	2300      	movs	r3, #0
 800a06a:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  data = SSD1315_DISPLAY_START_LINE_1;
 800a06c:	2340      	movs	r3, #64	@ 0x40
 800a06e:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f103 0014 	add.w	r0, r3, #20
 800a076:	f107 020b 	add.w	r2, r7, #11
 800a07a:	2301      	movs	r3, #1
 800a07c:	2101      	movs	r1, #1
 800a07e:	f000 fddf 	bl	800ac40 <ssd1315_write_reg>
 800a082:	4602      	mov	r2, r0
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_COLUMN_ADRESS;
 800a08a:	2321      	movs	r3, #33	@ 0x21
 800a08c:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f103 0014 	add.w	r0, r3, #20
 800a094:	f107 020b 	add.w	r2, r7, #11
 800a098:	2301      	movs	r3, #1
 800a09a:	2101      	movs	r1, #1
 800a09c:	f000 fdd0 	bl	800ac40 <ssd1315_write_reg>
 800a0a0:	4602      	mov	r2, r0
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	4413      	add	r3, r2
 800a0a6:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f103 0014 	add.w	r0, r3, #20
 800a0b2:	f107 020b 	add.w	r2, r7, #11
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	f000 fdc1 	bl	800ac40 <ssd1315_write_reg>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4413      	add	r3, r2
 800a0c4:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_64;
 800a0c6:	237f      	movs	r3, #127	@ 0x7f
 800a0c8:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f103 0014 	add.w	r0, r3, #20
 800a0d0:	f107 020b 	add.w	r2, r7, #11
 800a0d4:	2301      	movs	r3, #1
 800a0d6:	2101      	movs	r1, #1
 800a0d8:	f000 fdb2 	bl	800ac40 <ssd1315_write_reg>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	60fb      	str	r3, [r7, #12]
  data = SSD1315_SET_PAGE_ADRESS;
 800a0e4:	2322      	movs	r3, #34	@ 0x22
 800a0e6:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f103 0014 	add.w	r0, r3, #20
 800a0ee:	f107 020b 	add.w	r2, r7, #11
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	2101      	movs	r1, #1
 800a0f6:	f000 fda3 	bl	800ac40 <ssd1315_write_reg>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	4413      	add	r3, r2
 800a100:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800a102:	2300      	movs	r3, #0
 800a104:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f103 0014 	add.w	r0, r3, #20
 800a10c:	f107 020b 	add.w	r2, r7, #11
 800a110:	2301      	movs	r3, #1
 800a112:	2101      	movs	r1, #1
 800a114:	f000 fd94 	bl	800ac40 <ssd1315_write_reg>
 800a118:	4602      	mov	r2, r0
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	4413      	add	r3, r2
 800a11e:	60fb      	str	r3, [r7, #12]
  data = SSD1315_LOWER_COLUMN_START_ADRESS_15;
 800a120:	230f      	movs	r3, #15
 800a122:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,&data, 1);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f103 0014 	add.w	r0, r3, #20
 800a12a:	f107 020b 	add.w	r2, r7, #11
 800a12e:	2301      	movs	r3, #1
 800a130:	2101      	movs	r1, #1
 800a132:	f000 fd85 	bl	800ac40 <ssd1315_write_reg>
 800a136:	4602      	mov	r2, r0
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4413      	add	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]
  ret += ssd1315_write_reg(&pObj->Ctx, 1,PhysFrameBuffer, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	f103 0014 	add.w	r0, r3, #20
 800a144:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a148:	4a09      	ldr	r2, [pc, #36]	@ (800a170 <SSD1315_Refresh+0x110>)
 800a14a:	2101      	movs	r1, #1
 800a14c:	f000 fd78 	bl	800ac40 <ssd1315_write_reg>
 800a150:	4602      	mov	r2, r0
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	4413      	add	r3, r2
 800a156:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d002      	beq.n	800a164 <SSD1315_Refresh+0x104>
  {
    ret = SSD1315_ERROR;
 800a15e:	f04f 33ff 	mov.w	r3, #4294967295
 800a162:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a164:	68fb      	ldr	r3, [r7, #12]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	20000490 	.word	0x20000490

0800a174 <SSD1315_DrawBitmap>:
  * @param  pBmp Bmp picture address.
  * @retval The component status.
  */

int32_t SSD1315_DrawBitmap(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b08e      	sub	sp, #56	@ 0x38
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a182:	2300      	movs	r3, #0
 800a184:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t index = 0, size = 0;
 800a186:	2300      	movs	r3, #0
 800a188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0;
 800a18e:	2300      	movs	r3, #0
 800a190:	623b      	str	r3, [r7, #32]
 800a192:	2300      	movs	r3, #0
 800a194:	61fb      	str	r3, [r7, #28]
  uint32_t x = 0, y  = 0, y0 = 0;
 800a196:	2300      	movs	r3, #0
 800a198:	61bb      	str	r3, [r7, #24]
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	613b      	str	r3, [r7, #16]
  uint32_t XposBMP = 0, YposBMP  = 0;
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	633b      	str	r3, [r7, #48]	@ 0x30
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap size */
  size = pBmp[2] + (pBmp[3] << 8) + (pBmp[4] << 16)  + (pBmp[5] << 24);
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	3302      	adds	r3, #2
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	3303      	adds	r3, #3
 800a1b6:	781b      	ldrb	r3, [r3, #0]
 800a1b8:	021b      	lsls	r3, r3, #8
 800a1ba:	441a      	add	r2, r3
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	3304      	adds	r3, #4
 800a1c0:	781b      	ldrb	r3, [r3, #0]
 800a1c2:	041b      	lsls	r3, r3, #16
 800a1c4:	441a      	add	r2, r3
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	3305      	adds	r3, #5
 800a1ca:	781b      	ldrb	r3, [r3, #0]
 800a1cc:	061b      	lsls	r3, r3, #24
 800a1ce:	4413      	add	r3, r2
 800a1d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Get bitmap data address offset */
  index = pBmp[10] + (pBmp[11] << 8) + (pBmp[12] << 16)  + (pBmp[13] << 24);
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	330a      	adds	r3, #10
 800a1d6:	781b      	ldrb	r3, [r3, #0]
 800a1d8:	461a      	mov	r2, r3
 800a1da:	683b      	ldr	r3, [r7, #0]
 800a1dc:	330b      	adds	r3, #11
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	021b      	lsls	r3, r3, #8
 800a1e2:	441a      	add	r2, r3
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	330c      	adds	r3, #12
 800a1e8:	781b      	ldrb	r3, [r3, #0]
 800a1ea:	041b      	lsls	r3, r3, #16
 800a1ec:	441a      	add	r2, r3
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	330d      	adds	r3, #13
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	061b      	lsls	r3, r3, #24
 800a1f6:	4413      	add	r3, r2
 800a1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	3312      	adds	r3, #18
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	461a      	mov	r2, r3
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	3313      	adds	r3, #19
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	021b      	lsls	r3, r3, #8
 800a20a:	441a      	add	r2, r3
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	3314      	adds	r3, #20
 800a210:	781b      	ldrb	r3, [r3, #0]
 800a212:	041b      	lsls	r3, r3, #16
 800a214:	441a      	add	r2, r3
 800a216:	683b      	ldr	r3, [r7, #0]
 800a218:	3315      	adds	r3, #21
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	061b      	lsls	r3, r3, #24
 800a21e:	4413      	add	r3, r2
 800a220:	61fb      	str	r3, [r7, #28]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	3316      	adds	r3, #22
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	461a      	mov	r2, r3
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	3317      	adds	r3, #23
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	021b      	lsls	r3, r3, #8
 800a232:	441a      	add	r2, r3
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	3318      	adds	r3, #24
 800a238:	781b      	ldrb	r3, [r3, #0]
 800a23a:	041b      	lsls	r3, r3, #16
 800a23c:	441a      	add	r2, r3
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	3319      	adds	r3, #25
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	061b      	lsls	r3, r3, #24
 800a246:	4413      	add	r3, r2
 800a248:	623b      	str	r3, [r7, #32]

  /* Size conversion */
  size = (size - index)/2;
 800a24a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	085b      	lsrs	r3, r3, #1
 800a252:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Apply offset to bypass header */
  pBmp += index;
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a258:	4413      	add	r3, r2
 800a25a:	603b      	str	r3, [r7, #0]

  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d116      	bne.n	800a290 <SSD1315_DrawBitmap+0x11c>
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	bf0c      	ite	eq
 800a268:	2301      	moveq	r3, #1
 800a26a:	2300      	movne	r3, #0
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a274:	bf0c      	ite	eq
 800a276:	2301      	moveq	r3, #1
 800a278:	2300      	movne	r3, #0
 800a27a:	b2db      	uxtb	r3, r3
 800a27c:	4013      	ands	r3, r2
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <SSD1315_DrawBitmap+0x11c>
  {
    memcpy(PhysFrameBuffer, pBmp, size);
 800a284:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a286:	6839      	ldr	r1, [r7, #0]
 800a288:	4843      	ldr	r0, [pc, #268]	@ (800a398 <SSD1315_DrawBitmap+0x224>)
 800a28a:	f00c ff7a 	bl	8017182 <memcpy>
 800a28e:	e078      	b.n	800a382 <SSD1315_DrawBitmap+0x20e>
  }
  else
  {
    x=Xpos+width;
 800a290:	68ba      	ldr	r2, [r7, #8]
 800a292:	69fb      	ldr	r3, [r7, #28]
 800a294:	4413      	add	r3, r2
 800a296:	61bb      	str	r3, [r7, #24]
    y=Ypos+height;
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	4413      	add	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]
    y0 = Ypos;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	613b      	str	r3, [r7, #16]

    for(; Xpos < x; Xpos++, XposBMP++)
 800a2a4:	e069      	b.n	800a37a <SSD1315_DrawBitmap+0x206>
    {
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	607b      	str	r3, [r7, #4]
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2ae:	e05a      	b.n	800a366 <SSD1315_DrawBitmap+0x1f2>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d121      	bne.n	800a2fe <SSD1315_DrawBitmap+0x18a>
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	1ad3      	subs	r3, r2, r3
 800a2c0:	2b07      	cmp	r3, #7
 800a2c2:	d91c      	bls.n	800a2fe <SSD1315_DrawBitmap+0x18a>
 800a2c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d117      	bne.n	800a2fe <SSD1315_DrawBitmap+0x18a>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pBmp[XposBMP+((YposBMP/8)*width)];
 800a2ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2d0:	08db      	lsrs	r3, r3, #3
 800a2d2:	69fa      	ldr	r2, [r7, #28]
 800a2d4:	fb03 f202 	mul.w	r2, r3, r2
 800a2d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2da:	4413      	add	r3, r2
 800a2dc:	683a      	ldr	r2, [r7, #0]
 800a2de:	441a      	add	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	08db      	lsrs	r3, r3, #3
 800a2e4:	01d9      	lsls	r1, r3, #7
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	440b      	add	r3, r1
 800a2ea:	7811      	ldrb	r1, [r2, #0]
 800a2ec:	4a2a      	ldr	r2, [pc, #168]	@ (800a398 <SSD1315_DrawBitmap+0x224>)
 800a2ee:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	3307      	adds	r3, #7
 800a2f4:	607b      	str	r3, [r7, #4]
          YposBMP+=7;
 800a2f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2f8:	3307      	adds	r3, #7
 800a2fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2fc:	e02d      	b.n	800a35a <SSD1315_DrawBitmap+0x1e6>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pBmp[XposBMP+((YposBMP/8)*width)]&(1<<(YposBMP%8))) != 0)
 800a2fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a300:	08db      	lsrs	r3, r3, #3
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	fb03 f202 	mul.w	r2, r3, r2
 800a308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a30a:	4413      	add	r3, r2
 800a30c:	683a      	ldr	r2, [r7, #0]
 800a30e:	4413      	add	r3, r2
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	461a      	mov	r2, r3
 800a314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	fa42 f303 	asr.w	r3, r2, r3
 800a31e:	f003 0301 	and.w	r3, r3, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00c      	beq.n	800a340 <SSD1315_DrawBitmap+0x1cc>
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 800a326:	23ff      	movs	r3, #255	@ 0xff
 800a328:	687a      	ldr	r2, [r7, #4]
 800a32a:	68b9      	ldr	r1, [r7, #8]
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f000 fa3d 	bl	800a7ac <SSD1315_SetPixel>
 800a332:	4603      	mov	r3, r0
 800a334:	2b00      	cmp	r3, #0
 800a336:	d010      	beq.n	800a35a <SSD1315_DrawBitmap+0x1e6>
              {
                ret = SSD1315_ERROR;
 800a338:	f04f 33ff 	mov.w	r3, #4294967295
 800a33c:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 800a33e:	e016      	b.n	800a36e <SSD1315_DrawBitmap+0x1fa>
              }
            }
            else
            {
              if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 800a340:	2300      	movs	r3, #0
 800a342:	687a      	ldr	r2, [r7, #4]
 800a344:	68b9      	ldr	r1, [r7, #8]
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f000 fa30 	bl	800a7ac <SSD1315_SetPixel>
 800a34c:	4603      	mov	r3, r0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d003      	beq.n	800a35a <SSD1315_DrawBitmap+0x1e6>
                {
                  ret = SSD1315_ERROR;
 800a352:	f04f 33ff 	mov.w	r3, #4294967295
 800a356:	637b      	str	r3, [r7, #52]	@ 0x34
                  break;
 800a358:	e009      	b.n	800a36e <SSD1315_DrawBitmap+0x1fa>
      for(Ypos = y0, YposBMP = 0; Ypos < y; Ypos++, YposBMP++)
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	3301      	adds	r3, #1
 800a35e:	607b      	str	r3, [r7, #4]
 800a360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a362:	3301      	adds	r3, #1
 800a364:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	697b      	ldr	r3, [r7, #20]
 800a36a:	429a      	cmp	r2, r3
 800a36c:	d3a0      	bcc.n	800a2b0 <SSD1315_DrawBitmap+0x13c>
    for(; Xpos < x; Xpos++, XposBMP++)
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	3301      	adds	r3, #1
 800a372:	60bb      	str	r3, [r7, #8]
 800a374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a376:	3301      	adds	r3, #1
 800a378:	633b      	str	r3, [r7, #48]	@ 0x30
 800a37a:	68ba      	ldr	r2, [r7, #8]
 800a37c:	69bb      	ldr	r3, [r7, #24]
 800a37e:	429a      	cmp	r2, r3
 800a380:	d391      	bcc.n	800a2a6 <SSD1315_DrawBitmap+0x132>
            }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 800a382:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a384:	2b00      	cmp	r3, #0
 800a386:	d002      	beq.n	800a38e <SSD1315_DrawBitmap+0x21a>
   {
     ret = SSD1315_ERROR;
 800a388:	f04f 33ff 	mov.w	r3, #4294967295
 800a38c:	637b      	str	r3, [r7, #52]	@ 0x34
   }
  return ret;
 800a38e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a390:	4618      	mov	r0, r3
 800a392:	3738      	adds	r7, #56	@ 0x38
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	20000490 	.word	0x20000490

0800a39c <SSD1315_ShiftBitmap>:
  * @param  Yshift specifies number of pixel to shift on Y position.
  * @param  pbmp Bmp picture address in the internal Flash.
  * @retval The component status.
  */
int32_t SSD1315_ShiftBitmap(SSD1315_Object_t *pObj,uint16_t Xpos, uint16_t Ypos, int16_t Xshift, int16_t Yshift, uint8_t *pbmp)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b090      	sub	sp, #64	@ 0x40
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	4608      	mov	r0, r1
 800a3a6:	4611      	mov	r1, r2
 800a3a8:	461a      	mov	r2, r3
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	817b      	strh	r3, [r7, #10]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	813b      	strh	r3, [r7, #8]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	80fb      	strh	r3, [r7, #6]
  int32_t  ret = SSD1315_OK;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t index = 0, size = 0;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3be:	2300      	movs	r3, #0
 800a3c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t height = 0, width  = 0, original_width  = 0;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	623b      	str	r3, [r7, #32]
  uint32_t x = 0, y  = 0, y0 = 0;
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	61fb      	str	r3, [r7, #28]
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	61bb      	str	r3, [r7, #24]
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	617b      	str	r3, [r7, #20]
  uint32_t XposBMP = 0, YposBMP  = 0, original_YposBMP = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800a3de:	2300      	movs	r3, #0
 800a3e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	613b      	str	r3, [r7, #16]
  
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800a3e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3e8:	3302      	adds	r3, #2
 800a3ea:	881b      	ldrh	r3, [r3, #0]
 800a3ec:	b29b      	uxth	r3, r3
 800a3ee:	627b      	str	r3, [r7, #36]	@ 0x24
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 800a3f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	881b      	ldrh	r3, [r3, #0]
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	041b      	lsls	r3, r3, #16
 800a3fa:	461a      	mov	r2, r3
 800a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3fe:	4313      	orrs	r3, r2
 800a400:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 800a402:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a404:	330a      	adds	r3, #10
 800a406:	881b      	ldrh	r3, [r3, #0]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	62bb      	str	r3, [r7, #40]	@ 0x28
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800a40c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a40e:	330c      	adds	r3, #12
 800a410:	881b      	ldrh	r3, [r3, #0]
 800a412:	b29b      	uxth	r3, r3
 800a414:	041b      	lsls	r3, r3, #16
 800a416:	461a      	mov	r2, r3
 800a418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a41a:	4313      	orrs	r3, r2
 800a41c:	62bb      	str	r3, [r7, #40]	@ 0x28
  
  /* Read bitmap width */
  width = *(uint16_t *) (pbmp + 18);
 800a41e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a420:	3312      	adds	r3, #18
 800a422:	881b      	ldrh	r3, [r3, #0]
 800a424:	637b      	str	r3, [r7, #52]	@ 0x34
  width |= (*(uint16_t *) (pbmp + 20)) << 16;
 800a426:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a428:	3314      	adds	r3, #20
 800a42a:	881b      	ldrh	r3, [r3, #0]
 800a42c:	041b      	lsls	r3, r3, #16
 800a42e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a430:	4313      	orrs	r3, r2
 800a432:	637b      	str	r3, [r7, #52]	@ 0x34
  original_width = width;
 800a434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a436:	623b      	str	r3, [r7, #32]
  if( Xshift>=0)
 800a438:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	db09      	blt.n	800a454 <SSD1315_ShiftBitmap+0xb8>
  {
    Xpos = Xpos + Xshift;
 800a440:	88fa      	ldrh	r2, [r7, #6]
 800a442:	897b      	ldrh	r3, [r7, #10]
 800a444:	4413      	add	r3, r2
 800a446:	817b      	strh	r3, [r7, #10]
    width = width - Xshift;
 800a448:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a44c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	637b      	str	r3, [r7, #52]	@ 0x34
 800a452:	e008      	b.n	800a466 <SSD1315_ShiftBitmap+0xca>
  }
  else
  {
    width = width + Xshift;
 800a454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a458:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a45a:	4413      	add	r3, r2
 800a45c:	637b      	str	r3, [r7, #52]	@ 0x34
    XposBMP = -Xshift;
 800a45e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a462:	425b      	negs	r3, r3
 800a464:	633b      	str	r3, [r7, #48]	@ 0x30
  }
  
  /* Read bitmap height */
  height = *(uint16_t *) (pbmp + 22);
 800a466:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a468:	3316      	adds	r3, #22
 800a46a:	881b      	ldrh	r3, [r3, #0]
 800a46c:	63bb      	str	r3, [r7, #56]	@ 0x38
  height |= (*(uint16_t *) (pbmp + 24)) << 16;
 800a46e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a470:	3318      	adds	r3, #24
 800a472:	881b      	ldrh	r3, [r3, #0]
 800a474:	041b      	lsls	r3, r3, #16
 800a476:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a478:	4313      	orrs	r3, r2
 800a47a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if( Yshift>=0)
 800a47c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a480:	2b00      	cmp	r3, #0
 800a482:	db0a      	blt.n	800a49a <SSD1315_ShiftBitmap+0xfe>
  {
    height = height - Yshift;
 800a484:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a488:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	63bb      	str	r3, [r7, #56]	@ 0x38
    Ypos = Ypos + Yshift;
 800a48e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 800a492:	893b      	ldrh	r3, [r7, #8]
 800a494:	4413      	add	r3, r2
 800a496:	813b      	strh	r3, [r7, #8]
 800a498:	e008      	b.n	800a4ac <SSD1315_ShiftBitmap+0x110>
  }
  else
  {
    height = height + Yshift;
 800a49a:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a49e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4a0:	4413      	add	r3, r2
 800a4a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    YposBMP = -Yshift;
 800a4a4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a4a8:	425b      	negs	r3, r3
 800a4aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  original_YposBMP = YposBMP;
 800a4ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4ae:	613b      	str	r3, [r7, #16]
  
  /* Size conversion */
  size = (size - index)/2;
 800a4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	085b      	lsrs	r3, r3, #1
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
  size = size - ((Xshift*height/8)+(Yshift*width/8 ));
 800a4ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4be:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a4c0:	fb02 f303 	mul.w	r3, r2, r3
 800a4c4:	08da      	lsrs	r2, r3, #3
 800a4c6:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 800a4ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800a4cc:	fb01 f303 	mul.w	r3, r1, r3
 800a4d0:	08db      	lsrs	r3, r3, #3
 800a4d2:	4413      	add	r3, r2
 800a4d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d6:	1ad3      	subs	r3, r2, r3
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
  
  /* Apply offset to bypass header */
  pbmp += index;
 800a4da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a4dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4de:	4413      	add	r3, r2
 800a4e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  
  /* if bitmap cover whole screen */
  if((Xpos == 0) && (Xpos == 0) & (size == (SSD1315_LCD_PIXEL_WIDTH * SSD1315_LCD_PIXEL_HEIGHT/8)))
 800a4e2:	897b      	ldrh	r3, [r7, #10]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d116      	bne.n	800a516 <SSD1315_ShiftBitmap+0x17a>
 800a4e8:	897b      	ldrh	r3, [r7, #10]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	bf0c      	ite	eq
 800a4ee:	2301      	moveq	r3, #1
 800a4f0:	2300      	movne	r3, #0
 800a4f2:	b2da      	uxtb	r2, r3
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a4fa:	bf0c      	ite	eq
 800a4fc:	2301      	moveq	r3, #1
 800a4fe:	2300      	movne	r3, #0
 800a500:	b2db      	uxtb	r3, r3
 800a502:	4013      	ands	r3, r2
 800a504:	b2db      	uxtb	r3, r3
 800a506:	2b00      	cmp	r3, #0
 800a508:	d005      	beq.n	800a516 <SSD1315_ShiftBitmap+0x17a>
  {
    memcpy(PhysFrameBuffer, pbmp, size);
 800a50a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a50c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800a50e:	4845      	ldr	r0, [pc, #276]	@ (800a624 <SSD1315_ShiftBitmap+0x288>)
 800a510:	f00c fe37 	bl	8017182 <memcpy>
 800a514:	e07a      	b.n	800a60c <SSD1315_ShiftBitmap+0x270>
  }
  else
  {
    x=Xpos+width;
 800a516:	897b      	ldrh	r3, [r7, #10]
 800a518:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a51a:	4413      	add	r3, r2
 800a51c:	61fb      	str	r3, [r7, #28]
    y=Ypos+height;
 800a51e:	893b      	ldrh	r3, [r7, #8]
 800a520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a522:	4413      	add	r3, r2
 800a524:	61bb      	str	r3, [r7, #24]
    y0 = Ypos;
 800a526:	893b      	ldrh	r3, [r7, #8]
 800a528:	617b      	str	r3, [r7, #20]
    
    for(; Xpos < x; Xpos++, XposBMP++)
 800a52a:	e06b      	b.n	800a604 <SSD1315_ShiftBitmap+0x268>
    {
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 800a52c:	697b      	ldr	r3, [r7, #20]
 800a52e:	813b      	strh	r3, [r7, #8]
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a534:	e05c      	b.n	800a5f0 <SSD1315_ShiftBitmap+0x254>
      {
        /* if bitmap and screen are aligned on a Page */
        if(((Ypos%8) == 0) && (y-Ypos >= 8) && ((YposBMP%8) == 0))
 800a536:	893b      	ldrh	r3, [r7, #8]
 800a538:	f003 0307 	and.w	r3, r3, #7
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d122      	bne.n	800a588 <SSD1315_ShiftBitmap+0x1ec>
 800a542:	893b      	ldrh	r3, [r7, #8]
 800a544:	69ba      	ldr	r2, [r7, #24]
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	2b07      	cmp	r3, #7
 800a54a:	d91d      	bls.n	800a588 <SSD1315_ShiftBitmap+0x1ec>
 800a54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a54e:	f003 0307 	and.w	r3, r3, #7
 800a552:	2b00      	cmp	r3, #0
 800a554:	d118      	bne.n	800a588 <SSD1315_ShiftBitmap+0x1ec>
        {
          PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] = pbmp[XposBMP+((YposBMP/8)*original_width)];
 800a556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a558:	08db      	lsrs	r3, r3, #3
 800a55a:	6a3a      	ldr	r2, [r7, #32]
 800a55c:	fb03 f202 	mul.w	r2, r3, r2
 800a560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a562:	4413      	add	r3, r2
 800a564:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a566:	441a      	add	r2, r3
 800a568:	8979      	ldrh	r1, [r7, #10]
 800a56a:	893b      	ldrh	r3, [r7, #8]
 800a56c:	08db      	lsrs	r3, r3, #3
 800a56e:	b29b      	uxth	r3, r3
 800a570:	01db      	lsls	r3, r3, #7
 800a572:	440b      	add	r3, r1
 800a574:	7811      	ldrb	r1, [r2, #0]
 800a576:	4a2b      	ldr	r2, [pc, #172]	@ (800a624 <SSD1315_ShiftBitmap+0x288>)
 800a578:	54d1      	strb	r1, [r2, r3]
          Ypos+=7;
 800a57a:	893b      	ldrh	r3, [r7, #8]
 800a57c:	3307      	adds	r3, #7
 800a57e:	813b      	strh	r3, [r7, #8]
          YposBMP+=7;
 800a580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a582:	3307      	adds	r3, #7
 800a584:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a586:	e02d      	b.n	800a5e4 <SSD1315_ShiftBitmap+0x248>
        }
        else
        {
          /* Draw bitmap pixel per pixel */
          if( (pbmp[XposBMP+((YposBMP/8)*original_width)]&(1<<(YposBMP%8))) != 0)
 800a588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a58a:	08db      	lsrs	r3, r3, #3
 800a58c:	6a3a      	ldr	r2, [r7, #32]
 800a58e:	fb03 f202 	mul.w	r2, r3, r2
 800a592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a594:	4413      	add	r3, r2
 800a596:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a598:	4413      	add	r3, r2
 800a59a:	781b      	ldrb	r3, [r3, #0]
 800a59c:	461a      	mov	r2, r3
 800a59e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5a0:	f003 0307 	and.w	r3, r3, #7
 800a5a4:	fa42 f303 	asr.w	r3, r2, r3
 800a5a8:	f003 0301 	and.w	r3, r3, #1
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00c      	beq.n	800a5ca <SSD1315_ShiftBitmap+0x22e>
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_WHITE) != SSD1315_OK)
 800a5b0:	8979      	ldrh	r1, [r7, #10]
 800a5b2:	893a      	ldrh	r2, [r7, #8]
 800a5b4:	23ff      	movs	r3, #255	@ 0xff
 800a5b6:	68f8      	ldr	r0, [r7, #12]
 800a5b8:	f000 f8f8 	bl	800a7ac <SSD1315_SetPixel>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d010      	beq.n	800a5e4 <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 800a5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 800a5c8:	e016      	b.n	800a5f8 <SSD1315_ShiftBitmap+0x25c>
            }
          }
          else
          {
            if (SSD1315_SetPixel(pObj, Xpos, Ypos, SSD1315_COLOR_BLACK) != SSD1315_OK)
 800a5ca:	8979      	ldrh	r1, [r7, #10]
 800a5cc:	893a      	ldrh	r2, [r7, #8]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 f8eb 	bl	800a7ac <SSD1315_SetPixel>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d003      	beq.n	800a5e4 <SSD1315_ShiftBitmap+0x248>
            {
              ret = SSD1315_ERROR;
 800a5dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 800a5e2:	e009      	b.n	800a5f8 <SSD1315_ShiftBitmap+0x25c>
      for(Ypos = y0, YposBMP = original_YposBMP; Ypos < y; Ypos++, YposBMP++)
 800a5e4:	893b      	ldrh	r3, [r7, #8]
 800a5e6:	3301      	adds	r3, #1
 800a5e8:	813b      	strh	r3, [r7, #8]
 800a5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ec:	3301      	adds	r3, #1
 800a5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5f0:	893b      	ldrh	r3, [r7, #8]
 800a5f2:	69ba      	ldr	r2, [r7, #24]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d89e      	bhi.n	800a536 <SSD1315_ShiftBitmap+0x19a>
    for(; Xpos < x; Xpos++, XposBMP++)
 800a5f8:	897b      	ldrh	r3, [r7, #10]
 800a5fa:	3301      	adds	r3, #1
 800a5fc:	817b      	strh	r3, [r7, #10]
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	3301      	adds	r3, #1
 800a602:	633b      	str	r3, [r7, #48]	@ 0x30
 800a604:	897b      	ldrh	r3, [r7, #10]
 800a606:	69fa      	ldr	r2, [r7, #28]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d88f      	bhi.n	800a52c <SSD1315_ShiftBitmap+0x190>
          }
        }
      }
    }
  }
  if(ret != SSD1315_OK)
 800a60c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d002      	beq.n	800a618 <SSD1315_ShiftBitmap+0x27c>
  {
    ret = SSD1315_ERROR;
 800a612:	f04f 33ff 	mov.w	r3, #4294967295
 800a616:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }
  return ret;
 800a618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3740      	adds	r7, #64	@ 0x40
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}
 800a622:	bf00      	nop
 800a624:	20000490 	.word	0x20000490

0800a628 <SSD1315_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle height.
  * @retval The component status.
  */
int32_t SSD1315_FillRGBRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b088      	sub	sp, #32
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	60f8      	str	r0, [r7, #12]
 800a630:	60b9      	str	r1, [r7, #8]
 800a632:	607a      	str	r2, [r7, #4]
 800a634:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a636:	2300      	movs	r3, #0
 800a638:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800a63a:	2300      	movs	r3, #0
 800a63c:	61bb      	str	r3, [r7, #24]
 800a63e:	e032      	b.n	800a6a6 <SSD1315_FillRGBRect+0x7e>
  {
    for(j = 0; j < Width; j++)
 800a640:	2300      	movs	r3, #0
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	e028      	b.n	800a698 <SSD1315_FillRGBRect+0x70>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	461a      	mov	r2, r3
 800a64c:	683b      	ldr	r3, [r7, #0]
 800a64e:	3301      	adds	r3, #1
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	021b      	lsls	r3, r3, #8
 800a654:	431a      	orrs	r2, r3
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	3302      	adds	r3, #2
 800a65a:	781b      	ldrb	r3, [r3, #0]
 800a65c:	041b      	lsls	r3, r3, #16
 800a65e:	431a      	orrs	r2, r3
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	3303      	adds	r3, #3
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	061b      	lsls	r3, r3, #24
 800a668:	4313      	orrs	r3, r2
 800a66a:	613b      	str	r3, [r7, #16]
      if(SSD1315_SetPixel (pObj, Xpos + j, Ypos + i, color)!= SSD1315_OK)
 800a66c:	68ba      	ldr	r2, [r7, #8]
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	18d1      	adds	r1, r2, r3
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	441a      	add	r2, r3
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	68f8      	ldr	r0, [r7, #12]
 800a67c:	f000 f896 	bl	800a7ac <SSD1315_SetPixel>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d002      	beq.n	800a68c <SSD1315_FillRGBRect+0x64>
      {
        ret = SSD1315_ERROR;
 800a686:	f04f 33ff 	mov.w	r3, #4294967295
 800a68a:	61fb      	str	r3, [r7, #28]
      }
      pData += 4;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	3304      	adds	r3, #4
 800a690:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	3301      	adds	r3, #1
 800a696:	617b      	str	r3, [r7, #20]
 800a698:	697a      	ldr	r2, [r7, #20]
 800a69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d3d2      	bcc.n	800a646 <SSD1315_FillRGBRect+0x1e>
  for(i = 0; i < Height; i++)
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	3301      	adds	r3, #1
 800a6a4:	61bb      	str	r3, [r7, #24]
 800a6a6:	69ba      	ldr	r2, [r7, #24]
 800a6a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	d3c8      	bcc.n	800a640 <SSD1315_FillRGBRect+0x18>
    }
  }

  return ret;
 800a6ae:	69fb      	ldr	r3, [r7, #28]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3720      	adds	r7, #32
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <SSD1315_DrawHLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawHLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	60f8      	str	r0, [r7, #12]
 800a6c0:	60b9      	str	r1, [r7, #8]
 800a6c2:	607a      	str	r2, [r7, #4]
 800a6c4:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	613b      	str	r3, [r7, #16]

  /* Sent a complete horizontal line */
  for (i = Xpos; i < (Xpos+Length); i++)
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	613b      	str	r3, [r7, #16]
 800a6d2:	e008      	b.n	800a6e6 <SSD1315_DrawHLine+0x2e>
  {
    SSD1315_SetPixel(pObj,i, Ypos, Color);
 800a6d4:	6a3b      	ldr	r3, [r7, #32]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	6939      	ldr	r1, [r7, #16]
 800a6da:	68f8      	ldr	r0, [r7, #12]
 800a6dc:	f000 f866 	bl	800a7ac <SSD1315_SetPixel>
  for (i = Xpos; i < (Xpos+Length); i++)
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	3301      	adds	r3, #1
 800a6e4:	613b      	str	r3, [r7, #16]
 800a6e6:	68ba      	ldr	r2, [r7, #8]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	4413      	add	r3, r2
 800a6ec:	693a      	ldr	r2, [r7, #16]
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	d3f0      	bcc.n	800a6d4 <SSD1315_DrawHLine+0x1c>
  }
  if(ret != SSD1315_OK)
 800a6f2:	697b      	ldr	r3, [r7, #20]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <SSD1315_DrawHLine+0x46>
  {
    ret = SSD1315_ERROR;
 800a6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a6fc:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a6fe:	697b      	ldr	r3, [r7, #20]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3718      	adds	r7, #24
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <SSD1315_DrawVLine>:
  * @param  Length specifies the Line length.
  * @param  Color Specifies the RGB color.
  * @retval The component status.
  */
int32_t SSD1315_DrawVLine(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b086      	sub	sp, #24
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 800a71a:	2300      	movs	r3, #0
 800a71c:	613b      	str	r3, [r7, #16]
  
  for (i = Ypos; i < (Ypos+Length); i++)
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	613b      	str	r3, [r7, #16]
 800a722:	e008      	b.n	800a736 <SSD1315_DrawVLine+0x2e>
  {
    SSD1315_SetPixel(pObj,Xpos, i, Color);
 800a724:	6a3b      	ldr	r3, [r7, #32]
 800a726:	693a      	ldr	r2, [r7, #16]
 800a728:	68b9      	ldr	r1, [r7, #8]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 f83e 	bl	800a7ac <SSD1315_SetPixel>
  for (i = Ypos; i < (Ypos+Length); i++)
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	3301      	adds	r3, #1
 800a734:	613b      	str	r3, [r7, #16]
 800a736:	687a      	ldr	r2, [r7, #4]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	4413      	add	r3, r2
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d3f0      	bcc.n	800a724 <SSD1315_DrawVLine+0x1c>
  }
  if(ret != SSD1315_OK)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d002      	beq.n	800a74e <SSD1315_DrawVLine+0x46>
  {
    ret = SSD1315_ERROR;
 800a748:	f04f 33ff 	mov.w	r3, #4294967295
 800a74c:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800a74e:	697b      	ldr	r3, [r7, #20]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3718      	adds	r7, #24
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <SSD1315_FillRect>:
  * @param  Height Rectangle height.
  * @param  Color Draw color.
  * @retval Component status.
  */
int32_t SSD1315_FillRect(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b088      	sub	sp, #32
 800a75c:	af02      	add	r7, sp, #8
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	607a      	str	r2, [r7, #4]
 800a764:	603b      	str	r3, [r7, #0]
  int32_t ret = SSD1315_OK;
 800a766:	2300      	movs	r3, #0
 800a768:	617b      	str	r3, [r7, #20]
  uint32_t i;

  for(i = 0U; i < Height; i++)
 800a76a:	2300      	movs	r3, #0
 800a76c:	613b      	str	r3, [r7, #16]
 800a76e:	e013      	b.n	800a798 <SSD1315_FillRect+0x40>
  {
    if (SSD1315_DrawHLine(pObj, Xpos, (i + Ypos), Width, Color) != SSD1315_OK)
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	441a      	add	r2, r3
 800a776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a778:	9300      	str	r3, [sp, #0]
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	68b9      	ldr	r1, [r7, #8]
 800a77e:	68f8      	ldr	r0, [r7, #12]
 800a780:	f7ff ff9a 	bl	800a6b8 <SSD1315_DrawHLine>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <SSD1315_FillRect+0x3a>
    {
      ret = SSD1315_ERROR;
 800a78a:	f04f 33ff 	mov.w	r3, #4294967295
 800a78e:	617b      	str	r3, [r7, #20]
      break;
 800a790:	e006      	b.n	800a7a0 <SSD1315_FillRect+0x48>
  for(i = 0U; i < Height; i++)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	3301      	adds	r3, #1
 800a796:	613b      	str	r3, [r7, #16]
 800a798:	693a      	ldr	r2, [r7, #16]
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d3e7      	bcc.n	800a770 <SSD1315_FillRect+0x18>
    }
  }

  return ret;
 800a7a0:	697b      	ldr	r3, [r7, #20]
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3718      	adds	r7, #24
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bd80      	pop	{r7, pc}
	...

0800a7ac <SSD1315_SetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the RGB pixel color.
  * @retval The component status.
  */
int32_t SSD1315_SetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b087      	sub	sp, #28
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	60f8      	str	r0, [r7, #12]
 800a7b4:	60b9      	str	r1, [r7, #8]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  /* Set color */
  if (Color == SSD1315_COLOR_WHITE)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	2bff      	cmp	r3, #255	@ 0xff
 800a7c2:	d117      	bne.n	800a7f4 <SSD1315_SetPixel+0x48>
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] |= 1 << (Ypos % 8);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	08db      	lsrs	r3, r3, #3
 800a7c8:	01d9      	lsls	r1, r3, #7
 800a7ca:	68ba      	ldr	r2, [r7, #8]
 800a7cc:	440a      	add	r2, r1
 800a7ce:	491c      	ldr	r1, [pc, #112]	@ (800a840 <SSD1315_SetPixel+0x94>)
 800a7d0:	5c8a      	ldrb	r2, [r1, r2]
 800a7d2:	b251      	sxtb	r1, r2
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	f002 0207 	and.w	r2, r2, #7
 800a7da:	2001      	movs	r0, #1
 800a7dc:	fa00 f202 	lsl.w	r2, r0, r2
 800a7e0:	b252      	sxtb	r2, r2
 800a7e2:	430a      	orrs	r2, r1
 800a7e4:	b251      	sxtb	r1, r2
 800a7e6:	01da      	lsls	r2, r3, #7
 800a7e8:	68bb      	ldr	r3, [r7, #8]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	b2c9      	uxtb	r1, r1
 800a7ee:	4a14      	ldr	r2, [pc, #80]	@ (800a840 <SSD1315_SetPixel+0x94>)
 800a7f0:	54d1      	strb	r1, [r2, r3]
 800a7f2:	e018      	b.n	800a826 <SSD1315_SetPixel+0x7a>
  }
  else
  {
    PhysFrameBuffer[Xpos + (Ypos / 8) * SSD1315_LCD_PIXEL_WIDTH] &= ~(1 << (Ypos % 8));
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	08db      	lsrs	r3, r3, #3
 800a7f8:	01d9      	lsls	r1, r3, #7
 800a7fa:	68ba      	ldr	r2, [r7, #8]
 800a7fc:	440a      	add	r2, r1
 800a7fe:	4910      	ldr	r1, [pc, #64]	@ (800a840 <SSD1315_SetPixel+0x94>)
 800a800:	5c8a      	ldrb	r2, [r1, r2]
 800a802:	b251      	sxtb	r1, r2
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	f002 0207 	and.w	r2, r2, #7
 800a80a:	2001      	movs	r0, #1
 800a80c:	fa00 f202 	lsl.w	r2, r0, r2
 800a810:	b252      	sxtb	r2, r2
 800a812:	43d2      	mvns	r2, r2
 800a814:	b252      	sxtb	r2, r2
 800a816:	400a      	ands	r2, r1
 800a818:	b251      	sxtb	r1, r2
 800a81a:	01da      	lsls	r2, r3, #7
 800a81c:	68bb      	ldr	r3, [r7, #8]
 800a81e:	4413      	add	r3, r2
 800a820:	b2c9      	uxtb	r1, r1
 800a822:	4a07      	ldr	r2, [pc, #28]	@ (800a840 <SSD1315_SetPixel+0x94>)
 800a824:	54d1      	strb	r1, [r2, r3]
  }
  if(ret != SSD1315_OK)
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d002      	beq.n	800a832 <SSD1315_SetPixel+0x86>
  {
    ret = SSD1315_ERROR;
 800a82c:	f04f 33ff 	mov.w	r3, #4294967295
 800a830:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800a832:	697b      	ldr	r3, [r7, #20]
}
 800a834:	4618      	mov	r0, r3
 800a836:	371c      	adds	r7, #28
 800a838:	46bd      	mov	sp, r7
 800a83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83e:	4770      	bx	lr
 800a840:	20000490 	.word	0x20000490

0800a844 <SSD1315_GetPixel>:
  * @param  Ypos specifies the Y position.
  * @param  Color the LCD pixel color.
  * @retval The component status.
  */
int32_t SSD1315_GetPixel(SSD1315_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800a844:	b480      	push	{r7}
 800a846:	b087      	sub	sp, #28
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
 800a850:	603b      	str	r3, [r7, #0]
   int32_t  ret = SSD1315_OK;
 800a852:	2300      	movs	r3, #0
 800a854:	617b      	str	r3, [r7, #20]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  if ((Xpos >= SSD1315_LCD_PIXEL_WIDTH) || (Ypos >= SSD1315_LCD_PIXEL_HEIGHT)) 
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b7f      	cmp	r3, #127	@ 0x7f
 800a85a:	d802      	bhi.n	800a862 <SSD1315_GetPixel+0x1e>
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b3f      	cmp	r3, #63	@ 0x3f
 800a860:	d903      	bls.n	800a86a <SSD1315_GetPixel+0x26>
  {
    *Color = 0;
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	2200      	movs	r2, #0
 800a866:	601a      	str	r2, [r3, #0]
 800a868:	e01c      	b.n	800a8a4 <SSD1315_GetPixel+0x60>
  }
  else
  {
    *Color = PhysFrameBuffer[Xpos+ (Ypos/8)*SSD1315_LCD_PIXEL_WIDTH] & (1 << Ypos%8);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	08db      	lsrs	r3, r3, #3
 800a86e:	01da      	lsls	r2, r3, #7
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	4413      	add	r3, r2
 800a874:	4a0f      	ldr	r2, [pc, #60]	@ (800a8b4 <SSD1315_GetPixel+0x70>)
 800a876:	5cd3      	ldrb	r3, [r2, r3]
 800a878:	4619      	mov	r1, r3
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	2201      	movs	r2, #1
 800a882:	fa02 f303 	lsl.w	r3, r2, r3
 800a886:	400b      	ands	r3, r1
 800a888:	461a      	mov	r2, r3
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	601a      	str	r2, [r3, #0]
    if (*Color != 0)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d003      	beq.n	800a89e <SSD1315_GetPixel+0x5a>
    {
      *Color = 1;
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	2201      	movs	r2, #1
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e002      	b.n	800a8a4 <SSD1315_GetPixel+0x60>
    }
    else
    {
      *Color = 0;
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
    }
  }
  
  return ret;
 800a8a4:	697b      	ldr	r3, [r7, #20]
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	371c      	adds	r7, #28
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b0:	4770      	bx	lr
 800a8b2:	bf00      	nop
 800a8b4:	20000490 	.word	0x20000490

0800a8b8 <SSD1315_GetXSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Width.
  * @retval The component status.
  */
int32_t SSD1315_GetXSize(SSD1315_Object_t *pObj, uint32_t *XSize)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d103      	bne.n	800a8d6 <SSD1315_GetXSize+0x1e>
  {
    *XSize = 128;
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	2280      	movs	r2, #128	@ 0x80
 800a8d2:	601a      	str	r2, [r3, #0]
 800a8d4:	e002      	b.n	800a8dc <SSD1315_GetXSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 800a8d6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8da:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr

0800a8ea <SSD1315_GetYSize>:
  * @param  pObj Component object.
  * @param  The Lcd Pixel Height.
  * @retval The component status.
  */
int32_t SSD1315_GetYSize(SSD1315_Object_t *pObj, uint32_t *YSize)
{
 800a8ea:	b480      	push	{r7}
 800a8ec:	b085      	sub	sp, #20
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	6039      	str	r1, [r7, #0]
  int32_t  ret = SSD1315_OK;
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	60fb      	str	r3, [r7, #12]

  if (pObj->Orientation == SSD1315_ORIENTATION_LANDSCAPE)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d103      	bne.n	800a908 <SSD1315_GetYSize+0x1e>
  {
    *YSize = 64;
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	2240      	movs	r2, #64	@ 0x40
 800a904:	601a      	str	r2, [r3, #0]
 800a906:	e002      	b.n	800a90e <SSD1315_GetYSize+0x24>
  }
  else
  {
    ret = SSD1315_ERROR;
 800a908:	f04f 33ff 	mov.w	r3, #4294967295
 800a90c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800a90e:	68fb      	ldr	r3, [r7, #12]
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <SSD1315_SetPage>:
  * @param  pObj Component object.
  * @param  Page specifies the Page position (0-7).
  * @retval The component status.
  */
int32_t SSD1315_SetPage(SSD1315_Object_t *pObj, uint16_t Page)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	460b      	mov	r3, r1
 800a926:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Set Page position  */
  data = (SSD1315_SET_PAGE_START_ADRESS | Page);
 800a92c:	887b      	ldrh	r3, [r7, #2]
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800a934:	b2db      	uxtb	r3, r3
 800a936:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f103 0014 	add.w	r0, r3, #20
 800a93e:	f107 020b 	add.w	r2, r7, #11
 800a942:	2301      	movs	r3, #1
 800a944:	2101      	movs	r1, #1
 800a946:	f000 f97b 	bl	800ac40 <ssd1315_write_reg>
 800a94a:	4602      	mov	r2, r0
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	4413      	add	r3, r2
 800a950:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d002      	beq.n	800a95e <SSD1315_SetPage+0x42>
  {
    ret = SSD1315_ERROR;
 800a958:	f04f 33ff 	mov.w	r3, #4294967295
 800a95c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a95e:	68fb      	ldr	r3, [r7, #12]
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <SSD1315_SetColumn>:
  * @param  pObj Component object.
  * @param  Column specifies the Column position (0-127).
  * @retval The component status.
  */
int32_t SSD1315_SetColumn(SSD1315_Object_t *pObj, uint16_t Column)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	807b      	strh	r3, [r7, #2]
  int32_t ret = SSD1315_OK;
 800a974:	2300      	movs	r3, #0
 800a976:	60fb      	str	r3, [r7, #12]
  uint8_t data;
  /* Set Column position  */

  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800a978:	2300      	movs	r3, #0
 800a97a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f103 0014 	add.w	r0, r3, #20
 800a982:	f107 020b 	add.w	r2, r7, #11
 800a986:	2301      	movs	r3, #1
 800a988:	2101      	movs	r1, #1
 800a98a:	f000 f959 	bl	800ac40 <ssd1315_write_reg>
 800a98e:	4602      	mov	r2, r0
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	4413      	add	r3, r2
 800a994:	60fb      	str	r3, [r7, #12]
  data = (SSD1315_LOWER_COLUMN_START_ADRESS | Column);
 800a996:	887b      	ldrh	r3, [r7, #2]
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f103 0014 	add.w	r0, r3, #20
 800a9a2:	f107 020b 	add.w	r2, r7, #11
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	2101      	movs	r1, #1
 800a9aa:	f000 f949 	bl	800ac40 <ssd1315_write_reg>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	60fb      	str	r3, [r7, #12]
  data = SSD1315_DISPLAY_START_LINE_32;
 800a9b6:	231f      	movs	r3, #31
 800a9b8:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f103 0014 	add.w	r0, r3, #20
 800a9c0:	f107 020b 	add.w	r2, r7, #11
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	2101      	movs	r1, #1
 800a9c8:	f000 f93a 	bl	800ac40 <ssd1315_write_reg>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d002      	beq.n	800a9e0 <SSD1315_SetColumn+0x78>
  {
    ret = SSD1315_ERROR;
 800a9da:	f04f 33ff 	mov.w	r3, #4294967295
 800a9de:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3710      	adds	r7, #16
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <SSD1315_ScrollingSetup>:
            @arg  0..7
  * @param  Frequency SSD1315_SCROLL_FREQ_2FRAMES to SSD1315_SCROLL_FREQ_256FRAMES
  * @retval The component status.
  */
int32_t SSD1315_ScrollingSetup(SSD1315_Object_t *pObj, uint16_t ScrollMode, uint16_t StartPage, uint16_t EndPage, uint16_t Frequency)
{
 800a9ea:	b580      	push	{r7, lr}
 800a9ec:	b086      	sub	sp, #24
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	60f8      	str	r0, [r7, #12]
 800a9f2:	4608      	mov	r0, r1
 800a9f4:	4611      	mov	r1, r2
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	817b      	strh	r3, [r7, #10]
 800a9fc:	460b      	mov	r3, r1
 800a9fe:	813b      	strh	r3, [r7, #8]
 800aa00:	4613      	mov	r3, r2
 800aa02:	80fb      	strh	r3, [r7, #6]
  int32_t ret = SSD1315_OK;
 800aa04:	2300      	movs	r3, #0
 800aa06:	617b      	str	r3, [r7, #20]
  uint8_t data;

  /* Scrolling setup sequence */
  data = ScrollMode;                                     /* Right/Left Horizontal Scroll */
 800aa08:	897b      	ldrh	r3, [r7, #10]
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	f103 0014 	add.w	r0, r3, #20
 800aa14:	f107 0213 	add.w	r2, r7, #19
 800aa18:	2301      	movs	r3, #1
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	f000 f910 	bl	800ac40 <ssd1315_write_reg>
 800aa20:	4602      	mov	r2, r0
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	4413      	add	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;
 800aa28:	2300      	movs	r3, #0
 800aa2a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f103 0014 	add.w	r0, r3, #20
 800aa32:	f107 0213 	add.w	r2, r7, #19
 800aa36:	2301      	movs	r3, #1
 800aa38:	2101      	movs	r1, #1
 800aa3a:	f000 f901 	bl	800ac40 <ssd1315_write_reg>
 800aa3e:	4602      	mov	r2, r0
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	4413      	add	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]
  data = StartPage;                                      /* start page address*/
 800aa46:	893b      	ldrh	r3, [r7, #8]
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	f103 0014 	add.w	r0, r3, #20
 800aa52:	f107 0213 	add.w	r2, r7, #19
 800aa56:	2301      	movs	r3, #1
 800aa58:	2101      	movs	r1, #1
 800aa5a:	f000 f8f1 	bl	800ac40 <ssd1315_write_reg>
 800aa5e:	4602      	mov	r2, r0
 800aa60:	697b      	ldr	r3, [r7, #20]
 800aa62:	4413      	add	r3, r2
 800aa64:	617b      	str	r3, [r7, #20]
  data = Frequency;                                      /* Frequency*/
 800aa66:	8c3b      	ldrh	r3, [r7, #32]
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f103 0014 	add.w	r0, r3, #20
 800aa72:	f107 0213 	add.w	r2, r7, #19
 800aa76:	2301      	movs	r3, #1
 800aa78:	2101      	movs	r1, #1
 800aa7a:	f000 f8e1 	bl	800ac40 <ssd1315_write_reg>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	4413      	add	r3, r2
 800aa84:	617b      	str	r3, [r7, #20]
  data = EndPage;                                        /* End page address*/
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	b2db      	uxtb	r3, r3
 800aa8a:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f103 0014 	add.w	r0, r3, #20
 800aa92:	f107 0213 	add.w	r2, r7, #19
 800aa96:	2301      	movs	r3, #1
 800aa98:	2101      	movs	r1, #1
 800aa9a:	f000 f8d1 	bl	800ac40 <ssd1315_write_reg>
 800aa9e:	4602      	mov	r2, r0
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	617b      	str	r3, [r7, #20]
  data = SSD1315_LOWER_COLUMN_START_ADRESS;           
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f103 0014 	add.w	r0, r3, #20
 800aab0:	f107 0213 	add.w	r2, r7, #19
 800aab4:	2301      	movs	r3, #1
 800aab6:	2101      	movs	r1, #1
 800aab8:	f000 f8c2 	bl	800ac40 <ssd1315_write_reg>
 800aabc:	4602      	mov	r2, r0
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	4413      	add	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]
  data = SSD1315_CONTRAST_CONTROL_2;
 800aac4:	23ff      	movs	r3, #255	@ 0xff
 800aac6:	74fb      	strb	r3, [r7, #19]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	f103 0014 	add.w	r0, r3, #20
 800aace:	f107 0213 	add.w	r2, r7, #19
 800aad2:	2301      	movs	r3, #1
 800aad4:	2101      	movs	r1, #1
 800aad6:	f000 f8b3 	bl	800ac40 <ssd1315_write_reg>
 800aada:	4602      	mov	r2, r0
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	4413      	add	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]

  if (ret != SSD1315_OK)
 800aae2:	697b      	ldr	r3, [r7, #20]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d002      	beq.n	800aaee <SSD1315_ScrollingSetup+0x104>
  {
    ret = SSD1315_ERROR;
 800aae8:	f04f 33ff 	mov.w	r3, #4294967295
 800aaec:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800aaee:	697b      	ldr	r3, [r7, #20]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3718      	adds	r7, #24
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <SSD1315_ScrollingStart>:
  * @brief  Start Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStart(SSD1315_Object_t *pObj)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Start scrolling sequence */
  data = SSD1315_ACTIVATE_SCROLL;
 800ab04:	232f      	movs	r3, #47	@ 0x2f
 800ab06:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f103 0014 	add.w	r0, r3, #20
 800ab0e:	f107 020b 	add.w	r2, r7, #11
 800ab12:	2301      	movs	r3, #1
 800ab14:	2101      	movs	r1, #1
 800ab16:	f000 f893 	bl	800ac40 <ssd1315_write_reg>
 800ab1a:	4602      	mov	r2, r0
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d002      	beq.n	800ab2e <SSD1315_ScrollingStart+0x36>
  {
    ret = SSD1315_ERROR;
 800ab28:	f04f 33ff 	mov.w	r3, #4294967295
 800ab2c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800ab2e:	68fb      	ldr	r3, [r7, #12]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	3710      	adds	r7, #16
 800ab34:	46bd      	mov	sp, r7
 800ab36:	bd80      	pop	{r7, pc}

0800ab38 <SSD1315_ScrollingStop>:
  * @brief  Stop Display Scrolling.
  * @param  pObj Component object.
  * @retval The component status.
  */
int32_t SSD1315_ScrollingStop(SSD1315_Object_t *pObj)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  int32_t ret = SSD1315_OK;
 800ab40:	2300      	movs	r3, #0
 800ab42:	60fb      	str	r3, [r7, #12]
  uint8_t data;

  /* Stop scrolling  sequence */
  data = SSD1315_DESACTIVATE_SCROLL;
 800ab44:	232e      	movs	r3, #46	@ 0x2e
 800ab46:	72fb      	strb	r3, [r7, #11]
  ret += ssd1315_write_reg(&pObj->Ctx, 1, &data, 1);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f103 0014 	add.w	r0, r3, #20
 800ab4e:	f107 020b 	add.w	r2, r7, #11
 800ab52:	2301      	movs	r3, #1
 800ab54:	2101      	movs	r1, #1
 800ab56:	f000 f873 	bl	800ac40 <ssd1315_write_reg>
 800ab5a:	4602      	mov	r2, r0
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	4413      	add	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]

  if (ret != SSD1315_OK)
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d002      	beq.n	800ab6e <SSD1315_ScrollingStop+0x36>
  {
    ret = SSD1315_ERROR;
 800ab68:	f04f 33ff 	mov.w	r3, #4294967295
 800ab6c:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800ab6e:	68fb      	ldr	r3, [r7, #12]
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3710      	adds	r7, #16
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <SSD1315_ReadRegWrap>:
  * @param  pData The target register value to be red.
  * @param  Length Buffer size to be red.
  * @retval error status.
  */
static int32_t SSD1315_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b086      	sub	sp, #24
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	607a      	str	r2, [r7, #4]
 800ab82:	461a      	mov	r2, r3
 800ab84:	460b      	mov	r3, r1
 800ab86:	817b      	strh	r3, [r7, #10]
 800ab88:	4613      	mov	r3, r2
 800ab8a:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, pData, Length);
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	68db      	ldr	r3, [r3, #12]
 800ab94:	893a      	ldrh	r2, [r7, #8]
 800ab96:	8978      	ldrh	r0, [r7, #10]
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	4798      	blx	r3
 800ab9c:	4603      	mov	r3, r0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	3718      	adds	r7, #24
 800aba2:	46bd      	mov	sp, r7
 800aba4:	bd80      	pop	{r7, pc}

0800aba6 <SSD1315_WriteRegWrap>:
  * @param  pData The target register value to be written.
  * @param  Length Buffer size to be written.
  * @retval error status.
  */
static int32_t SSD1315_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800aba6:	b580      	push	{r7, lr}
 800aba8:	b086      	sub	sp, #24
 800abaa:	af00      	add	r7, sp, #0
 800abac:	60f8      	str	r0, [r7, #12]
 800abae:	607a      	str	r2, [r7, #4]
 800abb0:	461a      	mov	r2, r3
 800abb2:	460b      	mov	r3, r1
 800abb4:	817b      	strh	r3, [r7, #10]
 800abb6:	4613      	mov	r3, r2
 800abb8:	813b      	strh	r3, [r7, #8]
  SSD1315_Object_t *pObj = (SSD1315_Object_t *)handle;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, pData, Length);
 800abbe:	697b      	ldr	r3, [r7, #20]
 800abc0:	689b      	ldr	r3, [r3, #8]
 800abc2:	893a      	ldrh	r2, [r7, #8]
 800abc4:	8978      	ldrh	r0, [r7, #10]
 800abc6:	6879      	ldr	r1, [r7, #4]
 800abc8:	4798      	blx	r3
 800abca:	4603      	mov	r3, r0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3718      	adds	r7, #24
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <ssd1315_Clear>:
  * @brief  Clear Display screen.
  * @param  ColorCode the color use to clear the screen (SSD1315_COLOR_WHITE or SSD1315_COLOR_BLACK).
  * @retval None
  */
static void ssd1315_Clear(uint16_t ColorCode)
{
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b082      	sub	sp, #8
 800abd8:	af00      	add	r7, sp, #0
 800abda:	4603      	mov	r3, r0
 800abdc:	80fb      	strh	r3, [r7, #6]
  /* Check color */
  if (ColorCode == SSD1315_COLOR_WHITE) 
 800abde:	88fb      	ldrh	r3, [r7, #6]
 800abe0:	2bff      	cmp	r3, #255	@ 0xff
 800abe2:	d106      	bne.n	800abf2 <ssd1315_Clear+0x1e>
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_WHITE, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800abe4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800abe8:	21ff      	movs	r1, #255	@ 0xff
 800abea:	4807      	ldr	r0, [pc, #28]	@ (800ac08 <ssd1315_Clear+0x34>)
 800abec:	f00c fa2e 	bl	801704c <memset>
  }
  else
  {
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
  }
}
 800abf0:	e005      	b.n	800abfe <ssd1315_Clear+0x2a>
    memset(PhysFrameBuffer, SSD1315_COLOR_BLACK, SSD1315_LCD_COLUMN_NUMBER*SSD1315_LCD_PAGE_NUMBER);
 800abf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800abf6:	2100      	movs	r1, #0
 800abf8:	4803      	ldr	r0, [pc, #12]	@ (800ac08 <ssd1315_Clear+0x34>)
 800abfa:	f00c fa27 	bl	801704c <memset>
}
 800abfe:	bf00      	nop
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	20000490 	.word	0x20000490

0800ac0c <SSD1315_IO_Delay>:
  * @brief  SSD1315 delay.
  * @param  Delay Delay in ms.
  * @retval Component error status.
  */
static int32_t SSD1315_IO_Delay(SSD1315_Object_t *pObj, uint32_t Delay)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	4798      	blx	r3
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 800ac20:	bf00      	nop
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	691b      	ldr	r3, [r3, #16]
 800ac26:	4798      	blx	r3
 800ac28:	4603      	mov	r3, r0
 800ac2a:	461a      	mov	r2, r3
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	1ad3      	subs	r3, r2, r3
 800ac30:	683a      	ldr	r2, [r7, #0]
 800ac32:	429a      	cmp	r2, r3
 800ac34:	d8f5      	bhi.n	800ac22 <SSD1315_IO_Delay+0x16>
  {
  }
  return SSD1315_OK;
 800ac36:	2300      	movs	r3, #0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <ssd1315_write_reg>:
  * @param  uint8_t reg: register to write
  * @param  uint8_t* data: pointer to data to write in register reg
  *
*/
int32_t ssd1315_write_reg(ssd1315_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 800ac40:	b590      	push	{r4, r7, lr}
 800ac42:	b085      	sub	sp, #20
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	607a      	str	r2, [r7, #4]
 800ac4a:	461a      	mov	r2, r3
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	817b      	strh	r3, [r7, #10]
 800ac50:	4613      	mov	r3, r2
 800ac52:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681c      	ldr	r4, [r3, #0]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	6898      	ldr	r0, [r3, #8]
 800ac5c:	893b      	ldrh	r3, [r7, #8]
 800ac5e:	8979      	ldrh	r1, [r7, #10]
 800ac60:	687a      	ldr	r2, [r7, #4]
 800ac62:	47a0      	blx	r4
 800ac64:	4603      	mov	r3, r0
}
 800ac66:	4618      	mov	r0, r3
 800ac68:	3714      	adds	r7, #20
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	bd90      	pop	{r4, r7, pc}

0800ac6e <LL_AHB2_GRP1_EnableClock>:
{
 800ac6e:	b480      	push	{r7}
 800ac70:	b085      	sub	sp, #20
 800ac72:	af00      	add	r7, sp, #0
 800ac74:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800ac76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac7c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800ac86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	4013      	ands	r3, r2
 800ac90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ac92:	68fb      	ldr	r3, [r7, #12]
}
 800ac94:	bf00      	nop
 800ac96:	3714      	adds	r7, #20
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr

0800aca0 <LL_APB2_GRP1_EnableClock>:
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800aca8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800acae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	4313      	orrs	r3, r2
 800acb6:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800acb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acbc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800acc4:	68fb      	ldr	r3, [r7, #12]
}
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr

0800acd2 <LL_APB2_GRP1_DisableClock>:
{
 800acd2:	b480      	push	{r7}
 800acd4:	b083      	sub	sp, #12
 800acd6:	af00      	add	r7, sp, #0
 800acd8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 800acda:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800acde:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	43db      	mvns	r3, r3
 800ace4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ace8:	4013      	ands	r3, r2
 800acea:	660b      	str	r3, [r1, #96]	@ 0x60
}
 800acec:	bf00      	nop
 800acee:	370c      	adds	r7, #12
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr

0800acf8 <BSP_PWM_LED_Init>:
/**
  * @brief  Configure PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Init(void)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef  gpio_config = {0};
 800ad02:	463b      	mov	r3, r7
 800ad04:	2200      	movs	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]
 800ad08:	605a      	str	r2, [r3, #4]
 800ad0a:	609a      	str	r2, [r3, #8]
 800ad0c:	60da      	str	r2, [r3, #12]
 800ad0e:	611a      	str	r2, [r3, #16]
  
  PWM_LED_SDI_GPIO_CLK_ENABLE();
 800ad10:	2001      	movs	r0, #1
 800ad12:	f7ff ffac 	bl	800ac6e <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SDI_GPIO_PIN;
 800ad16:	2380      	movs	r3, #128	@ 0x80
 800ad18:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 800ad1e:	2302      	movs	r3, #2
 800ad20:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SDI_GPIO_PORT, &gpio_config);
 800ad22:	463b      	mov	r3, r7
 800ad24:	4619      	mov	r1, r3
 800ad26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ad2a:	f001 fee1 	bl	800caf0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800ad2e:	2200      	movs	r2, #0
 800ad30:	2180      	movs	r1, #128	@ 0x80
 800ad32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800ad36:	f002 f929 	bl	800cf8c <HAL_GPIO_WritePin>
  
  PWM_LED_SELECT_GPIO_CLK_ENABLE();
 800ad3a:	2080      	movs	r0, #128	@ 0x80
 800ad3c:	f7ff ff97 	bl	800ac6e <LL_AHB2_GRP1_EnableClock>
  gpio_config.Pin       = PWM_LED_SELECT_GPIO_PIN;
 800ad40:	2302      	movs	r3, #2
 800ad42:	603b      	str	r3, [r7, #0]
  gpio_config.Mode      = GPIO_MODE_OUTPUT_PP;
 800ad44:	2301      	movs	r3, #1
 800ad46:	607b      	str	r3, [r7, #4]
  gpio_config.Pull      = GPIO_PULLDOWN;
 800ad48:	2302      	movs	r3, #2
 800ad4a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(PWM_LED_SELECT_GPIO_PORT, &gpio_config);
 800ad4c:	463b      	mov	r3, r7
 800ad4e:	4619      	mov	r1, r3
 800ad50:	4814      	ldr	r0, [pc, #80]	@ (800ada4 <BSP_PWM_LED_Init+0xac>)
 800ad52:	f001 fecd 	bl	800caf0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800ad56:	2200      	movs	r2, #0
 800ad58:	2102      	movs	r1, #2
 800ad5a:	4812      	ldr	r0, [pc, #72]	@ (800ada4 <BSP_PWM_LED_Init+0xac>)
 800ad5c:	f002 f916 	bl	800cf8c <HAL_GPIO_WritePin>

  PwmLed_TimerHandle.Instance = PWM_LED_TIM;
 800ad60:	4b11      	ldr	r3, [pc, #68]	@ (800ada8 <BSP_PWM_LED_Init+0xb0>)
 800ad62:	4a12      	ldr	r2, [pc, #72]	@ (800adac <BSP_PWM_LED_Init+0xb4>)
 800ad64:	601a      	str	r2, [r3, #0]
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* TIM17 MSP initialization */
    TIM17_MspInit(&PwmLed_TimerHandle);
 800ad66:	4810      	ldr	r0, [pc, #64]	@ (800ada8 <BSP_PWM_LED_Init+0xb0>)
 800ad68:	f000 fa34 	bl	800b1d4 <TIM17_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
      
  PwmLed_TimerHandle.Init.Prescaler = (PWM_LED_TIM_GET_COUNTER_CLK_FREQ()/1000000) -1;
 800ad6c:	f003 fb2c 	bl	800e3c8 <HAL_RCC_GetPCLK2Freq>
 800ad70:	4603      	mov	r3, r0
 800ad72:	4a0f      	ldr	r2, [pc, #60]	@ (800adb0 <BSP_PWM_LED_Init+0xb8>)
 800ad74:	fba2 2303 	umull	r2, r3, r2, r3
 800ad78:	0c9b      	lsrs	r3, r3, #18
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	4a0a      	ldr	r2, [pc, #40]	@ (800ada8 <BSP_PWM_LED_Init+0xb0>)
 800ad7e:	6053      	str	r3, [r2, #4]
  PwmLed_TimerHandle.Init.Period = (PWM_LED_TIM_COUNTER_FREQ/PWM_LED_TIM_FREQ) - 1;
 800ad80:	4b09      	ldr	r3, [pc, #36]	@ (800ada8 <BSP_PWM_LED_Init+0xb0>)
 800ad82:	2204      	movs	r2, #4
 800ad84:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_Base_Init(&PwmLed_TimerHandle) != HAL_OK) 
 800ad86:	4808      	ldr	r0, [pc, #32]	@ (800ada8 <BSP_PWM_LED_Init+0xb0>)
 800ad88:	f004 fec0 	bl	800fb0c <HAL_TIM_Base_Init>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d002      	beq.n	800ad98 <BSP_PWM_LED_Init+0xa0>
  {
    ret = BSP_ERROR_NO_INIT;
 800ad92:	f04f 33ff 	mov.w	r3, #4294967295
 800ad96:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800ad98:	697b      	ldr	r3, [r7, #20]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop
 800ada4:	48001c00 	.word	0x48001c00
 800ada8:	200008a0 	.word	0x200008a0
 800adac:	40014800 	.word	0x40014800
 800adb0:	431bde83 	.word	0x431bde83

0800adb4 <BSP_PWM_LED_DeInit>:
/**
  * @brief  DeInitialize PWM LED Driver.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_DeInit(void)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800adba:	2300      	movs	r3, #0
 800adbc:	607b      	str	r3, [r7, #4]

  HAL_GPIO_DeInit(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN);
 800adbe:	2102      	movs	r1, #2
 800adc0:	4810      	ldr	r0, [pc, #64]	@ (800ae04 <BSP_PWM_LED_DeInit+0x50>)
 800adc2:	f002 f805 	bl	800cdd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN);
 800adc6:	2180      	movs	r1, #128	@ 0x80
 800adc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800adcc:	f002 f800 	bl	800cdd0 <HAL_GPIO_DeInit>
  __HAL_TIM_DISABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800add0:	4b0d      	ldr	r3, [pc, #52]	@ (800ae08 <BSP_PWM_LED_DeInit+0x54>)
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	68da      	ldr	r2, [r3, #12]
 800add6:	4b0c      	ldr	r3, [pc, #48]	@ (800ae08 <BSP_PWM_LED_DeInit+0x54>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0201 	bic.w	r2, r2, #1
 800adde:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_DeInit(&PwmLed_TimerHandle) != HAL_OK)
 800ade0:	4809      	ldr	r0, [pc, #36]	@ (800ae08 <BSP_PWM_LED_DeInit+0x54>)
 800ade2:	f004 ff62 	bl	800fcaa <HAL_TIM_PWM_DeInit>
 800ade6:	4603      	mov	r3, r0
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d002      	beq.n	800adf2 <BSP_PWM_LED_DeInit+0x3e>
  {
    ret = BSP_ERROR_UNKNOWN_FAILURE;
 800adec:	f06f 0305 	mvn.w	r3, #5
 800adf0:	607b      	str	r3, [r7, #4]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
#else
    /* TIM17 MSP de-initialization */
    TIM17_MspDeInit(&PwmLed_TimerHandle);
 800adf2:	4805      	ldr	r0, [pc, #20]	@ (800ae08 <BSP_PWM_LED_DeInit+0x54>)
 800adf4:	f000 fa0a 	bl	800b20c <TIM17_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS == 1*/
#if (PA7_AUTO_MANAGEMENT == 1)
    BSP_PWM_LED_Pin_AutoManagement();
#endif /* PA7_AUTO_MANAGEMENT == 1*/
  
  return ret;
 800adf8:	687b      	ldr	r3, [r7, #4]
}
 800adfa:	4618      	mov	r0, r3
 800adfc:	3708      	adds	r7, #8
 800adfe:	46bd      	mov	sp, r7
 800ae00:	bd80      	pop	{r7, pc}
 800ae02:	bf00      	nop
 800ae04:	48001c00 	.word	0x48001c00
 800ae08:	200008a0 	.word	0x200008a0

0800ae0c <BSP_PWM_LED_On>:
  * @brief  Set the GS data (PWM Control) for each output.
  * @param  aPwmLedGsData GS Data array (one element per output)
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_On(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b082      	sub	sp, #8
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  return PWM_LED_WriteData(aPwmLedGsData);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f8d1 	bl	800afbc <PWM_LED_WriteData>
 800ae1a:	4603      	mov	r3, r0
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <BSP_PWM_LED_Off>:
/**
  * @brief  Turn each output Off.
  * @retval BSP error code
  */
int32_t BSP_PWM_LED_Off(void)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
  aPwmLedGsData_TypeDef aPwmLedGsData = {PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF, PWM_LED_GSDATA_OFF};
 800ae2a:	4a08      	ldr	r2, [pc, #32]	@ (800ae4c <BSP_PWM_LED_Off+0x28>)
 800ae2c:	1d3b      	adds	r3, r7, #4
 800ae2e:	6812      	ldr	r2, [r2, #0]
 800ae30:	4611      	mov	r1, r2
 800ae32:	8019      	strh	r1, [r3, #0]
 800ae34:	3302      	adds	r3, #2
 800ae36:	0c12      	lsrs	r2, r2, #16
 800ae38:	701a      	strb	r2, [r3, #0]
  return PWM_LED_WriteData(aPwmLedGsData);
 800ae3a:	1d3b      	adds	r3, r7, #4
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f000 f8bd 	bl	800afbc <PWM_LED_WriteData>
 800ae42:	4603      	mov	r3, r0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}
 800ae4c:	08018418 	.word	0x08018418

0800ae50 <BSP_PWM_LED_IRQHandler>:
/**
  * @brief  BSP PWM LED interrupt handler.
  * @retval None
  */
void BSP_PWM_LED_IRQHandler(void)
{
 800ae50:	b480      	push	{r7}
 800ae52:	af00      	add	r7, sp, #0
  __HAL_TIM_CLEAR_FLAG(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800ae54:	4b07      	ldr	r3, [pc, #28]	@ (800ae74 <BSP_PWM_LED_IRQHandler+0x24>)
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f06f 0201 	mvn.w	r2, #1
 800ae5c:	611a      	str	r2, [r3, #16]
  CycleCount++;
 800ae5e:	4b06      	ldr	r3, [pc, #24]	@ (800ae78 <BSP_PWM_LED_IRQHandler+0x28>)
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	3301      	adds	r3, #1
 800ae64:	4a04      	ldr	r2, [pc, #16]	@ (800ae78 <BSP_PWM_LED_IRQHandler+0x28>)
 800ae66:	6013      	str	r3, [r2, #0]
}
 800ae68:	bf00      	nop
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr
 800ae72:	bf00      	nop
 800ae74:	200008a0 	.word	0x200008a0
 800ae78:	200008ec 	.word	0x200008ec

0800ae7c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability
  * @retval BSP error code
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b088      	sub	sp, #32
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	4603      	mov	r3, r0
 800ae84:	460a      	mov	r2, r1
 800ae86:	71fb      	strb	r3, [r7, #7]
 800ae88:	4613      	mov	r3, r2
 800ae8a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure = {0};
 800ae8c:	f107 030c 	add.w	r3, r7, #12
 800ae90:	2200      	movs	r2, #0
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	605a      	str	r2, [r3, #4]
 800ae96:	609a      	str	r2, [r3, #8]
 800ae98:	60da      	str	r2, [r3, #12]
 800ae9a:	611a      	str	r2, [r3, #16]
  static BSP_EXTI_LineCallback button_callback[BUTTONn] = {BUTTON_USER1_EXTI_Callback, BUTTON_USER2_EXTI_Callback};
  static uint32_t button_interrupt_priority[BUTTONn] = {BSP_BUTTON_USERx_IT_PRIORITY, BSP_BUTTON_USERx_IT_PRIORITY};
  static const uint32_t button_exti_line[BUTTONn] = {BUTTON_USER1_EXTI_LINE, BUTTON_USER2_EXTI_LINE};

  /* Enable the BUTTON Clock */
  BUTTON_USERx_GPIO_CLK_ENABLE(Button);
 800ae9c:	79fb      	ldrb	r3, [r7, #7]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d103      	bne.n	800aeaa <BSP_PB_Init+0x2e>
 800aea2:	2004      	movs	r0, #4
 800aea4:	f7ff fee3 	bl	800ac6e <LL_AHB2_GRP1_EnableClock>
 800aea8:	e005      	b.n	800aeb6 <BSP_PB_Init+0x3a>
 800aeaa:	79fb      	ldrb	r3, [r7, #7]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d102      	bne.n	800aeb6 <BSP_PB_Init+0x3a>
 800aeb0:	2004      	movs	r0, #4
 800aeb2:	f7ff fedc 	bl	800ac6e <LL_AHB2_GRP1_EnableClock>

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	4a29      	ldr	r2, [pc, #164]	@ (800af60 <BSP_PB_Init+0xe4>)
 800aeba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aebe:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800aec0:	2301      	movs	r3, #1
 800aec2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800aec4:	2302      	movs	r3, #2
 800aec6:	61bb      	str	r3, [r7, #24]

  if (ButtonMode == BUTTON_MODE_GPIO)
 800aec8:	79bb      	ldrb	r3, [r7, #6]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10c      	bne.n	800aee8 <BSP_PB_Init+0x6c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800aece:	2300      	movs	r3, #0
 800aed0:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800aed2:	79fb      	ldrb	r3, [r7, #7]
 800aed4:	4a23      	ldr	r2, [pc, #140]	@ (800af64 <BSP_PB_Init+0xe8>)
 800aed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aeda:	f107 020c 	add.w	r2, r7, #12
 800aede:	4611      	mov	r1, r2
 800aee0:	4618      	mov	r0, r3
 800aee2:	f001 fe05 	bl	800caf0 <HAL_GPIO_Init>
 800aee6:	e035      	b.n	800af54 <BSP_PB_Init+0xd8>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_FALLING;
 800aee8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800aeec:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800aeee:	79fb      	ldrb	r3, [r7, #7]
 800aef0:	4a1c      	ldr	r2, [pc, #112]	@ (800af64 <BSP_PB_Init+0xe8>)
 800aef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aef6:	f107 020c 	add.w	r2, r7, #12
 800aefa:	4611      	mov	r1, r2
 800aefc:	4618      	mov	r0, r3
 800aefe:	f001 fdf7 	bl	800caf0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], button_exti_line[Button]);
 800af02:	79fb      	ldrb	r3, [r7, #7]
 800af04:	00db      	lsls	r3, r3, #3
 800af06:	4a18      	ldr	r2, [pc, #96]	@ (800af68 <BSP_PB_Init+0xec>)
 800af08:	441a      	add	r2, r3
 800af0a:	79fb      	ldrb	r3, [r7, #7]
 800af0c:	4917      	ldr	r1, [pc, #92]	@ (800af6c <BSP_PB_Init+0xf0>)
 800af0e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800af12:	4619      	mov	r1, r3
 800af14:	4610      	mov	r0, r2
 800af16:	f001 fceb 	bl	800c8f0 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button], HAL_EXTI_COMMON_CB_ID, button_callback[Button]);
 800af1a:	79fb      	ldrb	r3, [r7, #7]
 800af1c:	00db      	lsls	r3, r3, #3
 800af1e:	4a12      	ldr	r2, [pc, #72]	@ (800af68 <BSP_PB_Init+0xec>)
 800af20:	1898      	adds	r0, r3, r2
 800af22:	79fb      	ldrb	r3, [r7, #7]
 800af24:	4a12      	ldr	r2, [pc, #72]	@ (800af70 <BSP_PB_Init+0xf4>)
 800af26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af2a:	461a      	mov	r2, r3
 800af2c:	2100      	movs	r1, #0
 800af2e:	f001 fcc5 	bl	800c8bc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), button_interrupt_priority[Button], 0x00);
 800af32:	79fb      	ldrb	r3, [r7, #7]
 800af34:	4a0f      	ldr	r2, [pc, #60]	@ (800af74 <BSP_PB_Init+0xf8>)
 800af36:	56d0      	ldrsb	r0, [r2, r3]
 800af38:	79fb      	ldrb	r3, [r7, #7]
 800af3a:	4a0f      	ldr	r2, [pc, #60]	@ (800af78 <BSP_PB_Init+0xfc>)
 800af3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af40:	2200      	movs	r2, #0
 800af42:	4619      	mov	r1, r3
 800af44:	f001 f929 	bl	800c19a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800af48:	79fb      	ldrb	r3, [r7, #7]
 800af4a:	4a0a      	ldr	r2, [pc, #40]	@ (800af74 <BSP_PB_Init+0xf8>)
 800af4c:	56d3      	ldrsb	r3, [r2, r3]
 800af4e:	4618      	mov	r0, r3
 800af50:	f001 f93d 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 800af54:	2300      	movs	r3, #0
}
 800af56:	4618      	mov	r0, r3
 800af58:	3720      	adds	r7, #32
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	08018a70 	.word	0x08018a70
 800af64:	2000007c 	.word	0x2000007c
 800af68:	20000890 	.word	0x20000890
 800af6c:	08018a78 	.word	0x08018a78
 800af70:	20000084 	.word	0x20000084
 800af74:	08018a74 	.word	0x08018a74
 800af78:	2000008c 	.word	0x2000008c

0800af7c <BSP_PB_IRQHandler>:
  *   This parameter should be:
  *     @arg BUTTON_USER1
  * @retval None.
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b082      	sub	sp, #8
 800af80:	af00      	add	r7, sp, #0
 800af82:	4603      	mov	r3, r0
 800af84:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800af86:	79fb      	ldrb	r3, [r7, #7]
 800af88:	00db      	lsls	r3, r3, #3
 800af8a:	4a04      	ldr	r2, [pc, #16]	@ (800af9c <BSP_PB_IRQHandler+0x20>)
 800af8c:	4413      	add	r3, r2
 800af8e:	4618      	mov	r0, r3
 800af90:	f001 fcc2 	bl	800c918 <HAL_EXTI_IRQHandler>
}
 800af94:	bf00      	nop
 800af96:	3708      	adds	r7, #8
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}
 800af9c:	20000890 	.word	0x20000890

0800afa0 <BUTTON_USER1_EXTI_Callback>:
/**
  * @brief  BUTTON1 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER1_EXTI_Callback(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER1);
 800afa4:	2000      	movs	r0, #0
 800afa6:	f7fc f9c3 	bl	8007330 <BSP_PB_Callback>
}
 800afaa:	bf00      	nop
 800afac:	bd80      	pop	{r7, pc}

0800afae <BUTTON_USER2_EXTI_Callback>:
/**
  * @brief  BUTTON2 EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER2_EXTI_Callback(void)
{
 800afae:	b580      	push	{r7, lr}
 800afb0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER2);
 800afb2:	2001      	movs	r0, #1
 800afb4:	f7fc f9bc 	bl	8007330 <BSP_PB_Callback>
}
 800afb8:	bf00      	nop
 800afba:	bd80      	pop	{r7, pc}

0800afbc <PWM_LED_WriteData>:
  * @brief  Write GS data into the PWM LED driver through a single-wire interface
  * @param  aPwmLedGsData GS (Gray Scale) data
  * @retval BSP status
  */
static int32_t PWM_LED_WriteData(aPwmLedGsData_TypeDef aPwmLedGsData)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b084      	sub	sp, #16
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  if (aPwmLedGsData == NULL)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d102      	bne.n	800afd0 <PWM_LED_WriteData+0x14>
  {
    return BSP_ERROR_WRONG_PARAM;
 800afca:	f06f 0301 	mvn.w	r3, #1
 800afce:	e069      	b.n	800b0a4 <PWM_LED_WriteData+0xe8>
  }
  
  __HAL_TIM_ENABLE_IT(&PwmLed_TimerHandle, TIM_IT_UPDATE);
 800afd0:	4b36      	ldr	r3, [pc, #216]	@ (800b0ac <PWM_LED_WriteData+0xf0>)
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	68da      	ldr	r2, [r3, #12]
 800afd6:	4b35      	ldr	r3, [pc, #212]	@ (800b0ac <PWM_LED_WriteData+0xf0>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f042 0201 	orr.w	r2, r2, #1
 800afde:	60da      	str	r2, [r3, #12]
  
  /* Start time base */
  if (HAL_TIM_Base_Start(&PwmLed_TimerHandle) != HAL_OK)
 800afe0:	4832      	ldr	r0, [pc, #200]	@ (800b0ac <PWM_LED_WriteData+0xf0>)
 800afe2:	f004 fdf5 	bl	800fbd0 <HAL_TIM_Base_Start>
 800afe6:	4603      	mov	r3, r0
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <PWM_LED_WriteData+0x36>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 800afec:	f06f 0305 	mvn.w	r3, #5
 800aff0:	e058      	b.n	800b0a4 <PWM_LED_WriteData+0xe8>
  }
  
  /* Enable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800aff2:	2200      	movs	r2, #0
 800aff4:	2102      	movs	r1, #2
 800aff6:	482e      	ldr	r0, [pc, #184]	@ (800b0b0 <PWM_LED_WriteData+0xf4>)
 800aff8:	f001 ffc8 	bl	800cf8c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800affc:	200a      	movs	r0, #10
 800affe:	f7fd fa69 	bl	80084d4 <HAL_Delay>
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_SET);
 800b002:	2201      	movs	r2, #1
 800b004:	2102      	movs	r1, #2
 800b006:	482a      	ldr	r0, [pc, #168]	@ (800b0b0 <PWM_LED_WriteData+0xf4>)
 800b008:	f001 ffc0 	bl	800cf8c <HAL_GPIO_WritePin>
  
  /* TCycle measurement sequence */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800b00c:	2200      	movs	r2, #0
 800b00e:	2180      	movs	r1, #128	@ 0x80
 800b010:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b014:	f001 ffba 	bl	800cf8c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800b018:	2001      	movs	r0, #1
 800b01a:	f000 f8c3 	bl	800b1a4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800b01e:	2201      	movs	r2, #1
 800b020:	2180      	movs	r1, #128	@ 0x80
 800b022:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b026:	f001 ffb1 	bl	800cf8c <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 800b02a:	2004      	movs	r0, #4
 800b02c:	f000 f8ba 	bl	800b1a4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800b030:	2200      	movs	r2, #0
 800b032:	2180      	movs	r1, #128	@ 0x80
 800b034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b038:	f001 ffa8 	bl	800cf8c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800b03c:	2001      	movs	r0, #1
 800b03e:	f000 f8b1 	bl	800b1a4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800b042:	2201      	movs	r2, #1
 800b044:	2180      	movs	r1, #128	@ 0x80
 800b046:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b04a:	f001 ff9f 	bl	800cf8c <HAL_GPIO_WritePin>
  PWM_LED_Wait(T_CYCLE_0);
 800b04e:	2004      	movs	r0, #4
 800b050:	f000 f8a8 	bl	800b1a4 <PWM_LED_Wait>
  
  /* Write command */
  PWM_LED_SenByte(WRITE_COMMAND);
 800b054:	203a      	movs	r0, #58	@ 0x3a
 800b056:	f000 f863 	bl	800b120 <PWM_LED_SenByte>
  
  /* Write the GS data */
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]
 800b05e:	e00f      	b.n	800b080 <PWM_LED_WriteData+0xc4>
  {
    PWM_LED_GSDATA[gsdata] = aPwmLedGsData[gsdata];
 800b060:	7bfb      	ldrb	r3, [r7, #15]
 800b062:	687a      	ldr	r2, [r7, #4]
 800b064:	441a      	add	r2, r3
 800b066:	7bfb      	ldrb	r3, [r7, #15]
 800b068:	7811      	ldrb	r1, [r2, #0]
 800b06a:	4a12      	ldr	r2, [pc, #72]	@ (800b0b4 <PWM_LED_WriteData+0xf8>)
 800b06c:	54d1      	strb	r1, [r2, r3]
    PWM_LED_SenByte(PWM_LED_GSDATA[gsdata]);
 800b06e:	7bfb      	ldrb	r3, [r7, #15]
 800b070:	4a10      	ldr	r2, [pc, #64]	@ (800b0b4 <PWM_LED_WriteData+0xf8>)
 800b072:	5cd3      	ldrb	r3, [r2, r3]
 800b074:	4618      	mov	r0, r3
 800b076:	f000 f853 	bl	800b120 <PWM_LED_SenByte>
  for (uint8_t gsdata = 0; gsdata < PWM_LED_NB; gsdata++)
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
 800b07c:	3301      	adds	r3, #1
 800b07e:	73fb      	strb	r3, [r7, #15]
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	2b02      	cmp	r3, #2
 800b084:	d9ec      	bls.n	800b060 <PWM_LED_WriteData+0xa4>
  }
  
  /* Disable Grayscale (GS) Control */
  HAL_GPIO_WritePin(PWM_LED_SELECT_GPIO_PORT, PWM_LED_SELECT_GPIO_PIN, GPIO_PIN_RESET);
 800b086:	2200      	movs	r2, #0
 800b088:	2102      	movs	r1, #2
 800b08a:	4809      	ldr	r0, [pc, #36]	@ (800b0b0 <PWM_LED_WriteData+0xf4>)
 800b08c:	f001 ff7e 	bl	800cf8c <HAL_GPIO_WritePin>
  
  /* Stop time base */
  if (HAL_TIM_Base_Stop(&PwmLed_TimerHandle) != HAL_OK)
 800b090:	4806      	ldr	r0, [pc, #24]	@ (800b0ac <PWM_LED_WriteData+0xf0>)
 800b092:	f004 fde3 	bl	800fc5c <HAL_TIM_Base_Stop>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <PWM_LED_WriteData+0xe6>
  {
    return BSP_ERROR_UNKNOWN_FAILURE;   
 800b09c:	f06f 0305 	mvn.w	r3, #5
 800b0a0:	e000      	b.n	800b0a4 <PWM_LED_WriteData+0xe8>
  }

  return BSP_ERROR_NONE;
 800b0a2:	2300      	movs	r3, #0
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3710      	adds	r7, #16
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	200008a0 	.word	0x200008a0
 800b0b0:	48001c00 	.word	0x48001c00
 800b0b4:	200008f0 	.word	0x200008f0

0800b0b8 <PWM_LED_SendBit>:
  * @brief  Data 0/1 write sequence
  * @param  bit
  * @retval None
  */
static void PWM_LED_SendBit(uint8_t bit)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	71fb      	strb	r3, [r7, #7]
  /* Start next cycle */
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	2180      	movs	r1, #128	@ 0x80
 800b0c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b0ca:	f001 ff5f 	bl	800cf8c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY); 
 800b0ce:	2001      	movs	r0, #1
 800b0d0:	f000 f868 	bl	800b1a4 <PWM_LED_Wait>
  HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	2180      	movs	r1, #128	@ 0x80
 800b0d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b0dc:	f001 ff56 	bl	800cf8c <HAL_GPIO_WritePin>
  PWM_LED_Wait(DELAY);
 800b0e0:	2001      	movs	r0, #1
 800b0e2:	f000 f85f 	bl	800b1a4 <PWM_LED_Wait>
  
  if (bit)
 800b0e6:	79fb      	ldrb	r3, [r7, #7]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d012      	beq.n	800b112 <PWM_LED_SendBit+0x5a>
  {
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_SET);
 800b0ec:	2201      	movs	r2, #1
 800b0ee:	2180      	movs	r1, #128	@ 0x80
 800b0f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b0f4:	f001 ff4a 	bl	800cf8c <HAL_GPIO_WritePin>
    PWM_LED_Wait(DELAY);
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	f000 f853 	bl	800b1a4 <PWM_LED_Wait>
    HAL_GPIO_WritePin(PWM_LED_SDI_GPIO_PORT, PWM_LED_SDI_GPIO_PIN, GPIO_PIN_RESET);
 800b0fe:	2200      	movs	r2, #0
 800b100:	2180      	movs	r1, #128	@ 0x80
 800b102:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b106:	f001 ff41 	bl	800cf8c <HAL_GPIO_WritePin>
    PWM_LED_Wait(T_CYCLE_1);
 800b10a:	2001      	movs	r0, #1
 800b10c:	f000 f84a 	bl	800b1a4 <PWM_LED_Wait>
  }
  else
  {
    PWM_LED_Wait(T_CYCLE_0);
  }
}
 800b110:	e002      	b.n	800b118 <PWM_LED_SendBit+0x60>
    PWM_LED_Wait(T_CYCLE_0);
 800b112:	2004      	movs	r0, #4
 800b114:	f000 f846 	bl	800b1a4 <PWM_LED_Wait>
}
 800b118:	bf00      	nop
 800b11a:	3708      	adds	r7, #8
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <PWM_LED_SenByte>:
  * @brief  Byte write Sequence
  * @param  byte
  * @retval None
  */
static void PWM_LED_SenByte(uint8_t byte)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
    PWM_LED_SendBit(byte & (1<<7));
 800b12a:	79fb      	ldrb	r3, [r7, #7]
 800b12c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b130:	b2db      	uxtb	r3, r3
 800b132:	4618      	mov	r0, r3
 800b134:	f7ff ffc0 	bl	800b0b8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<6));
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b13e:	b2db      	uxtb	r3, r3
 800b140:	4618      	mov	r0, r3
 800b142:	f7ff ffb9 	bl	800b0b8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<5));
 800b146:	79fb      	ldrb	r3, [r7, #7]
 800b148:	f003 0320 	and.w	r3, r3, #32
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	4618      	mov	r0, r3
 800b150:	f7ff ffb2 	bl	800b0b8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<4));
 800b154:	79fb      	ldrb	r3, [r7, #7]
 800b156:	f003 0310 	and.w	r3, r3, #16
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7ff ffab 	bl	800b0b8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<3));
 800b162:	79fb      	ldrb	r3, [r7, #7]
 800b164:	f003 0308 	and.w	r3, r3, #8
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	4618      	mov	r0, r3
 800b16c:	f7ff ffa4 	bl	800b0b8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<2));
 800b170:	79fb      	ldrb	r3, [r7, #7]
 800b172:	f003 0304 	and.w	r3, r3, #4
 800b176:	b2db      	uxtb	r3, r3
 800b178:	4618      	mov	r0, r3
 800b17a:	f7ff ff9d 	bl	800b0b8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<1));
 800b17e:	79fb      	ldrb	r3, [r7, #7]
 800b180:	f003 0302 	and.w	r3, r3, #2
 800b184:	b2db      	uxtb	r3, r3
 800b186:	4618      	mov	r0, r3
 800b188:	f7ff ff96 	bl	800b0b8 <PWM_LED_SendBit>
    PWM_LED_SendBit(byte & (1<<0));
 800b18c:	79fb      	ldrb	r3, [r7, #7]
 800b18e:	f003 0301 	and.w	r3, r3, #1
 800b192:	b2db      	uxtb	r3, r3
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff ff8f 	bl	800b0b8 <PWM_LED_SendBit>
}
 800b19a:	bf00      	nop
 800b19c:	3708      	adds	r7, #8
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <PWM_LED_Wait>:
  * @brief  Byte write Sequence
  * @param  NbCycles Number of cycles to wait for
  * @retval None
  */
static void PWM_LED_Wait(uint32_t NbCycles)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint32_t start = CycleCount;
 800b1ac:	4b08      	ldr	r3, [pc, #32]	@ (800b1d0 <PWM_LED_Wait+0x2c>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	60fb      	str	r3, [r7, #12]
  
  while ((CycleCount - start) < NbCycles)
 800b1b2:	bf00      	nop
 800b1b4:	4b06      	ldr	r3, [pc, #24]	@ (800b1d0 <PWM_LED_Wait+0x2c>)
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d8f8      	bhi.n	800b1b4 <PWM_LED_Wait+0x10>
  {
  }
}
 800b1c2:	bf00      	nop
 800b1c4:	bf00      	nop
 800b1c6:	3714      	adds	r7, #20
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ce:	4770      	bx	lr
 800b1d0:	200008ec 	.word	0x200008ec

0800b1d4 <TIM17_MspInit>:
  * @brief  Timer MSP initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspInit(TIM_HandleTypeDef *htim)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	4a09      	ldr	r2, [pc, #36]	@ (800b208 <TIM17_MspInit+0x34>)
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d10b      	bne.n	800b1fe <TIM17_MspInit+0x2a>
  {
    PWM_LED_TIM_CLOCK_ENABLE();
 800b1e6:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b1ea:	f7ff fd59 	bl	800aca0 <LL_APB2_GRP1_EnableClock>
    
    HAL_NVIC_SetPriority(PWM_LED_TIM_UP_IRQN, PWM_LED_CLOCK_IT_PRIORITY, 0);
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	2103      	movs	r1, #3
 800b1f2:	201a      	movs	r0, #26
 800b1f4:	f000 ffd1 	bl	800c19a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(PWM_LED_TIM_UP_IRQN);
 800b1f8:	201a      	movs	r0, #26
 800b1fa:	f000 ffe8 	bl	800c1ce <HAL_NVIC_EnableIRQ>
  }
}
 800b1fe:	bf00      	nop
 800b200:	3708      	adds	r7, #8
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	40014800 	.word	0x40014800

0800b20c <TIM17_MspDeInit>:
  * @brief  Timer MSP de-initialization
  * @param  htim Timer instance
  * @retval None
  */
void TIM17_MspDeInit(TIM_HandleTypeDef *htim)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
  if (htim->Instance == PWM_LED_TIM)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	4a06      	ldr	r2, [pc, #24]	@ (800b234 <TIM17_MspDeInit+0x28>)
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d106      	bne.n	800b22c <TIM17_MspDeInit+0x20>
  {
    HAL_NVIC_DisableIRQ(PWM_LED_TIM_UP_IRQN);
 800b21e:	201a      	movs	r0, #26
 800b220:	f000 ffe3 	bl	800c1ea <HAL_NVIC_DisableIRQ>
    PWM_LED_TIM_CLOCK_DISABLE();
 800b224:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800b228:	f7ff fd53 	bl	800acd2 <LL_APB2_GRP1_DisableClock>
  }
}
 800b22c:	bf00      	nop
 800b22e:	3708      	adds	r7, #8
 800b230:	46bd      	mov	sp, r7
 800b232:	bd80      	pop	{r7, pc}
 800b234:	40014800 	.word	0x40014800

0800b238 <LL_AHB2_GRP1_EnableClock>:
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b240:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b244:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b246:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	4313      	orrs	r3, r2
 800b24e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b250:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b254:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4013      	ands	r3, r2
 800b25a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b25c:	68fb      	ldr	r3, [r7, #12]
}
 800b25e:	bf00      	nop
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr

0800b26a <LL_APB2_GRP1_EnableClock>:
{
 800b26a:	b480      	push	{r7}
 800b26c:	b085      	sub	sp, #20
 800b26e:	af00      	add	r7, sp, #0
 800b270:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800b272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b276:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b278:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4313      	orrs	r3, r2
 800b280:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800b282:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b286:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	4013      	ands	r3, r2
 800b28c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b28e:	68fb      	ldr	r3, [r7, #12]
}
 800b290:	bf00      	nop
 800b292:	3714      	adds	r7, #20
 800b294:	46bd      	mov	sp, r7
 800b296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29a:	4770      	bx	lr

0800b29c <BSP_SPI1_Init>:
/**
  * @brief  Initializes SPI HAL.
  * @retval BSP status
  */
int32_t BSP_SPI1_Init(void)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b082      	sub	sp, #8
 800b2a0:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	607b      	str	r3, [r7, #4]

  hbus_spi1.Instance  = BUS_SPI1_INSTANCE;
 800b2a6:	4b11      	ldr	r3, [pc, #68]	@ (800b2ec <BSP_SPI1_Init+0x50>)
 800b2a8:	4a11      	ldr	r2, [pc, #68]	@ (800b2f0 <BSP_SPI1_Init+0x54>)
 800b2aa:	601a      	str	r2, [r3, #0]

  if (HAL_SPI_GetState(&hbus_spi1) == HAL_SPI_STATE_RESET)
 800b2ac:	480f      	ldr	r0, [pc, #60]	@ (800b2ec <BSP_SPI1_Init+0x50>)
 800b2ae:	f004 fabb 	bl	800f828 <HAL_SPI_GetState>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d114      	bne.n	800b2e2 <BSP_SPI1_Init+0x46>
  {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 0)
    /* Init the SPI Msp */
    SPI1_MspInit(&hbus_spi1);
 800b2b8:	480c      	ldr	r0, [pc, #48]	@ (800b2ec <BSP_SPI1_Init+0x50>)
 800b2ba:	f000 f89a 	bl	800b3f2 <SPI1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif
    /* Init the SPI */
    if (MX_SPI1_Init(&hbus_spi1, SPI_GetPrescaler( HAL_RCC_GetPCLK1Freq(), BUS_SPI1_BAUDRATE)) != HAL_OK)
 800b2be:	f003 f86d 	bl	800e39c <HAL_RCC_GetPCLK1Freq>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	490b      	ldr	r1, [pc, #44]	@ (800b2f4 <BSP_SPI1_Init+0x58>)
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f8c4 	bl	800b454 <SPI_GetPrescaler>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	4619      	mov	r1, r3
 800b2d0:	4806      	ldr	r0, [pc, #24]	@ (800b2ec <BSP_SPI1_Init+0x50>)
 800b2d2:	f000 f811 	bl	800b2f8 <MX_SPI1_Init>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <BSP_SPI1_Init+0x46>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800b2dc:	f06f 0307 	mvn.w	r3, #7
 800b2e0:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800b2e2:	687b      	ldr	r3, [r7, #4]
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	200008f4 	.word	0x200008f4
 800b2f0:	40013000 	.word	0x40013000
 800b2f4:	00bebc20 	.word	0x00bebc20

0800b2f8 <MX_SPI1_Init>:
  * @param  phspi             SPI handler
  * @param  BaudratePrescaler prsecaler to set for SPI baudrate
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef* phspi, uint32_t BaudratePrescaler)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]

  phspi->Init.Mode              = SPI_MODE_MASTER;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b30c:	605a      	str	r2, [r3, #4]
  phspi->Init.Direction         = SPI_DIRECTION_2LINES;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	609a      	str	r2, [r3, #8]
  phspi->Init.DataSize          = SPI_DATASIZE_8BIT;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800b31a:	60da      	str	r2, [r3, #12]
  phspi->Init.CLKPolarity       = SPI_POLARITY_HIGH;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	2202      	movs	r2, #2
 800b320:	611a      	str	r2, [r3, #16]
  phspi->Init.CLKPhase          = SPI_PHASE_1EDGE;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2200      	movs	r2, #0
 800b326:	615a      	str	r2, [r3, #20]
  phspi->Init.NSS               = SPI_NSS_SOFT;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b32e:	619a      	str	r2, [r3, #24]
  phspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2210      	movs	r2, #16
 800b334:	61da      	str	r2, [r3, #28]
  phspi->Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2200      	movs	r2, #0
 800b33a:	621a      	str	r2, [r3, #32]
  phspi->Init.TIMode            = SPI_TIMODE_DISABLE;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	625a      	str	r2, [r3, #36]	@ 0x24
  phspi->Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2200      	movs	r2, #0
 800b346:	629a      	str	r2, [r3, #40]	@ 0x28
  phspi->Init.CRCPolynomial     = 7;
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2207      	movs	r2, #7
 800b34c:	62da      	str	r2, [r3, #44]	@ 0x2c

  if(HAL_SPI_Init(phspi) != HAL_OK)
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f003 fe28 	bl	800efa4 <HAL_SPI_Init>
 800b354:	4603      	mov	r3, r0
 800b356:	2b00      	cmp	r3, #0
 800b358:	d001      	beq.n	800b35e <MX_SPI1_Init+0x66>
  {
    ret = HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b35e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3710      	adds	r7, #16
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <BSP_SPI1_Send>:
  * @param  pData  Pointer to data buffer to send
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI1_Send(uint8_t *pData, uint16_t Length)
{  
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	460b      	mov	r3, r1
 800b372:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800b374:	2300      	movs	r3, #0
 800b376:	60fb      	str	r3, [r7, #12]
  
  if(HAL_SPI_Transmit(&hbus_spi1, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 800b378:	887a      	ldrh	r2, [r7, #2]
 800b37a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800b37e:	6879      	ldr	r1, [r7, #4]
 800b380:	4806      	ldr	r0, [pc, #24]	@ (800b39c <BSP_SPI1_Send+0x34>)
 800b382:	f003 febc 	bl	800f0fe <HAL_SPI_Transmit>
 800b386:	4603      	mov	r3, r0
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d101      	bne.n	800b390 <BSP_SPI1_Send+0x28>
  {
    ret = BSP_ERROR_NONE;
 800b38c:	2300      	movs	r3, #0
 800b38e:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800b390:	68fb      	ldr	r3, [r7, #12]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3710      	adds	r7, #16
 800b396:	46bd      	mov	sp, r7
 800b398:	bd80      	pop	{r7, pc}
 800b39a:	bf00      	nop
 800b39c:	200008f4 	.word	0x200008f4

0800b3a0 <BSP_SPI1_Recv>:
  * @param  pData  Pointer to data buffer to receive
  * @param  Length Length of data in byte
  * @retval BSP status
  */
int32_t  BSP_SPI1_Recv(uint8_t *pData, uint16_t Length)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b086      	sub	sp, #24
 800b3a4:	af02      	add	r7, sp, #8
 800b3a6:	6078      	str	r0, [r7, #4]
 800b3a8:	460b      	mov	r3, r1
 800b3aa:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 800b3ac:	f06f 0305 	mvn.w	r3, #5
 800b3b0:	60fb      	str	r3, [r7, #12]
  uint32_t tx_data = 0xFFFFFFFFU;
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b6:	60bb      	str	r3, [r7, #8]

  if(HAL_SPI_TransmitReceive(&hbus_spi1, (uint8_t*)&tx_data, pData, Length, BUS_SPI1_TIMEOUT) == HAL_OK)
 800b3b8:	887b      	ldrh	r3, [r7, #2]
 800b3ba:	f107 0108 	add.w	r1, r7, #8
 800b3be:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800b3c2:	9200      	str	r2, [sp, #0]
 800b3c4:	687a      	ldr	r2, [r7, #4]
 800b3c6:	4806      	ldr	r0, [pc, #24]	@ (800b3e0 <BSP_SPI1_Recv+0x40>)
 800b3c8:	f004 f80f 	bl	800f3ea <HAL_SPI_TransmitReceive>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d101      	bne.n	800b3d6 <BSP_SPI1_Recv+0x36>
  {
    ret = BSP_ERROR_NONE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
  }
  return ret;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3710      	adds	r7, #16
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	200008f4 	.word	0x200008f4

0800b3e4 <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b3e8:	f000 fd72 	bl	800bed0 <HAL_GetTick>
 800b3ec:	4603      	mov	r3, r0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	bd80      	pop	{r7, pc}

0800b3f2 <SPI1_MspInit>:
  * @brief  Initializes SPI MSP.
  * @param  hspi  SPI handler
  * @retval None
  */
static void SPI1_MspInit(SPI_HandleTypeDef* hspi)
{
 800b3f2:	b580      	push	{r7, lr}
 800b3f4:	b088      	sub	sp, #32
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock  */
  BUS_SPI1_CLOCK_ENABLE();
 800b3fa:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 800b3fe:	f7ff ff34 	bl	800b26a <LL_APB2_GRP1_EnableClock>

  /* enable SPIx gpio clock */
  BUS_SPI1_GPIO_CLKA_ENABLE();
 800b402:	2001      	movs	r0, #1
 800b404:	f7ff ff18 	bl	800b238 <LL_AHB2_GRP1_EnableClock>

  /* configure SPIx SCK, MOSI */
  GPIO_InitStructure.Pin       = BUS_SPI1_MOSI_PIN;
 800b408:	2380      	movs	r3, #128	@ 0x80
 800b40a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800b40c:	2302      	movs	r3, #2
 800b40e:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800b410:	2302      	movs	r3, #2
 800b412:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 800b414:	2300      	movs	r3, #0
 800b416:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 800b418:	2305      	movs	r3, #5
 800b41a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 800b41c:	f107 030c 	add.w	r3, r7, #12
 800b420:	4619      	mov	r1, r3
 800b422:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b426:	f001 fb63 	bl	800caf0 <HAL_GPIO_Init>
  
  GPIO_InitStructure.Pin       = BUS_SPI1_SCK_PIN;
 800b42a:	2302      	movs	r3, #2
 800b42c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructure.Mode      = GPIO_MODE_AF_PP;
 800b42e:	2302      	movs	r3, #2
 800b430:	613b      	str	r3, [r7, #16]
  GPIO_InitStructure.Pull      = GPIO_PULLDOWN;
 800b432:	2302      	movs	r3, #2
 800b434:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Speed     = GPIO_SPEED_FREQ_LOW;
 800b436:	2300      	movs	r3, #0
 800b438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Alternate = BUS_SPI1_AF;
 800b43a:	2305      	movs	r3, #5
 800b43c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUS_SPI1_GPIO_PORTA, &GPIO_InitStructure);
 800b43e:	f107 030c 	add.w	r3, r7, #12
 800b442:	4619      	mov	r1, r3
 800b444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800b448:	f001 fb52 	bl	800caf0 <HAL_GPIO_Init>

}
 800b44c:	bf00      	nop
 800b44e:	3720      	adds	r7, #32
 800b450:	46bd      	mov	sp, r7
 800b452:	bd80      	pop	{r7, pc}

0800b454 <SPI_GetPrescaler>:
  * @param  clock_src_freq : SPI source clock in HZ.
  * @param  baudfreq_mbps : SPI baud freq in mbps.
  * @retval Prescaler divisor
  */
static uint32_t SPI_GetPrescaler( uint32_t clock_src_freq, uint32_t baudfreq_mbps )
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
 800b45c:	6039      	str	r1, [r7, #0]
  uint32_t divisor = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	617b      	str	r3, [r7, #20]
  uint32_t spi_clk = clock_src_freq;
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	613b      	str	r3, [r7, #16]
  uint32_t presc = 0;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while( spi_clk > baudfreq_mbps)
 800b46a:	e00d      	b.n	800b488 <SPI_GetPrescaler+0x34>
  {
    presc = baudfreq[divisor];
 800b46c:	4a0d      	ldr	r2, [pc, #52]	@ (800b4a4 <SPI_GetPrescaler+0x50>)
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b474:	60fb      	str	r3, [r7, #12]
    if (++divisor > 7U)
 800b476:	697b      	ldr	r3, [r7, #20]
 800b478:	3301      	adds	r3, #1
 800b47a:	617b      	str	r3, [r7, #20]
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	2b07      	cmp	r3, #7
 800b480:	d807      	bhi.n	800b492 <SPI_GetPrescaler+0x3e>
      break;

    spi_clk= ( spi_clk >> 1);
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	085b      	lsrs	r3, r3, #1
 800b486:	613b      	str	r3, [r7, #16]
  while( spi_clk > baudfreq_mbps)
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d8ed      	bhi.n	800b46c <SPI_GetPrescaler+0x18>
 800b490:	e000      	b.n	800b494 <SPI_GetPrescaler+0x40>
      break;
 800b492:	bf00      	nop
  }

  return presc;
 800b494:	68fb      	ldr	r3, [r7, #12]
}
 800b496:	4618      	mov	r0, r3
 800b498:	371c      	adds	r7, #28
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	08018a80 	.word	0x08018a80

0800b4a8 <LL_AHB2_GRP1_EnableClock>:
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b085      	sub	sp, #20
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800b4b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	4313      	orrs	r3, r2
 800b4be:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800b4c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800b4c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	4013      	ands	r3, r2
 800b4ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
}
 800b4ce:	bf00      	nop
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
	...

0800b4dc <BSP_LCD_Init>:
  * @param  Instance LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b084      	sub	sp, #16
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	60fb      	str	r3, [r7, #12]

  if (Instance >= LCD_INSTANCES_NBR )
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d003      	beq.n	800b4f8 <BSP_LCD_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b4f0:	f06f 0301 	mvn.w	r3, #1
 800b4f4:	60fb      	str	r3, [r7, #12]
 800b4f6:	e032      	b.n	800b55e <BSP_LCD_Init+0x82>
  }
  else
  {
    if(Orientation == LCD_ORIENTATION_LANDSCAPE)
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d113      	bne.n	800b526 <BSP_LCD_Init+0x4a>
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_WIDTH;
 800b4fe:	491a      	ldr	r1, [pc, #104]	@ (800b568 <BSP_LCD_Init+0x8c>)
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	4613      	mov	r3, r2
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	4413      	add	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	440b      	add	r3, r1
 800b50c:	2280      	movs	r2, #128	@ 0x80
 800b50e:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_HEIGHT;
 800b510:	4915      	ldr	r1, [pc, #84]	@ (800b568 <BSP_LCD_Init+0x8c>)
 800b512:	687a      	ldr	r2, [r7, #4]
 800b514:	4613      	mov	r3, r2
 800b516:	005b      	lsls	r3, r3, #1
 800b518:	4413      	add	r3, r2
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	440b      	add	r3, r1
 800b51e:	3304      	adds	r3, #4
 800b520:	2240      	movs	r2, #64	@ 0x40
 800b522:	601a      	str	r2, [r3, #0]
 800b524:	e012      	b.n	800b54c <BSP_LCD_Init+0x70>
    }
    else
    {
      LcdCtx[Instance].Width  = LCD_DEFAULT_HEIGHT;
 800b526:	4910      	ldr	r1, [pc, #64]	@ (800b568 <BSP_LCD_Init+0x8c>)
 800b528:	687a      	ldr	r2, [r7, #4]
 800b52a:	4613      	mov	r3, r2
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	4413      	add	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	440b      	add	r3, r1
 800b534:	2240      	movs	r2, #64	@ 0x40
 800b536:	601a      	str	r2, [r3, #0]
      LcdCtx[Instance].Height = LCD_DEFAULT_WIDTH;
 800b538:	490b      	ldr	r1, [pc, #44]	@ (800b568 <BSP_LCD_Init+0x8c>)
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	4613      	mov	r3, r2
 800b53e:	005b      	lsls	r3, r3, #1
 800b540:	4413      	add	r3, r2
 800b542:	009b      	lsls	r3, r3, #2
 800b544:	440b      	add	r3, r1
 800b546:	3304      	adds	r3, #4
 800b548:	2280      	movs	r2, #128	@ 0x80
 800b54a:	601a      	str	r2, [r3, #0]
    }
    
    /* registers the function and initialize the controller */
    if(SSD1315_Probe(Orientation) != BSP_ERROR_NONE)
 800b54c:	6838      	ldr	r0, [r7, #0]
 800b54e:	f000 fb27 	bl	800bba0 <SSD1315_Probe>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <BSP_LCD_Init+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800b558:	f06f 0306 	mvn.w	r3, #6
 800b55c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b55e:	68fb      	ldr	r3, [r7, #12]
}
 800b560:	4618      	mov	r0, r3
 800b562:	3710      	adds	r7, #16
 800b564:	46bd      	mov	sp, r7
 800b566:	bd80      	pop	{r7, pc}
 800b568:	2000095c 	.word	0x2000095c

0800b56c <BSP_LCD_GetPixelFormat>:
  * @param  Instance LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b085      	sub	sp, #20
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b576:	2300      	movs	r3, #0
 800b578:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d003      	beq.n	800b588 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b580:	f06f 0301 	mvn.w	r3, #1
 800b584:	60fb      	str	r3, [r7, #12]
 800b586:	e002      	b.n	800b58e <BSP_LCD_GetPixelFormat+0x22>
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b588:	f06f 030a 	mvn.w	r3, #10
 800b58c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b58e:	68fb      	ldr	r3, [r7, #12]
}
 800b590:	4618      	mov	r0, r3
 800b592:	3714      	adds	r7, #20
 800b594:	46bd      	mov	sp, r7
 800b596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59a:	4770      	bx	lr

0800b59c <BSP_LCD_GetXSize>:
  * @param  Instance LCD Instance
  * @param  pXSize pointer to Used LCD X size
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *pXSize)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b084      	sub	sp, #16
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
 800b5a4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b5b0:	f06f 0301 	mvn.w	r3, #1
 800b5b4:	60fb      	str	r3, [r7, #12]
 800b5b6:	e01d      	b.n	800b5f4 <BSP_LCD_GetXSize+0x58>
  }
  else if(LcdDrv->GetXSize != NULL)
 800b5b8:	4b11      	ldr	r3, [pc, #68]	@ (800b600 <BSP_LCD_GetXSize+0x64>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00e      	beq.n	800b5e0 <BSP_LCD_GetXSize+0x44>
  {
    if(LcdDrv->GetXSize(LcdCompObj, pXSize) < 0)
 800b5c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b600 <BSP_LCD_GetXSize+0x64>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b5c8:	4a0e      	ldr	r2, [pc, #56]	@ (800b604 <BSP_LCD_GetXSize+0x68>)
 800b5ca:	6812      	ldr	r2, [r2, #0]
 800b5cc:	6839      	ldr	r1, [r7, #0]
 800b5ce:	4610      	mov	r0, r2
 800b5d0:	4798      	blx	r3
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	da0d      	bge.n	800b5f4 <BSP_LCD_GetXSize+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b5d8:	f06f 0304 	mvn.w	r3, #4
 800b5dc:	60fb      	str	r3, [r7, #12]
 800b5de:	e009      	b.n	800b5f4 <BSP_LCD_GetXSize+0x58>
    }
  }
  else
  {
    *pXSize = LcdCtx[Instance].Width;
 800b5e0:	4909      	ldr	r1, [pc, #36]	@ (800b608 <BSP_LCD_GetXSize+0x6c>)
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	4613      	mov	r3, r2
 800b5e6:	005b      	lsls	r3, r3, #1
 800b5e8:	4413      	add	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	440b      	add	r3, r1
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3710      	adds	r7, #16
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}
 800b5fe:	bf00      	nop
 800b600:	20000968 	.word	0x20000968
 800b604:	20000958 	.word	0x20000958
 800b608:	2000095c 	.word	0x2000095c

0800b60c <BSP_LCD_GetYSize>:
  * @param  Instance LCD Instance
  * @param  pYSize pointer to Used LCD Y size
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *pYSize)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
 800b614:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b620:	f06f 0301 	mvn.w	r3, #1
 800b624:	60fb      	str	r3, [r7, #12]
 800b626:	e01e      	b.n	800b666 <BSP_LCD_GetYSize+0x5a>
  }
  else if(LcdDrv->GetYSize != NULL)
 800b628:	4b11      	ldr	r3, [pc, #68]	@ (800b670 <BSP_LCD_GetYSize+0x64>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d00e      	beq.n	800b650 <BSP_LCD_GetYSize+0x44>
  {
    if(LcdDrv->GetYSize(LcdCompObj, pYSize) < 0)
 800b632:	4b0f      	ldr	r3, [pc, #60]	@ (800b670 <BSP_LCD_GetYSize+0x64>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b638:	4a0e      	ldr	r2, [pc, #56]	@ (800b674 <BSP_LCD_GetYSize+0x68>)
 800b63a:	6812      	ldr	r2, [r2, #0]
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	4610      	mov	r0, r2
 800b640:	4798      	blx	r3
 800b642:	4603      	mov	r3, r0
 800b644:	2b00      	cmp	r3, #0
 800b646:	da0e      	bge.n	800b666 <BSP_LCD_GetYSize+0x5a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b648:	f06f 0304 	mvn.w	r3, #4
 800b64c:	60fb      	str	r3, [r7, #12]
 800b64e:	e00a      	b.n	800b666 <BSP_LCD_GetYSize+0x5a>
    }
  }
  else
  {
    *pYSize = LcdCtx[Instance].Height;
 800b650:	4909      	ldr	r1, [pc, #36]	@ (800b678 <BSP_LCD_GetYSize+0x6c>)
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	4613      	mov	r3, r2
 800b656:	005b      	lsls	r3, r3, #1
 800b658:	4413      	add	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	440b      	add	r3, r1
 800b65e:	3304      	adds	r3, #4
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800b666:	68fb      	ldr	r3, [r7, #12]
}
 800b668:	4618      	mov	r0, r3
 800b66a:	3710      	adds	r7, #16
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000968 	.word	0x20000968
 800b674:	20000958 	.word	0x20000958
 800b678:	2000095c 	.word	0x2000095c

0800b67c <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b684:	2300      	movs	r3, #0
 800b686:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d003      	beq.n	800b696 <BSP_LCD_DisplayOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b68e:	f06f 0301 	mvn.w	r3, #1
 800b692:	60fb      	str	r3, [r7, #12]
 800b694:	e015      	b.n	800b6c2 <BSP_LCD_DisplayOn+0x46>
  }
  else if(LcdDrv->DisplayOn != NULL)
 800b696:	4b0d      	ldr	r3, [pc, #52]	@ (800b6cc <BSP_LCD_DisplayOn+0x50>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00d      	beq.n	800b6bc <BSP_LCD_DisplayOn+0x40>
  {
    if(LcdDrv->DisplayOn(LcdCompObj) < 0)
 800b6a0:	4b0a      	ldr	r3, [pc, #40]	@ (800b6cc <BSP_LCD_DisplayOn+0x50>)
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	4a0a      	ldr	r2, [pc, #40]	@ (800b6d0 <BSP_LCD_DisplayOn+0x54>)
 800b6a8:	6812      	ldr	r2, [r2, #0]
 800b6aa:	4610      	mov	r0, r2
 800b6ac:	4798      	blx	r3
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	da06      	bge.n	800b6c2 <BSP_LCD_DisplayOn+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b6b4:	f06f 0304 	mvn.w	r3, #4
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	e002      	b.n	800b6c2 <BSP_LCD_DisplayOn+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b6bc:	f06f 030a 	mvn.w	r3, #10
 800b6c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
}
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}
 800b6cc:	20000968 	.word	0x20000968
 800b6d0:	20000958 	.word	0x20000958

0800b6d4 <BSP_LCD_Refresh>:
  * @brief  Refresh the display.
  * @param  Instance LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_Refresh(uint32_t Instance)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d003      	beq.n	800b6ee <BSP_LCD_Refresh+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b6e6:	f06f 0301 	mvn.w	r3, #1
 800b6ea:	60fb      	str	r3, [r7, #12]
 800b6ec:	e015      	b.n	800b71a <BSP_LCD_Refresh+0x46>
  }
  else if(LcdDrv->Refresh != NULL)
 800b6ee:	4b0d      	ldr	r3, [pc, #52]	@ (800b724 <BSP_LCD_Refresh+0x50>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d00d      	beq.n	800b714 <BSP_LCD_Refresh+0x40>
  {
    if(LcdDrv->Refresh(LcdCompObj) < 0)
 800b6f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b724 <BSP_LCD_Refresh+0x50>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fe:	4a0a      	ldr	r2, [pc, #40]	@ (800b728 <BSP_LCD_Refresh+0x54>)
 800b700:	6812      	ldr	r2, [r2, #0]
 800b702:	4610      	mov	r0, r2
 800b704:	4798      	blx	r3
 800b706:	4603      	mov	r3, r0
 800b708:	2b00      	cmp	r3, #0
 800b70a:	da06      	bge.n	800b71a <BSP_LCD_Refresh+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b70c:	f06f 0304 	mvn.w	r3, #4
 800b710:	60fb      	str	r3, [r7, #12]
 800b712:	e002      	b.n	800b71a <BSP_LCD_Refresh+0x46>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b714:	f06f 030a 	mvn.w	r3, #10
 800b718:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800b71a:	68fb      	ldr	r3, [r7, #12]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3710      	adds	r7, #16
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	20000968 	.word	0x20000968
 800b728:	20000958 	.word	0x20000958

0800b72c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800b72c:	b590      	push	{r4, r7, lr}
 800b72e:	b087      	sub	sp, #28
 800b730:	af00      	add	r7, sp, #0
 800b732:	60f8      	str	r0, [r7, #12]
 800b734:	60b9      	str	r1, [r7, #8]
 800b736:	607a      	str	r2, [r7, #4]
 800b738:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b73a:	2300      	movs	r3, #0
 800b73c:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d003      	beq.n	800b74c <BSP_LCD_DrawBitmap+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b744:	f06f 0301 	mvn.w	r3, #1
 800b748:	617b      	str	r3, [r7, #20]
 800b74a:	e017      	b.n	800b77c <BSP_LCD_DrawBitmap+0x50>
  }
  else if(LcdDrv->DrawBitmap != NULL)
 800b74c:	4b0e      	ldr	r3, [pc, #56]	@ (800b788 <BSP_LCD_DrawBitmap+0x5c>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00f      	beq.n	800b776 <BSP_LCD_DrawBitmap+0x4a>
  {
    /* Draw the bitmap on LCD */
    if (LcdDrv->DrawBitmap(LcdCompObj, Xpos, Ypos, pBmp) < 0)
 800b756:	4b0c      	ldr	r3, [pc, #48]	@ (800b788 <BSP_LCD_DrawBitmap+0x5c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800b75c:	4b0b      	ldr	r3, [pc, #44]	@ (800b78c <BSP_LCD_DrawBitmap+0x60>)
 800b75e:	6818      	ldr	r0, [r3, #0]
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	68b9      	ldr	r1, [r7, #8]
 800b766:	47a0      	blx	r4
 800b768:	4603      	mov	r3, r0
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	da06      	bge.n	800b77c <BSP_LCD_DrawBitmap+0x50>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b76e:	f06f 0304 	mvn.w	r3, #4
 800b772:	617b      	str	r3, [r7, #20]
 800b774:	e002      	b.n	800b77c <BSP_LCD_DrawBitmap+0x50>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b776:	f06f 030a 	mvn.w	r3, #10
 800b77a:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b77c:	697b      	ldr	r3, [r7, #20]
}
 800b77e:	4618      	mov	r0, r3
 800b780:	371c      	adds	r7, #28
 800b782:	46bd      	mov	sp, r7
 800b784:	bd90      	pop	{r4, r7, pc}
 800b786:	bf00      	nop
 800b788:	20000968 	.word	0x20000968
 800b78c:	20000958 	.word	0x20000958

0800b790 <BSP_LCD_FillRGBRect>:
  * @param  Width width of the rectangle to fill.
  * @param  Height height of the rectangle to fill.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b089      	sub	sp, #36	@ 0x24
 800b794:	af02      	add	r7, sp, #8
 800b796:	60f8      	str	r0, [r7, #12]
 800b798:	60b9      	str	r1, [r7, #8]
 800b79a:	607a      	str	r2, [r7, #4]
 800b79c:	603b      	str	r3, [r7, #0]
   int32_t ret = BSP_ERROR_NONE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d003      	beq.n	800b7b0 <BSP_LCD_FillRGBRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b7a8:	f06f 0301 	mvn.w	r3, #1
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	e01b      	b.n	800b7e8 <BSP_LCD_FillRGBRect+0x58>
  }
  else if(LcdDrv->FillRGBRect != NULL)
 800b7b0:	4b10      	ldr	r3, [pc, #64]	@ (800b7f4 <BSP_LCD_FillRGBRect+0x64>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d013      	beq.n	800b7e2 <BSP_LCD_FillRGBRect+0x52>
  {
    /* shift bitmap on LCD */
    if (LcdDrv->FillRGBRect(LcdCompObj, Xpos, Ypos, pData, Width, Height) < 0)
 800b7ba:	4b0e      	ldr	r3, [pc, #56]	@ (800b7f4 <BSP_LCD_FillRGBRect+0x64>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800b7c0:	4b0d      	ldr	r3, [pc, #52]	@ (800b7f8 <BSP_LCD_FillRGBRect+0x68>)
 800b7c2:	6818      	ldr	r0, [r3, #0]
 800b7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7c6:	9301      	str	r3, [sp, #4]
 800b7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	683b      	ldr	r3, [r7, #0]
 800b7ce:	687a      	ldr	r2, [r7, #4]
 800b7d0:	68b9      	ldr	r1, [r7, #8]
 800b7d2:	47a0      	blx	r4
 800b7d4:	4603      	mov	r3, r0
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	da06      	bge.n	800b7e8 <BSP_LCD_FillRGBRect+0x58>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b7da:	f06f 0304 	mvn.w	r3, #4
 800b7de:	617b      	str	r3, [r7, #20]
 800b7e0:	e002      	b.n	800b7e8 <BSP_LCD_FillRGBRect+0x58>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b7e2:	f06f 030a 	mvn.w	r3, #10
 800b7e6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b7e8:	697b      	ldr	r3, [r7, #20]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	371c      	adds	r7, #28
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd90      	pop	{r4, r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20000968 	.word	0x20000968
 800b7f8:	20000958 	.word	0x20000958

0800b7fc <BSP_LCD_DrawHLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800b7fc:	b590      	push	{r4, r7, lr}
 800b7fe:	b089      	sub	sp, #36	@ 0x24
 800b800:	af02      	add	r7, sp, #8
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d003      	beq.n	800b81c <BSP_LCD_DrawHLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b814:	f06f 0301 	mvn.w	r3, #1
 800b818:	617b      	str	r3, [r7, #20]
 800b81a:	e019      	b.n	800b850 <BSP_LCD_DrawHLine+0x54>
  }

  else if(LcdDrv->DrawHLine != NULL)
 800b81c:	4b0f      	ldr	r3, [pc, #60]	@ (800b85c <BSP_LCD_DrawHLine+0x60>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b822:	2b00      	cmp	r3, #0
 800b824:	d011      	beq.n	800b84a <BSP_LCD_DrawHLine+0x4e>
  {
    /* Draw the horizontal line on LCD */
    if (LcdDrv->DrawHLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 800b826:	4b0d      	ldr	r3, [pc, #52]	@ (800b85c <BSP_LCD_DrawHLine+0x60>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800b82c:	4b0c      	ldr	r3, [pc, #48]	@ (800b860 <BSP_LCD_DrawHLine+0x64>)
 800b82e:	6818      	ldr	r0, [r3, #0]
 800b830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b832:	9300      	str	r3, [sp, #0]
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	68b9      	ldr	r1, [r7, #8]
 800b83a:	47a0      	blx	r4
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	da06      	bge.n	800b850 <BSP_LCD_DrawHLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b842:	f06f 0304 	mvn.w	r3, #4
 800b846:	617b      	str	r3, [r7, #20]
 800b848:	e002      	b.n	800b850 <BSP_LCD_DrawHLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b84a:	f06f 030a 	mvn.w	r3, #10
 800b84e:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b850:	697b      	ldr	r3, [r7, #20]
}
 800b852:	4618      	mov	r0, r3
 800b854:	371c      	adds	r7, #28
 800b856:	46bd      	mov	sp, r7
 800b858:	bd90      	pop	{r4, r7, pc}
 800b85a:	bf00      	nop
 800b85c:	20000968 	.word	0x20000968
 800b860:	20000958 	.word	0x20000958

0800b864 <BSP_LCD_DrawVLine>:
  * @param  Length Line length
  * @param  Color Line color
  * @retval BSP status
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b089      	sub	sp, #36	@ 0x24
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	60b9      	str	r1, [r7, #8]
 800b86e:	607a      	str	r2, [r7, #4]
 800b870:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b872:	2300      	movs	r3, #0
 800b874:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d003      	beq.n	800b884 <BSP_LCD_DrawVLine+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b87c:	f06f 0301 	mvn.w	r3, #1
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e019      	b.n	800b8b8 <BSP_LCD_DrawVLine+0x54>
  }
  else if(LcdDrv->DrawVLine != NULL)
 800b884:	4b0f      	ldr	r3, [pc, #60]	@ (800b8c4 <BSP_LCD_DrawVLine+0x60>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d011      	beq.n	800b8b2 <BSP_LCD_DrawVLine+0x4e>
  {
    /* Draw the vertical line on LCD */
    if (LcdDrv->DrawVLine(LcdCompObj, Xpos, Ypos, Length, Color) < 0)
 800b88e:	4b0d      	ldr	r3, [pc, #52]	@ (800b8c4 <BSP_LCD_DrawVLine+0x60>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
 800b894:	4b0c      	ldr	r3, [pc, #48]	@ (800b8c8 <BSP_LCD_DrawVLine+0x64>)
 800b896:	6818      	ldr	r0, [r3, #0]
 800b898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	68b9      	ldr	r1, [r7, #8]
 800b8a2:	47a0      	blx	r4
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	da06      	bge.n	800b8b8 <BSP_LCD_DrawVLine+0x54>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b8aa:	f06f 0304 	mvn.w	r3, #4
 800b8ae:	617b      	str	r3, [r7, #20]
 800b8b0:	e002      	b.n	800b8b8 <BSP_LCD_DrawVLine+0x54>
    }
  }
  else
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800b8b2:	f06f 030a 	mvn.w	r3, #10
 800b8b6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800b8b8:	697b      	ldr	r3, [r7, #20]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	bd90      	pop	{r4, r7, pc}
 800b8c2:	bf00      	nop
 800b8c4:	20000968 	.word	0x20000968
 800b8c8:	20000958 	.word	0x20000958

0800b8cc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Color of rectangle
  * @retval BSP status
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800b8cc:	b590      	push	{r4, r7, lr}
 800b8ce:	b089      	sub	sp, #36	@ 0x24
 800b8d0:	af02      	add	r7, sp, #8
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	607a      	str	r2, [r7, #4]
 800b8d8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <BSP_LCD_FillRect+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b8e4:	f06f 0301 	mvn.w	r3, #1
 800b8e8:	617b      	str	r3, [r7, #20]
 800b8ea:	e012      	b.n	800b912 <BSP_LCD_FillRect+0x46>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, Xpos, Ypos, Width, Height, Color) < 0)
 800b8ec:	4b0b      	ldr	r3, [pc, #44]	@ (800b91c <BSP_LCD_FillRect+0x50>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800b8f2:	4b0b      	ldr	r3, [pc, #44]	@ (800b920 <BSP_LCD_FillRect+0x54>)
 800b8f4:	6818      	ldr	r0, [r3, #0]
 800b8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8fc:	9300      	str	r3, [sp, #0]
 800b8fe:	683b      	ldr	r3, [r7, #0]
 800b900:	687a      	ldr	r2, [r7, #4]
 800b902:	68b9      	ldr	r1, [r7, #8]
 800b904:	47a0      	blx	r4
 800b906:	4603      	mov	r3, r0
 800b908:	2b00      	cmp	r3, #0
 800b90a:	da02      	bge.n	800b912 <BSP_LCD_FillRect+0x46>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b90c:	f06f 0304 	mvn.w	r3, #4
 800b910:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b912:	697b      	ldr	r3, [r7, #20]
}
 800b914:	4618      	mov	r0, r3
 800b916:	371c      	adds	r7, #28
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd90      	pop	{r4, r7, pc}
 800b91c:	20000968 	.word	0x20000968
 800b920:	20000958 	.word	0x20000958

0800b924 <BSP_LCD_Clear>:
  * @param  Instance LCD Instance
  * @param  Color to set
  * @retval BSP status
  */
int32_t BSP_LCD_Clear(uint32_t Instance, uint32_t Color)
{
 800b924:	b5b0      	push	{r4, r5, r7, lr}
 800b926:	b086      	sub	sp, #24
 800b928:	af02      	add	r7, sp, #8
 800b92a:	6078      	str	r0, [r7, #4]
 800b92c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d003      	beq.n	800b940 <BSP_LCD_Clear+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b938:	f06f 0301 	mvn.w	r3, #1
 800b93c:	60fb      	str	r3, [r7, #12]
 800b93e:	e022      	b.n	800b986 <BSP_LCD_Clear+0x62>
  }
  else
  {
    if(LcdDrv->FillRect(LcdCompObj, 0, 0, LcdCtx[Instance].Width, LcdCtx[Instance].Height, Color) < 0)
 800b940:	4b13      	ldr	r3, [pc, #76]	@ (800b990 <BSP_LCD_Clear+0x6c>)
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 800b946:	4b13      	ldr	r3, [pc, #76]	@ (800b994 <BSP_LCD_Clear+0x70>)
 800b948:	6818      	ldr	r0, [r3, #0]
 800b94a:	4913      	ldr	r1, [pc, #76]	@ (800b998 <BSP_LCD_Clear+0x74>)
 800b94c:	687a      	ldr	r2, [r7, #4]
 800b94e:	4613      	mov	r3, r2
 800b950:	005b      	lsls	r3, r3, #1
 800b952:	4413      	add	r3, r2
 800b954:	009b      	lsls	r3, r3, #2
 800b956:	440b      	add	r3, r1
 800b958:	6819      	ldr	r1, [r3, #0]
 800b95a:	4d0f      	ldr	r5, [pc, #60]	@ (800b998 <BSP_LCD_Clear+0x74>)
 800b95c:	687a      	ldr	r2, [r7, #4]
 800b95e:	4613      	mov	r3, r2
 800b960:	005b      	lsls	r3, r3, #1
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	442b      	add	r3, r5
 800b968:	3304      	adds	r3, #4
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	9201      	str	r2, [sp, #4]
 800b970:	9300      	str	r3, [sp, #0]
 800b972:	460b      	mov	r3, r1
 800b974:	2200      	movs	r2, #0
 800b976:	2100      	movs	r1, #0
 800b978:	47a0      	blx	r4
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	da02      	bge.n	800b986 <BSP_LCD_Clear+0x62>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b980:	f06f 0304 	mvn.w	r3, #4
 800b984:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800b986:	68fb      	ldr	r3, [r7, #12]
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bdb0      	pop	{r4, r5, r7, pc}
 800b990:	20000968 	.word	0x20000968
 800b994:	20000958 	.word	0x20000958
 800b998:	2000095c 	.word	0x2000095c

0800b99c <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color pointer to RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800b99c:	b590      	push	{r4, r7, lr}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d003      	beq.n	800b9bc <BSP_LCD_ReadPixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800b9b4:	f06f 0301 	mvn.w	r3, #1
 800b9b8:	617b      	str	r3, [r7, #20]
 800b9ba:	e00e      	b.n	800b9da <BSP_LCD_ReadPixel+0x3e>
  }
  else
  {
    if(LcdDrv->GetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 800b9bc:	4b09      	ldr	r3, [pc, #36]	@ (800b9e4 <BSP_LCD_ReadPixel+0x48>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6d9c      	ldr	r4, [r3, #88]	@ 0x58
 800b9c2:	4b09      	ldr	r3, [pc, #36]	@ (800b9e8 <BSP_LCD_ReadPixel+0x4c>)
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	68b9      	ldr	r1, [r7, #8]
 800b9cc:	47a0      	blx	r4
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	da02      	bge.n	800b9da <BSP_LCD_ReadPixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800b9d4:	f06f 0304 	mvn.w	r3, #4
 800b9d8:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800b9da:	697b      	ldr	r3, [r7, #20]
}
 800b9dc:	4618      	mov	r0, r3
 800b9de:	371c      	adds	r7, #28
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd90      	pop	{r4, r7, pc}
 800b9e4:	20000968 	.word	0x20000968
 800b9e8:	20000958 	.word	0x20000958

0800b9ec <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t  BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800b9ec:	b590      	push	{r4, r7, lr}
 800b9ee:	b087      	sub	sp, #28
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	60f8      	str	r0, [r7, #12]
 800b9f4:	60b9      	str	r1, [r7, #8]
 800b9f6:	607a      	str	r2, [r7, #4]
 800b9f8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	617b      	str	r3, [r7, #20]

  if(Instance >= LCD_INSTANCES_NBR)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d003      	beq.n	800ba0c <BSP_LCD_WritePixel+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ba04:	f06f 0301 	mvn.w	r3, #1
 800ba08:	617b      	str	r3, [r7, #20]
 800ba0a:	e00e      	b.n	800ba2a <BSP_LCD_WritePixel+0x3e>
  }
  else
  {
    if(LcdDrv->SetPixel(LcdCompObj, Xpos, Ypos, Color) < 0)
 800ba0c:	4b09      	ldr	r3, [pc, #36]	@ (800ba34 <BSP_LCD_WritePixel+0x48>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	6ddc      	ldr	r4, [r3, #92]	@ 0x5c
 800ba12:	4b09      	ldr	r3, [pc, #36]	@ (800ba38 <BSP_LCD_WritePixel+0x4c>)
 800ba14:	6818      	ldr	r0, [r3, #0]
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	68b9      	ldr	r1, [r7, #8]
 800ba1c:	47a0      	blx	r4
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	da02      	bge.n	800ba2a <BSP_LCD_WritePixel+0x3e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ba24:	f06f 0304 	mvn.w	r3, #4
 800ba28:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800ba2a:	697b      	ldr	r3, [r7, #20]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	371c      	adds	r7, #28
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd90      	pop	{r4, r7, pc}
 800ba34:	20000968 	.word	0x20000968
 800ba38:	20000958 	.word	0x20000958

0800ba3c <BSP_LCD_WriteReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_WriteReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	b084      	sub	sp, #16
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	4603      	mov	r3, r0
 800ba44:	6039      	str	r1, [r7, #0]
 800ba46:	80fb      	strh	r3, [r7, #6]
 800ba48:	4613      	mov	r3, r2
 800ba4a:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	60fb      	str	r3, [r7, #12]

  /* Send Data */
  if((ret == BSP_ERROR_NONE) && (Length > 0U))
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d10d      	bne.n	800ba72 <BSP_LCD_WriteReg+0x36>
 800ba56:	88bb      	ldrh	r3, [r7, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d00a      	beq.n	800ba72 <BSP_LCD_WriteReg+0x36>
  {
    if(BSP_LCD_SendData(pData, Length) != BSP_ERROR_NONE)
 800ba5c:	88bb      	ldrh	r3, [r7, #4]
 800ba5e:	4619      	mov	r1, r3
 800ba60:	6838      	ldr	r0, [r7, #0]
 800ba62:	f000 f80b 	bl	800ba7c <BSP_LCD_SendData>
 800ba66:	4603      	mov	r3, r0
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d002      	beq.n	800ba72 <BSP_LCD_WriteReg+0x36>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800ba6c:	f06f 0307 	mvn.w	r3, #7
 800ba70:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800ba72:	68fb      	ldr	r3, [r7, #12]
}
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <BSP_LCD_SendData>:
  * @param  pData pointer to data to write to LCD SRAM.
  * @param  Length length of data to write to LCD SRAM
  * @retval Error status
  */
int32_t BSP_LCD_SendData(uint8_t *pData, uint16_t Length)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	460b      	mov	r3, r1
 800ba86:	807b      	strh	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 800ba88:	2300      	movs	r3, #0
 800ba8a:	60fb      	str	r3, [r7, #12]
  if(Length==1)
 800ba8c:	887b      	ldrh	r3, [r7, #2]
 800ba8e:	2b01      	cmp	r3, #1
 800ba90:	d11b      	bne.n	800baca <BSP_LCD_SendData+0x4e>
  {
    /* Reset LCD control line CS */
    LCD_CS_LOW();
 800ba92:	2200      	movs	r2, #0
 800ba94:	2101      	movs	r1, #1
 800ba96:	4820      	ldr	r0, [pc, #128]	@ (800bb18 <BSP_LCD_SendData+0x9c>)
 800ba98:	f001 fa78 	bl	800cf8c <HAL_GPIO_WritePin>
    LCD_DC_LOW();
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800baa2:	481e      	ldr	r0, [pc, #120]	@ (800bb1c <BSP_LCD_SendData+0xa0>)
 800baa4:	f001 fa72 	bl	800cf8c <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 800baa8:	887b      	ldrh	r3, [r7, #2]
 800baaa:	4619      	mov	r1, r3
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	f7ff fc5b 	bl	800b368 <BSP_SPI1_Send>
 800bab2:	4603      	mov	r3, r0
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d002      	beq.n	800babe <BSP_LCD_SendData+0x42>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 800bab8:	f06f 0307 	mvn.w	r3, #7
 800babc:	60fb      	str	r3, [r7, #12]
    }
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 800babe:	2201      	movs	r2, #1
 800bac0:	2101      	movs	r1, #1
 800bac2:	4815      	ldr	r0, [pc, #84]	@ (800bb18 <BSP_LCD_SendData+0x9c>)
 800bac4:	f001 fa62 	bl	800cf8c <HAL_GPIO_WritePin>
 800bac8:	e020      	b.n	800bb0c <BSP_LCD_SendData+0x90>
  }
  else
  { 
    LCD_CS_LOW();
 800baca:	2200      	movs	r2, #0
 800bacc:	2101      	movs	r1, #1
 800bace:	4812      	ldr	r0, [pc, #72]	@ (800bb18 <BSP_LCD_SendData+0x9c>)
 800bad0:	f001 fa5c 	bl	800cf8c <HAL_GPIO_WritePin>
    LCD_DC_HIGH();
 800bad4:	2201      	movs	r2, #1
 800bad6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bada:	4810      	ldr	r0, [pc, #64]	@ (800bb1c <BSP_LCD_SendData+0xa0>)
 800badc:	f001 fa56 	bl	800cf8c <HAL_GPIO_WritePin>
      /* Send Data */
      if(BSP_SPI1_Send(pData, Length)!= BSP_ERROR_NONE)
 800bae0:	887b      	ldrh	r3, [r7, #2]
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7ff fc3f 	bl	800b368 <BSP_SPI1_Send>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d002      	beq.n	800baf6 <BSP_LCD_SendData+0x7a>
    {
        ret = BSP_ERROR_BUS_FAILURE;
 800baf0:	f06f 0307 	mvn.w	r3, #7
 800baf4:	60fb      	str	r3, [r7, #12]
    }
    LCD_DC_LOW() ;
 800baf6:	2200      	movs	r2, #0
 800baf8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bafc:	4807      	ldr	r0, [pc, #28]	@ (800bb1c <BSP_LCD_SendData+0xa0>)
 800bafe:	f001 fa45 	bl	800cf8c <HAL_GPIO_WritePin>
    /* Deselect : Chip Select high */
    LCD_CS_HIGH();
 800bb02:	2201      	movs	r2, #1
 800bb04:	2101      	movs	r1, #1
 800bb06:	4804      	ldr	r0, [pc, #16]	@ (800bb18 <BSP_LCD_SendData+0x9c>)
 800bb08:	f001 fa40 	bl	800cf8c <HAL_GPIO_WritePin>
  }
  
  return ret;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3710      	adds	r7, #16
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
 800bb16:	bf00      	nop
 800bb18:	48001c00 	.word	0x48001c00
 800bb1c:	48000800 	.word	0x48000800

0800bb20 <BSP_LCD_ReadReg>:
  * @param  pData pointer to the read data from LCD SRAM.
  * @param  Length length of data be read from the LCD SRAM
  * @retval BSP status
  */
int32_t BSP_LCD_ReadReg(uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	4603      	mov	r3, r0
 800bb28:	6039      	str	r1, [r7, #0]
 800bb2a:	80fb      	strh	r3, [r7, #6]
 800bb2c:	4613      	mov	r3, r2
 800bb2e:	80bb      	strh	r3, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800bb30:	2300      	movs	r3, #0
 800bb32:	60fb      	str	r3, [r7, #12]
  UNUSED(Length);
  
  /* Send Reg value to Read */
  if(BSP_LCD_WriteReg(Reg, pData, 0) != BSP_ERROR_NONE)
 800bb34:	88fb      	ldrh	r3, [r7, #6]
 800bb36:	2200      	movs	r2, #0
 800bb38:	6839      	ldr	r1, [r7, #0]
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7ff ff7e 	bl	800ba3c <BSP_LCD_WriteReg>
 800bb40:	4603      	mov	r3, r0
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d002      	beq.n	800bb4c <BSP_LCD_ReadReg+0x2c>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bb46:	f06f 0307 	mvn.w	r3, #7
 800bb4a:	60fb      	str	r3, [r7, #12]
  }
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	2101      	movs	r1, #1
 800bb50:	480c      	ldr	r0, [pc, #48]	@ (800bb84 <BSP_LCD_ReadReg+0x64>)
 800bb52:	f001 fa1b 	bl	800cf8c <HAL_GPIO_WritePin>
  
  if (ret == BSP_ERROR_NONE)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d109      	bne.n	800bb70 <BSP_LCD_ReadReg+0x50>
  { 
    if(BSP_SPI1_Recv(pData, 2) != BSP_ERROR_NONE)
 800bb5c:	2102      	movs	r1, #2
 800bb5e:	6838      	ldr	r0, [r7, #0]
 800bb60:	f7ff fc1e 	bl	800b3a0 <BSP_SPI1_Recv>
 800bb64:	4603      	mov	r3, r0
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d002      	beq.n	800bb70 <BSP_LCD_ReadReg+0x50>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800bb6a:	f06f 0307 	mvn.w	r3, #7
 800bb6e:	60fb      	str	r3, [r7, #12]
    }
  }
  /* Deselect : Chip Select high */
  LCD_CS_HIGH();
 800bb70:	2201      	movs	r2, #1
 800bb72:	2101      	movs	r1, #1
 800bb74:	4803      	ldr	r0, [pc, #12]	@ (800bb84 <BSP_LCD_ReadReg+0x64>)
 800bb76:	f001 fa09 	bl	800cf8c <HAL_GPIO_WritePin>
  
  return ret;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3710      	adds	r7, #16
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	48001c00 	.word	0x48001c00

0800bb88 <LCD_MspInit>:
/**
  * @brief  Initialize the BSP LTDC Msp.
  * @retval None
  */
static void LCD_MspInit(void)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	af00      	add	r7, sp, #0
  /* turn LCD on = drive pin low (active low) */
  LCD_CS_LOW();
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	2101      	movs	r1, #1
 800bb90:	4802      	ldr	r0, [pc, #8]	@ (800bb9c <LCD_MspInit+0x14>)
 800bb92:	f001 f9fb 	bl	800cf8c <HAL_GPIO_WritePin>
}
 800bb96:	bf00      	nop
 800bb98:	bd80      	pop	{r7, pc}
 800bb9a:	bf00      	nop
 800bb9c:	48001c00 	.word	0x48001c00

0800bba0 <SSD1315_Probe>:
  * @brief  Register Bus IOs for instance 0 if SSD1315 ID is OK
  * @param  Orientation
  * @retval BSP status
  */
static int32_t SSD1315_Probe(uint32_t Orientation)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b088      	sub	sp, #32
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  int32_t                 ret = BSP_ERROR_NONE;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	61fb      	str	r3, [r7, #28]
  SSD1315_IO_t            IOCtx;
  static SSD1315_Object_t SSD1315Obj;
  
  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 800bbac:	4b18      	ldr	r3, [pc, #96]	@ (800bc10 <SSD1315_Probe+0x70>)
 800bbae:	60bb      	str	r3, [r7, #8]
  IOCtx.DeInit           = LCD_IO_DeInit;
 800bbb0:	4b18      	ldr	r3, [pc, #96]	@ (800bc14 <SSD1315_Probe+0x74>)
 800bbb2:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg          = BSP_LCD_ReadReg;
 800bbb4:	4b18      	ldr	r3, [pc, #96]	@ (800bc18 <SSD1315_Probe+0x78>)
 800bbb6:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg         = BSP_LCD_WriteReg;
 800bbb8:	4b18      	ldr	r3, [pc, #96]	@ (800bc1c <SSD1315_Probe+0x7c>)
 800bbba:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick          = BSP_GetTick;
 800bbbc:	4b18      	ldr	r3, [pc, #96]	@ (800bc20 <SSD1315_Probe+0x80>)
 800bbbe:	61bb      	str	r3, [r7, #24]
  
  if(SSD1315_RegisterBusIO(&SSD1315Obj, &IOCtx) != SSD1315_OK)
 800bbc0:	f107 0308 	add.w	r3, r7, #8
 800bbc4:	4619      	mov	r1, r3
 800bbc6:	4817      	ldr	r0, [pc, #92]	@ (800bc24 <SSD1315_Probe+0x84>)
 800bbc8:	f7fe f854 	bl	8009c74 <SSD1315_RegisterBusIO>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d003      	beq.n	800bbda <SSD1315_Probe+0x3a>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800bbd2:	f06f 0306 	mvn.w	r3, #6
 800bbd6:	61fb      	str	r3, [r7, #28]
 800bbd8:	e015      	b.n	800bc06 <SSD1315_Probe+0x66>
  }
  else
  {
    LcdCompObj = &SSD1315Obj;
 800bbda:	4b13      	ldr	r3, [pc, #76]	@ (800bc28 <SSD1315_Probe+0x88>)
 800bbdc:	4a11      	ldr	r2, [pc, #68]	@ (800bc24 <SSD1315_Probe+0x84>)
 800bbde:	601a      	str	r2, [r3, #0]
    
    LCD_MspInit();
 800bbe0:	f7ff ffd2 	bl	800bb88 <LCD_MspInit>
    
    /* LCD Initialization */
    LcdDrv = (SSD1315_Drv_t *)&SSD1315_Driver;
 800bbe4:	4b11      	ldr	r3, [pc, #68]	@ (800bc2c <SSD1315_Probe+0x8c>)
 800bbe6:	4a12      	ldr	r2, [pc, #72]	@ (800bc30 <SSD1315_Probe+0x90>)
 800bbe8:	601a      	str	r2, [r3, #0]
    if(LcdDrv->Init(LcdCompObj, SSD1315_FORMAT_DEFAULT, Orientation) != SSD1315_OK)
 800bbea:	4b10      	ldr	r3, [pc, #64]	@ (800bc2c <SSD1315_Probe+0x8c>)
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a0d      	ldr	r2, [pc, #52]	@ (800bc28 <SSD1315_Probe+0x88>)
 800bbf2:	6810      	ldr	r0, [r2, #0]
 800bbf4:	687a      	ldr	r2, [r7, #4]
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	4798      	blx	r3
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d002      	beq.n	800bc06 <SSD1315_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bc00:	f06f 0304 	mvn.w	r3, #4
 800bc04:	61fb      	str	r3, [r7, #28]
    }
  }
  
  return ret;
 800bc06:	69fb      	ldr	r3, [r7, #28]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3720      	adds	r7, #32
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	0800bc35 	.word	0x0800bc35
 800bc14:	0800bcf9 	.word	0x0800bcf9
 800bc18:	0800bb21 	.word	0x0800bb21
 800bc1c:	0800ba3d 	.word	0x0800ba3d
 800bc20:	0800b3e5 	.word	0x0800b3e5
 800bc24:	2000096c 	.word	0x2000096c
 800bc28:	20000958 	.word	0x20000958
 800bc2c:	20000968 	.word	0x20000968
 800bc30:	20000014 	.word	0x20000014

0800bc34 <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b086      	sub	sp, #24
 800bc38:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	617b      	str	r3, [r7, #20]
  
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Configure the LCD Chip Select pin --------------------------------------*/
  LCD_CS_GPIO_CLK_ENABLE();
 800bc3e:	2080      	movs	r0, #128	@ 0x80
 800bc40:	f7ff fc32 	bl	800b4a8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_CS_PIN;
 800bc44:	2301      	movs	r3, #1
 800bc46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800bc48:	2301      	movs	r3, #1
 800bc4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800bc50:	2300      	movs	r3, #0
 800bc52:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_CS_GPIO_PORT, &GPIO_InitStruct);
 800bc54:	463b      	mov	r3, r7
 800bc56:	4619      	mov	r1, r3
 800bc58:	4825      	ldr	r0, [pc, #148]	@ (800bcf0 <LCD_IO_Init+0xbc>)
 800bc5a:	f000 ff49 	bl	800caf0 <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_CS_LOW();
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2101      	movs	r1, #1
 800bc62:	4823      	ldr	r0, [pc, #140]	@ (800bcf0 <LCD_IO_Init+0xbc>)
 800bc64:	f001 f992 	bl	800cf8c <HAL_GPIO_WritePin>
  
  /* Configure the LCD Data/Control pin -------------------------------------*/
  LCD_DC_GPIO_CLK_ENABLE();
 800bc68:	2004      	movs	r0, #4
 800bc6a:	f7ff fc1d 	bl	800b4a8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_DC_PIN;
 800bc6e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bc72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800bc74:	2301      	movs	r3, #1
 800bc76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_DC_GPIO_PORT, &GPIO_InitStruct);
 800bc80:	463b      	mov	r3, r7
 800bc82:	4619      	mov	r1, r3
 800bc84:	481b      	ldr	r0, [pc, #108]	@ (800bcf4 <LCD_IO_Init+0xc0>)
 800bc86:	f000 ff33 	bl	800caf0 <HAL_GPIO_Init>
  
  /* Set or Reset the control line */
  LCD_DC_LOW();
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bc90:	4818      	ldr	r0, [pc, #96]	@ (800bcf4 <LCD_IO_Init+0xc0>)
 800bc92:	f001 f97b 	bl	800cf8c <HAL_GPIO_WritePin>
  
  /* Configure the LCD Reset pin --------------------------------------------*/
  LCD_RST_GPIO_CLK_ENABLE();
 800bc96:	2004      	movs	r0, #4
 800bc98:	f7ff fc06 	bl	800b4a8 <LL_AHB2_GRP1_EnableClock>
  
  /* Configure NCS in Output Push-Pull mode */
  GPIO_InitStruct.Pin     = LCD_RST_PIN;
 800bc9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800bca0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode    = GPIO_MODE_OUTPUT_PP;
 800bca2:	2301      	movs	r3, #1
 800bca4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull    = GPIO_NOPULL;
 800bca6:	2300      	movs	r3, #0
 800bca8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed   = GPIO_SPEED_FREQ_LOW;
 800bcaa:	2300      	movs	r3, #0
 800bcac:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(LCD_RST_GPIO_PORT, &GPIO_InitStruct);
 800bcae:	463b      	mov	r3, r7
 800bcb0:	4619      	mov	r1, r3
 800bcb2:	4810      	ldr	r0, [pc, #64]	@ (800bcf4 <LCD_IO_Init+0xc0>)
 800bcb4:	f000 ff1c 	bl	800caf0 <HAL_GPIO_Init>
  
  if (BSP_SPI1_Init() != BSP_ERROR_NONE)
 800bcb8:	f7ff faf0 	bl	800b29c <BSP_SPI1_Init>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d002      	beq.n	800bcc8 <LCD_IO_Init+0x94>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800bcc2:	f06f 0307 	mvn.w	r3, #7
 800bcc6:	617b      	str	r3, [r7, #20]
  }
  LCD_RST_LOW();
 800bcc8:	2200      	movs	r2, #0
 800bcca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bcce:	4809      	ldr	r0, [pc, #36]	@ (800bcf4 <LCD_IO_Init+0xc0>)
 800bcd0:	f001 f95c 	bl	800cf8c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800bcd4:	2001      	movs	r0, #1
 800bcd6:	f7fc fbfd 	bl	80084d4 <HAL_Delay>
  LCD_RST_HIGH();
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bce0:	4804      	ldr	r0, [pc, #16]	@ (800bcf4 <LCD_IO_Init+0xc0>)
 800bce2:	f001 f953 	bl	800cf8c <HAL_GPIO_WritePin>
  return ret;
 800bce6:	697b      	ldr	r3, [r7, #20]
}
 800bce8:	4618      	mov	r0, r3
 800bcea:	3718      	adds	r7, #24
 800bcec:	46bd      	mov	sp, r7
 800bcee:	bd80      	pop	{r7, pc}
 800bcf0:	48001c00 	.word	0x48001c00
 800bcf4:	48000800 	.word	0x48000800

0800bcf8 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	af00      	add	r7, sp, #0
  HAL_GPIO_DeInit(LCD_CS_GPIO_PORT, LCD_CS_PIN);
 800bcfc:	2101      	movs	r1, #1
 800bcfe:	4808      	ldr	r0, [pc, #32]	@ (800bd20 <LCD_IO_DeInit+0x28>)
 800bd00:	f001 f866 	bl	800cdd0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(LCD_DC_GPIO_PORT, LCD_DC_PIN);
 800bd04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800bd08:	4806      	ldr	r0, [pc, #24]	@ (800bd24 <LCD_IO_DeInit+0x2c>)
 800bd0a:	f001 f861 	bl	800cdd0 <HAL_GPIO_DeInit>
  /* Uninitialize LCD Reset Pin */  
  HAL_GPIO_DeInit(LCD_RST_GPIO_PORT, LCD_RST_PIN);
 800bd0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800bd12:	4804      	ldr	r0, [pc, #16]	@ (800bd24 <LCD_IO_DeInit+0x2c>)
 800bd14:	f001 f85c 	bl	800cdd0 <HAL_GPIO_DeInit>

  return BSP_ERROR_NONE;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	48001c00 	.word	0x48001c00
 800bd24:	48000800 	.word	0x48000800

0800bd28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 800bd2c:	4b26      	ldr	r3, [pc, #152]	@ (800bdc8 <SystemInit+0xa0>)
 800bd2e:	2200      	movs	r2, #0
 800bd30:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 800bd32:	4b25      	ldr	r3, [pc, #148]	@ (800bdc8 <SystemInit+0xa0>)
 800bd34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800bd38:	4a23      	ldr	r2, [pc, #140]	@ (800bdc8 <SystemInit+0xa0>)
 800bd3a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800bd3e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800bd42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd4c:	f043 0301 	orr.w	r3, r3, #1
 800bd50:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 800bd52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd56:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 800bd5a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800bd5c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd60:	681a      	ldr	r2, [r3, #0]
 800bd62:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800bd66:	4b19      	ldr	r3, [pc, #100]	@ (800bdcc <SystemInit+0xa4>)
 800bd68:	4013      	ands	r3, r2
 800bd6a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800bd6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bd74:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd78:	f023 0305 	bic.w	r3, r3, #5
 800bd7c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800bd80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd88:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bd8c:	f023 0301 	bic.w	r3, r3, #1
 800bd90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 800bd94:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bd98:	4a0d      	ldr	r2, [pc, #52]	@ (800bdd0 <SystemInit+0xa8>)
 800bd9a:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800bd9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda0:	4a0b      	ldr	r2, [pc, #44]	@ (800bdd0 <SystemInit+0xa8>)
 800bda2:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800bda4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800bdae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bdb2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800bdb4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800bdb8:	2200      	movs	r2, #0
 800bdba:	619a      	str	r2, [r3, #24]
}
 800bdbc:	bf00      	nop
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr
 800bdc6:	bf00      	nop
 800bdc8:	e000ed00 	.word	0xe000ed00
 800bdcc:	faf6fefb 	.word	0xfaf6fefb
 800bdd0:	22041000 	.word	0x22041000

0800bdd4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800bdd8:	4b05      	ldr	r3, [pc, #20]	@ (800bdf0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	4a04      	ldr	r2, [pc, #16]	@ (800bdf0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800bdde:	f043 0301 	orr.w	r3, r3, #1
 800bde2:	6053      	str	r3, [r2, #4]
}
 800bde4:	bf00      	nop
 800bde6:	46bd      	mov	sp, r7
 800bde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdec:	4770      	bx	lr
 800bdee:	bf00      	nop
 800bdf0:	e0042000 	.word	0xe0042000

0800bdf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bdf4:	b580      	push	{r7, lr}
 800bdf6:	b082      	sub	sp, #8
 800bdf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800bdfe:	4b0c      	ldr	r3, [pc, #48]	@ (800be30 <HAL_Init+0x3c>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	4a0b      	ldr	r2, [pc, #44]	@ (800be30 <HAL_Init+0x3c>)
 800be04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be08:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800be0a:	2003      	movs	r0, #3
 800be0c:	f000 f9ba 	bl	800c184 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800be10:	2000      	movs	r0, #0
 800be12:	f000 f80f 	bl	800be34 <HAL_InitTick>
 800be16:	4603      	mov	r3, r0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d002      	beq.n	800be22 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	71fb      	strb	r3, [r7, #7]
 800be20:	e001      	b.n	800be26 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800be22:	f7fc fbf7 	bl	8008614 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800be26:	79fb      	ldrb	r3, [r7, #7]
}
 800be28:	4618      	mov	r0, r3
 800be2a:	3708      	adds	r7, #8
 800be2c:	46bd      	mov	sp, r7
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	58004000 	.word	0x58004000

0800be34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 800be40:	4b17      	ldr	r3, [pc, #92]	@ (800bea0 <HAL_InitTick+0x6c>)
 800be42:	781b      	ldrb	r3, [r3, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d024      	beq.n	800be92 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800be48:	f002 fa94 	bl	800e374 <HAL_RCC_GetHCLKFreq>
 800be4c:	4602      	mov	r2, r0
 800be4e:	4b14      	ldr	r3, [pc, #80]	@ (800bea0 <HAL_InitTick+0x6c>)
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	4619      	mov	r1, r3
 800be54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800be58:	fbb3 f3f1 	udiv	r3, r3, r1
 800be5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be60:	4618      	mov	r0, r3
 800be62:	f000 f9d0 	bl	800c206 <HAL_SYSTICK_Config>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d10f      	bne.n	800be8c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2b0f      	cmp	r3, #15
 800be70:	d809      	bhi.n	800be86 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800be72:	2200      	movs	r2, #0
 800be74:	6879      	ldr	r1, [r7, #4]
 800be76:	f04f 30ff 	mov.w	r0, #4294967295
 800be7a:	f000 f98e 	bl	800c19a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800be7e:	4a09      	ldr	r2, [pc, #36]	@ (800bea4 <HAL_InitTick+0x70>)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6013      	str	r3, [r2, #0]
 800be84:	e007      	b.n	800be96 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800be86:	2301      	movs	r3, #1
 800be88:	73fb      	strb	r3, [r7, #15]
 800be8a:	e004      	b.n	800be96 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800be8c:	2301      	movs	r3, #1
 800be8e:	73fb      	strb	r3, [r7, #15]
 800be90:	e001      	b.n	800be96 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800be92:	2301      	movs	r3, #1
 800be94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800be96:	7bfb      	ldrb	r3, [r7, #15]
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3710      	adds	r7, #16
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	2000009c 	.word	0x2000009c
 800bea4:	20000098 	.word	0x20000098

0800bea8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800bea8:	b480      	push	{r7}
 800beaa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800beac:	4b06      	ldr	r3, [pc, #24]	@ (800bec8 <HAL_IncTick+0x20>)
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	461a      	mov	r2, r3
 800beb2:	4b06      	ldr	r3, [pc, #24]	@ (800becc <HAL_IncTick+0x24>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4413      	add	r3, r2
 800beb8:	4a04      	ldr	r2, [pc, #16]	@ (800becc <HAL_IncTick+0x24>)
 800beba:	6013      	str	r3, [r2, #0]
}
 800bebc:	bf00      	nop
 800bebe:	46bd      	mov	sp, r7
 800bec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec4:	4770      	bx	lr
 800bec6:	bf00      	nop
 800bec8:	2000009c 	.word	0x2000009c
 800becc:	20000994 	.word	0x20000994

0800bed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800bed0:	b480      	push	{r7}
 800bed2:	af00      	add	r7, sp, #0
  return uwTick;
 800bed4:	4b03      	ldr	r3, [pc, #12]	@ (800bee4 <HAL_GetTick+0x14>)
 800bed6:	681b      	ldr	r3, [r3, #0]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
 800bee2:	bf00      	nop
 800bee4:	20000994 	.word	0x20000994

0800bee8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800bee8:	b480      	push	{r7}
 800beea:	af00      	add	r7, sp, #0
  return uwTickPrio;
 800beec:	4b03      	ldr	r3, [pc, #12]	@ (800befc <HAL_GetTickPrio+0x14>)
 800beee:	681b      	ldr	r3, [r3, #0]
}
 800bef0:	4618      	mov	r0, r3
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	20000098 	.word	0x20000098

0800bf00 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 800bf00:	b480      	push	{r7}
 800bf02:	af00      	add	r7, sp, #0
  return uwTickFreq;
 800bf04:	4b03      	ldr	r3, [pc, #12]	@ (800bf14 <HAL_GetTickFreq+0x14>)
 800bf06:	781b      	ldrb	r3, [r3, #0]
}
 800bf08:	4618      	mov	r0, r3
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf10:	4770      	bx	lr
 800bf12:	bf00      	nop
 800bf14:	2000009c 	.word	0x2000009c

0800bf18 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 800bf1c:	f7ff ff5a 	bl	800bdd4 <LL_DBGMCU_EnableDBGSleepMode>
}
 800bf20:	bf00      	nop
 800bf22:	bd80      	pop	{r7, pc}

0800bf24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800bf24:	b480      	push	{r7}
 800bf26:	b085      	sub	sp, #20
 800bf28:	af00      	add	r7, sp, #0
 800bf2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	f003 0307 	and.w	r3, r3, #7
 800bf32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800bf34:	4b0c      	ldr	r3, [pc, #48]	@ (800bf68 <__NVIC_SetPriorityGrouping+0x44>)
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800bf40:	4013      	ands	r3, r2
 800bf42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800bf48:	68bb      	ldr	r3, [r7, #8]
 800bf4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800bf4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800bf50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bf54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800bf56:	4a04      	ldr	r2, [pc, #16]	@ (800bf68 <__NVIC_SetPriorityGrouping+0x44>)
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	60d3      	str	r3, [r2, #12]
}
 800bf5c:	bf00      	nop
 800bf5e:	3714      	adds	r7, #20
 800bf60:	46bd      	mov	sp, r7
 800bf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf66:	4770      	bx	lr
 800bf68:	e000ed00 	.word	0xe000ed00

0800bf6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800bf70:	4b04      	ldr	r3, [pc, #16]	@ (800bf84 <__NVIC_GetPriorityGrouping+0x18>)
 800bf72:	68db      	ldr	r3, [r3, #12]
 800bf74:	0a1b      	lsrs	r3, r3, #8
 800bf76:	f003 0307 	and.w	r3, r3, #7
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	e000ed00 	.word	0xe000ed00

0800bf88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800bf88:	b480      	push	{r7}
 800bf8a:	b083      	sub	sp, #12
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	4603      	mov	r3, r0
 800bf90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bf92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	db0b      	blt.n	800bfb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bf9a:	79fb      	ldrb	r3, [r7, #7]
 800bf9c:	f003 021f 	and.w	r2, r3, #31
 800bfa0:	4907      	ldr	r1, [pc, #28]	@ (800bfc0 <__NVIC_EnableIRQ+0x38>)
 800bfa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfa6:	095b      	lsrs	r3, r3, #5
 800bfa8:	2001      	movs	r0, #1
 800bfaa:	fa00 f202 	lsl.w	r2, r0, r2
 800bfae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800bfb2:	bf00      	nop
 800bfb4:	370c      	adds	r7, #12
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	e000e100 	.word	0xe000e100

0800bfc4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800bfc4:	b480      	push	{r7}
 800bfc6:	b083      	sub	sp, #12
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	4603      	mov	r3, r0
 800bfcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bfce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	db12      	blt.n	800bffc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
 800bfd8:	f003 021f 	and.w	r2, r3, #31
 800bfdc:	490a      	ldr	r1, [pc, #40]	@ (800c008 <__NVIC_DisableIRQ+0x44>)
 800bfde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bfe2:	095b      	lsrs	r3, r3, #5
 800bfe4:	2001      	movs	r0, #1
 800bfe6:	fa00 f202 	lsl.w	r2, r0, r2
 800bfea:	3320      	adds	r3, #32
 800bfec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800bff0:	f3bf 8f4f 	dsb	sy
}
 800bff4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800bff6:	f3bf 8f6f 	isb	sy
}
 800bffa:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800bffc:	bf00      	nop
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	e000e100 	.word	0xe000e100

0800c00c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	db0c      	blt.n	800c038 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c01e:	79fb      	ldrb	r3, [r7, #7]
 800c020:	f003 021f 	and.w	r2, r3, #31
 800c024:	4907      	ldr	r1, [pc, #28]	@ (800c044 <__NVIC_SetPendingIRQ+0x38>)
 800c026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c02a:	095b      	lsrs	r3, r3, #5
 800c02c:	2001      	movs	r0, #1
 800c02e:	fa00 f202 	lsl.w	r2, r0, r2
 800c032:	3340      	adds	r3, #64	@ 0x40
 800c034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	e000e100 	.word	0xe000e100

0800c048 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800c048:	b480      	push	{r7}
 800c04a:	b083      	sub	sp, #12
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	4603      	mov	r3, r0
 800c050:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c056:	2b00      	cmp	r3, #0
 800c058:	db0c      	blt.n	800c074 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c05a:	79fb      	ldrb	r3, [r7, #7]
 800c05c:	f003 021f 	and.w	r2, r3, #31
 800c060:	4907      	ldr	r1, [pc, #28]	@ (800c080 <__NVIC_ClearPendingIRQ+0x38>)
 800c062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c066:	095b      	lsrs	r3, r3, #5
 800c068:	2001      	movs	r0, #1
 800c06a:	fa00 f202 	lsl.w	r2, r0, r2
 800c06e:	3360      	adds	r3, #96	@ 0x60
 800c070:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800c074:	bf00      	nop
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	e000e100 	.word	0xe000e100

0800c084 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	6039      	str	r1, [r7, #0]
 800c08e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c094:	2b00      	cmp	r3, #0
 800c096:	db0a      	blt.n	800c0ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	490c      	ldr	r1, [pc, #48]	@ (800c0d0 <__NVIC_SetPriority+0x4c>)
 800c09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0a2:	0112      	lsls	r2, r2, #4
 800c0a4:	b2d2      	uxtb	r2, r2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800c0ac:	e00a      	b.n	800c0c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	b2da      	uxtb	r2, r3
 800c0b2:	4908      	ldr	r1, [pc, #32]	@ (800c0d4 <__NVIC_SetPriority+0x50>)
 800c0b4:	79fb      	ldrb	r3, [r7, #7]
 800c0b6:	f003 030f 	and.w	r3, r3, #15
 800c0ba:	3b04      	subs	r3, #4
 800c0bc:	0112      	lsls	r2, r2, #4
 800c0be:	b2d2      	uxtb	r2, r2
 800c0c0:	440b      	add	r3, r1
 800c0c2:	761a      	strb	r2, [r3, #24]
}
 800c0c4:	bf00      	nop
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	e000e100 	.word	0xe000e100
 800c0d4:	e000ed00 	.word	0xe000ed00

0800c0d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b089      	sub	sp, #36	@ 0x24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	60b9      	str	r1, [r7, #8]
 800c0e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c0ec:	69fb      	ldr	r3, [r7, #28]
 800c0ee:	f1c3 0307 	rsb	r3, r3, #7
 800c0f2:	2b04      	cmp	r3, #4
 800c0f4:	bf28      	it	cs
 800c0f6:	2304      	movcs	r3, #4
 800c0f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	3304      	adds	r3, #4
 800c0fe:	2b06      	cmp	r3, #6
 800c100:	d902      	bls.n	800c108 <NVIC_EncodePriority+0x30>
 800c102:	69fb      	ldr	r3, [r7, #28]
 800c104:	3b03      	subs	r3, #3
 800c106:	e000      	b.n	800c10a <NVIC_EncodePriority+0x32>
 800c108:	2300      	movs	r3, #0
 800c10a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c10c:	f04f 32ff 	mov.w	r2, #4294967295
 800c110:	69bb      	ldr	r3, [r7, #24]
 800c112:	fa02 f303 	lsl.w	r3, r2, r3
 800c116:	43da      	mvns	r2, r3
 800c118:	68bb      	ldr	r3, [r7, #8]
 800c11a:	401a      	ands	r2, r3
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c120:	f04f 31ff 	mov.w	r1, #4294967295
 800c124:	697b      	ldr	r3, [r7, #20]
 800c126:	fa01 f303 	lsl.w	r3, r1, r3
 800c12a:	43d9      	mvns	r1, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c130:	4313      	orrs	r3, r2
         );
}
 800c132:	4618      	mov	r0, r3
 800c134:	3724      	adds	r7, #36	@ 0x24
 800c136:	46bd      	mov	sp, r7
 800c138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13c:	4770      	bx	lr
	...

0800c140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b082      	sub	sp, #8
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	3b01      	subs	r3, #1
 800c14c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c150:	d301      	bcc.n	800c156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c152:	2301      	movs	r3, #1
 800c154:	e00f      	b.n	800c176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c156:	4a0a      	ldr	r2, [pc, #40]	@ (800c180 <SysTick_Config+0x40>)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	3b01      	subs	r3, #1
 800c15c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c15e:	210f      	movs	r1, #15
 800c160:	f04f 30ff 	mov.w	r0, #4294967295
 800c164:	f7ff ff8e 	bl	800c084 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c168:	4b05      	ldr	r3, [pc, #20]	@ (800c180 <SysTick_Config+0x40>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c16e:	4b04      	ldr	r3, [pc, #16]	@ (800c180 <SysTick_Config+0x40>)
 800c170:	2207      	movs	r2, #7
 800c172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c174:	2300      	movs	r3, #0
}
 800c176:	4618      	mov	r0, r3
 800c178:	3708      	adds	r7, #8
 800c17a:	46bd      	mov	sp, r7
 800c17c:	bd80      	pop	{r7, pc}
 800c17e:	bf00      	nop
 800c180:	e000e010 	.word	0xe000e010

0800c184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c184:	b580      	push	{r7, lr}
 800c186:	b082      	sub	sp, #8
 800c188:	af00      	add	r7, sp, #0
 800c18a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f7ff fec9 	bl	800bf24 <__NVIC_SetPriorityGrouping>
}
 800c192:	bf00      	nop
 800c194:	3708      	adds	r7, #8
 800c196:	46bd      	mov	sp, r7
 800c198:	bd80      	pop	{r7, pc}

0800c19a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800c19a:	b580      	push	{r7, lr}
 800c19c:	b086      	sub	sp, #24
 800c19e:	af00      	add	r7, sp, #0
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	607a      	str	r2, [r7, #4]
 800c1a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800c1a8:	f7ff fee0 	bl	800bf6c <__NVIC_GetPriorityGrouping>
 800c1ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1ae:	687a      	ldr	r2, [r7, #4]
 800c1b0:	68b9      	ldr	r1, [r7, #8]
 800c1b2:	6978      	ldr	r0, [r7, #20]
 800c1b4:	f7ff ff90 	bl	800c0d8 <NVIC_EncodePriority>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c1be:	4611      	mov	r1, r2
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f7ff ff5f 	bl	800c084 <__NVIC_SetPriority>
}
 800c1c6:	bf00      	nop
 800c1c8:	3718      	adds	r7, #24
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c1ce:	b580      	push	{r7, lr}
 800c1d0:	b082      	sub	sp, #8
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c1d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1dc:	4618      	mov	r0, r3
 800c1de:	f7ff fed3 	bl	800bf88 <__NVIC_EnableIRQ>
}
 800c1e2:	bf00      	nop
 800c1e4:	3708      	adds	r7, #8
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}

0800c1ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c1ea:	b580      	push	{r7, lr}
 800c1ec:	b082      	sub	sp, #8
 800c1ee:	af00      	add	r7, sp, #0
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c1f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	f7ff fee3 	bl	800bfc4 <__NVIC_DisableIRQ>
}
 800c1fe:	bf00      	nop
 800c200:	3708      	adds	r7, #8
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c206:	b580      	push	{r7, lr}
 800c208:	b082      	sub	sp, #8
 800c20a:	af00      	add	r7, sp, #0
 800c20c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800c20e:	6878      	ldr	r0, [r7, #4]
 800c210:	f7ff ff96 	bl	800c140 <SysTick_Config>
 800c214:	4603      	mov	r3, r0
}
 800c216:	4618      	mov	r0, r3
 800c218:	3708      	adds	r7, #8
 800c21a:	46bd      	mov	sp, r7
 800c21c:	bd80      	pop	{r7, pc}

0800c21e <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800c21e:	b580      	push	{r7, lr}
 800c220:	b082      	sub	sp, #8
 800c222:	af00      	add	r7, sp, #0
 800c224:	4603      	mov	r3, r0
 800c226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800c228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c22c:	4618      	mov	r0, r3
 800c22e:	f7ff feed 	bl	800c00c <__NVIC_SetPendingIRQ>
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}

0800c23a <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800c23a:	b580      	push	{r7, lr}
 800c23c:	b082      	sub	sp, #8
 800c23e:	af00      	add	r7, sp, #0
 800c240:	4603      	mov	r3, r0
 800c242:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 800c244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c248:	4618      	mov	r0, r3
 800c24a:	f7ff fefd 	bl	800c048 <__NVIC_ClearPendingIRQ>
}
 800c24e:	bf00      	nop
 800c250:	3708      	adds	r7, #8
 800c252:	46bd      	mov	sp, r7
 800c254:	bd80      	pop	{r7, pc}
	...

0800c258 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d101      	bne.n	800c26a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c266:	2301      	movs	r3, #1
 800c268:	e08e      	b.n	800c388 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	461a      	mov	r2, r3
 800c270:	4b47      	ldr	r3, [pc, #284]	@ (800c390 <HAL_DMA_Init+0x138>)
 800c272:	429a      	cmp	r2, r3
 800c274:	d80f      	bhi.n	800c296 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	461a      	mov	r2, r3
 800c27c:	4b45      	ldr	r3, [pc, #276]	@ (800c394 <HAL_DMA_Init+0x13c>)
 800c27e:	4413      	add	r3, r2
 800c280:	4a45      	ldr	r2, [pc, #276]	@ (800c398 <HAL_DMA_Init+0x140>)
 800c282:	fba2 2303 	umull	r2, r3, r2, r3
 800c286:	091b      	lsrs	r3, r3, #4
 800c288:	009a      	lsls	r2, r3, #2
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a42      	ldr	r2, [pc, #264]	@ (800c39c <HAL_DMA_Init+0x144>)
 800c292:	641a      	str	r2, [r3, #64]	@ 0x40
 800c294:	e00e      	b.n	800c2b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	461a      	mov	r2, r3
 800c29c:	4b40      	ldr	r3, [pc, #256]	@ (800c3a0 <HAL_DMA_Init+0x148>)
 800c29e:	4413      	add	r3, r2
 800c2a0:	4a3d      	ldr	r2, [pc, #244]	@ (800c398 <HAL_DMA_Init+0x140>)
 800c2a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2a6:	091b      	lsrs	r3, r3, #4
 800c2a8:	009a      	lsls	r2, r3, #2
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a3c      	ldr	r2, [pc, #240]	@ (800c3a4 <HAL_DMA_Init+0x14c>)
 800c2b2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2202      	movs	r2, #2
 800c2b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800c2ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c2d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	691b      	ldr	r3, [r3, #16]
 800c2de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c2e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c2f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6a1b      	ldr	r3, [r3, #32]
 800c2f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fa74 	bl	800c7f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	689b      	ldr	r3, [r3, #8]
 800c310:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c314:	d102      	bne.n	800c31c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	685a      	ldr	r2, [r3, #4]
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c324:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c328:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c332:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d010      	beq.n	800c35e <HAL_DMA_Init+0x106>
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	685b      	ldr	r3, [r3, #4]
 800c340:	2b04      	cmp	r3, #4
 800c342:	d80c      	bhi.n	800c35e <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f000 fa93 	bl	800c870 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c34e:	2200      	movs	r2, #0
 800c350:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c356:	687a      	ldr	r2, [r7, #4]
 800c358:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c35a:	605a      	str	r2, [r3, #4]
 800c35c:	e008      	b.n	800c370 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2200      	movs	r2, #0
 800c36e:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	2200      	movs	r2, #0
 800c374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2201      	movs	r2, #1
 800c37a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	2200      	movs	r2, #0
 800c382:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	40020407 	.word	0x40020407
 800c394:	bffdfff8 	.word	0xbffdfff8
 800c398:	cccccccd 	.word	0xcccccccd
 800c39c:	40020000 	.word	0x40020000
 800c3a0:	bffdfbf8 	.word	0xbffdfbf8
 800c3a4:	40020400 	.word	0x40020400

0800c3a8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b086      	sub	sp, #24
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	60b9      	str	r1, [r7, #8]
 800c3b2:	607a      	str	r2, [r7, #4]
 800c3b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d101      	bne.n	800c3c8 <HAL_DMA_Start_IT+0x20>
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	e066      	b.n	800c496 <HAL_DMA_Start_IT+0xee>
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c3d6:	b2db      	uxtb	r3, r3
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d155      	bne.n	800c488 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2202      	movs	r2, #2
 800c3e0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	681a      	ldr	r2, [r3, #0]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	f022 0201 	bic.w	r2, r2, #1
 800c3f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	68b9      	ldr	r1, [r7, #8]
 800c400:	68f8      	ldr	r0, [r7, #12]
 800c402:	f000 f9b9 	bl	800c778 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d008      	beq.n	800c420 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	681a      	ldr	r2, [r3, #0]
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f042 020e 	orr.w	r2, r2, #14
 800c41c:	601a      	str	r2, [r3, #0]
 800c41e:	e00f      	b.n	800c440 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	681a      	ldr	r2, [r3, #0]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	f022 0204 	bic.w	r2, r2, #4
 800c42e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	681a      	ldr	r2, [r3, #0]
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	f042 020a 	orr.w	r2, r2, #10
 800c43e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d007      	beq.n	800c45e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c458:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c45c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c462:	2b00      	cmp	r3, #0
 800c464:	d007      	beq.n	800c476 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c46a:	681a      	ldr	r2, [r3, #0]
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c470:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c474:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	f042 0201 	orr.w	r2, r2, #1
 800c484:	601a      	str	r2, [r3, #0]
 800c486:	e005      	b.n	800c494 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800c490:	2302      	movs	r3, #2
 800c492:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800c494:	7dfb      	ldrb	r3, [r7, #23]
}
 800c496:	4618      	mov	r0, r3
 800c498:	3718      	adds	r7, #24
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b083      	sub	sp, #12
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d101      	bne.n	800c4b0 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e04f      	b.n	800c550 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c4b6:	b2db      	uxtb	r3, r3
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d008      	beq.n	800c4ce <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2204      	movs	r2, #4
 800c4c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	e040      	b.n	800c550 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	681a      	ldr	r2, [r3, #0]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f022 020e 	bic.w	r2, r2, #14
 800c4dc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4e2:	681a      	ldr	r2, [r3, #0]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c4ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f022 0201 	bic.w	r2, r2, #1
 800c4fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c502:	f003 021c 	and.w	r2, r3, #28
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c50a:	2101      	movs	r1, #1
 800c50c:	fa01 f202 	lsl.w	r2, r1, r2
 800c510:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c516:	687a      	ldr	r2, [r7, #4]
 800c518:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c51a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00c      	beq.n	800c53e <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c52e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c532:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c538:	687a      	ldr	r2, [r7, #4]
 800c53a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c53c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	370c      	adds	r7, #12
 800c554:	46bd      	mov	sp, r7
 800c556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55a:	4770      	bx	lr

0800c55c <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c564:	2300      	movs	r3, #0
 800c566:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800c56e:	b2db      	uxtb	r3, r3
 800c570:	2b02      	cmp	r3, #2
 800c572:	d005      	beq.n	800c580 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2204      	movs	r2, #4
 800c578:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800c57a:	2301      	movs	r3, #1
 800c57c:	73fb      	strb	r3, [r7, #15]
 800c57e:	e047      	b.n	800c610 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	681a      	ldr	r2, [r3, #0]
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	f022 020e 	bic.w	r2, r2, #14
 800c58e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	681a      	ldr	r2, [r3, #0]
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f022 0201 	bic.w	r2, r2, #1
 800c59e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c5aa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5b4:	f003 021c 	and.w	r2, r3, #28
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c5bc:	2101      	movs	r1, #1
 800c5be:	fa01 f202 	lsl.w	r2, r1, r2
 800c5c2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c5c8:	687a      	ldr	r2, [r7, #4]
 800c5ca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c5cc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d00c      	beq.n	800c5f0 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c5e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800c5e4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c5ea:	687a      	ldr	r2, [r7, #4]
 800c5ec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c5ee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	4798      	blx	r3
    }
  }
  return status;
 800c610:	7bfb      	ldrb	r3, [r7, #15]
}
 800c612:	4618      	mov	r0, r3
 800c614:	3710      	adds	r7, #16
 800c616:	46bd      	mov	sp, r7
 800c618:	bd80      	pop	{r7, pc}

0800c61a <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800c61a:	b580      	push	{r7, lr}
 800c61c:	b084      	sub	sp, #16
 800c61e:	af00      	add	r7, sp, #0
 800c620:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c636:	f003 031c 	and.w	r3, r3, #28
 800c63a:	2204      	movs	r2, #4
 800c63c:	409a      	lsls	r2, r3
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	4013      	ands	r3, r2
 800c642:	2b00      	cmp	r3, #0
 800c644:	d026      	beq.n	800c694 <HAL_DMA_IRQHandler+0x7a>
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	f003 0304 	and.w	r3, r3, #4
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d021      	beq.n	800c694 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	f003 0320 	and.w	r3, r3, #32
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d107      	bne.n	800c66e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	f022 0204 	bic.w	r2, r2, #4
 800c66c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c672:	f003 021c 	and.w	r2, r3, #28
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c67a:	2104      	movs	r1, #4
 800c67c:	fa01 f202 	lsl.w	r2, r1, r2
 800c680:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c686:	2b00      	cmp	r3, #0
 800c688:	d071      	beq.n	800c76e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800c692:	e06c      	b.n	800c76e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c698:	f003 031c 	and.w	r3, r3, #28
 800c69c:	2202      	movs	r2, #2
 800c69e:	409a      	lsls	r2, r3
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	4013      	ands	r3, r2
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d02e      	beq.n	800c706 <HAL_DMA_IRQHandler+0xec>
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	f003 0302 	and.w	r3, r3, #2
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d029      	beq.n	800c706 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0320 	and.w	r3, r3, #32
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d10b      	bne.n	800c6d8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f022 020a 	bic.w	r2, r2, #10
 800c6ce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c6dc:	f003 021c 	and.w	r2, r3, #28
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c6e4:	2102      	movs	r1, #2
 800c6e6:	fa01 f202 	lsl.w	r2, r1, r2
 800c6ea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d038      	beq.n	800c76e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c700:	6878      	ldr	r0, [r7, #4]
 800c702:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800c704:	e033      	b.n	800c76e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c70a:	f003 031c 	and.w	r3, r3, #28
 800c70e:	2208      	movs	r2, #8
 800c710:	409a      	lsls	r2, r3
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	4013      	ands	r3, r2
 800c716:	2b00      	cmp	r3, #0
 800c718:	d02a      	beq.n	800c770 <HAL_DMA_IRQHandler+0x156>
 800c71a:	68bb      	ldr	r3, [r7, #8]
 800c71c:	f003 0308 	and.w	r3, r3, #8
 800c720:	2b00      	cmp	r3, #0
 800c722:	d025      	beq.n	800c770 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	681a      	ldr	r2, [r3, #0]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 020e 	bic.w	r2, r2, #14
 800c732:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c738:	f003 021c 	and.w	r2, r3, #28
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c740:	2101      	movs	r1, #1
 800c742:	fa01 f202 	lsl.w	r2, r1, r2
 800c746:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2201      	movs	r2, #1
 800c74c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2201      	movs	r2, #1
 800c752:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c762:	2b00      	cmp	r3, #0
 800c764:	d004      	beq.n	800c770 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800c76e:	bf00      	nop
 800c770:	bf00      	nop
}
 800c772:	3710      	adds	r7, #16
 800c774:	46bd      	mov	sp, r7
 800c776:	bd80      	pop	{r7, pc}

0800c778 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	60f8      	str	r0, [r7, #12]
 800c780:	60b9      	str	r1, [r7, #8]
 800c782:	607a      	str	r2, [r7, #4]
 800c784:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c78a:	68fa      	ldr	r2, [r7, #12]
 800c78c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800c78e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c794:	2b00      	cmp	r3, #0
 800c796:	d004      	beq.n	800c7a2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c79c:	68fa      	ldr	r2, [r7, #12]
 800c79e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800c7a0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c7a6:	f003 021c 	and.w	r2, r3, #28
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7ae:	2101      	movs	r1, #1
 800c7b0:	fa01 f202 	lsl.w	r2, r1, r2
 800c7b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	689b      	ldr	r3, [r3, #8]
 800c7c2:	2b10      	cmp	r3, #16
 800c7c4:	d108      	bne.n	800c7d8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	68ba      	ldr	r2, [r7, #8]
 800c7d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800c7d6:	e007      	b.n	800c7e8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	68ba      	ldr	r2, [r7, #8]
 800c7de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	687a      	ldr	r2, [r7, #4]
 800c7e6:	60da      	str	r2, [r3, #12]
}
 800c7e8:	bf00      	nop
 800c7ea:	3714      	adds	r7, #20
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7f2:	4770      	bx	lr

0800c7f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	461a      	mov	r2, r3
 800c802:	4b17      	ldr	r3, [pc, #92]	@ (800c860 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800c804:	429a      	cmp	r2, r3
 800c806:	d80a      	bhi.n	800c81e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c80c:	089b      	lsrs	r3, r3, #2
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800c814:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800c818:	687a      	ldr	r2, [r7, #4]
 800c81a:	6493      	str	r3, [r2, #72]	@ 0x48
 800c81c:	e007      	b.n	800c82e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c822:	089b      	lsrs	r3, r3, #2
 800c824:	009a      	lsls	r2, r3, #2
 800c826:	4b0f      	ldr	r3, [pc, #60]	@ (800c864 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800c828:	4413      	add	r3, r2
 800c82a:	687a      	ldr	r2, [r7, #4]
 800c82c:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	b2db      	uxtb	r3, r3
 800c834:	3b08      	subs	r3, #8
 800c836:	4a0c      	ldr	r2, [pc, #48]	@ (800c868 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800c838:	fba2 2303 	umull	r2, r3, r2, r3
 800c83c:	091b      	lsrs	r3, r3, #4
 800c83e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	4a0a      	ldr	r2, [pc, #40]	@ (800c86c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800c844:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	f003 031f 	and.w	r3, r3, #31
 800c84c:	2201      	movs	r2, #1
 800c84e:	409a      	lsls	r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800c854:	bf00      	nop
 800c856:	3714      	adds	r7, #20
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr
 800c860:	40020407 	.word	0x40020407
 800c864:	4002081c 	.word	0x4002081c
 800c868:	cccccccd 	.word	0xcccccccd
 800c86c:	40020880 	.word	0x40020880

0800c870 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c880:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800c886:	4413      	add	r3, r2
 800c888:	009b      	lsls	r3, r3, #2
 800c88a:	461a      	mov	r2, r3
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a09      	ldr	r2, [pc, #36]	@ (800c8b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 800c894:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	3b01      	subs	r3, #1
 800c89a:	f003 0303 	and.w	r3, r3, #3
 800c89e:	2201      	movs	r2, #1
 800c8a0:	409a      	lsls	r2, r3
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	1000823f 	.word	0x1000823f
 800c8b8:	40020940 	.word	0x40020940

0800c8bc <HAL_EXTI_RegisterCallback>:
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID,
                                            void (*pPendingCbfn)(void))
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	607a      	str	r2, [r7, #4]
 800c8c8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 800c8ce:	7afb      	ldrb	r3, [r7, #11]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d103      	bne.n	800c8dc <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	687a      	ldr	r2, [r7, #4]
 800c8d8:	605a      	str	r2, [r3, #4]
      break;
 800c8da:	e002      	b.n	800c8e2 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	75fb      	strb	r3, [r7, #23]
      break;
 800c8e0:	bf00      	nop
  }

  return status;
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	371c      	adds	r7, #28
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
 800c8f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d101      	bne.n	800c904 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800c900:	2301      	movs	r3, #1
 800c902:	e003      	b.n	800c90c <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	683a      	ldr	r2, [r7, #0]
 800c908:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800c90a:	2300      	movs	r3, #0
  }
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	370c      	adds	r7, #12
 800c910:	46bd      	mov	sp, r7
 800c912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c916:	4770      	bx	lr

0800c918 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800c918:	b580      	push	{r7, lr}
 800c91a:	b086      	sub	sp, #24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	0c1b      	lsrs	r3, r3, #16
 800c926:	f003 0301 	and.w	r3, r3, #1
 800c92a:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f003 031f 	and.w	r3, r3, #31
 800c934:	2201      	movs	r2, #1
 800c936:	fa02 f303 	lsl.w	r3, r2, r3
 800c93a:	613b      	str	r3, [r7, #16]

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	015b      	lsls	r3, r3, #5
 800c940:	f103 43b0 	add.w	r3, r3, #1476395008	@ 0x58000000
 800c944:	f603 030c 	addw	r3, r3, #2060	@ 0x80c
 800c948:	60fb      	str	r3, [r7, #12]
  regval = (*regaddr & maskline);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	681b      	ldr	r3, [r3, #0]
 800c94e:	693a      	ldr	r2, [r7, #16]
 800c950:	4013      	ands	r3, r2
 800c952:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00u)
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d009      	beq.n	800c96e <HAL_EXTI_IRQHandler+0x56>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	693a      	ldr	r2, [r7, #16]
 800c95e:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d002      	beq.n	800c96e <HAL_EXTI_IRQHandler+0x56>
    {
      hexti->PendingCallback();
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	4798      	blx	r3
    }
  }
}
 800c96e:	bf00      	nop
 800c970:	3718      	adds	r7, #24
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
	...

0800c978 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
  uint32_t param = 0xFFFFFFFFU;
 800c97e:	f04f 33ff 	mov.w	r3, #4294967295
 800c982:	607b      	str	r3, [r7, #4]
  uint32_t error;

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800c984:	4b40      	ldr	r3, [pc, #256]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800c986:	691a      	ldr	r2, [r3, #16]
 800c988:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800c98c:	4013      	ands	r3, r2
 800c98e:	603b      	str	r3, [r7, #0]

  /* Clear Current operation */
  CLEAR_BIT(FLASH->CR, pFlash.ProcedureOnGoing);
 800c990:	4b3d      	ldr	r3, [pc, #244]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800c992:	695a      	ldr	r2, [r3, #20]
 800c994:	4b3d      	ldr	r3, [pc, #244]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800c996:	689b      	ldr	r3, [r3, #8]
 800c998:	43db      	mvns	r3, r3
 800c99a:	493b      	ldr	r1, [pc, #236]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800c99c:	4013      	ands	r3, r2
 800c99e:	614b      	str	r3, [r1, #20]

  /* A] Set parameter for user or error callbacks */
  /* check operation was a program or erase */
  if ((pFlash.ProcedureOnGoing & (FLASH_TYPEPROGRAM_DOUBLEWORD | FLASH_TYPEPROGRAM_FAST)) != 0U)
 800c9a0:	4b3a      	ldr	r3, [pc, #232]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800c9a2:	689a      	ldr	r2, [r3, #8]
 800c9a4:	4b3a      	ldr	r3, [pc, #232]	@ (800ca90 <HAL_FLASH_IRQHandler+0x118>)
 800c9a6:	4013      	ands	r3, r2
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d003      	beq.n	800c9b4 <HAL_FLASH_IRQHandler+0x3c>
  {
    /* return address being programmed */
    param = pFlash.Address;
 800c9ac:	4b37      	ldr	r3, [pc, #220]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800c9ae:	68db      	ldr	r3, [r3, #12]
 800c9b0:	607b      	str	r3, [r7, #4]
 800c9b2:	e008      	b.n	800c9c6 <HAL_FLASH_IRQHandler+0x4e>
  }
  else if ((pFlash.ProcedureOnGoing & (FLASH_TYPEERASE_PAGES)) != 0U)
 800c9b4:	4b35      	ldr	r3, [pc, #212]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <HAL_FLASH_IRQHandler+0x4e>
  {
    /* return page number being erased */
    param = pFlash.Page;
 800c9c0:	4b32      	ldr	r3, [pc, #200]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	607b      	str	r3, [r7, #4]
    /* No Procedure on-going */
    /* Nothing to do, but check error if any */
  }

  /* B] Check errors */
  if (error != 0U)
 800c9c6:	683b      	ldr	r3, [r7, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d021      	beq.n	800ca10 <HAL_FLASH_IRQHandler+0x98>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 800c9cc:	4b2f      	ldr	r3, [pc, #188]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800c9ce:	685a      	ldr	r2, [r3, #4]
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	4a2d      	ldr	r2, [pc, #180]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800c9d6:	6053      	str	r3, [r2, #4]

    /* clear error flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c9de:	d307      	bcc.n	800c9f0 <HAL_FLASH_IRQHandler+0x78>
 800c9e0:	4b29      	ldr	r3, [pc, #164]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800c9e2:	699a      	ldr	r2, [r3, #24]
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800c9ea:	4927      	ldr	r1, [pc, #156]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800c9ec:	4313      	orrs	r3, r2
 800c9ee:	618b      	str	r3, [r1, #24]
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d004      	beq.n	800ca04 <HAL_FLASH_IRQHandler+0x8c>
 800c9fa:	4a23      	ldr	r2, [pc, #140]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800ca02:	6113      	str	r3, [r2, #16]

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800ca04:	4b21      	ldr	r3, [pc, #132]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca06:	2200      	movs	r2, #0
 800ca08:	609a      	str	r2, [r3, #8]

    /* Error callback */
    HAL_FLASH_OperationErrorCallback(param);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f84c 	bl	800caa8 <HAL_FLASH_OperationErrorCallback>
  }

  /* C] Check FLASH End of Operation flag */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800ca10:	4b1d      	ldr	r3, [pc, #116]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	f003 0301 	and.w	r3, r3, #1
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d124      	bne.n	800ca66 <HAL_FLASH_IRQHandler+0xee>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ca1c:	4b1a      	ldr	r3, [pc, #104]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800ca1e:	2201      	movs	r2, #1
 800ca20:	611a      	str	r2, [r3, #16]

    if (pFlash.ProcedureOnGoing == FLASH_TYPEERASE_PAGES)
 800ca22:	4b1a      	ldr	r3, [pc, #104]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca24:	689b      	ldr	r3, [r3, #8]
 800ca26:	2b02      	cmp	r3, #2
 800ca28:	d117      	bne.n	800ca5a <HAL_FLASH_IRQHandler+0xe2>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 800ca2a:	4b18      	ldr	r3, [pc, #96]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca2c:	695b      	ldr	r3, [r3, #20]
 800ca2e:	3b01      	subs	r3, #1
 800ca30:	4a16      	ldr	r2, [pc, #88]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca32:	6153      	str	r3, [r2, #20]

      /* Check if there are still pages to erase*/
      if (pFlash.NbPagesToErase != 0U)
 800ca34:	4b15      	ldr	r3, [pc, #84]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca36:	695b      	ldr	r3, [r3, #20]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d00a      	beq.n	800ca52 <HAL_FLASH_IRQHandler+0xda>
      {
        /* Increment page number */
        pFlash.Page++;
 800ca3c:	4b13      	ldr	r3, [pc, #76]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca3e:	691b      	ldr	r3, [r3, #16]
 800ca40:	3301      	adds	r3, #1
 800ca42:	4a12      	ldr	r2, [pc, #72]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca44:	6113      	str	r3, [r2, #16]
        FLASH_PageErase(pFlash.Page);
 800ca46:	4b11      	ldr	r3, [pc, #68]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca48:	691b      	ldr	r3, [r3, #16]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	f000 f836 	bl	800cabc <FLASH_PageErase>
 800ca50:	e006      	b.n	800ca60 <HAL_FLASH_IRQHandler+0xe8>
      }
      else
      {
        /* No more pages to erase: stop erase pages procedure */
        pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800ca52:	4b0e      	ldr	r3, [pc, #56]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca54:	2200      	movs	r2, #0
 800ca56:	609a      	str	r2, [r3, #8]
 800ca58:	e002      	b.n	800ca60 <HAL_FLASH_IRQHandler+0xe8>
      }
    }
    else
    {
      /*Stop the ongoing procedure */
      pFlash.ProcedureOnGoing = FLASH_TYPENONE;
 800ca5a:	4b0c      	ldr	r3, [pc, #48]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	609a      	str	r2, [r3, #8]
    }

    /* User callback */
    HAL_FLASH_EndOfOperationCallback(param);
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f000 f817 	bl	800ca94 <HAL_FLASH_EndOfOperationCallback>
  }

  if (pFlash.ProcedureOnGoing == FLASH_TYPENONE)
 800ca66:	4b09      	ldr	r3, [pc, #36]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca68:	689b      	ldr	r3, [r3, #8]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d108      	bne.n	800ca80 <HAL_FLASH_IRQHandler+0x108>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 800ca6e:	4b06      	ldr	r3, [pc, #24]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800ca70:	695b      	ldr	r3, [r3, #20]
 800ca72:	4a05      	ldr	r2, [pc, #20]	@ (800ca88 <HAL_FLASH_IRQHandler+0x110>)
 800ca74:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 800ca78:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800ca7a:	4b04      	ldr	r3, [pc, #16]	@ (800ca8c <HAL_FLASH_IRQHandler+0x114>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	701a      	strb	r2, [r3, #0]
  }
}
 800ca80:	bf00      	nop
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	58004000 	.word	0x58004000
 800ca8c:	20000998 	.word	0x20000998
 800ca90:	00040001 	.word	0x00040001

0800ca94 <HAL_FLASH_EndOfOperationCallback>:
  *                  Page Erase: Page which has been erased
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800ca94:	b480      	push	{r7}
 800ca96:	b083      	sub	sp, #12
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800ca9c:	bf00      	nop
 800ca9e:	370c      	adds	r7, #12
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b083      	sub	sp, #12
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr

0800cabc <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 800cac4:	4b09      	ldr	r3, [pc, #36]	@ (800caec <FLASH_PageErase+0x30>)
 800cac6:	695b      	ldr	r3, [r3, #20]
 800cac8:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	00db      	lsls	r3, r3, #3
 800cad0:	4313      	orrs	r3, r2
 800cad2:	4a06      	ldr	r2, [pc, #24]	@ (800caec <FLASH_PageErase+0x30>)
 800cad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cad8:	f043 0302 	orr.w	r3, r3, #2
 800cadc:	6153      	str	r3, [r2, #20]
}
 800cade:	bf00      	nop
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr
 800caea:	bf00      	nop
 800caec:	58004000 	.word	0x58004000

0800caf0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b087      	sub	sp, #28
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cafa:	2300      	movs	r3, #0
 800cafc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cafe:	e14c      	b.n	800cd9a <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	2101      	movs	r1, #1
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	fa01 f303 	lsl.w	r3, r1, r3
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	f000 813e 	beq.w	800cd94 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800cb18:	683b      	ldr	r3, [r7, #0]
 800cb1a:	685b      	ldr	r3, [r3, #4]
 800cb1c:	f003 0303 	and.w	r3, r3, #3
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d005      	beq.n	800cb30 <HAL_GPIO_Init+0x40>
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	685b      	ldr	r3, [r3, #4]
 800cb28:	f003 0303 	and.w	r3, r3, #3
 800cb2c:	2b02      	cmp	r3, #2
 800cb2e:	d130      	bne.n	800cb92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	689b      	ldr	r3, [r3, #8]
 800cb34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	005b      	lsls	r3, r3, #1
 800cb3a:	2203      	movs	r2, #3
 800cb3c:	fa02 f303 	lsl.w	r3, r2, r3
 800cb40:	43db      	mvns	r3, r3
 800cb42:	693a      	ldr	r2, [r7, #16]
 800cb44:	4013      	ands	r3, r2
 800cb46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	68da      	ldr	r2, [r3, #12]
 800cb4c:	697b      	ldr	r3, [r7, #20]
 800cb4e:	005b      	lsls	r3, r3, #1
 800cb50:	fa02 f303 	lsl.w	r3, r2, r3
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	4313      	orrs	r3, r2
 800cb58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	693a      	ldr	r2, [r7, #16]
 800cb5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800cb66:	2201      	movs	r2, #1
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	fa02 f303 	lsl.w	r3, r2, r3
 800cb6e:	43db      	mvns	r3, r3
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	4013      	ands	r3, r2
 800cb74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800cb76:	683b      	ldr	r3, [r7, #0]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	091b      	lsrs	r3, r3, #4
 800cb7c:	f003 0201 	and.w	r2, r3, #1
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	fa02 f303 	lsl.w	r3, r2, r3
 800cb86:	693a      	ldr	r2, [r7, #16]
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800cb92:	683b      	ldr	r3, [r7, #0]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	f003 0303 	and.w	r3, r3, #3
 800cb9a:	2b03      	cmp	r3, #3
 800cb9c:	d017      	beq.n	800cbce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	005b      	lsls	r3, r3, #1
 800cba8:	2203      	movs	r2, #3
 800cbaa:	fa02 f303 	lsl.w	r3, r2, r3
 800cbae:	43db      	mvns	r3, r3
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	689a      	ldr	r2, [r3, #8]
 800cbba:	697b      	ldr	r3, [r7, #20]
 800cbbc:	005b      	lsls	r3, r3, #1
 800cbbe:	fa02 f303 	lsl.w	r3, r2, r3
 800cbc2:	693a      	ldr	r2, [r7, #16]
 800cbc4:	4313      	orrs	r3, r2
 800cbc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	693a      	ldr	r2, [r7, #16]
 800cbcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800cbce:	683b      	ldr	r3, [r7, #0]
 800cbd0:	685b      	ldr	r3, [r3, #4]
 800cbd2:	f003 0303 	and.w	r3, r3, #3
 800cbd6:	2b02      	cmp	r3, #2
 800cbd8:	d123      	bne.n	800cc22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	08da      	lsrs	r2, r3, #3
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	3208      	adds	r2, #8
 800cbe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f003 0307 	and.w	r3, r3, #7
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	220f      	movs	r2, #15
 800cbf2:	fa02 f303 	lsl.w	r3, r2, r3
 800cbf6:	43db      	mvns	r3, r3
 800cbf8:	693a      	ldr	r2, [r7, #16]
 800cbfa:	4013      	ands	r3, r2
 800cbfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800cbfe:	683b      	ldr	r3, [r7, #0]
 800cc00:	691a      	ldr	r2, [r3, #16]
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	f003 0307 	and.w	r3, r3, #7
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	fa02 f303 	lsl.w	r3, r2, r3
 800cc0e:	693a      	ldr	r2, [r7, #16]
 800cc10:	4313      	orrs	r3, r2
 800cc12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800cc14:	697b      	ldr	r3, [r7, #20]
 800cc16:	08da      	lsrs	r2, r3, #3
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	3208      	adds	r2, #8
 800cc1c:	6939      	ldr	r1, [r7, #16]
 800cc1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	005b      	lsls	r3, r3, #1
 800cc2c:	2203      	movs	r2, #3
 800cc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800cc32:	43db      	mvns	r3, r3
 800cc34:	693a      	ldr	r2, [r7, #16]
 800cc36:	4013      	ands	r3, r2
 800cc38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	685b      	ldr	r3, [r3, #4]
 800cc3e:	f003 0203 	and.w	r2, r3, #3
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	005b      	lsls	r3, r3, #1
 800cc46:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4a:	693a      	ldr	r2, [r7, #16]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	693a      	ldr	r2, [r7, #16]
 800cc54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	f000 8098 	beq.w	800cd94 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 800cc64:	4a54      	ldr	r2, [pc, #336]	@ (800cdb8 <HAL_GPIO_Init+0x2c8>)
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	089b      	lsrs	r3, r3, #2
 800cc6a:	3302      	adds	r3, #2
 800cc6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc70:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800cc72:	697b      	ldr	r3, [r7, #20]
 800cc74:	f003 0303 	and.w	r3, r3, #3
 800cc78:	009b      	lsls	r3, r3, #2
 800cc7a:	220f      	movs	r2, #15
 800cc7c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc80:	43db      	mvns	r3, r3
 800cc82:	693a      	ldr	r2, [r7, #16]
 800cc84:	4013      	ands	r3, r2
 800cc86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800cc8e:	d019      	beq.n	800ccc4 <HAL_GPIO_Init+0x1d4>
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	4a4a      	ldr	r2, [pc, #296]	@ (800cdbc <HAL_GPIO_Init+0x2cc>)
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d013      	beq.n	800ccc0 <HAL_GPIO_Init+0x1d0>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	4a49      	ldr	r2, [pc, #292]	@ (800cdc0 <HAL_GPIO_Init+0x2d0>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d00d      	beq.n	800ccbc <HAL_GPIO_Init+0x1cc>
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	4a48      	ldr	r2, [pc, #288]	@ (800cdc4 <HAL_GPIO_Init+0x2d4>)
 800cca4:	4293      	cmp	r3, r2
 800cca6:	d007      	beq.n	800ccb8 <HAL_GPIO_Init+0x1c8>
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	4a47      	ldr	r2, [pc, #284]	@ (800cdc8 <HAL_GPIO_Init+0x2d8>)
 800ccac:	4293      	cmp	r3, r2
 800ccae:	d101      	bne.n	800ccb4 <HAL_GPIO_Init+0x1c4>
 800ccb0:	2304      	movs	r3, #4
 800ccb2:	e008      	b.n	800ccc6 <HAL_GPIO_Init+0x1d6>
 800ccb4:	2307      	movs	r3, #7
 800ccb6:	e006      	b.n	800ccc6 <HAL_GPIO_Init+0x1d6>
 800ccb8:	2303      	movs	r3, #3
 800ccba:	e004      	b.n	800ccc6 <HAL_GPIO_Init+0x1d6>
 800ccbc:	2302      	movs	r3, #2
 800ccbe:	e002      	b.n	800ccc6 <HAL_GPIO_Init+0x1d6>
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	e000      	b.n	800ccc6 <HAL_GPIO_Init+0x1d6>
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	697a      	ldr	r2, [r7, #20]
 800ccc8:	f002 0203 	and.w	r2, r2, #3
 800cccc:	0092      	lsls	r2, r2, #2
 800ccce:	4093      	lsls	r3, r2
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800ccd6:	4938      	ldr	r1, [pc, #224]	@ (800cdb8 <HAL_GPIO_Init+0x2c8>)
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	089b      	lsrs	r3, r3, #2
 800ccdc:	3302      	adds	r3, #2
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800cce4:	4b39      	ldr	r3, [pc, #228]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	43db      	mvns	r3, r3
 800ccee:	693a      	ldr	r2, [r7, #16]
 800ccf0:	4013      	ands	r3, r2
 800ccf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	685b      	ldr	r3, [r3, #4]
 800ccf8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d003      	beq.n	800cd08 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800cd08:	4a30      	ldr	r2, [pc, #192]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800cd0e:	4b2f      	ldr	r3, [pc, #188]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cd10:	685b      	ldr	r3, [r3, #4]
 800cd12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	43db      	mvns	r3, r3
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	4013      	ands	r3, r2
 800cd1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d003      	beq.n	800cd32 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800cd2a:	693a      	ldr	r2, [r7, #16]
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	4313      	orrs	r3, r2
 800cd30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800cd32:	4a26      	ldr	r2, [pc, #152]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800cd38:	4b24      	ldr	r3, [pc, #144]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cd3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800cd3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cd40:	68fb      	ldr	r3, [r7, #12]
 800cd42:	43db      	mvns	r3, r3
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4013      	ands	r3, r2
 800cd48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d003      	beq.n	800cd5e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800cd56:	693a      	ldr	r2, [r7, #16]
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	4313      	orrs	r3, r2
 800cd5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800cd5e:	4a1b      	ldr	r2, [pc, #108]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cd60:	693b      	ldr	r3, [r7, #16]
 800cd62:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 800cd66:	4b19      	ldr	r3, [pc, #100]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cd68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800cd6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	43db      	mvns	r3, r3
 800cd72:	693a      	ldr	r2, [r7, #16]
 800cd74:	4013      	ands	r3, r2
 800cd76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	685b      	ldr	r3, [r3, #4]
 800cd7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d003      	beq.n	800cd8c <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800cd84:	693a      	ldr	r2, [r7, #16]
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800cd8c:	4a0f      	ldr	r2, [pc, #60]	@ (800cdcc <HAL_GPIO_Init+0x2dc>)
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 800cd94:	697b      	ldr	r3, [r7, #20]
 800cd96:	3301      	adds	r3, #1
 800cd98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	697b      	ldr	r3, [r7, #20]
 800cda0:	fa22 f303 	lsr.w	r3, r2, r3
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f47f aeab 	bne.w	800cb00 <HAL_GPIO_Init+0x10>
  }
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	371c      	adds	r7, #28
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	40010000 	.word	0x40010000
 800cdbc:	48000400 	.word	0x48000400
 800cdc0:	48000800 	.word	0x48000800
 800cdc4:	48000c00 	.word	0x48000c00
 800cdc8:	48001000 	.word	0x48001000
 800cdcc:	58000800 	.word	0x58000800

0800cdd0 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	6078      	str	r0, [r7, #4]
 800cdd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800cdda:	2300      	movs	r3, #0
 800cddc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800cdde:	e0bb      	b.n	800cf58 <HAL_GPIO_DeInit+0x188>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800cde0:	2201      	movs	r2, #1
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	fa02 f303 	lsl.w	r3, r2, r3
 800cde8:	683a      	ldr	r2, [r7, #0]
 800cdea:	4013      	ands	r3, r2
 800cdec:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	f000 80ae 	beq.w	800cf52 <HAL_GPIO_DeInit+0x182>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800cdf6:	4a5f      	ldr	r2, [pc, #380]	@ (800cf74 <HAL_GPIO_DeInit+0x1a4>)
 800cdf8:	697b      	ldr	r3, [r7, #20]
 800cdfa:	089b      	lsrs	r3, r3, #2
 800cdfc:	3302      	adds	r3, #2
 800cdfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce02:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4u * (position & 0x03u)));
 800ce04:	697b      	ldr	r3, [r7, #20]
 800ce06:	f003 0303 	and.w	r3, r3, #3
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	220f      	movs	r2, #15
 800ce0e:	fa02 f303 	lsl.w	r3, r2, r3
 800ce12:	68fa      	ldr	r2, [r7, #12]
 800ce14:	4013      	ands	r3, r2
 800ce16:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800ce1e:	d019      	beq.n	800ce54 <HAL_GPIO_DeInit+0x84>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	4a55      	ldr	r2, [pc, #340]	@ (800cf78 <HAL_GPIO_DeInit+0x1a8>)
 800ce24:	4293      	cmp	r3, r2
 800ce26:	d013      	beq.n	800ce50 <HAL_GPIO_DeInit+0x80>
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	4a54      	ldr	r2, [pc, #336]	@ (800cf7c <HAL_GPIO_DeInit+0x1ac>)
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d00d      	beq.n	800ce4c <HAL_GPIO_DeInit+0x7c>
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	4a53      	ldr	r2, [pc, #332]	@ (800cf80 <HAL_GPIO_DeInit+0x1b0>)
 800ce34:	4293      	cmp	r3, r2
 800ce36:	d007      	beq.n	800ce48 <HAL_GPIO_DeInit+0x78>
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	4a52      	ldr	r2, [pc, #328]	@ (800cf84 <HAL_GPIO_DeInit+0x1b4>)
 800ce3c:	4293      	cmp	r3, r2
 800ce3e:	d101      	bne.n	800ce44 <HAL_GPIO_DeInit+0x74>
 800ce40:	2304      	movs	r3, #4
 800ce42:	e008      	b.n	800ce56 <HAL_GPIO_DeInit+0x86>
 800ce44:	2307      	movs	r3, #7
 800ce46:	e006      	b.n	800ce56 <HAL_GPIO_DeInit+0x86>
 800ce48:	2303      	movs	r3, #3
 800ce4a:	e004      	b.n	800ce56 <HAL_GPIO_DeInit+0x86>
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e002      	b.n	800ce56 <HAL_GPIO_DeInit+0x86>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e000      	b.n	800ce56 <HAL_GPIO_DeInit+0x86>
 800ce54:	2300      	movs	r3, #0
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	f002 0203 	and.w	r2, r2, #3
 800ce5c:	0092      	lsls	r2, r2, #2
 800ce5e:	4093      	lsls	r3, r2
 800ce60:	68fa      	ldr	r2, [r7, #12]
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d136      	bne.n	800ced4 <HAL_GPIO_DeInit+0x104>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800ce66:	4b48      	ldr	r3, [pc, #288]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800ce68:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800ce6c:	693b      	ldr	r3, [r7, #16]
 800ce6e:	43db      	mvns	r3, r3
 800ce70:	4945      	ldr	r1, [pc, #276]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800ce72:	4013      	ands	r3, r2
 800ce74:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 800ce78:	4b43      	ldr	r3, [pc, #268]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800ce7a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	43db      	mvns	r3, r3
 800ce82:	4941      	ldr	r1, [pc, #260]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800ce84:	4013      	ands	r3, r2
 800ce86:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800ce8a:	4b3f      	ldr	r3, [pc, #252]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	43db      	mvns	r3, r3
 800ce92:	493d      	ldr	r1, [pc, #244]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800ce94:	4013      	ands	r3, r2
 800ce96:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800ce98:	4b3b      	ldr	r3, [pc, #236]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800ce9a:	685a      	ldr	r2, [r3, #4]
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	43db      	mvns	r3, r3
 800cea0:	4939      	ldr	r1, [pc, #228]	@ (800cf88 <HAL_GPIO_DeInit+0x1b8>)
 800cea2:	4013      	ands	r3, r2
 800cea4:	604b      	str	r3, [r1, #4]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	f003 0303 	and.w	r3, r3, #3
 800ceac:	009b      	lsls	r3, r3, #2
 800ceae:	220f      	movs	r2, #15
 800ceb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ceb4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800ceb6:	4a2f      	ldr	r2, [pc, #188]	@ (800cf74 <HAL_GPIO_DeInit+0x1a4>)
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	089b      	lsrs	r3, r3, #2
 800cebc:	3302      	adds	r3, #2
 800cebe:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	43da      	mvns	r2, r3
 800cec6:	482b      	ldr	r0, [pc, #172]	@ (800cf74 <HAL_GPIO_DeInit+0x1a4>)
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	089b      	lsrs	r3, r3, #2
 800cecc:	400a      	ands	r2, r1
 800cece:	3302      	adds	r3, #2
 800ced0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681a      	ldr	r2, [r3, #0]
 800ced8:	697b      	ldr	r3, [r7, #20]
 800ceda:	005b      	lsls	r3, r3, #1
 800cedc:	2103      	movs	r1, #3
 800cede:	fa01 f303 	lsl.w	r3, r1, r3
 800cee2:	431a      	orrs	r2, r3
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800cee8:	697b      	ldr	r3, [r7, #20]
 800ceea:	08da      	lsrs	r2, r3, #3
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	3208      	adds	r2, #8
 800cef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cef4:	697b      	ldr	r3, [r7, #20]
 800cef6:	f003 0307 	and.w	r3, r3, #7
 800cefa:	009b      	lsls	r3, r3, #2
 800cefc:	220f      	movs	r2, #15
 800cefe:	fa02 f303 	lsl.w	r3, r2, r3
 800cf02:	43db      	mvns	r3, r3
 800cf04:	697a      	ldr	r2, [r7, #20]
 800cf06:	08d2      	lsrs	r2, r2, #3
 800cf08:	4019      	ands	r1, r3
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	3208      	adds	r2, #8
 800cf0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	68da      	ldr	r2, [r3, #12]
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	005b      	lsls	r3, r3, #1
 800cf1a:	2103      	movs	r1, #3
 800cf1c:	fa01 f303 	lsl.w	r3, r1, r3
 800cf20:	43db      	mvns	r3, r3
 800cf22:	401a      	ands	r2, r3
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	685a      	ldr	r2, [r3, #4]
 800cf2c:	2101      	movs	r1, #1
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	fa01 f303 	lsl.w	r3, r1, r3
 800cf34:	43db      	mvns	r3, r3
 800cf36:	401a      	ands	r2, r3
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	2103      	movs	r1, #3
 800cf46:	fa01 f303 	lsl.w	r3, r1, r3
 800cf4a:	43db      	mvns	r3, r3
 800cf4c:	401a      	ands	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	609a      	str	r2, [r3, #8]
    }

    position++;
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	3301      	adds	r3, #1
 800cf56:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800cf58:	683a      	ldr	r2, [r7, #0]
 800cf5a:	697b      	ldr	r3, [r7, #20]
 800cf5c:	fa22 f303 	lsr.w	r3, r2, r3
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	f47f af3d 	bne.w	800cde0 <HAL_GPIO_DeInit+0x10>
  }
}
 800cf66:	bf00      	nop
 800cf68:	bf00      	nop
 800cf6a:	371c      	adds	r7, #28
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	40010000 	.word	0x40010000
 800cf78:	48000400 	.word	0x48000400
 800cf7c:	48000800 	.word	0x48000800
 800cf80:	48000c00 	.word	0x48000c00
 800cf84:	48001000 	.word	0x48001000
 800cf88:	58000800 	.word	0x58000800

0800cf8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b083      	sub	sp, #12
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	807b      	strh	r3, [r7, #2]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800cf9c:	787b      	ldrb	r3, [r7, #1]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d003      	beq.n	800cfaa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800cfa2:	887a      	ldrh	r2, [r7, #2]
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800cfa8:	e002      	b.n	800cfb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800cfaa:	887a      	ldrh	r2, [r7, #2]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800cfb0:	bf00      	nop
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfba:	4770      	bx	lr

0800cfbc <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b082      	sub	sp, #8
 800cfc0:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800cfc2:	4b0a      	ldr	r3, [pc, #40]	@ (800cfec <HAL_HSEM_IRQHandler+0x30>)
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800cfc8:	4b08      	ldr	r3, [pc, #32]	@ (800cfec <HAL_HSEM_IRQHandler+0x30>)
 800cfca:	681a      	ldr	r2, [r3, #0]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	43db      	mvns	r3, r3
 800cfd0:	4906      	ldr	r1, [pc, #24]	@ (800cfec <HAL_HSEM_IRQHandler+0x30>)
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800cfd6:	4a05      	ldr	r2, [pc, #20]	@ (800cfec <HAL_HSEM_IRQHandler+0x30>)
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 800cfdc:	6878      	ldr	r0, [r7, #4]
 800cfde:	f000 f807 	bl	800cff0 <HAL_HSEM_FreeCallback>
}
 800cfe2:	bf00      	nop
 800cfe4:	3708      	adds	r7, #8
 800cfe6:	46bd      	mov	sp, r7
 800cfe8:	bd80      	pop	{r7, pc}
 800cfea:	bf00      	nop
 800cfec:	58001500 	.word	0x58001500

0800cff0 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800cff8:	bf00      	nop
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr

0800d004 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b084      	sub	sp, #16
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 800d00c:	2300      	movs	r3, #0
 800d00e:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d01e      	beq.n	800d054 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800d016:	4b13      	ldr	r3, [pc, #76]	@ (800d064 <HAL_IPCC_Init+0x60>)
 800d018:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800d020:	b2db      	uxtb	r3, r3
 800d022:	2b00      	cmp	r3, #0
 800d024:	d102      	bne.n	800d02c <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f7fb fb34 	bl	8008694 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 800d02c:	68b8      	ldr	r0, [r7, #8]
 800d02e:	f000 f85b 	bl	800d0e8 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800d032:	68bb      	ldr	r3, [r7, #8]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f000 f82c 	bl	800d09c <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2200      	movs	r2, #0
 800d048:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2201      	movs	r2, #1
 800d04e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800d052:	e001      	b.n	800d058 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800d054:	2301      	movs	r3, #1
 800d056:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 800d058:	7bfb      	ldrb	r3, [r7, #15]
}
 800d05a:	4618      	mov	r0, r3
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	58000c00 	.word	0x58000c00

0800d068 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	60f8      	str	r0, [r7, #12]
 800d070:	60b9      	str	r1, [r7, #8]
 800d072:	4613      	mov	r3, r2
 800d074:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800d076:	bf00      	nop
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	4613      	mov	r3, r2
 800d08e:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 800d090:	bf00      	nop
 800d092:	3714      	adds	r7, #20
 800d094:	46bd      	mov	sp, r7
 800d096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09a:	4770      	bx	lr

0800d09c <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 800d09c:	b480      	push	{r7}
 800d09e:	b085      	sub	sp, #20
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	e00f      	b.n	800d0ca <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800d0aa:	687a      	ldr	r2, [r7, #4]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	009b      	lsls	r3, r3, #2
 800d0b0:	4413      	add	r3, r2
 800d0b2:	4a0b      	ldr	r2, [pc, #44]	@ (800d0e0 <IPCC_SetDefaultCallbacks+0x44>)
 800d0b4:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800d0b6:	687a      	ldr	r2, [r7, #4]
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	3306      	adds	r3, #6
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4413      	add	r3, r2
 800d0c0:	4a08      	ldr	r2, [pc, #32]	@ (800d0e4 <IPCC_SetDefaultCallbacks+0x48>)
 800d0c2:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	60fb      	str	r3, [r7, #12]
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2b05      	cmp	r3, #5
 800d0ce:	d9ec      	bls.n	800d0aa <IPCC_SetDefaultCallbacks+0xe>
  }
}
 800d0d0:	bf00      	nop
 800d0d2:	bf00      	nop
 800d0d4:	3714      	adds	r7, #20
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0dc:	4770      	bx	lr
 800d0de:	bf00      	nop
 800d0e0:	0800d069 	.word	0x0800d069
 800d0e4:	0800d083 	.word	0x0800d083

0800d0e8 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800d0e8:	b480      	push	{r7}
 800d0ea:	b083      	sub	sp, #12
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 800d0fc:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	223f      	movs	r2, #63	@ 0x3f
 800d102:	609a      	str	r2, [r3, #8]
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800d110:	b480      	push	{r7}
 800d112:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d114:	4b05      	ldr	r3, [pc, #20]	@ (800d12c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a04      	ldr	r2, [pc, #16]	@ (800d12c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800d11a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d11e:	6013      	str	r3, [r2, #0]
}
 800d120:	bf00      	nop
 800d122:	46bd      	mov	sp, r7
 800d124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d128:	4770      	bx	lr
 800d12a:	bf00      	nop
 800d12c:	58000400 	.word	0x58000400

0800d130 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800d130:	b480      	push	{r7}
 800d132:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
}
 800d134:	bf00      	nop
 800d136:	46bd      	mov	sp, r7
 800d138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d13c:	4770      	bx	lr
	...

0800d140 <LL_EXTI_ReadFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800d148:	4b04      	ldr	r3, [pc, #16]	@ (800d15c <LL_EXTI_ReadFlag_0_31+0x1c>)
 800d14a:	68da      	ldr	r2, [r3, #12]
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	4013      	ands	r3, r2
}
 800d150:	4618      	mov	r0, r3
 800d152:	370c      	adds	r7, #12
 800d154:	46bd      	mov	sp, r7
 800d156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15a:	4770      	bx	lr
 800d15c:	58000800 	.word	0x58000800

0800d160 <LL_EXTI_ReadFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_32_63(uint32_t ExtiLine)
{
 800d160:	b480      	push	{r7}
 800d162:	b083      	sub	sp, #12
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(EXTI->PR2, ExtiLine));
 800d168:	4b04      	ldr	r3, [pc, #16]	@ (800d17c <LL_EXTI_ReadFlag_32_63+0x1c>)
 800d16a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4013      	ands	r3, r2
}
 800d170:	4618      	mov	r0, r3
 800d172:	370c      	adds	r7, #12
 800d174:	46bd      	mov	sp, r7
 800d176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17a:	4770      	bx	lr
 800d17c:	58000800 	.word	0x58000800

0800d180 <LL_EXTI_ClearFlag_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800d188:	4a04      	ldr	r2, [pc, #16]	@ (800d19c <LL_EXTI_ClearFlag_0_31+0x1c>)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	60d3      	str	r3, [r2, #12]
}
 800d18e:	bf00      	nop
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
 800d19a:	bf00      	nop
 800d19c:	58000800 	.word	0x58000800

0800d1a0 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800d1a0:	b480      	push	{r7}
 800d1a2:	b083      	sub	sp, #12
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800d1a8:	4a04      	ldr	r2, [pc, #16]	@ (800d1bc <LL_EXTI_ClearFlag_32_63+0x1c>)
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 800d1ae:	bf00      	nop
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr
 800d1ba:	bf00      	nop
 800d1bc:	58000800 	.word	0x58000800

0800d1c0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800d1c0:	b480      	push	{r7}
 800d1c2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800d1c4:	4b04      	ldr	r3, [pc, #16]	@ (800d1d8 <HAL_PWREx_GetVoltageRange+0x18>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	58000400 	.word	0x58000400

0800d1dc <HAL_PWREx_PVD_PVM_IRQHandler>:
  * @brief This function handles the PWR PVD/PVMx interrupt request.
  * @note This API should be called under the PVD_PVM_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_PVM_IRQHandler(void)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	af00      	add	r7, sp, #0
  /* Check PWR exti flag */
  if (__HAL_PWR_PVD_EXTI_GET_FLAG() != 0U)
 800d1e0:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d1e4:	f7ff ffac 	bl	800d140 <LL_EXTI_ReadFlag_0_31>
 800d1e8:	4603      	mov	r3, r0
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d005      	beq.n	800d1fa <HAL_PWREx_PVD_PVM_IRQHandler+0x1e>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800d1ee:	f7ff ff9f 	bl	800d130 <HAL_PWR_PVDCallback>

    /* Clear PVD exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800d1f2:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 800d1f6:	f7ff ffc3 	bl	800d180 <LL_EXTI_ClearFlag_0_31>
  }

#if defined(PWR_CR2_PVME1)
  /* Next, successively check PVMx exti flags */
  if (__HAL_PWR_PVM1_EXTI_GET_FLAG() != 0U)
 800d1fa:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d1fe:	f7ff ff9f 	bl	800d140 <LL_EXTI_ReadFlag_0_31>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d005      	beq.n	800d214 <HAL_PWREx_PVD_PVM_IRQHandler+0x38>
  {
    /* PWR PVM1 interrupt user callback */
    HAL_PWREx_PVM1Callback();
 800d208:	f000 f811 	bl	800d22e <HAL_PWREx_PVM1Callback>

    /* Clear PVM1 exti pending bit */
    __HAL_PWR_PVM1_EXTI_CLEAR_FLAG();
 800d20c:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800d210:	f7ff ffb6 	bl	800d180 <LL_EXTI_ClearFlag_0_31>
  }
#endif /* PWR_CR2_PVME1 */

  if (__HAL_PWR_PVM3_EXTI_GET_FLAG() != 0U)
 800d214:	2002      	movs	r0, #2
 800d216:	f7ff ffa3 	bl	800d160 <LL_EXTI_ReadFlag_32_63>
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d004      	beq.n	800d22a <HAL_PWREx_PVD_PVM_IRQHandler+0x4e>
  {
    /* PWR PVM3 interrupt user callback */
    HAL_PWREx_PVM3Callback();
 800d220:	f000 f80c 	bl	800d23c <HAL_PWREx_PVM3Callback>

    /* Clear PVM3 exti pending bit */
    __HAL_PWR_PVM3_EXTI_CLEAR_FLAG();
 800d224:	2002      	movs	r0, #2
 800d226:	f7ff ffbb 	bl	800d1a0 <LL_EXTI_ClearFlag_32_63>
  }
}
 800d22a:	bf00      	nop
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <HAL_PWREx_PVM1Callback>:
/**
  * @brief PWR PVM1 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM1Callback(void)
{
 800d22e:	b480      	push	{r7}
 800d230:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM1Callback() API can be implemented in the user file
   */
}
 800d232:	bf00      	nop
 800d234:	46bd      	mov	sp, r7
 800d236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d23a:	4770      	bx	lr

0800d23c <HAL_PWREx_PVM3Callback>:
/**
  * @brief PWR PVM3 interrupt callback
  * @retval None
  */
__weak void HAL_PWREx_PVM3Callback(void)
{
 800d23c:	b480      	push	{r7}
 800d23e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified; when the callback is needed,
            HAL_PWREx_PVM3Callback() API can be implemented in the user file
   */
}
 800d240:	bf00      	nop
 800d242:	46bd      	mov	sp, r7
 800d244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d248:	4770      	bx	lr

0800d24a <LL_RCC_HSE_IsEnabledDiv2>:
{
 800d24a:	b480      	push	{r7}
 800d24c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800d24e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800d258:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d25c:	d101      	bne.n	800d262 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800d25e:	2301      	movs	r3, #1
 800d260:	e000      	b.n	800d264 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800d262:	2300      	movs	r3, #0
}
 800d264:	4618      	mov	r0, r3
 800d266:	46bd      	mov	sp, r7
 800d268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d26c:	4770      	bx	lr

0800d26e <LL_RCC_HSE_Enable>:
{
 800d26e:	b480      	push	{r7}
 800d270:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800d272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d27c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d280:	6013      	str	r3, [r2, #0]
}
 800d282:	bf00      	nop
 800d284:	46bd      	mov	sp, r7
 800d286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28a:	4770      	bx	lr

0800d28c <LL_RCC_HSE_Disable>:
{
 800d28c:	b480      	push	{r7}
 800d28e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800d290:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d29a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d29e:	6013      	str	r3, [r2, #0]
}
 800d2a0:	bf00      	nop
 800d2a2:	46bd      	mov	sp, r7
 800d2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <LL_RCC_HSE_IsReady>:
{
 800d2aa:	b480      	push	{r7}
 800d2ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800d2ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d2bc:	d101      	bne.n	800d2c2 <LL_RCC_HSE_IsReady+0x18>
 800d2be:	2301      	movs	r3, #1
 800d2c0:	e000      	b.n	800d2c4 <LL_RCC_HSE_IsReady+0x1a>
 800d2c2:	2300      	movs	r3, #0
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <LL_RCC_HSI_Enable>:
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800d2d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d2e0:	6013      	str	r3, [r2, #0]
}
 800d2e2:	bf00      	nop
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr

0800d2ec <LL_RCC_HSI_Disable>:
{
 800d2ec:	b480      	push	{r7}
 800d2ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800d2f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d2fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800d2fe:	6013      	str	r3, [r2, #0]
}
 800d300:	bf00      	nop
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr

0800d30a <LL_RCC_HSI_IsReady>:
{
 800d30a:	b480      	push	{r7}
 800d30c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800d30e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800d318:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d31c:	d101      	bne.n	800d322 <LL_RCC_HSI_IsReady+0x18>
 800d31e:	2301      	movs	r3, #1
 800d320:	e000      	b.n	800d324 <LL_RCC_HSI_IsReady+0x1a>
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	46bd      	mov	sp, r7
 800d328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32c:	4770      	bx	lr

0800d32e <LL_RCC_HSI_SetCalibTrimming>:
{
 800d32e:	b480      	push	{r7}
 800d330:	b083      	sub	sp, #12
 800d332:	af00      	add	r7, sp, #0
 800d334:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800d336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	061b      	lsls	r3, r3, #24
 800d344:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d348:	4313      	orrs	r3, r2
 800d34a:	604b      	str	r3, [r1, #4]
}
 800d34c:	bf00      	nop
 800d34e:	370c      	adds	r7, #12
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr

0800d358 <LL_RCC_HSI48_Enable>:
{
 800d358:	b480      	push	{r7}
 800d35a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d35c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d360:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d364:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d368:	f043 0301 	orr.w	r3, r3, #1
 800d36c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d370:	bf00      	nop
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr

0800d37a <LL_RCC_HSI48_Disable>:
{
 800d37a:	b480      	push	{r7}
 800d37c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 800d37e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d382:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d38a:	f023 0301 	bic.w	r3, r3, #1
 800d38e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 800d392:	bf00      	nop
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr

0800d39c <LL_RCC_HSI48_IsReady>:
{
 800d39c:	b480      	push	{r7}
 800d39e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800d3a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d3a8:	f003 0302 	and.w	r3, r3, #2
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d101      	bne.n	800d3b4 <LL_RCC_HSI48_IsReady+0x18>
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	e000      	b.n	800d3b6 <LL_RCC_HSI48_IsReady+0x1a>
 800d3b4:	2300      	movs	r3, #0
}
 800d3b6:	4618      	mov	r0, r3
 800d3b8:	46bd      	mov	sp, r7
 800d3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3be:	4770      	bx	lr

0800d3c0 <LL_RCC_LSE_Enable>:
{
 800d3c0:	b480      	push	{r7}
 800d3c2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d3c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3d0:	f043 0301 	orr.w	r3, r3, #1
 800d3d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d3d8:	bf00      	nop
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e0:	4770      	bx	lr

0800d3e2 <LL_RCC_LSE_Disable>:
{
 800d3e2:	b480      	push	{r7}
 800d3e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800d3e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d3ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d3ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d3f2:	f023 0301 	bic.w	r3, r3, #1
 800d3f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d3fa:	bf00      	nop
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d402:	4770      	bx	lr

0800d404 <LL_RCC_LSE_EnableBypass>:
{
 800d404:	b480      	push	{r7}
 800d406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d408:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d40c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d410:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d414:	f043 0304 	orr.w	r3, r3, #4
 800d418:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d41c:	bf00      	nop
 800d41e:	46bd      	mov	sp, r7
 800d420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d424:	4770      	bx	lr

0800d426 <LL_RCC_LSE_DisableBypass>:
{
 800d426:	b480      	push	{r7}
 800d428:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800d42a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d42e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d432:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d436:	f023 0304 	bic.w	r3, r3, #4
 800d43a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800d43e:	bf00      	nop
 800d440:	46bd      	mov	sp, r7
 800d442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d446:	4770      	bx	lr

0800d448 <LL_RCC_LSE_IsReady>:
{
 800d448:	b480      	push	{r7}
 800d44a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800d44c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d450:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d454:	f003 0302 	and.w	r3, r3, #2
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d101      	bne.n	800d460 <LL_RCC_LSE_IsReady+0x18>
 800d45c:	2301      	movs	r3, #1
 800d45e:	e000      	b.n	800d462 <LL_RCC_LSE_IsReady+0x1a>
 800d460:	2300      	movs	r3, #0
}
 800d462:	4618      	mov	r0, r3
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr

0800d46c <LL_RCC_LSI1_Enable>:
{
 800d46c:	b480      	push	{r7}
 800d46e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d470:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d474:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d478:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d47c:	f043 0301 	orr.w	r3, r3, #1
 800d480:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d484:	bf00      	nop
 800d486:	46bd      	mov	sp, r7
 800d488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d48c:	4770      	bx	lr

0800d48e <LL_RCC_LSI1_Disable>:
{
 800d48e:	b480      	push	{r7}
 800d490:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800d492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d496:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d49a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d49e:	f023 0301 	bic.w	r3, r3, #1
 800d4a2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d4a6:	bf00      	nop
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ae:	4770      	bx	lr

0800d4b0 <LL_RCC_LSI1_IsReady>:
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800d4b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4bc:	f003 0302 	and.w	r3, r3, #2
 800d4c0:	2b02      	cmp	r3, #2
 800d4c2:	d101      	bne.n	800d4c8 <LL_RCC_LSI1_IsReady+0x18>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e000      	b.n	800d4ca <LL_RCC_LSI1_IsReady+0x1a>
 800d4c8:	2300      	movs	r3, #0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <LL_RCC_LSI2_Enable>:
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d4d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d4e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d4e4:	f043 0304 	orr.w	r3, r3, #4
 800d4e8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d4ec:	bf00      	nop
 800d4ee:	46bd      	mov	sp, r7
 800d4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4f4:	4770      	bx	lr

0800d4f6 <LL_RCC_LSI2_Disable>:
{
 800d4f6:	b480      	push	{r7}
 800d4f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800d4fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d4fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d502:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d506:	f023 0304 	bic.w	r3, r3, #4
 800d50a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800d50e:	bf00      	nop
 800d510:	46bd      	mov	sp, r7
 800d512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d516:	4770      	bx	lr

0800d518 <LL_RCC_LSI2_IsReady>:
{
 800d518:	b480      	push	{r7}
 800d51a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 800d51c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d520:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d524:	f003 0308 	and.w	r3, r3, #8
 800d528:	2b08      	cmp	r3, #8
 800d52a:	d101      	bne.n	800d530 <LL_RCC_LSI2_IsReady+0x18>
 800d52c:	2301      	movs	r3, #1
 800d52e:	e000      	b.n	800d532 <LL_RCC_LSI2_IsReady+0x1a>
 800d530:	2300      	movs	r3, #0
}
 800d532:	4618      	mov	r0, r3
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr

0800d53c <LL_RCC_LSI2_SetTrimming>:
{
 800d53c:	b480      	push	{r7}
 800d53e:	b083      	sub	sp, #12
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800d544:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d548:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d54c:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	021b      	lsls	r3, r3, #8
 800d554:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d558:	4313      	orrs	r3, r2
 800d55a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800d55e:	bf00      	nop
 800d560:	370c      	adds	r7, #12
 800d562:	46bd      	mov	sp, r7
 800d564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d568:	4770      	bx	lr

0800d56a <LL_RCC_MSI_Enable>:
{
 800d56a:	b480      	push	{r7}
 800d56c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800d56e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d578:	f043 0301 	orr.w	r3, r3, #1
 800d57c:	6013      	str	r3, [r2, #0]
}
 800d57e:	bf00      	nop
 800d580:	46bd      	mov	sp, r7
 800d582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d586:	4770      	bx	lr

0800d588 <LL_RCC_MSI_Disable>:
{
 800d588:	b480      	push	{r7}
 800d58a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800d58c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d596:	f023 0301 	bic.w	r3, r3, #1
 800d59a:	6013      	str	r3, [r2, #0]
}
 800d59c:	bf00      	nop
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a4:	4770      	bx	lr

0800d5a6 <LL_RCC_MSI_IsReady>:
{
 800d5a6:	b480      	push	{r7}
 800d5a8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800d5aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f003 0302 	and.w	r3, r3, #2
 800d5b4:	2b02      	cmp	r3, #2
 800d5b6:	d101      	bne.n	800d5bc <LL_RCC_MSI_IsReady+0x16>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	e000      	b.n	800d5be <LL_RCC_MSI_IsReady+0x18>
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr

0800d5c8 <LL_RCC_MSI_SetRange>:
{
 800d5c8:	b480      	push	{r7}
 800d5ca:	b083      	sub	sp, #12
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800d5d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d5da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4313      	orrs	r3, r2
 800d5e2:	600b      	str	r3, [r1, #0]
}
 800d5e4:	bf00      	nop
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <LL_RCC_MSI_GetRange>:
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800d5f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d600:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2bb0      	cmp	r3, #176	@ 0xb0
 800d606:	d901      	bls.n	800d60c <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800d608:	23b0      	movs	r3, #176	@ 0xb0
 800d60a:	607b      	str	r3, [r7, #4]
  return msiRange;
 800d60c:	687b      	ldr	r3, [r7, #4]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr

0800d61a <LL_RCC_MSI_SetCalibTrimming>:
{
 800d61a:	b480      	push	{r7}
 800d61c:	b083      	sub	sp, #12
 800d61e:	af00      	add	r7, sp, #0
 800d620:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800d622:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d626:	685b      	ldr	r3, [r3, #4]
 800d628:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	021b      	lsls	r3, r3, #8
 800d630:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d634:	4313      	orrs	r3, r2
 800d636:	604b      	str	r3, [r1, #4]
}
 800d638:	bf00      	nop
 800d63a:	370c      	adds	r7, #12
 800d63c:	46bd      	mov	sp, r7
 800d63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d642:	4770      	bx	lr

0800d644 <LL_RCC_SetSysClkSource>:
{
 800d644:	b480      	push	{r7}
 800d646:	b083      	sub	sp, #12
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800d64c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d650:	689b      	ldr	r3, [r3, #8]
 800d652:	f023 0203 	bic.w	r2, r3, #3
 800d656:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	4313      	orrs	r3, r2
 800d65e:	608b      	str	r3, [r1, #8]
}
 800d660:	bf00      	nop
 800d662:	370c      	adds	r7, #12
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <LL_RCC_GetSysClkSource>:
{
 800d66c:	b480      	push	{r7}
 800d66e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800d670:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	f003 030c 	and.w	r3, r3, #12
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	46bd      	mov	sp, r7
 800d67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d682:	4770      	bx	lr

0800d684 <LL_RCC_SetAHBPrescaler>:
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
 800d68a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800d68c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d690:	689b      	ldr	r3, [r3, #8]
 800d692:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d696:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	608b      	str	r3, [r1, #8]
}
 800d6a0:	bf00      	nop
 800d6a2:	370c      	adds	r7, #12
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6aa:	4770      	bx	lr

0800d6ac <LL_C2_RCC_SetAHBPrescaler>:
{
 800d6ac:	b480      	push	{r7}
 800d6ae:	b083      	sub	sp, #12
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800d6b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d6bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d6c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	4313      	orrs	r3, r2
 800d6c8:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d6cc:	bf00      	nop
 800d6ce:	370c      	adds	r7, #12
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <LL_RCC_SetAHB4Prescaler>:
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800d6e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d6e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d6e8:	f023 020f 	bic.w	r2, r3, #15
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	091b      	lsrs	r3, r3, #4
 800d6f0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800d6fa:	bf00      	nop
 800d6fc:	370c      	adds	r7, #12
 800d6fe:	46bd      	mov	sp, r7
 800d700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d704:	4770      	bx	lr

0800d706 <LL_RCC_SetAPB1Prescaler>:
{
 800d706:	b480      	push	{r7}
 800d708:	b083      	sub	sp, #12
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800d70e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d712:	689b      	ldr	r3, [r3, #8]
 800d714:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800d718:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4313      	orrs	r3, r2
 800d720:	608b      	str	r3, [r1, #8]
}
 800d722:	bf00      	nop
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <LL_RCC_SetAPB2Prescaler>:
{
 800d72e:	b480      	push	{r7}
 800d730:	b083      	sub	sp, #12
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800d736:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d73a:	689b      	ldr	r3, [r3, #8]
 800d73c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800d740:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	4313      	orrs	r3, r2
 800d748:	608b      	str	r3, [r1, #8]
}
 800d74a:	bf00      	nop
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <LL_RCC_GetAHBPrescaler>:
{
 800d756:	b480      	push	{r7}
 800d758:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800d75a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d75e:	689b      	ldr	r3, [r3, #8]
 800d760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d764:	4618      	mov	r0, r3
 800d766:	46bd      	mov	sp, r7
 800d768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76c:	4770      	bx	lr

0800d76e <LL_RCC_GetAHB4Prescaler>:
{
 800d76e:	b480      	push	{r7}
 800d770:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800d772:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d776:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d77a:	011b      	lsls	r3, r3, #4
 800d77c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800d780:	4618      	mov	r0, r3
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <LL_RCC_GetAPB1Prescaler>:
{
 800d78a:	b480      	push	{r7}
 800d78c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800d78e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d792:	689b      	ldr	r3, [r3, #8]
 800d794:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800d798:	4618      	mov	r0, r3
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr

0800d7a2 <LL_RCC_GetAPB2Prescaler>:
{
 800d7a2:	b480      	push	{r7}
 800d7a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800d7a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7aa:	689b      	ldr	r3, [r3, #8]
 800d7ac:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b8:	4770      	bx	lr

0800d7ba <LL_RCC_PLL_Enable>:
{
 800d7ba:	b480      	push	{r7}
 800d7bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800d7be:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d7c8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800d7cc:	6013      	str	r3, [r2, #0]
}
 800d7ce:	bf00      	nop
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d6:	4770      	bx	lr

0800d7d8 <LL_RCC_PLL_Disable>:
{
 800d7d8:	b480      	push	{r7}
 800d7da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800d7dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800d7e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d7ea:	6013      	str	r3, [r2, #0]
}
 800d7ec:	bf00      	nop
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7f4:	4770      	bx	lr

0800d7f6 <LL_RCC_PLL_IsReady>:
{
 800d7f6:	b480      	push	{r7}
 800d7f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800d7fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800d808:	d101      	bne.n	800d80e <LL_RCC_PLL_IsReady+0x18>
 800d80a:	2301      	movs	r3, #1
 800d80c:	e000      	b.n	800d810 <LL_RCC_PLL_IsReady+0x1a>
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	46bd      	mov	sp, r7
 800d814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d818:	4770      	bx	lr

0800d81a <LL_RCC_PLL_GetN>:
{
 800d81a:	b480      	push	{r7}
 800d81c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800d81e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d822:	68db      	ldr	r3, [r3, #12]
 800d824:	0a1b      	lsrs	r3, r3, #8
 800d826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	46bd      	mov	sp, r7
 800d82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d832:	4770      	bx	lr

0800d834 <LL_RCC_PLL_GetR>:
{
 800d834:	b480      	push	{r7}
 800d836:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800d838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d83c:	68db      	ldr	r3, [r3, #12]
 800d83e:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800d842:	4618      	mov	r0, r3
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr

0800d84c <LL_RCC_PLL_GetDivider>:
{
 800d84c:	b480      	push	{r7}
 800d84e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800d850:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d854:	68db      	ldr	r3, [r3, #12]
 800d856:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	46bd      	mov	sp, r7
 800d85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d862:	4770      	bx	lr

0800d864 <LL_RCC_PLL_GetMainSource>:
{
 800d864:	b480      	push	{r7}
 800d866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800d868:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d86c:	68db      	ldr	r3, [r3, #12]
 800d86e:	f003 0303 	and.w	r3, r3, #3
}
 800d872:	4618      	mov	r0, r3
 800d874:	46bd      	mov	sp, r7
 800d876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87a:	4770      	bx	lr

0800d87c <LL_RCC_IsActiveFlag_HPRE>:
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800d880:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d884:	689b      	ldr	r3, [r3, #8]
 800d886:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d88a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d88e:	d101      	bne.n	800d894 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800d890:	2301      	movs	r3, #1
 800d892:	e000      	b.n	800d896 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800d8a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d8ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8b4:	d101      	bne.n	800d8ba <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 800d8b6:	2301      	movs	r3, #1
 800d8b8:	e000      	b.n	800d8bc <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800d8ba:	2300      	movs	r3, #0
}
 800d8bc:	4618      	mov	r0, r3
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c4:	4770      	bx	lr

0800d8c6 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800d8ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800d8d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800d8d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d8da:	d101      	bne.n	800d8e0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	e000      	b.n	800d8e2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800d8e0:	2300      	movs	r3, #0
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <LL_RCC_IsActiveFlag_PPRE1>:
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800d8f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d8f4:	689b      	ldr	r3, [r3, #8]
 800d8f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d8fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d8fe:	d101      	bne.n	800d904 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800d900:	2301      	movs	r3, #1
 800d902:	e000      	b.n	800d906 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800d904:	2300      	movs	r3, #0
}
 800d906:	4618      	mov	r0, r3
 800d908:	46bd      	mov	sp, r7
 800d90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d90e:	4770      	bx	lr

0800d910 <LL_RCC_IsActiveFlag_PPRE2>:
{
 800d910:	b480      	push	{r7}
 800d912:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800d914:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800d91e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d922:	d101      	bne.n	800d928 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800d924:	2301      	movs	r3, #1
 800d926:	e000      	b.n	800d92a <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800d928:	2300      	movs	r3, #0
}
 800d92a:	4618      	mov	r0, r3
 800d92c:	46bd      	mov	sp, r7
 800d92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d932:	4770      	bx	lr

0800d934 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d934:	b590      	push	{r4, r7, lr}
 800d936:	b08d      	sub	sp, #52	@ 0x34
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d101      	bne.n	800d946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d942:	2301      	movs	r3, #1
 800d944:	e363      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	f003 0320 	and.w	r3, r3, #32
 800d94e:	2b00      	cmp	r3, #0
 800d950:	f000 808d 	beq.w	800da6e <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800d954:	f7ff fe8a 	bl	800d66c <LL_RCC_GetSysClkSource>
 800d958:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800d95a:	f7ff ff83 	bl	800d864 <LL_RCC_PLL_GetMainSource>
 800d95e:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800d960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d962:	2b00      	cmp	r3, #0
 800d964:	d005      	beq.n	800d972 <HAL_RCC_OscConfig+0x3e>
 800d966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d968:	2b0c      	cmp	r3, #12
 800d96a:	d147      	bne.n	800d9fc <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 800d96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d96e:	2b01      	cmp	r3, #1
 800d970:	d144      	bne.n	800d9fc <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	69db      	ldr	r3, [r3, #28]
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e347      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800d982:	f7ff fe35 	bl	800d5f0 <LL_RCC_MSI_GetRange>
 800d986:	4603      	mov	r3, r0
 800d988:	429c      	cmp	r4, r3
 800d98a:	d914      	bls.n	800d9b6 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d990:	4618      	mov	r0, r3
 800d992:	f000 fd2f 	bl	800e3f4 <RCC_SetFlashLatencyFromMSIRange>
 800d996:	4603      	mov	r3, r0
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d001      	beq.n	800d9a0 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 800d99c:	2301      	movs	r3, #1
 800d99e:	e336      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7ff fe0f 	bl	800d5c8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6a1b      	ldr	r3, [r3, #32]
 800d9ae:	4618      	mov	r0, r3
 800d9b0:	f7ff fe33 	bl	800d61a <LL_RCC_MSI_SetCalibTrimming>
 800d9b4:	e013      	b.n	800d9de <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f7ff fe04 	bl	800d5c8 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6a1b      	ldr	r3, [r3, #32]
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f7ff fe28 	bl	800d61a <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	f000 fd10 	bl	800e3f4 <RCC_SetFlashLatencyFromMSIRange>
 800d9d4:	4603      	mov	r3, r0
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	d001      	beq.n	800d9de <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e317      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800d9de:	f000 fcc9 	bl	800e374 <HAL_RCC_GetHCLKFreq>
 800d9e2:	4603      	mov	r3, r0
 800d9e4:	4aa4      	ldr	r2, [pc, #656]	@ (800dc78 <HAL_RCC_OscConfig+0x344>)
 800d9e6:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800d9e8:	4ba4      	ldr	r3, [pc, #656]	@ (800dc7c <HAL_RCC_OscConfig+0x348>)
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	f7fe fa21 	bl	800be34 <HAL_InitTick>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d039      	beq.n	800da6c <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 800d9f8:	2301      	movs	r3, #1
 800d9fa:	e308      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	69db      	ldr	r3, [r3, #28]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d01e      	beq.n	800da42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800da04:	f7ff fdb1 	bl	800d56a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800da08:	f7fe fa62 	bl	800bed0 <HAL_GetTick>
 800da0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800da0e:	e008      	b.n	800da22 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800da10:	f7fe fa5e 	bl	800bed0 <HAL_GetTick>
 800da14:	4602      	mov	r2, r0
 800da16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da18:	1ad3      	subs	r3, r2, r3
 800da1a:	2b02      	cmp	r3, #2
 800da1c:	d901      	bls.n	800da22 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800da1e:	2303      	movs	r3, #3
 800da20:	e2f5      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 800da22:	f7ff fdc0 	bl	800d5a6 <LL_RCC_MSI_IsReady>
 800da26:	4603      	mov	r3, r0
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d0f1      	beq.n	800da10 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da30:	4618      	mov	r0, r3
 800da32:	f7ff fdc9 	bl	800d5c8 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	6a1b      	ldr	r3, [r3, #32]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f7ff fded 	bl	800d61a <LL_RCC_MSI_SetCalibTrimming>
 800da40:	e015      	b.n	800da6e <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800da42:	f7ff fda1 	bl	800d588 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800da46:	f7fe fa43 	bl	800bed0 <HAL_GetTick>
 800da4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800da4c:	e008      	b.n	800da60 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800da4e:	f7fe fa3f 	bl	800bed0 <HAL_GetTick>
 800da52:	4602      	mov	r2, r0
 800da54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da56:	1ad3      	subs	r3, r2, r3
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d901      	bls.n	800da60 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800da5c:	2303      	movs	r3, #3
 800da5e:	e2d6      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 800da60:	f7ff fda1 	bl	800d5a6 <LL_RCC_MSI_IsReady>
 800da64:	4603      	mov	r3, r0
 800da66:	2b00      	cmp	r3, #0
 800da68:	d1f1      	bne.n	800da4e <HAL_RCC_OscConfig+0x11a>
 800da6a:	e000      	b.n	800da6e <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800da6c:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 0301 	and.w	r3, r3, #1
 800da76:	2b00      	cmp	r3, #0
 800da78:	d047      	beq.n	800db0a <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800da7a:	f7ff fdf7 	bl	800d66c <LL_RCC_GetSysClkSource>
 800da7e:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800da80:	f7ff fef0 	bl	800d864 <LL_RCC_PLL_GetMainSource>
 800da84:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800da86:	6a3b      	ldr	r3, [r7, #32]
 800da88:	2b08      	cmp	r3, #8
 800da8a:	d005      	beq.n	800da98 <HAL_RCC_OscConfig+0x164>
 800da8c:	6a3b      	ldr	r3, [r7, #32]
 800da8e:	2b0c      	cmp	r3, #12
 800da90:	d108      	bne.n	800daa4 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 800da92:	69fb      	ldr	r3, [r7, #28]
 800da94:	2b03      	cmp	r3, #3
 800da96:	d105      	bne.n	800daa4 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d134      	bne.n	800db0a <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 800daa0:	2301      	movs	r3, #1
 800daa2:	e2b4      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	685b      	ldr	r3, [r3, #4]
 800daa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800daac:	d102      	bne.n	800dab4 <HAL_RCC_OscConfig+0x180>
 800daae:	f7ff fbde 	bl	800d26e <LL_RCC_HSE_Enable>
 800dab2:	e001      	b.n	800dab8 <HAL_RCC_OscConfig+0x184>
 800dab4:	f7ff fbea 	bl	800d28c <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	685b      	ldr	r3, [r3, #4]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d012      	beq.n	800dae6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dac0:	f7fe fa06 	bl	800bed0 <HAL_GetTick>
 800dac4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800dac6:	e008      	b.n	800dada <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dac8:	f7fe fa02 	bl	800bed0 <HAL_GetTick>
 800dacc:	4602      	mov	r2, r0
 800dace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dad0:	1ad3      	subs	r3, r2, r3
 800dad2:	2b64      	cmp	r3, #100	@ 0x64
 800dad4:	d901      	bls.n	800dada <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800dad6:	2303      	movs	r3, #3
 800dad8:	e299      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 800dada:	f7ff fbe6 	bl	800d2aa <LL_RCC_HSE_IsReady>
 800dade:	4603      	mov	r3, r0
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d0f1      	beq.n	800dac8 <HAL_RCC_OscConfig+0x194>
 800dae4:	e011      	b.n	800db0a <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dae6:	f7fe f9f3 	bl	800bed0 <HAL_GetTick>
 800daea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800daec:	e008      	b.n	800db00 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800daee:	f7fe f9ef 	bl	800bed0 <HAL_GetTick>
 800daf2:	4602      	mov	r2, r0
 800daf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daf6:	1ad3      	subs	r3, r2, r3
 800daf8:	2b64      	cmp	r3, #100	@ 0x64
 800dafa:	d901      	bls.n	800db00 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800dafc:	2303      	movs	r3, #3
 800dafe:	e286      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 800db00:	f7ff fbd3 	bl	800d2aa <LL_RCC_HSE_IsReady>
 800db04:	4603      	mov	r3, r0
 800db06:	2b00      	cmp	r3, #0
 800db08:	d1f1      	bne.n	800daee <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f003 0302 	and.w	r3, r3, #2
 800db12:	2b00      	cmp	r3, #0
 800db14:	d04c      	beq.n	800dbb0 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800db16:	f7ff fda9 	bl	800d66c <LL_RCC_GetSysClkSource>
 800db1a:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800db1c:	f7ff fea2 	bl	800d864 <LL_RCC_PLL_GetMainSource>
 800db20:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800db22:	69bb      	ldr	r3, [r7, #24]
 800db24:	2b04      	cmp	r3, #4
 800db26:	d005      	beq.n	800db34 <HAL_RCC_OscConfig+0x200>
 800db28:	69bb      	ldr	r3, [r7, #24]
 800db2a:	2b0c      	cmp	r3, #12
 800db2c:	d10e      	bne.n	800db4c <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	2b02      	cmp	r3, #2
 800db32:	d10b      	bne.n	800db4c <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	68db      	ldr	r3, [r3, #12]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d101      	bne.n	800db40 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 800db3c:	2301      	movs	r3, #1
 800db3e:	e266      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	691b      	ldr	r3, [r3, #16]
 800db44:	4618      	mov	r0, r3
 800db46:	f7ff fbf2 	bl	800d32e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800db4a:	e031      	b.n	800dbb0 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	68db      	ldr	r3, [r3, #12]
 800db50:	2b00      	cmp	r3, #0
 800db52:	d019      	beq.n	800db88 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800db54:	f7ff fbbb 	bl	800d2ce <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db58:	f7fe f9ba 	bl	800bed0 <HAL_GetTick>
 800db5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 800db5e:	e008      	b.n	800db72 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db60:	f7fe f9b6 	bl	800bed0 <HAL_GetTick>
 800db64:	4602      	mov	r2, r0
 800db66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	2b02      	cmp	r3, #2
 800db6c:	d901      	bls.n	800db72 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800db6e:	2303      	movs	r3, #3
 800db70:	e24d      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 800db72:	f7ff fbca 	bl	800d30a <LL_RCC_HSI_IsReady>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d0f1      	beq.n	800db60 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	691b      	ldr	r3, [r3, #16]
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff fbd4 	bl	800d32e <LL_RCC_HSI_SetCalibTrimming>
 800db86:	e013      	b.n	800dbb0 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800db88:	f7ff fbb0 	bl	800d2ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800db8c:	f7fe f9a0 	bl	800bed0 <HAL_GetTick>
 800db90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800db92:	e008      	b.n	800dba6 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800db94:	f7fe f99c 	bl	800bed0 <HAL_GetTick>
 800db98:	4602      	mov	r2, r0
 800db9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	2b02      	cmp	r3, #2
 800dba0:	d901      	bls.n	800dba6 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 800dba2:	2303      	movs	r3, #3
 800dba4:	e233      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 800dba6:	f7ff fbb0 	bl	800d30a <LL_RCC_HSI_IsReady>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d1f1      	bne.n	800db94 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	f003 0308 	and.w	r3, r3, #8
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d106      	bne.n	800dbca <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	f000 80a3 	beq.w	800dd10 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	695b      	ldr	r3, [r3, #20]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d076      	beq.n	800dcc0 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f003 0310 	and.w	r3, r3, #16
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d046      	beq.n	800dc6c <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 800dbde:	f7ff fc67 	bl	800d4b0 <LL_RCC_LSI1_IsReady>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d113      	bne.n	800dc10 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 800dbe8:	f7ff fc40 	bl	800d46c <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800dbec:	f7fe f970 	bl	800bed0 <HAL_GetTick>
 800dbf0:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800dbf2:	e008      	b.n	800dc06 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dbf4:	f7fe f96c 	bl	800bed0 <HAL_GetTick>
 800dbf8:	4602      	mov	r2, r0
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbfc:	1ad3      	subs	r3, r2, r3
 800dbfe:	2b02      	cmp	r3, #2
 800dc00:	d901      	bls.n	800dc06 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 800dc02:	2303      	movs	r3, #3
 800dc04:	e203      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800dc06:	f7ff fc53 	bl	800d4b0 <LL_RCC_LSI1_IsReady>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d0f1      	beq.n	800dbf4 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 800dc10:	f7ff fc60 	bl	800d4d4 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc14:	f7fe f95c 	bl	800bed0 <HAL_GetTick>
 800dc18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 800dc1a:	e008      	b.n	800dc2e <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dc1c:	f7fe f958 	bl	800bed0 <HAL_GetTick>
 800dc20:	4602      	mov	r2, r0
 800dc22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc24:	1ad3      	subs	r3, r2, r3
 800dc26:	2b03      	cmp	r3, #3
 800dc28:	d901      	bls.n	800dc2e <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 800dc2a:	2303      	movs	r3, #3
 800dc2c:	e1ef      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 800dc2e:	f7ff fc73 	bl	800d518 <LL_RCC_LSI2_IsReady>
 800dc32:	4603      	mov	r3, r0
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d0f1      	beq.n	800dc1c <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	699b      	ldr	r3, [r3, #24]
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	f7ff fc7d 	bl	800d53c <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 800dc42:	f7ff fc24 	bl	800d48e <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc46:	f7fe f943 	bl	800bed0 <HAL_GetTick>
 800dc4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 800dc4c:	e008      	b.n	800dc60 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dc4e:	f7fe f93f 	bl	800bed0 <HAL_GetTick>
 800dc52:	4602      	mov	r2, r0
 800dc54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc56:	1ad3      	subs	r3, r2, r3
 800dc58:	2b02      	cmp	r3, #2
 800dc5a:	d901      	bls.n	800dc60 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 800dc5c:	2303      	movs	r3, #3
 800dc5e:	e1d6      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 800dc60:	f7ff fc26 	bl	800d4b0 <LL_RCC_LSI1_IsReady>
 800dc64:	4603      	mov	r3, r0
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d1f1      	bne.n	800dc4e <HAL_RCC_OscConfig+0x31a>
 800dc6a:	e051      	b.n	800dd10 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 800dc6c:	f7ff fbfe 	bl	800d46c <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dc70:	f7fe f92e 	bl	800bed0 <HAL_GetTick>
 800dc74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 800dc76:	e00c      	b.n	800dc92 <HAL_RCC_OscConfig+0x35e>
 800dc78:	20000094 	.word	0x20000094
 800dc7c:	20000098 	.word	0x20000098
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dc80:	f7fe f926 	bl	800bed0 <HAL_GetTick>
 800dc84:	4602      	mov	r2, r0
 800dc86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc88:	1ad3      	subs	r3, r2, r3
 800dc8a:	2b02      	cmp	r3, #2
 800dc8c:	d901      	bls.n	800dc92 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800dc8e:	2303      	movs	r3, #3
 800dc90:	e1bd      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 800dc92:	f7ff fc0d 	bl	800d4b0 <LL_RCC_LSI1_IsReady>
 800dc96:	4603      	mov	r3, r0
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d0f1      	beq.n	800dc80 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 800dc9c:	f7ff fc2b 	bl	800d4f6 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 800dca0:	e008      	b.n	800dcb4 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dca2:	f7fe f915 	bl	800bed0 <HAL_GetTick>
 800dca6:	4602      	mov	r2, r0
 800dca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcaa:	1ad3      	subs	r3, r2, r3
 800dcac:	2b03      	cmp	r3, #3
 800dcae:	d901      	bls.n	800dcb4 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 800dcb0:	2303      	movs	r3, #3
 800dcb2:	e1ac      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800dcb4:	f7ff fc30 	bl	800d518 <LL_RCC_LSI2_IsReady>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1f1      	bne.n	800dca2 <HAL_RCC_OscConfig+0x36e>
 800dcbe:	e027      	b.n	800dd10 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 800dcc0:	f7ff fc19 	bl	800d4f6 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcc4:	f7fe f904 	bl	800bed0 <HAL_GetTick>
 800dcc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 800dcca:	e008      	b.n	800dcde <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 800dccc:	f7fe f900 	bl	800bed0 <HAL_GetTick>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcd4:	1ad3      	subs	r3, r2, r3
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d901      	bls.n	800dcde <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800dcda:	2303      	movs	r3, #3
 800dcdc:	e197      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 800dcde:	f7ff fc1b 	bl	800d518 <LL_RCC_LSI2_IsReady>
 800dce2:	4603      	mov	r3, r0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d1f1      	bne.n	800dccc <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800dce8:	f7ff fbd1 	bl	800d48e <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dcec:	f7fe f8f0 	bl	800bed0 <HAL_GetTick>
 800dcf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 800dcf2:	e008      	b.n	800dd06 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800dcf4:	f7fe f8ec 	bl	800bed0 <HAL_GetTick>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dcfc:	1ad3      	subs	r3, r2, r3
 800dcfe:	2b02      	cmp	r3, #2
 800dd00:	d901      	bls.n	800dd06 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 800dd02:	2303      	movs	r3, #3
 800dd04:	e183      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800dd06:	f7ff fbd3 	bl	800d4b0 <LL_RCC_LSI1_IsReady>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d1f1      	bne.n	800dcf4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	681b      	ldr	r3, [r3, #0]
 800dd14:	f003 0304 	and.w	r3, r3, #4
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d05b      	beq.n	800ddd4 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd1c:	4ba7      	ldr	r3, [pc, #668]	@ (800dfbc <HAL_RCC_OscConfig+0x688>)
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d114      	bne.n	800dd52 <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800dd28:	f7ff f9f2 	bl	800d110 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800dd2c:	f7fe f8d0 	bl	800bed0 <HAL_GetTick>
 800dd30:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd32:	e008      	b.n	800dd46 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800dd34:	f7fe f8cc 	bl	800bed0 <HAL_GetTick>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd3c:	1ad3      	subs	r3, r2, r3
 800dd3e:	2b02      	cmp	r3, #2
 800dd40:	d901      	bls.n	800dd46 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800dd42:	2303      	movs	r3, #3
 800dd44:	e163      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800dd46:	4b9d      	ldr	r3, [pc, #628]	@ (800dfbc <HAL_RCC_OscConfig+0x688>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d0f0      	beq.n	800dd34 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	689b      	ldr	r3, [r3, #8]
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d102      	bne.n	800dd60 <HAL_RCC_OscConfig+0x42c>
 800dd5a:	f7ff fb31 	bl	800d3c0 <LL_RCC_LSE_Enable>
 800dd5e:	e00c      	b.n	800dd7a <HAL_RCC_OscConfig+0x446>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	689b      	ldr	r3, [r3, #8]
 800dd64:	2b05      	cmp	r3, #5
 800dd66:	d104      	bne.n	800dd72 <HAL_RCC_OscConfig+0x43e>
 800dd68:	f7ff fb4c 	bl	800d404 <LL_RCC_LSE_EnableBypass>
 800dd6c:	f7ff fb28 	bl	800d3c0 <LL_RCC_LSE_Enable>
 800dd70:	e003      	b.n	800dd7a <HAL_RCC_OscConfig+0x446>
 800dd72:	f7ff fb36 	bl	800d3e2 <LL_RCC_LSE_Disable>
 800dd76:	f7ff fb56 	bl	800d426 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	689b      	ldr	r3, [r3, #8]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d014      	beq.n	800ddac <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dd82:	f7fe f8a5 	bl	800bed0 <HAL_GetTick>
 800dd86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800dd88:	e00a      	b.n	800dda0 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dd8a:	f7fe f8a1 	bl	800bed0 <HAL_GetTick>
 800dd8e:	4602      	mov	r2, r0
 800dd90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd92:	1ad3      	subs	r3, r2, r3
 800dd94:	f241 3288 	movw	r2, #5000	@ 0x1388
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d901      	bls.n	800dda0 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800dd9c:	2303      	movs	r3, #3
 800dd9e:	e136      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800dda0:	f7ff fb52 	bl	800d448 <LL_RCC_LSE_IsReady>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d0ef      	beq.n	800dd8a <HAL_RCC_OscConfig+0x456>
 800ddaa:	e013      	b.n	800ddd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddac:	f7fe f890 	bl	800bed0 <HAL_GetTick>
 800ddb0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800ddb2:	e00a      	b.n	800ddca <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ddb4:	f7fe f88c 	bl	800bed0 <HAL_GetTick>
 800ddb8:	4602      	mov	r2, r0
 800ddba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ddc2:	4293      	cmp	r3, r2
 800ddc4:	d901      	bls.n	800ddca <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	e121      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 800ddca:	f7ff fb3d 	bl	800d448 <LL_RCC_LSE_IsReady>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d1ef      	bne.n	800ddb4 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d02c      	beq.n	800de3a <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	d014      	beq.n	800de12 <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800dde8:	f7ff fab6 	bl	800d358 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ddec:	f7fe f870 	bl	800bed0 <HAL_GetTick>
 800ddf0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800ddf2:	e008      	b.n	800de06 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ddf4:	f7fe f86c 	bl	800bed0 <HAL_GetTick>
 800ddf8:	4602      	mov	r2, r0
 800ddfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfc:	1ad3      	subs	r3, r2, r3
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d901      	bls.n	800de06 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800de02:	2303      	movs	r3, #3
 800de04:	e103      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800de06:	f7ff fac9 	bl	800d39c <LL_RCC_HSI48_IsReady>
 800de0a:	4603      	mov	r3, r0
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d0f1      	beq.n	800ddf4 <HAL_RCC_OscConfig+0x4c0>
 800de10:	e013      	b.n	800de3a <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800de12:	f7ff fab2 	bl	800d37a <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de16:	f7fe f85b 	bl	800bed0 <HAL_GetTick>
 800de1a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 800de1c:	e008      	b.n	800de30 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800de1e:	f7fe f857 	bl	800bed0 <HAL_GetTick>
 800de22:	4602      	mov	r2, r0
 800de24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de26:	1ad3      	subs	r3, r2, r3
 800de28:	2b02      	cmp	r3, #2
 800de2a:	d901      	bls.n	800de30 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 800de2c:	2303      	movs	r3, #3
 800de2e:	e0ee      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800de30:	f7ff fab4 	bl	800d39c <LL_RCC_HSI48_IsReady>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d1f1      	bne.n	800de1e <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de3e:	2b00      	cmp	r3, #0
 800de40:	f000 80e4 	beq.w	800e00c <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800de44:	f7ff fc12 	bl	800d66c <LL_RCC_GetSysClkSource>
 800de48:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 800de4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de56:	2b02      	cmp	r3, #2
 800de58:	f040 80b4 	bne.w	800dfc4 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f003 0203 	and.w	r2, r3, #3
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de66:	429a      	cmp	r2, r3
 800de68:	d123      	bne.n	800deb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800de74:	429a      	cmp	r2, r3
 800de76:	d11c      	bne.n	800deb2 <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	0a1b      	lsrs	r3, r3, #8
 800de7c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800de84:	429a      	cmp	r2, r3
 800de86:	d114      	bne.n	800deb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800de92:	429a      	cmp	r2, r3
 800de94:	d10d      	bne.n	800deb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d106      	bne.n	800deb2 <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800deae:	429a      	cmp	r2, r3
 800deb0:	d05d      	beq.n	800df6e <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	2b0c      	cmp	r3, #12
 800deb6:	d058      	beq.n	800df6a <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800deb8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d001      	beq.n	800deca <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800dec6:	2301      	movs	r3, #1
 800dec8:	e0a1      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800deca:	f7ff fc85 	bl	800d7d8 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800dece:	f7fd ffff 	bl	800bed0 <HAL_GetTick>
 800ded2:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ded4:	e008      	b.n	800dee8 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ded6:	f7fd fffb 	bl	800bed0 <HAL_GetTick>
 800deda:	4602      	mov	r2, r0
 800dedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dede:	1ad3      	subs	r3, r2, r3
 800dee0:	2b02      	cmp	r3, #2
 800dee2:	d901      	bls.n	800dee8 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800dee4:	2303      	movs	r3, #3
 800dee6:	e092      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dee8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800def2:	2b00      	cmp	r3, #0
 800def4:	d1ef      	bne.n	800ded6 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800def6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800defa:	68da      	ldr	r2, [r3, #12]
 800defc:	4b30      	ldr	r3, [pc, #192]	@ (800dfc0 <HAL_RCC_OscConfig+0x68c>)
 800defe:	4013      	ands	r3, r2
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800df04:	687a      	ldr	r2, [r7, #4]
 800df06:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800df08:	4311      	orrs	r1, r2
 800df0a:	687a      	ldr	r2, [r7, #4]
 800df0c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800df0e:	0212      	lsls	r2, r2, #8
 800df10:	4311      	orrs	r1, r2
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800df16:	4311      	orrs	r1, r2
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800df1c:	4311      	orrs	r1, r2
 800df1e:	687a      	ldr	r2, [r7, #4]
 800df20:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800df22:	430a      	orrs	r2, r1
 800df24:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800df28:	4313      	orrs	r3, r2
 800df2a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800df2c:	f7ff fc45 	bl	800d7ba <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800df30:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df34:	68db      	ldr	r3, [r3, #12]
 800df36:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df3e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800df40:	f7fd ffc6 	bl	800bed0 <HAL_GetTick>
 800df44:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df46:	e008      	b.n	800df5a <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df48:	f7fd ffc2 	bl	800bed0 <HAL_GetTick>
 800df4c:	4602      	mov	r2, r0
 800df4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df50:	1ad3      	subs	r3, r2, r3
 800df52:	2b02      	cmp	r3, #2
 800df54:	d901      	bls.n	800df5a <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 800df56:	2303      	movs	r3, #3
 800df58:	e059      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d0ef      	beq.n	800df48 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800df68:	e050      	b.n	800e00c <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800df6a:	2301      	movs	r3, #1
 800df6c:	e04f      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d147      	bne.n	800e00c <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800df7c:	f7ff fc1d 	bl	800d7ba <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800df80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800df8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800df8e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800df90:	f7fd ff9e 	bl	800bed0 <HAL_GetTick>
 800df94:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800df96:	e008      	b.n	800dfaa <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800df98:	f7fd ff9a 	bl	800bed0 <HAL_GetTick>
 800df9c:	4602      	mov	r2, r0
 800df9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfa0:	1ad3      	subs	r3, r2, r3
 800dfa2:	2b02      	cmp	r3, #2
 800dfa4:	d901      	bls.n	800dfaa <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800dfa6:	2303      	movs	r3, #3
 800dfa8:	e031      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800dfaa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d0ef      	beq.n	800df98 <HAL_RCC_OscConfig+0x664>
 800dfb8:	e028      	b.n	800e00c <HAL_RCC_OscConfig+0x6d8>
 800dfba:	bf00      	nop
 800dfbc:	58000400 	.word	0x58000400
 800dfc0:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800dfc4:	693b      	ldr	r3, [r7, #16]
 800dfc6:	2b0c      	cmp	r3, #12
 800dfc8:	d01e      	beq.n	800e008 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800dfca:	f7ff fc05 	bl	800d7d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dfce:	f7fd ff7f 	bl	800bed0 <HAL_GetTick>
 800dfd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dfd4:	e008      	b.n	800dfe8 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800dfd6:	f7fd ff7b 	bl	800bed0 <HAL_GetTick>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d901      	bls.n	800dfe8 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e012      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800dfe8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d1ef      	bne.n	800dfd6 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800dff6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dffa:	68da      	ldr	r2, [r3, #12]
 800dffc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e000:	4b05      	ldr	r3, [pc, #20]	@ (800e018 <HAL_RCC_OscConfig+0x6e4>)
 800e002:	4013      	ands	r3, r2
 800e004:	60cb      	str	r3, [r1, #12]
 800e006:	e001      	b.n	800e00c <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800e008:	2301      	movs	r3, #1
 800e00a:	e000      	b.n	800e00e <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3734      	adds	r7, #52	@ 0x34
 800e012:	46bd      	mov	sp, r7
 800e014:	bd90      	pop	{r4, r7, pc}
 800e016:	bf00      	nop
 800e018:	eefefffc 	.word	0xeefefffc

0800e01c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d101      	bne.n	800e030 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800e02c:	2301      	movs	r3, #1
 800e02e:	e12d      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e030:	4b98      	ldr	r3, [pc, #608]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f003 0307 	and.w	r3, r3, #7
 800e038:	683a      	ldr	r2, [r7, #0]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d91b      	bls.n	800e076 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e03e:	4b95      	ldr	r3, [pc, #596]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	f023 0207 	bic.w	r2, r3, #7
 800e046:	4993      	ldr	r1, [pc, #588]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	4313      	orrs	r3, r2
 800e04c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e04e:	f7fd ff3f 	bl	800bed0 <HAL_GetTick>
 800e052:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e054:	e008      	b.n	800e068 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e056:	f7fd ff3b 	bl	800bed0 <HAL_GetTick>
 800e05a:	4602      	mov	r2, r0
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	1ad3      	subs	r3, r2, r3
 800e060:	2b02      	cmp	r3, #2
 800e062:	d901      	bls.n	800e068 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800e064:	2303      	movs	r3, #3
 800e066:	e111      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e068:	4b8a      	ldr	r3, [pc, #552]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f003 0307 	and.w	r3, r3, #7
 800e070:	683a      	ldr	r2, [r7, #0]
 800e072:	429a      	cmp	r2, r3
 800e074:	d1ef      	bne.n	800e056 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	f003 0302 	and.w	r3, r3, #2
 800e07e:	2b00      	cmp	r3, #0
 800e080:	d016      	beq.n	800e0b0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	4618      	mov	r0, r3
 800e088:	f7ff fafc 	bl	800d684 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e08c:	f7fd ff20 	bl	800bed0 <HAL_GetTick>
 800e090:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e092:	e008      	b.n	800e0a6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e094:	f7fd ff1c 	bl	800bed0 <HAL_GetTick>
 800e098:	4602      	mov	r2, r0
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	1ad3      	subs	r3, r2, r3
 800e09e:	2b02      	cmp	r3, #2
 800e0a0:	d901      	bls.n	800e0a6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	e0f2      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800e0a6:	f7ff fbe9 	bl	800d87c <LL_RCC_IsActiveFlag_HPRE>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d0f1      	beq.n	800e094 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f003 0320 	and.w	r3, r3, #32
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d016      	beq.n	800e0ea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	695b      	ldr	r3, [r3, #20]
 800e0c0:	4618      	mov	r0, r3
 800e0c2:	f7ff faf3 	bl	800d6ac <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e0c6:	f7fd ff03 	bl	800bed0 <HAL_GetTick>
 800e0ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e0cc:	e008      	b.n	800e0e0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e0ce:	f7fd feff 	bl	800bed0 <HAL_GetTick>
 800e0d2:	4602      	mov	r2, r0
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	1ad3      	subs	r3, r2, r3
 800e0d8:	2b02      	cmp	r3, #2
 800e0da:	d901      	bls.n	800e0e0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800e0dc:	2303      	movs	r3, #3
 800e0de:	e0d5      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800e0e0:	f7ff fbde 	bl	800d8a0 <LL_RCC_IsActiveFlag_C2HPRE>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d0f1      	beq.n	800e0ce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d016      	beq.n	800e124 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	699b      	ldr	r3, [r3, #24]
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff faec 	bl	800d6d8 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e100:	f7fd fee6 	bl	800bed0 <HAL_GetTick>
 800e104:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e106:	e008      	b.n	800e11a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e108:	f7fd fee2 	bl	800bed0 <HAL_GetTick>
 800e10c:	4602      	mov	r2, r0
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	1ad3      	subs	r3, r2, r3
 800e112:	2b02      	cmp	r3, #2
 800e114:	d901      	bls.n	800e11a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800e116:	2303      	movs	r3, #3
 800e118:	e0b8      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800e11a:	f7ff fbd4 	bl	800d8c6 <LL_RCC_IsActiveFlag_SHDHPRE>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d0f1      	beq.n	800e108 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 0304 	and.w	r3, r3, #4
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d016      	beq.n	800e15e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	4618      	mov	r0, r3
 800e136:	f7ff fae6 	bl	800d706 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e13a:	f7fd fec9 	bl	800bed0 <HAL_GetTick>
 800e13e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e140:	e008      	b.n	800e154 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e142:	f7fd fec5 	bl	800bed0 <HAL_GetTick>
 800e146:	4602      	mov	r2, r0
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	1ad3      	subs	r3, r2, r3
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d901      	bls.n	800e154 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800e150:	2303      	movs	r3, #3
 800e152:	e09b      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800e154:	f7ff fbca 	bl	800d8ec <LL_RCC_IsActiveFlag_PPRE1>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d0f1      	beq.n	800e142 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	f003 0308 	and.w	r3, r3, #8
 800e166:	2b00      	cmp	r3, #0
 800e168:	d017      	beq.n	800e19a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	691b      	ldr	r3, [r3, #16]
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	4618      	mov	r0, r3
 800e172:	f7ff fadc 	bl	800d72e <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800e176:	f7fd feab 	bl	800bed0 <HAL_GetTick>
 800e17a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e17c:	e008      	b.n	800e190 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800e17e:	f7fd fea7 	bl	800bed0 <HAL_GetTick>
 800e182:	4602      	mov	r2, r0
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	1ad3      	subs	r3, r2, r3
 800e188:	2b02      	cmp	r3, #2
 800e18a:	d901      	bls.n	800e190 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800e18c:	2303      	movs	r3, #3
 800e18e:	e07d      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800e190:	f7ff fbbe 	bl	800d910 <LL_RCC_IsActiveFlag_PPRE2>
 800e194:	4603      	mov	r3, r0
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0f1      	beq.n	800e17e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f003 0301 	and.w	r3, r3, #1
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d043      	beq.n	800e22e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	685b      	ldr	r3, [r3, #4]
 800e1aa:	2b02      	cmp	r3, #2
 800e1ac:	d106      	bne.n	800e1bc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800e1ae:	f7ff f87c 	bl	800d2aa <LL_RCC_HSE_IsReady>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d11e      	bne.n	800e1f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	e067      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	685b      	ldr	r3, [r3, #4]
 800e1c0:	2b03      	cmp	r3, #3
 800e1c2:	d106      	bne.n	800e1d2 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800e1c4:	f7ff fb17 	bl	800d7f6 <LL_RCC_PLL_IsReady>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d113      	bne.n	800e1f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	e05c      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	685b      	ldr	r3, [r3, #4]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d106      	bne.n	800e1e8 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800e1da:	f7ff f9e4 	bl	800d5a6 <LL_RCC_MSI_IsReady>
 800e1de:	4603      	mov	r3, r0
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d108      	bne.n	800e1f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e1e4:	2301      	movs	r3, #1
 800e1e6:	e051      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800e1e8:	f7ff f88f 	bl	800d30a <LL_RCC_HSI_IsReady>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d101      	bne.n	800e1f6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e04a      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	685b      	ldr	r3, [r3, #4]
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7ff fa22 	bl	800d644 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e200:	f7fd fe66 	bl	800bed0 <HAL_GetTick>
 800e204:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e206:	e00a      	b.n	800e21e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e208:	f7fd fe62 	bl	800bed0 <HAL_GetTick>
 800e20c:	4602      	mov	r2, r0
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	1ad3      	subs	r3, r2, r3
 800e212:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e216:	4293      	cmp	r3, r2
 800e218:	d901      	bls.n	800e21e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800e21a:	2303      	movs	r3, #3
 800e21c:	e036      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e21e:	f7ff fa25 	bl	800d66c <LL_RCC_GetSysClkSource>
 800e222:	4602      	mov	r2, r0
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	685b      	ldr	r3, [r3, #4]
 800e228:	009b      	lsls	r3, r3, #2
 800e22a:	429a      	cmp	r2, r3
 800e22c:	d1ec      	bne.n	800e208 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e22e:	4b19      	ldr	r3, [pc, #100]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 0307 	and.w	r3, r3, #7
 800e236:	683a      	ldr	r2, [r7, #0]
 800e238:	429a      	cmp	r2, r3
 800e23a:	d21b      	bcs.n	800e274 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e23c:	4b15      	ldr	r3, [pc, #84]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	f023 0207 	bic.w	r2, r3, #7
 800e244:	4913      	ldr	r1, [pc, #76]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e246:	683b      	ldr	r3, [r7, #0]
 800e248:	4313      	orrs	r3, r2
 800e24a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e24c:	f7fd fe40 	bl	800bed0 <HAL_GetTick>
 800e250:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e252:	e008      	b.n	800e266 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e254:	f7fd fe3c 	bl	800bed0 <HAL_GetTick>
 800e258:	4602      	mov	r2, r0
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	1ad3      	subs	r3, r2, r3
 800e25e:	2b02      	cmp	r3, #2
 800e260:	d901      	bls.n	800e266 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800e262:	2303      	movs	r3, #3
 800e264:	e012      	b.n	800e28c <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e266:	4b0b      	ldr	r3, [pc, #44]	@ (800e294 <HAL_RCC_ClockConfig+0x278>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f003 0307 	and.w	r3, r3, #7
 800e26e:	683a      	ldr	r2, [r7, #0]
 800e270:	429a      	cmp	r2, r3
 800e272:	d1ef      	bne.n	800e254 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800e274:	f000 f87e 	bl	800e374 <HAL_RCC_GetHCLKFreq>
 800e278:	4603      	mov	r3, r0
 800e27a:	4a07      	ldr	r2, [pc, #28]	@ (800e298 <HAL_RCC_ClockConfig+0x27c>)
 800e27c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800e27e:	f7fd fe33 	bl	800bee8 <HAL_GetTickPrio>
 800e282:	4603      	mov	r3, r0
 800e284:	4618      	mov	r0, r3
 800e286:	f7fd fdd5 	bl	800be34 <HAL_InitTick>
 800e28a:	4603      	mov	r3, r0
}
 800e28c:	4618      	mov	r0, r3
 800e28e:	3710      	adds	r7, #16
 800e290:	46bd      	mov	sp, r7
 800e292:	bd80      	pop	{r7, pc}
 800e294:	58004000 	.word	0x58004000
 800e298:	20000094 	.word	0x20000094

0800e29c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e29c:	b590      	push	{r4, r7, lr}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e2a2:	f7ff f9e3 	bl	800d66c <LL_RCC_GetSysClkSource>
 800e2a6:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d10a      	bne.n	800e2c4 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e2ae:	f7ff f99f 	bl	800d5f0 <LL_RCC_MSI_GetRange>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	091b      	lsrs	r3, r3, #4
 800e2b6:	f003 030f 	and.w	r3, r3, #15
 800e2ba:	4a2b      	ldr	r2, [pc, #172]	@ (800e368 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e2bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e2c0:	60fb      	str	r3, [r7, #12]
 800e2c2:	e04b      	b.n	800e35c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2b04      	cmp	r3, #4
 800e2c8:	d102      	bne.n	800e2d0 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800e2ca:	4b28      	ldr	r3, [pc, #160]	@ (800e36c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e2cc:	60fb      	str	r3, [r7, #12]
 800e2ce:	e045      	b.n	800e35c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	2b08      	cmp	r3, #8
 800e2d4:	d10a      	bne.n	800e2ec <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e2d6:	f7fe ffb8 	bl	800d24a <LL_RCC_HSE_IsEnabledDiv2>
 800e2da:	4603      	mov	r3, r0
 800e2dc:	2b01      	cmp	r3, #1
 800e2de:	d102      	bne.n	800e2e6 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800e2e0:	4b22      	ldr	r3, [pc, #136]	@ (800e36c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e2e2:	60fb      	str	r3, [r7, #12]
 800e2e4:	e03a      	b.n	800e35c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800e2e6:	4b22      	ldr	r3, [pc, #136]	@ (800e370 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e2e8:	60fb      	str	r3, [r7, #12]
 800e2ea:	e037      	b.n	800e35c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800e2ec:	f7ff faba 	bl	800d864 <LL_RCC_PLL_GetMainSource>
 800e2f0:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800e2f2:	683b      	ldr	r3, [r7, #0]
 800e2f4:	2b02      	cmp	r3, #2
 800e2f6:	d003      	beq.n	800e300 <HAL_RCC_GetSysClockFreq+0x64>
 800e2f8:	683b      	ldr	r3, [r7, #0]
 800e2fa:	2b03      	cmp	r3, #3
 800e2fc:	d003      	beq.n	800e306 <HAL_RCC_GetSysClockFreq+0x6a>
 800e2fe:	e00d      	b.n	800e31c <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800e300:	4b1a      	ldr	r3, [pc, #104]	@ (800e36c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e302:	60bb      	str	r3, [r7, #8]
        break;
 800e304:	e015      	b.n	800e332 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800e306:	f7fe ffa0 	bl	800d24a <LL_RCC_HSE_IsEnabledDiv2>
 800e30a:	4603      	mov	r3, r0
 800e30c:	2b01      	cmp	r3, #1
 800e30e:	d102      	bne.n	800e316 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800e310:	4b16      	ldr	r3, [pc, #88]	@ (800e36c <HAL_RCC_GetSysClockFreq+0xd0>)
 800e312:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800e314:	e00d      	b.n	800e332 <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800e316:	4b16      	ldr	r3, [pc, #88]	@ (800e370 <HAL_RCC_GetSysClockFreq+0xd4>)
 800e318:	60bb      	str	r3, [r7, #8]
        break;
 800e31a:	e00a      	b.n	800e332 <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800e31c:	f7ff f968 	bl	800d5f0 <LL_RCC_MSI_GetRange>
 800e320:	4603      	mov	r3, r0
 800e322:	091b      	lsrs	r3, r3, #4
 800e324:	f003 030f 	and.w	r3, r3, #15
 800e328:	4a0f      	ldr	r2, [pc, #60]	@ (800e368 <HAL_RCC_GetSysClockFreq+0xcc>)
 800e32a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e32e:	60bb      	str	r3, [r7, #8]
        break;
 800e330:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800e332:	f7ff fa72 	bl	800d81a <LL_RCC_PLL_GetN>
 800e336:	4602      	mov	r2, r0
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	fb03 f402 	mul.w	r4, r3, r2
 800e33e:	f7ff fa85 	bl	800d84c <LL_RCC_PLL_GetDivider>
 800e342:	4603      	mov	r3, r0
 800e344:	091b      	lsrs	r3, r3, #4
 800e346:	3301      	adds	r3, #1
 800e348:	fbb4 f4f3 	udiv	r4, r4, r3
 800e34c:	f7ff fa72 	bl	800d834 <LL_RCC_PLL_GetR>
 800e350:	4603      	mov	r3, r0
 800e352:	0f5b      	lsrs	r3, r3, #29
 800e354:	3301      	adds	r3, #1
 800e356:	fbb4 f3f3 	udiv	r3, r4, r3
 800e35a:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800e35c:	68fb      	ldr	r3, [r7, #12]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3714      	adds	r7, #20
 800e362:	46bd      	mov	sp, r7
 800e364:	bd90      	pop	{r4, r7, pc}
 800e366:	bf00      	nop
 800e368:	08018b2c 	.word	0x08018b2c
 800e36c:	00f42400 	.word	0x00f42400
 800e370:	01e84800 	.word	0x01e84800

0800e374 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e374:	b598      	push	{r3, r4, r7, lr}
 800e376:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800e378:	f7ff ff90 	bl	800e29c <HAL_RCC_GetSysClockFreq>
 800e37c:	4604      	mov	r4, r0
 800e37e:	f7ff f9ea 	bl	800d756 <LL_RCC_GetAHBPrescaler>
 800e382:	4603      	mov	r3, r0
 800e384:	091b      	lsrs	r3, r3, #4
 800e386:	f003 030f 	and.w	r3, r3, #15
 800e38a:	4a03      	ldr	r2, [pc, #12]	@ (800e398 <HAL_RCC_GetHCLKFreq+0x24>)
 800e38c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e390:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800e394:	4618      	mov	r0, r3
 800e396:	bd98      	pop	{r3, r4, r7, pc}
 800e398:	08018acc 	.word	0x08018acc

0800e39c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e39c:	b598      	push	{r3, r4, r7, lr}
 800e39e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800e3a0:	f7ff ffe8 	bl	800e374 <HAL_RCC_GetHCLKFreq>
 800e3a4:	4604      	mov	r4, r0
 800e3a6:	f7ff f9f0 	bl	800d78a <LL_RCC_GetAPB1Prescaler>
 800e3aa:	4603      	mov	r3, r0
 800e3ac:	0a1b      	lsrs	r3, r3, #8
 800e3ae:	f003 0307 	and.w	r3, r3, #7
 800e3b2:	4a04      	ldr	r2, [pc, #16]	@ (800e3c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800e3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3b8:	f003 031f 	and.w	r3, r3, #31
 800e3bc:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	bd98      	pop	{r3, r4, r7, pc}
 800e3c4:	08018b0c 	.word	0x08018b0c

0800e3c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e3c8:	b598      	push	{r3, r4, r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800e3cc:	f7ff ffd2 	bl	800e374 <HAL_RCC_GetHCLKFreq>
 800e3d0:	4604      	mov	r4, r0
 800e3d2:	f7ff f9e6 	bl	800d7a2 <LL_RCC_GetAPB2Prescaler>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	0adb      	lsrs	r3, r3, #11
 800e3da:	f003 0307 	and.w	r3, r3, #7
 800e3de:	4a04      	ldr	r2, [pc, #16]	@ (800e3f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800e3e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e3e4:	f003 031f 	and.w	r3, r3, #31
 800e3e8:	fa24 f303 	lsr.w	r3, r4, r3
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	bd98      	pop	{r3, r4, r7, pc}
 800e3f0:	08018b0c 	.word	0x08018b0c

0800e3f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800e3f4:	b590      	push	{r4, r7, lr}
 800e3f6:	b085      	sub	sp, #20
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2bb0      	cmp	r3, #176	@ 0xb0
 800e400:	d903      	bls.n	800e40a <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800e402:	4b15      	ldr	r3, [pc, #84]	@ (800e458 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e406:	60fb      	str	r3, [r7, #12]
 800e408:	e007      	b.n	800e41a <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	091b      	lsrs	r3, r3, #4
 800e40e:	f003 030f 	and.w	r3, r3, #15
 800e412:	4a11      	ldr	r2, [pc, #68]	@ (800e458 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800e414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e418:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800e41a:	f7ff f9a8 	bl	800d76e <LL_RCC_GetAHB4Prescaler>
 800e41e:	4603      	mov	r3, r0
 800e420:	091b      	lsrs	r3, r3, #4
 800e422:	f003 030f 	and.w	r3, r3, #15
 800e426:	4a0d      	ldr	r2, [pc, #52]	@ (800e45c <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800e428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e42c:	68fa      	ldr	r2, [r7, #12]
 800e42e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e432:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	4a0a      	ldr	r2, [pc, #40]	@ (800e460 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800e438:	fba2 2303 	umull	r2, r3, r2, r3
 800e43c:	0c9c      	lsrs	r4, r3, #18
 800e43e:	f7fe febf 	bl	800d1c0 <HAL_PWREx_GetVoltageRange>
 800e442:	4603      	mov	r3, r0
 800e444:	4619      	mov	r1, r3
 800e446:	4620      	mov	r0, r4
 800e448:	f000 f80c 	bl	800e464 <RCC_SetFlashLatency>
 800e44c:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800e44e:	4618      	mov	r0, r3
 800e450:	3714      	adds	r7, #20
 800e452:	46bd      	mov	sp, r7
 800e454:	bd90      	pop	{r4, r7, pc}
 800e456:	bf00      	nop
 800e458:	08018b2c 	.word	0x08018b2c
 800e45c:	08018acc 	.word	0x08018acc
 800e460:	431bde83 	.word	0x431bde83

0800e464 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800e464:	b590      	push	{r4, r7, lr}
 800e466:	b093      	sub	sp, #76	@ 0x4c
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
 800e46c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800e46e:	4b37      	ldr	r3, [pc, #220]	@ (800e54c <RCC_SetFlashLatency+0xe8>)
 800e470:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800e474:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e476:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800e47a:	4a35      	ldr	r2, [pc, #212]	@ (800e550 <RCC_SetFlashLatency+0xec>)
 800e47c:	f107 031c 	add.w	r3, r7, #28
 800e480:	ca07      	ldmia	r2, {r0, r1, r2}
 800e482:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800e486:	4b33      	ldr	r3, [pc, #204]	@ (800e554 <RCC_SetFlashLatency+0xf0>)
 800e488:	f107 040c 	add.w	r4, r7, #12
 800e48c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e48e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800e492:	2300      	movs	r3, #0
 800e494:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800e496:	683b      	ldr	r3, [r7, #0]
 800e498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e49c:	d11a      	bne.n	800e4d4 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e49e:	2300      	movs	r3, #0
 800e4a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4a2:	e013      	b.n	800e4cc <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800e4a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	3348      	adds	r3, #72	@ 0x48
 800e4aa:	443b      	add	r3, r7
 800e4ac:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	429a      	cmp	r2, r3
 800e4b4:	d807      	bhi.n	800e4c6 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e4b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	3348      	adds	r3, #72	@ 0x48
 800e4bc:	443b      	add	r3, r7
 800e4be:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e4c2:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800e4c4:	e020      	b.n	800e508 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800e4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800e4cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e4ce:	2b03      	cmp	r3, #3
 800e4d0:	d9e8      	bls.n	800e4a4 <RCC_SetFlashLatency+0x40>
 800e4d2:	e019      	b.n	800e508 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4d8:	e013      	b.n	800e502 <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800e4da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4dc:	009b      	lsls	r3, r3, #2
 800e4de:	3348      	adds	r3, #72	@ 0x48
 800e4e0:	443b      	add	r3, r7
 800e4e2:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	429a      	cmp	r2, r3
 800e4ea:	d807      	bhi.n	800e4fc <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800e4ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4ee:	009b      	lsls	r3, r3, #2
 800e4f0:	3348      	adds	r3, #72	@ 0x48
 800e4f2:	443b      	add	r3, r7
 800e4f4:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800e4f8:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800e4fa:	e005      	b.n	800e508 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800e4fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e4fe:	3301      	adds	r3, #1
 800e500:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e504:	2b02      	cmp	r3, #2
 800e506:	d9e8      	bls.n	800e4da <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800e508:	4b13      	ldr	r3, [pc, #76]	@ (800e558 <RCC_SetFlashLatency+0xf4>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f023 0207 	bic.w	r2, r3, #7
 800e510:	4911      	ldr	r1, [pc, #68]	@ (800e558 <RCC_SetFlashLatency+0xf4>)
 800e512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e514:	4313      	orrs	r3, r2
 800e516:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800e518:	f7fd fcda 	bl	800bed0 <HAL_GetTick>
 800e51c:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e51e:	e008      	b.n	800e532 <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800e520:	f7fd fcd6 	bl	800bed0 <HAL_GetTick>
 800e524:	4602      	mov	r2, r0
 800e526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e528:	1ad3      	subs	r3, r2, r3
 800e52a:	2b02      	cmp	r3, #2
 800e52c:	d901      	bls.n	800e532 <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800e52e:	2303      	movs	r3, #3
 800e530:	e007      	b.n	800e542 <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800e532:	4b09      	ldr	r3, [pc, #36]	@ (800e558 <RCC_SetFlashLatency+0xf4>)
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	f003 0307 	and.w	r3, r3, #7
 800e53a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d1ef      	bne.n	800e520 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800e540:	2300      	movs	r3, #0
}
 800e542:	4618      	mov	r0, r3
 800e544:	374c      	adds	r7, #76	@ 0x4c
 800e546:	46bd      	mov	sp, r7
 800e548:	bd90      	pop	{r4, r7, pc}
 800e54a:	bf00      	nop
 800e54c:	0801841c 	.word	0x0801841c
 800e550:	0801842c 	.word	0x0801842c
 800e554:	08018438 	.word	0x08018438
 800e558:	58004000 	.word	0x58004000

0800e55c <LL_RCC_LSE_IsEnabled>:
{
 800e55c:	b480      	push	{r7}
 800e55e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800e560:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e568:	f003 0301 	and.w	r3, r3, #1
 800e56c:	2b01      	cmp	r3, #1
 800e56e:	d101      	bne.n	800e574 <LL_RCC_LSE_IsEnabled+0x18>
 800e570:	2301      	movs	r3, #1
 800e572:	e000      	b.n	800e576 <LL_RCC_LSE_IsEnabled+0x1a>
 800e574:	2300      	movs	r3, #0
}
 800e576:	4618      	mov	r0, r3
 800e578:	46bd      	mov	sp, r7
 800e57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e57e:	4770      	bx	lr

0800e580 <LL_RCC_LSE_IsReady>:
{
 800e580:	b480      	push	{r7}
 800e582:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e58c:	f003 0302 	and.w	r3, r3, #2
 800e590:	2b02      	cmp	r3, #2
 800e592:	d101      	bne.n	800e598 <LL_RCC_LSE_IsReady+0x18>
 800e594:	2301      	movs	r3, #1
 800e596:	e000      	b.n	800e59a <LL_RCC_LSE_IsReady+0x1a>
 800e598:	2300      	movs	r3, #0
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <LL_RCC_SetRFWKPClockSource>:
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b083      	sub	sp, #12
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800e5ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800e5b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800e5b8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	4313      	orrs	r3, r2
 800e5c0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800e5c4:	bf00      	nop
 800e5c6:	370c      	adds	r7, #12
 800e5c8:	46bd      	mov	sp, r7
 800e5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ce:	4770      	bx	lr

0800e5d0 <LL_RCC_SetSMPSClockSource>:
{
 800e5d0:	b480      	push	{r7}
 800e5d2:	b083      	sub	sp, #12
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800e5d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e5dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e5de:	f023 0203 	bic.w	r2, r3, #3
 800e5e2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	4313      	orrs	r3, r2
 800e5ea:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e5ec:	bf00      	nop
 800e5ee:	370c      	adds	r7, #12
 800e5f0:	46bd      	mov	sp, r7
 800e5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f6:	4770      	bx	lr

0800e5f8 <LL_RCC_SetSMPSPrescaler>:
{
 800e5f8:	b480      	push	{r7}
 800e5fa:	b083      	sub	sp, #12
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800e600:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e606:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800e60a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	4313      	orrs	r3, r2
 800e612:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800e614:	bf00      	nop
 800e616:	370c      	adds	r7, #12
 800e618:	46bd      	mov	sp, r7
 800e61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e61e:	4770      	bx	lr

0800e620 <LL_RCC_SetUSARTClockSource>:
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800e628:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e62c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e630:	f023 0203 	bic.w	r2, r3, #3
 800e634:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	4313      	orrs	r3, r2
 800e63c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e640:	bf00      	nop
 800e642:	370c      	adds	r7, #12
 800e644:	46bd      	mov	sp, r7
 800e646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e64a:	4770      	bx	lr

0800e64c <LL_RCC_SetLPUARTClockSource>:
{
 800e64c:	b480      	push	{r7}
 800e64e:	b083      	sub	sp, #12
 800e650:	af00      	add	r7, sp, #0
 800e652:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800e654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e65c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e660:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	4313      	orrs	r3, r2
 800e668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e66c:	bf00      	nop
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <LL_RCC_SetI2CClockSource>:
{
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800e680:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e684:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	091b      	lsrs	r3, r3, #4
 800e68c:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e690:	43db      	mvns	r3, r3
 800e692:	401a      	ands	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	011b      	lsls	r3, r3, #4
 800e698:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800e69c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6a0:	4313      	orrs	r3, r2
 800e6a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e6a6:	bf00      	nop
 800e6a8:	370c      	adds	r7, #12
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6b0:	4770      	bx	lr

0800e6b2 <LL_RCC_SetLPTIMClockSource>:
{
 800e6b2:	b480      	push	{r7}
 800e6b4:	b083      	sub	sp, #12
 800e6b6:	af00      	add	r7, sp, #0
 800e6b8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800e6ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6be:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	0c1b      	lsrs	r3, r3, #16
 800e6c6:	041b      	lsls	r3, r3, #16
 800e6c8:	43db      	mvns	r3, r3
 800e6ca:	401a      	ands	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	041b      	lsls	r3, r3, #16
 800e6d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e6da:	bf00      	nop
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr

0800e6e6 <LL_RCC_SetSAIClockSource>:
{
 800e6e6:	b480      	push	{r7}
 800e6e8:	b083      	sub	sp, #12
 800e6ea:	af00      	add	r7, sp, #0
 800e6ec:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800e6ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e6f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e6f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800e6fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	4313      	orrs	r3, r2
 800e702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e706:	bf00      	nop
 800e708:	370c      	adds	r7, #12
 800e70a:	46bd      	mov	sp, r7
 800e70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e710:	4770      	bx	lr

0800e712 <LL_RCC_SetRNGClockSource>:
{
 800e712:	b480      	push	{r7}
 800e714:	b083      	sub	sp, #12
 800e716:	af00      	add	r7, sp, #0
 800e718:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800e71a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e722:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800e726:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	4313      	orrs	r3, r2
 800e72e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e732:	bf00      	nop
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr

0800e73e <LL_RCC_SetCLK48ClockSource>:
{
 800e73e:	b480      	push	{r7}
 800e740:	b083      	sub	sp, #12
 800e742:	af00      	add	r7, sp, #0
 800e744:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800e746:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e74a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e74e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800e752:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4313      	orrs	r3, r2
 800e75a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e75e:	bf00      	nop
 800e760:	370c      	adds	r7, #12
 800e762:	46bd      	mov	sp, r7
 800e764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e768:	4770      	bx	lr

0800e76a <LL_RCC_SetUSBClockSource>:
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800e772:	6878      	ldr	r0, [r7, #4]
 800e774:	f7ff ffe3 	bl	800e73e <LL_RCC_SetCLK48ClockSource>
}
 800e778:	bf00      	nop
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <LL_RCC_SetADCClockSource>:
{
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800e788:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e78c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800e790:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800e794:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	4313      	orrs	r3, r2
 800e79c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800e7a0:	bf00      	nop
 800e7a2:	370c      	adds	r7, #12
 800e7a4:	46bd      	mov	sp, r7
 800e7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7aa:	4770      	bx	lr

0800e7ac <LL_RCC_SetRTCClockSource>:
{
 800e7ac:	b480      	push	{r7}
 800e7ae:	b083      	sub	sp, #12
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800e7b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e7c0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	4313      	orrs	r3, r2
 800e7c8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 800e7cc:	bf00      	nop
 800e7ce:	370c      	adds	r7, #12
 800e7d0:	46bd      	mov	sp, r7
 800e7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d6:	4770      	bx	lr

0800e7d8 <LL_RCC_GetRTCClockSource>:
{
 800e7d8:	b480      	push	{r7}
 800e7da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800e7dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f0:	4770      	bx	lr

0800e7f2 <LL_RCC_ForceBackupDomainReset>:
{
 800e7f2:	b480      	push	{r7}
 800e7f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e7f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e7fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e7fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e802:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e806:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e80a:	bf00      	nop
 800e80c:	46bd      	mov	sp, r7
 800e80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e812:	4770      	bx	lr

0800e814 <LL_RCC_ReleaseBackupDomainReset>:
{
 800e814:	b480      	push	{r7}
 800e816:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800e818:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e81c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e820:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e824:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800e828:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800e82c:	bf00      	nop
 800e82e:	46bd      	mov	sp, r7
 800e830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e834:	4770      	bx	lr

0800e836 <LL_RCC_PLLSAI1_Enable>:
{
 800e836:	b480      	push	{r7}
 800e838:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e83a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e844:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800e848:	6013      	str	r3, [r2, #0]
}
 800e84a:	bf00      	nop
 800e84c:	46bd      	mov	sp, r7
 800e84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e852:	4770      	bx	lr

0800e854 <LL_RCC_PLLSAI1_Disable>:
{
 800e854:	b480      	push	{r7}
 800e856:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800e858:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e862:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800e866:	6013      	str	r3, [r2, #0]
}
 800e868:	bf00      	nop
 800e86a:	46bd      	mov	sp, r7
 800e86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e870:	4770      	bx	lr

0800e872 <LL_RCC_PLLSAI1_IsReady>:
{
 800e872:	b480      	push	{r7}
 800e874:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800e876:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e884:	d101      	bne.n	800e88a <LL_RCC_PLLSAI1_IsReady+0x18>
 800e886:	2301      	movs	r3, #1
 800e888:	e000      	b.n	800e88c <LL_RCC_PLLSAI1_IsReady+0x1a>
 800e88a:	2300      	movs	r3, #0
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	46bd      	mov	sp, r7
 800e890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e894:	4770      	bx	lr

0800e896 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b088      	sub	sp, #32
 800e89a:	af00      	add	r7, sp, #0
 800e89c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800e89e:	2300      	movs	r3, #0
 800e8a0:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800e8a2:	2300      	movs	r3, #0
 800e8a4:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d034      	beq.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8b6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e8ba:	d021      	beq.n	800e900 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800e8bc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800e8c0:	d81b      	bhi.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e8c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e8c6:	d01d      	beq.n	800e904 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800e8c8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e8cc:	d815      	bhi.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x64>
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d00b      	beq.n	800e8ea <HAL_RCCEx_PeriphCLKConfig+0x54>
 800e8d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e8d6:	d110      	bne.n	800e8fa <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800e8d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e8dc:	68db      	ldr	r3, [r3, #12]
 800e8de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e8e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e8e6:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800e8e8:	e00d      	b.n	800e906 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	3304      	adds	r3, #4
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f000 f947 	bl	800eb82 <RCCEx_PLLSAI1_ConfigNP>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800e8f8:	e005      	b.n	800e906 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	77fb      	strb	r3, [r7, #31]
        break;
 800e8fe:	e002      	b.n	800e906 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e900:	bf00      	nop
 800e902:	e000      	b.n	800e906 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800e904:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e906:	7ffb      	ldrb	r3, [r7, #31]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d105      	bne.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e910:	4618      	mov	r0, r3
 800e912:	f7ff fee8 	bl	800e6e6 <LL_RCC_SetSAIClockSource>
 800e916:	e001      	b.n	800e91c <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e918:	7ffb      	ldrb	r3, [r7, #31]
 800e91a:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e924:	2b00      	cmp	r3, #0
 800e926:	d046      	beq.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800e928:	f7ff ff56 	bl	800e7d8 <LL_RCC_GetRTCClockSource>
 800e92c:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e932:	69ba      	ldr	r2, [r7, #24]
 800e934:	429a      	cmp	r2, r3
 800e936:	d03c      	beq.n	800e9b2 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800e938:	f7fe fbea 	bl	800d110 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800e93c:	69bb      	ldr	r3, [r7, #24]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d105      	bne.n	800e94e <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e946:	4618      	mov	r0, r3
 800e948:	f7ff ff30 	bl	800e7ac <LL_RCC_SetRTCClockSource>
 800e94c:	e02e      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800e94e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800e952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e956:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800e958:	f7ff ff4b 	bl	800e7f2 <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800e95c:	f7ff ff5a 	bl	800e814 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800e960:	697b      	ldr	r3, [r7, #20]
 800e962:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e96a:	4313      	orrs	r3, r2
 800e96c:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800e96e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800e972:	697b      	ldr	r3, [r7, #20]
 800e974:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800e978:	f7ff fdf0 	bl	800e55c <LL_RCC_LSE_IsEnabled>
 800e97c:	4603      	mov	r3, r0
 800e97e:	2b01      	cmp	r3, #1
 800e980:	d114      	bne.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800e982:	f7fd faa5 	bl	800bed0 <HAL_GetTick>
 800e986:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800e988:	e00b      	b.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800e98a:	f7fd faa1 	bl	800bed0 <HAL_GetTick>
 800e98e:	4602      	mov	r2, r0
 800e990:	693b      	ldr	r3, [r7, #16]
 800e992:	1ad3      	subs	r3, r2, r3
 800e994:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e998:	4293      	cmp	r3, r2
 800e99a:	d902      	bls.n	800e9a2 <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800e99c:	2303      	movs	r3, #3
 800e99e:	77fb      	strb	r3, [r7, #31]
              break;
 800e9a0:	e004      	b.n	800e9ac <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800e9a2:	f7ff fded 	bl	800e580 <LL_RCC_LSE_IsReady>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d1ee      	bne.n	800e98a <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800e9ac:	7ffb      	ldrb	r3, [r7, #31]
 800e9ae:	77bb      	strb	r3, [r7, #30]
 800e9b0:	e001      	b.n	800e9b6 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e9b2:	7ffb      	ldrb	r3, [r7, #31]
 800e9b4:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	f003 0301 	and.w	r3, r3, #1
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d004      	beq.n	800e9cc <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	699b      	ldr	r3, [r3, #24]
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f7ff fe2a 	bl	800e620 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 0302 	and.w	r3, r3, #2
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d004      	beq.n	800e9e2 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	69db      	ldr	r3, [r3, #28]
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7ff fe35 	bl	800e64c <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f003 0310 	and.w	r3, r3, #16
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d004      	beq.n	800e9f8 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	f7ff fe5d 	bl	800e6b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f003 0320 	and.w	r3, r3, #32
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d004      	beq.n	800ea0e <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea08:	4618      	mov	r0, r3
 800ea0a:	f7ff fe52 	bl	800e6b2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f003 0304 	and.w	r3, r3, #4
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d004      	beq.n	800ea24 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6a1b      	ldr	r3, [r3, #32]
 800ea1e:	4618      	mov	r0, r3
 800ea20:	f7ff fe2a 	bl	800e678 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	f003 0308 	and.w	r3, r3, #8
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d004      	beq.n	800ea3a <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ea34:	4618      	mov	r0, r3
 800ea36:	f7ff fe1f 	bl	800e678 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d022      	beq.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea4a:	4618      	mov	r0, r3
 800ea4c:	f7ff fe8d 	bl	800e76a <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea54:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ea58:	d107      	bne.n	800ea6a <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800ea5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ea5e:	68db      	ldr	r3, [r3, #12]
 800ea60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ea64:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800ea68:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ea6e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800ea72:	d10b      	bne.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	3304      	adds	r3, #4
 800ea78:	4618      	mov	r0, r3
 800ea7a:	f000 f8dd 	bl	800ec38 <RCCEx_PLLSAI1_ConfigNQ>
 800ea7e:	4603      	mov	r3, r0
 800ea80:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800ea82:	7ffb      	ldrb	r3, [r7, #31]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d001      	beq.n	800ea8c <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800ea88:	7ffb      	ldrb	r3, [r7, #31]
 800ea8a:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d02b      	beq.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ea9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eaa0:	d008      	beq.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eaa6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800eaaa:	d003      	beq.n	800eab4 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d105      	bne.n	800eac0 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7ff fe2a 	bl	800e712 <LL_RCC_SetRNGClockSource>
 800eabe:	e00a      	b.n	800ead6 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eac4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800eac8:	60fb      	str	r3, [r7, #12]
 800eaca:	2000      	movs	r0, #0
 800eacc:	f7ff fe21 	bl	800e712 <LL_RCC_SetRNGClockSource>
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	f7ff fe34 	bl	800e73e <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eada:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800eade:	d107      	bne.n	800eaf0 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800eae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eaea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800eaee:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d022      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb00:	4618      	mov	r0, r3
 800eb02:	f7ff fe3d 	bl	800e780 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb0e:	d107      	bne.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800eb10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800eb14:	68db      	ldr	r3, [r3, #12]
 800eb16:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800eb1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800eb1e:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb28:	d10b      	bne.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f000 f8dd 	bl	800ecee <RCCEx_PLLSAI1_ConfigNR>
 800eb34:	4603      	mov	r3, r0
 800eb36:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800eb38:	7ffb      	ldrb	r3, [r7, #31]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d001      	beq.n	800eb42 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800eb3e:	7ffb      	ldrb	r3, [r7, #31]
 800eb40:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d004      	beq.n	800eb58 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7ff fd26 	bl	800e5a4 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d009      	beq.n	800eb78 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f7ff fd45 	bl	800e5f8 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eb72:	4618      	mov	r0, r3
 800eb74:	f7ff fd2c 	bl	800e5d0 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800eb78:	7fbb      	ldrb	r3, [r7, #30]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3720      	adds	r7, #32
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}

0800eb82 <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800eb8e:	f7ff fe61 	bl	800e854 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800eb92:	f7fd f99d 	bl	800bed0 <HAL_GetTick>
 800eb96:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800eb98:	e009      	b.n	800ebae <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800eb9a:	f7fd f999 	bl	800bed0 <HAL_GetTick>
 800eb9e:	4602      	mov	r2, r0
 800eba0:	68bb      	ldr	r3, [r7, #8]
 800eba2:	1ad3      	subs	r3, r2, r3
 800eba4:	2b02      	cmp	r3, #2
 800eba6:	d902      	bls.n	800ebae <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800eba8:	2303      	movs	r3, #3
 800ebaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ebac:	e004      	b.n	800ebb8 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ebae:	f7ff fe60 	bl	800e872 <LL_RCC_PLLSAI1_IsReady>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d1f0      	bne.n	800eb9a <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ebb8:	7bfb      	ldrb	r3, [r7, #15]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d137      	bne.n	800ec2e <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ebbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	021b      	lsls	r3, r3, #8
 800ebce:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ebd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	685b      	ldr	r3, [r3, #4]
 800ebe4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ebec:	f7ff fe23 	bl	800e836 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebf0:	f7fd f96e 	bl	800bed0 <HAL_GetTick>
 800ebf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ebf6:	e009      	b.n	800ec0c <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ebf8:	f7fd f96a 	bl	800bed0 <HAL_GetTick>
 800ebfc:	4602      	mov	r2, r0
 800ebfe:	68bb      	ldr	r3, [r7, #8]
 800ec00:	1ad3      	subs	r3, r2, r3
 800ec02:	2b02      	cmp	r3, #2
 800ec04:	d902      	bls.n	800ec0c <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ec06:	2303      	movs	r3, #3
 800ec08:	73fb      	strb	r3, [r7, #15]
        break;
 800ec0a:	e004      	b.n	800ec16 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ec0c:	f7ff fe31 	bl	800e872 <LL_RCC_PLLSAI1_IsReady>
 800ec10:	4603      	mov	r3, r0
 800ec12:	2b01      	cmp	r3, #1
 800ec14:	d1f0      	bne.n	800ebf8 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800ec16:	7bfb      	ldrb	r3, [r7, #15]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d108      	bne.n	800ec2e <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ec1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec20:	691a      	ldr	r2, [r3, #16]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	691b      	ldr	r3, [r3, #16]
 800ec26:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec2a:	4313      	orrs	r3, r2
 800ec2c:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ec2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec30:	4618      	mov	r0, r3
 800ec32:	3710      	adds	r7, #16
 800ec34:	46bd      	mov	sp, r7
 800ec36:	bd80      	pop	{r7, pc}

0800ec38 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b084      	sub	sp, #16
 800ec3c:	af00      	add	r7, sp, #0
 800ec3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ec40:	2300      	movs	r3, #0
 800ec42:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ec44:	f7ff fe06 	bl	800e854 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ec48:	f7fd f942 	bl	800bed0 <HAL_GetTick>
 800ec4c:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ec4e:	e009      	b.n	800ec64 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ec50:	f7fd f93e 	bl	800bed0 <HAL_GetTick>
 800ec54:	4602      	mov	r2, r0
 800ec56:	68bb      	ldr	r3, [r7, #8]
 800ec58:	1ad3      	subs	r3, r2, r3
 800ec5a:	2b02      	cmp	r3, #2
 800ec5c:	d902      	bls.n	800ec64 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800ec5e:	2303      	movs	r3, #3
 800ec60:	73fb      	strb	r3, [r7, #15]
      break;
 800ec62:	e004      	b.n	800ec6e <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ec64:	f7ff fe05 	bl	800e872 <LL_RCC_PLLSAI1_IsReady>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d1f0      	bne.n	800ec50 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800ec6e:	7bfb      	ldrb	r3, [r7, #15]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d137      	bne.n	800ece4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ec74:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec78:	691b      	ldr	r3, [r3, #16]
 800ec7a:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	021b      	lsls	r3, r3, #8
 800ec84:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ec8c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	689b      	ldr	r3, [r3, #8]
 800ec9a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800eca2:	f7ff fdc8 	bl	800e836 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eca6:	f7fd f913 	bl	800bed0 <HAL_GetTick>
 800ecaa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ecac:	e009      	b.n	800ecc2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ecae:	f7fd f90f 	bl	800bed0 <HAL_GetTick>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	68bb      	ldr	r3, [r7, #8]
 800ecb6:	1ad3      	subs	r3, r2, r3
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d902      	bls.n	800ecc2 <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ecbc:	2303      	movs	r3, #3
 800ecbe:	73fb      	strb	r3, [r7, #15]
        break;
 800ecc0:	e004      	b.n	800eccc <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ecc2:	f7ff fdd6 	bl	800e872 <LL_RCC_PLLSAI1_IsReady>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d1f0      	bne.n	800ecae <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800eccc:	7bfb      	ldrb	r3, [r7, #15]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d108      	bne.n	800ece4 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ecd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ecd6:	691a      	ldr	r2, [r3, #16]
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	691b      	ldr	r3, [r3, #16]
 800ecdc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ece0:	4313      	orrs	r3, r2
 800ece2:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ece4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3710      	adds	r7, #16
 800ecea:	46bd      	mov	sp, r7
 800ecec:	bd80      	pop	{r7, pc}

0800ecee <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ecee:	b580      	push	{r7, lr}
 800ecf0:	b084      	sub	sp, #16
 800ecf2:	af00      	add	r7, sp, #0
 800ecf4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ecfa:	f7ff fdab 	bl	800e854 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ecfe:	f7fd f8e7 	bl	800bed0 <HAL_GetTick>
 800ed02:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ed04:	e009      	b.n	800ed1a <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ed06:	f7fd f8e3 	bl	800bed0 <HAL_GetTick>
 800ed0a:	4602      	mov	r2, r0
 800ed0c:	68bb      	ldr	r3, [r7, #8]
 800ed0e:	1ad3      	subs	r3, r2, r3
 800ed10:	2b02      	cmp	r3, #2
 800ed12:	d902      	bls.n	800ed1a <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800ed14:	2303      	movs	r3, #3
 800ed16:	73fb      	strb	r3, [r7, #15]
      break;
 800ed18:	e004      	b.n	800ed24 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ed1a:	f7ff fdaa 	bl	800e872 <LL_RCC_PLLSAI1_IsReady>
 800ed1e:	4603      	mov	r3, r0
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d1f0      	bne.n	800ed06 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800ed24:	7bfb      	ldrb	r3, [r7, #15]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d137      	bne.n	800ed9a <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ed2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed2e:	691b      	ldr	r3, [r3, #16]
 800ed30:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	021b      	lsls	r3, r3, #8
 800ed3a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed3e:	4313      	orrs	r3, r2
 800ed40:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800ed42:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	68db      	ldr	r3, [r3, #12]
 800ed50:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed54:	4313      	orrs	r3, r2
 800ed56:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ed58:	f7ff fd6d 	bl	800e836 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed5c:	f7fd f8b8 	bl	800bed0 <HAL_GetTick>
 800ed60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ed62:	e009      	b.n	800ed78 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ed64:	f7fd f8b4 	bl	800bed0 <HAL_GetTick>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	1ad3      	subs	r3, r2, r3
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d902      	bls.n	800ed78 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800ed72:	2303      	movs	r3, #3
 800ed74:	73fb      	strb	r3, [r7, #15]
        break;
 800ed76:	e004      	b.n	800ed82 <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ed78:	f7ff fd7b 	bl	800e872 <LL_RCC_PLLSAI1_IsReady>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	2b01      	cmp	r3, #1
 800ed80:	d1f0      	bne.n	800ed64 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ed82:	7bfb      	ldrb	r3, [r7, #15]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d108      	bne.n	800ed9a <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ed88:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ed8c:	691a      	ldr	r2, [r3, #16]
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	691b      	ldr	r3, [r3, #16]
 800ed92:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ed96:	4313      	orrs	r3, r2
 800ed98:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ed9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3710      	adds	r7, #16
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d101      	bne.n	800edb6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800edb2:	2301      	movs	r3, #1
 800edb4:	e09f      	b.n	800eef6 <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800edbc:	b2db      	uxtb	r3, r3
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d106      	bne.n	800edd0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	2200      	movs	r2, #0
 800edc6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	f7f9 fc86 	bl	80086dc <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2202      	movs	r2, #2
 800edd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800edd8:	4b49      	ldr	r3, [pc, #292]	@ (800ef00 <HAL_RTC_Init+0x15c>)
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	f003 0310 	and.w	r3, r3, #16
 800ede0:	2b10      	cmp	r3, #16
 800ede2:	d07e      	beq.n	800eee2 <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	22ca      	movs	r2, #202	@ 0xca
 800edea:	625a      	str	r2, [r3, #36]	@ 0x24
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	2253      	movs	r2, #83	@ 0x53
 800edf2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f000 f8ab 	bl	800ef50 <RTC_EnterInitMode>
 800edfa:	4603      	mov	r3, r0
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d00a      	beq.n	800ee16 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	681b      	ldr	r3, [r3, #0]
 800ee04:	22ff      	movs	r2, #255	@ 0xff
 800ee06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	2204      	movs	r2, #4
 800ee0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800ee10:	2301      	movs	r3, #1
 800ee12:	73fb      	strb	r3, [r7, #15]
 800ee14:	e067      	b.n	800eee6 <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	687a      	ldr	r2, [r7, #4]
 800ee1e:	6812      	ldr	r2, [r2, #0]
 800ee20:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800ee24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ee28:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	6899      	ldr	r1, [r3, #8]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	685a      	ldr	r2, [r3, #4]
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	691b      	ldr	r3, [r3, #16]
 800ee38:	431a      	orrs	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	699b      	ldr	r3, [r3, #24]
 800ee3e:	431a      	orrs	r2, r3
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	430a      	orrs	r2, r1
 800ee46:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	687a      	ldr	r2, [r7, #4]
 800ee4e:	68d2      	ldr	r2, [r2, #12]
 800ee50:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	6919      	ldr	r1, [r3, #16]
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	689b      	ldr	r3, [r3, #8]
 800ee5c:	041a      	lsls	r2, r3, #16
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	430a      	orrs	r2, r1
 800ee64:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ee66:	687b      	ldr	r3, [r7, #4]
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	68da      	ldr	r2, [r3, #12]
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ee74:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	681b      	ldr	r3, [r3, #0]
 800ee80:	f022 0203 	bic.w	r2, r2, #3
 800ee84:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	69da      	ldr	r2, [r3, #28]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	695b      	ldr	r3, [r3, #20]
 800ee94:	431a      	orrs	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	430a      	orrs	r2, r1
 800ee9c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	f003 0320 	and.w	r3, r3, #32
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d113      	bne.n	800eed4 <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800eeac:	6878      	ldr	r0, [r7, #4]
 800eeae:	f000 f829 	bl	800ef04 <HAL_RTC_WaitForSynchro>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00d      	beq.n	800eed4 <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	22ff      	movs	r2, #255	@ 0xff
 800eebe:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	2204      	movs	r2, #4
 800eec4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	2200      	movs	r2, #0
 800eecc:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	e010      	b.n	800eef6 <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	22ff      	movs	r2, #255	@ 0xff
 800eeda:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800eedc:	2300      	movs	r3, #0
 800eede:	73fb      	strb	r3, [r7, #15]
 800eee0:	e001      	b.n	800eee6 <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800eee2:	2300      	movs	r3, #0
 800eee4:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800eee6:	7bfb      	ldrb	r3, [r7, #15]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d103      	bne.n	800eef4 <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	2201      	movs	r2, #1
 800eef0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop
 800ef00:	40002800 	.word	0x40002800

0800ef04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	681b      	ldr	r3, [r3, #0]
 800ef10:	68da      	ldr	r2, [r3, #12]
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ef1a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800ef1c:	f7fc ffd8 	bl	800bed0 <HAL_GetTick>
 800ef20:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ef22:	e009      	b.n	800ef38 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800ef24:	f7fc ffd4 	bl	800bed0 <HAL_GetTick>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	1ad3      	subs	r3, r2, r3
 800ef2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef32:	d901      	bls.n	800ef38 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800ef34:	2303      	movs	r3, #3
 800ef36:	e007      	b.n	800ef48 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	68db      	ldr	r3, [r3, #12]
 800ef3e:	f003 0320 	and.w	r3, r3, #32
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d0ee      	beq.n	800ef24 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800ef46:	2300      	movs	r3, #0
}
 800ef48:	4618      	mov	r0, r3
 800ef4a:	3710      	adds	r7, #16
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}

0800ef50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800ef50:	b580      	push	{r7, lr}
 800ef52:	b084      	sub	sp, #16
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d119      	bne.n	800ef9a <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef6e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800ef70:	f7fc ffae 	bl	800bed0 <HAL_GetTick>
 800ef74:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ef76:	e009      	b.n	800ef8c <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800ef78:	f7fc ffaa 	bl	800bed0 <HAL_GetTick>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	1ad3      	subs	r3, r2, r3
 800ef82:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ef86:	d901      	bls.n	800ef8c <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800ef88:	2303      	movs	r3, #3
 800ef8a:	e007      	b.n	800ef9c <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	68db      	ldr	r3, [r3, #12]
 800ef92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d0ee      	beq.n	800ef78 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800ef9a:	2300      	movs	r3, #0
}
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}

0800efa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800efa4:	b580      	push	{r7, lr}
 800efa6:	b084      	sub	sp, #16
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d101      	bne.n	800efb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800efb2:	2301      	movs	r3, #1
 800efb4:	e095      	b.n	800f0e2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d108      	bne.n	800efd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	685b      	ldr	r3, [r3, #4]
 800efc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800efc6:	d009      	beq.n	800efdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	2200      	movs	r2, #0
 800efcc:	61da      	str	r2, [r3, #28]
 800efce:	e005      	b.n	800efdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	2200      	movs	r2, #0
 800efd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	2200      	movs	r2, #0
 800efda:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2200      	movs	r2, #0
 800efe0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800efe8:	b2db      	uxtb	r3, r3
 800efea:	2b00      	cmp	r3, #0
 800efec:	d106      	bne.n	800effc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	2200      	movs	r2, #0
 800eff2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f877 	bl	800f0ea <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	2202      	movs	r2, #2
 800f000:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	681a      	ldr	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f012:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	68db      	ldr	r3, [r3, #12]
 800f018:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f01c:	d902      	bls.n	800f024 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800f01e:	2300      	movs	r3, #0
 800f020:	60fb      	str	r3, [r7, #12]
 800f022:	e002      	b.n	800f02a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800f024:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f028:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	68db      	ldr	r3, [r3, #12]
 800f02e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800f032:	d007      	beq.n	800f044 <HAL_SPI_Init+0xa0>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	68db      	ldr	r3, [r3, #12]
 800f038:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f03c:	d002      	beq.n	800f044 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	685b      	ldr	r3, [r3, #4]
 800f048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	689b      	ldr	r3, [r3, #8]
 800f050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800f054:	431a      	orrs	r2, r3
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	691b      	ldr	r3, [r3, #16]
 800f05a:	f003 0302 	and.w	r3, r3, #2
 800f05e:	431a      	orrs	r2, r3
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	695b      	ldr	r3, [r3, #20]
 800f064:	f003 0301 	and.w	r3, r3, #1
 800f068:	431a      	orrs	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	699b      	ldr	r3, [r3, #24]
 800f06e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f072:	431a      	orrs	r2, r3
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	69db      	ldr	r3, [r3, #28]
 800f078:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f07c:	431a      	orrs	r2, r3
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6a1b      	ldr	r3, [r3, #32]
 800f082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f086:	ea42 0103 	orr.w	r1, r2, r3
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f08e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	430a      	orrs	r2, r1
 800f098:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	699b      	ldr	r3, [r3, #24]
 800f09e:	0c1b      	lsrs	r3, r3, #16
 800f0a0:	f003 0204 	and.w	r2, r3, #4
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f0a8:	f003 0310 	and.w	r3, r3, #16
 800f0ac:	431a      	orrs	r2, r3
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f0b2:	f003 0308 	and.w	r3, r3, #8
 800f0b6:	431a      	orrs	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800f0c0:	ea42 0103 	orr.w	r1, r2, r3
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	430a      	orrs	r2, r1
 800f0d0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	2200      	movs	r2, #0
 800f0d6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2201      	movs	r2, #1
 800f0dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3710      	adds	r7, #16
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}

0800f0ea <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 800f0ea:	b480      	push	{r7}
 800f0ec:	b083      	sub	sp, #12
 800f0ee:	af00      	add	r7, sp, #0
 800f0f0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800f0f2:	bf00      	nop
 800f0f4:	370c      	adds	r7, #12
 800f0f6:	46bd      	mov	sp, r7
 800f0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fc:	4770      	bx	lr

0800f0fe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f0fe:	b580      	push	{r7, lr}
 800f100:	b088      	sub	sp, #32
 800f102:	af00      	add	r7, sp, #0
 800f104:	60f8      	str	r0, [r7, #12]
 800f106:	60b9      	str	r1, [r7, #8]
 800f108:	603b      	str	r3, [r7, #0]
 800f10a:	4613      	mov	r3, r2
 800f10c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f10e:	f7fc fedf 	bl	800bed0 <HAL_GetTick>
 800f112:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800f114:	88fb      	ldrh	r3, [r7, #6]
 800f116:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	2b01      	cmp	r3, #1
 800f122:	d001      	beq.n	800f128 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800f124:	2302      	movs	r3, #2
 800f126:	e15c      	b.n	800f3e2 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d002      	beq.n	800f134 <HAL_SPI_Transmit+0x36>
 800f12e:	88fb      	ldrh	r3, [r7, #6]
 800f130:	2b00      	cmp	r3, #0
 800f132:	d101      	bne.n	800f138 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800f134:	2301      	movs	r3, #1
 800f136:	e154      	b.n	800f3e2 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d101      	bne.n	800f146 <HAL_SPI_Transmit+0x48>
 800f142:	2302      	movs	r3, #2
 800f144:	e14d      	b.n	800f3e2 <HAL_SPI_Transmit+0x2e4>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	2201      	movs	r2, #1
 800f14a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2203      	movs	r2, #3
 800f152:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2200      	movs	r2, #0
 800f15a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	68ba      	ldr	r2, [r7, #8]
 800f160:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	88fa      	ldrh	r2, [r7, #6]
 800f166:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	88fa      	ldrh	r2, [r7, #6]
 800f16c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2200      	movs	r2, #0
 800f172:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2200      	movs	r2, #0
 800f178:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	2200      	movs	r2, #0
 800f180:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2200      	movs	r2, #0
 800f188:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	2200      	movs	r2, #0
 800f18e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	689b      	ldr	r3, [r3, #8]
 800f194:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f198:	d10f      	bne.n	800f1ba <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	681a      	ldr	r2, [r3, #0]
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f1a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	681a      	ldr	r2, [r3, #0]
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f1b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	681b      	ldr	r3, [r3, #0]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f1c4:	2b40      	cmp	r3, #64	@ 0x40
 800f1c6:	d007      	beq.n	800f1d8 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	681b      	ldr	r3, [r3, #0]
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	681b      	ldr	r3, [r3, #0]
 800f1d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f1d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	68db      	ldr	r3, [r3, #12]
 800f1dc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f1e0:	d952      	bls.n	800f288 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	685b      	ldr	r3, [r3, #4]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d002      	beq.n	800f1f0 <HAL_SPI_Transmit+0xf2>
 800f1ea:	8b7b      	ldrh	r3, [r7, #26]
 800f1ec:	2b01      	cmp	r3, #1
 800f1ee:	d145      	bne.n	800f27c <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f1f4:	881a      	ldrh	r2, [r3, #0]
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f200:	1c9a      	adds	r2, r3, #2
 800f202:	68fb      	ldr	r3, [r7, #12]
 800f204:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f20a:	b29b      	uxth	r3, r3
 800f20c:	3b01      	subs	r3, #1
 800f20e:	b29a      	uxth	r2, r3
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800f214:	e032      	b.n	800f27c <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f216:	68fb      	ldr	r3, [r7, #12]
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	f003 0302 	and.w	r3, r3, #2
 800f220:	2b02      	cmp	r3, #2
 800f222:	d112      	bne.n	800f24a <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f228:	881a      	ldrh	r2, [r3, #0]
 800f22a:	68fb      	ldr	r3, [r7, #12]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f234:	1c9a      	adds	r2, r3, #2
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f23e:	b29b      	uxth	r3, r3
 800f240:	3b01      	subs	r3, #1
 800f242:	b29a      	uxth	r2, r3
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f248:	e018      	b.n	800f27c <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f24a:	f7fc fe41 	bl	800bed0 <HAL_GetTick>
 800f24e:	4602      	mov	r2, r0
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	1ad3      	subs	r3, r2, r3
 800f254:	683a      	ldr	r2, [r7, #0]
 800f256:	429a      	cmp	r2, r3
 800f258:	d803      	bhi.n	800f262 <HAL_SPI_Transmit+0x164>
 800f25a:	683b      	ldr	r3, [r7, #0]
 800f25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f260:	d102      	bne.n	800f268 <HAL_SPI_Transmit+0x16a>
 800f262:	683b      	ldr	r3, [r7, #0]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d109      	bne.n	800f27c <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	2201      	movs	r2, #1
 800f26c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	2200      	movs	r2, #0
 800f274:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f278:	2303      	movs	r3, #3
 800f27a:	e0b2      	b.n	800f3e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f280:	b29b      	uxth	r3, r3
 800f282:	2b00      	cmp	r3, #0
 800f284:	d1c7      	bne.n	800f216 <HAL_SPI_Transmit+0x118>
 800f286:	e083      	b.n	800f390 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d002      	beq.n	800f296 <HAL_SPI_Transmit+0x198>
 800f290:	8b7b      	ldrh	r3, [r7, #26]
 800f292:	2b01      	cmp	r3, #1
 800f294:	d177      	bne.n	800f386 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f29a:	b29b      	uxth	r3, r3
 800f29c:	2b01      	cmp	r3, #1
 800f29e:	d912      	bls.n	800f2c6 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2a4:	881a      	ldrh	r2, [r3, #0]
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2b0:	1c9a      	adds	r2, r3, #2
 800f2b2:	68fb      	ldr	r3, [r7, #12]
 800f2b4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2ba:	b29b      	uxth	r3, r3
 800f2bc:	3b02      	subs	r3, #2
 800f2be:	b29a      	uxth	r2, r3
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f2c4:	e05f      	b.n	800f386 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f2ca:	68fb      	ldr	r3, [r7, #12]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	330c      	adds	r3, #12
 800f2d0:	7812      	ldrb	r2, [r2, #0]
 800f2d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f2de:	68fb      	ldr	r3, [r7, #12]
 800f2e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f2e2:	b29b      	uxth	r3, r3
 800f2e4:	3b01      	subs	r3, #1
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800f2ec:	e04b      	b.n	800f386 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	689b      	ldr	r3, [r3, #8]
 800f2f4:	f003 0302 	and.w	r3, r3, #2
 800f2f8:	2b02      	cmp	r3, #2
 800f2fa:	d12b      	bne.n	800f354 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f300:	b29b      	uxth	r3, r3
 800f302:	2b01      	cmp	r3, #1
 800f304:	d912      	bls.n	800f32c <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f306:	68fb      	ldr	r3, [r7, #12]
 800f308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f30a:	881a      	ldrh	r2, [r3, #0]
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f316:	1c9a      	adds	r2, r3, #2
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f320:	b29b      	uxth	r3, r3
 800f322:	3b02      	subs	r3, #2
 800f324:	b29a      	uxth	r2, r3
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f32a:	e02c      	b.n	800f386 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	330c      	adds	r3, #12
 800f336:	7812      	ldrb	r2, [r2, #0]
 800f338:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f33e:	1c5a      	adds	r2, r3, #1
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f344:	68fb      	ldr	r3, [r7, #12]
 800f346:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f348:	b29b      	uxth	r3, r3
 800f34a:	3b01      	subs	r3, #1
 800f34c:	b29a      	uxth	r2, r3
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f352:	e018      	b.n	800f386 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f354:	f7fc fdbc 	bl	800bed0 <HAL_GetTick>
 800f358:	4602      	mov	r2, r0
 800f35a:	69fb      	ldr	r3, [r7, #28]
 800f35c:	1ad3      	subs	r3, r2, r3
 800f35e:	683a      	ldr	r2, [r7, #0]
 800f360:	429a      	cmp	r2, r3
 800f362:	d803      	bhi.n	800f36c <HAL_SPI_Transmit+0x26e>
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f36a:	d102      	bne.n	800f372 <HAL_SPI_Transmit+0x274>
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d109      	bne.n	800f386 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2201      	movs	r2, #1
 800f376:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	2200      	movs	r2, #0
 800f37e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800f382:	2303      	movs	r3, #3
 800f384:	e02d      	b.n	800f3e2 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f38a:	b29b      	uxth	r3, r3
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d1ae      	bne.n	800f2ee <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f390:	69fa      	ldr	r2, [r7, #28]
 800f392:	6839      	ldr	r1, [r7, #0]
 800f394:	68f8      	ldr	r0, [r7, #12]
 800f396:	f000 fb73 	bl	800fa80 <SPI_EndRxTxTransaction>
 800f39a:	4603      	mov	r3, r0
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d002      	beq.n	800f3a6 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2220      	movs	r2, #32
 800f3a4:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	689b      	ldr	r3, [r3, #8]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d10a      	bne.n	800f3c4 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	617b      	str	r3, [r7, #20]
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	617b      	str	r3, [r7, #20]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	689b      	ldr	r3, [r3, #8]
 800f3c0:	617b      	str	r3, [r7, #20]
 800f3c2:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	2201      	movs	r2, #1
 800f3c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d001      	beq.n	800f3e0 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e000      	b.n	800f3e2 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 800f3e0:	2300      	movs	r3, #0
  }
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3720      	adds	r7, #32
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	bd80      	pop	{r7, pc}

0800f3ea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800f3ea:	b580      	push	{r7, lr}
 800f3ec:	b08a      	sub	sp, #40	@ 0x28
 800f3ee:	af00      	add	r7, sp, #0
 800f3f0:	60f8      	str	r0, [r7, #12]
 800f3f2:	60b9      	str	r1, [r7, #8]
 800f3f4:	607a      	str	r2, [r7, #4]
 800f3f6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3fc:	f7fc fd68 	bl	800bed0 <HAL_GetTick>
 800f400:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f408:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	685b      	ldr	r3, [r3, #4]
 800f40e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800f410:	887b      	ldrh	r3, [r7, #2]
 800f412:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800f414:	887b      	ldrh	r3, [r7, #2]
 800f416:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f418:	7ffb      	ldrb	r3, [r7, #31]
 800f41a:	2b01      	cmp	r3, #1
 800f41c:	d00c      	beq.n	800f438 <HAL_SPI_TransmitReceive+0x4e>
 800f41e:	69bb      	ldr	r3, [r7, #24]
 800f420:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f424:	d106      	bne.n	800f434 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	689b      	ldr	r3, [r3, #8]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d102      	bne.n	800f434 <HAL_SPI_TransmitReceive+0x4a>
 800f42e:	7ffb      	ldrb	r3, [r7, #31]
 800f430:	2b04      	cmp	r3, #4
 800f432:	d001      	beq.n	800f438 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800f434:	2302      	movs	r3, #2
 800f436:	e1f3      	b.n	800f820 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d005      	beq.n	800f44a <HAL_SPI_TransmitReceive+0x60>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <HAL_SPI_TransmitReceive+0x60>
 800f444:	887b      	ldrh	r3, [r7, #2]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d101      	bne.n	800f44e <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800f44a:	2301      	movs	r3, #1
 800f44c:	e1e8      	b.n	800f820 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f44e:	68fb      	ldr	r3, [r7, #12]
 800f450:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800f454:	2b01      	cmp	r3, #1
 800f456:	d101      	bne.n	800f45c <HAL_SPI_TransmitReceive+0x72>
 800f458:	2302      	movs	r3, #2
 800f45a:	e1e1      	b.n	800f820 <HAL_SPI_TransmitReceive+0x436>
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	2b04      	cmp	r3, #4
 800f46e:	d003      	beq.n	800f478 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2205      	movs	r2, #5
 800f474:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	2200      	movs	r2, #0
 800f47c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	887a      	ldrh	r2, [r7, #2]
 800f488:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	887a      	ldrh	r2, [r7, #2]
 800f490:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	68ba      	ldr	r2, [r7, #8]
 800f498:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	887a      	ldrh	r2, [r7, #2]
 800f49e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	887a      	ldrh	r2, [r7, #2]
 800f4a4:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	68db      	ldr	r3, [r3, #12]
 800f4b6:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f4ba:	d802      	bhi.n	800f4c2 <HAL_SPI_TransmitReceive+0xd8>
 800f4bc:	8abb      	ldrh	r3, [r7, #20]
 800f4be:	2b01      	cmp	r3, #1
 800f4c0:	d908      	bls.n	800f4d4 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f4c2:	68fb      	ldr	r3, [r7, #12]
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	685a      	ldr	r2, [r3, #4]
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	681b      	ldr	r3, [r3, #0]
 800f4cc:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800f4d0:	605a      	str	r2, [r3, #4]
 800f4d2:	e007      	b.n	800f4e4 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	685a      	ldr	r2, [r3, #4]
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f4e2:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	681b      	ldr	r3, [r3, #0]
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4ee:	2b40      	cmp	r3, #64	@ 0x40
 800f4f0:	d007      	beq.n	800f502 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f500:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	68db      	ldr	r3, [r3, #12]
 800f506:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800f50a:	f240 8083 	bls.w	800f614 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d002      	beq.n	800f51c <HAL_SPI_TransmitReceive+0x132>
 800f516:	8afb      	ldrh	r3, [r7, #22]
 800f518:	2b01      	cmp	r3, #1
 800f51a:	d16f      	bne.n	800f5fc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f520:	881a      	ldrh	r2, [r3, #0]
 800f522:	68fb      	ldr	r3, [r7, #12]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f52c:	1c9a      	adds	r2, r3, #2
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f536:	b29b      	uxth	r3, r3
 800f538:	3b01      	subs	r3, #1
 800f53a:	b29a      	uxth	r2, r3
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f540:	e05c      	b.n	800f5fc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	f003 0302 	and.w	r3, r3, #2
 800f54c:	2b02      	cmp	r3, #2
 800f54e:	d11b      	bne.n	800f588 <HAL_SPI_TransmitReceive+0x19e>
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f554:	b29b      	uxth	r3, r3
 800f556:	2b00      	cmp	r3, #0
 800f558:	d016      	beq.n	800f588 <HAL_SPI_TransmitReceive+0x19e>
 800f55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f55c:	2b01      	cmp	r3, #1
 800f55e:	d113      	bne.n	800f588 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f564:	881a      	ldrh	r2, [r3, #0]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f56c:	68fb      	ldr	r3, [r7, #12]
 800f56e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f570:	1c9a      	adds	r2, r3, #2
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f57a:	b29b      	uxth	r3, r3
 800f57c:	3b01      	subs	r3, #1
 800f57e:	b29a      	uxth	r2, r3
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f584:	2300      	movs	r3, #0
 800f586:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	689b      	ldr	r3, [r3, #8]
 800f58e:	f003 0301 	and.w	r3, r3, #1
 800f592:	2b01      	cmp	r3, #1
 800f594:	d11c      	bne.n	800f5d0 <HAL_SPI_TransmitReceive+0x1e6>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f59c:	b29b      	uxth	r3, r3
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d016      	beq.n	800f5d0 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	68da      	ldr	r2, [r3, #12]
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5ac:	b292      	uxth	r2, r2
 800f5ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f5b4:	1c9a      	adds	r2, r3, #2
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f5c0:	b29b      	uxth	r3, r3
 800f5c2:	3b01      	subs	r3, #1
 800f5c4:	b29a      	uxth	r2, r3
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800f5d0:	f7fc fc7e 	bl	800bed0 <HAL_GetTick>
 800f5d4:	4602      	mov	r2, r0
 800f5d6:	6a3b      	ldr	r3, [r7, #32]
 800f5d8:	1ad3      	subs	r3, r2, r3
 800f5da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f5dc:	429a      	cmp	r2, r3
 800f5de:	d80d      	bhi.n	800f5fc <HAL_SPI_TransmitReceive+0x212>
 800f5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f5e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5e6:	d009      	beq.n	800f5fc <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2200      	movs	r2, #0
 800f5f4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f5f8:	2303      	movs	r3, #3
 800f5fa:	e111      	b.n	800f820 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f600:	b29b      	uxth	r3, r3
 800f602:	2b00      	cmp	r3, #0
 800f604:	d19d      	bne.n	800f542 <HAL_SPI_TransmitReceive+0x158>
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f60c:	b29b      	uxth	r3, r3
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d197      	bne.n	800f542 <HAL_SPI_TransmitReceive+0x158>
 800f612:	e0e5      	b.n	800f7e0 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	685b      	ldr	r3, [r3, #4]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d003      	beq.n	800f624 <HAL_SPI_TransmitReceive+0x23a>
 800f61c:	8afb      	ldrh	r3, [r7, #22]
 800f61e:	2b01      	cmp	r3, #1
 800f620:	f040 80d1 	bne.w	800f7c6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f628:	b29b      	uxth	r3, r3
 800f62a:	2b01      	cmp	r3, #1
 800f62c:	d912      	bls.n	800f654 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f632:	881a      	ldrh	r2, [r3, #0]
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f63e:	1c9a      	adds	r2, r3, #2
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f648:	b29b      	uxth	r3, r3
 800f64a:	3b02      	subs	r3, #2
 800f64c:	b29a      	uxth	r2, r3
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f652:	e0b8      	b.n	800f7c6 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	330c      	adds	r3, #12
 800f65e:	7812      	ldrb	r2, [r2, #0]
 800f660:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f666:	1c5a      	adds	r2, r3, #1
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f670:	b29b      	uxth	r3, r3
 800f672:	3b01      	subs	r3, #1
 800f674:	b29a      	uxth	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f67a:	e0a4      	b.n	800f7c6 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	689b      	ldr	r3, [r3, #8]
 800f682:	f003 0302 	and.w	r3, r3, #2
 800f686:	2b02      	cmp	r3, #2
 800f688:	d134      	bne.n	800f6f4 <HAL_SPI_TransmitReceive+0x30a>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f68e:	b29b      	uxth	r3, r3
 800f690:	2b00      	cmp	r3, #0
 800f692:	d02f      	beq.n	800f6f4 <HAL_SPI_TransmitReceive+0x30a>
 800f694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f696:	2b01      	cmp	r3, #1
 800f698:	d12c      	bne.n	800f6f4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f69e:	b29b      	uxth	r3, r3
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d912      	bls.n	800f6ca <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6a8:	881a      	ldrh	r2, [r3, #0]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6b4:	1c9a      	adds	r2, r3, #2
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f6be:	b29b      	uxth	r3, r3
 800f6c0:	3b02      	subs	r3, #2
 800f6c2:	b29a      	uxth	r2, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800f6c8:	e012      	b.n	800f6f0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	681b      	ldr	r3, [r3, #0]
 800f6d2:	330c      	adds	r3, #12
 800f6d4:	7812      	ldrb	r2, [r2, #0]
 800f6d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f6dc:	1c5a      	adds	r2, r3, #1
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f6e6:	b29b      	uxth	r3, r3
 800f6e8:	3b01      	subs	r3, #1
 800f6ea:	b29a      	uxth	r2, r3
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	f003 0301 	and.w	r3, r3, #1
 800f6fe:	2b01      	cmp	r3, #1
 800f700:	d148      	bne.n	800f794 <HAL_SPI_TransmitReceive+0x3aa>
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f708:	b29b      	uxth	r3, r3
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d042      	beq.n	800f794 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f714:	b29b      	uxth	r3, r3
 800f716:	2b01      	cmp	r3, #1
 800f718:	d923      	bls.n	800f762 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	681b      	ldr	r3, [r3, #0]
 800f71e:	68da      	ldr	r2, [r3, #12]
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f724:	b292      	uxth	r2, r2
 800f726:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f72c:	1c9a      	adds	r2, r3, #2
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f738:	b29b      	uxth	r3, r3
 800f73a:	3b02      	subs	r3, #2
 800f73c:	b29a      	uxth	r2, r3
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	2b01      	cmp	r3, #1
 800f74e:	d81f      	bhi.n	800f790 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	685a      	ldr	r2, [r3, #4]
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800f75e:	605a      	str	r2, [r3, #4]
 800f760:	e016      	b.n	800f790 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	681b      	ldr	r3, [r3, #0]
 800f766:	f103 020c 	add.w	r2, r3, #12
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f76e:	7812      	ldrb	r2, [r2, #0]
 800f770:	b2d2      	uxtb	r2, r2
 800f772:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f778:	1c5a      	adds	r2, r3, #1
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f784:	b29b      	uxth	r3, r3
 800f786:	3b01      	subs	r3, #1
 800f788:	b29a      	uxth	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800f790:	2301      	movs	r3, #1
 800f792:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800f794:	f7fc fb9c 	bl	800bed0 <HAL_GetTick>
 800f798:	4602      	mov	r2, r0
 800f79a:	6a3b      	ldr	r3, [r7, #32]
 800f79c:	1ad3      	subs	r3, r2, r3
 800f79e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d803      	bhi.n	800f7ac <HAL_SPI_TransmitReceive+0x3c2>
 800f7a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7aa:	d102      	bne.n	800f7b2 <HAL_SPI_TransmitReceive+0x3c8>
 800f7ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d109      	bne.n	800f7c6 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800f7b2:	68fb      	ldr	r3, [r7, #12]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	2200      	movs	r2, #0
 800f7be:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800f7c2:	2303      	movs	r3, #3
 800f7c4:	e02c      	b.n	800f820 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800f7ca:	b29b      	uxth	r3, r3
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	f47f af55 	bne.w	800f67c <HAL_SPI_TransmitReceive+0x292>
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800f7d8:	b29b      	uxth	r3, r3
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	f47f af4e 	bne.w	800f67c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800f7e0:	6a3a      	ldr	r2, [r7, #32]
 800f7e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800f7e4:	68f8      	ldr	r0, [r7, #12]
 800f7e6:	f000 f94b 	bl	800fa80 <SPI_EndRxTxTransaction>
 800f7ea:	4603      	mov	r3, r0
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d008      	beq.n	800f802 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	2220      	movs	r2, #32
 800f7f4:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800f7fe:	2301      	movs	r3, #1
 800f800:	e00e      	b.n	800f820 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2201      	movs	r2, #1
 800f806:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	2200      	movs	r2, #0
 800f80e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f816:	2b00      	cmp	r3, #0
 800f818:	d001      	beq.n	800f81e <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800f81a:	2301      	movs	r3, #1
 800f81c:	e000      	b.n	800f820 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800f81e:	2300      	movs	r3, #0
  }
}
 800f820:	4618      	mov	r0, r3
 800f822:	3728      	adds	r7, #40	@ 0x28
 800f824:	46bd      	mov	sp, r7
 800f826:	bd80      	pop	{r7, pc}

0800f828 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 800f828:	b480      	push	{r7}
 800f82a:	b083      	sub	sp, #12
 800f82c:	af00      	add	r7, sp, #0
 800f82e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800f836:	b2db      	uxtb	r3, r3
}
 800f838:	4618      	mov	r0, r3
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b088      	sub	sp, #32
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	603b      	str	r3, [r7, #0]
 800f850:	4613      	mov	r3, r2
 800f852:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800f854:	f7fc fb3c 	bl	800bed0 <HAL_GetTick>
 800f858:	4602      	mov	r2, r0
 800f85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f85c:	1a9b      	subs	r3, r3, r2
 800f85e:	683a      	ldr	r2, [r7, #0]
 800f860:	4413      	add	r3, r2
 800f862:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800f864:	f7fc fb34 	bl	800bed0 <HAL_GetTick>
 800f868:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800f86a:	4b39      	ldr	r3, [pc, #228]	@ (800f950 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800f86c:	681b      	ldr	r3, [r3, #0]
 800f86e:	015b      	lsls	r3, r3, #5
 800f870:	0d1b      	lsrs	r3, r3, #20
 800f872:	69fa      	ldr	r2, [r7, #28]
 800f874:	fb02 f303 	mul.w	r3, r2, r3
 800f878:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f87a:	e054      	b.n	800f926 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f87c:	683b      	ldr	r3, [r7, #0]
 800f87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f882:	d050      	beq.n	800f926 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f884:	f7fc fb24 	bl	800bed0 <HAL_GetTick>
 800f888:	4602      	mov	r2, r0
 800f88a:	69bb      	ldr	r3, [r7, #24]
 800f88c:	1ad3      	subs	r3, r2, r3
 800f88e:	69fa      	ldr	r2, [r7, #28]
 800f890:	429a      	cmp	r2, r3
 800f892:	d902      	bls.n	800f89a <SPI_WaitFlagStateUntilTimeout+0x56>
 800f894:	69fb      	ldr	r3, [r7, #28]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d13d      	bne.n	800f916 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	685a      	ldr	r2, [r3, #4]
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f8a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	685b      	ldr	r3, [r3, #4]
 800f8ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f8b2:	d111      	bne.n	800f8d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	689b      	ldr	r3, [r3, #8]
 800f8b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f8bc:	d004      	beq.n	800f8c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	689b      	ldr	r3, [r3, #8]
 800f8c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800f8c6:	d107      	bne.n	800f8d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800f8d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f8e0:	d10f      	bne.n	800f902 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	681a      	ldr	r2, [r3, #0]
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f8f0:	601a      	str	r2, [r3, #0]
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f900:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2201      	movs	r2, #1
 800f906:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	2200      	movs	r2, #0
 800f90e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800f912:	2303      	movs	r3, #3
 800f914:	e017      	b.n	800f946 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d101      	bne.n	800f920 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800f91c:	2300      	movs	r3, #0
 800f91e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	3b01      	subs	r3, #1
 800f924:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800f926:	68fb      	ldr	r3, [r7, #12]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	689a      	ldr	r2, [r3, #8]
 800f92c:	68bb      	ldr	r3, [r7, #8]
 800f92e:	4013      	ands	r3, r2
 800f930:	68ba      	ldr	r2, [r7, #8]
 800f932:	429a      	cmp	r2, r3
 800f934:	bf0c      	ite	eq
 800f936:	2301      	moveq	r3, #1
 800f938:	2300      	movne	r3, #0
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	461a      	mov	r2, r3
 800f93e:	79fb      	ldrb	r3, [r7, #7]
 800f940:	429a      	cmp	r2, r3
 800f942:	d19b      	bne.n	800f87c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800f944:	2300      	movs	r3, #0
}
 800f946:	4618      	mov	r0, r3
 800f948:	3720      	adds	r7, #32
 800f94a:	46bd      	mov	sp, r7
 800f94c:	bd80      	pop	{r7, pc}
 800f94e:	bf00      	nop
 800f950:	20000094 	.word	0x20000094

0800f954 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b08a      	sub	sp, #40	@ 0x28
 800f958:	af00      	add	r7, sp, #0
 800f95a:	60f8      	str	r0, [r7, #12]
 800f95c:	60b9      	str	r1, [r7, #8]
 800f95e:	607a      	str	r2, [r7, #4]
 800f960:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800f962:	2300      	movs	r3, #0
 800f964:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800f966:	f7fc fab3 	bl	800bed0 <HAL_GetTick>
 800f96a:	4602      	mov	r2, r0
 800f96c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f96e:	1a9b      	subs	r3, r3, r2
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	4413      	add	r3, r2
 800f974:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800f976:	f7fc faab 	bl	800bed0 <HAL_GetTick>
 800f97a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	330c      	adds	r3, #12
 800f982:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800f984:	4b3d      	ldr	r3, [pc, #244]	@ (800fa7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 800f986:	681a      	ldr	r2, [r3, #0]
 800f988:	4613      	mov	r3, r2
 800f98a:	009b      	lsls	r3, r3, #2
 800f98c:	4413      	add	r3, r2
 800f98e:	00da      	lsls	r2, r3, #3
 800f990:	1ad3      	subs	r3, r2, r3
 800f992:	0d1b      	lsrs	r3, r3, #20
 800f994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f996:	fb02 f303 	mul.w	r3, r2, r3
 800f99a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800f99c:	e060      	b.n	800fa60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800f99e:	68bb      	ldr	r3, [r7, #8]
 800f9a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800f9a4:	d107      	bne.n	800f9b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d104      	bne.n	800f9b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800f9ac:	69fb      	ldr	r3, [r7, #28]
 800f9ae:	781b      	ldrb	r3, [r3, #0]
 800f9b0:	b2db      	uxtb	r3, r3
 800f9b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800f9b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800f9b6:	683b      	ldr	r3, [r7, #0]
 800f9b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9bc:	d050      	beq.n	800fa60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800f9be:	f7fc fa87 	bl	800bed0 <HAL_GetTick>
 800f9c2:	4602      	mov	r2, r0
 800f9c4:	6a3b      	ldr	r3, [r7, #32]
 800f9c6:	1ad3      	subs	r3, r2, r3
 800f9c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f9ca:	429a      	cmp	r2, r3
 800f9cc:	d902      	bls.n	800f9d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 800f9ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d13d      	bne.n	800fa50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	685a      	ldr	r2, [r3, #4]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800f9e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f9e4:	68fb      	ldr	r3, [r7, #12]
 800f9e6:	685b      	ldr	r3, [r3, #4]
 800f9e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800f9ec:	d111      	bne.n	800fa12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	689b      	ldr	r3, [r3, #8]
 800f9f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800f9f6:	d004      	beq.n	800fa02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	689b      	ldr	r3, [r3, #8]
 800f9fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fa00:	d107      	bne.n	800fa12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	681a      	ldr	r2, [r3, #0]
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fa10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fa1a:	d10f      	bne.n	800fa3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	681a      	ldr	r2, [r3, #0]
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	681b      	ldr	r3, [r3, #0]
 800fa26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fa2a:	601a      	str	r2, [r3, #0]
 800fa2c:	68fb      	ldr	r3, [r7, #12]
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	681a      	ldr	r2, [r3, #0]
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fa3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	2201      	movs	r2, #1
 800fa40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	2200      	movs	r2, #0
 800fa48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800fa4c:	2303      	movs	r3, #3
 800fa4e:	e010      	b.n	800fa72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800fa50:	69bb      	ldr	r3, [r7, #24]
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d101      	bne.n	800fa5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800fa56:	2300      	movs	r3, #0
 800fa58:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800fa5a:	69bb      	ldr	r3, [r7, #24]
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	689a      	ldr	r2, [r3, #8]
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	4013      	ands	r3, r2
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d196      	bne.n	800f99e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800fa70:	2300      	movs	r3, #0
}
 800fa72:	4618      	mov	r0, r3
 800fa74:	3728      	adds	r7, #40	@ 0x28
 800fa76:	46bd      	mov	sp, r7
 800fa78:	bd80      	pop	{r7, pc}
 800fa7a:	bf00      	nop
 800fa7c:	20000094 	.word	0x20000094

0800fa80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800fa80:	b580      	push	{r7, lr}
 800fa82:	b086      	sub	sp, #24
 800fa84:	af02      	add	r7, sp, #8
 800fa86:	60f8      	str	r0, [r7, #12]
 800fa88:	60b9      	str	r1, [r7, #8]
 800fa8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	9300      	str	r3, [sp, #0]
 800fa90:	68bb      	ldr	r3, [r7, #8]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800fa98:	68f8      	ldr	r0, [r7, #12]
 800fa9a:	f7ff ff5b 	bl	800f954 <SPI_WaitFifoStateUntilTimeout>
 800fa9e:	4603      	mov	r3, r0
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d007      	beq.n	800fab4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800faa8:	f043 0220 	orr.w	r2, r3, #32
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fab0:	2303      	movs	r3, #3
 800fab2:	e027      	b.n	800fb04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	9300      	str	r3, [sp, #0]
 800fab8:	68bb      	ldr	r3, [r7, #8]
 800faba:	2200      	movs	r2, #0
 800fabc:	2180      	movs	r1, #128	@ 0x80
 800fabe:	68f8      	ldr	r0, [r7, #12]
 800fac0:	f7ff fec0 	bl	800f844 <SPI_WaitFlagStateUntilTimeout>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d007      	beq.n	800fada <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800face:	f043 0220 	orr.w	r2, r3, #32
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fad6:	2303      	movs	r3, #3
 800fad8:	e014      	b.n	800fb04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	2200      	movs	r2, #0
 800fae2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800fae6:	68f8      	ldr	r0, [r7, #12]
 800fae8:	f7ff ff34 	bl	800f954 <SPI_WaitFifoStateUntilTimeout>
 800faec:	4603      	mov	r3, r0
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d007      	beq.n	800fb02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800faf6:	f043 0220 	orr.w	r2, r3, #32
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800fafe:	2303      	movs	r3, #3
 800fb00:	e000      	b.n	800fb04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800fb02:	2300      	movs	r3, #0
}
 800fb04:	4618      	mov	r0, r3
 800fb06:	3710      	adds	r7, #16
 800fb08:	46bd      	mov	sp, r7
 800fb0a:	bd80      	pop	{r7, pc}

0800fb0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b082      	sub	sp, #8
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800fb1a:	2301      	movs	r3, #1
 800fb1c:	e049      	b.n	800fbb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fb24:	b2db      	uxtb	r3, r3
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d106      	bne.n	800fb38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800fb32:	6878      	ldr	r0, [r7, #4]
 800fb34:	f000 f841 	bl	800fbba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	2202      	movs	r2, #2
 800fb3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	681a      	ldr	r2, [r3, #0]
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	3304      	adds	r3, #4
 800fb48:	4619      	mov	r1, r3
 800fb4a:	4610      	mov	r0, r2
 800fb4c:	f000 f914 	bl	800fd78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	2201      	movs	r2, #1
 800fb54:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2201      	movs	r2, #1
 800fb64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fb68:	687b      	ldr	r3, [r7, #4]
 800fb6a:	2201      	movs	r2, #1
 800fb6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	2201      	movs	r2, #1
 800fb74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2201      	movs	r2, #1
 800fb7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2201      	movs	r2, #1
 800fb84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	2201      	movs	r2, #1
 800fb94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	2201      	movs	r2, #1
 800fb9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2201      	movs	r2, #1
 800fba4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2201      	movs	r2, #1
 800fbac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800fbb0:	2300      	movs	r3, #0
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}

0800fbba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800fbba:	b480      	push	{r7}
 800fbbc:	b083      	sub	sp, #12
 800fbbe:	af00      	add	r7, sp, #0
 800fbc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800fbc2:	bf00      	nop
 800fbc4:	370c      	adds	r7, #12
 800fbc6:	46bd      	mov	sp, r7
 800fbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbcc:	4770      	bx	lr
	...

0800fbd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800fbde:	b2db      	uxtb	r3, r3
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d001      	beq.n	800fbe8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e02e      	b.n	800fc46 <HAL_TIM_Base_Start+0x76>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2202      	movs	r2, #2
 800fbec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	4a17      	ldr	r2, [pc, #92]	@ (800fc54 <HAL_TIM_Base_Start+0x84>)
 800fbf6:	4293      	cmp	r3, r2
 800fbf8:	d004      	beq.n	800fc04 <HAL_TIM_Base_Start+0x34>
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fc02:	d115      	bne.n	800fc30 <HAL_TIM_Base_Start+0x60>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	689a      	ldr	r2, [r3, #8]
 800fc0a:	4b13      	ldr	r3, [pc, #76]	@ (800fc58 <HAL_TIM_Base_Start+0x88>)
 800fc0c:	4013      	ands	r3, r2
 800fc0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2b06      	cmp	r3, #6
 800fc14:	d015      	beq.n	800fc42 <HAL_TIM_Base_Start+0x72>
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800fc1c:	d011      	beq.n	800fc42 <HAL_TIM_Base_Start+0x72>
    {
      __HAL_TIM_ENABLE(htim);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	681a      	ldr	r2, [r3, #0]
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	f042 0201 	orr.w	r2, r2, #1
 800fc2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc2e:	e008      	b.n	800fc42 <HAL_TIM_Base_Start+0x72>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	681a      	ldr	r2, [r3, #0]
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	f042 0201 	orr.w	r2, r2, #1
 800fc3e:	601a      	str	r2, [r3, #0]
 800fc40:	e000      	b.n	800fc44 <HAL_TIM_Base_Start+0x74>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fc42:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800fc44:	2300      	movs	r3, #0
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	3714      	adds	r7, #20
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr
 800fc52:	bf00      	nop
 800fc54:	40012c00 	.word	0x40012c00
 800fc58:	00010007 	.word	0x00010007

0800fc5c <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800fc5c:	b480      	push	{r7}
 800fc5e:	b083      	sub	sp, #12
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	6a1a      	ldr	r2, [r3, #32]
 800fc6a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fc6e:	4013      	ands	r3, r2
 800fc70:	2b00      	cmp	r3, #0
 800fc72:	d10f      	bne.n	800fc94 <HAL_TIM_Base_Stop+0x38>
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	6a1a      	ldr	r2, [r3, #32]
 800fc7a:	f240 4344 	movw	r3, #1092	@ 0x444
 800fc7e:	4013      	ands	r3, r2
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d107      	bne.n	800fc94 <HAL_TIM_Base_Stop+0x38>
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	681a      	ldr	r2, [r3, #0]
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	f022 0201 	bic.w	r2, r2, #1
 800fc92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	2201      	movs	r2, #1
 800fc98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 800fc9c:	2300      	movs	r3, #0
}
 800fc9e:	4618      	mov	r0, r3
 800fca0:	370c      	adds	r7, #12
 800fca2:	46bd      	mov	sp, r7
 800fca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca8:	4770      	bx	lr

0800fcaa <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800fcaa:	b580      	push	{r7, lr}
 800fcac:	b082      	sub	sp, #8
 800fcae:	af00      	add	r7, sp, #0
 800fcb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2202      	movs	r2, #2
 800fcb6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	6a1a      	ldr	r2, [r3, #32]
 800fcc0:	f241 1311 	movw	r3, #4369	@ 0x1111
 800fcc4:	4013      	ands	r3, r2
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d10f      	bne.n	800fcea <HAL_TIM_PWM_DeInit+0x40>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	681b      	ldr	r3, [r3, #0]
 800fcce:	6a1a      	ldr	r2, [r3, #32]
 800fcd0:	f240 4344 	movw	r3, #1092	@ 0x444
 800fcd4:	4013      	ands	r3, r2
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d107      	bne.n	800fcea <HAL_TIM_PWM_DeInit+0x40>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	681b      	ldr	r3, [r3, #0]
 800fcde:	681a      	ldr	r2, [r3, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	f022 0201 	bic.w	r2, r2, #1
 800fce8:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800fcea:	6878      	ldr	r0, [r7, #4]
 800fcec:	f000 f839 	bl	800fd62 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2200      	movs	r2, #0
 800fd14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	2200      	movs	r2, #0
 800fd34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	2200      	movs	r2, #0
 800fd54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fd58:	2300      	movs	r3, #0
}
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	3708      	adds	r7, #8
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	bd80      	pop	{r7, pc}

0800fd62 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800fd62:	b480      	push	{r7}
 800fd64:	b083      	sub	sp, #12
 800fd66:	af00      	add	r7, sp, #0
 800fd68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800fd6a:	bf00      	nop
 800fd6c:	370c      	adds	r7, #12
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd74:	4770      	bx	lr
	...

0800fd78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
 800fd80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	681b      	ldr	r3, [r3, #0]
 800fd86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	4a30      	ldr	r2, [pc, #192]	@ (800fe4c <TIM_Base_SetConfig+0xd4>)
 800fd8c:	4293      	cmp	r3, r2
 800fd8e:	d003      	beq.n	800fd98 <TIM_Base_SetConfig+0x20>
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd96:	d108      	bne.n	800fdaa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fd9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800fda0:	683b      	ldr	r3, [r7, #0]
 800fda2:	685b      	ldr	r3, [r3, #4]
 800fda4:	68fa      	ldr	r2, [r7, #12]
 800fda6:	4313      	orrs	r3, r2
 800fda8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	4a27      	ldr	r2, [pc, #156]	@ (800fe4c <TIM_Base_SetConfig+0xd4>)
 800fdae:	4293      	cmp	r3, r2
 800fdb0:	d00b      	beq.n	800fdca <TIM_Base_SetConfig+0x52>
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fdb8:	d007      	beq.n	800fdca <TIM_Base_SetConfig+0x52>
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	4a24      	ldr	r2, [pc, #144]	@ (800fe50 <TIM_Base_SetConfig+0xd8>)
 800fdbe:	4293      	cmp	r3, r2
 800fdc0:	d003      	beq.n	800fdca <TIM_Base_SetConfig+0x52>
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	4a23      	ldr	r2, [pc, #140]	@ (800fe54 <TIM_Base_SetConfig+0xdc>)
 800fdc6:	4293      	cmp	r3, r2
 800fdc8:	d108      	bne.n	800fddc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800fdd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fdd2:	683b      	ldr	r3, [r7, #0]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	68fa      	ldr	r2, [r7, #12]
 800fdd8:	4313      	orrs	r3, r2
 800fdda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	695b      	ldr	r3, [r3, #20]
 800fde6:	4313      	orrs	r3, r2
 800fde8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	689a      	ldr	r2, [r3, #8]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800fdf8:	683b      	ldr	r3, [r7, #0]
 800fdfa:	681a      	ldr	r2, [r3, #0]
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	4a12      	ldr	r2, [pc, #72]	@ (800fe4c <TIM_Base_SetConfig+0xd4>)
 800fe04:	4293      	cmp	r3, r2
 800fe06:	d007      	beq.n	800fe18 <TIM_Base_SetConfig+0xa0>
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	4a11      	ldr	r2, [pc, #68]	@ (800fe50 <TIM_Base_SetConfig+0xd8>)
 800fe0c:	4293      	cmp	r3, r2
 800fe0e:	d003      	beq.n	800fe18 <TIM_Base_SetConfig+0xa0>
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	4a10      	ldr	r2, [pc, #64]	@ (800fe54 <TIM_Base_SetConfig+0xdc>)
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d103      	bne.n	800fe20 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800fe18:	683b      	ldr	r3, [r7, #0]
 800fe1a:	691a      	ldr	r2, [r3, #16]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	2201      	movs	r2, #1
 800fe24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	691b      	ldr	r3, [r3, #16]
 800fe2a:	f003 0301 	and.w	r3, r3, #1
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d105      	bne.n	800fe3e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	691b      	ldr	r3, [r3, #16]
 800fe36:	f023 0201 	bic.w	r2, r3, #1
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	611a      	str	r2, [r3, #16]
  }
}
 800fe3e:	bf00      	nop
 800fe40:	3714      	adds	r7, #20
 800fe42:	46bd      	mov	sp, r7
 800fe44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe48:	4770      	bx	lr
 800fe4a:	bf00      	nop
 800fe4c:	40012c00 	.word	0x40012c00
 800fe50:	40014400 	.word	0x40014400
 800fe54:	40014800 	.word	0x40014800

0800fe58 <LL_RCC_GetUSARTClockSource>:
{
 800fe58:	b480      	push	{r7}
 800fe5a:	b083      	sub	sp, #12
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800fe60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe64:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	4013      	ands	r3, r2
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	370c      	adds	r7, #12
 800fe70:	46bd      	mov	sp, r7
 800fe72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe76:	4770      	bx	lr

0800fe78 <LL_RCC_GetLPUARTClockSource>:
{
 800fe78:	b480      	push	{r7}
 800fe7a:	b083      	sub	sp, #12
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800fe80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800fe84:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	4013      	ands	r3, r2
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	370c      	adds	r7, #12
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b082      	sub	sp, #8
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d101      	bne.n	800feaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fea6:	2301      	movs	r3, #1
 800fea8:	e042      	b.n	800ff30 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800febc:	6878      	ldr	r0, [r7, #4]
 800febe:	f7f8 fc39 	bl	8008734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2224      	movs	r2, #36	@ 0x24
 800fec6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	681a      	ldr	r2, [r3, #0]
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	f022 0201 	bic.w	r2, r2, #1
 800fed8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d002      	beq.n	800fee8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f000 fe7e 	bl	8010be4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fee8:	6878      	ldr	r0, [r7, #4]
 800feea:	f000 fc53 	bl	8010794 <UART_SetConfig>
 800feee:	4603      	mov	r3, r0
 800fef0:	2b01      	cmp	r3, #1
 800fef2:	d101      	bne.n	800fef8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fef4:	2301      	movs	r3, #1
 800fef6:	e01b      	b.n	800ff30 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	685a      	ldr	r2, [r3, #4]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800ff06:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	689a      	ldr	r2, [r3, #8]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800ff16:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	681b      	ldr	r3, [r3, #0]
 800ff1c:	681a      	ldr	r2, [r3, #0]
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	681b      	ldr	r3, [r3, #0]
 800ff22:	f042 0201 	orr.w	r2, r2, #1
 800ff26:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ff28:	6878      	ldr	r0, [r7, #4]
 800ff2a:	f000 fefd 	bl	8010d28 <UART_CheckIdleState>
 800ff2e:	4603      	mov	r3, r0
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3708      	adds	r7, #8
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b08a      	sub	sp, #40	@ 0x28
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	4613      	mov	r3, r2
 800ff44:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ff4c:	2b20      	cmp	r3, #32
 800ff4e:	d137      	bne.n	800ffc0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d002      	beq.n	800ff5c <HAL_UART_Receive_IT+0x24>
 800ff56:	88fb      	ldrh	r3, [r7, #6]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d101      	bne.n	800ff60 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e030      	b.n	800ffc2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2200      	movs	r2, #0
 800ff64:	66da      	str	r2, [r3, #108]	@ 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	4a18      	ldr	r2, [pc, #96]	@ (800ffcc <HAL_UART_Receive_IT+0x94>)
 800ff6c:	4293      	cmp	r3, r2
 800ff6e:	d01f      	beq.n	800ffb0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	685b      	ldr	r3, [r3, #4]
 800ff76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d018      	beq.n	800ffb0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff84:	697b      	ldr	r3, [r7, #20]
 800ff86:	e853 3f00 	ldrex	r3, [r3]
 800ff8a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800ff92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff9c:	623b      	str	r3, [r7, #32]
 800ff9e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffa0:	69f9      	ldr	r1, [r7, #28]
 800ffa2:	6a3a      	ldr	r2, [r7, #32]
 800ffa4:	e841 2300 	strex	r3, r2, [r1]
 800ffa8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d1e6      	bne.n	800ff7e <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800ffb0:	88fb      	ldrh	r3, [r7, #6]
 800ffb2:	461a      	mov	r2, r3
 800ffb4:	68b9      	ldr	r1, [r7, #8]
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f000 ffce 	bl	8010f58 <UART_Start_Receive_IT>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	e000      	b.n	800ffc2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ffc0:	2302      	movs	r3, #2
  }
}
 800ffc2:	4618      	mov	r0, r3
 800ffc4:	3728      	adds	r7, #40	@ 0x28
 800ffc6:	46bd      	mov	sp, r7
 800ffc8:	bd80      	pop	{r7, pc}
 800ffca:	bf00      	nop
 800ffcc:	40008000 	.word	0x40008000

0800ffd0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b08a      	sub	sp, #40	@ 0x28
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	60f8      	str	r0, [r7, #12]
 800ffd8:	60b9      	str	r1, [r7, #8]
 800ffda:	4613      	mov	r3, r2
 800ffdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ffe4:	2b20      	cmp	r3, #32
 800ffe6:	d167      	bne.n	80100b8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d002      	beq.n	800fff4 <HAL_UART_Transmit_DMA+0x24>
 800ffee:	88fb      	ldrh	r3, [r7, #6]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d101      	bne.n	800fff8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fff4:	2301      	movs	r3, #1
 800fff6:	e060      	b.n	80100ba <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fff8:	68fb      	ldr	r3, [r7, #12]
 800fffa:	68ba      	ldr	r2, [r7, #8]
 800fffc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	88fa      	ldrh	r2, [r7, #6]
 8010002:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	88fa      	ldrh	r2, [r7, #6]
 801000a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2200      	movs	r2, #0
 8010012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	2221      	movs	r2, #33	@ 0x21
 801001a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010022:	2b00      	cmp	r3, #0
 8010024:	d028      	beq.n	8010078 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801002a:	4a26      	ldr	r2, [pc, #152]	@ (80100c4 <HAL_UART_Transmit_DMA+0xf4>)
 801002c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010032:	4a25      	ldr	r2, [pc, #148]	@ (80100c8 <HAL_UART_Transmit_DMA+0xf8>)
 8010034:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801003a:	4a24      	ldr	r2, [pc, #144]	@ (80100cc <HAL_UART_Transmit_DMA+0xfc>)
 801003c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010042:	2200      	movs	r2, #0
 8010044:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801004e:	4619      	mov	r1, r3
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	3328      	adds	r3, #40	@ 0x28
 8010056:	461a      	mov	r2, r3
 8010058:	88fb      	ldrh	r3, [r7, #6]
 801005a:	f7fc f9a5 	bl	800c3a8 <HAL_DMA_Start_IT>
 801005e:	4603      	mov	r3, r0
 8010060:	2b00      	cmp	r3, #0
 8010062:	d009      	beq.n	8010078 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	2210      	movs	r2, #16
 8010068:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801006c:	68fb      	ldr	r3, [r7, #12]
 801006e:	2220      	movs	r2, #32
 8010070:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8010074:	2301      	movs	r3, #1
 8010076:	e020      	b.n	80100ba <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	2240      	movs	r2, #64	@ 0x40
 801007e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	3308      	adds	r3, #8
 8010086:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	e853 3f00 	ldrex	r3, [r3]
 801008e:	613b      	str	r3, [r7, #16]
   return(result);
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010096:	627b      	str	r3, [r7, #36]	@ 0x24
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	3308      	adds	r3, #8
 801009e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100a0:	623a      	str	r2, [r7, #32]
 80100a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80100a4:	69f9      	ldr	r1, [r7, #28]
 80100a6:	6a3a      	ldr	r2, [r7, #32]
 80100a8:	e841 2300 	strex	r3, r2, [r1]
 80100ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80100ae:	69bb      	ldr	r3, [r7, #24]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d1e5      	bne.n	8010080 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80100b4:	2300      	movs	r3, #0
 80100b6:	e000      	b.n	80100ba <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80100b8:	2302      	movs	r3, #2
  }
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3728      	adds	r7, #40	@ 0x28
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop
 80100c4:	080112eb 	.word	0x080112eb
 80100c8:	08011385 	.word	0x08011385
 80100cc:	080113a1 	.word	0x080113a1

080100d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b0ba      	sub	sp, #232	@ 0xe8
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	69db      	ldr	r3, [r3, #28]
 80100de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	689b      	ldr	r3, [r3, #8]
 80100f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80100f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80100fa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80100fe:	4013      	ands	r3, r2
 8010100:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8010104:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010108:	2b00      	cmp	r3, #0
 801010a:	d11b      	bne.n	8010144 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801010c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010110:	f003 0320 	and.w	r3, r3, #32
 8010114:	2b00      	cmp	r3, #0
 8010116:	d015      	beq.n	8010144 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8010118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801011c:	f003 0320 	and.w	r3, r3, #32
 8010120:	2b00      	cmp	r3, #0
 8010122:	d105      	bne.n	8010130 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010124:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8010128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801012c:	2b00      	cmp	r3, #0
 801012e:	d009      	beq.n	8010144 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010134:	2b00      	cmp	r3, #0
 8010136:	f000 8300 	beq.w	801073a <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	4798      	blx	r3
      }
      return;
 8010142:	e2fa      	b.n	801073a <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010144:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8010148:	2b00      	cmp	r3, #0
 801014a:	f000 8123 	beq.w	8010394 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801014e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010152:	4b8d      	ldr	r3, [pc, #564]	@ (8010388 <HAL_UART_IRQHandler+0x2b8>)
 8010154:	4013      	ands	r3, r2
 8010156:	2b00      	cmp	r3, #0
 8010158:	d106      	bne.n	8010168 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801015a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 801015e:	4b8b      	ldr	r3, [pc, #556]	@ (801038c <HAL_UART_IRQHandler+0x2bc>)
 8010160:	4013      	ands	r3, r2
 8010162:	2b00      	cmp	r3, #0
 8010164:	f000 8116 	beq.w	8010394 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010168:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801016c:	f003 0301 	and.w	r3, r3, #1
 8010170:	2b00      	cmp	r3, #0
 8010172:	d011      	beq.n	8010198 <HAL_UART_IRQHandler+0xc8>
 8010174:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801017c:	2b00      	cmp	r3, #0
 801017e:	d00b      	beq.n	8010198 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2201      	movs	r2, #1
 8010186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801018e:	f043 0201 	orr.w	r2, r3, #1
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801019c:	f003 0302 	and.w	r3, r3, #2
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	d011      	beq.n	80101c8 <HAL_UART_IRQHandler+0xf8>
 80101a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101a8:	f003 0301 	and.w	r3, r3, #1
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	d00b      	beq.n	80101c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2202      	movs	r2, #2
 80101b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101be:	f043 0204 	orr.w	r2, r3, #4
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d011      	beq.n	80101f8 <HAL_UART_IRQHandler+0x128>
 80101d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80101d8:	f003 0301 	and.w	r3, r3, #1
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d00b      	beq.n	80101f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2204      	movs	r2, #4
 80101e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80101ee:	f043 0202 	orr.w	r2, r3, #2
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80101f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80101fc:	f003 0308 	and.w	r3, r3, #8
 8010200:	2b00      	cmp	r3, #0
 8010202:	d017      	beq.n	8010234 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010208:	f003 0320 	and.w	r3, r3, #32
 801020c:	2b00      	cmp	r3, #0
 801020e:	d105      	bne.n	801021c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8010210:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8010214:	4b5c      	ldr	r3, [pc, #368]	@ (8010388 <HAL_UART_IRQHandler+0x2b8>)
 8010216:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8010218:	2b00      	cmp	r3, #0
 801021a:	d00b      	beq.n	8010234 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2208      	movs	r2, #8
 8010222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801022a:	f043 0208 	orr.w	r2, r3, #8
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010238:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801023c:	2b00      	cmp	r3, #0
 801023e:	d012      	beq.n	8010266 <HAL_UART_IRQHandler+0x196>
 8010240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010244:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00c      	beq.n	8010266 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801025c:	f043 0220 	orr.w	r2, r3, #32
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801026c:	2b00      	cmp	r3, #0
 801026e:	f000 8266 	beq.w	801073e <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010276:	f003 0320 	and.w	r3, r3, #32
 801027a:	2b00      	cmp	r3, #0
 801027c:	d013      	beq.n	80102a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801027e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010282:	f003 0320 	and.w	r3, r3, #32
 8010286:	2b00      	cmp	r3, #0
 8010288:	d105      	bne.n	8010296 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801028a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801028e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8010292:	2b00      	cmp	r3, #0
 8010294:	d007      	beq.n	80102a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801029a:	2b00      	cmp	r3, #0
 801029c:	d003      	beq.n	80102a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80102a2:	6878      	ldr	r0, [r7, #4]
 80102a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80102ac:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	681b      	ldr	r3, [r3, #0]
 80102b4:	689b      	ldr	r3, [r3, #8]
 80102b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102ba:	2b40      	cmp	r3, #64	@ 0x40
 80102bc:	d005      	beq.n	80102ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80102be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80102c2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d054      	beq.n	8010374 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80102ca:	6878      	ldr	r0, [r7, #4]
 80102cc:	f000 ffa7 	bl	801121e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	681b      	ldr	r3, [r3, #0]
 80102d4:	689b      	ldr	r3, [r3, #8]
 80102d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80102da:	2b40      	cmp	r3, #64	@ 0x40
 80102dc:	d146      	bne.n	801036c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	681b      	ldr	r3, [r3, #0]
 80102e2:	3308      	adds	r3, #8
 80102e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80102ec:	e853 3f00 	ldrex	r3, [r3]
 80102f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80102f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80102f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80102fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	3308      	adds	r3, #8
 8010306:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 801030a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801030e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010312:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010316:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 801031a:	e841 2300 	strex	r3, r2, [r1]
 801031e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8010322:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010326:	2b00      	cmp	r3, #0
 8010328:	d1d9      	bne.n	80102de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010330:	2b00      	cmp	r3, #0
 8010332:	d017      	beq.n	8010364 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801033a:	4a15      	ldr	r2, [pc, #84]	@ (8010390 <HAL_UART_IRQHandler+0x2c0>)
 801033c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010344:	4618      	mov	r0, r3
 8010346:	f7fc f909 	bl	800c55c <HAL_DMA_Abort_IT>
 801034a:	4603      	mov	r3, r0
 801034c:	2b00      	cmp	r3, #0
 801034e:	d019      	beq.n	8010384 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801035e:	4610      	mov	r0, r2
 8010360:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010362:	e00f      	b.n	8010384 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f9ff 	bl	8010768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801036a:	e00b      	b.n	8010384 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f000 f9fb 	bl	8010768 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010372:	e007      	b.n	8010384 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010374:	6878      	ldr	r0, [r7, #4]
 8010376:	f000 f9f7 	bl	8010768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	2200      	movs	r2, #0
 801037e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8010382:	e1dc      	b.n	801073e <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010384:	bf00      	nop
    return;
 8010386:	e1da      	b.n	801073e <HAL_UART_IRQHandler+0x66e>
 8010388:	10000001 	.word	0x10000001
 801038c:	04000120 	.word	0x04000120
 8010390:	08011421 	.word	0x08011421

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010398:	2b01      	cmp	r3, #1
 801039a:	f040 8170 	bne.w	801067e <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801039e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80103a2:	f003 0310 	and.w	r3, r3, #16
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	f000 8169 	beq.w	801067e <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80103ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80103b0:	f003 0310 	and.w	r3, r3, #16
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f000 8162 	beq.w	801067e <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2210      	movs	r2, #16
 80103c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80103cc:	2b40      	cmp	r3, #64	@ 0x40
 80103ce:	f040 80d8 	bne.w	8010582 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80103e0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	f000 80af 	beq.w	8010548 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80103f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80103f4:	429a      	cmp	r2, r3
 80103f6:	f080 80a7 	bcs.w	8010548 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010400:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801040a:	681b      	ldr	r3, [r3, #0]
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f003 0320 	and.w	r3, r3, #32
 8010412:	2b00      	cmp	r3, #0
 8010414:	f040 8087 	bne.w	8010526 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010420:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8010424:	e853 3f00 	ldrex	r3, [r3]
 8010428:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 801042c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010430:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010434:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	461a      	mov	r2, r3
 801043e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8010442:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8010446:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801044e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801045a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801045e:	2b00      	cmp	r3, #0
 8010460:	d1da      	bne.n	8010418 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	3308      	adds	r3, #8
 8010468:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801046a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801046c:	e853 3f00 	ldrex	r3, [r3]
 8010470:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8010472:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8010474:	f023 0301 	bic.w	r3, r3, #1
 8010478:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	3308      	adds	r3, #8
 8010482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8010486:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801048a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801048c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801048e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8010492:	e841 2300 	strex	r3, r2, [r1]
 8010496:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8010498:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801049a:	2b00      	cmp	r3, #0
 801049c:	d1e1      	bne.n	8010462 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	3308      	adds	r3, #8
 80104a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80104a8:	e853 3f00 	ldrex	r3, [r3]
 80104ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80104ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80104b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	3308      	adds	r3, #8
 80104be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80104c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80104c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80104c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80104ca:	e841 2300 	strex	r3, r2, [r1]
 80104ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80104d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	d1e3      	bne.n	801049e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	2220      	movs	r2, #32
 80104da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	2200      	movs	r2, #0
 80104e2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104ec:	e853 3f00 	ldrex	r3, [r3]
 80104f0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80104f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104f4:	f023 0310 	bic.w	r3, r3, #16
 80104f8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	461a      	mov	r2, r3
 8010502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8010506:	65bb      	str	r3, [r7, #88]	@ 0x58
 8010508:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801050a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801050c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801050e:	e841 2300 	strex	r3, r2, [r1]
 8010512:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8010514:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1e4      	bne.n	80104e4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010520:	4618      	mov	r0, r3
 8010522:	f7fb ffbc 	bl	800c49e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	2202      	movs	r2, #2
 801052a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8010538:	b29b      	uxth	r3, r3
 801053a:	1ad3      	subs	r3, r2, r3
 801053c:	b29b      	uxth	r3, r3
 801053e:	4619      	mov	r1, r3
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 f91b 	bl	801077c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8010546:	e0fc      	b.n	8010742 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801054e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010552:	429a      	cmp	r2, r3
 8010554:	f040 80f5 	bne.w	8010742 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801055e:	681b      	ldr	r3, [r3, #0]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f003 0320 	and.w	r3, r3, #32
 8010566:	2b20      	cmp	r3, #32
 8010568:	f040 80eb 	bne.w	8010742 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2202      	movs	r2, #2
 8010570:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8010578:	4619      	mov	r1, r3
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f000 f8fe 	bl	801077c <HAL_UARTEx_RxEventCallback>
      return;
 8010580:	e0df      	b.n	8010742 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801058e:	b29b      	uxth	r3, r3
 8010590:	1ad3      	subs	r3, r2, r3
 8010592:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801059c:	b29b      	uxth	r3, r3
 801059e:	2b00      	cmp	r3, #0
 80105a0:	f000 80d1 	beq.w	8010746 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 80105a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f000 80cc 	beq.w	8010746 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105b6:	e853 3f00 	ldrex	r3, [r3]
 80105ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80105bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80105be:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80105c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	461a      	mov	r2, r3
 80105cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80105d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80105d2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80105d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80105d8:	e841 2300 	strex	r3, r2, [r1]
 80105dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80105de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d1e4      	bne.n	80105ae <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	3308      	adds	r3, #8
 80105ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80105ee:	e853 3f00 	ldrex	r3, [r3]
 80105f2:	623b      	str	r3, [r7, #32]
   return(result);
 80105f4:	6a3b      	ldr	r3, [r7, #32]
 80105f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80105fa:	f023 0301 	bic.w	r3, r3, #1
 80105fe:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	3308      	adds	r3, #8
 8010608:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801060c:	633a      	str	r2, [r7, #48]	@ 0x30
 801060e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010610:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010612:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010614:	e841 2300 	strex	r3, r2, [r1]
 8010618:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801061a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1e1      	bne.n	80105e4 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	2220      	movs	r2, #32
 8010624:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	2200      	movs	r2, #0
 801062c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	2200      	movs	r2, #0
 8010632:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	e853 3f00 	ldrex	r3, [r3]
 8010640:	60fb      	str	r3, [r7, #12]
   return(result);
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f023 0310 	bic.w	r3, r3, #16
 8010648:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	681b      	ldr	r3, [r3, #0]
 8010650:	461a      	mov	r2, r3
 8010652:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8010656:	61fb      	str	r3, [r7, #28]
 8010658:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065a:	69b9      	ldr	r1, [r7, #24]
 801065c:	69fa      	ldr	r2, [r7, #28]
 801065e:	e841 2300 	strex	r3, r2, [r1]
 8010662:	617b      	str	r3, [r7, #20]
   return(result);
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	2b00      	cmp	r3, #0
 8010668:	d1e4      	bne.n	8010634 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	2202      	movs	r2, #2
 801066e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010670:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010674:	4619      	mov	r1, r3
 8010676:	6878      	ldr	r0, [r7, #4]
 8010678:	f000 f880 	bl	801077c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801067c:	e063      	b.n	8010746 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801067e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010682:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d00e      	beq.n	80106a8 <HAL_UART_IRQHandler+0x5d8>
 801068a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801068e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8010692:	2b00      	cmp	r3, #0
 8010694:	d008      	beq.n	80106a8 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801069e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f001 fc1b 	bl	8011edc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106a6:	e051      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80106a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d014      	beq.n	80106de <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80106b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d105      	bne.n	80106cc <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80106c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80106c4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d008      	beq.n	80106de <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d03a      	beq.n	801074a <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	4798      	blx	r3
    }
    return;
 80106dc:	e035      	b.n	801074a <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80106de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80106e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d009      	beq.n	80106fe <HAL_UART_IRQHandler+0x62e>
 80106ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80106ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d003      	beq.n	80106fe <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80106f6:	6878      	ldr	r0, [r7, #4]
 80106f8:	f000 fea4 	bl	8011444 <UART_EndTransmit_IT>
    return;
 80106fc:	e026      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80106fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010702:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8010706:	2b00      	cmp	r3, #0
 8010708:	d009      	beq.n	801071e <HAL_UART_IRQHandler+0x64e>
 801070a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801070e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8010712:	2b00      	cmp	r3, #0
 8010714:	d003      	beq.n	801071e <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	f001 fbf4 	bl	8011f04 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801071c:	e016      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801071e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010722:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8010726:	2b00      	cmp	r3, #0
 8010728:	d010      	beq.n	801074c <HAL_UART_IRQHandler+0x67c>
 801072a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801072e:	2b00      	cmp	r3, #0
 8010730:	da0c      	bge.n	801074c <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f001 fbdc 	bl	8011ef0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010738:	e008      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
      return;
 801073a:	bf00      	nop
 801073c:	e006      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
    return;
 801073e:	bf00      	nop
 8010740:	e004      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
      return;
 8010742:	bf00      	nop
 8010744:	e002      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
      return;
 8010746:	bf00      	nop
 8010748:	e000      	b.n	801074c <HAL_UART_IRQHandler+0x67c>
    return;
 801074a:	bf00      	nop
  }
}
 801074c:	37e8      	adds	r7, #232	@ 0xe8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}
 8010752:	bf00      	nop

08010754 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010754:	b480      	push	{r7}
 8010756:	b083      	sub	sp, #12
 8010758:	af00      	add	r7, sp, #0
 801075a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801075c:	bf00      	nop
 801075e:	370c      	adds	r7, #12
 8010760:	46bd      	mov	sp, r7
 8010762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010766:	4770      	bx	lr

08010768 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010768:	b480      	push	{r7}
 801076a:	b083      	sub	sp, #12
 801076c:	af00      	add	r7, sp, #0
 801076e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010770:	bf00      	nop
 8010772:	370c      	adds	r7, #12
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801077c:	b480      	push	{r7}
 801077e:	b083      	sub	sp, #12
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	460b      	mov	r3, r1
 8010786:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010788:	bf00      	nop
 801078a:	370c      	adds	r7, #12
 801078c:	46bd      	mov	sp, r7
 801078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010792:	4770      	bx	lr

08010794 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010794:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010798:	b08c      	sub	sp, #48	@ 0x30
 801079a:	af00      	add	r7, sp, #0
 801079c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801079e:	2300      	movs	r3, #0
 80107a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	689a      	ldr	r2, [r3, #8]
 80107a8:	697b      	ldr	r3, [r7, #20]
 80107aa:	691b      	ldr	r3, [r3, #16]
 80107ac:	431a      	orrs	r2, r3
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	695b      	ldr	r3, [r3, #20]
 80107b2:	431a      	orrs	r2, r3
 80107b4:	697b      	ldr	r3, [r7, #20]
 80107b6:	69db      	ldr	r3, [r3, #28]
 80107b8:	4313      	orrs	r3, r2
 80107ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	681a      	ldr	r2, [r3, #0]
 80107c2:	4baf      	ldr	r3, [pc, #700]	@ (8010a80 <UART_SetConfig+0x2ec>)
 80107c4:	4013      	ands	r3, r2
 80107c6:	697a      	ldr	r2, [r7, #20]
 80107c8:	6812      	ldr	r2, [r2, #0]
 80107ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80107cc:	430b      	orrs	r3, r1
 80107ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	685b      	ldr	r3, [r3, #4]
 80107d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	68da      	ldr	r2, [r3, #12]
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	430a      	orrs	r2, r1
 80107e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80107e6:	697b      	ldr	r3, [r7, #20]
 80107e8:	699b      	ldr	r3, [r3, #24]
 80107ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	681b      	ldr	r3, [r3, #0]
 80107f0:	4aa4      	ldr	r2, [pc, #656]	@ (8010a84 <UART_SetConfig+0x2f0>)
 80107f2:	4293      	cmp	r3, r2
 80107f4:	d004      	beq.n	8010800 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80107f6:	697b      	ldr	r3, [r7, #20]
 80107f8:	6a1b      	ldr	r3, [r3, #32]
 80107fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80107fc:	4313      	orrs	r3, r2
 80107fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010800:	697b      	ldr	r3, [r7, #20]
 8010802:	681b      	ldr	r3, [r3, #0]
 8010804:	689b      	ldr	r3, [r3, #8]
 8010806:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801080a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801080e:	697a      	ldr	r2, [r7, #20]
 8010810:	6812      	ldr	r2, [r2, #0]
 8010812:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010814:	430b      	orrs	r3, r1
 8010816:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8010818:	697b      	ldr	r3, [r7, #20]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801081e:	f023 010f 	bic.w	r1, r3, #15
 8010822:	697b      	ldr	r3, [r7, #20]
 8010824:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	430a      	orrs	r2, r1
 801082c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	681b      	ldr	r3, [r3, #0]
 8010832:	4a95      	ldr	r2, [pc, #596]	@ (8010a88 <UART_SetConfig+0x2f4>)
 8010834:	4293      	cmp	r3, r2
 8010836:	d125      	bne.n	8010884 <UART_SetConfig+0xf0>
 8010838:	2003      	movs	r0, #3
 801083a:	f7ff fb0d 	bl	800fe58 <LL_RCC_GetUSARTClockSource>
 801083e:	4603      	mov	r3, r0
 8010840:	2b03      	cmp	r3, #3
 8010842:	d81b      	bhi.n	801087c <UART_SetConfig+0xe8>
 8010844:	a201      	add	r2, pc, #4	@ (adr r2, 801084c <UART_SetConfig+0xb8>)
 8010846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801084a:	bf00      	nop
 801084c:	0801085d 	.word	0x0801085d
 8010850:	0801086d 	.word	0x0801086d
 8010854:	08010865 	.word	0x08010865
 8010858:	08010875 	.word	0x08010875
 801085c:	2301      	movs	r3, #1
 801085e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010862:	e042      	b.n	80108ea <UART_SetConfig+0x156>
 8010864:	2302      	movs	r3, #2
 8010866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801086a:	e03e      	b.n	80108ea <UART_SetConfig+0x156>
 801086c:	2304      	movs	r3, #4
 801086e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010872:	e03a      	b.n	80108ea <UART_SetConfig+0x156>
 8010874:	2308      	movs	r3, #8
 8010876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801087a:	e036      	b.n	80108ea <UART_SetConfig+0x156>
 801087c:	2310      	movs	r3, #16
 801087e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8010882:	e032      	b.n	80108ea <UART_SetConfig+0x156>
 8010884:	697b      	ldr	r3, [r7, #20]
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	4a7e      	ldr	r2, [pc, #504]	@ (8010a84 <UART_SetConfig+0x2f0>)
 801088a:	4293      	cmp	r3, r2
 801088c:	d12a      	bne.n	80108e4 <UART_SetConfig+0x150>
 801088e:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 8010892:	f7ff faf1 	bl	800fe78 <LL_RCC_GetLPUARTClockSource>
 8010896:	4603      	mov	r3, r0
 8010898:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801089c:	d01a      	beq.n	80108d4 <UART_SetConfig+0x140>
 801089e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80108a2:	d81b      	bhi.n	80108dc <UART_SetConfig+0x148>
 80108a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108a8:	d00c      	beq.n	80108c4 <UART_SetConfig+0x130>
 80108aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80108ae:	d815      	bhi.n	80108dc <UART_SetConfig+0x148>
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d003      	beq.n	80108bc <UART_SetConfig+0x128>
 80108b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80108b8:	d008      	beq.n	80108cc <UART_SetConfig+0x138>
 80108ba:	e00f      	b.n	80108dc <UART_SetConfig+0x148>
 80108bc:	2300      	movs	r3, #0
 80108be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108c2:	e012      	b.n	80108ea <UART_SetConfig+0x156>
 80108c4:	2302      	movs	r3, #2
 80108c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108ca:	e00e      	b.n	80108ea <UART_SetConfig+0x156>
 80108cc:	2304      	movs	r3, #4
 80108ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108d2:	e00a      	b.n	80108ea <UART_SetConfig+0x156>
 80108d4:	2308      	movs	r3, #8
 80108d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108da:	e006      	b.n	80108ea <UART_SetConfig+0x156>
 80108dc:	2310      	movs	r3, #16
 80108de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80108e2:	e002      	b.n	80108ea <UART_SetConfig+0x156>
 80108e4:	2310      	movs	r3, #16
 80108e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80108ea:	697b      	ldr	r3, [r7, #20]
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	4a65      	ldr	r2, [pc, #404]	@ (8010a84 <UART_SetConfig+0x2f0>)
 80108f0:	4293      	cmp	r3, r2
 80108f2:	f040 8097 	bne.w	8010a24 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80108f6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80108fa:	2b08      	cmp	r3, #8
 80108fc:	d823      	bhi.n	8010946 <UART_SetConfig+0x1b2>
 80108fe:	a201      	add	r2, pc, #4	@ (adr r2, 8010904 <UART_SetConfig+0x170>)
 8010900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010904:	08010929 	.word	0x08010929
 8010908:	08010947 	.word	0x08010947
 801090c:	08010931 	.word	0x08010931
 8010910:	08010947 	.word	0x08010947
 8010914:	08010937 	.word	0x08010937
 8010918:	08010947 	.word	0x08010947
 801091c:	08010947 	.word	0x08010947
 8010920:	08010947 	.word	0x08010947
 8010924:	0801093f 	.word	0x0801093f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010928:	f7fd fd38 	bl	800e39c <HAL_RCC_GetPCLK1Freq>
 801092c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801092e:	e010      	b.n	8010952 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010930:	4b56      	ldr	r3, [pc, #344]	@ (8010a8c <UART_SetConfig+0x2f8>)
 8010932:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010934:	e00d      	b.n	8010952 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010936:	f7fd fcb1 	bl	800e29c <HAL_RCC_GetSysClockFreq>
 801093a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801093c:	e009      	b.n	8010952 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801093e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010942:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010944:	e005      	b.n	8010952 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8010946:	2300      	movs	r3, #0
 8010948:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 801094a:	2301      	movs	r3, #1
 801094c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010954:	2b00      	cmp	r3, #0
 8010956:	f000 812b 	beq.w	8010bb0 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801095a:	697b      	ldr	r3, [r7, #20]
 801095c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801095e:	4a4c      	ldr	r2, [pc, #304]	@ (8010a90 <UART_SetConfig+0x2fc>)
 8010960:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010964:	461a      	mov	r2, r3
 8010966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010968:	fbb3 f3f2 	udiv	r3, r3, r2
 801096c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801096e:	697b      	ldr	r3, [r7, #20]
 8010970:	685a      	ldr	r2, [r3, #4]
 8010972:	4613      	mov	r3, r2
 8010974:	005b      	lsls	r3, r3, #1
 8010976:	4413      	add	r3, r2
 8010978:	69ba      	ldr	r2, [r7, #24]
 801097a:	429a      	cmp	r2, r3
 801097c:	d305      	bcc.n	801098a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801097e:	697b      	ldr	r3, [r7, #20]
 8010980:	685b      	ldr	r3, [r3, #4]
 8010982:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010984:	69ba      	ldr	r2, [r7, #24]
 8010986:	429a      	cmp	r2, r3
 8010988:	d903      	bls.n	8010992 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 801098a:	2301      	movs	r3, #1
 801098c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010990:	e10e      	b.n	8010bb0 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010994:	2200      	movs	r2, #0
 8010996:	60bb      	str	r3, [r7, #8]
 8010998:	60fa      	str	r2, [r7, #12]
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801099e:	4a3c      	ldr	r2, [pc, #240]	@ (8010a90 <UART_SetConfig+0x2fc>)
 80109a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80109a4:	b29b      	uxth	r3, r3
 80109a6:	2200      	movs	r2, #0
 80109a8:	603b      	str	r3, [r7, #0]
 80109aa:	607a      	str	r2, [r7, #4]
 80109ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80109b0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80109b4:	f7f5 feb6 	bl	8006724 <__aeabi_uldivmod>
 80109b8:	4602      	mov	r2, r0
 80109ba:	460b      	mov	r3, r1
 80109bc:	4610      	mov	r0, r2
 80109be:	4619      	mov	r1, r3
 80109c0:	f04f 0200 	mov.w	r2, #0
 80109c4:	f04f 0300 	mov.w	r3, #0
 80109c8:	020b      	lsls	r3, r1, #8
 80109ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80109ce:	0202      	lsls	r2, r0, #8
 80109d0:	6979      	ldr	r1, [r7, #20]
 80109d2:	6849      	ldr	r1, [r1, #4]
 80109d4:	0849      	lsrs	r1, r1, #1
 80109d6:	2000      	movs	r0, #0
 80109d8:	460c      	mov	r4, r1
 80109da:	4605      	mov	r5, r0
 80109dc:	eb12 0804 	adds.w	r8, r2, r4
 80109e0:	eb43 0905 	adc.w	r9, r3, r5
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	685b      	ldr	r3, [r3, #4]
 80109e8:	2200      	movs	r2, #0
 80109ea:	469a      	mov	sl, r3
 80109ec:	4693      	mov	fp, r2
 80109ee:	4652      	mov	r2, sl
 80109f0:	465b      	mov	r3, fp
 80109f2:	4640      	mov	r0, r8
 80109f4:	4649      	mov	r1, r9
 80109f6:	f7f5 fe95 	bl	8006724 <__aeabi_uldivmod>
 80109fa:	4602      	mov	r2, r0
 80109fc:	460b      	mov	r3, r1
 80109fe:	4613      	mov	r3, r2
 8010a00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010a02:	6a3b      	ldr	r3, [r7, #32]
 8010a04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010a08:	d308      	bcc.n	8010a1c <UART_SetConfig+0x288>
 8010a0a:	6a3b      	ldr	r3, [r7, #32]
 8010a0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010a10:	d204      	bcs.n	8010a1c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	6a3a      	ldr	r2, [r7, #32]
 8010a18:	60da      	str	r2, [r3, #12]
 8010a1a:	e0c9      	b.n	8010bb0 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010a22:	e0c5      	b.n	8010bb0 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	69db      	ldr	r3, [r3, #28]
 8010a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010a2c:	d16d      	bne.n	8010b0a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 8010a2e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010a32:	3b01      	subs	r3, #1
 8010a34:	2b07      	cmp	r3, #7
 8010a36:	d82d      	bhi.n	8010a94 <UART_SetConfig+0x300>
 8010a38:	a201      	add	r2, pc, #4	@ (adr r2, 8010a40 <UART_SetConfig+0x2ac>)
 8010a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a3e:	bf00      	nop
 8010a40:	08010a61 	.word	0x08010a61
 8010a44:	08010a69 	.word	0x08010a69
 8010a48:	08010a95 	.word	0x08010a95
 8010a4c:	08010a6f 	.word	0x08010a6f
 8010a50:	08010a95 	.word	0x08010a95
 8010a54:	08010a95 	.word	0x08010a95
 8010a58:	08010a95 	.word	0x08010a95
 8010a5c:	08010a77 	.word	0x08010a77
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010a60:	f7fd fcb2 	bl	800e3c8 <HAL_RCC_GetPCLK2Freq>
 8010a64:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010a66:	e01b      	b.n	8010aa0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010a68:	4b08      	ldr	r3, [pc, #32]	@ (8010a8c <UART_SetConfig+0x2f8>)
 8010a6a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010a6c:	e018      	b.n	8010aa0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010a6e:	f7fd fc15 	bl	800e29c <HAL_RCC_GetSysClockFreq>
 8010a72:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010a74:	e014      	b.n	8010aa0 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010a7a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010a7c:	e010      	b.n	8010aa0 <UART_SetConfig+0x30c>
 8010a7e:	bf00      	nop
 8010a80:	cfff69f3 	.word	0xcfff69f3
 8010a84:	40008000 	.word	0x40008000
 8010a88:	40013800 	.word	0x40013800
 8010a8c:	00f42400 	.word	0x00f42400
 8010a90:	08018b6c 	.word	0x08018b6c
      default:
        pclk = 0U;
 8010a94:	2300      	movs	r3, #0
 8010a96:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010a98:	2301      	movs	r3, #1
 8010a9a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010a9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	f000 8084 	beq.w	8010bb0 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010aac:	4a4b      	ldr	r2, [pc, #300]	@ (8010bdc <UART_SetConfig+0x448>)
 8010aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ab6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010aba:	005a      	lsls	r2, r3, #1
 8010abc:	697b      	ldr	r3, [r7, #20]
 8010abe:	685b      	ldr	r3, [r3, #4]
 8010ac0:	085b      	lsrs	r3, r3, #1
 8010ac2:	441a      	add	r2, r3
 8010ac4:	697b      	ldr	r3, [r7, #20]
 8010ac6:	685b      	ldr	r3, [r3, #4]
 8010ac8:	fbb2 f3f3 	udiv	r3, r2, r3
 8010acc:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010ace:	6a3b      	ldr	r3, [r7, #32]
 8010ad0:	2b0f      	cmp	r3, #15
 8010ad2:	d916      	bls.n	8010b02 <UART_SetConfig+0x36e>
 8010ad4:	6a3b      	ldr	r3, [r7, #32]
 8010ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010ada:	d212      	bcs.n	8010b02 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010adc:	6a3b      	ldr	r3, [r7, #32]
 8010ade:	b29b      	uxth	r3, r3
 8010ae0:	f023 030f 	bic.w	r3, r3, #15
 8010ae4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010ae6:	6a3b      	ldr	r3, [r7, #32]
 8010ae8:	085b      	lsrs	r3, r3, #1
 8010aea:	b29b      	uxth	r3, r3
 8010aec:	f003 0307 	and.w	r3, r3, #7
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	8bfb      	ldrh	r3, [r7, #30]
 8010af4:	4313      	orrs	r3, r2
 8010af6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8010af8:	697b      	ldr	r3, [r7, #20]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	8bfa      	ldrh	r2, [r7, #30]
 8010afe:	60da      	str	r2, [r3, #12]
 8010b00:	e056      	b.n	8010bb0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010b02:	2301      	movs	r3, #1
 8010b04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8010b08:	e052      	b.n	8010bb0 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010b0a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8010b0e:	3b01      	subs	r3, #1
 8010b10:	2b07      	cmp	r3, #7
 8010b12:	d822      	bhi.n	8010b5a <UART_SetConfig+0x3c6>
 8010b14:	a201      	add	r2, pc, #4	@ (adr r2, 8010b1c <UART_SetConfig+0x388>)
 8010b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1a:	bf00      	nop
 8010b1c:	08010b3d 	.word	0x08010b3d
 8010b20:	08010b45 	.word	0x08010b45
 8010b24:	08010b5b 	.word	0x08010b5b
 8010b28:	08010b4b 	.word	0x08010b4b
 8010b2c:	08010b5b 	.word	0x08010b5b
 8010b30:	08010b5b 	.word	0x08010b5b
 8010b34:	08010b5b 	.word	0x08010b5b
 8010b38:	08010b53 	.word	0x08010b53
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b3c:	f7fd fc44 	bl	800e3c8 <HAL_RCC_GetPCLK2Freq>
 8010b40:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b42:	e010      	b.n	8010b66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010b44:	4b26      	ldr	r3, [pc, #152]	@ (8010be0 <UART_SetConfig+0x44c>)
 8010b46:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b48:	e00d      	b.n	8010b66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b4a:	f7fd fba7 	bl	800e29c <HAL_RCC_GetSysClockFreq>
 8010b4e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8010b50:	e009      	b.n	8010b66 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8010b56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8010b58:	e005      	b.n	8010b66 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 8010b5a:	2300      	movs	r3, #0
 8010b5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8010b5e:	2301      	movs	r3, #1
 8010b60:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8010b64:	bf00      	nop
    }

    if (pclk != 0U)
 8010b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d021      	beq.n	8010bb0 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010b6c:	697b      	ldr	r3, [r7, #20]
 8010b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010b70:	4a1a      	ldr	r2, [pc, #104]	@ (8010bdc <UART_SetConfig+0x448>)
 8010b72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010b76:	461a      	mov	r2, r3
 8010b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010b7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8010b7e:	697b      	ldr	r3, [r7, #20]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	085b      	lsrs	r3, r3, #1
 8010b84:	441a      	add	r2, r3
 8010b86:	697b      	ldr	r3, [r7, #20]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010b90:	6a3b      	ldr	r3, [r7, #32]
 8010b92:	2b0f      	cmp	r3, #15
 8010b94:	d909      	bls.n	8010baa <UART_SetConfig+0x416>
 8010b96:	6a3b      	ldr	r3, [r7, #32]
 8010b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b9c:	d205      	bcs.n	8010baa <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010b9e:	6a3b      	ldr	r3, [r7, #32]
 8010ba0:	b29a      	uxth	r2, r3
 8010ba2:	697b      	ldr	r3, [r7, #20]
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	60da      	str	r2, [r3, #12]
 8010ba8:	e002      	b.n	8010bb0 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 8010baa:	2301      	movs	r3, #1
 8010bac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8010bb0:	697b      	ldr	r3, [r7, #20]
 8010bb2:	2201      	movs	r2, #1
 8010bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	2201      	movs	r2, #1
 8010bbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8010bc6:	697b      	ldr	r3, [r7, #20]
 8010bc8:	2200      	movs	r2, #0
 8010bca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8010bcc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	3730      	adds	r7, #48	@ 0x30
 8010bd4:	46bd      	mov	sp, r7
 8010bd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010bda:	bf00      	nop
 8010bdc:	08018b6c 	.word	0x08018b6c
 8010be0:	00f42400 	.word	0x00f42400

08010be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010be4:	b480      	push	{r7}
 8010be6:	b083      	sub	sp, #12
 8010be8:	af00      	add	r7, sp, #0
 8010bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010bf0:	f003 0308 	and.w	r3, r3, #8
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d00a      	beq.n	8010c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	681b      	ldr	r3, [r3, #0]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	430a      	orrs	r2, r1
 8010c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c12:	f003 0301 	and.w	r3, r3, #1
 8010c16:	2b00      	cmp	r3, #0
 8010c18:	d00a      	beq.n	8010c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	681b      	ldr	r3, [r3, #0]
 8010c2c:	430a      	orrs	r2, r1
 8010c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c34:	f003 0302 	and.w	r3, r3, #2
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00a      	beq.n	8010c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	681b      	ldr	r3, [r3, #0]
 8010c40:	685b      	ldr	r3, [r3, #4]
 8010c42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	681b      	ldr	r3, [r3, #0]
 8010c4e:	430a      	orrs	r2, r1
 8010c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c56:	f003 0304 	and.w	r3, r3, #4
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d00a      	beq.n	8010c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	685b      	ldr	r3, [r3, #4]
 8010c64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	430a      	orrs	r2, r1
 8010c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c78:	f003 0310 	and.w	r3, r3, #16
 8010c7c:	2b00      	cmp	r3, #0
 8010c7e:	d00a      	beq.n	8010c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	689b      	ldr	r3, [r3, #8]
 8010c86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	430a      	orrs	r2, r1
 8010c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c9a:	f003 0320 	and.w	r3, r3, #32
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d00a      	beq.n	8010cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	681b      	ldr	r3, [r3, #0]
 8010ca6:	689b      	ldr	r3, [r3, #8]
 8010ca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	430a      	orrs	r2, r1
 8010cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010cc0:	2b00      	cmp	r3, #0
 8010cc2:	d01a      	beq.n	8010cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	681b      	ldr	r3, [r3, #0]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	681b      	ldr	r3, [r3, #0]
 8010cd6:	430a      	orrs	r2, r1
 8010cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8010ce2:	d10a      	bne.n	8010cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	685b      	ldr	r3, [r3, #4]
 8010cea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	430a      	orrs	r2, r1
 8010cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010cfa:	687b      	ldr	r3, [r7, #4]
 8010cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d00a      	beq.n	8010d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	681b      	ldr	r3, [r3, #0]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	681b      	ldr	r3, [r3, #0]
 8010d18:	430a      	orrs	r2, r1
 8010d1a:	605a      	str	r2, [r3, #4]
  }
}
 8010d1c:	bf00      	nop
 8010d1e:	370c      	adds	r7, #12
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr

08010d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b098      	sub	sp, #96	@ 0x60
 8010d2c:	af02      	add	r7, sp, #8
 8010d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	2200      	movs	r2, #0
 8010d34:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010d38:	f7fb f8ca 	bl	800bed0 <HAL_GetTick>
 8010d3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f003 0308 	and.w	r3, r3, #8
 8010d48:	2b08      	cmp	r3, #8
 8010d4a:	d12f      	bne.n	8010dac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010d50:	9300      	str	r3, [sp, #0]
 8010d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010d54:	2200      	movs	r2, #0
 8010d56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8010d5a:	6878      	ldr	r0, [r7, #4]
 8010d5c:	f000 f88e 	bl	8010e7c <UART_WaitOnFlagUntilTimeout>
 8010d60:	4603      	mov	r3, r0
 8010d62:	2b00      	cmp	r3, #0
 8010d64:	d022      	beq.n	8010dac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d6e:	e853 3f00 	ldrex	r3, [r3]
 8010d72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	461a      	mov	r2, r3
 8010d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010d8c:	e841 2300 	strex	r3, r2, [r1]
 8010d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d1e6      	bne.n	8010d66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2220      	movs	r2, #32
 8010d9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	2200      	movs	r2, #0
 8010da4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010da8:	2303      	movs	r3, #3
 8010daa:	e063      	b.n	8010e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f003 0304 	and.w	r3, r3, #4
 8010db6:	2b04      	cmp	r3, #4
 8010db8:	d149      	bne.n	8010e4e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010dba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8010dbe:	9300      	str	r3, [sp, #0]
 8010dc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f000 f857 	bl	8010e7c <UART_WaitOnFlagUntilTimeout>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d03c      	beq.n	8010e4e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ddc:	e853 3f00 	ldrex	r3, [r3]
 8010de0:	623b      	str	r3, [r7, #32]
   return(result);
 8010de2:	6a3b      	ldr	r3, [r7, #32]
 8010de4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010de8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	461a      	mov	r2, r3
 8010df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010df2:	633b      	str	r3, [r7, #48]	@ 0x30
 8010df4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010df8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010dfa:	e841 2300 	strex	r3, r2, [r1]
 8010dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010e02:	2b00      	cmp	r3, #0
 8010e04:	d1e6      	bne.n	8010dd4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	3308      	adds	r3, #8
 8010e0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010e0e:	693b      	ldr	r3, [r7, #16]
 8010e10:	e853 3f00 	ldrex	r3, [r3]
 8010e14:	60fb      	str	r3, [r7, #12]
   return(result);
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	f023 0301 	bic.w	r3, r3, #1
 8010e1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	3308      	adds	r3, #8
 8010e24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010e26:	61fa      	str	r2, [r7, #28]
 8010e28:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010e2a:	69b9      	ldr	r1, [r7, #24]
 8010e2c:	69fa      	ldr	r2, [r7, #28]
 8010e2e:	e841 2300 	strex	r3, r2, [r1]
 8010e32:	617b      	str	r3, [r7, #20]
   return(result);
 8010e34:	697b      	ldr	r3, [r7, #20]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d1e5      	bne.n	8010e06 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	2220      	movs	r2, #32
 8010e3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	2200      	movs	r2, #0
 8010e46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010e4a:	2303      	movs	r3, #3
 8010e4c:	e012      	b.n	8010e74 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	2220      	movs	r2, #32
 8010e52:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	2220      	movs	r2, #32
 8010e5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	2200      	movs	r2, #0
 8010e62:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	2200      	movs	r2, #0
 8010e68:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8010e6a:	687b      	ldr	r3, [r7, #4]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8010e72:	2300      	movs	r3, #0
}
 8010e74:	4618      	mov	r0, r3
 8010e76:	3758      	adds	r7, #88	@ 0x58
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}

08010e7c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010e7c:	b580      	push	{r7, lr}
 8010e7e:	b084      	sub	sp, #16
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	60f8      	str	r0, [r7, #12]
 8010e84:	60b9      	str	r1, [r7, #8]
 8010e86:	603b      	str	r3, [r7, #0]
 8010e88:	4613      	mov	r3, r2
 8010e8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010e8c:	e04f      	b.n	8010f2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010e8e:	69bb      	ldr	r3, [r7, #24]
 8010e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e94:	d04b      	beq.n	8010f2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010e96:	f7fb f81b 	bl	800bed0 <HAL_GetTick>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	1ad3      	subs	r3, r2, r3
 8010ea0:	69ba      	ldr	r2, [r7, #24]
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d302      	bcc.n	8010eac <UART_WaitOnFlagUntilTimeout+0x30>
 8010ea6:	69bb      	ldr	r3, [r7, #24]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d101      	bne.n	8010eb0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8010eac:	2303      	movs	r3, #3
 8010eae:	e04e      	b.n	8010f4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	f003 0304 	and.w	r3, r3, #4
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d037      	beq.n	8010f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ebe:	68bb      	ldr	r3, [r7, #8]
 8010ec0:	2b80      	cmp	r3, #128	@ 0x80
 8010ec2:	d034      	beq.n	8010f2e <UART_WaitOnFlagUntilTimeout+0xb2>
 8010ec4:	68bb      	ldr	r3, [r7, #8]
 8010ec6:	2b40      	cmp	r3, #64	@ 0x40
 8010ec8:	d031      	beq.n	8010f2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	69db      	ldr	r3, [r3, #28]
 8010ed0:	f003 0308 	and.w	r3, r3, #8
 8010ed4:	2b08      	cmp	r3, #8
 8010ed6:	d110      	bne.n	8010efa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	681b      	ldr	r3, [r3, #0]
 8010edc:	2208      	movs	r2, #8
 8010ede:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010ee0:	68f8      	ldr	r0, [r7, #12]
 8010ee2:	f000 f99c 	bl	801121e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2208      	movs	r2, #8
 8010eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e029      	b.n	8010f4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	681b      	ldr	r3, [r3, #0]
 8010efe:	69db      	ldr	r3, [r3, #28]
 8010f00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8010f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010f08:	d111      	bne.n	8010f2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	681b      	ldr	r3, [r3, #0]
 8010f0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8010f12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8010f14:	68f8      	ldr	r0, [r7, #12]
 8010f16:	f000 f982 	bl	801121e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	2220      	movs	r2, #32
 8010f1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	2200      	movs	r2, #0
 8010f26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8010f2a:	2303      	movs	r3, #3
 8010f2c:	e00f      	b.n	8010f4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	69da      	ldr	r2, [r3, #28]
 8010f34:	68bb      	ldr	r3, [r7, #8]
 8010f36:	4013      	ands	r3, r2
 8010f38:	68ba      	ldr	r2, [r7, #8]
 8010f3a:	429a      	cmp	r2, r3
 8010f3c:	bf0c      	ite	eq
 8010f3e:	2301      	moveq	r3, #1
 8010f40:	2300      	movne	r3, #0
 8010f42:	b2db      	uxtb	r3, r3
 8010f44:	461a      	mov	r2, r3
 8010f46:	79fb      	ldrb	r3, [r7, #7]
 8010f48:	429a      	cmp	r2, r3
 8010f4a:	d0a0      	beq.n	8010e8e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010f4c:	2300      	movs	r3, #0
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	3710      	adds	r7, #16
 8010f52:	46bd      	mov	sp, r7
 8010f54:	bd80      	pop	{r7, pc}
	...

08010f58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b0a3      	sub	sp, #140	@ 0x8c
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	4613      	mov	r3, r2
 8010f64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	68ba      	ldr	r2, [r7, #8]
 8010f6a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	88fa      	ldrh	r2, [r7, #6]
 8010f70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	88fa      	ldrh	r2, [r7, #6]
 8010f78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2200      	movs	r2, #0
 8010f80:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	689b      	ldr	r3, [r3, #8]
 8010f86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010f8a:	d10e      	bne.n	8010faa <UART_Start_Receive_IT+0x52>
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	691b      	ldr	r3, [r3, #16]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d105      	bne.n	8010fa0 <UART_Start_Receive_IT+0x48>
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8010f9a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010f9e:	e02d      	b.n	8010ffc <UART_Start_Receive_IT+0xa4>
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	22ff      	movs	r2, #255	@ 0xff
 8010fa4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010fa8:	e028      	b.n	8010ffc <UART_Start_Receive_IT+0xa4>
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	689b      	ldr	r3, [r3, #8]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d10d      	bne.n	8010fce <UART_Start_Receive_IT+0x76>
 8010fb2:	68fb      	ldr	r3, [r7, #12]
 8010fb4:	691b      	ldr	r3, [r3, #16]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d104      	bne.n	8010fc4 <UART_Start_Receive_IT+0x6c>
 8010fba:	68fb      	ldr	r3, [r7, #12]
 8010fbc:	22ff      	movs	r2, #255	@ 0xff
 8010fbe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010fc2:	e01b      	b.n	8010ffc <UART_Start_Receive_IT+0xa4>
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	227f      	movs	r2, #127	@ 0x7f
 8010fc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010fcc:	e016      	b.n	8010ffc <UART_Start_Receive_IT+0xa4>
 8010fce:	68fb      	ldr	r3, [r7, #12]
 8010fd0:	689b      	ldr	r3, [r3, #8]
 8010fd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010fd6:	d10d      	bne.n	8010ff4 <UART_Start_Receive_IT+0x9c>
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	691b      	ldr	r3, [r3, #16]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d104      	bne.n	8010fea <UART_Start_Receive_IT+0x92>
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	227f      	movs	r2, #127	@ 0x7f
 8010fe4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010fe8:	e008      	b.n	8010ffc <UART_Start_Receive_IT+0xa4>
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	223f      	movs	r2, #63	@ 0x3f
 8010fee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8010ff2:	e003      	b.n	8010ffc <UART_Start_Receive_IT+0xa4>
 8010ff4:	68fb      	ldr	r3, [r7, #12]
 8010ff6:	2200      	movs	r2, #0
 8010ff8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	2200      	movs	r2, #0
 8011000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	2222      	movs	r2, #34	@ 0x22
 8011008:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	3308      	adds	r3, #8
 8011012:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011016:	e853 3f00 	ldrex	r3, [r3]
 801101a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801101c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801101e:	f043 0301 	orr.w	r3, r3, #1
 8011022:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	3308      	adds	r3, #8
 801102c:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011030:	673a      	str	r2, [r7, #112]	@ 0x70
 8011032:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011034:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8011036:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8011038:	e841 2300 	strex	r3, r2, [r1]
 801103c:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801103e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1e3      	bne.n	801100c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8011048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801104c:	d14f      	bne.n	80110ee <UART_Start_Receive_IT+0x196>
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011054:	88fa      	ldrh	r2, [r7, #6]
 8011056:	429a      	cmp	r2, r3
 8011058:	d349      	bcc.n	80110ee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	689b      	ldr	r3, [r3, #8]
 801105e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011062:	d107      	bne.n	8011074 <UART_Start_Receive_IT+0x11c>
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	691b      	ldr	r3, [r3, #16]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d103      	bne.n	8011074 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	4a47      	ldr	r2, [pc, #284]	@ (801118c <UART_Start_Receive_IT+0x234>)
 8011070:	675a      	str	r2, [r3, #116]	@ 0x74
 8011072:	e002      	b.n	801107a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	4a46      	ldr	r2, [pc, #280]	@ (8011190 <UART_Start_Receive_IT+0x238>)
 8011078:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	691b      	ldr	r3, [r3, #16]
 801107e:	2b00      	cmp	r3, #0
 8011080:	d01a      	beq.n	80110b8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	681b      	ldr	r3, [r3, #0]
 8011086:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011088:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801108a:	e853 3f00 	ldrex	r3, [r3]
 801108e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011092:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011096:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	681b      	ldr	r3, [r3, #0]
 801109e:	461a      	mov	r2, r3
 80110a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80110a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80110a6:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110a8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80110aa:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80110ac:	e841 2300 	strex	r3, r2, [r1]
 80110b0:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80110b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d1e4      	bne.n	8011082 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	3308      	adds	r3, #8
 80110be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80110c2:	e853 3f00 	ldrex	r3, [r3]
 80110c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80110c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80110ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80110ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	3308      	adds	r3, #8
 80110d6:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80110d8:	64ba      	str	r2, [r7, #72]	@ 0x48
 80110da:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80110de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80110e0:	e841 2300 	strex	r3, r2, [r1]
 80110e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80110e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d1e5      	bne.n	80110b8 <UART_Start_Receive_IT+0x160>
 80110ec:	e046      	b.n	801117c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	689b      	ldr	r3, [r3, #8]
 80110f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80110f6:	d107      	bne.n	8011108 <UART_Start_Receive_IT+0x1b0>
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	691b      	ldr	r3, [r3, #16]
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d103      	bne.n	8011108 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	4a24      	ldr	r2, [pc, #144]	@ (8011194 <UART_Start_Receive_IT+0x23c>)
 8011104:	675a      	str	r2, [r3, #116]	@ 0x74
 8011106:	e002      	b.n	801110e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	4a23      	ldr	r2, [pc, #140]	@ (8011198 <UART_Start_Receive_IT+0x240>)
 801110c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	691b      	ldr	r3, [r3, #16]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d019      	beq.n	801114a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011116:	68fb      	ldr	r3, [r7, #12]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801111c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801111e:	e853 3f00 	ldrex	r3, [r3]
 8011122:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011126:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801112a:	677b      	str	r3, [r7, #116]	@ 0x74
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	461a      	mov	r2, r3
 8011132:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011134:	637b      	str	r3, [r7, #52]	@ 0x34
 8011136:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011138:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801113a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801113c:	e841 2300 	strex	r3, r2, [r1]
 8011140:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8011142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011144:	2b00      	cmp	r3, #0
 8011146:	d1e6      	bne.n	8011116 <UART_Start_Receive_IT+0x1be>
 8011148:	e018      	b.n	801117c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	681b      	ldr	r3, [r3, #0]
 801114e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011150:	697b      	ldr	r3, [r7, #20]
 8011152:	e853 3f00 	ldrex	r3, [r3]
 8011156:	613b      	str	r3, [r7, #16]
   return(result);
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	f043 0320 	orr.w	r3, r3, #32
 801115e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	681b      	ldr	r3, [r3, #0]
 8011164:	461a      	mov	r2, r3
 8011166:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011168:	623b      	str	r3, [r7, #32]
 801116a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801116c:	69f9      	ldr	r1, [r7, #28]
 801116e:	6a3a      	ldr	r2, [r7, #32]
 8011170:	e841 2300 	strex	r3, r2, [r1]
 8011174:	61bb      	str	r3, [r7, #24]
   return(result);
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d1e6      	bne.n	801114a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801117c:	2300      	movs	r3, #0
}
 801117e:	4618      	mov	r0, r3
 8011180:	378c      	adds	r7, #140	@ 0x8c
 8011182:	46bd      	mov	sp, r7
 8011184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011188:	4770      	bx	lr
 801118a:	bf00      	nop
 801118c:	08011b71 	.word	0x08011b71
 8011190:	0801180d 	.word	0x0801180d
 8011194:	08011655 	.word	0x08011655
 8011198:	0801149d 	.word	0x0801149d

0801119c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801119c:	b480      	push	{r7}
 801119e:	b08f      	sub	sp, #60	@ 0x3c
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111aa:	6a3b      	ldr	r3, [r7, #32]
 80111ac:	e853 3f00 	ldrex	r3, [r3]
 80111b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80111b2:	69fb      	ldr	r3, [r7, #28]
 80111b4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80111b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	461a      	mov	r2, r3
 80111c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80111c4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80111c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80111ca:	e841 2300 	strex	r3, r2, [r1]
 80111ce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80111d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d1e6      	bne.n	80111a4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	681b      	ldr	r3, [r3, #0]
 80111da:	3308      	adds	r3, #8
 80111dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	e853 3f00 	ldrex	r3, [r3]
 80111e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80111e6:	68bb      	ldr	r3, [r7, #8]
 80111e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80111ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	681b      	ldr	r3, [r3, #0]
 80111f2:	3308      	adds	r3, #8
 80111f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80111f6:	61ba      	str	r2, [r7, #24]
 80111f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80111fa:	6979      	ldr	r1, [r7, #20]
 80111fc:	69ba      	ldr	r2, [r7, #24]
 80111fe:	e841 2300 	strex	r3, r2, [r1]
 8011202:	613b      	str	r3, [r7, #16]
   return(result);
 8011204:	693b      	ldr	r3, [r7, #16]
 8011206:	2b00      	cmp	r3, #0
 8011208:	d1e5      	bne.n	80111d6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	2220      	movs	r2, #32
 801120e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8011212:	bf00      	nop
 8011214:	373c      	adds	r7, #60	@ 0x3c
 8011216:	46bd      	mov	sp, r7
 8011218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121c:	4770      	bx	lr

0801121e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801121e:	b480      	push	{r7}
 8011220:	b095      	sub	sp, #84	@ 0x54
 8011222:	af00      	add	r7, sp, #0
 8011224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801122c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801122e:	e853 3f00 	ldrex	r3, [r3]
 8011232:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011236:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801123a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	681b      	ldr	r3, [r3, #0]
 8011240:	461a      	mov	r2, r3
 8011242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011244:	643b      	str	r3, [r7, #64]	@ 0x40
 8011246:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011248:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801124a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801124c:	e841 2300 	strex	r3, r2, [r1]
 8011250:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011254:	2b00      	cmp	r3, #0
 8011256:	d1e6      	bne.n	8011226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	3308      	adds	r3, #8
 801125e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011260:	6a3b      	ldr	r3, [r7, #32]
 8011262:	e853 3f00 	ldrex	r3, [r3]
 8011266:	61fb      	str	r3, [r7, #28]
   return(result);
 8011268:	69fb      	ldr	r3, [r7, #28]
 801126a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801126e:	f023 0301 	bic.w	r3, r3, #1
 8011272:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	3308      	adds	r3, #8
 801127a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801127c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801127e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011280:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011282:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011284:	e841 2300 	strex	r3, r2, [r1]
 8011288:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801128c:	2b00      	cmp	r3, #0
 801128e:	d1e3      	bne.n	8011258 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011294:	2b01      	cmp	r3, #1
 8011296:	d118      	bne.n	80112ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	681b      	ldr	r3, [r3, #0]
 801129c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	e853 3f00 	ldrex	r3, [r3]
 80112a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80112a6:	68bb      	ldr	r3, [r7, #8]
 80112a8:	f023 0310 	bic.w	r3, r3, #16
 80112ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	461a      	mov	r2, r3
 80112b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80112b6:	61bb      	str	r3, [r7, #24]
 80112b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80112ba:	6979      	ldr	r1, [r7, #20]
 80112bc:	69ba      	ldr	r2, [r7, #24]
 80112be:	e841 2300 	strex	r3, r2, [r1]
 80112c2:	613b      	str	r3, [r7, #16]
   return(result);
 80112c4:	693b      	ldr	r3, [r7, #16]
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d1e6      	bne.n	8011298 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2220      	movs	r2, #32
 80112ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2200      	movs	r2, #0
 80112d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	2200      	movs	r2, #0
 80112dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80112de:	bf00      	nop
 80112e0:	3754      	adds	r7, #84	@ 0x54
 80112e2:	46bd      	mov	sp, r7
 80112e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e8:	4770      	bx	lr

080112ea <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b090      	sub	sp, #64	@ 0x40
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112f6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	f003 0320 	and.w	r3, r3, #32
 8011302:	2b00      	cmp	r3, #0
 8011304:	d137      	bne.n	8011376 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8011306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011308:	2200      	movs	r2, #0
 801130a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801130e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3308      	adds	r3, #8
 8011314:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011318:	e853 3f00 	ldrex	r3, [r3]
 801131c:	623b      	str	r3, [r7, #32]
   return(result);
 801131e:	6a3b      	ldr	r3, [r7, #32]
 8011320:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8011324:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	3308      	adds	r3, #8
 801132c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801132e:	633a      	str	r2, [r7, #48]	@ 0x30
 8011330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011336:	e841 2300 	strex	r3, r2, [r1]
 801133a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801133c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801133e:	2b00      	cmp	r3, #0
 8011340:	d1e5      	bne.n	801130e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	e853 3f00 	ldrex	r3, [r3]
 801134e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011356:	637b      	str	r3, [r7, #52]	@ 0x34
 8011358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801135a:	681b      	ldr	r3, [r3, #0]
 801135c:	461a      	mov	r2, r3
 801135e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011360:	61fb      	str	r3, [r7, #28]
 8011362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011364:	69b9      	ldr	r1, [r7, #24]
 8011366:	69fa      	ldr	r2, [r7, #28]
 8011368:	e841 2300 	strex	r3, r2, [r1]
 801136c:	617b      	str	r3, [r7, #20]
   return(result);
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d1e6      	bne.n	8011342 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011374:	e002      	b.n	801137c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8011376:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011378:	f7f6 ff04 	bl	8008184 <HAL_UART_TxCpltCallback>
}
 801137c:	bf00      	nop
 801137e:	3740      	adds	r7, #64	@ 0x40
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	b084      	sub	sp, #16
 8011388:	af00      	add	r7, sp, #0
 801138a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801138c:	687b      	ldr	r3, [r7, #4]
 801138e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011390:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011392:	68f8      	ldr	r0, [r7, #12]
 8011394:	f7ff f9de 	bl	8010754 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011398:	bf00      	nop
 801139a:	3710      	adds	r7, #16
 801139c:	46bd      	mov	sp, r7
 801139e:	bd80      	pop	{r7, pc}

080113a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b086      	sub	sp, #24
 80113a4:	af00      	add	r7, sp, #0
 80113a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80113ae:	697b      	ldr	r3, [r7, #20]
 80113b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80113b4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80113b6:	697b      	ldr	r3, [r7, #20]
 80113b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80113bc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80113be:	697b      	ldr	r3, [r7, #20]
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	689b      	ldr	r3, [r3, #8]
 80113c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80113c8:	2b80      	cmp	r3, #128	@ 0x80
 80113ca:	d109      	bne.n	80113e0 <UART_DMAError+0x40>
 80113cc:	693b      	ldr	r3, [r7, #16]
 80113ce:	2b21      	cmp	r3, #33	@ 0x21
 80113d0:	d106      	bne.n	80113e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80113d2:	697b      	ldr	r3, [r7, #20]
 80113d4:	2200      	movs	r2, #0
 80113d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80113da:	6978      	ldr	r0, [r7, #20]
 80113dc:	f7ff fede 	bl	801119c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	689b      	ldr	r3, [r3, #8]
 80113e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113ea:	2b40      	cmp	r3, #64	@ 0x40
 80113ec:	d109      	bne.n	8011402 <UART_DMAError+0x62>
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	2b22      	cmp	r3, #34	@ 0x22
 80113f2:	d106      	bne.n	8011402 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	2200      	movs	r2, #0
 80113f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 80113fc:	6978      	ldr	r0, [r7, #20]
 80113fe:	f7ff ff0e 	bl	801121e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011402:	697b      	ldr	r3, [r7, #20]
 8011404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011408:	f043 0210 	orr.w	r2, r3, #16
 801140c:	697b      	ldr	r3, [r7, #20]
 801140e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011412:	6978      	ldr	r0, [r7, #20]
 8011414:	f7ff f9a8 	bl	8010768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011418:	bf00      	nop
 801141a:	3718      	adds	r7, #24
 801141c:	46bd      	mov	sp, r7
 801141e:	bd80      	pop	{r7, pc}

08011420 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b084      	sub	sp, #16
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801142c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	2200      	movs	r2, #0
 8011432:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f7ff f996 	bl	8010768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801143c:	bf00      	nop
 801143e:	3710      	adds	r7, #16
 8011440:	46bd      	mov	sp, r7
 8011442:	bd80      	pop	{r7, pc}

08011444 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b088      	sub	sp, #32
 8011448:	af00      	add	r7, sp, #0
 801144a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011452:	68fb      	ldr	r3, [r7, #12]
 8011454:	e853 3f00 	ldrex	r3, [r3]
 8011458:	60bb      	str	r3, [r7, #8]
   return(result);
 801145a:	68bb      	ldr	r3, [r7, #8]
 801145c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8011460:	61fb      	str	r3, [r7, #28]
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	681b      	ldr	r3, [r3, #0]
 8011466:	461a      	mov	r2, r3
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	61bb      	str	r3, [r7, #24]
 801146c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801146e:	6979      	ldr	r1, [r7, #20]
 8011470:	69ba      	ldr	r2, [r7, #24]
 8011472:	e841 2300 	strex	r3, r2, [r1]
 8011476:	613b      	str	r3, [r7, #16]
   return(result);
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d1e6      	bne.n	801144c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	2220      	movs	r2, #32
 8011482:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2200      	movs	r2, #0
 801148a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f7f6 fe79 	bl	8008184 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011492:	bf00      	nop
 8011494:	3720      	adds	r7, #32
 8011496:	46bd      	mov	sp, r7
 8011498:	bd80      	pop	{r7, pc}
	...

0801149c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801149c:	b580      	push	{r7, lr}
 801149e:	b09c      	sub	sp, #112	@ 0x70
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80114aa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80114b4:	2b22      	cmp	r3, #34	@ 0x22
 80114b6:	f040 80be 	bne.w	8011636 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114c0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80114c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80114c8:	b2d9      	uxtb	r1, r3
 80114ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80114ce:	b2da      	uxtb	r2, r3
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114d4:	400a      	ands	r2, r1
 80114d6:	b2d2      	uxtb	r2, r2
 80114d8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80114de:	1c5a      	adds	r2, r3, #1
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80114ea:	b29b      	uxth	r3, r3
 80114ec:	3b01      	subs	r3, #1
 80114ee:	b29a      	uxth	r2, r3
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80114fc:	b29b      	uxth	r3, r3
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f040 80a1 	bne.w	8011646 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801150a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801150c:	e853 3f00 	ldrex	r3, [r3]
 8011510:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011512:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011514:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8011518:	66bb      	str	r3, [r7, #104]	@ 0x68
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	461a      	mov	r2, r3
 8011520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011522:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011524:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011526:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011528:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801152a:	e841 2300 	strex	r3, r2, [r1]
 801152e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011530:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011532:	2b00      	cmp	r3, #0
 8011534:	d1e6      	bne.n	8011504 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	3308      	adds	r3, #8
 801153c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801153e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011540:	e853 3f00 	ldrex	r3, [r3]
 8011544:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011548:	f023 0301 	bic.w	r3, r3, #1
 801154c:	667b      	str	r3, [r7, #100]	@ 0x64
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	3308      	adds	r3, #8
 8011554:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8011556:	647a      	str	r2, [r7, #68]	@ 0x44
 8011558:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801155a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801155c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801155e:	e841 2300 	strex	r3, r2, [r1]
 8011562:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011566:	2b00      	cmp	r3, #0
 8011568:	d1e5      	bne.n	8011536 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	2220      	movs	r2, #32
 801156e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	2200      	movs	r2, #0
 8011576:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	2200      	movs	r2, #0
 801157c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	4a33      	ldr	r2, [pc, #204]	@ (8011650 <UART_RxISR_8BIT+0x1b4>)
 8011584:	4293      	cmp	r3, r2
 8011586:	d01f      	beq.n	80115c8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	681b      	ldr	r3, [r3, #0]
 801158c:	685b      	ldr	r3, [r3, #4]
 801158e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011592:	2b00      	cmp	r3, #0
 8011594:	d018      	beq.n	80115c8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	681b      	ldr	r3, [r3, #0]
 801159a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801159c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801159e:	e853 3f00 	ldrex	r3, [r3]
 80115a2:	623b      	str	r3, [r7, #32]
   return(result);
 80115a4:	6a3b      	ldr	r3, [r7, #32]
 80115a6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80115aa:	663b      	str	r3, [r7, #96]	@ 0x60
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	681b      	ldr	r3, [r3, #0]
 80115b0:	461a      	mov	r2, r3
 80115b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80115b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80115b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80115ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80115bc:	e841 2300 	strex	r3, r2, [r1]
 80115c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80115c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d1e6      	bne.n	8011596 <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80115cc:	2b01      	cmp	r3, #1
 80115ce:	d12e      	bne.n	801162e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	2200      	movs	r2, #0
 80115d4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80115d6:	687b      	ldr	r3, [r7, #4]
 80115d8:	681b      	ldr	r3, [r3, #0]
 80115da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115dc:	693b      	ldr	r3, [r7, #16]
 80115de:	e853 3f00 	ldrex	r3, [r3]
 80115e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	f023 0310 	bic.w	r3, r3, #16
 80115ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	461a      	mov	r2, r3
 80115f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80115f4:	61fb      	str	r3, [r7, #28]
 80115f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115f8:	69b9      	ldr	r1, [r7, #24]
 80115fa:	69fa      	ldr	r2, [r7, #28]
 80115fc:	e841 2300 	strex	r3, r2, [r1]
 8011600:	617b      	str	r3, [r7, #20]
   return(result);
 8011602:	697b      	ldr	r3, [r7, #20]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d1e6      	bne.n	80115d6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	69db      	ldr	r3, [r3, #28]
 801160e:	f003 0310 	and.w	r3, r3, #16
 8011612:	2b10      	cmp	r3, #16
 8011614:	d103      	bne.n	801161e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2210      	movs	r2, #16
 801161c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011624:	4619      	mov	r1, r3
 8011626:	6878      	ldr	r0, [r7, #4]
 8011628:	f7ff f8a8 	bl	801077c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801162c:	e00b      	b.n	8011646 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f7f6 fd8a 	bl	8008148 <HAL_UART_RxCpltCallback>
}
 8011634:	e007      	b.n	8011646 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	699a      	ldr	r2, [r3, #24]
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	681b      	ldr	r3, [r3, #0]
 8011640:	f042 0208 	orr.w	r2, r2, #8
 8011644:	619a      	str	r2, [r3, #24]
}
 8011646:	bf00      	nop
 8011648:	3770      	adds	r7, #112	@ 0x70
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	40008000 	.word	0x40008000

08011654 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b09c      	sub	sp, #112	@ 0x70
 8011658:	af00      	add	r7, sp, #0
 801165a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011662:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801166c:	2b22      	cmp	r3, #34	@ 0x22
 801166e:	f040 80be 	bne.w	80117ee <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011678:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011680:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011682:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8011686:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801168a:	4013      	ands	r3, r2
 801168c:	b29a      	uxth	r2, r3
 801168e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011690:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011696:	1c9a      	adds	r2, r3, #2
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116a2:	b29b      	uxth	r3, r3
 80116a4:	3b01      	subs	r3, #1
 80116a6:	b29a      	uxth	r2, r3
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80116b4:	b29b      	uxth	r3, r3
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	f040 80a1 	bne.w	80117fe <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80116c4:	e853 3f00 	ldrex	r3, [r3]
 80116c8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80116ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80116d0:	667b      	str	r3, [r7, #100]	@ 0x64
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	461a      	mov	r2, r3
 80116d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80116da:	657b      	str	r3, [r7, #84]	@ 0x54
 80116dc:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116de:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80116e0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80116e2:	e841 2300 	strex	r3, r2, [r1]
 80116e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80116e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d1e6      	bne.n	80116bc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	3308      	adds	r3, #8
 80116f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80116f8:	e853 3f00 	ldrex	r3, [r3]
 80116fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80116fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011700:	f023 0301 	bic.w	r3, r3, #1
 8011704:	663b      	str	r3, [r7, #96]	@ 0x60
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	3308      	adds	r3, #8
 801170c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801170e:	643a      	str	r2, [r7, #64]	@ 0x40
 8011710:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011712:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011714:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011716:	e841 2300 	strex	r3, r2, [r1]
 801171a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801171c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801171e:	2b00      	cmp	r3, #0
 8011720:	d1e5      	bne.n	80116ee <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2220      	movs	r2, #32
 8011726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	2200      	movs	r2, #0
 8011734:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	4a33      	ldr	r2, [pc, #204]	@ (8011808 <UART_RxISR_16BIT+0x1b4>)
 801173c:	4293      	cmp	r3, r2
 801173e:	d01f      	beq.n	8011780 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	685b      	ldr	r3, [r3, #4]
 8011746:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801174a:	2b00      	cmp	r3, #0
 801174c:	d018      	beq.n	8011780 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801174e:	687b      	ldr	r3, [r7, #4]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011754:	6a3b      	ldr	r3, [r7, #32]
 8011756:	e853 3f00 	ldrex	r3, [r3]
 801175a:	61fb      	str	r3, [r7, #28]
   return(result);
 801175c:	69fb      	ldr	r3, [r7, #28]
 801175e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011762:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	681b      	ldr	r3, [r3, #0]
 8011768:	461a      	mov	r2, r3
 801176a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801176c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801176e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011770:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011772:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011774:	e841 2300 	strex	r3, r2, [r1]
 8011778:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801177c:	2b00      	cmp	r3, #0
 801177e:	d1e6      	bne.n	801174e <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011784:	2b01      	cmp	r3, #1
 8011786:	d12e      	bne.n	80117e6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	2200      	movs	r2, #0
 801178c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	e853 3f00 	ldrex	r3, [r3]
 801179a:	60bb      	str	r3, [r7, #8]
   return(result);
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	f023 0310 	bic.w	r3, r3, #16
 80117a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	461a      	mov	r2, r3
 80117aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80117ac:	61bb      	str	r3, [r7, #24]
 80117ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117b0:	6979      	ldr	r1, [r7, #20]
 80117b2:	69ba      	ldr	r2, [r7, #24]
 80117b4:	e841 2300 	strex	r3, r2, [r1]
 80117b8:	613b      	str	r3, [r7, #16]
   return(result);
 80117ba:	693b      	ldr	r3, [r7, #16]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d1e6      	bne.n	801178e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	69db      	ldr	r3, [r3, #28]
 80117c6:	f003 0310 	and.w	r3, r3, #16
 80117ca:	2b10      	cmp	r3, #16
 80117cc:	d103      	bne.n	80117d6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	2210      	movs	r2, #16
 80117d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80117dc:	4619      	mov	r1, r3
 80117de:	6878      	ldr	r0, [r7, #4]
 80117e0:	f7fe ffcc 	bl	801077c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80117e4:	e00b      	b.n	80117fe <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80117e6:	6878      	ldr	r0, [r7, #4]
 80117e8:	f7f6 fcae 	bl	8008148 <HAL_UART_RxCpltCallback>
}
 80117ec:	e007      	b.n	80117fe <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	699a      	ldr	r2, [r3, #24]
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	f042 0208 	orr.w	r2, r2, #8
 80117fc:	619a      	str	r2, [r3, #24]
}
 80117fe:	bf00      	nop
 8011800:	3770      	adds	r7, #112	@ 0x70
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}
 8011806:	bf00      	nop
 8011808:	40008000 	.word	0x40008000

0801180c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801180c:	b580      	push	{r7, lr}
 801180e:	b0ac      	sub	sp, #176	@ 0xb0
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801181a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	69db      	ldr	r3, [r3, #28]
 8011824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	689b      	ldr	r3, [r3, #8]
 8011838:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011842:	2b22      	cmp	r3, #34	@ 0x22
 8011844:	f040 8183 	bne.w	8011b4e <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801184e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011852:	e126      	b.n	8011aa2 <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801185a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801185e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8011862:	b2d9      	uxtb	r1, r3
 8011864:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8011868:	b2da      	uxtb	r2, r3
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801186e:	400a      	ands	r2, r1
 8011870:	b2d2      	uxtb	r2, r2
 8011872:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011878:	1c5a      	adds	r2, r3, #1
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011884:	b29b      	uxth	r3, r3
 8011886:	3b01      	subs	r3, #1
 8011888:	b29a      	uxth	r2, r3
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	69db      	ldr	r3, [r3, #28]
 8011896:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801189a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801189e:	f003 0307 	and.w	r3, r3, #7
 80118a2:	2b00      	cmp	r3, #0
 80118a4:	d053      	beq.n	801194e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80118a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118aa:	f003 0301 	and.w	r3, r3, #1
 80118ae:	2b00      	cmp	r3, #0
 80118b0:	d011      	beq.n	80118d6 <UART_RxISR_8BIT_FIFOEN+0xca>
 80118b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80118b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d00b      	beq.n	80118d6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	2201      	movs	r2, #1
 80118c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118cc:	f043 0201 	orr.w	r2, r3, #1
 80118d0:	687b      	ldr	r3, [r7, #4]
 80118d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80118d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80118da:	f003 0302 	and.w	r3, r3, #2
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d011      	beq.n	8011906 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80118e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80118e6:	f003 0301 	and.w	r3, r3, #1
 80118ea:	2b00      	cmp	r3, #0
 80118ec:	d00b      	beq.n	8011906 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	681b      	ldr	r3, [r3, #0]
 80118f2:	2202      	movs	r2, #2
 80118f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118fc:	f043 0204 	orr.w	r2, r3, #4
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011906:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801190a:	f003 0304 	and.w	r3, r3, #4
 801190e:	2b00      	cmp	r3, #0
 8011910:	d011      	beq.n	8011936 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011916:	f003 0301 	and.w	r3, r3, #1
 801191a:	2b00      	cmp	r3, #0
 801191c:	d00b      	beq.n	8011936 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	2204      	movs	r2, #4
 8011924:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801192c:	f043 0202 	orr.w	r2, r3, #2
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801193c:	2b00      	cmp	r3, #0
 801193e:	d006      	beq.n	801194e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011940:	6878      	ldr	r0, [r7, #4]
 8011942:	f7fe ff11 	bl	8010768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2200      	movs	r2, #0
 801194a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011954:	b29b      	uxth	r3, r3
 8011956:	2b00      	cmp	r3, #0
 8011958:	f040 80a3 	bne.w	8011aa2 <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011964:	e853 3f00 	ldrex	r3, [r3]
 8011968:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801196a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801196c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011970:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	461a      	mov	r2, r3
 801197a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801197e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011980:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011982:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8011984:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8011986:	e841 2300 	strex	r3, r2, [r1]
 801198a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801198c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801198e:	2b00      	cmp	r3, #0
 8011990:	d1e4      	bne.n	801195c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	681b      	ldr	r3, [r3, #0]
 8011996:	3308      	adds	r3, #8
 8011998:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801199a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801199c:	e853 3f00 	ldrex	r3, [r3]
 80119a0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80119a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80119a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80119a8:	f023 0301 	bic.w	r3, r3, #1
 80119ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	3308      	adds	r3, #8
 80119b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80119ba:	66ba      	str	r2, [r7, #104]	@ 0x68
 80119bc:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119be:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80119c0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80119c2:	e841 2300 	strex	r3, r2, [r1]
 80119c6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80119c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d1e1      	bne.n	8011992 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	2220      	movs	r2, #32
 80119d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	2200      	movs	r2, #0
 80119da:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	2200      	movs	r2, #0
 80119e0:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80119e2:	687b      	ldr	r3, [r7, #4]
 80119e4:	681b      	ldr	r3, [r3, #0]
 80119e6:	4a60      	ldr	r2, [pc, #384]	@ (8011b68 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80119e8:	4293      	cmp	r3, r2
 80119ea:	d021      	beq.n	8011a30 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	685b      	ldr	r3, [r3, #4]
 80119f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d01a      	beq.n	8011a30 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80119fa:	687b      	ldr	r3, [r7, #4]
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a02:	e853 3f00 	ldrex	r3, [r3]
 8011a06:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8011a08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011a0a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011a0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	461a      	mov	r2, r3
 8011a18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011a1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a1e:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a20:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8011a22:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8011a24:	e841 2300 	strex	r3, r2, [r1]
 8011a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8011a2a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d1e4      	bne.n	80119fa <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011a34:	2b01      	cmp	r3, #1
 8011a36:	d130      	bne.n	8011a9a <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	681b      	ldr	r3, [r3, #0]
 8011a42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011a46:	e853 3f00 	ldrex	r3, [r3]
 8011a4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8011a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011a4e:	f023 0310 	bic.w	r3, r3, #16
 8011a52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8011a60:	643b      	str	r3, [r7, #64]	@ 0x40
 8011a62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8011a66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8011a68:	e841 2300 	strex	r3, r2, [r1]
 8011a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8011a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	d1e4      	bne.n	8011a3e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	69db      	ldr	r3, [r3, #28]
 8011a7a:	f003 0310 	and.w	r3, r3, #16
 8011a7e:	2b10      	cmp	r3, #16
 8011a80:	d103      	bne.n	8011a8a <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011a82:	687b      	ldr	r3, [r7, #4]
 8011a84:	681b      	ldr	r3, [r3, #0]
 8011a86:	2210      	movs	r2, #16
 8011a88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011a90:	4619      	mov	r1, r3
 8011a92:	6878      	ldr	r0, [r7, #4]
 8011a94:	f7fe fe72 	bl	801077c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8011a98:	e00e      	b.n	8011ab8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f7f6 fb54 	bl	8008148 <HAL_UART_RxCpltCallback>
        break;
 8011aa0:	e00a      	b.n	8011ab8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011aa2:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d006      	beq.n	8011ab8 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8011aaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011aae:	f003 0320 	and.w	r3, r3, #32
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	f47f aece 	bne.w	8011854 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011abe:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011ac2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d049      	beq.n	8011b5e <UART_RxISR_8BIT_FIFOEN+0x352>
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011ad0:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8011ad4:	429a      	cmp	r2, r3
 8011ad6:	d242      	bcs.n	8011b5e <UART_RxISR_8BIT_FIFOEN+0x352>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	3308      	adds	r3, #8
 8011ade:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ae0:	6a3b      	ldr	r3, [r7, #32]
 8011ae2:	e853 3f00 	ldrex	r3, [r3]
 8011ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8011ae8:	69fb      	ldr	r3, [r7, #28]
 8011aea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011aee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	681b      	ldr	r3, [r3, #0]
 8011af6:	3308      	adds	r3, #8
 8011af8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8011afc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8011afe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8011b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011b04:	e841 2300 	strex	r3, r2, [r1]
 8011b08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8011b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d1e3      	bne.n	8011ad8 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	4a16      	ldr	r2, [pc, #88]	@ (8011b6c <UART_RxISR_8BIT_FIFOEN+0x360>)
 8011b14:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	e853 3f00 	ldrex	r3, [r3]
 8011b22:	60bb      	str	r3, [r7, #8]
   return(result);
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	f043 0320 	orr.w	r3, r3, #32
 8011b2a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	461a      	mov	r2, r3
 8011b34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8011b38:	61bb      	str	r3, [r7, #24]
 8011b3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b3c:	6979      	ldr	r1, [r7, #20]
 8011b3e:	69ba      	ldr	r2, [r7, #24]
 8011b40:	e841 2300 	strex	r3, r2, [r1]
 8011b44:	613b      	str	r3, [r7, #16]
   return(result);
 8011b46:	693b      	ldr	r3, [r7, #16]
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d1e4      	bne.n	8011b16 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011b4c:	e007      	b.n	8011b5e <UART_RxISR_8BIT_FIFOEN+0x352>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	699a      	ldr	r2, [r3, #24]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	681b      	ldr	r3, [r3, #0]
 8011b58:	f042 0208 	orr.w	r2, r2, #8
 8011b5c:	619a      	str	r2, [r3, #24]
}
 8011b5e:	bf00      	nop
 8011b60:	37b0      	adds	r7, #176	@ 0xb0
 8011b62:	46bd      	mov	sp, r7
 8011b64:	bd80      	pop	{r7, pc}
 8011b66:	bf00      	nop
 8011b68:	40008000 	.word	0x40008000
 8011b6c:	0801149d 	.word	0x0801149d

08011b70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011b70:	b580      	push	{r7, lr}
 8011b72:	b0ae      	sub	sp, #184	@ 0xb8
 8011b74:	af00      	add	r7, sp, #0
 8011b76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8011b7e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	69db      	ldr	r3, [r3, #28]
 8011b88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	689b      	ldr	r3, [r3, #8]
 8011b9c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8011ba6:	2b22      	cmp	r3, #34	@ 0x22
 8011ba8:	f040 8187 	bne.w	8011eba <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011bb2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011bb6:	e12a      	b.n	8011e0e <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bbe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8011bca:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8011bce:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8011bd2:	4013      	ands	r3, r2
 8011bd4:	b29a      	uxth	r2, r3
 8011bd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8011bda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011be0:	1c9a      	adds	r2, r3, #2
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011bec:	b29b      	uxth	r3, r3
 8011bee:	3b01      	subs	r3, #1
 8011bf0:	b29a      	uxth	r2, r3
 8011bf2:	687b      	ldr	r3, [r7, #4]
 8011bf4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	69db      	ldr	r3, [r3, #28]
 8011bfe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011c02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c06:	f003 0307 	and.w	r3, r3, #7
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d053      	beq.n	8011cb6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011c0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c12:	f003 0301 	and.w	r3, r3, #1
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d011      	beq.n	8011c3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8011c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8011c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d00b      	beq.n	8011c3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c34:	f043 0201 	orr.w	r2, r3, #1
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c42:	f003 0302 	and.w	r3, r3, #2
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d011      	beq.n	8011c6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8011c4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011c4e:	f003 0301 	and.w	r3, r3, #1
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d00b      	beq.n	8011c6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	2202      	movs	r2, #2
 8011c5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c64:	f043 0204 	orr.w	r2, r3, #4
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011c6e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011c72:	f003 0304 	and.w	r3, r3, #4
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d011      	beq.n	8011c9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8011c7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8011c7e:	f003 0301 	and.w	r3, r3, #1
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d00b      	beq.n	8011c9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	2204      	movs	r2, #4
 8011c8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011c94:	f043 0202 	orr.w	r2, r3, #2
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d006      	beq.n	8011cb6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011ca8:	6878      	ldr	r0, [r7, #4]
 8011caa:	f7fe fd5d 	bl	8010768 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	2200      	movs	r2, #0
 8011cb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011cbc:	b29b      	uxth	r3, r3
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	f040 80a5 	bne.w	8011e0e <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011ccc:	e853 3f00 	ldrex	r3, [r3]
 8011cd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8011cd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011cd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8011cd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	681b      	ldr	r3, [r3, #0]
 8011ce0:	461a      	mov	r2, r3
 8011ce2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8011ce6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011cea:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8011cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8011cf2:	e841 2300 	strex	r3, r2, [r1]
 8011cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8011cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1e2      	bne.n	8011cc4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	3308      	adds	r3, #8
 8011d04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8011d08:	e853 3f00 	ldrex	r3, [r3]
 8011d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8011d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011d10:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011d14:	f023 0301 	bic.w	r3, r3, #1
 8011d18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8011d1c:	687b      	ldr	r3, [r7, #4]
 8011d1e:	681b      	ldr	r3, [r3, #0]
 8011d20:	3308      	adds	r3, #8
 8011d22:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8011d26:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8011d28:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d2a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8011d2c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8011d2e:	e841 2300 	strex	r3, r2, [r1]
 8011d32:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8011d34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1e1      	bne.n	8011cfe <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2220      	movs	r2, #32
 8011d3e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	2200      	movs	r2, #0
 8011d46:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	671a      	str	r2, [r3, #112]	@ 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d4e:	687b      	ldr	r3, [r7, #4]
 8011d50:	681b      	ldr	r3, [r3, #0]
 8011d52:	4a60      	ldr	r2, [pc, #384]	@ (8011ed4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8011d54:	4293      	cmp	r3, r2
 8011d56:	d021      	beq.n	8011d9c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	681b      	ldr	r3, [r3, #0]
 8011d5c:	685b      	ldr	r3, [r3, #4]
 8011d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8011d62:	2b00      	cmp	r3, #0
 8011d64:	d01a      	beq.n	8011d9c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	681b      	ldr	r3, [r3, #0]
 8011d6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011d6e:	e853 3f00 	ldrex	r3, [r3]
 8011d72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8011d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011d76:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8011d7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	681b      	ldr	r3, [r3, #0]
 8011d82:	461a      	mov	r2, r3
 8011d84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8011d88:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011d8a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d8c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8011d8e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8011d90:	e841 2300 	strex	r3, r2, [r1]
 8011d94:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8011d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d1e4      	bne.n	8011d66 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011da0:	2b01      	cmp	r3, #1
 8011da2:	d130      	bne.n	8011e06 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2200      	movs	r2, #0
 8011da8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011db2:	e853 3f00 	ldrex	r3, [r3]
 8011db6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8011db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011dba:	f023 0310 	bic.w	r3, r3, #16
 8011dbe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	461a      	mov	r2, r3
 8011dc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8011dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8011dce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8011dd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011dd4:	e841 2300 	strex	r3, r2, [r1]
 8011dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8011dda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d1e4      	bne.n	8011daa <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	69db      	ldr	r3, [r3, #28]
 8011de6:	f003 0310 	and.w	r3, r3, #16
 8011dea:	2b10      	cmp	r3, #16
 8011dec:	d103      	bne.n	8011df6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	681b      	ldr	r3, [r3, #0]
 8011df2:	2210      	movs	r2, #16
 8011df4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	6878      	ldr	r0, [r7, #4]
 8011e00:	f7fe fcbc 	bl	801077c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8011e04:	e00e      	b.n	8011e24 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 8011e06:	6878      	ldr	r0, [r7, #4]
 8011e08:	f7f6 f99e 	bl	8008148 <HAL_UART_RxCpltCallback>
        break;
 8011e0c:	e00a      	b.n	8011e24 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e0e:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d006      	beq.n	8011e24 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 8011e16:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8011e1a:	f003 0320 	and.w	r3, r3, #32
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	f47f aeca 	bne.w	8011bb8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8011e2a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8011e2e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d049      	beq.n	8011eca <UART_RxISR_16BIT_FIFOEN+0x35a>
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8011e3c:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d242      	bcs.n	8011eca <UART_RxISR_16BIT_FIFOEN+0x35a>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	681b      	ldr	r3, [r3, #0]
 8011e48:	3308      	adds	r3, #8
 8011e4a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011e4e:	e853 3f00 	ldrex	r3, [r3]
 8011e52:	623b      	str	r3, [r7, #32]
   return(result);
 8011e54:	6a3b      	ldr	r3, [r7, #32]
 8011e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8011e5a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	3308      	adds	r3, #8
 8011e64:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8011e68:	633a      	str	r2, [r7, #48]	@ 0x30
 8011e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011e70:	e841 2300 	strex	r3, r2, [r1]
 8011e74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8011e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d1e3      	bne.n	8011e44 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	4a16      	ldr	r2, [pc, #88]	@ (8011ed8 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8011e80:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	681b      	ldr	r3, [r3, #0]
 8011e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e88:	693b      	ldr	r3, [r7, #16]
 8011e8a:	e853 3f00 	ldrex	r3, [r3]
 8011e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e90:	68fb      	ldr	r3, [r7, #12]
 8011e92:	f043 0320 	orr.w	r3, r3, #32
 8011e96:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	461a      	mov	r2, r3
 8011ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8011ea4:	61fb      	str	r3, [r7, #28]
 8011ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ea8:	69b9      	ldr	r1, [r7, #24]
 8011eaa:	69fa      	ldr	r2, [r7, #28]
 8011eac:	e841 2300 	strex	r3, r2, [r1]
 8011eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8011eb2:	697b      	ldr	r3, [r7, #20]
 8011eb4:	2b00      	cmp	r3, #0
 8011eb6:	d1e4      	bne.n	8011e82 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011eb8:	e007      	b.n	8011eca <UART_RxISR_16BIT_FIFOEN+0x35a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	699a      	ldr	r2, [r3, #24]
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	681b      	ldr	r3, [r3, #0]
 8011ec4:	f042 0208 	orr.w	r2, r2, #8
 8011ec8:	619a      	str	r2, [r3, #24]
}
 8011eca:	bf00      	nop
 8011ecc:	37b8      	adds	r7, #184	@ 0xb8
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	40008000 	.word	0x40008000
 8011ed8:	08011655 	.word	0x08011655

08011edc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011edc:	b480      	push	{r7}
 8011ede:	b083      	sub	sp, #12
 8011ee0:	af00      	add	r7, sp, #0
 8011ee2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8011ee4:	bf00      	nop
 8011ee6:	370c      	adds	r7, #12
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr

08011ef0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b083      	sub	sp, #12
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8011ef8:	bf00      	nop
 8011efa:	370c      	adds	r7, #12
 8011efc:	46bd      	mov	sp, r7
 8011efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f02:	4770      	bx	lr

08011f04 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b083      	sub	sp, #12
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8011f0c:	bf00      	nop
 8011f0e:	370c      	adds	r7, #12
 8011f10:	46bd      	mov	sp, r7
 8011f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f16:	4770      	bx	lr

08011f18 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b085      	sub	sp, #20
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011f26:	2b01      	cmp	r3, #1
 8011f28:	d101      	bne.n	8011f2e <HAL_UARTEx_DisableFifoMode+0x16>
 8011f2a:	2302      	movs	r3, #2
 8011f2c:	e027      	b.n	8011f7e <HAL_UARTEx_DisableFifoMode+0x66>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	2201      	movs	r2, #1
 8011f32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	2224      	movs	r2, #36	@ 0x24
 8011f3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	681b      	ldr	r3, [r3, #0]
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	681a      	ldr	r2, [r3, #0]
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	f022 0201 	bic.w	r2, r2, #1
 8011f54:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8011f5c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2200      	movs	r2, #0
 8011f62:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	68fa      	ldr	r2, [r7, #12]
 8011f6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2220      	movs	r2, #32
 8011f70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2200      	movs	r2, #0
 8011f78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3714      	adds	r7, #20
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b084      	sub	sp, #16
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
 8011f92:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8011f9a:	2b01      	cmp	r3, #1
 8011f9c:	d101      	bne.n	8011fa2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011f9e:	2302      	movs	r3, #2
 8011fa0:	e02d      	b.n	8011ffe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	2224      	movs	r2, #36	@ 0x24
 8011fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	681b      	ldr	r3, [r3, #0]
 8011fbe:	681a      	ldr	r2, [r3, #0]
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	f022 0201 	bic.w	r2, r2, #1
 8011fc8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	689b      	ldr	r3, [r3, #8]
 8011fd0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	683a      	ldr	r2, [r7, #0]
 8011fda:	430a      	orrs	r2, r1
 8011fdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011fde:	6878      	ldr	r0, [r7, #4]
 8011fe0:	f000 f850 	bl	8012084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	68fa      	ldr	r2, [r7, #12]
 8011fea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	2220      	movs	r2, #32
 8011ff0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}

08012006 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012006:	b580      	push	{r7, lr}
 8012008:	b084      	sub	sp, #16
 801200a:	af00      	add	r7, sp, #0
 801200c:	6078      	str	r0, [r7, #4]
 801200e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8012016:	2b01      	cmp	r3, #1
 8012018:	d101      	bne.n	801201e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 801201a:	2302      	movs	r3, #2
 801201c:	e02d      	b.n	801207a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2201      	movs	r2, #1
 8012022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2224      	movs	r2, #36	@ 0x24
 801202a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	681b      	ldr	r3, [r3, #0]
 801203a:	681a      	ldr	r2, [r3, #0]
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	f022 0201 	bic.w	r2, r2, #1
 8012044:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	689b      	ldr	r3, [r3, #8]
 801204c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8012050:	687b      	ldr	r3, [r7, #4]
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	683a      	ldr	r2, [r7, #0]
 8012056:	430a      	orrs	r2, r1
 8012058:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801205a:	6878      	ldr	r0, [r7, #4]
 801205c:	f000 f812 	bl	8012084 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	68fa      	ldr	r2, [r7, #12]
 8012066:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	2220      	movs	r2, #32
 801206c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	2200      	movs	r2, #0
 8012074:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8012078:	2300      	movs	r3, #0
}
 801207a:	4618      	mov	r0, r3
 801207c:	3710      	adds	r7, #16
 801207e:	46bd      	mov	sp, r7
 8012080:	bd80      	pop	{r7, pc}
	...

08012084 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8012084:	b480      	push	{r7}
 8012086:	b085      	sub	sp, #20
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8012090:	2b00      	cmp	r3, #0
 8012092:	d108      	bne.n	80120a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2201      	movs	r2, #1
 8012098:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	2201      	movs	r2, #1
 80120a0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80120a4:	e031      	b.n	801210a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80120a6:	2308      	movs	r3, #8
 80120a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80120aa:	2308      	movs	r3, #8
 80120ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	681b      	ldr	r3, [r3, #0]
 80120b2:	689b      	ldr	r3, [r3, #8]
 80120b4:	0e5b      	lsrs	r3, r3, #25
 80120b6:	b2db      	uxtb	r3, r3
 80120b8:	f003 0307 	and.w	r3, r3, #7
 80120bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	689b      	ldr	r3, [r3, #8]
 80120c4:	0f5b      	lsrs	r3, r3, #29
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	f003 0307 	and.w	r3, r3, #7
 80120cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80120ce:	7bbb      	ldrb	r3, [r7, #14]
 80120d0:	7b3a      	ldrb	r2, [r7, #12]
 80120d2:	4911      	ldr	r1, [pc, #68]	@ (8012118 <UARTEx_SetNbDataToProcess+0x94>)
 80120d4:	5c8a      	ldrb	r2, [r1, r2]
 80120d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80120da:	7b3a      	ldrb	r2, [r7, #12]
 80120dc:	490f      	ldr	r1, [pc, #60]	@ (801211c <UARTEx_SetNbDataToProcess+0x98>)
 80120de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80120e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80120e4:	b29a      	uxth	r2, r3
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80120ec:	7bfb      	ldrb	r3, [r7, #15]
 80120ee:	7b7a      	ldrb	r2, [r7, #13]
 80120f0:	4909      	ldr	r1, [pc, #36]	@ (8012118 <UARTEx_SetNbDataToProcess+0x94>)
 80120f2:	5c8a      	ldrb	r2, [r1, r2]
 80120f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80120f8:	7b7a      	ldrb	r2, [r7, #13]
 80120fa:	4908      	ldr	r1, [pc, #32]	@ (801211c <UARTEx_SetNbDataToProcess+0x98>)
 80120fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80120fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8012102:	b29a      	uxth	r2, r3
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801210a:	bf00      	nop
 801210c:	3714      	adds	r7, #20
 801210e:	46bd      	mov	sp, r7
 8012110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012114:	4770      	bx	lr
 8012116:	bf00      	nop
 8012118:	08018b84 	.word	0x08018b84
 801211c:	08018b8c 	.word	0x08018b8c

08012120 <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 8012120:	b580      	push	{r7, lr}
 8012122:	b086      	sub	sp, #24
 8012124:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8012126:	1d3b      	adds	r3, r7, #4
 8012128:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	2200      	movs	r2, #0
 801212e:	2100      	movs	r1, #0
 8012130:	f64f 4070 	movw	r0, #64624	@ 0xfc70
 8012134:	f000 f920 	bl	8012378 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8012138:	697b      	ldr	r3, [r7, #20]
 801213a:	330b      	adds	r3, #11
 801213c:	78db      	ldrb	r3, [r3, #3]
}
 801213e:	4618      	mov	r0, r3
 8012140:	3718      	adds	r7, #24
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
	...

08012148 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8012148:	b480      	push	{r7}
 801214a:	b08b      	sub	sp, #44	@ 0x2c
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8012150:	2300      	movs	r3, #0
 8012152:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8012154:	2300      	movs	r3, #0
 8012156:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8012158:	2300      	movs	r3, #0
 801215a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 801215c:	2300      	movs	r3, #0
 801215e:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8012160:	2300      	movs	r3, #0
 8012162:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8012164:	2300      	movs	r3, #0
 8012166:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8012168:	2300      	movs	r3, #0
 801216a:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8012170:	4b4a      	ldr	r3, [pc, #296]	@ (801229c <SHCI_GetWirelessFwInfo+0x154>)
 8012172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012174:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012178:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 801217a:	693b      	ldr	r3, [r7, #16]
 801217c:	009b      	lsls	r3, r3, #2
 801217e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8012182:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 8012186:	681b      	ldr	r3, [r3, #0]
 8012188:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	4a44      	ldr	r2, [pc, #272]	@ (80122a0 <SHCI_GetWirelessFwInfo+0x158>)
 8012190:	4293      	cmp	r3, r2
 8012192:	d10f      	bne.n	80121b4 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	695b      	ldr	r3, [r3, #20]
 8012198:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	699b      	ldr	r3, [r3, #24]
 801219e:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 80121a0:	68bb      	ldr	r3, [r7, #8]
 80121a2:	69db      	ldr	r3, [r3, #28]
 80121a4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	68db      	ldr	r3, [r3, #12]
 80121aa:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	691b      	ldr	r3, [r3, #16]
 80121b0:	617b      	str	r3, [r7, #20]
 80121b2:	e01a      	b.n	80121ea <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	009b      	lsls	r3, r3, #2
 80121b8:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80121bc:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 80121c0:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 80121c2:	68fb      	ldr	r3, [r7, #12]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	691b      	ldr	r3, [r3, #16]
 80121c8:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 80121ca:	68fb      	ldr	r3, [r7, #12]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	695b      	ldr	r3, [r3, #20]
 80121d0:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	699b      	ldr	r3, [r3, #24]
 80121d8:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	681b      	ldr	r3, [r3, #0]
 80121de:	685b      	ldr	r3, [r3, #4]
 80121e0:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	689b      	ldr	r3, [r3, #8]
 80121e8:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 80121ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121ec:	0e1b      	lsrs	r3, r3, #24
 80121ee:	b2da      	uxtb	r2, r3
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 80121f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121f6:	0c1b      	lsrs	r3, r3, #16
 80121f8:	b2da      	uxtb	r2, r3
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 80121fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012200:	0a1b      	lsrs	r3, r3, #8
 8012202:	b2da      	uxtb	r2, r3
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8012208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801220a:	091b      	lsrs	r3, r3, #4
 801220c:	b2db      	uxtb	r3, r3
 801220e:	f003 030f 	and.w	r3, r3, #15
 8012212:	b2da      	uxtb	r2, r3
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8012218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801221a:	b2db      	uxtb	r3, r3
 801221c:	f003 030f 	and.w	r3, r3, #15
 8012220:	b2da      	uxtb	r2, r3
 8012222:	687b      	ldr	r3, [r7, #4]
 8012224:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012226:	6a3b      	ldr	r3, [r7, #32]
 8012228:	0e1b      	lsrs	r3, r3, #24
 801222a:	b2da      	uxtb	r2, r3
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8012230:	6a3b      	ldr	r3, [r7, #32]
 8012232:	0c1b      	lsrs	r3, r3, #16
 8012234:	b2da      	uxtb	r2, r3
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 801223a:	6a3b      	ldr	r3, [r7, #32]
 801223c:	0a1b      	lsrs	r3, r3, #8
 801223e:	b2da      	uxtb	r2, r3
 8012240:	687b      	ldr	r3, [r7, #4]
 8012242:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012244:	6a3b      	ldr	r3, [r7, #32]
 8012246:	b2da      	uxtb	r2, r3
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 801224c:	69fb      	ldr	r3, [r7, #28]
 801224e:	b2da      	uxtb	r2, r3
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8012254:	69bb      	ldr	r3, [r7, #24]
 8012256:	0e1b      	lsrs	r3, r3, #24
 8012258:	b2da      	uxtb	r2, r3
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 801225e:	69bb      	ldr	r3, [r7, #24]
 8012260:	0c1b      	lsrs	r3, r3, #16
 8012262:	b2da      	uxtb	r2, r3
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	0a1b      	lsrs	r3, r3, #8
 801226c:	b2da      	uxtb	r2, r3
 801226e:	687b      	ldr	r3, [r7, #4]
 8012270:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	0e1b      	lsrs	r3, r3, #24
 8012276:	b2da      	uxtb	r2, r3
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 801227c:	697b      	ldr	r3, [r7, #20]
 801227e:	0c1b      	lsrs	r3, r3, #16
 8012280:	b2da      	uxtb	r2, r3
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8012286:	697b      	ldr	r3, [r7, #20]
 8012288:	b2da      	uxtb	r2, r3
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 801228e:	2300      	movs	r3, #0
}
 8012290:	4618      	mov	r0, r3
 8012292:	372c      	adds	r7, #44	@ 0x2c
 8012294:	46bd      	mov	sp, r7
 8012296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801229a:	4770      	bx	lr
 801229c:	58004000 	.word	0x58004000
 80122a0:	a94656b9 	.word	0xa94656b9

080122a4 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 80122a4:	b580      	push	{r7, lr}
 80122a6:	b082      	sub	sp, #8
 80122a8:	af00      	add	r7, sp, #0
 80122aa:	6078      	str	r0, [r7, #4]
 80122ac:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 80122ae:	683b      	ldr	r3, [r7, #0]
 80122b0:	685b      	ldr	r3, [r3, #4]
 80122b2:	4a08      	ldr	r2, [pc, #32]	@ (80122d4 <shci_init+0x30>)
 80122b4:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 80122b6:	4a08      	ldr	r2, [pc, #32]	@ (80122d8 <shci_init+0x34>)
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 80122bc:	4806      	ldr	r0, [pc, #24]	@ (80122d8 <shci_init+0x34>)
 80122be:	f000 f915 	bl	80124ec <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 80122c2:	683b      	ldr	r3, [r7, #0]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	4618      	mov	r0, r3
 80122c8:	f000 f898 	bl	80123fc <TlInit>

  return;
 80122cc:	bf00      	nop
}
 80122ce:	3708      	adds	r7, #8
 80122d0:	46bd      	mov	sp, r7
 80122d2:	bd80      	pop	{r7, pc}
 80122d4:	200009d0 	.word	0x200009d0
 80122d8:	200009b0 	.word	0x200009b0

080122dc <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 80122dc:	b580      	push	{r7, lr}
 80122de:	b084      	sub	sp, #16
 80122e0:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80122e2:	4822      	ldr	r0, [pc, #136]	@ (801236c <shci_user_evt_proc+0x90>)
 80122e4:	f000 fc64 	bl	8012bb0 <LST_is_empty>
 80122e8:	4603      	mov	r3, r0
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d12b      	bne.n	8012346 <shci_user_evt_proc+0x6a>
 80122ee:	4b20      	ldr	r3, [pc, #128]	@ (8012370 <shci_user_evt_proc+0x94>)
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d027      	beq.n	8012346 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80122f6:	f107 030c 	add.w	r3, r7, #12
 80122fa:	4619      	mov	r1, r3
 80122fc:	481b      	ldr	r0, [pc, #108]	@ (801236c <shci_user_evt_proc+0x90>)
 80122fe:	f000 fce6 	bl	8012cce <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 8012302:	4b1c      	ldr	r3, [pc, #112]	@ (8012374 <shci_user_evt_proc+0x98>)
 8012304:	69db      	ldr	r3, [r3, #28]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d00c      	beq.n	8012324 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 801230a:	68fb      	ldr	r3, [r7, #12]
 801230c:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 801230e:	2301      	movs	r3, #1
 8012310:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 8012312:	4b18      	ldr	r3, [pc, #96]	@ (8012374 <shci_user_evt_proc+0x98>)
 8012314:	69db      	ldr	r3, [r3, #28]
 8012316:	1d3a      	adds	r2, r7, #4
 8012318:	4610      	mov	r0, r2
 801231a:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 801231c:	793a      	ldrb	r2, [r7, #4]
 801231e:	4b14      	ldr	r3, [pc, #80]	@ (8012370 <shci_user_evt_proc+0x94>)
 8012320:	701a      	strb	r2, [r3, #0]
 8012322:	e002      	b.n	801232a <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012324:	4b12      	ldr	r3, [pc, #72]	@ (8012370 <shci_user_evt_proc+0x94>)
 8012326:	2201      	movs	r2, #1
 8012328:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 801232a:	4b11      	ldr	r3, [pc, #68]	@ (8012370 <shci_user_evt_proc+0x94>)
 801232c:	781b      	ldrb	r3, [r3, #0]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d004      	beq.n	801233c <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	4618      	mov	r0, r3
 8012336:	f000 fa8b 	bl	8012850 <TL_MM_EvtDone>
 801233a:	e004      	b.n	8012346 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	4619      	mov	r1, r3
 8012340:	480a      	ldr	r0, [pc, #40]	@ (801236c <shci_user_evt_proc+0x90>)
 8012342:	f000 fc57 	bl	8012bf4 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8012346:	4809      	ldr	r0, [pc, #36]	@ (801236c <shci_user_evt_proc+0x90>)
 8012348:	f000 fc32 	bl	8012bb0 <LST_is_empty>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d107      	bne.n	8012362 <shci_user_evt_proc+0x86>
 8012352:	4b07      	ldr	r3, [pc, #28]	@ (8012370 <shci_user_evt_proc+0x94>)
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d003      	beq.n	8012362 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801235a:	4804      	ldr	r0, [pc, #16]	@ (801236c <shci_user_evt_proc+0x90>)
 801235c:	f7f4 ff9a 	bl	8007294 <shci_notify_asynch_evt>
  }


  return;
 8012360:	bf00      	nop
 8012362:	bf00      	nop
}
 8012364:	3710      	adds	r7, #16
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	20000110 	.word	0x20000110
 8012370:	20000120 	.word	0x20000120
 8012374:	200009b0 	.word	0x200009b0

08012378 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 8012378:	b580      	push	{r7, lr}
 801237a:	b084      	sub	sp, #16
 801237c:	af00      	add	r7, sp, #0
 801237e:	60ba      	str	r2, [r7, #8]
 8012380:	607b      	str	r3, [r7, #4]
 8012382:	4603      	mov	r3, r0
 8012384:	81fb      	strh	r3, [r7, #14]
 8012386:	460b      	mov	r3, r1
 8012388:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801238a:	2000      	movs	r0, #0
 801238c:	f000 f868 	bl	8012460 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8012390:	4b17      	ldr	r3, [pc, #92]	@ (80123f0 <shci_send+0x78>)
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	89fa      	ldrh	r2, [r7, #14]
 8012396:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801239a:	4b15      	ldr	r3, [pc, #84]	@ (80123f0 <shci_send+0x78>)
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	7b7a      	ldrb	r2, [r7, #13]
 80123a0:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 80123a2:	4b13      	ldr	r3, [pc, #76]	@ (80123f0 <shci_send+0x78>)
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	330c      	adds	r3, #12
 80123a8:	7b7a      	ldrb	r2, [r7, #13]
 80123aa:	68b9      	ldr	r1, [r7, #8]
 80123ac:	4618      	mov	r0, r3
 80123ae:	f004 fee8 	bl	8017182 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 80123b2:	4b10      	ldr	r3, [pc, #64]	@ (80123f4 <shci_send+0x7c>)
 80123b4:	2201      	movs	r2, #1
 80123b6:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 80123b8:	4b0f      	ldr	r3, [pc, #60]	@ (80123f8 <shci_send+0x80>)
 80123ba:	691b      	ldr	r3, [r3, #16]
 80123bc:	2100      	movs	r1, #0
 80123be:	2000      	movs	r0, #0
 80123c0:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 80123c2:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 80123c6:	f7f4 ff7c 	bl	80072c2 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	f103 0008 	add.w	r0, r3, #8
 80123d0:	4b07      	ldr	r3, [pc, #28]	@ (80123f0 <shci_send+0x78>)
 80123d2:	6819      	ldr	r1, [r3, #0]
 80123d4:	4b06      	ldr	r3, [pc, #24]	@ (80123f0 <shci_send+0x78>)
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	789b      	ldrb	r3, [r3, #2]
 80123da:	3303      	adds	r3, #3
 80123dc:	461a      	mov	r2, r3
 80123de:	f004 fed0 	bl	8017182 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80123e2:	2001      	movs	r0, #1
 80123e4:	f000 f83c 	bl	8012460 <Cmd_SetStatus>

  return;
 80123e8:	bf00      	nop
}
 80123ea:	3710      	adds	r7, #16
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	2000011c 	.word	0x2000011c
 80123f4:	200009d4 	.word	0x200009d4
 80123f8:	200009b0 	.word	0x200009b0

080123fc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b086      	sub	sp, #24
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 8012404:	4a10      	ldr	r2, [pc, #64]	@ (8012448 <TlInit+0x4c>)
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 801240a:	4810      	ldr	r0, [pc, #64]	@ (801244c <TlInit+0x50>)
 801240c:	f000 fbc0 	bl	8012b90 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8012410:	2001      	movs	r0, #1
 8012412:	f000 f825 	bl	8012460 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8012416:	4b0e      	ldr	r3, [pc, #56]	@ (8012450 <TlInit+0x54>)
 8012418:	2201      	movs	r2, #1
 801241a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 801241c:	4b0d      	ldr	r3, [pc, #52]	@ (8012454 <TlInit+0x58>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d00c      	beq.n	801243e <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 8012428:	4b0b      	ldr	r3, [pc, #44]	@ (8012458 <TlInit+0x5c>)
 801242a:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 801242c:	4b0b      	ldr	r3, [pc, #44]	@ (801245c <TlInit+0x60>)
 801242e:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 8012430:	4b08      	ldr	r3, [pc, #32]	@ (8012454 <TlInit+0x58>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f107 020c 	add.w	r2, r7, #12
 8012438:	4610      	mov	r0, r2
 801243a:	4798      	blx	r3
  }

  return;
 801243c:	bf00      	nop
 801243e:	bf00      	nop
}
 8012440:	3718      	adds	r7, #24
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}
 8012446:	bf00      	nop
 8012448:	2000011c 	.word	0x2000011c
 801244c:	20000110 	.word	0x20000110
 8012450:	20000120 	.word	0x20000120
 8012454:	200009b0 	.word	0x200009b0
 8012458:	080124b1 	.word	0x080124b1
 801245c:	080124c9 	.word	0x080124c9

08012460 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8012460:	b580      	push	{r7, lr}
 8012462:	b082      	sub	sp, #8
 8012464:	af00      	add	r7, sp, #0
 8012466:	4603      	mov	r3, r0
 8012468:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801246a:	79fb      	ldrb	r3, [r7, #7]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d10b      	bne.n	8012488 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8012470:	4b0d      	ldr	r3, [pc, #52]	@ (80124a8 <Cmd_SetStatus+0x48>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d003      	beq.n	8012480 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 8012478:	4b0b      	ldr	r3, [pc, #44]	@ (80124a8 <Cmd_SetStatus+0x48>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	2000      	movs	r0, #0
 801247e:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8012480:	4b0a      	ldr	r3, [pc, #40]	@ (80124ac <Cmd_SetStatus+0x4c>)
 8012482:	2200      	movs	r2, #0
 8012484:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 8012486:	e00b      	b.n	80124a0 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 8012488:	4b08      	ldr	r3, [pc, #32]	@ (80124ac <Cmd_SetStatus+0x4c>)
 801248a:	2201      	movs	r2, #1
 801248c:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 801248e:	4b06      	ldr	r3, [pc, #24]	@ (80124a8 <Cmd_SetStatus+0x48>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d004      	beq.n	80124a0 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 8012496:	4b04      	ldr	r3, [pc, #16]	@ (80124a8 <Cmd_SetStatus+0x48>)
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	2001      	movs	r0, #1
 801249c:	4798      	blx	r3
  return;
 801249e:	bf00      	nop
 80124a0:	bf00      	nop
}
 80124a2:	3708      	adds	r7, #8
 80124a4:	46bd      	mov	sp, r7
 80124a6:	bd80      	pop	{r7, pc}
 80124a8:	200009d0 	.word	0x200009d0
 80124ac:	20000118 	.word	0x20000118

080124b0 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 80124b0:	b580      	push	{r7, lr}
 80124b2:	b082      	sub	sp, #8
 80124b4:	af00      	add	r7, sp, #0
 80124b6:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 80124b8:	2000      	movs	r0, #0
 80124ba:	f7f4 fef7 	bl	80072ac <shci_cmd_resp_release>

  return;
 80124be:	bf00      	nop
}
 80124c0:	3708      	adds	r7, #8
 80124c2:	46bd      	mov	sp, r7
 80124c4:	bd80      	pop	{r7, pc}
	...

080124c8 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 80124c8:	b580      	push	{r7, lr}
 80124ca:	b082      	sub	sp, #8
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 80124d0:	6879      	ldr	r1, [r7, #4]
 80124d2:	4805      	ldr	r0, [pc, #20]	@ (80124e8 <TlUserEvtReceived+0x20>)
 80124d4:	f000 fbb4 	bl	8012c40 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 80124d8:	4803      	ldr	r0, [pc, #12]	@ (80124e8 <TlUserEvtReceived+0x20>)
 80124da:	f7f4 fedb 	bl	8007294 <shci_notify_asynch_evt>

  return;
 80124de:	bf00      	nop
}
 80124e0:	3708      	adds	r7, #8
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	20000110 	.word	0x20000110

080124ec <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80124ec:	b480      	push	{r7}
 80124ee:	b083      	sub	sp, #12
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	4a05      	ldr	r2, [pc, #20]	@ (801250c <shci_register_io_bus+0x20>)
 80124f8:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	4a04      	ldr	r2, [pc, #16]	@ (8012510 <shci_register_io_bus+0x24>)
 80124fe:	611a      	str	r2, [r3, #16]

  return;
 8012500:	bf00      	nop
}
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr
 801250c:	08012609 	.word	0x08012609
 8012510:	0801265d 	.word	0x0801265d

08012514 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 8012514:	b580      	push	{r7, lr}
 8012516:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 8012518:	f7f7 fa92 	bl	8009a40 <HW_IPCC_Enable>

  return;
 801251c:	bf00      	nop
}
 801251e:	bd80      	pop	{r7, pc}

08012520 <TL_Init>:


void TL_Init( void )
{
 8012520:	b580      	push	{r7, lr}
 8012522:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 8012524:	4b10      	ldr	r3, [pc, #64]	@ (8012568 <TL_Init+0x48>)
 8012526:	4a11      	ldr	r2, [pc, #68]	@ (801256c <TL_Init+0x4c>)
 8012528:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 801252a:	4b0f      	ldr	r3, [pc, #60]	@ (8012568 <TL_Init+0x48>)
 801252c:	4a10      	ldr	r2, [pc, #64]	@ (8012570 <TL_Init+0x50>)
 801252e:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 8012530:	4b0d      	ldr	r3, [pc, #52]	@ (8012568 <TL_Init+0x48>)
 8012532:	4a10      	ldr	r2, [pc, #64]	@ (8012574 <TL_Init+0x54>)
 8012534:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 8012536:	4b0c      	ldr	r3, [pc, #48]	@ (8012568 <TL_Init+0x48>)
 8012538:	4a0f      	ldr	r2, [pc, #60]	@ (8012578 <TL_Init+0x58>)
 801253a:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 801253c:	4b0a      	ldr	r3, [pc, #40]	@ (8012568 <TL_Init+0x48>)
 801253e:	4a0f      	ldr	r2, [pc, #60]	@ (801257c <TL_Init+0x5c>)
 8012540:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 8012542:	4b09      	ldr	r3, [pc, #36]	@ (8012568 <TL_Init+0x48>)
 8012544:	4a0e      	ldr	r2, [pc, #56]	@ (8012580 <TL_Init+0x60>)
 8012546:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8012548:	4b07      	ldr	r3, [pc, #28]	@ (8012568 <TL_Init+0x48>)
 801254a:	4a0e      	ldr	r2, [pc, #56]	@ (8012584 <TL_Init+0x64>)
 801254c:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 801254e:	4b06      	ldr	r3, [pc, #24]	@ (8012568 <TL_Init+0x48>)
 8012550:	4a0d      	ldr	r2, [pc, #52]	@ (8012588 <TL_Init+0x68>)
 8012552:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8012554:	4b04      	ldr	r3, [pc, #16]	@ (8012568 <TL_Init+0x48>)
 8012556:	4a0d      	ldr	r2, [pc, #52]	@ (801258c <TL_Init+0x6c>)
 8012558:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801255a:	4b03      	ldr	r3, [pc, #12]	@ (8012568 <TL_Init+0x48>)
 801255c:	4a0c      	ldr	r2, [pc, #48]	@ (8012590 <TL_Init+0x70>)
 801255e:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8012560:	f7f7 fa82 	bl	8009a68 <HW_IPCC_Init>

  return;
 8012564:	bf00      	nop
}
 8012566:	bd80      	pop	{r7, pc}
 8012568:	20030000 	.word	0x20030000
 801256c:	20030034 	.word	0x20030034
 8012570:	20030054 	.word	0x20030054
 8012574:	20030064 	.word	0x20030064
 8012578:	20030074 	.word	0x20030074
 801257c:	2003007c 	.word	0x2003007c
 8012580:	20030084 	.word	0x20030084
 8012584:	2003008c 	.word	0x2003008c
 8012588:	200300a8 	.word	0x200300a8
 801258c:	200300ac 	.word	0x200300ac
 8012590:	200300b8 	.word	0x200300b8

08012594 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b082      	sub	sp, #8
 8012598:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 801259a:	e01c      	b.n	80125d6 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 801259c:	1d3b      	adds	r3, r7, #4
 801259e:	4619      	mov	r1, r3
 80125a0:	4812      	ldr	r0, [pc, #72]	@ (80125ec <HW_IPCC_BLE_RxEvtNot+0x58>)
 80125a2:	f000 fb94 	bl	8012cce <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	7a5b      	ldrb	r3, [r3, #9]
 80125aa:	2b0f      	cmp	r3, #15
 80125ac:	d003      	beq.n	80125b6 <HW_IPCC_BLE_RxEvtNot+0x22>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	7a5b      	ldrb	r3, [r3, #9]
 80125b2:	2b0e      	cmp	r3, #14
 80125b4:	d105      	bne.n	80125c2 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	4619      	mov	r1, r3
 80125ba:	2002      	movs	r0, #2
 80125bc:	f000 f9ac 	bl	8012918 <OutputDbgTrace>
 80125c0:	e004      	b.n	80125cc <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	4619      	mov	r1, r3
 80125c6:	2003      	movs	r0, #3
 80125c8:	f000 f9a6 	bl	8012918 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 80125cc:	4b08      	ldr	r3, [pc, #32]	@ (80125f0 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	4610      	mov	r0, r2
 80125d4:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 80125d6:	4805      	ldr	r0, [pc, #20]	@ (80125ec <HW_IPCC_BLE_RxEvtNot+0x58>)
 80125d8:	f000 faea 	bl	8012bb0 <LST_is_empty>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d0dc      	beq.n	801259c <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 80125e2:	bf00      	nop
}
 80125e4:	3708      	adds	r7, #8
 80125e6:	46bd      	mov	sp, r7
 80125e8:	bd80      	pop	{r7, pc}
 80125ea:	bf00      	nop
 80125ec:	200300d4 	.word	0x200300d4
 80125f0:	200009e0 	.word	0x200009e0

080125f4 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 80125f8:	4b02      	ldr	r3, [pc, #8]	@ (8012604 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	4798      	blx	r3

  return;
 80125fe:	bf00      	nop
}
 8012600:	bd80      	pop	{r7, pc}
 8012602:	bf00      	nop
 8012604:	200009e4 	.word	0x200009e4

08012608 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b084      	sub	sp, #16
 801260c:	af00      	add	r7, sp, #0
 801260e:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8012614:	480d      	ldr	r0, [pc, #52]	@ (801264c <TL_SYS_Init+0x44>)
 8012616:	f000 fabb 	bl	8012b90 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801261a:	4b0d      	ldr	r3, [pc, #52]	@ (8012650 <TL_SYS_Init+0x48>)
 801261c:	68db      	ldr	r3, [r3, #12]
 801261e:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	689a      	ldr	r2, [r3, #8]
 8012624:	68bb      	ldr	r3, [r7, #8]
 8012626:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 8012628:	68bb      	ldr	r3, [r7, #8]
 801262a:	4a08      	ldr	r2, [pc, #32]	@ (801264c <TL_SYS_Init+0x44>)
 801262c:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 801262e:	f7f7 fa49 	bl	8009ac4 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	4a07      	ldr	r2, [pc, #28]	@ (8012654 <TL_SYS_Init+0x4c>)
 8012638:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801263a:	68fb      	ldr	r3, [r7, #12]
 801263c:	685b      	ldr	r3, [r3, #4]
 801263e:	4a06      	ldr	r2, [pc, #24]	@ (8012658 <TL_SYS_Init+0x50>)
 8012640:	6013      	str	r3, [r2, #0]

  return 0;
 8012642:	2300      	movs	r3, #0
}
 8012644:	4618      	mov	r0, r3
 8012646:	3710      	adds	r7, #16
 8012648:	46bd      	mov	sp, r7
 801264a:	bd80      	pop	{r7, pc}
 801264c:	200300dc 	.word	0x200300dc
 8012650:	20030000 	.word	0x20030000
 8012654:	200009e8 	.word	0x200009e8
 8012658:	200009ec 	.word	0x200009ec

0801265c <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	460b      	mov	r3, r1
 8012666:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 8012668:	4b09      	ldr	r3, [pc, #36]	@ (8012690 <TL_SYS_SendCmd+0x34>)
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	2210      	movs	r2, #16
 8012670:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 8012672:	4b07      	ldr	r3, [pc, #28]	@ (8012690 <TL_SYS_SendCmd+0x34>)
 8012674:	68db      	ldr	r3, [r3, #12]
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	4619      	mov	r1, r3
 801267a:	2004      	movs	r0, #4
 801267c:	f000 f94c 	bl	8012918 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 8012680:	f7f7 fa2a 	bl	8009ad8 <HW_IPCC_SYS_SendCmd>

  return 0;
 8012684:	2300      	movs	r3, #0
}
 8012686:	4618      	mov	r0, r3
 8012688:	3708      	adds	r7, #8
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	20030000 	.word	0x20030000

08012694 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 8012694:	b580      	push	{r7, lr}
 8012696:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 8012698:	4b07      	ldr	r3, [pc, #28]	@ (80126b8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 801269a:	68db      	ldr	r3, [r3, #12]
 801269c:	681b      	ldr	r3, [r3, #0]
 801269e:	4619      	mov	r1, r3
 80126a0:	2005      	movs	r0, #5
 80126a2:	f000 f939 	bl	8012918 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80126a6:	4b05      	ldr	r3, [pc, #20]	@ (80126bc <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	4a03      	ldr	r2, [pc, #12]	@ (80126b8 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80126ac:	68d2      	ldr	r2, [r2, #12]
 80126ae:	6812      	ldr	r2, [r2, #0]
 80126b0:	4610      	mov	r0, r2
 80126b2:	4798      	blx	r3

  return;
 80126b4:	bf00      	nop
}
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	20030000 	.word	0x20030000
 80126bc:	200009e8 	.word	0x200009e8

080126c0 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b082      	sub	sp, #8
 80126c4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80126c6:	e00e      	b.n	80126e6 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 80126c8:	1d3b      	adds	r3, r7, #4
 80126ca:	4619      	mov	r1, r3
 80126cc:	480b      	ldr	r0, [pc, #44]	@ (80126fc <HW_IPCC_SYS_EvtNot+0x3c>)
 80126ce:	f000 fafe 	bl	8012cce <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	4619      	mov	r1, r3
 80126d6:	2006      	movs	r0, #6
 80126d8:	f000 f91e 	bl	8012918 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 80126dc:	4b08      	ldr	r3, [pc, #32]	@ (8012700 <HW_IPCC_SYS_EvtNot+0x40>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	687a      	ldr	r2, [r7, #4]
 80126e2:	4610      	mov	r0, r2
 80126e4:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 80126e6:	4805      	ldr	r0, [pc, #20]	@ (80126fc <HW_IPCC_SYS_EvtNot+0x3c>)
 80126e8:	f000 fa62 	bl	8012bb0 <LST_is_empty>
 80126ec:	4603      	mov	r3, r0
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d0ea      	beq.n	80126c8 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 80126f2:	bf00      	nop
}
 80126f4:	3708      	adds	r7, #8
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	200300dc 	.word	0x200300dc
 8012700:	200009ec 	.word	0x200009ec

08012704 <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 8012704:	b580      	push	{r7, lr}
 8012706:	b084      	sub	sp, #16
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 801270c:	4b0a      	ldr	r3, [pc, #40]	@ (8012738 <TL_ZIGBEE_Init+0x34>)
 801270e:	69db      	ldr	r3, [r3, #28]
 8012710:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	681a      	ldr	r2, [r3, #0]
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	685a      	ldr	r2, [r3, #4]
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	689a      	ldr	r2, [r3, #8]
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 801272a:	f7f7 f9fb 	bl	8009b24 <HW_IPCC_ZIGBEE_Init>

  return;
 801272e:	bf00      	nop
}
 8012730:	3710      	adds	r7, #16
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	20030000 	.word	0x20030000

0801273c <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 801273c:	b580      	push	{r7, lr}
 801273e:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 8012740:	4b04      	ldr	r3, [pc, #16]	@ (8012754 <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 8012742:	69db      	ldr	r3, [r3, #28]
 8012744:	685b      	ldr	r3, [r3, #4]
 8012746:	2208      	movs	r2, #8
 8012748:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 801274a:	f7f7 f9f9 	bl	8009b40 <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 801274e:	bf00      	nop
}
 8012750:	bd80      	pop	{r7, pc}
 8012752:	bf00      	nop
 8012754:	20030000 	.word	0x20030000

08012758 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 801275c:	4b03      	ldr	r3, [pc, #12]	@ (801276c <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 801275e:	69db      	ldr	r3, [r3, #28]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	4618      	mov	r0, r3
 8012764:	f7f6 febe 	bl	80094e4 <TL_ZIGBEE_CmdEvtReceived>

  return;
 8012768:	bf00      	nop
}
 801276a:	bd80      	pop	{r7, pc}
 801276c:	20030000 	.word	0x20030000

08012770 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 8012770:	b580      	push	{r7, lr}
 8012772:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 8012774:	4b03      	ldr	r3, [pc, #12]	@ (8012784 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 8012776:	69db      	ldr	r3, [r3, #28]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	4618      	mov	r0, r3
 801277c:	f7f6 febc 	bl	80094f8 <TL_ZIGBEE_NotReceived>

  return;
 8012780:	bf00      	nop
}
 8012782:	bd80      	pop	{r7, pc}
 8012784:	20030000 	.word	0x20030000

08012788 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 8012788:	b580      	push	{r7, lr}
 801278a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 801278c:	4b04      	ldr	r3, [pc, #16]	@ (80127a0 <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 801278e:	69db      	ldr	r3, [r3, #28]
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	220d      	movs	r2, #13
 8012794:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 8012796:	f7f7 f9e1 	bl	8009b5c <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 801279a:	bf00      	nop
}
 801279c:	bd80      	pop	{r7, pc}
 801279e:	bf00      	nop
 80127a0:	20030000 	.word	0x20030000

080127a4 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 80127a8:	4b03      	ldr	r3, [pc, #12]	@ (80127b8 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 80127aa:	69db      	ldr	r3, [r3, #28]
 80127ac:	689b      	ldr	r3, [r3, #8]
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7f6 fed8 	bl	8009564 <TL_ZIGBEE_M0RequestReceived>

  return;
 80127b4:	bf00      	nop
}
 80127b6:	bd80      	pop	{r7, pc}
 80127b8:	20030000 	.word	0x20030000

080127bc <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 80127bc:	b580      	push	{r7, lr}
 80127be:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 80127c0:	4b04      	ldr	r3, [pc, #16]	@ (80127d4 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 80127c2:	69db      	ldr	r3, [r3, #28]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	220d      	movs	r2, #13
 80127c8:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 80127ca:	f7f7 f9f9 	bl	8009bc0 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 80127ce:	bf00      	nop
}
 80127d0:	bd80      	pop	{r7, pc}
 80127d2:	bf00      	nop
 80127d4:	20030000 	.word	0x20030000

080127d8 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 80127e0:	4817      	ldr	r0, [pc, #92]	@ (8012840 <TL_MM_Init+0x68>)
 80127e2:	f000 f9d5 	bl	8012b90 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 80127e6:	4817      	ldr	r0, [pc, #92]	@ (8012844 <TL_MM_Init+0x6c>)
 80127e8:	f000 f9d2 	bl	8012b90 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 80127ec:	4b16      	ldr	r3, [pc, #88]	@ (8012848 <TL_MM_Init+0x70>)
 80127ee:	691b      	ldr	r3, [r3, #16]
 80127f0:	4a16      	ldr	r2, [pc, #88]	@ (801284c <TL_MM_Init+0x74>)
 80127f2:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 80127f4:	4b15      	ldr	r3, [pc, #84]	@ (801284c <TL_MM_Init+0x74>)
 80127f6:	681b      	ldr	r3, [r3, #0]
 80127f8:	687a      	ldr	r2, [r7, #4]
 80127fa:	6892      	ldr	r2, [r2, #8]
 80127fc:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80127fe:	4b13      	ldr	r3, [pc, #76]	@ (801284c <TL_MM_Init+0x74>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	68d2      	ldr	r2, [r2, #12]
 8012806:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8012808:	4b10      	ldr	r3, [pc, #64]	@ (801284c <TL_MM_Init+0x74>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	4a0c      	ldr	r2, [pc, #48]	@ (8012840 <TL_MM_Init+0x68>)
 801280e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8012810:	4b0e      	ldr	r3, [pc, #56]	@ (801284c <TL_MM_Init+0x74>)
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	687a      	ldr	r2, [r7, #4]
 8012816:	6812      	ldr	r2, [r2, #0]
 8012818:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801281a:	4b0c      	ldr	r3, [pc, #48]	@ (801284c <TL_MM_Init+0x74>)
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	687a      	ldr	r2, [r7, #4]
 8012820:	6852      	ldr	r2, [r2, #4]
 8012822:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 8012824:	4b09      	ldr	r3, [pc, #36]	@ (801284c <TL_MM_Init+0x74>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	687a      	ldr	r2, [r7, #4]
 801282a:	6912      	ldr	r2, [r2, #16]
 801282c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 801282e:	4b07      	ldr	r3, [pc, #28]	@ (801284c <TL_MM_Init+0x74>)
 8012830:	681b      	ldr	r3, [r3, #0]
 8012832:	687a      	ldr	r2, [r7, #4]
 8012834:	6952      	ldr	r2, [r2, #20]
 8012836:	619a      	str	r2, [r3, #24]

  return;
 8012838:	bf00      	nop
}
 801283a:	3708      	adds	r7, #8
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}
 8012840:	200300c4 	.word	0x200300c4
 8012844:	200009d8 	.word	0x200009d8
 8012848:	20030000 	.word	0x20030000
 801284c:	200009f0 	.word	0x200009f0

08012850 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 8012850:	b580      	push	{r7, lr}
 8012852:	b082      	sub	sp, #8
 8012854:	af00      	add	r7, sp, #0
 8012856:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 8012858:	6879      	ldr	r1, [r7, #4]
 801285a:	4807      	ldr	r0, [pc, #28]	@ (8012878 <TL_MM_EvtDone+0x28>)
 801285c:	f000 f9f0 	bl	8012c40 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 8012860:	6879      	ldr	r1, [r7, #4]
 8012862:	2000      	movs	r0, #0
 8012864:	f000 f858 	bl	8012918 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 8012868:	4804      	ldr	r0, [pc, #16]	@ (801287c <TL_MM_EvtDone+0x2c>)
 801286a:	f7f7 f9b7 	bl	8009bdc <HW_IPCC_MM_SendFreeBuf>

  return;
 801286e:	bf00      	nop
}
 8012870:	3708      	adds	r7, #8
 8012872:	46bd      	mov	sp, r7
 8012874:	bd80      	pop	{r7, pc}
 8012876:	bf00      	nop
 8012878:	200009d8 	.word	0x200009d8
 801287c:	08012881 	.word	0x08012881

08012880 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b082      	sub	sp, #8
 8012884:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8012886:	e00c      	b.n	80128a2 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8012888:	1d3b      	adds	r3, r7, #4
 801288a:	4619      	mov	r1, r3
 801288c:	480a      	ldr	r0, [pc, #40]	@ (80128b8 <SendFreeBuf+0x38>)
 801288e:	f000 fa1e 	bl	8012cce <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8012892:	4b0a      	ldr	r3, [pc, #40]	@ (80128bc <SendFreeBuf+0x3c>)
 8012894:	691b      	ldr	r3, [r3, #16]
 8012896:	691b      	ldr	r3, [r3, #16]
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	4611      	mov	r1, r2
 801289c:	4618      	mov	r0, r3
 801289e:	f000 f9cf 	bl	8012c40 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 80128a2:	4805      	ldr	r0, [pc, #20]	@ (80128b8 <SendFreeBuf+0x38>)
 80128a4:	f000 f984 	bl	8012bb0 <LST_is_empty>
 80128a8:	4603      	mov	r3, r0
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d0ec      	beq.n	8012888 <SendFreeBuf+0x8>
  }

  return;
 80128ae:	bf00      	nop
}
 80128b0:	3708      	adds	r7, #8
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	200009d8 	.word	0x200009d8
 80128bc:	20030000 	.word	0x20030000

080128c0 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 80128c4:	4805      	ldr	r0, [pc, #20]	@ (80128dc <TL_TRACES_Init+0x1c>)
 80128c6:	f000 f963 	bl	8012b90 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 80128ca:	4b05      	ldr	r3, [pc, #20]	@ (80128e0 <TL_TRACES_Init+0x20>)
 80128cc:	695b      	ldr	r3, [r3, #20]
 80128ce:	4a03      	ldr	r2, [pc, #12]	@ (80128dc <TL_TRACES_Init+0x1c>)
 80128d0:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 80128d2:	f7f7 f9b9 	bl	8009c48 <HW_IPCC_TRACES_Init>

  return;
 80128d6:	bf00      	nop
}
 80128d8:	bd80      	pop	{r7, pc}
 80128da:	bf00      	nop
 80128dc:	200300cc 	.word	0x200300cc
 80128e0:	20030000 	.word	0x20030000

080128e4 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80128ea:	e008      	b.n	80128fe <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 80128ec:	1d3b      	adds	r3, r7, #4
 80128ee:	4619      	mov	r1, r3
 80128f0:	4808      	ldr	r0, [pc, #32]	@ (8012914 <HW_IPCC_TRACES_EvtNot+0x30>)
 80128f2:	f000 f9ec 	bl	8012cce <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	4618      	mov	r0, r3
 80128fa:	f7f4 fced 	bl	80072d8 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 80128fe:	4805      	ldr	r0, [pc, #20]	@ (8012914 <HW_IPCC_TRACES_EvtNot+0x30>)
 8012900:	f000 f956 	bl	8012bb0 <LST_is_empty>
 8012904:	4603      	mov	r3, r0
 8012906:	2b00      	cmp	r3, #0
 8012908:	d0f0      	beq.n	80128ec <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801290a:	bf00      	nop
}
 801290c:	3708      	adds	r7, #8
 801290e:	46bd      	mov	sp, r7
 8012910:	bd80      	pop	{r7, pc}
 8012912:	bf00      	nop
 8012914:	200300cc 	.word	0x200300cc

08012918 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 8012918:	b480      	push	{r7}
 801291a:	b087      	sub	sp, #28
 801291c:	af00      	add	r7, sp, #0
 801291e:	4603      	mov	r3, r0
 8012920:	6039      	str	r1, [r7, #0]
 8012922:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;
  TL_EvtSerial_t *p_cmd_rsp_packet;

  switch(packet_type)
 8012924:	79fb      	ldrb	r3, [r7, #7]
 8012926:	2b06      	cmp	r3, #6
 8012928:	d845      	bhi.n	80129b6 <OutputDbgTrace+0x9e>
 801292a:	a201      	add	r2, pc, #4	@ (adr r2, 8012930 <OutputDbgTrace+0x18>)
 801292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012930:	0801294d 	.word	0x0801294d
 8012934:	08012971 	.word	0x08012971
 8012938:	08012977 	.word	0x08012977
 801293c:	0801298b 	.word	0x0801298b
 8012940:	08012997 	.word	0x08012997
 8012944:	0801299d 	.word	0x0801299d
 8012948:	080129ab 	.word	0x080129ab
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801294c:	683b      	ldr	r3, [r7, #0]
 801294e:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	7a5b      	ldrb	r3, [r3, #9]
 8012954:	2bff      	cmp	r3, #255	@ 0xff
 8012956:	d005      	beq.n	8012964 <OutputDbgTrace+0x4c>
 8012958:	2bff      	cmp	r3, #255	@ 0xff
 801295a:	dc05      	bgt.n	8012968 <OutputDbgTrace+0x50>
 801295c:	2b0e      	cmp	r3, #14
 801295e:	d005      	beq.n	801296c <OutputDbgTrace+0x54>
 8012960:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 8012962:	e001      	b.n	8012968 <OutputDbgTrace+0x50>
          break;
 8012964:	bf00      	nop
 8012966:	e027      	b.n	80129b8 <OutputDbgTrace+0xa0>
          break;
 8012968:	bf00      	nop
 801296a:	e025      	b.n	80129b8 <OutputDbgTrace+0xa0>
          break;
 801296c:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 801296e:	e023      	b.n	80129b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012970:	683b      	ldr	r3, [r7, #0]
 8012972:	60fb      	str	r3, [r7, #12]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8012974:	e020      	b.n	80129b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	617b      	str	r3, [r7, #20]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	7a5b      	ldrb	r3, [r3, #9]
 801297e:	2b0e      	cmp	r3, #14
 8012980:	d001      	beq.n	8012986 <OutputDbgTrace+0x6e>
 8012982:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8012984:	e000      	b.n	8012988 <OutputDbgTrace+0x70>
          break;
 8012986:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012988:	e016      	b.n	80129b8 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801298a:	683b      	ldr	r3, [r7, #0]
 801298c:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	7a5b      	ldrb	r3, [r3, #9]
 8012992:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8012994:	e010      	b.n	80129b8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	60fb      	str	r3, [r7, #12]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801299a:	e00d      	b.n	80129b8 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_cmd_rsp_packet = (TL_EvtSerial_t*)buffer;
 801299c:	683b      	ldr	r3, [r7, #0]
 801299e:	613b      	str	r3, [r7, #16]
      switch(p_cmd_rsp_packet->evt.evtcode)
 80129a0:	693b      	ldr	r3, [r7, #16]
 80129a2:	785b      	ldrb	r3, [r3, #1]
 80129a4:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_cmd_rsp_packet->evt.evtcode);
          break;
 80129a6:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_rsp_packet->evt, p_cmd_rsp_packet->evt.plen+TL_EVT_HDR_SIZE);
      break;
 80129a8:	e006      	b.n	80129b8 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80129aa:	683b      	ldr	r3, [r7, #0]
 80129ac:	617b      	str	r3, [r7, #20]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 80129ae:	697b      	ldr	r3, [r7, #20]
 80129b0:	7a5b      	ldrb	r3, [r3, #9]
 80129b2:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 80129b4:	e000      	b.n	80129b8 <OutputDbgTrace+0xa0>

    default:
      break;
 80129b6:	bf00      	nop
  }

  return;
 80129b8:	bf00      	nop
}
 80129ba:	371c      	adds	r7, #28
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr

080129c4 <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 80129c4:	b480      	push	{r7}
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	bf00      	nop
 80129ca:	46bd      	mov	sp, r7
 80129cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d0:	4770      	bx	lr
	...

080129d4 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 80129d4:	b580      	push	{r7, lr}
 80129d6:	b086      	sub	sp, #24
 80129d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80129da:	f3ef 8310 	mrs	r3, PRIMASK
 80129de:	60fb      	str	r3, [r7, #12]
  return(result);
 80129e0:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 80129e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80129e4:	b672      	cpsid	i
}
 80129e6:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 80129e8:	1cbb      	adds	r3, r7, #2
 80129ea:	4619      	mov	r1, r3
 80129ec:	4812      	ldr	r0, [pc, #72]	@ (8012a38 <DbgTrace_TxCpltCallback+0x64>)
 80129ee:	f000 fbe5 	bl	80131bc <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 80129f2:	1cbb      	adds	r3, r7, #2
 80129f4:	4619      	mov	r1, r3
 80129f6:	4810      	ldr	r0, [pc, #64]	@ (8012a38 <DbgTrace_TxCpltCallback+0x64>)
 80129f8:	f000 fccf 	bl	801339a <CircularQueue_Sense>
 80129fc:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 80129fe:	693b      	ldr	r3, [r7, #16]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d00c      	beq.n	8012a1e <DbgTrace_TxCpltCallback+0x4a>
 8012a04:	697b      	ldr	r3, [r7, #20]
 8012a06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	f383 8810 	msr	PRIMASK, r3
}
 8012a0e:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8012a10:	887b      	ldrh	r3, [r7, #2]
 8012a12:	4a0a      	ldr	r2, [pc, #40]	@ (8012a3c <DbgTrace_TxCpltCallback+0x68>)
 8012a14:	4619      	mov	r1, r3
 8012a16:	6938      	ldr	r0, [r7, #16]
 8012a18:	f7f4 fc79 	bl	800730e <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 8012a1c:	e008      	b.n	8012a30 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 8012a1e:	4b08      	ldr	r3, [pc, #32]	@ (8012a40 <DbgTrace_TxCpltCallback+0x6c>)
 8012a20:	2201      	movs	r2, #1
 8012a22:	701a      	strb	r2, [r3, #0]
 8012a24:	697b      	ldr	r3, [r7, #20]
 8012a26:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	f383 8810 	msr	PRIMASK, r3
}
 8012a2e:	bf00      	nop
}
 8012a30:	bf00      	nop
 8012a32:	3718      	adds	r7, #24
 8012a34:	46bd      	mov	sp, r7
 8012a36:	bd80      	pop	{r7, pc}
 8012a38:	200009f4 	.word	0x200009f4
 8012a3c:	080129d5 	.word	0x080129d5
 8012a40:	2000009d 	.word	0x2000009d

08012a44 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 8012a4a:	f7f4 fc5a 	bl	8007302 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 8012a4e:	2302      	movs	r3, #2
 8012a50:	9300      	str	r3, [sp, #0]
 8012a52:	2300      	movs	r3, #0
 8012a54:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8012a58:	4903      	ldr	r1, [pc, #12]	@ (8012a68 <DbgTraceInit+0x24>)
 8012a5a:	4804      	ldr	r0, [pc, #16]	@ (8012a6c <DbgTraceInit+0x28>)
 8012a5c:	f000 f956 	bl	8012d0c <CircularQueue_Init>
#endif 
#endif
  return;
 8012a60:	bf00      	nop
}
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}
 8012a66:	bf00      	nop
 8012a68:	20000a14 	.word	0x20000a14
 8012a6c:	200009f4 	.word	0x200009f4

08012a70 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b084      	sub	sp, #16
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	60f8      	str	r0, [r7, #12]
 8012a78:	60b9      	str	r1, [r7, #8]
 8012a7a:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	68b9      	ldr	r1, [r7, #8]
 8012a80:	68f8      	ldr	r0, [r7, #12]
 8012a82:	f000 f805 	bl	8012a90 <DbgTraceWrite>
 8012a86:	4603      	mov	r3, r0
}
 8012a88:	4618      	mov	r0, r3
 8012a8a:	3710      	adds	r7, #16
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	bd80      	pop	{r7, pc}

08012a90 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8012a90:	b580      	push	{r7, lr}
 8012a92:	b08a      	sub	sp, #40	@ 0x28
 8012a94:	af00      	add	r7, sp, #0
 8012a96:	60f8      	str	r0, [r7, #12]
 8012a98:	60b9      	str	r1, [r7, #8]
 8012a9a:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012aa0:	f3ef 8310 	mrs	r3, PRIMASK
 8012aa4:	61bb      	str	r3, [r7, #24]
  return(result);
 8012aa6:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 8012aa8:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ab0:	d102      	bne.n	8012ab8 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012ab6:	e037      	b.n	8012b28 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	2b01      	cmp	r3, #1
 8012abc:	d006      	beq.n	8012acc <DbgTraceWrite+0x3c>
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	2b02      	cmp	r3, #2
 8012ac2:	d003      	beq.n	8012acc <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8012ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ac8:	627b      	str	r3, [r7, #36]	@ 0x24
 8012aca:	e02d      	b.n	8012b28 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d02a      	beq.n	8012b28 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8012ad6:	b672      	cpsid	i
}
 8012ad8:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 8012ada:	687b      	ldr	r3, [r7, #4]
 8012adc:	b29a      	uxth	r2, r3
 8012ade:	2301      	movs	r3, #1
 8012ae0:	68b9      	ldr	r1, [r7, #8]
 8012ae2:	4814      	ldr	r0, [pc, #80]	@ (8012b34 <DbgTraceWrite+0xa4>)
 8012ae4:	f000 f944 	bl	8012d70 <CircularQueue_Add>
 8012ae8:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 8012aea:	69fb      	ldr	r3, [r7, #28]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d015      	beq.n	8012b1c <DbgTraceWrite+0x8c>
 8012af0:	4b11      	ldr	r3, [pc, #68]	@ (8012b38 <DbgTraceWrite+0xa8>)
 8012af2:	781b      	ldrb	r3, [r3, #0]
 8012af4:	b2db      	uxtb	r3, r3
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d010      	beq.n	8012b1c <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 8012afa:	4b0f      	ldr	r3, [pc, #60]	@ (8012b38 <DbgTraceWrite+0xa8>)
 8012afc:	2200      	movs	r2, #0
 8012afe:	701a      	strb	r2, [r3, #0]
 8012b00:	6a3b      	ldr	r3, [r7, #32]
 8012b02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	f383 8810 	msr	PRIMASK, r3
}
 8012b0a:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	b29b      	uxth	r3, r3
 8012b10:	4a0a      	ldr	r2, [pc, #40]	@ (8012b3c <DbgTraceWrite+0xac>)
 8012b12:	4619      	mov	r1, r3
 8012b14:	69f8      	ldr	r0, [r7, #28]
 8012b16:	f7f4 fbfa 	bl	800730e <DbgOutputTraces>
 8012b1a:	e005      	b.n	8012b28 <DbgTraceWrite+0x98>
 8012b1c:	6a3b      	ldr	r3, [r7, #32]
 8012b1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	f383 8810 	msr	PRIMASK, r3
}
 8012b26:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 8012b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3728      	adds	r7, #40	@ 0x28
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
 8012b32:	bf00      	nop
 8012b34:	200009f4 	.word	0x200009f4
 8012b38:	2000009d 	.word	0x2000009d
 8012b3c:	080129d5 	.word	0x080129d5

08012b40 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	4603      	mov	r3, r0
 8012b48:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 8012b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8012b88 <OTP_Read+0x48>)
 8012b4c:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012b4e:	e002      	b.n	8012b56 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 8012b50:	68fb      	ldr	r3, [r7, #12]
 8012b52:	3b08      	subs	r3, #8
 8012b54:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	3307      	adds	r3, #7
 8012b5a:	781b      	ldrb	r3, [r3, #0]
 8012b5c:	79fa      	ldrb	r2, [r7, #7]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d003      	beq.n	8012b6a <OTP_Read+0x2a>
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	4a09      	ldr	r2, [pc, #36]	@ (8012b8c <OTP_Read+0x4c>)
 8012b66:	4293      	cmp	r3, r2
 8012b68:	d1f2      	bne.n	8012b50 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	3307      	adds	r3, #7
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	79fa      	ldrb	r2, [r7, #7]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d001      	beq.n	8012b7a <OTP_Read+0x3a>
  {
    p_id = 0 ;
 8012b76:	2300      	movs	r3, #0
 8012b78:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 8012b7a:	68fb      	ldr	r3, [r7, #12]
}
 8012b7c:	4618      	mov	r0, r3
 8012b7e:	3714      	adds	r7, #20
 8012b80:	46bd      	mov	sp, r7
 8012b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b86:	4770      	bx	lr
 8012b88:	1fff73f8 	.word	0x1fff73f8
 8012b8c:	1fff7000 	.word	0x1fff7000

08012b90 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8012b90:	b480      	push	{r7}
 8012b92:	b083      	sub	sp, #12
 8012b94:	af00      	add	r7, sp, #0
 8012b96:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	687a      	ldr	r2, [r7, #4]
 8012ba2:	605a      	str	r2, [r3, #4]
}
 8012ba4:	bf00      	nop
 8012ba6:	370c      	adds	r7, #12
 8012ba8:	46bd      	mov	sp, r7
 8012baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bae:	4770      	bx	lr

08012bb0 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b087      	sub	sp, #28
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bb8:	f3ef 8310 	mrs	r3, PRIMASK
 8012bbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bbe:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012bc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8012bc2:	b672      	cpsid	i
}
 8012bc4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	687a      	ldr	r2, [r7, #4]
 8012bcc:	429a      	cmp	r2, r3
 8012bce:	d102      	bne.n	8012bd6 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8012bd0:	2301      	movs	r3, #1
 8012bd2:	75fb      	strb	r3, [r7, #23]
 8012bd4:	e001      	b.n	8012bda <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	75fb      	strb	r3, [r7, #23]
 8012bda:	693b      	ldr	r3, [r7, #16]
 8012bdc:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	f383 8810 	msr	PRIMASK, r3
}
 8012be4:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8012be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8012be8:	4618      	mov	r0, r3
 8012bea:	371c      	adds	r7, #28
 8012bec:	46bd      	mov	sp, r7
 8012bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bf2:	4770      	bx	lr

08012bf4 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8012bf4:	b480      	push	{r7}
 8012bf6:	b087      	sub	sp, #28
 8012bf8:	af00      	add	r7, sp, #0
 8012bfa:	6078      	str	r0, [r7, #4]
 8012bfc:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8012c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c04:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012c06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012c08:	b672      	cpsid	i
}
 8012c0a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	681a      	ldr	r2, [r3, #0]
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8012c14:	683b      	ldr	r3, [r7, #0]
 8012c16:	687a      	ldr	r2, [r7, #4]
 8012c18:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	683a      	ldr	r2, [r7, #0]
 8012c1e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8012c20:	683b      	ldr	r3, [r7, #0]
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	683a      	ldr	r2, [r7, #0]
 8012c26:	605a      	str	r2, [r3, #4]
 8012c28:	697b      	ldr	r3, [r7, #20]
 8012c2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c2c:	693b      	ldr	r3, [r7, #16]
 8012c2e:	f383 8810 	msr	PRIMASK, r3
}
 8012c32:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012c34:	bf00      	nop
 8012c36:	371c      	adds	r7, #28
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c3e:	4770      	bx	lr

08012c40 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8012c40:	b480      	push	{r7}
 8012c42:	b087      	sub	sp, #28
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c4a:	f3ef 8310 	mrs	r3, PRIMASK
 8012c4e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c50:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012c52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012c54:	b672      	cpsid	i
}
 8012c56:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8012c58:	683b      	ldr	r3, [r7, #0]
 8012c5a:	687a      	ldr	r2, [r7, #4]
 8012c5c:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	685a      	ldr	r2, [r3, #4]
 8012c62:	683b      	ldr	r3, [r7, #0]
 8012c64:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	683a      	ldr	r2, [r7, #0]
 8012c6a:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8012c6c:	683b      	ldr	r3, [r7, #0]
 8012c6e:	685b      	ldr	r3, [r3, #4]
 8012c70:	683a      	ldr	r2, [r7, #0]
 8012c72:	601a      	str	r2, [r3, #0]
 8012c74:	697b      	ldr	r3, [r7, #20]
 8012c76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012c78:	693b      	ldr	r3, [r7, #16]
 8012c7a:	f383 8810 	msr	PRIMASK, r3
}
 8012c7e:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012c80:	bf00      	nop
 8012c82:	371c      	adds	r7, #28
 8012c84:	46bd      	mov	sp, r7
 8012c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c8a:	4770      	bx	lr

08012c8c <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8012c8c:	b480      	push	{r7}
 8012c8e:	b087      	sub	sp, #28
 8012c90:	af00      	add	r7, sp, #0
 8012c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012c94:	f3ef 8310 	mrs	r3, PRIMASK
 8012c98:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c9a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012c9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012c9e:	b672      	cpsid	i
}
 8012ca0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	687a      	ldr	r2, [r7, #4]
 8012ca8:	6812      	ldr	r2, [r2, #0]
 8012caa:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	687a      	ldr	r2, [r7, #4]
 8012cb2:	6852      	ldr	r2, [r2, #4]
 8012cb4:	605a      	str	r2, [r3, #4]
 8012cb6:	697b      	ldr	r3, [r7, #20]
 8012cb8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	f383 8810 	msr	PRIMASK, r3
}
 8012cc0:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012cc2:	bf00      	nop
 8012cc4:	371c      	adds	r7, #28
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ccc:	4770      	bx	lr

08012cce <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8012cce:	b580      	push	{r7, lr}
 8012cd0:	b086      	sub	sp, #24
 8012cd2:	af00      	add	r7, sp, #0
 8012cd4:	6078      	str	r0, [r7, #4]
 8012cd6:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8012cdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8012cde:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8012ce0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8012ce2:	b672      	cpsid	i
}
 8012ce4:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	681b      	ldr	r3, [r3, #0]
 8012cf2:	4618      	mov	r0, r3
 8012cf4:	f7ff ffca 	bl	8012c8c <LST_remove_node>
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	f383 8810 	msr	PRIMASK, r3
}
 8012d02:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8012d04:	bf00      	nop
 8012d06:	3718      	adds	r7, #24
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b085      	sub	sp, #20
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
 8012d18:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	68ba      	ldr	r2, [r7, #8]
 8012d1e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	2200      	movs	r2, #0
 8012d24:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	2200      	movs	r2, #0
 8012d2a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	2200      	movs	r2, #0
 8012d30:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	2200      	movs	r2, #0
 8012d36:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	887a      	ldrh	r2, [r7, #2]
 8012d42:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8012d44:	68fb      	ldr	r3, [r7, #12]
 8012d46:	7e3a      	ldrb	r2, [r7, #24]
 8012d48:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 8012d4a:	7e3b      	ldrb	r3, [r7, #24]
 8012d4c:	f003 0302 	and.w	r3, r3, #2
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d006      	beq.n	8012d62 <CircularQueue_Init+0x56>
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	891b      	ldrh	r3, [r3, #8]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d002      	beq.n	8012d62 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8012d5c:	f04f 33ff 	mov.w	r3, #4294967295
 8012d60:	e000      	b.n	8012d64 <CircularQueue_Init+0x58>
  }
  return 0;
 8012d62:	2300      	movs	r3, #0
}
 8012d64:	4618      	mov	r0, r3
 8012d66:	3714      	adds	r7, #20
 8012d68:	46bd      	mov	sp, r7
 8012d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d6e:	4770      	bx	lr

08012d70 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b08e      	sub	sp, #56	@ 0x38
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	60f8      	str	r0, [r7, #12]
 8012d78:	60b9      	str	r1, [r7, #8]
 8012d7a:	603b      	str	r3, [r7, #0]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8012d80:	2300      	movs	r3, #0
 8012d82:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8012d84:	2300      	movs	r3, #0
 8012d86:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 8012d88:	2300      	movs	r3, #0
 8012d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8012d90:	2300      	movs	r3, #0
 8012d92:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8012d94:	2300      	movs	r3, #0
 8012d96:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 8012d98:	2300      	movs	r3, #0
 8012d9a:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	891b      	ldrh	r3, [r3, #8]
 8012da0:	2b00      	cmp	r3, #0
 8012da2:	d101      	bne.n	8012da8 <CircularQueue_Add+0x38>
 8012da4:	2302      	movs	r3, #2
 8012da6:	e000      	b.n	8012daa <CircularQueue_Add+0x3a>
 8012da8:	2300      	movs	r3, #0
 8012daa:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8012dac:	68fb      	ldr	r3, [r7, #12]
 8012dae:	695b      	ldr	r3, [r3, #20]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d029      	beq.n	8012e08 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	891b      	ldrh	r3, [r3, #8]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d122      	bne.n	8012e02 <CircularQueue_Add+0x92>
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	691b      	ldr	r3, [r3, #16]
 8012dc4:	4413      	add	r3, r2
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	4618      	mov	r0, r3
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	681a      	ldr	r2, [r3, #0]
 8012dce:	68fb      	ldr	r3, [r7, #12]
 8012dd0:	691b      	ldr	r3, [r3, #16]
 8012dd2:	1c59      	adds	r1, r3, #1
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	685b      	ldr	r3, [r3, #4]
 8012dd8:	4299      	cmp	r1, r3
 8012dda:	d306      	bcc.n	8012dea <CircularQueue_Add+0x7a>
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	6919      	ldr	r1, [r3, #16]
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	685b      	ldr	r3, [r3, #4]
 8012de4:	1acb      	subs	r3, r1, r3
 8012de6:	3301      	adds	r3, #1
 8012de8:	e002      	b.n	8012df0 <CircularQueue_Add+0x80>
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	691b      	ldr	r3, [r3, #16]
 8012dee:	3301      	adds	r3, #1
 8012df0:	4413      	add	r3, r2
 8012df2:	781b      	ldrb	r3, [r3, #0]
 8012df4:	021b      	lsls	r3, r3, #8
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	4403      	add	r3, r0
 8012dfa:	b29b      	uxth	r3, r3
 8012dfc:	3302      	adds	r3, #2
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	e001      	b.n	8012e06 <CircularQueue_Add+0x96>
 8012e02:	68fb      	ldr	r3, [r7, #12]
 8012e04:	891b      	ldrh	r3, [r3, #8]
 8012e06:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	891b      	ldrh	r3, [r3, #8]
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	d002      	beq.n	8012e16 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	891b      	ldrh	r3, [r3, #8]
 8012e14:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	691a      	ldr	r2, [r3, #16]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	68db      	ldr	r3, [r3, #12]
 8012e1e:	429a      	cmp	r2, r3
 8012e20:	d307      	bcc.n	8012e32 <CircularQueue_Add+0xc2>
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	685a      	ldr	r2, [r3, #4]
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	6919      	ldr	r1, [r3, #16]
 8012e2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012e2c:	440b      	add	r3, r1
 8012e2e:	1ad3      	subs	r3, r2, r3
 8012e30:	e000      	b.n	8012e34 <CircularQueue_Add+0xc4>
 8012e32:	2300      	movs	r3, #0
 8012e34:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 8012e36:	88fa      	ldrh	r2, [r7, #6]
 8012e38:	7ffb      	ldrb	r3, [r7, #31]
 8012e3a:	4413      	add	r3, r2
 8012e3c:	461a      	mov	r2, r3
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	fb02 f303 	mul.w	r3, r2, r3
 8012e44:	69ba      	ldr	r2, [r7, #24]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d80b      	bhi.n	8012e62 <CircularQueue_Add+0xf2>
 8012e4a:	88fa      	ldrh	r2, [r7, #6]
 8012e4c:	7ffb      	ldrb	r3, [r7, #31]
 8012e4e:	4413      	add	r3, r2
 8012e50:	461a      	mov	r2, r3
 8012e52:	69bb      	ldr	r3, [r7, #24]
 8012e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e58:	fb01 f202 	mul.w	r2, r1, r2
 8012e5c:	1a9b      	subs	r3, r3, r2
 8012e5e:	b2db      	uxtb	r3, r3
 8012e60:	e000      	b.n	8012e64 <CircularQueue_Add+0xf4>
 8012e62:	2300      	movs	r3, #0
 8012e64:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 8012e66:	7dfa      	ldrb	r2, [r7, #23]
 8012e68:	7ffb      	ldrb	r3, [r7, #31]
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	bf8c      	ite	hi
 8012e6e:	2301      	movhi	r3, #1
 8012e70:	2300      	movls	r3, #0
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 8012e76:	7fbb      	ldrb	r3, [r7, #30]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d008      	beq.n	8012e8e <CircularQueue_Add+0x11e>
 8012e7c:	68fb      	ldr	r3, [r7, #12]
 8012e7e:	7f1b      	ldrb	r3, [r3, #28]
 8012e80:	f003 0301 	and.w	r3, r3, #1
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d002      	beq.n	8012e8e <CircularQueue_Add+0x11e>
 8012e88:	7dfb      	ldrb	r3, [r7, #23]
 8012e8a:	b29b      	uxth	r3, r3
 8012e8c:	e000      	b.n	8012e90 <CircularQueue_Add+0x120>
 8012e8e:	8bbb      	ldrh	r3, [r7, #28]
 8012e90:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8012e92:	7fbb      	ldrb	r3, [r7, #30]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d008      	beq.n	8012eaa <CircularQueue_Add+0x13a>
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	7f1b      	ldrb	r3, [r3, #28]
 8012e9c:	f003 0302 	and.w	r3, r3, #2
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d002      	beq.n	8012eaa <CircularQueue_Add+0x13a>
 8012ea4:	7ffb      	ldrb	r3, [r7, #31]
 8012ea6:	b29b      	uxth	r3, r3
 8012ea8:	e000      	b.n	8012eac <CircularQueue_Add+0x13c>
 8012eaa:	8bbb      	ldrh	r3, [r7, #28]
 8012eac:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8012eae:	88fb      	ldrh	r3, [r7, #6]
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	f000 817e 	beq.w	80131b2 <CircularQueue_Add+0x442>
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	695a      	ldr	r2, [r3, #20]
 8012eba:	88f9      	ldrh	r1, [r7, #6]
 8012ebc:	7ffb      	ldrb	r3, [r7, #31]
 8012ebe:	440b      	add	r3, r1
 8012ec0:	4619      	mov	r1, r3
 8012ec2:	683b      	ldr	r3, [r7, #0]
 8012ec4:	fb01 f303 	mul.w	r3, r1, r3
 8012ec8:	441a      	add	r2, r3
 8012eca:	8bbb      	ldrh	r3, [r7, #28]
 8012ecc:	441a      	add	r2, r3
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	429a      	cmp	r2, r3
 8012ed4:	f200 816d 	bhi.w	80131b2 <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 8012ed8:	2300      	movs	r3, #0
 8012eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8012edc:	e14a      	b.n	8013174 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	691a      	ldr	r2, [r3, #16]
 8012ee2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012ee4:	441a      	add	r2, r3
 8012ee6:	68fb      	ldr	r3, [r7, #12]
 8012ee8:	685b      	ldr	r3, [r3, #4]
 8012eea:	429a      	cmp	r2, r3
 8012eec:	d307      	bcc.n	8012efe <CircularQueue_Add+0x18e>
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	691a      	ldr	r2, [r3, #16]
 8012ef2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012ef4:	441a      	add	r2, r3
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	685b      	ldr	r3, [r3, #4]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	e003      	b.n	8012f06 <CircularQueue_Add+0x196>
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	691a      	ldr	r2, [r3, #16]
 8012f02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8012f04:	4413      	add	r3, r2
 8012f06:	68fa      	ldr	r2, [r7, #12]
 8012f08:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	691b      	ldr	r3, [r3, #16]
 8012f0e:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	891b      	ldrh	r3, [r3, #8]
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d130      	bne.n	8012f7a <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681a      	ldr	r2, [r3, #0]
 8012f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f1e:	1c59      	adds	r1, r3, #1
 8012f20:	6339      	str	r1, [r7, #48]	@ 0x30
 8012f22:	4413      	add	r3, r2
 8012f24:	88fa      	ldrh	r2, [r7, #6]
 8012f26:	b2d2      	uxtb	r2, r2
 8012f28:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	685b      	ldr	r3, [r3, #4]
 8012f2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d304      	bcc.n	8012f3e <CircularQueue_Add+0x1ce>
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	685b      	ldr	r3, [r3, #4]
 8012f38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f3a:	1ad3      	subs	r3, r2, r3
 8012f3c:	e000      	b.n	8012f40 <CircularQueue_Add+0x1d0>
 8012f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f40:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8012f42:	88fb      	ldrh	r3, [r7, #6]
 8012f44:	0a1b      	lsrs	r3, r3, #8
 8012f46:	b298      	uxth	r0, r3
 8012f48:	68fb      	ldr	r3, [r7, #12]
 8012f4a:	681a      	ldr	r2, [r3, #0]
 8012f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f4e:	1c59      	adds	r1, r3, #1
 8012f50:	6339      	str	r1, [r7, #48]	@ 0x30
 8012f52:	4413      	add	r3, r2
 8012f54:	b2c2      	uxtb	r2, r0
 8012f56:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8012f58:	68fb      	ldr	r3, [r7, #12]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d304      	bcc.n	8012f6c <CircularQueue_Add+0x1fc>
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	685b      	ldr	r3, [r3, #4]
 8012f66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012f68:	1ad3      	subs	r3, r2, r3
 8012f6a:	e000      	b.n	8012f6e <CircularQueue_Add+0x1fe>
 8012f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f6e:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 8012f70:	68fb      	ldr	r3, [r7, #12]
 8012f72:	695b      	ldr	r3, [r3, #20]
 8012f74:	1c9a      	adds	r2, r3, #2
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8012f7a:	88fa      	ldrh	r2, [r7, #6]
 8012f7c:	68fb      	ldr	r3, [r7, #12]
 8012f7e:	6859      	ldr	r1, [r3, #4]
 8012f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012f82:	1acb      	subs	r3, r1, r3
 8012f84:	4293      	cmp	r3, r2
 8012f86:	bf28      	it	cs
 8012f88:	4613      	movcs	r3, r2
 8012f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8012f8c:	88fb      	ldrh	r3, [r7, #6]
 8012f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f90:	429a      	cmp	r2, r3
 8012f92:	d007      	beq.n	8012fa4 <CircularQueue_Add+0x234>
 8012f94:	88fb      	ldrh	r3, [r7, #6]
 8012f96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d225      	bcs.n	8012fe8 <CircularQueue_Add+0x278>
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	7f1b      	ldrb	r3, [r3, #28]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d121      	bne.n	8012fe8 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	681a      	ldr	r2, [r3, #0]
 8012fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012faa:	18d0      	adds	r0, r2, r3
 8012fac:	88fb      	ldrh	r3, [r7, #6]
 8012fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012fb0:	fb02 f303 	mul.w	r3, r2, r3
 8012fb4:	68ba      	ldr	r2, [r7, #8]
 8012fb6:	4413      	add	r3, r2
 8012fb8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012fba:	4619      	mov	r1, r3
 8012fbc:	f004 f8e1 	bl	8017182 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	695a      	ldr	r2, [r3, #20]
 8012fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fc6:	441a      	add	r2, r3
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 8012fcc:	2300      	movs	r3, #0
 8012fce:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 8012fd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fd2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 8012fd4:	88fa      	ldrh	r2, [r7, #6]
 8012fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fd8:	1ad3      	subs	r3, r2, r3
 8012fda:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 8012fdc:	7ffb      	ldrb	r3, [r7, #31]
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	88fb      	ldrh	r3, [r7, #6]
 8012fe2:	4413      	add	r3, r2
 8012fe4:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8012fe6:	e0a4      	b.n	8013132 <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 8012fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	f000 80a1 	beq.w	8013132 <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 8012ff0:	68fb      	ldr	r3, [r7, #12]
 8012ff2:	7f1b      	ldrb	r3, [r3, #28]
 8012ff4:	f003 0301 	and.w	r3, r3, #1
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d03a      	beq.n	8013072 <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	891b      	ldrh	r3, [r3, #8]
 8013000:	2b00      	cmp	r3, #0
 8013002:	d10d      	bne.n	8013020 <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	681a      	ldr	r2, [r3, #0]
 8013008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801300a:	3b02      	subs	r3, #2
 801300c:	4413      	add	r3, r2
 801300e:	22ff      	movs	r2, #255	@ 0xff
 8013010:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013018:	3b01      	subs	r3, #1
 801301a:	4413      	add	r3, r2
 801301c:	22ff      	movs	r2, #255	@ 0xff
 801301e:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	695a      	ldr	r2, [r3, #20]
 8013024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013026:	441a      	add	r2, r3
 8013028:	68fb      	ldr	r3, [r7, #12]
 801302a:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 801302c:	2300      	movs	r3, #0
 801302e:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8013030:	88fb      	ldrh	r3, [r7, #6]
 8013032:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 8013034:	2300      	movs	r3, #0
 8013036:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	891b      	ldrh	r3, [r3, #8]
 801303c:	2b00      	cmp	r3, #0
 801303e:	d16f      	bne.n	8013120 <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013046:	1c59      	adds	r1, r3, #1
 8013048:	6339      	str	r1, [r7, #48]	@ 0x30
 801304a:	4413      	add	r3, r2
 801304c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801304e:	b2d2      	uxtb	r2, r2
 8013050:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8013052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013054:	0a18      	lsrs	r0, r3, #8
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	681a      	ldr	r2, [r3, #0]
 801305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801305c:	1c59      	adds	r1, r3, #1
 801305e:	6339      	str	r1, [r7, #48]	@ 0x30
 8013060:	4413      	add	r3, r2
 8013062:	b2c2      	uxtb	r2, r0
 8013064:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	695b      	ldr	r3, [r3, #20]
 801306a:	1c9a      	adds	r2, r3, #2
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	615a      	str	r2, [r3, #20]
 8013070:	e056      	b.n	8013120 <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	7f1b      	ldrb	r3, [r3, #28]
 8013076:	f003 0302 	and.w	r3, r3, #2
 801307a:	2b00      	cmp	r3, #0
 801307c:	d050      	beq.n	8013120 <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	891b      	ldrh	r3, [r3, #8]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d14a      	bne.n	801311c <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801308c:	3b02      	subs	r3, #2
 801308e:	4413      	add	r3, r2
 8013090:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013092:	b2d2      	uxtb	r2, r2
 8013094:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8013096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013098:	0a19      	lsrs	r1, r3, #8
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	681a      	ldr	r2, [r3, #0]
 801309e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130a0:	3b01      	subs	r3, #1
 80130a2:	4413      	add	r3, r2
 80130a4:	b2ca      	uxtb	r2, r1
 80130a6:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 80130a8:	68fb      	ldr	r3, [r7, #12]
 80130aa:	681a      	ldr	r2, [r3, #0]
 80130ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130ae:	18d0      	adds	r0, r2, r3
 80130b0:	88fb      	ldrh	r3, [r7, #6]
 80130b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80130b4:	fb02 f303 	mul.w	r3, r2, r3
 80130b8:	68ba      	ldr	r2, [r7, #8]
 80130ba:	4413      	add	r3, r2
 80130bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130be:	4619      	mov	r1, r3
 80130c0:	f004 f85f 	bl	8017182 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	695a      	ldr	r2, [r3, #20]
 80130c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130ca:	441a      	add	r2, r3
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80130d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d2:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80130d4:	88fa      	ldrh	r2, [r7, #6]
 80130d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80130dc:	68fb      	ldr	r3, [r7, #12]
 80130de:	699b      	ldr	r3, [r3, #24]
 80130e0:	1c5a      	adds	r2, r3, #1
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80130e6:	2300      	movs	r3, #0
 80130e8:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	681a      	ldr	r2, [r3, #0]
 80130ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80130f0:	1c59      	adds	r1, r3, #1
 80130f2:	6339      	str	r1, [r7, #48]	@ 0x30
 80130f4:	4413      	add	r3, r2
 80130f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80130f8:	b2d2      	uxtb	r2, r2
 80130fa:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80130fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130fe:	0a18      	lsrs	r0, r3, #8
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681a      	ldr	r2, [r3, #0]
 8013104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013106:	1c59      	adds	r1, r3, #1
 8013108:	6339      	str	r1, [r7, #48]	@ 0x30
 801310a:	4413      	add	r3, r2
 801310c:	b2c2      	uxtb	r2, r0
 801310e:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	695b      	ldr	r3, [r3, #20]
 8013114:	1c9a      	adds	r2, r3, #2
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	615a      	str	r2, [r3, #20]
 801311a:	e001      	b.n	8013120 <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 801311c:	2300      	movs	r3, #0
 801311e:	e049      	b.n	80131b4 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8013120:	7ffb      	ldrb	r3, [r7, #31]
 8013122:	b29a      	uxth	r2, r3
 8013124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013126:	b29b      	uxth	r3, r3
 8013128:	4413      	add	r3, r2
 801312a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2200      	movs	r2, #0
 8013130:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8013132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013134:	2b00      	cmp	r3, #0
 8013136:	d015      	beq.n	8013164 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681a      	ldr	r2, [r3, #0]
 801313c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801313e:	18d0      	adds	r0, r2, r3
 8013140:	88fb      	ldrh	r3, [r7, #6]
 8013142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013144:	fb03 f202 	mul.w	r2, r3, r2
 8013148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801314a:	4413      	add	r3, r2
 801314c:	68ba      	ldr	r2, [r7, #8]
 801314e:	4413      	add	r3, r2
 8013150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013152:	4619      	mov	r1, r3
 8013154:	f004 f815 	bl	8017182 <memcpy>
        q->byteCount += NbBytesToCopy;
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	695a      	ldr	r2, [r3, #20]
 801315c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801315e:	441a      	add	r2, r3
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	699b      	ldr	r3, [r3, #24]
 8013168:	1c5a      	adds	r2, r3, #1
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 801316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013170:	3301      	adds	r3, #1
 8013172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	429a      	cmp	r2, r3
 801317a:	f4ff aeb0 	bcc.w	8012ede <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	681a      	ldr	r2, [r3, #0]
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6919      	ldr	r1, [r3, #16]
 8013186:	7ffb      	ldrb	r3, [r7, #31]
 8013188:	4419      	add	r1, r3
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	685b      	ldr	r3, [r3, #4]
 801318e:	4299      	cmp	r1, r3
 8013190:	d307      	bcc.n	80131a2 <CircularQueue_Add+0x432>
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	6919      	ldr	r1, [r3, #16]
 8013196:	7ffb      	ldrb	r3, [r7, #31]
 8013198:	4419      	add	r1, r3
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	685b      	ldr	r3, [r3, #4]
 801319e:	1acb      	subs	r3, r1, r3
 80131a0:	e003      	b.n	80131aa <CircularQueue_Add+0x43a>
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	6919      	ldr	r1, [r3, #16]
 80131a6:	7ffb      	ldrb	r3, [r7, #31]
 80131a8:	440b      	add	r3, r1
 80131aa:	4413      	add	r3, r2
 80131ac:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 80131ae:	6a3b      	ldr	r3, [r7, #32]
 80131b0:	e000      	b.n	80131b4 <CircularQueue_Add+0x444>
    return NULL;
 80131b2:	2300      	movs	r3, #0
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3738      	adds	r7, #56	@ 0x38
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80131bc:	b480      	push	{r7}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80131c6:	2300      	movs	r3, #0
 80131c8:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80131ca:	2300      	movs	r3, #0
 80131cc:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	891b      	ldrh	r3, [r3, #8]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d101      	bne.n	80131da <CircularQueue_Remove+0x1e>
 80131d6:	2302      	movs	r3, #2
 80131d8:	e000      	b.n	80131dc <CircularQueue_Remove+0x20>
 80131da:	2300      	movs	r3, #0
 80131dc:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80131de:	2300      	movs	r3, #0
 80131e0:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	695b      	ldr	r3, [r3, #20]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	f000 80ca 	beq.w	8013380 <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80131ec:	687b      	ldr	r3, [r7, #4]
 80131ee:	891b      	ldrh	r3, [r3, #8]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d120      	bne.n	8013236 <CircularQueue_Remove+0x7a>
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	681a      	ldr	r2, [r3, #0]
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	68db      	ldr	r3, [r3, #12]
 80131fc:	4413      	add	r3, r2
 80131fe:	781b      	ldrb	r3, [r3, #0]
 8013200:	4618      	mov	r0, r3
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	68db      	ldr	r3, [r3, #12]
 801320a:	1c59      	adds	r1, r3, #1
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	685b      	ldr	r3, [r3, #4]
 8013210:	4299      	cmp	r1, r3
 8013212:	d306      	bcc.n	8013222 <CircularQueue_Remove+0x66>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	68d9      	ldr	r1, [r3, #12]
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	685b      	ldr	r3, [r3, #4]
 801321c:	1acb      	subs	r3, r1, r3
 801321e:	3301      	adds	r3, #1
 8013220:	e002      	b.n	8013228 <CircularQueue_Remove+0x6c>
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	68db      	ldr	r3, [r3, #12]
 8013226:	3301      	adds	r3, #1
 8013228:	4413      	add	r3, r2
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	021b      	lsls	r3, r3, #8
 801322e:	b29b      	uxth	r3, r3
 8013230:	4403      	add	r3, r0
 8013232:	b29b      	uxth	r3, r3
 8013234:	e001      	b.n	801323a <CircularQueue_Remove+0x7e>
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	891b      	ldrh	r3, [r3, #8]
 801323a:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	7f1b      	ldrb	r3, [r3, #28]
 8013240:	f003 0301 	and.w	r3, r3, #1
 8013244:	2b00      	cmp	r3, #0
 8013246:	d056      	beq.n	80132f6 <CircularQueue_Remove+0x13a>
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	7f1b      	ldrb	r3, [r3, #28]
 801324c:	f003 0302 	and.w	r3, r3, #2
 8013250:	2b00      	cmp	r3, #0
 8013252:	d150      	bne.n	80132f6 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013254:	897b      	ldrh	r3, [r7, #10]
 8013256:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801325a:	4293      	cmp	r3, r2
 801325c:	d103      	bne.n	8013266 <CircularQueue_Remove+0xaa>
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	891b      	ldrh	r3, [r3, #8]
 8013262:	2b00      	cmp	r3, #0
 8013264:	d012      	beq.n	801328c <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	68da      	ldr	r2, [r3, #12]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801326e:	429a      	cmp	r2, r3
 8013270:	d941      	bls.n	80132f6 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	891b      	ldrh	r3, [r3, #8]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d03d      	beq.n	80132f6 <CircularQueue_Remove+0x13a>
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	685a      	ldr	r2, [r3, #4]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	68db      	ldr	r3, [r3, #12]
 8013282:	1ad3      	subs	r3, r2, r3
 8013284:	687a      	ldr	r2, [r7, #4]
 8013286:	8912      	ldrh	r2, [r2, #8]
 8013288:	4293      	cmp	r3, r2
 801328a:	d234      	bcs.n	80132f6 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	695a      	ldr	r2, [r3, #20]
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	68d9      	ldr	r1, [r3, #12]
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	685b      	ldr	r3, [r3, #4]
 8013298:	1acb      	subs	r3, r1, r3
 801329a:	441a      	add	r2, r3
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2200      	movs	r2, #0
 80132a4:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	891b      	ldrh	r3, [r3, #8]
 80132aa:	2b00      	cmp	r3, #0
 80132ac:	d120      	bne.n	80132f0 <CircularQueue_Remove+0x134>
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	681a      	ldr	r2, [r3, #0]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	68db      	ldr	r3, [r3, #12]
 80132b6:	4413      	add	r3, r2
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	4618      	mov	r0, r3
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	681a      	ldr	r2, [r3, #0]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	68db      	ldr	r3, [r3, #12]
 80132c4:	1c59      	adds	r1, r3, #1
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	685b      	ldr	r3, [r3, #4]
 80132ca:	4299      	cmp	r1, r3
 80132cc:	d306      	bcc.n	80132dc <CircularQueue_Remove+0x120>
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	68d9      	ldr	r1, [r3, #12]
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	685b      	ldr	r3, [r3, #4]
 80132d6:	1acb      	subs	r3, r1, r3
 80132d8:	3301      	adds	r3, #1
 80132da:	e002      	b.n	80132e2 <CircularQueue_Remove+0x126>
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	68db      	ldr	r3, [r3, #12]
 80132e0:	3301      	adds	r3, #1
 80132e2:	4413      	add	r3, r2
 80132e4:	781b      	ldrb	r3, [r3, #0]
 80132e6:	021b      	lsls	r3, r3, #8
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	4403      	add	r3, r0
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	e001      	b.n	80132f4 <CircularQueue_Remove+0x138>
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	891b      	ldrh	r3, [r3, #8]
 80132f4:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	681a      	ldr	r2, [r3, #0]
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	68d9      	ldr	r1, [r3, #12]
 80132fe:	7a7b      	ldrb	r3, [r7, #9]
 8013300:	4419      	add	r1, r3
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	685b      	ldr	r3, [r3, #4]
 8013306:	4299      	cmp	r1, r3
 8013308:	d307      	bcc.n	801331a <CircularQueue_Remove+0x15e>
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	68d9      	ldr	r1, [r3, #12]
 801330e:	7a7b      	ldrb	r3, [r7, #9]
 8013310:	4419      	add	r1, r3
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	685b      	ldr	r3, [r3, #4]
 8013316:	1acb      	subs	r3, r1, r3
 8013318:	e003      	b.n	8013322 <CircularQueue_Remove+0x166>
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	68d9      	ldr	r1, [r3, #12]
 801331e:	7a7b      	ldrb	r3, [r7, #9]
 8013320:	440b      	add	r3, r1
 8013322:	4413      	add	r3, r2
 8013324:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	695b      	ldr	r3, [r3, #20]
 801332a:	8979      	ldrh	r1, [r7, #10]
 801332c:	7a7a      	ldrb	r2, [r7, #9]
 801332e:	440a      	add	r2, r1
 8013330:	1a9a      	subs	r2, r3, r2
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	695b      	ldr	r3, [r3, #20]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d01b      	beq.n	8013376 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	68da      	ldr	r2, [r3, #12]
 8013342:	897b      	ldrh	r3, [r7, #10]
 8013344:	441a      	add	r2, r3
 8013346:	7a7b      	ldrb	r3, [r7, #9]
 8013348:	441a      	add	r2, r3
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	685b      	ldr	r3, [r3, #4]
 801334e:	429a      	cmp	r2, r3
 8013350:	d309      	bcc.n	8013366 <CircularQueue_Remove+0x1aa>
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	68da      	ldr	r2, [r3, #12]
 8013356:	897b      	ldrh	r3, [r7, #10]
 8013358:	441a      	add	r2, r3
 801335a:	7a7b      	ldrb	r3, [r7, #9]
 801335c:	441a      	add	r2, r3
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	685b      	ldr	r3, [r3, #4]
 8013362:	1ad3      	subs	r3, r2, r3
 8013364:	e005      	b.n	8013372 <CircularQueue_Remove+0x1b6>
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	68da      	ldr	r2, [r3, #12]
 801336a:	897b      	ldrh	r3, [r7, #10]
 801336c:	441a      	add	r2, r3
 801336e:	7a7b      	ldrb	r3, [r7, #9]
 8013370:	4413      	add	r3, r2
 8013372:	687a      	ldr	r2, [r7, #4]
 8013374:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	699b      	ldr	r3, [r3, #24]
 801337a:	1e5a      	subs	r2, r3, #1
 801337c:	687b      	ldr	r3, [r7, #4]
 801337e:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d002      	beq.n	801338c <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 8013386:	683b      	ldr	r3, [r7, #0]
 8013388:	897a      	ldrh	r2, [r7, #10]
 801338a:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 801338c:	68fb      	ldr	r3, [r7, #12]
}
 801338e:	4618      	mov	r0, r3
 8013390:	3714      	adds	r7, #20
 8013392:	46bd      	mov	sp, r7
 8013394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013398:	4770      	bx	lr

0801339a <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 801339a:	b480      	push	{r7}
 801339c:	b087      	sub	sp, #28
 801339e:	af00      	add	r7, sp, #0
 80133a0:	6078      	str	r0, [r7, #4]
 80133a2:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80133a4:	2300      	movs	r3, #0
 80133a6:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 80133a8:	2300      	movs	r3, #0
 80133aa:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	891b      	ldrh	r3, [r3, #8]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d101      	bne.n	80133b8 <CircularQueue_Sense+0x1e>
 80133b4:	2302      	movs	r3, #2
 80133b6:	e000      	b.n	80133ba <CircularQueue_Sense+0x20>
 80133b8:	2300      	movs	r3, #0
 80133ba:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80133bc:	2300      	movs	r3, #0
 80133be:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80133c0:	2300      	movs	r3, #0
 80133c2:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	695b      	ldr	r3, [r3, #20]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	f000 808e 	beq.w	80134ea <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	68db      	ldr	r3, [r3, #12]
 80133d2:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	891b      	ldrh	r3, [r3, #8]
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d120      	bne.n	801341e <CircularQueue_Sense+0x84>
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681a      	ldr	r2, [r3, #0]
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	68db      	ldr	r3, [r3, #12]
 80133e4:	4413      	add	r3, r2
 80133e6:	781b      	ldrb	r3, [r3, #0]
 80133e8:	4618      	mov	r0, r3
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	68db      	ldr	r3, [r3, #12]
 80133f2:	1c59      	adds	r1, r3, #1
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	685b      	ldr	r3, [r3, #4]
 80133f8:	4299      	cmp	r1, r3
 80133fa:	d306      	bcc.n	801340a <CircularQueue_Sense+0x70>
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	68d9      	ldr	r1, [r3, #12]
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	685b      	ldr	r3, [r3, #4]
 8013404:	1acb      	subs	r3, r1, r3
 8013406:	3301      	adds	r3, #1
 8013408:	e002      	b.n	8013410 <CircularQueue_Sense+0x76>
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	3301      	adds	r3, #1
 8013410:	4413      	add	r3, r2
 8013412:	781b      	ldrb	r3, [r3, #0]
 8013414:	021b      	lsls	r3, r3, #8
 8013416:	b29b      	uxth	r3, r3
 8013418:	4403      	add	r3, r0
 801341a:	b29b      	uxth	r3, r3
 801341c:	e001      	b.n	8013422 <CircularQueue_Sense+0x88>
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	891b      	ldrh	r3, [r3, #8]
 8013422:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	7f1b      	ldrb	r3, [r3, #28]
 8013428:	f003 0301 	and.w	r3, r3, #1
 801342c:	2b00      	cmp	r3, #0
 801342e:	d047      	beq.n	80134c0 <CircularQueue_Sense+0x126>
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	7f1b      	ldrb	r3, [r3, #28]
 8013434:	f003 0302 	and.w	r3, r3, #2
 8013438:	2b00      	cmp	r3, #0
 801343a:	d141      	bne.n	80134c0 <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801343c:	8a7b      	ldrh	r3, [r7, #18]
 801343e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013442:	4293      	cmp	r3, r2
 8013444:	d103      	bne.n	801344e <CircularQueue_Sense+0xb4>
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	891b      	ldrh	r3, [r3, #8]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d012      	beq.n	8013474 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	68da      	ldr	r2, [r3, #12]
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8013456:	429a      	cmp	r2, r3
 8013458:	d932      	bls.n	80134c0 <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	891b      	ldrh	r3, [r3, #8]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d02e      	beq.n	80134c0 <CircularQueue_Sense+0x126>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	685a      	ldr	r2, [r3, #4]
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	68db      	ldr	r3, [r3, #12]
 801346a:	1ad3      	subs	r3, r2, r3
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	8912      	ldrh	r2, [r2, #8]
 8013470:	4293      	cmp	r3, r2
 8013472:	d225      	bcs.n	80134c0 <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8013474:	2300      	movs	r3, #0
 8013476:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	891b      	ldrh	r3, [r3, #8]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d11c      	bne.n	80134ba <CircularQueue_Sense+0x120>
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	681a      	ldr	r2, [r3, #0]
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	4413      	add	r3, r2
 8013488:	781b      	ldrb	r3, [r3, #0]
 801348a:	4618      	mov	r0, r3
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681a      	ldr	r2, [r3, #0]
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	1c59      	adds	r1, r3, #1
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	685b      	ldr	r3, [r3, #4]
 8013498:	4299      	cmp	r1, r3
 801349a:	d305      	bcc.n	80134a8 <CircularQueue_Sense+0x10e>
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	685b      	ldr	r3, [r3, #4]
 80134a0:	68f9      	ldr	r1, [r7, #12]
 80134a2:	1acb      	subs	r3, r1, r3
 80134a4:	3301      	adds	r3, #1
 80134a6:	e001      	b.n	80134ac <CircularQueue_Sense+0x112>
 80134a8:	68fb      	ldr	r3, [r7, #12]
 80134aa:	3301      	adds	r3, #1
 80134ac:	4413      	add	r3, r2
 80134ae:	781b      	ldrb	r3, [r3, #0]
 80134b0:	021b      	lsls	r3, r3, #8
 80134b2:	b29b      	uxth	r3, r3
 80134b4:	4403      	add	r3, r0
 80134b6:	b29b      	uxth	r3, r3
 80134b8:	e001      	b.n	80134be <CircularQueue_Sense+0x124>
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	891b      	ldrh	r3, [r3, #8]
 80134be:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	7af9      	ldrb	r1, [r7, #11]
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	4419      	add	r1, r3
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	4299      	cmp	r1, r3
 80134d0:	d306      	bcc.n	80134e0 <CircularQueue_Sense+0x146>
 80134d2:	7af9      	ldrb	r1, [r7, #11]
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	4419      	add	r1, r3
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	685b      	ldr	r3, [r3, #4]
 80134dc:	1acb      	subs	r3, r1, r3
 80134de:	e002      	b.n	80134e6 <CircularQueue_Sense+0x14c>
 80134e0:	7af9      	ldrb	r1, [r7, #11]
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	440b      	add	r3, r1
 80134e6:	4413      	add	r3, r2
 80134e8:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80134ea:	683b      	ldr	r3, [r7, #0]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d002      	beq.n	80134f6 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 80134f0:	683b      	ldr	r3, [r7, #0]
 80134f2:	8a7a      	ldrh	r2, [r7, #18]
 80134f4:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80134f6:	697b      	ldr	r3, [r7, #20]
}
 80134f8:	4618      	mov	r0, r3
 80134fa:	371c      	adds	r7, #28
 80134fc:	46bd      	mov	sp, r7
 80134fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013502:	4770      	bx	lr

08013504 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 8013504:	b480      	push	{r7}
 8013506:	b087      	sub	sp, #28
 8013508:	af00      	add	r7, sp, #0
 801350a:	60f8      	str	r0, [r7, #12]
 801350c:	60b9      	str	r1, [r7, #8]
 801350e:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 8013510:	2300      	movs	r3, #0
 8013512:	617b      	str	r3, [r7, #20]
 8013514:	e00a      	b.n	801352c <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 8013516:	68ba      	ldr	r2, [r7, #8]
 8013518:	697b      	ldr	r3, [r7, #20]
 801351a:	441a      	add	r2, r3
 801351c:	68f9      	ldr	r1, [r7, #12]
 801351e:	697b      	ldr	r3, [r7, #20]
 8013520:	440b      	add	r3, r1
 8013522:	7812      	ldrb	r2, [r2, #0]
 8013524:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 8013526:	697b      	ldr	r3, [r7, #20]
 8013528:	3301      	adds	r3, #1
 801352a:	617b      	str	r3, [r7, #20]
 801352c:	697a      	ldr	r2, [r7, #20]
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	429a      	cmp	r2, r3
 8013532:	d3f0      	bcc.n	8013516 <zb_ipc_m4_memcpy2+0x12>
    }
}
 8013534:	bf00      	nop
 8013536:	bf00      	nop
 8013538:	371c      	adds	r7, #28
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr

08013542 <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 8013542:	b580      	push	{r7, lr}
 8013544:	b084      	sub	sp, #16
 8013546:	af00      	add	r7, sp, #0
 8013548:	6078      	str	r0, [r7, #4]
 801354a:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 801354c:	200c      	movs	r0, #12
 801354e:	f003 fb09 	bl	8016b64 <malloc>
 8013552:	4603      	mov	r3, r0
 8013554:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d00a      	beq.n	8013572 <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 801355c:	220c      	movs	r2, #12
 801355e:	2100      	movs	r1, #0
 8013560:	68f8      	ldr	r0, [r7, #12]
 8013562:	f003 fd73 	bl	801704c <memset>
        info->callback = callback;
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	687a      	ldr	r2, [r7, #4]
 801356a:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	683a      	ldr	r2, [r7, #0]
 8013570:	605a      	str	r2, [r3, #4]
    }
    return info;
 8013572:	68fb      	ldr	r3, [r7, #12]
}
 8013574:	4618      	mov	r0, r3
 8013576:	3710      	adds	r7, #16
 8013578:	46bd      	mov	sp, r7
 801357a:	bd80      	pop	{r7, pc}

0801357c <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
    free(info);
 8013584:	6878      	ldr	r0, [r7, #4]
 8013586:	f003 faf5 	bl	8016b74 <free>
}
 801358a:	bf00      	nop
 801358c:	3708      	adds	r7, #8
 801358e:	46bd      	mov	sp, r7
 8013590:	bd80      	pop	{r7, pc}
	...

08013594 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801359a:	f7f5 ff5b 	bl	8009454 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 801359e:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	685b      	ldr	r3, [r3, #4]
 80135a4:	2b01      	cmp	r3, #1
 80135a6:	d006      	beq.n	80135b6 <zb_ipc_m4_get_retval+0x22>
 80135a8:	4b09      	ldr	r3, [pc, #36]	@ (80135d0 <zb_ipc_m4_get_retval+0x3c>)
 80135aa:	4a0a      	ldr	r2, [pc, #40]	@ (80135d4 <zb_ipc_m4_get_retval+0x40>)
 80135ac:	f240 1151 	movw	r1, #337	@ 0x151
 80135b0:	4809      	ldr	r0, [pc, #36]	@ (80135d8 <zb_ipc_m4_get_retval+0x44>)
 80135b2:	f003 fab9 	bl	8016b28 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	f103 0108 	add.w	r1, r3, #8
 80135bc:	463b      	mov	r3, r7
 80135be:	2204      	movs	r2, #4
 80135c0:	4618      	mov	r0, r3
 80135c2:	f7ff ff9f 	bl	8013504 <zb_ipc_m4_memcpy2>
    return retval;
 80135c6:	683b      	ldr	r3, [r7, #0]
}
 80135c8:	4618      	mov	r0, r3
 80135ca:	3708      	adds	r7, #8
 80135cc:	46bd      	mov	sp, r7
 80135ce:	bd80      	pop	{r7, pc}
 80135d0:	08018448 	.word	0x08018448
 80135d4:	08018dbc 	.word	0x08018dbc
 80135d8:	0801845c 	.word	0x0801845c

080135dc <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 80135dc:	b580      	push	{r7, lr}
 80135de:	b086      	sub	sp, #24
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80135e6:	607a      	str	r2, [r7, #4]
 80135e8:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 80135ea:	4b25      	ldr	r3, [pc, #148]	@ (8013680 <ZbInit+0xa4>)
 80135ec:	681b      	ldr	r3, [r3, #0]
 80135ee:	2b00      	cmp	r3, #0
 80135f0:	d001      	beq.n	80135f6 <ZbInit+0x1a>
        return NULL;
 80135f2:	2300      	movs	r3, #0
 80135f4:	e03f      	b.n	8013676 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 80135f6:	f7f5 ff8f 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80135fa:	f7f5 ff1f 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80135fe:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 8013600:	697b      	ldr	r3, [r7, #20]
 8013602:	2200      	movs	r2, #0
 8013604:	f042 020a 	orr.w	r2, r2, #10
 8013608:	701a      	strb	r2, [r3, #0]
 801360a:	2200      	movs	r2, #0
 801360c:	705a      	strb	r2, [r3, #1]
 801360e:	2200      	movs	r2, #0
 8013610:	709a      	strb	r2, [r3, #2]
 8013612:	2200      	movs	r2, #0
 8013614:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8013616:	697b      	ldr	r3, [r7, #20]
 8013618:	2200      	movs	r2, #0
 801361a:	f042 0204 	orr.w	r2, r2, #4
 801361e:	711a      	strb	r2, [r3, #4]
 8013620:	2200      	movs	r2, #0
 8013622:	715a      	strb	r2, [r3, #5]
 8013624:	2200      	movs	r2, #0
 8013626:	719a      	strb	r2, [r3, #6]
 8013628:	2200      	movs	r2, #0
 801362a:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	3308      	adds	r3, #8
 8013630:	f107 0108 	add.w	r1, r7, #8
 8013634:	2208      	movs	r2, #8
 8013636:	4618      	mov	r0, r3
 8013638:	f7ff ff64 	bl	8013504 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 801363c:	687a      	ldr	r2, [r7, #4]
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 8013642:	683a      	ldr	r2, [r7, #0]
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8013648:	f7f5 ff28 	bl	800949c <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 801364c:	f7ff ffa2 	bl	8013594 <zb_ipc_m4_get_retval>
 8013650:	4603      	mov	r3, r0
 8013652:	461a      	mov	r2, r3
 8013654:	4b0a      	ldr	r3, [pc, #40]	@ (8013680 <ZbInit+0xa4>)
 8013656:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 8013658:	f7ff f9b4 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d007      	beq.n	8013672 <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	4a06      	ldr	r2, [pc, #24]	@ (8013680 <ZbInit+0xa4>)
 8013668:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 801366a:	683b      	ldr	r3, [r7, #0]
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4a04      	ldr	r2, [pc, #16]	@ (8013680 <ZbInit+0xa4>)
 8013670:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 8013672:	4b03      	ldr	r3, [pc, #12]	@ (8013680 <ZbInit+0xa4>)
 8013674:	681b      	ldr	r3, [r3, #0]
}
 8013676:	4618      	mov	r0, r3
 8013678:	3718      	adds	r7, #24
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
 801367e:	bf00      	nop
 8013680:	20001a28 	.word	0x20001a28

08013684 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 8013684:	b580      	push	{r7, lr}
 8013686:	b086      	sub	sp, #24
 8013688:	af00      	add	r7, sp, #0
 801368a:	60f8      	str	r0, [r7, #12]
 801368c:	60b9      	str	r1, [r7, #8]
 801368e:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8013690:	f7f5 ff42 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013694:	f7f5 fed2 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013698:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	2200      	movs	r2, #0
 801369e:	f042 0213 	orr.w	r2, r2, #19
 80136a2:	701a      	strb	r2, [r3, #0]
 80136a4:	2200      	movs	r2, #0
 80136a6:	705a      	strb	r2, [r3, #1]
 80136a8:	2200      	movs	r2, #0
 80136aa:	709a      	strb	r2, [r3, #2]
 80136ac:	2200      	movs	r2, #0
 80136ae:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80136b0:	697b      	ldr	r3, [r7, #20]
 80136b2:	2200      	movs	r2, #0
 80136b4:	f042 0202 	orr.w	r2, r2, #2
 80136b8:	711a      	strb	r2, [r3, #4]
 80136ba:	2200      	movs	r2, #0
 80136bc:	715a      	strb	r2, [r3, #5]
 80136be:	2200      	movs	r2, #0
 80136c0:	719a      	strb	r2, [r3, #6]
 80136c2:	2200      	movs	r2, #0
 80136c4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 80136c6:	697b      	ldr	r3, [r7, #20]
 80136c8:	68ba      	ldr	r2, [r7, #8]
 80136ca:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 80136cc:	4b0c      	ldr	r3, [pc, #48]	@ (8013700 <ZbSetLogging+0x7c>)
 80136ce:	7b1b      	ldrb	r3, [r3, #12]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d102      	bne.n	80136da <ZbSetLogging+0x56>
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d001      	beq.n	80136de <ZbSetLogging+0x5a>
 80136da:	2201      	movs	r2, #1
 80136dc:	e000      	b.n	80136e0 <ZbSetLogging+0x5c>
 80136de:	2200      	movs	r2, #0
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80136e4:	f7f5 feda 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80136e8:	f7ff f96c 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 80136ec:	4a04      	ldr	r2, [pc, #16]	@ (8013700 <ZbSetLogging+0x7c>)
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 80136f2:	4a03      	ldr	r2, [pc, #12]	@ (8013700 <ZbSetLogging+0x7c>)
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	6093      	str	r3, [r2, #8]
}
 80136f8:	bf00      	nop
 80136fa:	3718      	adds	r7, #24
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	20001a28 	.word	0x20001a28

08013704 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b086      	sub	sp, #24
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 801370c:	f04f 0200 	mov.w	r2, #0
 8013710:	f04f 0300 	mov.w	r3, #0
 8013714:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 8013718:	f7f5 fefe 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801371c:	f7f5 fe8e 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013720:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	2200      	movs	r2, #0
 8013726:	f042 020e 	orr.w	r2, r2, #14
 801372a:	701a      	strb	r2, [r3, #0]
 801372c:	2200      	movs	r2, #0
 801372e:	705a      	strb	r2, [r3, #1]
 8013730:	2200      	movs	r2, #0
 8013732:	709a      	strb	r2, [r3, #2]
 8013734:	2200      	movs	r2, #0
 8013736:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 8013738:	697b      	ldr	r3, [r7, #20]
 801373a:	2200      	movs	r2, #0
 801373c:	711a      	strb	r2, [r3, #4]
 801373e:	2200      	movs	r2, #0
 8013740:	715a      	strb	r2, [r3, #5]
 8013742:	2200      	movs	r2, #0
 8013744:	719a      	strb	r2, [r3, #6]
 8013746:	2200      	movs	r2, #0
 8013748:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 801374a:	f7f5 fea7 	bl	800949c <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 801374e:	f7f5 fe81 	bl	8009454 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 8013752:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	685b      	ldr	r3, [r3, #4]
 8013758:	2b02      	cmp	r3, #2
 801375a:	d006      	beq.n	801376a <ZbExtendedAddress+0x66>
 801375c:	4b0c      	ldr	r3, [pc, #48]	@ (8013790 <ZbExtendedAddress+0x8c>)
 801375e:	4a0d      	ldr	r2, [pc, #52]	@ (8013794 <ZbExtendedAddress+0x90>)
 8013760:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8013764:	480c      	ldr	r0, [pc, #48]	@ (8013798 <ZbExtendedAddress+0x94>)
 8013766:	f003 f9df 	bl	8016b28 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 801376a:	697b      	ldr	r3, [r7, #20]
 801376c:	f103 0108 	add.w	r1, r3, #8
 8013770:	f107 0308 	add.w	r3, r7, #8
 8013774:	2208      	movs	r2, #8
 8013776:	4618      	mov	r0, r3
 8013778:	f7ff fec4 	bl	8013504 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 801377c:	f7ff f922 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return ext_addr;
 8013780:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8013784:	4610      	mov	r0, r2
 8013786:	4619      	mov	r1, r3
 8013788:	3718      	adds	r7, #24
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	080184e4 	.word	0x080184e4
 8013794:	08018dd4 	.word	0x08018dd4
 8013798:	0801845c 	.word	0x0801845c

0801379c <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 80137a4:	2300      	movs	r3, #0
 80137a6:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 80137a8:	f107 020e 	add.w	r2, r7, #14
 80137ac:	2302      	movs	r3, #2
 80137ae:	2196      	movs	r1, #150	@ 0x96
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f000 fc8d 	bl	80140d0 <ZbNwkGet>
    return nwkAddr;
 80137b6:	89fb      	ldrh	r3, [r7, #14]
}
 80137b8:	4618      	mov	r0, r3
 80137ba:	3710      	adds	r7, #16
 80137bc:	46bd      	mov	sp, r7
 80137be:	bd80      	pop	{r7, pc}

080137c0 <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 80137c0:	b580      	push	{r7, lr}
 80137c2:	b084      	sub	sp, #16
 80137c4:	af00      	add	r7, sp, #0
 80137c6:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80137c8:	f7f5 fea6 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80137cc:	f7f5 fe36 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80137d0:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	2200      	movs	r2, #0
 80137d6:	f042 021b 	orr.w	r2, r2, #27
 80137da:	701a      	strb	r2, [r3, #0]
 80137dc:	2200      	movs	r2, #0
 80137de:	705a      	strb	r2, [r3, #1]
 80137e0:	2200      	movs	r2, #0
 80137e2:	709a      	strb	r2, [r3, #2]
 80137e4:	2200      	movs	r2, #0
 80137e6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80137e8:	68fb      	ldr	r3, [r7, #12]
 80137ea:	2200      	movs	r2, #0
 80137ec:	f042 0201 	orr.w	r2, r2, #1
 80137f0:	711a      	strb	r2, [r3, #4]
 80137f2:	2200      	movs	r2, #0
 80137f4:	715a      	strb	r2, [r3, #5]
 80137f6:	2200      	movs	r2, #0
 80137f8:	719a      	strb	r2, [r3, #6]
 80137fa:	2200      	movs	r2, #0
 80137fc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 80137fe:	687a      	ldr	r2, [r7, #4]
 8013800:	68fb      	ldr	r3, [r7, #12]
 8013802:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013804:	f7f5 fe4a 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013808:	f7ff f8dc 	bl	80129c4 <Post_ZigbeeCmdProcessing>
}
 801380c:	bf00      	nop
 801380e:	3710      	adds	r7, #16
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b088      	sub	sp, #32
 8013818:	af00      	add	r7, sp, #0
 801381a:	60f8      	str	r0, [r7, #12]
 801381c:	60b9      	str	r1, [r7, #8]
 801381e:	607a      	str	r2, [r7, #4]
 8013820:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8013822:	6839      	ldr	r1, [r7, #0]
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f7ff fe8c 	bl	8013542 <zb_ipc_m4_cb_info_alloc>
 801382a:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d101      	bne.n	8013836 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 8013832:	2370      	movs	r3, #112	@ 0x70
 8013834:	e036      	b.n	80138a4 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 8013836:	68bb      	ldr	r3, [r7, #8]
 8013838:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 801383c:	681b      	ldr	r3, [r3, #0]
 801383e:	461a      	mov	r2, r3
 8013840:	4b1a      	ldr	r3, [pc, #104]	@ (80138ac <ZbStartup+0x98>)
 8013842:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 8013844:	f7f5 fe68 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013848:	f7f5 fdf8 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801384c:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	2200      	movs	r2, #0
 8013852:	f042 021c 	orr.w	r2, r2, #28
 8013856:	701a      	strb	r2, [r3, #0]
 8013858:	2200      	movs	r2, #0
 801385a:	705a      	strb	r2, [r3, #1]
 801385c:	2200      	movs	r2, #0
 801385e:	709a      	strb	r2, [r3, #2]
 8013860:	2200      	movs	r2, #0
 8013862:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	2200      	movs	r2, #0
 8013868:	f042 0202 	orr.w	r2, r2, #2
 801386c:	711a      	strb	r2, [r3, #4]
 801386e:	2200      	movs	r2, #0
 8013870:	715a      	strb	r2, [r3, #5]
 8013872:	2200      	movs	r2, #0
 8013874:	719a      	strb	r2, [r3, #6]
 8013876:	2200      	movs	r2, #0
 8013878:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 801387a:	68ba      	ldr	r2, [r7, #8]
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8013880:	69fa      	ldr	r2, [r7, #28]
 8013882:	69bb      	ldr	r3, [r7, #24]
 8013884:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013886:	f7f5 fe09 	bl	800949c <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 801388a:	f7ff fe83 	bl	8013594 <zb_ipc_m4_get_retval>
 801388e:	4603      	mov	r3, r0
 8013890:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8013892:	f7ff f897 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 8013896:	7dfb      	ldrb	r3, [r7, #23]
 8013898:	2b00      	cmp	r3, #0
 801389a:	d002      	beq.n	80138a2 <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 801389c:	69f8      	ldr	r0, [r7, #28]
 801389e:	f7ff fe6d 	bl	801357c <zb_ipc_m4_cb_info_free>
    }
    return status;
 80138a2:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3720      	adds	r7, #32
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	20001a14 	.word	0x20001a14

080138b0 <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b08c      	sub	sp, #48	@ 0x30
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	607a      	str	r2, [r7, #4]
 80138ba:	603b      	str	r3, [r7, #0]
 80138bc:	460b      	mov	r3, r1
 80138be:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 80138c0:	897b      	ldrh	r3, [r7, #10]
 80138c2:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 80138cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80138ce:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 80138d0:	f7f5 fe22 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80138d4:	f7f5 fdb2 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80138d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 80138da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138dc:	2200      	movs	r2, #0
 80138de:	701a      	strb	r2, [r3, #0]
 80138e0:	2200      	movs	r2, #0
 80138e2:	f042 0202 	orr.w	r2, r2, #2
 80138e6:	705a      	strb	r2, [r3, #1]
 80138e8:	2200      	movs	r2, #0
 80138ea:	709a      	strb	r2, [r3, #2]
 80138ec:	2200      	movs	r2, #0
 80138ee:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 80138f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138f2:	2200      	movs	r2, #0
 80138f4:	f042 0202 	orr.w	r2, r2, #2
 80138f8:	711a      	strb	r2, [r3, #4]
 80138fa:	2200      	movs	r2, #0
 80138fc:	715a      	strb	r2, [r3, #5]
 80138fe:	2200      	movs	r2, #0
 8013900:	719a      	strb	r2, [r3, #6]
 8013902:	2200      	movs	r2, #0
 8013904:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 8013906:	f107 0218 	add.w	r2, r7, #24
 801390a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801390c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 801390e:	f107 0214 	add.w	r2, r7, #20
 8013912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013914:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013916:	f7f5 fdc1 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801391a:	f7ff f853 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 801391e:	7d3b      	ldrb	r3, [r7, #20]
 8013920:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8013924:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8013928:	4618      	mov	r0, r3
 801392a:	3730      	adds	r7, #48	@ 0x30
 801392c:	46bd      	mov	sp, r7
 801392e:	bd80      	pop	{r7, pc}

08013930 <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 8013930:	b580      	push	{r7, lr}
 8013932:	b088      	sub	sp, #32
 8013934:	af00      	add	r7, sp, #0
 8013936:	60f8      	str	r0, [r7, #12]
 8013938:	60b9      	str	r1, [r7, #8]
 801393a:	607a      	str	r2, [r7, #4]
 801393c:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 801393e:	6839      	ldr	r1, [r7, #0]
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7ff fdfe 	bl	8013542 <zb_ipc_m4_cb_info_alloc>
 8013946:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 8013948:	69fb      	ldr	r3, [r7, #28]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d101      	bne.n	8013952 <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 801394e:	2370      	movs	r3, #112	@ 0x70
 8013950:	e031      	b.n	80139b6 <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 8013952:	f7f5 fde1 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013956:	f7f5 fd71 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801395a:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 801395c:	69bb      	ldr	r3, [r7, #24]
 801395e:	2200      	movs	r2, #0
 8013960:	f042 0204 	orr.w	r2, r2, #4
 8013964:	701a      	strb	r2, [r3, #0]
 8013966:	2200      	movs	r2, #0
 8013968:	f042 0202 	orr.w	r2, r2, #2
 801396c:	705a      	strb	r2, [r3, #1]
 801396e:	2200      	movs	r2, #0
 8013970:	709a      	strb	r2, [r3, #2]
 8013972:	2200      	movs	r2, #0
 8013974:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013976:	69bb      	ldr	r3, [r7, #24]
 8013978:	2200      	movs	r2, #0
 801397a:	f042 0202 	orr.w	r2, r2, #2
 801397e:	711a      	strb	r2, [r3, #4]
 8013980:	2200      	movs	r2, #0
 8013982:	715a      	strb	r2, [r3, #5]
 8013984:	2200      	movs	r2, #0
 8013986:	719a      	strb	r2, [r3, #6]
 8013988:	2200      	movs	r2, #0
 801398a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 801398c:	68ba      	ldr	r2, [r7, #8]
 801398e:	69bb      	ldr	r3, [r7, #24]
 8013990:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8013992:	69fa      	ldr	r2, [r7, #28]
 8013994:	69bb      	ldr	r3, [r7, #24]
 8013996:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013998:	f7f5 fd80 	bl	800949c <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 801399c:	f7ff fdfa 	bl	8013594 <zb_ipc_m4_get_retval>
 80139a0:	4603      	mov	r3, r0
 80139a2:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 80139a4:	f7ff f80e 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 80139a8:	7dfb      	ldrb	r3, [r7, #23]
 80139aa:	2b00      	cmp	r3, #0
 80139ac:	d002      	beq.n	80139b4 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 80139ae:	69f8      	ldr	r0, [r7, #28]
 80139b0:	f7ff fde4 	bl	801357c <zb_ipc_m4_cb_info_free>
    }
    return status;
 80139b4:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 80139b6:	4618      	mov	r0, r3
 80139b8:	3720      	adds	r7, #32
 80139ba:	46bd      	mov	sp, r7
 80139bc:	bd80      	pop	{r7, pc}

080139be <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 80139be:	b580      	push	{r7, lr}
 80139c0:	b084      	sub	sp, #16
 80139c2:	af00      	add	r7, sp, #0
 80139c4:	6078      	str	r0, [r7, #4]
 80139c6:	460b      	mov	r3, r1
 80139c8:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 80139ca:	f7f5 fda5 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80139ce:	f7f5 fd35 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80139d2:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 80139d4:	68fb      	ldr	r3, [r7, #12]
 80139d6:	2200      	movs	r2, #0
 80139d8:	f042 020d 	orr.w	r2, r2, #13
 80139dc:	701a      	strb	r2, [r3, #0]
 80139de:	2200      	movs	r2, #0
 80139e0:	f042 0202 	orr.w	r2, r2, #2
 80139e4:	705a      	strb	r2, [r3, #1]
 80139e6:	2200      	movs	r2, #0
 80139e8:	709a      	strb	r2, [r3, #2]
 80139ea:	2200      	movs	r2, #0
 80139ec:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	2200      	movs	r2, #0
 80139f2:	f042 0201 	orr.w	r2, r2, #1
 80139f6:	711a      	strb	r2, [r3, #4]
 80139f8:	2200      	movs	r2, #0
 80139fa:	715a      	strb	r2, [r3, #5]
 80139fc:	2200      	movs	r2, #0
 80139fe:	719a      	strb	r2, [r3, #6]
 8013a00:	2200      	movs	r2, #0
 8013a02:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 8013a04:	78fa      	ldrb	r2, [r7, #3]
 8013a06:	68fb      	ldr	r3, [r7, #12]
 8013a08:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013a0a:	f7f5 fd47 	bl	800949c <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 8013a0e:	f7ff fdc1 	bl	8013594 <zb_ipc_m4_get_retval>
 8013a12:	4603      	mov	r3, r0
 8013a14:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 8013a16:	f7fe ffd5 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return val_ret;
 8013a1a:	897b      	ldrh	r3, [r7, #10]
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3710      	adds	r7, #16
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}

08013a24 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 8013a24:	b480      	push	{r7}
 8013a26:	b083      	sub	sp, #12
 8013a28:	af00      	add	r7, sp, #0
 8013a2a:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	781b      	ldrb	r3, [r3, #0]
 8013a30:	2b01      	cmp	r3, #1
 8013a32:	d101      	bne.n	8013a38 <ZbApsAddrIsBcast+0x14>
        return true;
 8013a34:	2301      	movs	r3, #1
 8013a36:	e012      	b.n	8013a5e <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	781b      	ldrb	r3, [r3, #0]
 8013a3c:	2b02      	cmp	r3, #2
 8013a3e:	d10d      	bne.n	8013a5c <ZbApsAddrIsBcast+0x38>
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	88db      	ldrh	r3, [r3, #6]
 8013a44:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8013a48:	4293      	cmp	r3, r2
 8013a4a:	d907      	bls.n	8013a5c <ZbApsAddrIsBcast+0x38>
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	88db      	ldrh	r3, [r3, #6]
 8013a50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8013a54:	4293      	cmp	r3, r2
 8013a56:	d001      	beq.n	8013a5c <ZbApsAddrIsBcast+0x38>
        return true;
 8013a58:	2301      	movs	r3, #1
 8013a5a:	e000      	b.n	8013a5e <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 8013a5c:	2300      	movs	r3, #0
}
 8013a5e:	4618      	mov	r0, r3
 8013a60:	370c      	adds	r7, #12
 8013a62:	46bd      	mov	sp, r7
 8013a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a68:	4770      	bx	lr

08013a6a <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 8013a6a:	b5b0      	push	{r4, r5, r7, lr}
 8013a6c:	b082      	sub	sp, #8
 8013a6e:	af00      	add	r7, sp, #0
 8013a70:	6078      	str	r0, [r7, #4]
 8013a72:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 8013a74:	683b      	ldr	r3, [r7, #0]
 8013a76:	781b      	ldrb	r3, [r3, #0]
 8013a78:	2b03      	cmp	r3, #3
 8013a7a:	d10d      	bne.n	8013a98 <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 8013a7c:	683b      	ldr	r3, [r7, #0]
 8013a7e:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f7ff fe3e 	bl	8013704 <ZbExtendedAddress>
 8013a88:	4602      	mov	r2, r0
 8013a8a:	460b      	mov	r3, r1
 8013a8c:	429d      	cmp	r5, r3
 8013a8e:	bf08      	it	eq
 8013a90:	4294      	cmpeq	r4, r2
 8013a92:	d101      	bne.n	8013a98 <ZbApsAddrIsLocal+0x2e>
            return true;
 8013a94:	2301      	movs	r3, #1
 8013a96:	e00e      	b.n	8013ab6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 8013a98:	683b      	ldr	r3, [r7, #0]
 8013a9a:	781b      	ldrb	r3, [r3, #0]
 8013a9c:	2b02      	cmp	r3, #2
 8013a9e:	d109      	bne.n	8013ab4 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 8013aa0:	683b      	ldr	r3, [r7, #0]
 8013aa2:	88dc      	ldrh	r4, [r3, #6]
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f7ff fe79 	bl	801379c <ZbShortAddress>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	429c      	cmp	r4, r3
 8013aae:	d101      	bne.n	8013ab4 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	e000      	b.n	8013ab6 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 8013ab4:	2300      	movs	r3, #0
}
 8013ab6:	4618      	mov	r0, r3
 8013ab8:	3708      	adds	r7, #8
 8013aba:	46bd      	mov	sp, r7
 8013abc:	bdb0      	pop	{r4, r5, r7, pc}

08013abe <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8013abe:	b580      	push	{r7, lr}
 8013ac0:	b08a      	sub	sp, #40	@ 0x28
 8013ac2:	af00      	add	r7, sp, #0
 8013ac4:	60f8      	str	r0, [r7, #12]
 8013ac6:	607a      	str	r2, [r7, #4]
 8013ac8:	603b      	str	r3, [r7, #0]
 8013aca:	460b      	mov	r3, r1
 8013acc:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 8013ace:	897b      	ldrh	r3, [r7, #10]
 8013ad0:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 8013ad6:	683b      	ldr	r3, [r7, #0]
 8013ad8:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 8013ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013adc:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 8013ade:	f7f5 fd1b 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013ae2:	f7f5 fcab 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013ae6:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 8013ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013aea:	2200      	movs	r2, #0
 8013aec:	f042 0210 	orr.w	r2, r2, #16
 8013af0:	701a      	strb	r2, [r3, #0]
 8013af2:	2200      	movs	r2, #0
 8013af4:	f042 0202 	orr.w	r2, r2, #2
 8013af8:	705a      	strb	r2, [r3, #1]
 8013afa:	2200      	movs	r2, #0
 8013afc:	709a      	strb	r2, [r3, #2]
 8013afe:	2200      	movs	r2, #0
 8013b00:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b04:	2200      	movs	r2, #0
 8013b06:	f042 0202 	orr.w	r2, r2, #2
 8013b0a:	711a      	strb	r2, [r3, #4]
 8013b0c:	2200      	movs	r2, #0
 8013b0e:	715a      	strb	r2, [r3, #5]
 8013b10:	2200      	movs	r2, #0
 8013b12:	719a      	strb	r2, [r3, #6]
 8013b14:	2200      	movs	r2, #0
 8013b16:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 8013b18:	f107 0214 	add.w	r2, r7, #20
 8013b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b1e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 8013b20:	f107 0210 	add.w	r2, r7, #16
 8013b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013b26:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013b28:	f7f5 fcb8 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013b2c:	f7fe ff4a 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 8013b30:	7c3b      	ldrb	r3, [r7, #16]
}
 8013b32:	4618      	mov	r0, r3
 8013b34:	3728      	adds	r7, #40	@ 0x28
 8013b36:	46bd      	mov	sp, r7
 8013b38:	bd80      	pop	{r7, pc}

08013b3a <ZbApsmeAddGroupReq>:
        *idx = i;
    }
    return key;
}

IPC_REQ_CONF_FUNC(ZbApsmeAddGroupReq, MSG_M4TOM0_APSME_ADD_GROUP,
 8013b3a:	b580      	push	{r7, lr}
 8013b3c:	b086      	sub	sp, #24
 8013b3e:	af00      	add	r7, sp, #0
 8013b40:	60f8      	str	r0, [r7, #12]
 8013b42:	60b9      	str	r1, [r7, #8]
 8013b44:	607a      	str	r2, [r7, #4]
 8013b46:	f7f5 fce7 	bl	8009518 <Pre_ZigbeeCmdProcessing>
 8013b4a:	f7f5 fc77 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013b4e:	6178      	str	r0, [r7, #20]
 8013b50:	697b      	ldr	r3, [r7, #20]
 8013b52:	2200      	movs	r2, #0
 8013b54:	f042 0212 	orr.w	r2, r2, #18
 8013b58:	701a      	strb	r2, [r3, #0]
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	f042 0202 	orr.w	r2, r2, #2
 8013b60:	705a      	strb	r2, [r3, #1]
 8013b62:	2200      	movs	r2, #0
 8013b64:	709a      	strb	r2, [r3, #2]
 8013b66:	2200      	movs	r2, #0
 8013b68:	70da      	strb	r2, [r3, #3]
 8013b6a:	697b      	ldr	r3, [r7, #20]
 8013b6c:	2200      	movs	r2, #0
 8013b6e:	f042 0202 	orr.w	r2, r2, #2
 8013b72:	711a      	strb	r2, [r3, #4]
 8013b74:	2200      	movs	r2, #0
 8013b76:	715a      	strb	r2, [r3, #5]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	719a      	strb	r2, [r3, #6]
 8013b7c:	2200      	movs	r2, #0
 8013b7e:	71da      	strb	r2, [r3, #7]
 8013b80:	68ba      	ldr	r2, [r7, #8]
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	609a      	str	r2, [r3, #8]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	697b      	ldr	r3, [r7, #20]
 8013b8a:	60da      	str	r2, [r3, #12]
 8013b8c:	f7f5 fc86 	bl	800949c <ZIGBEE_CmdTransfer>
 8013b90:	f7fe ff18 	bl	80129c4 <Post_ZigbeeCmdProcessing>
 8013b94:	3718      	adds	r7, #24
 8013b96:	46bd      	mov	sp, r7
 8013b98:	bd80      	pop	{r7, pc}

08013b9a <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 8013b9a:	b580      	push	{r7, lr}
 8013b9c:	b086      	sub	sp, #24
 8013b9e:	af00      	add	r7, sp, #0
 8013ba0:	60f8      	str	r0, [r7, #12]
 8013ba2:	60b9      	str	r1, [r7, #8]
 8013ba4:	607a      	str	r2, [r7, #4]
 8013ba6:	f7f5 fcb7 	bl	8009518 <Pre_ZigbeeCmdProcessing>
 8013baa:	f7f5 fc47 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013bae:	6178      	str	r0, [r7, #20]
 8013bb0:	697b      	ldr	r3, [r7, #20]
 8013bb2:	2200      	movs	r2, #0
 8013bb4:	f042 0215 	orr.w	r2, r2, #21
 8013bb8:	701a      	strb	r2, [r3, #0]
 8013bba:	2200      	movs	r2, #0
 8013bbc:	f042 0202 	orr.w	r2, r2, #2
 8013bc0:	705a      	strb	r2, [r3, #1]
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	709a      	strb	r2, [r3, #2]
 8013bc6:	2200      	movs	r2, #0
 8013bc8:	70da      	strb	r2, [r3, #3]
 8013bca:	697b      	ldr	r3, [r7, #20]
 8013bcc:	2200      	movs	r2, #0
 8013bce:	f042 0202 	orr.w	r2, r2, #2
 8013bd2:	711a      	strb	r2, [r3, #4]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	715a      	strb	r2, [r3, #5]
 8013bd8:	2200      	movs	r2, #0
 8013bda:	719a      	strb	r2, [r3, #6]
 8013bdc:	2200      	movs	r2, #0
 8013bde:	71da      	strb	r2, [r3, #7]
 8013be0:	68ba      	ldr	r2, [r7, #8]
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	609a      	str	r2, [r3, #8]
 8013be6:	687a      	ldr	r2, [r7, #4]
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	60da      	str	r2, [r3, #12]
 8013bec:	f7f5 fc56 	bl	800949c <ZIGBEE_CmdTransfer>
 8013bf0:	f7fe fee8 	bl	80129c4 <Post_ZigbeeCmdProcessing>
 8013bf4:	3718      	adds	r7, #24
 8013bf6:	46bd      	mov	sp, r7
 8013bf8:	bd80      	pop	{r7, pc}

08013bfa <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 8013bfa:	b580      	push	{r7, lr}
 8013bfc:	b092      	sub	sp, #72	@ 0x48
 8013bfe:	af02      	add	r7, sp, #8
 8013c00:	6078      	str	r0, [r7, #4]
 8013c02:	460b      	mov	r3, r1
 8013c04:	70fb      	strb	r3, [r7, #3]
 8013c06:	4613      	mov	r3, r2
 8013c08:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f7ff fd7a 	bl	8013704 <ZbExtendedAddress>
 8013c10:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 8013c14:	2300      	movs	r3, #0
 8013c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8013c18:	f107 0208 	add.w	r2, r7, #8
 8013c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c1e:	9300      	str	r3, [sp, #0]
 8013c20:	2320      	movs	r3, #32
 8013c22:	21c1      	movs	r1, #193	@ 0xc1
 8013c24:	6878      	ldr	r0, [r7, #4]
 8013c26:	f7ff ff4a 	bl	8013abe <ZbApsGetIndex>
 8013c2a:	4603      	mov	r3, r0
 8013c2c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 8013c30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d120      	bne.n	8013c7a <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 8013c38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	d011      	beq.n	8013c64 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 8013c40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8013c44:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8013c48:	4299      	cmp	r1, r3
 8013c4a:	bf08      	it	eq
 8013c4c:	4290      	cmpeq	r0, r2
 8013c4e:	d10b      	bne.n	8013c68 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 8013c50:	7c3b      	ldrb	r3, [r7, #16]
 8013c52:	78fa      	ldrb	r2, [r7, #3]
 8013c54:	429a      	cmp	r2, r3
 8013c56:	d109      	bne.n	8013c6c <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 8013c58:	8a7b      	ldrh	r3, [r7, #18]
 8013c5a:	883a      	ldrh	r2, [r7, #0]
 8013c5c:	429a      	cmp	r2, r3
 8013c5e:	d107      	bne.n	8013c70 <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 8013c60:	2301      	movs	r3, #1
 8013c62:	e00c      	b.n	8013c7e <ZbApsBindSrcExists+0x84>
            continue;
 8013c64:	bf00      	nop
 8013c66:	e004      	b.n	8013c72 <ZbApsBindSrcExists+0x78>
            continue;
 8013c68:	bf00      	nop
 8013c6a:	e002      	b.n	8013c72 <ZbApsBindSrcExists+0x78>
            continue;
 8013c6c:	bf00      	nop
 8013c6e:	e000      	b.n	8013c72 <ZbApsBindSrcExists+0x78>
            continue;
 8013c70:	bf00      	nop
    for (i = 0;; i++) {
 8013c72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013c74:	3301      	adds	r3, #1
 8013c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 8013c78:	e7ce      	b.n	8013c18 <ZbApsBindSrcExists+0x1e>
            break;
 8013c7a:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 8013c7c:	2300      	movs	r3, #0
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3740      	adds	r7, #64	@ 0x40
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
	...

08013c88 <ZbMsgFilterRegister>:
static struct zb_msg_filter_cb_info_t zb_msg_filter_cb_list[ZB_IPC_MSG_FILTER_CB_LIST_MAX];

struct ZbMsgFilterT *
ZbMsgFilterRegister(struct ZigBeeT *zb, uint32_t mask, uint8_t prio,
    enum zb_msg_filter_rc (*callback)(struct ZigBeeT *zb, uint32_t id, void *msg, void *cbarg), void *arg)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b088      	sub	sp, #32
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	603b      	str	r3, [r7, #0]
 8013c94:	4613      	mov	r3, r2
 8013c96:	71fb      	strb	r3, [r7, #7]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbMsgFilterT *filter;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013c98:	2300      	movs	r3, #0
 8013c9a:	61bb      	str	r3, [r7, #24]
 8013c9c:	e00e      	b.n	8013cbc <ZbMsgFilterRegister+0x34>
        cb_info = &zb_msg_filter_cb_list[i];
 8013c9e:	69ba      	ldr	r2, [r7, #24]
 8013ca0:	4613      	mov	r3, r2
 8013ca2:	005b      	lsls	r3, r3, #1
 8013ca4:	4413      	add	r3, r2
 8013ca6:	009b      	lsls	r3, r3, #2
 8013ca8:	4a28      	ldr	r2, [pc, #160]	@ (8013d4c <ZbMsgFilterRegister+0xc4>)
 8013caa:	4413      	add	r3, r2
 8013cac:	61fb      	str	r3, [r7, #28]
        if (cb_info->filter == NULL) {
 8013cae:	69fb      	ldr	r3, [r7, #28]
 8013cb0:	681b      	ldr	r3, [r3, #0]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d006      	beq.n	8013cc4 <ZbMsgFilterRegister+0x3c>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013cb6:	69bb      	ldr	r3, [r7, #24]
 8013cb8:	3301      	adds	r3, #1
 8013cba:	61bb      	str	r3, [r7, #24]
 8013cbc:	69bb      	ldr	r3, [r7, #24]
 8013cbe:	2b1f      	cmp	r3, #31
 8013cc0:	d9ed      	bls.n	8013c9e <ZbMsgFilterRegister+0x16>
 8013cc2:	e000      	b.n	8013cc6 <ZbMsgFilterRegister+0x3e>
            break;
 8013cc4:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	2b20      	cmp	r3, #32
 8013cca:	d101      	bne.n	8013cd0 <ZbMsgFilterRegister+0x48>
        return NULL;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	e038      	b.n	8013d42 <ZbMsgFilterRegister+0xba>
    }

    Pre_ZigbeeCmdProcessing();
 8013cd0:	f7f5 fc22 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013cd4:	f7f5 fbb2 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013cd8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_FILTER_ADD;
 8013cda:	697b      	ldr	r3, [r7, #20]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f042 0210 	orr.w	r2, r2, #16
 8013ce2:	701a      	strb	r2, [r3, #0]
 8013ce4:	2200      	movs	r2, #0
 8013ce6:	705a      	strb	r2, [r3, #1]
 8013ce8:	2200      	movs	r2, #0
 8013cea:	709a      	strb	r2, [r3, #2]
 8013cec:	2200      	movs	r2, #0
 8013cee:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 3;
 8013cf0:	697b      	ldr	r3, [r7, #20]
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	f042 0203 	orr.w	r2, r2, #3
 8013cf8:	711a      	strb	r2, [r3, #4]
 8013cfa:	2200      	movs	r2, #0
 8013cfc:	715a      	strb	r2, [r3, #5]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	719a      	strb	r2, [r3, #6]
 8013d02:	2200      	movs	r2, #0
 8013d04:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)mask;
 8013d06:	697b      	ldr	r3, [r7, #20]
 8013d08:	68ba      	ldr	r2, [r7, #8]
 8013d0a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)prio;
 8013d0c:	79fa      	ldrb	r2, [r7, #7]
 8013d0e:	697b      	ldr	r3, [r7, #20]
 8013d10:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)cb_info;
 8013d12:	69fa      	ldr	r2, [r7, #28]
 8013d14:	697b      	ldr	r3, [r7, #20]
 8013d16:	611a      	str	r2, [r3, #16]
    ZIGBEE_CmdTransfer();
 8013d18:	f7f5 fbc0 	bl	800949c <ZIGBEE_CmdTransfer>
    filter = (struct ZbMsgFilterT *)zb_ipc_m4_get_retval();
 8013d1c:	f7ff fc3a 	bl	8013594 <zb_ipc_m4_get_retval>
 8013d20:	4603      	mov	r3, r0
 8013d22:	613b      	str	r3, [r7, #16]
    Post_ZigbeeCmdProcessing();
 8013d24:	f7fe fe4e 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    if (filter != NULL) {
 8013d28:	693b      	ldr	r3, [r7, #16]
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d008      	beq.n	8013d40 <ZbMsgFilterRegister+0xb8>
        cb_info->filter = filter;
 8013d2e:	69fb      	ldr	r3, [r7, #28]
 8013d30:	693a      	ldr	r2, [r7, #16]
 8013d32:	601a      	str	r2, [r3, #0]
        cb_info->callback = callback;
 8013d34:	69fb      	ldr	r3, [r7, #28]
 8013d36:	683a      	ldr	r2, [r7, #0]
 8013d38:	605a      	str	r2, [r3, #4]
        cb_info->arg = arg;
 8013d3a:	69fb      	ldr	r3, [r7, #28]
 8013d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013d3e:	609a      	str	r2, [r3, #8]
    }
    return filter;
 8013d40:	693b      	ldr	r3, [r7, #16]
    /* Followed up by MSG_M0TOM4_FILTER_MSG_CB */
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3720      	adds	r7, #32
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	20001a3c 	.word	0x20001a3c

08013d50 <ZbMsgFilterRemove>:

void
ZbMsgFilterRemove(struct ZigBeeT *zb, struct ZbMsgFilterT *filter)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	b086      	sub	sp, #24
 8013d54:	af00      	add	r7, sp, #0
 8013d56:	6078      	str	r0, [r7, #4]
 8013d58:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_msg_filter_cb_info_t *cb_info;
    unsigned int i;

    if (filter == NULL) {
 8013d5a:	683b      	ldr	r3, [r7, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d046      	beq.n	8013dee <ZbMsgFilterRemove+0x9e>
        return;
    }
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013d60:	2300      	movs	r3, #0
 8013d62:	613b      	str	r3, [r7, #16]
 8013d64:	e00f      	b.n	8013d86 <ZbMsgFilterRemove+0x36>
        cb_info = &zb_msg_filter_cb_list[i];
 8013d66:	693a      	ldr	r2, [r7, #16]
 8013d68:	4613      	mov	r3, r2
 8013d6a:	005b      	lsls	r3, r3, #1
 8013d6c:	4413      	add	r3, r2
 8013d6e:	009b      	lsls	r3, r3, #2
 8013d70:	4a22      	ldr	r2, [pc, #136]	@ (8013dfc <ZbMsgFilterRemove+0xac>)
 8013d72:	4413      	add	r3, r2
 8013d74:	617b      	str	r3, [r7, #20]
        if (cb_info->filter == filter) {
 8013d76:	697b      	ldr	r3, [r7, #20]
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	683a      	ldr	r2, [r7, #0]
 8013d7c:	429a      	cmp	r2, r3
 8013d7e:	d006      	beq.n	8013d8e <ZbMsgFilterRemove+0x3e>
    for (i = 0; i < ZB_IPC_MSG_FILTER_CB_LIST_MAX; i++) {
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	3301      	adds	r3, #1
 8013d84:	613b      	str	r3, [r7, #16]
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	2b1f      	cmp	r3, #31
 8013d8a:	d9ec      	bls.n	8013d66 <ZbMsgFilterRemove+0x16>
 8013d8c:	e000      	b.n	8013d90 <ZbMsgFilterRemove+0x40>
            break;
 8013d8e:	bf00      	nop
        }
    }
    if (i == ZB_IPC_MSG_FILTER_CB_LIST_MAX) {
 8013d90:	693b      	ldr	r3, [r7, #16]
 8013d92:	2b20      	cmp	r3, #32
 8013d94:	d02d      	beq.n	8013df2 <ZbMsgFilterRemove+0xa2>
        return;
    }

    Pre_ZigbeeCmdProcessing();
 8013d96:	f7f5 fbbf 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013d9a:	f7f5 fb4f 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013d9e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_FILTER_DEL;
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	2200      	movs	r2, #0
 8013da4:	f042 0211 	orr.w	r2, r2, #17
 8013da8:	701a      	strb	r2, [r3, #0]
 8013daa:	2200      	movs	r2, #0
 8013dac:	705a      	strb	r2, [r3, #1]
 8013dae:	2200      	movs	r2, #0
 8013db0:	709a      	strb	r2, [r3, #2]
 8013db2:	2200      	movs	r2, #0
 8013db4:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8013db6:	68fb      	ldr	r3, [r7, #12]
 8013db8:	2200      	movs	r2, #0
 8013dba:	f042 0201 	orr.w	r2, r2, #1
 8013dbe:	711a      	strb	r2, [r3, #4]
 8013dc0:	2200      	movs	r2, #0
 8013dc2:	715a      	strb	r2, [r3, #5]
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	719a      	strb	r2, [r3, #6]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)filter;
 8013dcc:	683a      	ldr	r2, [r7, #0]
 8013dce:	68fb      	ldr	r3, [r7, #12]
 8013dd0:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013dd2:	f7f5 fb63 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013dd6:	f7fe fdf5 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    cb_info->filter = NULL;
 8013dda:	697b      	ldr	r3, [r7, #20]
 8013ddc:	2200      	movs	r2, #0
 8013dde:	701a      	strb	r2, [r3, #0]
 8013de0:	2200      	movs	r2, #0
 8013de2:	705a      	strb	r2, [r3, #1]
 8013de4:	2200      	movs	r2, #0
 8013de6:	709a      	strb	r2, [r3, #2]
 8013de8:	2200      	movs	r2, #0
 8013dea:	70da      	strb	r2, [r3, #3]
 8013dec:	e002      	b.n	8013df4 <ZbMsgFilterRemove+0xa4>
        return;
 8013dee:	bf00      	nop
 8013df0:	e000      	b.n	8013df4 <ZbMsgFilterRemove+0xa4>
        return;
 8013df2:	bf00      	nop
}
 8013df4:	3718      	adds	r7, #24
 8013df6:	46bd      	mov	sp, r7
 8013df8:	bd80      	pop	{r7, pc}
 8013dfa:	bf00      	nop
 8013dfc:	20001a3c 	.word	0x20001a3c

08013e00 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b086      	sub	sp, #24
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	60f8      	str	r0, [r7, #12]
 8013e08:	60b9      	str	r1, [r7, #8]
 8013e0a:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	4a24      	ldr	r2, [pc, #144]	@ (8013ea0 <ZbTimerAlloc+0xa0>)
 8013e10:	210c      	movs	r1, #12
 8013e12:	2000      	movs	r0, #0
 8013e14:	f000 fc0a 	bl	801462c <zb_heap_alloc>
 8013e18:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 8013e1a:	697b      	ldr	r3, [r7, #20]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d039      	beq.n	8013e94 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 8013e20:	697b      	ldr	r3, [r7, #20]
 8013e22:	68ba      	ldr	r2, [r7, #8]
 8013e24:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 8013e26:	697b      	ldr	r3, [r7, #20]
 8013e28:	687a      	ldr	r2, [r7, #4]
 8013e2a:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 8013e2c:	f7f5 fb74 	bl	8009518 <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013e30:	f7f5 fb04 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013e34:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 8013e36:	693b      	ldr	r3, [r7, #16]
 8013e38:	2200      	movs	r2, #0
 8013e3a:	f042 0214 	orr.w	r2, r2, #20
 8013e3e:	701a      	strb	r2, [r3, #0]
 8013e40:	2200      	movs	r2, #0
 8013e42:	705a      	strb	r2, [r3, #1]
 8013e44:	2200      	movs	r2, #0
 8013e46:	709a      	strb	r2, [r3, #2]
 8013e48:	2200      	movs	r2, #0
 8013e4a:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 8013e4c:	693b      	ldr	r3, [r7, #16]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	f042 0201 	orr.w	r2, r2, #1
 8013e54:	711a      	strb	r2, [r3, #4]
 8013e56:	2200      	movs	r2, #0
 8013e58:	715a      	strb	r2, [r3, #5]
 8013e5a:	2200      	movs	r2, #0
 8013e5c:	719a      	strb	r2, [r3, #6]
 8013e5e:	2200      	movs	r2, #0
 8013e60:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 8013e62:	697a      	ldr	r2, [r7, #20]
 8013e64:	693b      	ldr	r3, [r7, #16]
 8013e66:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 8013e68:	f7f5 fb18 	bl	800949c <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 8013e6c:	f7ff fb92 	bl	8013594 <zb_ipc_m4_get_retval>
 8013e70:	4603      	mov	r3, r0
 8013e72:	461a      	mov	r2, r3
 8013e74:	697b      	ldr	r3, [r7, #20]
 8013e76:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 8013e78:	f7fe fda4 	bl	80129c4 <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 8013e7c:	697b      	ldr	r3, [r7, #20]
 8013e7e:	689b      	ldr	r3, [r3, #8]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d107      	bne.n	8013e94 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 8013e84:	2300      	movs	r3, #0
 8013e86:	4a06      	ldr	r2, [pc, #24]	@ (8013ea0 <ZbTimerAlloc+0xa0>)
 8013e88:	6979      	ldr	r1, [r7, #20]
 8013e8a:	2000      	movs	r0, #0
 8013e8c:	f000 fbdd 	bl	801464a <zb_heap_free>
            timer = NULL;
 8013e90:	2300      	movs	r3, #0
 8013e92:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 8013e94:	697b      	ldr	r3, [r7, #20]
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	3718      	adds	r7, #24
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	bd80      	pop	{r7, pc}
 8013e9e:	bf00      	nop
 8013ea0:	080184f8 	.word	0x080184f8

08013ea4 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b084      	sub	sp, #16
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 8013eac:	f7f5 fb34 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013eb0:	f7f5 fac4 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013eb4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	2200      	movs	r2, #0
 8013eba:	f042 0215 	orr.w	r2, r2, #21
 8013ebe:	701a      	strb	r2, [r3, #0]
 8013ec0:	2200      	movs	r2, #0
 8013ec2:	705a      	strb	r2, [r3, #1]
 8013ec4:	2200      	movs	r2, #0
 8013ec6:	709a      	strb	r2, [r3, #2]
 8013ec8:	2200      	movs	r2, #0
 8013eca:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f042 0201 	orr.w	r2, r2, #1
 8013ed4:	711a      	strb	r2, [r3, #4]
 8013ed6:	2200      	movs	r2, #0
 8013ed8:	715a      	strb	r2, [r3, #5]
 8013eda:	2200      	movs	r2, #0
 8013edc:	719a      	strb	r2, [r3, #6]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	689b      	ldr	r3, [r3, #8]
 8013ee6:	461a      	mov	r2, r3
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 8013eec:	f7f5 fad6 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013ef0:	f7fe fd68 	bl	80129c4 <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 8013ef4:	2300      	movs	r3, #0
 8013ef6:	4a04      	ldr	r2, [pc, #16]	@ (8013f08 <ZbTimerFree+0x64>)
 8013ef8:	6879      	ldr	r1, [r7, #4]
 8013efa:	2000      	movs	r0, #0
 8013efc:	f000 fba5 	bl	801464a <zb_heap_free>
}
 8013f00:	bf00      	nop
 8013f02:	3710      	adds	r7, #16
 8013f04:	46bd      	mov	sp, r7
 8013f06:	bd80      	pop	{r7, pc}
 8013f08:	080184f8 	.word	0x080184f8

08013f0c <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8013f16:	f7f5 faff 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013f1a:	f7f5 fa8f 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013f1e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 8013f20:	68fb      	ldr	r3, [r7, #12]
 8013f22:	2200      	movs	r2, #0
 8013f24:	f042 0217 	orr.w	r2, r2, #23
 8013f28:	701a      	strb	r2, [r3, #0]
 8013f2a:	2200      	movs	r2, #0
 8013f2c:	705a      	strb	r2, [r3, #1]
 8013f2e:	2200      	movs	r2, #0
 8013f30:	709a      	strb	r2, [r3, #2]
 8013f32:	2200      	movs	r2, #0
 8013f34:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	2200      	movs	r2, #0
 8013f3a:	f042 0202 	orr.w	r2, r2, #2
 8013f3e:	711a      	strb	r2, [r3, #4]
 8013f40:	2200      	movs	r2, #0
 8013f42:	715a      	strb	r2, [r3, #5]
 8013f44:	2200      	movs	r2, #0
 8013f46:	719a      	strb	r2, [r3, #6]
 8013f48:	2200      	movs	r2, #0
 8013f4a:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	689b      	ldr	r3, [r3, #8]
 8013f50:	461a      	mov	r2, r3
 8013f52:	68fb      	ldr	r3, [r7, #12]
 8013f54:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	683a      	ldr	r2, [r7, #0]
 8013f5a:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8013f5c:	f7f5 fa9e 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8013f60:	f7fe fd30 	bl	80129c4 <Post_ZigbeeCmdProcessing>
}
 8013f64:	bf00      	nop
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 8013f6c:	b480      	push	{r7}
 8013f6e:	b085      	sub	sp, #20
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
 8013f74:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	4a13      	ldr	r2, [pc, #76]	@ (8013fc8 <ZbTimeoutRemaining+0x5c>)
 8013f7a:	4293      	cmp	r3, r2
 8013f7c:	d909      	bls.n	8013f92 <ZbTimeoutRemaining+0x26>
 8013f7e:	683b      	ldr	r3, [r7, #0]
 8013f80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013f84:	d805      	bhi.n	8013f92 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 8013f86:	683a      	ldr	r2, [r7, #0]
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	1ad3      	subs	r3, r2, r3
 8013f8c:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 8013f8e:	68fb      	ldr	r3, [r7, #12]
 8013f90:	e014      	b.n	8013fbc <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 8013f92:	683b      	ldr	r3, [r7, #0]
 8013f94:	4a0c      	ldr	r2, [pc, #48]	@ (8013fc8 <ZbTimeoutRemaining+0x5c>)
 8013f96:	4293      	cmp	r3, r2
 8013f98:	d905      	bls.n	8013fa6 <ZbTimeoutRemaining+0x3a>
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013fa0:	d801      	bhi.n	8013fa6 <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 8013fa2:	2300      	movs	r3, #0
 8013fa4:	e00a      	b.n	8013fbc <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 8013fa6:	687a      	ldr	r2, [r7, #4]
 8013fa8:	683b      	ldr	r3, [r7, #0]
 8013faa:	429a      	cmp	r2, r3
 8013fac:	d301      	bcc.n	8013fb2 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	e004      	b.n	8013fbc <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 8013fb2:	683a      	ldr	r2, [r7, #0]
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	1ad3      	subs	r3, r2, r3
 8013fb8:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 8013fba:	68fb      	ldr	r3, [r7, #12]
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3714      	adds	r7, #20
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fc6:	4770      	bx	lr
 8013fc8:	bffffffd 	.word	0xbffffffd

08013fcc <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 8013fcc:	b580      	push	{r7, lr}
 8013fce:	b08c      	sub	sp, #48	@ 0x30
 8013fd0:	af00      	add	r7, sp, #0
 8013fd2:	60f8      	str	r0, [r7, #12]
 8013fd4:	607a      	str	r2, [r7, #4]
 8013fd6:	603b      	str	r3, [r7, #0]
 8013fd8:	460b      	mov	r3, r1
 8013fda:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 8013fdc:	897b      	ldrh	r3, [r7, #10]
 8013fde:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 8013fe4:	683b      	ldr	r3, [r7, #0]
 8013fe6:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 8013fe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fea:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 8013fec:	f7f5 fa94 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8013ff0:	f7f5 fa24 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8013ff4:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 8013ff6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ff8:	2200      	movs	r2, #0
 8013ffa:	701a      	strb	r2, [r3, #0]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	f042 0203 	orr.w	r2, r2, #3
 8014002:	705a      	strb	r2, [r3, #1]
 8014004:	2200      	movs	r2, #0
 8014006:	709a      	strb	r2, [r3, #2]
 8014008:	2200      	movs	r2, #0
 801400a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 801400c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801400e:	2200      	movs	r2, #0
 8014010:	f042 0202 	orr.w	r2, r2, #2
 8014014:	711a      	strb	r2, [r3, #4]
 8014016:	2200      	movs	r2, #0
 8014018:	715a      	strb	r2, [r3, #5]
 801401a:	2200      	movs	r2, #0
 801401c:	719a      	strb	r2, [r3, #6]
 801401e:	2200      	movs	r2, #0
 8014020:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 8014022:	f107 0218 	add.w	r2, r7, #24
 8014026:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014028:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 801402a:	f107 0214 	add.w	r2, r7, #20
 801402e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014030:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014032:	f7f5 fa33 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014036:	f7fe fcc5 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 801403a:	7d3b      	ldrb	r3, [r7, #20]
 801403c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 8014040:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8014044:	4618      	mov	r0, r3
 8014046:	3730      	adds	r7, #48	@ 0x30
 8014048:	46bd      	mov	sp, r7
 801404a:	bd80      	pop	{r7, pc}

0801404c <ZbNwkSetIndex>:

enum ZbStatusCodeT
ZbNwkSetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 801404c:	b580      	push	{r7, lr}
 801404e:	b08c      	sub	sp, #48	@ 0x30
 8014050:	af00      	add	r7, sp, #0
 8014052:	60f8      	str	r0, [r7, #12]
 8014054:	607a      	str	r2, [r7, #4]
 8014056:	603b      	str	r3, [r7, #0]
 8014058:	460b      	mov	r3, r1
 801405a:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeSetReqT nlmeSetReq;
    struct ZbNlmeSetConfT nlmeSetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-SET.request */
    nlmeSetReq.attrId = attrId;
 801405c:	897b      	ldrh	r3, [r7, #10]
 801405e:	833b      	strh	r3, [r7, #24]
    nlmeSetReq.attr = attrPtr;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	61fb      	str	r3, [r7, #28]
    nlmeSetReq.attrLength = attrSz;
 8014064:	683b      	ldr	r3, [r7, #0]
 8014066:	623b      	str	r3, [r7, #32]
    nlmeSetReq.attrIndex = attrIndex;
 8014068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801406a:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 801406c:	f7f5 fa54 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014070:	f7f5 f9e4 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014074:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_SET_INDEX;
 8014076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014078:	2200      	movs	r2, #0
 801407a:	f042 0201 	orr.w	r2, r2, #1
 801407e:	701a      	strb	r2, [r3, #0]
 8014080:	2200      	movs	r2, #0
 8014082:	f042 0203 	orr.w	r2, r2, #3
 8014086:	705a      	strb	r2, [r3, #1]
 8014088:	2200      	movs	r2, #0
 801408a:	709a      	strb	r2, [r3, #2]
 801408c:	2200      	movs	r2, #0
 801408e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014092:	2200      	movs	r2, #0
 8014094:	f042 0202 	orr.w	r2, r2, #2
 8014098:	711a      	strb	r2, [r3, #4]
 801409a:	2200      	movs	r2, #0
 801409c:	715a      	strb	r2, [r3, #5]
 801409e:	2200      	movs	r2, #0
 80140a0:	719a      	strb	r2, [r3, #6]
 80140a2:	2200      	movs	r2, #0
 80140a4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeSetReq;
 80140a6:	f107 0218 	add.w	r2, r7, #24
 80140aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140ac:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeSetConf;
 80140ae:	f107 0214 	add.w	r2, r7, #20
 80140b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80140b4:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 80140b6:	f7f5 f9f1 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80140ba:	f7fe fc83 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    status = nlmeSetConf.status;
 80140be:	7d3b      	ldrb	r3, [r7, #20]
 80140c0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 80140c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80140c8:	4618      	mov	r0, r3
 80140ca:	3730      	adds	r7, #48	@ 0x30
 80140cc:	46bd      	mov	sp, r7
 80140ce:	bd80      	pop	{r7, pc}

080140d0 <ZbNwkGet>:

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b086      	sub	sp, #24
 80140d4:	af02      	add	r7, sp, #8
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	607a      	str	r2, [r7, #4]
 80140da:	603b      	str	r3, [r7, #0]
 80140dc:	460b      	mov	r3, r1
 80140de:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 80140e0:	8979      	ldrh	r1, [r7, #10]
 80140e2:	2300      	movs	r3, #0
 80140e4:	9300      	str	r3, [sp, #0]
 80140e6:	683b      	ldr	r3, [r7, #0]
 80140e8:	687a      	ldr	r2, [r7, #4]
 80140ea:	68f8      	ldr	r0, [r7, #12]
 80140ec:	f7ff ff6e 	bl	8013fcc <ZbNwkGetIndex>
 80140f0:	4603      	mov	r3, r0
}
 80140f2:	4618      	mov	r0, r3
 80140f4:	3710      	adds	r7, #16
 80140f6:	46bd      	mov	sp, r7
 80140f8:	bd80      	pop	{r7, pc}

080140fa <ZbNwkSet>:

enum ZbStatusCodeT
ZbNwkSet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 80140fa:	b580      	push	{r7, lr}
 80140fc:	b086      	sub	sp, #24
 80140fe:	af02      	add	r7, sp, #8
 8014100:	60f8      	str	r0, [r7, #12]
 8014102:	607a      	str	r2, [r7, #4]
 8014104:	603b      	str	r3, [r7, #0]
 8014106:	460b      	mov	r3, r1
 8014108:	817b      	strh	r3, [r7, #10]
    return ZbNwkSetIndex(zb, attrId, attrPtr, attrSz, 0);
 801410a:	8979      	ldrh	r1, [r7, #10]
 801410c:	2300      	movs	r3, #0
 801410e:	9300      	str	r3, [sp, #0]
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	687a      	ldr	r2, [r7, #4]
 8014114:	68f8      	ldr	r0, [r7, #12]
 8014116:	f7ff ff99 	bl	801404c <ZbNwkSetIndex>
 801411a:	4603      	mov	r3, r0
}
 801411c:	4618      	mov	r0, r3
 801411e:	3710      	adds	r7, #16
 8014120:	46bd      	mov	sp, r7
 8014122:	bd80      	pop	{r7, pc}

08014124 <ZbZdoPermitJoinReq>:
/* Followed up in MSG_M0TOM4_ZDO_MGMT_BIND_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoLeaveReq, MSG_M4TOM0_ZDO_MGMT_LEAVE, struct ZbZdoLeaveReqT, struct ZbZdoLeaveRspT);
/* Followed up in MSG_M0TOM4_ZDO_MGMT_LEAVE_CB handler */

IPC_REQ_CALLBACK_FUNC(ZbZdoPermitJoinReq, MSG_M4TOM0_ZDO_MGMT_PERMIT_JOIN, struct ZbZdoPermitJoinReqT, struct ZbZdoPermitJoinRspT);
 8014124:	b580      	push	{r7, lr}
 8014126:	b088      	sub	sp, #32
 8014128:	af00      	add	r7, sp, #0
 801412a:	60f8      	str	r0, [r7, #12]
 801412c:	60b9      	str	r1, [r7, #8]
 801412e:	607a      	str	r2, [r7, #4]
 8014130:	603b      	str	r3, [r7, #0]
 8014132:	6839      	ldr	r1, [r7, #0]
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f7ff fa04 	bl	8013542 <zb_ipc_m4_cb_info_alloc>
 801413a:	61f8      	str	r0, [r7, #28]
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d101      	bne.n	8014146 <ZbZdoPermitJoinReq+0x22>
 8014142:	2370      	movs	r3, #112	@ 0x70
 8014144:	e031      	b.n	80141aa <ZbZdoPermitJoinReq+0x86>
 8014146:	f7f5 f9e7 	bl	8009518 <Pre_ZigbeeCmdProcessing>
 801414a:	f7f5 f977 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801414e:	61b8      	str	r0, [r7, #24]
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	2200      	movs	r2, #0
 8014154:	f042 0220 	orr.w	r2, r2, #32
 8014158:	701a      	strb	r2, [r3, #0]
 801415a:	2200      	movs	r2, #0
 801415c:	f042 0201 	orr.w	r2, r2, #1
 8014160:	705a      	strb	r2, [r3, #1]
 8014162:	2200      	movs	r2, #0
 8014164:	709a      	strb	r2, [r3, #2]
 8014166:	2200      	movs	r2, #0
 8014168:	70da      	strb	r2, [r3, #3]
 801416a:	69bb      	ldr	r3, [r7, #24]
 801416c:	2200      	movs	r2, #0
 801416e:	f042 0202 	orr.w	r2, r2, #2
 8014172:	711a      	strb	r2, [r3, #4]
 8014174:	2200      	movs	r2, #0
 8014176:	715a      	strb	r2, [r3, #5]
 8014178:	2200      	movs	r2, #0
 801417a:	719a      	strb	r2, [r3, #6]
 801417c:	2200      	movs	r2, #0
 801417e:	71da      	strb	r2, [r3, #7]
 8014180:	68ba      	ldr	r2, [r7, #8]
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	609a      	str	r2, [r3, #8]
 8014186:	69fa      	ldr	r2, [r7, #28]
 8014188:	69bb      	ldr	r3, [r7, #24]
 801418a:	60da      	str	r2, [r3, #12]
 801418c:	f7f5 f986 	bl	800949c <ZIGBEE_CmdTransfer>
 8014190:	f7ff fa00 	bl	8013594 <zb_ipc_m4_get_retval>
 8014194:	4603      	mov	r3, r0
 8014196:	75fb      	strb	r3, [r7, #23]
 8014198:	f7fe fc14 	bl	80129c4 <Post_ZigbeeCmdProcessing>
 801419c:	7dfb      	ldrb	r3, [r7, #23]
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d002      	beq.n	80141a8 <ZbZdoPermitJoinReq+0x84>
 80141a2:	69f8      	ldr	r0, [r7, #28]
 80141a4:	f7ff f9ea 	bl	801357c <zb_ipc_m4_cb_info_free>
 80141a8:	7dfb      	ldrb	r3, [r7, #23]
 80141aa:	4618      	mov	r0, r3
 80141ac:	3720      	adds	r7, #32
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}

080141b2 <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 80141b2:	b580      	push	{r7, lr}
 80141b4:	b086      	sub	sp, #24
 80141b6:	af02      	add	r7, sp, #8
 80141b8:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 80141ba:	f107 020c 	add.w	r2, r7, #12
 80141be:	2300      	movs	r3, #0
 80141c0:	9300      	str	r3, [sp, #0]
 80141c2:	2304      	movs	r3, #4
 80141c4:	f241 111d 	movw	r1, #4381	@ 0x111d
 80141c8:	6878      	ldr	r0, [r7, #4]
 80141ca:	f7ff fb71 	bl	80138b0 <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 80141ce:	68fb      	ldr	r3, [r7, #12]
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	3710      	adds	r7, #16
 80141d4:	46bd      	mov	sp, r7
 80141d6:	bd80      	pop	{r7, pc}

080141d8 <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b086      	sub	sp, #24
 80141dc:	af00      	add	r7, sp, #0
 80141de:	60f8      	str	r0, [r7, #12]
 80141e0:	60b9      	str	r1, [r7, #8]
 80141e2:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 80141e4:	f7f5 f998 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80141e8:	f7f5 f928 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80141ec:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 80141ee:	697b      	ldr	r3, [r7, #20]
 80141f0:	2200      	movs	r2, #0
 80141f2:	f042 021d 	orr.w	r2, r2, #29
 80141f6:	701a      	strb	r2, [r3, #0]
 80141f8:	2200      	movs	r2, #0
 80141fa:	f042 0204 	orr.w	r2, r2, #4
 80141fe:	705a      	strb	r2, [r3, #1]
 8014200:	2200      	movs	r2, #0
 8014202:	709a      	strb	r2, [r3, #2]
 8014204:	2200      	movs	r2, #0
 8014206:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	2200      	movs	r2, #0
 801420c:	f042 0202 	orr.w	r2, r2, #2
 8014210:	711a      	strb	r2, [r3, #4]
 8014212:	2200      	movs	r2, #0
 8014214:	715a      	strb	r2, [r3, #5]
 8014216:	2200      	movs	r2, #0
 8014218:	719a      	strb	r2, [r3, #6]
 801421a:	2200      	movs	r2, #0
 801421c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 801421e:	68ba      	ldr	r2, [r7, #8]
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 8014224:	687a      	ldr	r2, [r7, #4]
 8014226:	697b      	ldr	r3, [r7, #20]
 8014228:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801422a:	f7f5 f937 	bl	800949c <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 801422e:	f7ff f9b1 	bl	8013594 <zb_ipc_m4_get_retval>
 8014232:	4603      	mov	r3, r0
 8014234:	2b00      	cmp	r3, #0
 8014236:	bf14      	ite	ne
 8014238:	2301      	movne	r3, #1
 801423a:	2300      	moveq	r3, #0
 801423c:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 801423e:	f7fe fbc1 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return rc;
 8014242:	7cfb      	ldrb	r3, [r7, #19]
}
 8014244:	4618      	mov	r0, r3
 8014246:	3718      	adds	r7, #24
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}

0801424c <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b086      	sub	sp, #24
 8014250:	af00      	add	r7, sp, #0
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014258:	f7f5 f95e 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801425c:	f7f5 f8ee 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014260:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 8014262:	697b      	ldr	r3, [r7, #20]
 8014264:	2200      	movs	r2, #0
 8014266:	701a      	strb	r2, [r3, #0]
 8014268:	2200      	movs	r2, #0
 801426a:	f042 0204 	orr.w	r2, r2, #4
 801426e:	705a      	strb	r2, [r3, #1]
 8014270:	2200      	movs	r2, #0
 8014272:	709a      	strb	r2, [r3, #2]
 8014274:	2200      	movs	r2, #0
 8014276:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014278:	697b      	ldr	r3, [r7, #20]
 801427a:	2200      	movs	r2, #0
 801427c:	f042 0202 	orr.w	r2, r2, #2
 8014280:	711a      	strb	r2, [r3, #4]
 8014282:	2200      	movs	r2, #0
 8014284:	715a      	strb	r2, [r3, #5]
 8014286:	2200      	movs	r2, #0
 8014288:	719a      	strb	r2, [r3, #6]
 801428a:	2200      	movs	r2, #0
 801428c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 801428e:	68ba      	ldr	r2, [r7, #8]
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 8014294:	687a      	ldr	r2, [r7, #4]
 8014296:	697b      	ldr	r3, [r7, #20]
 8014298:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 801429a:	f7f5 f8ff 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 801429e:	f7fe fb91 	bl	80129c4 <Post_ZigbeeCmdProcessing>
}
 80142a2:	bf00      	nop
 80142a4:	3718      	adds	r7, #24
 80142a6:	46bd      	mov	sp, r7
 80142a8:	bd80      	pop	{r7, pc}

080142aa <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 80142aa:	b580      	push	{r7, lr}
 80142ac:	b082      	sub	sp, #8
 80142ae:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 80142b0:	f7f5 f932 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80142b4:	f7f5 f8c2 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80142b8:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	2200      	movs	r2, #0
 80142be:	f042 0211 	orr.w	r2, r2, #17
 80142c2:	701a      	strb	r2, [r3, #0]
 80142c4:	2200      	movs	r2, #0
 80142c6:	f042 0204 	orr.w	r2, r2, #4
 80142ca:	705a      	strb	r2, [r3, #1]
 80142cc:	2200      	movs	r2, #0
 80142ce:	709a      	strb	r2, [r3, #2]
 80142d0:	2200      	movs	r2, #0
 80142d2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2200      	movs	r2, #0
 80142d8:	711a      	strb	r2, [r3, #4]
 80142da:	2200      	movs	r2, #0
 80142dc:	715a      	strb	r2, [r3, #5]
 80142de:	2200      	movs	r2, #0
 80142e0:	719a      	strb	r2, [r3, #6]
 80142e2:	2200      	movs	r2, #0
 80142e4:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 80142e6:	f7f5 f8d9 	bl	800949c <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 80142ea:	f7ff f953 	bl	8013594 <zb_ipc_m4_get_retval>
 80142ee:	4603      	mov	r3, r0
 80142f0:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 80142f2:	f7fe fb67 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return rc;
 80142f6:	78fb      	ldrb	r3, [r7, #3]
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3708      	adds	r7, #8
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b088      	sub	sp, #32
 8014304:	af00      	add	r7, sp, #0
 8014306:	60f8      	str	r0, [r7, #12]
 8014308:	60b9      	str	r1, [r7, #8]
 801430a:	607a      	str	r2, [r7, #4]
 801430c:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 801430e:	2300      	movs	r3, #0
 8014310:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d013      	beq.n	8014340 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 8014318:	6839      	ldr	r1, [r7, #0]
 801431a:	6878      	ldr	r0, [r7, #4]
 801431c:	f7ff f911 	bl	8013542 <zb_ipc_m4_cb_info_alloc>
 8014320:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 8014322:	69fb      	ldr	r3, [r7, #28]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 8014328:	2389      	movs	r3, #137	@ 0x89
 801432a:	e03e      	b.n	80143aa <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 801432c:	68bb      	ldr	r3, [r7, #8]
 801432e:	4618      	mov	r0, r3
 8014330:	f7ff fb78 	bl	8013a24 <ZbApsAddrIsBcast>
 8014334:	4603      	mov	r3, r0
 8014336:	2b00      	cmp	r3, #0
 8014338:	d002      	beq.n	8014340 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	2201      	movs	r2, #1
 801433e:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 8014340:	f7f5 f8ea 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014344:	f7f5 f87a 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014348:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 801434a:	69bb      	ldr	r3, [r7, #24]
 801434c:	2200      	movs	r2, #0
 801434e:	f042 0212 	orr.w	r2, r2, #18
 8014352:	701a      	strb	r2, [r3, #0]
 8014354:	2200      	movs	r2, #0
 8014356:	f042 0204 	orr.w	r2, r2, #4
 801435a:	705a      	strb	r2, [r3, #1]
 801435c:	2200      	movs	r2, #0
 801435e:	709a      	strb	r2, [r3, #2]
 8014360:	2200      	movs	r2, #0
 8014362:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	2200      	movs	r2, #0
 8014368:	f042 0202 	orr.w	r2, r2, #2
 801436c:	711a      	strb	r2, [r3, #4]
 801436e:	2200      	movs	r2, #0
 8014370:	715a      	strb	r2, [r3, #5]
 8014372:	2200      	movs	r2, #0
 8014374:	719a      	strb	r2, [r3, #6]
 8014376:	2200      	movs	r2, #0
 8014378:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 801437a:	68ba      	ldr	r2, [r7, #8]
 801437c:	69bb      	ldr	r3, [r7, #24]
 801437e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 8014380:	69fa      	ldr	r2, [r7, #28]
 8014382:	69bb      	ldr	r3, [r7, #24]
 8014384:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 8014386:	f7f5 f889 	bl	800949c <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 801438a:	f7ff f903 	bl	8013594 <zb_ipc_m4_get_retval>
 801438e:	4603      	mov	r3, r0
 8014390:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 8014392:	f7fe fb17 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 8014396:	7dfb      	ldrb	r3, [r7, #23]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d005      	beq.n	80143a8 <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 801439c:	69fb      	ldr	r3, [r7, #28]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d002      	beq.n	80143a8 <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 80143a2:	69f8      	ldr	r0, [r7, #28]
 80143a4:	f7ff f8ea 	bl	801357c <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 80143a8:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 80143aa:	4618      	mov	r0, r3
 80143ac:	3720      	adds	r7, #32
 80143ae:	46bd      	mov	sp, r7
 80143b0:	bd80      	pop	{r7, pc}

080143b2 <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 80143b2:	b580      	push	{r7, lr}
 80143b4:	b086      	sub	sp, #24
 80143b6:	af00      	add	r7, sp, #0
 80143b8:	60f8      	str	r0, [r7, #12]
 80143ba:	60b9      	str	r1, [r7, #8]
 80143bc:	607a      	str	r2, [r7, #4]
 80143be:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80143c0:	f7f5 f8aa 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80143c4:	f7f5 f83a 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80143c8:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 80143ca:	697b      	ldr	r3, [r7, #20]
 80143cc:	2200      	movs	r2, #0
 80143ce:	f042 0214 	orr.w	r2, r2, #20
 80143d2:	701a      	strb	r2, [r3, #0]
 80143d4:	2200      	movs	r2, #0
 80143d6:	f042 0204 	orr.w	r2, r2, #4
 80143da:	705a      	strb	r2, [r3, #1]
 80143dc:	2200      	movs	r2, #0
 80143de:	709a      	strb	r2, [r3, #2]
 80143e0:	2200      	movs	r2, #0
 80143e2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 80143e4:	697b      	ldr	r3, [r7, #20]
 80143e6:	2200      	movs	r2, #0
 80143e8:	f042 0204 	orr.w	r2, r2, #4
 80143ec:	711a      	strb	r2, [r3, #4]
 80143ee:	2200      	movs	r2, #0
 80143f0:	715a      	strb	r2, [r3, #5]
 80143f2:	2200      	movs	r2, #0
 80143f4:	719a      	strb	r2, [r3, #6]
 80143f6:	2200      	movs	r2, #0
 80143f8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80143fa:	68fa      	ldr	r2, [r7, #12]
 80143fc:	697b      	ldr	r3, [r7, #20]
 80143fe:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 8014400:	68ba      	ldr	r2, [r7, #8]
 8014402:	697b      	ldr	r3, [r7, #20]
 8014404:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 8014406:	687a      	ldr	r2, [r7, #4]
 8014408:	697b      	ldr	r3, [r7, #20]
 801440a:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 801440c:	78fa      	ldrb	r2, [r7, #3]
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8014412:	f7f5 f843 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014416:	f7fe fad5 	bl	80129c4 <Post_ZigbeeCmdProcessing>
}
 801441a:	bf00      	nop
 801441c:	3718      	adds	r7, #24
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}

08014422 <ZbZclClusterEndpointRegister>:
    return status;
}

bool
ZbZclClusterEndpointRegister(struct ZbZclClusterT *clusterPtr)
{
 8014422:	b580      	push	{r7, lr}
 8014424:	b084      	sub	sp, #16
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 801442a:	f7f5 f875 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 801442e:	f7f5 f805 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014432:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REGISTER;
 8014434:	68fb      	ldr	r3, [r7, #12]
 8014436:	2200      	movs	r2, #0
 8014438:	f042 0202 	orr.w	r2, r2, #2
 801443c:	701a      	strb	r2, [r3, #0]
 801443e:	2200      	movs	r2, #0
 8014440:	f042 0204 	orr.w	r2, r2, #4
 8014444:	705a      	strb	r2, [r3, #1]
 8014446:	2200      	movs	r2, #0
 8014448:	709a      	strb	r2, [r3, #2]
 801444a:	2200      	movs	r2, #0
 801444c:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 801444e:	68fb      	ldr	r3, [r7, #12]
 8014450:	2200      	movs	r2, #0
 8014452:	f042 0201 	orr.w	r2, r2, #1
 8014456:	711a      	strb	r2, [r3, #4]
 8014458:	2200      	movs	r2, #0
 801445a:	715a      	strb	r2, [r3, #5]
 801445c:	2200      	movs	r2, #0
 801445e:	719a      	strb	r2, [r3, #6]
 8014460:	2200      	movs	r2, #0
 8014462:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8014464:	687a      	ldr	r2, [r7, #4]
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801446a:	f7f5 f817 	bl	800949c <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 801446e:	f7ff f891 	bl	8013594 <zb_ipc_m4_get_retval>
 8014472:	4603      	mov	r3, r0
 8014474:	2b00      	cmp	r3, #0
 8014476:	bf14      	ite	ne
 8014478:	2301      	movne	r3, #1
 801447a:	2300      	moveq	r3, #0
 801447c:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 801447e:	f7fe faa1 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return rc;
 8014482:	7afb      	ldrb	r3, [r7, #11]
}
 8014484:	4618      	mov	r0, r3
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <ZbZclClusterEndpointRemove>:

bool
ZbZclClusterEndpointRemove(struct ZbZclClusterT *clusterPtr)
{
 801448c:	b580      	push	{r7, lr}
 801448e:	b084      	sub	sp, #16
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 8014494:	f7f5 f840 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014498:	f7f4 ffd0 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801449c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_EP_REMOVE;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	2200      	movs	r2, #0
 80144a2:	f042 0203 	orr.w	r2, r2, #3
 80144a6:	701a      	strb	r2, [r3, #0]
 80144a8:	2200      	movs	r2, #0
 80144aa:	f042 0204 	orr.w	r2, r2, #4
 80144ae:	705a      	strb	r2, [r3, #1]
 80144b0:	2200      	movs	r2, #0
 80144b2:	709a      	strb	r2, [r3, #2]
 80144b4:	2200      	movs	r2, #0
 80144b6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	2200      	movs	r2, #0
 80144bc:	f042 0201 	orr.w	r2, r2, #1
 80144c0:	711a      	strb	r2, [r3, #4]
 80144c2:	2200      	movs	r2, #0
 80144c4:	715a      	strb	r2, [r3, #5]
 80144c6:	2200      	movs	r2, #0
 80144c8:	719a      	strb	r2, [r3, #6]
 80144ca:	2200      	movs	r2, #0
 80144cc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80144ce:	687a      	ldr	r2, [r7, #4]
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80144d4:	f7f4 ffe2 	bl	800949c <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 80144d8:	f7ff f85c 	bl	8013594 <zb_ipc_m4_get_retval>
 80144dc:	4603      	mov	r3, r0
 80144de:	2b00      	cmp	r3, #0
 80144e0:	bf14      	ite	ne
 80144e2:	2301      	movne	r3, #1
 80144e4:	2300      	moveq	r3, #0
 80144e6:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 80144e8:	f7fe fa6c 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return rc;
 80144ec:	7afb      	ldrb	r3, [r7, #11]
}
 80144ee:	4618      	mov	r0, r3
 80144f0:	3710      	adds	r7, #16
 80144f2:	46bd      	mov	sp, r7
 80144f4:	bd80      	pop	{r7, pc}

080144f6 <ZbZclClusterBind>:

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 80144f6:	b580      	push	{r7, lr}
 80144f8:	b084      	sub	sp, #16
 80144fa:	af00      	add	r7, sp, #0
 80144fc:	6078      	str	r0, [r7, #4]
 80144fe:	4608      	mov	r0, r1
 8014500:	4611      	mov	r1, r2
 8014502:	461a      	mov	r2, r3
 8014504:	4603      	mov	r3, r0
 8014506:	70fb      	strb	r3, [r7, #3]
 8014508:	460b      	mov	r3, r1
 801450a:	803b      	strh	r3, [r7, #0]
 801450c:	4613      	mov	r3, r2
 801450e:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 8014510:	f7f5 f802 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014514:	f7f4 ff92 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 8014518:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	2200      	movs	r2, #0
 801451e:	f042 0204 	orr.w	r2, r2, #4
 8014522:	701a      	strb	r2, [r3, #0]
 8014524:	2200      	movs	r2, #0
 8014526:	f042 0204 	orr.w	r2, r2, #4
 801452a:	705a      	strb	r2, [r3, #1]
 801452c:	2200      	movs	r2, #0
 801452e:	709a      	strb	r2, [r3, #2]
 8014530:	2200      	movs	r2, #0
 8014532:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	2200      	movs	r2, #0
 8014538:	f042 0204 	orr.w	r2, r2, #4
 801453c:	711a      	strb	r2, [r3, #4]
 801453e:	2200      	movs	r2, #0
 8014540:	715a      	strb	r2, [r3, #5]
 8014542:	2200      	movs	r2, #0
 8014544:	719a      	strb	r2, [r3, #6]
 8014546:	2200      	movs	r2, #0
 8014548:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 801454a:	687a      	ldr	r2, [r7, #4]
 801454c:	68fb      	ldr	r3, [r7, #12]
 801454e:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 8014550:	78fa      	ldrb	r2, [r7, #3]
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 8014556:	883a      	ldrh	r2, [r7, #0]
 8014558:	68fb      	ldr	r3, [r7, #12]
 801455a:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 801455c:	78ba      	ldrb	r2, [r7, #2]
 801455e:	68fb      	ldr	r3, [r7, #12]
 8014560:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 8014562:	f7f4 ff9b 	bl	800949c <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 8014566:	f7ff f815 	bl	8013594 <zb_ipc_m4_get_retval>
 801456a:	4603      	mov	r3, r0
 801456c:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 801456e:	f7fe fa29 	bl	80129c4 <Post_ZigbeeCmdProcessing>
    return status;
 8014572:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 8014574:	4618      	mov	r0, r3
 8014576:	3710      	adds	r7, #16
 8014578:	46bd      	mov	sp, r7
 801457a:	bd80      	pop	{r7, pc}

0801457c <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b084      	sub	sp, #16
 8014580:	af00      	add	r7, sp, #0
 8014582:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 8014584:	f7f4 ffc8 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 8014588:	f7f4 ff58 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 801458c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2200      	movs	r2, #0
 8014592:	f042 0206 	orr.w	r2, r2, #6
 8014596:	701a      	strb	r2, [r3, #0]
 8014598:	2200      	movs	r2, #0
 801459a:	f042 0204 	orr.w	r2, r2, #4
 801459e:	705a      	strb	r2, [r3, #1]
 80145a0:	2200      	movs	r2, #0
 80145a2:	709a      	strb	r2, [r3, #2]
 80145a4:	2200      	movs	r2, #0
 80145a6:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 80145a8:	68fb      	ldr	r3, [r7, #12]
 80145aa:	2200      	movs	r2, #0
 80145ac:	f042 0201 	orr.w	r2, r2, #1
 80145b0:	711a      	strb	r2, [r3, #4]
 80145b2:	2200      	movs	r2, #0
 80145b4:	715a      	strb	r2, [r3, #5]
 80145b6:	2200      	movs	r2, #0
 80145b8:	719a      	strb	r2, [r3, #6]
 80145ba:	2200      	movs	r2, #0
 80145bc:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 80145be:	687a      	ldr	r2, [r7, #4]
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 80145c4:	f7f4 ff6a 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 80145c8:	f7fe f9fc 	bl	80129c4 <Post_ZigbeeCmdProcessing>
}
 80145cc:	bf00      	nop
 80145ce:	3710      	adds	r7, #16
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}

080145d4 <ZbZclClusterRemoveAlarmResetHandler>:
    /* Callbacks followed up in MSG_M0TOM4_ZCL_CLUSTER_ALARM_CB handler. */
}

void
ZbZclClusterRemoveAlarmResetHandler(struct ZbZclClusterT *clusterPtr)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b084      	sub	sp, #16
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 80145dc:	f7f4 ff9c 	bl	8009518 <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 80145e0:	f7f4 ff2c 	bl	800943c <ZIGBEE_Get_OTCmdPayloadBuffer>
 80145e4:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_ALARM_REMOVE_FILTER;
 80145e6:	68fb      	ldr	r3, [r7, #12]
 80145e8:	2200      	movs	r2, #0
 80145ea:	f042 020b 	orr.w	r2, r2, #11
 80145ee:	701a      	strb	r2, [r3, #0]
 80145f0:	2200      	movs	r2, #0
 80145f2:	f042 0204 	orr.w	r2, r2, #4
 80145f6:	705a      	strb	r2, [r3, #1]
 80145f8:	2200      	movs	r2, #0
 80145fa:	709a      	strb	r2, [r3, #2]
 80145fc:	2200      	movs	r2, #0
 80145fe:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	2200      	movs	r2, #0
 8014604:	f042 0201 	orr.w	r2, r2, #1
 8014608:	711a      	strb	r2, [r3, #4]
 801460a:	2200      	movs	r2, #0
 801460c:	715a      	strb	r2, [r3, #5]
 801460e:	2200      	movs	r2, #0
 8014610:	719a      	strb	r2, [r3, #6]
 8014612:	2200      	movs	r2, #0
 8014614:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 8014616:	687a      	ldr	r2, [r7, #4]
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 801461c:	f7f4 ff3e 	bl	800949c <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 8014620:	f7fe f9d0 	bl	80129c4 <Post_ZigbeeCmdProcessing>
}
 8014624:	bf00      	nop
 8014626:	3710      	adds	r7, #16
 8014628:	46bd      	mov	sp, r7
 801462a:	bd80      	pop	{r7, pc}

0801462c <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b084      	sub	sp, #16
 8014630:	af00      	add	r7, sp, #0
 8014632:	60f8      	str	r0, [r7, #12]
 8014634:	60b9      	str	r1, [r7, #8]
 8014636:	607a      	str	r2, [r7, #4]
 8014638:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 801463a:	68b8      	ldr	r0, [r7, #8]
 801463c:	f002 fa92 	bl	8016b64 <malloc>
 8014640:	4603      	mov	r3, r0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3710      	adds	r7, #16
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b084      	sub	sp, #16
 801464e:	af00      	add	r7, sp, #0
 8014650:	60f8      	str	r0, [r7, #12]
 8014652:	60b9      	str	r1, [r7, #8]
 8014654:	607a      	str	r2, [r7, #4]
 8014656:	603b      	str	r3, [r7, #0]
    free(ptr);
 8014658:	68b8      	ldr	r0, [r7, #8]
 801465a:	f002 fa8b 	bl	8016b74 <free>
}
 801465e:	bf00      	nop
 8014660:	3710      	adds	r7, #16
 8014662:	46bd      	mov	sp, r7
 8014664:	bd80      	pop	{r7, pc}
	...

08014668 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 8014668:	b480      	push	{r7}
 801466a:	b087      	sub	sp, #28
 801466c:	af00      	add	r7, sp, #0
 801466e:	4603      	mov	r3, r0
 8014670:	60b9      	str	r1, [r7, #8]
 8014672:	607a      	str	r2, [r7, #4]
 8014674:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 8014676:	68bb      	ldr	r3, [r7, #8]
 8014678:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 801467a:	e00e      	b.n	801469a <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 801467c:	89fb      	ldrh	r3, [r7, #14]
 801467e:	0a1b      	lsrs	r3, r3, #8
 8014680:	b29a      	uxth	r2, r3
 8014682:	89fb      	ldrh	r3, [r7, #14]
 8014684:	b2d9      	uxtb	r1, r3
 8014686:	697b      	ldr	r3, [r7, #20]
 8014688:	1c58      	adds	r0, r3, #1
 801468a:	6178      	str	r0, [r7, #20]
 801468c:	781b      	ldrb	r3, [r3, #0]
 801468e:	404b      	eors	r3, r1
 8014690:	4908      	ldr	r1, [pc, #32]	@ (80146b4 <WpanCrc+0x4c>)
 8014692:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8014696:	4053      	eors	r3, r2
 8014698:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	1e5a      	subs	r2, r3, #1
 801469e:	607a      	str	r2, [r7, #4]
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d1eb      	bne.n	801467c <WpanCrc+0x14>
    }
    return crc;
 80146a4:	89fb      	ldrh	r3, [r7, #14]
}
 80146a6:	4618      	mov	r0, r3
 80146a8:	371c      	adds	r7, #28
 80146aa:	46bd      	mov	sp, r7
 80146ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b0:	4770      	bx	lr
 80146b2:	bf00      	nop
 80146b4:	08018bbc 	.word	0x08018bbc

080146b8 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 80146b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146ba:	b0cf      	sub	sp, #316	@ 0x13c
 80146bc:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 80146be:	2300      	movs	r3, #0
 80146c0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 80146c4:	2300      	movs	r3, #0
 80146c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 80146ca:	2300      	movs	r3, #0
 80146cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 80146d0:	f7f4 fecc 	bl	800946c <ZIGBEE_Get_NotificationPayloadBuffer>
 80146d4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    switch (p_notification->ID) {
 80146d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80146dc:	681b      	ldr	r3, [r3, #0]
 80146de:	f240 421c 	movw	r2, #1052	@ 0x41c
 80146e2:	4293      	cmp	r3, r2
 80146e4:	f201 8348 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 80146e8:	f240 4205 	movw	r2, #1029	@ 0x405
 80146ec:	4293      	cmp	r3, r2
 80146ee:	d22d      	bcs.n	801474c <Zigbee_CallBackProcessing+0x94>
 80146f0:	f240 321d 	movw	r2, #797	@ 0x31d
 80146f4:	4293      	cmp	r3, r2
 80146f6:	f201 833f 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 80146fa:	f240 3206 	movw	r2, #774	@ 0x306
 80146fe:	4293      	cmp	r3, r2
 8014700:	d25c      	bcs.n	80147bc <Zigbee_CallBackProcessing+0x104>
 8014702:	f240 2209 	movw	r2, #521	@ 0x209
 8014706:	4293      	cmp	r3, r2
 8014708:	f000 84db 	beq.w	80150c2 <Zigbee_CallBackProcessing+0xa0a>
 801470c:	f240 2209 	movw	r2, #521	@ 0x209
 8014710:	4293      	cmp	r3, r2
 8014712:	f201 8331 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 8014716:	f240 2207 	movw	r2, #519	@ 0x207
 801471a:	4293      	cmp	r3, r2
 801471c:	f000 84a0 	beq.w	8015060 <Zigbee_CallBackProcessing+0x9a8>
 8014720:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 8014724:	f081 8328 	bcs.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 8014728:	f240 2205 	movw	r2, #517	@ 0x205
 801472c:	4293      	cmp	r3, r2
 801472e:	f000 845a 	beq.w	8014fe6 <Zigbee_CallBackProcessing+0x92e>
 8014732:	f240 2205 	movw	r2, #517	@ 0x205
 8014736:	4293      	cmp	r3, r2
 8014738:	f201 831e 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 801473c:	2b4b      	cmp	r3, #75	@ 0x4b
 801473e:	f200 814d 	bhi.w	80149dc <Zigbee_CallBackProcessing+0x324>
 8014742:	2b0d      	cmp	r3, #13
 8014744:	f080 80c4 	bcs.w	80148d0 <Zigbee_CallBackProcessing+0x218>
 8014748:	f001 bb16 	b.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 801474c:	f2a3 4305 	subw	r3, r3, #1029	@ 0x405
 8014750:	2b17      	cmp	r3, #23
 8014752:	f201 8311 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 8014756:	a201      	add	r2, pc, #4	@ (adr r2, 801475c <Zigbee_CallBackProcessing+0xa4>)
 8014758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801475c:	08015a11 	.word	0x08015a11
 8014760:	08015d79 	.word	0x08015d79
 8014764:	08015d79 	.word	0x08015d79
 8014768:	08015d79 	.word	0x08015d79
 801476c:	08015d79 	.word	0x08015d79
 8014770:	08015a59 	.word	0x08015a59
 8014774:	08015d79 	.word	0x08015d79
 8014778:	08015d79 	.word	0x08015d79
 801477c:	08015d79 	.word	0x08015d79
 8014780:	08015d79 	.word	0x08015d79
 8014784:	08015aa1 	.word	0x08015aa1
 8014788:	08015d79 	.word	0x08015d79
 801478c:	08015d79 	.word	0x08015d79
 8014790:	08015d79 	.word	0x08015d79
 8014794:	08015afb 	.word	0x08015afb
 8014798:	08015d79 	.word	0x08015d79
 801479c:	08015d79 	.word	0x08015d79
 80147a0:	08015b85 	.word	0x08015b85
 80147a4:	08015d79 	.word	0x08015d79
 80147a8:	08015bdf 	.word	0x08015bdf
 80147ac:	08015d79 	.word	0x08015d79
 80147b0:	08015c39 	.word	0x08015c39
 80147b4:	08015d79 	.word	0x08015d79
 80147b8:	08015c93 	.word	0x08015c93
 80147bc:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 80147c0:	2b17      	cmp	r3, #23
 80147c2:	f201 82d9 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 80147c6:	a201      	add	r2, pc, #4	@ (adr r2, 80147cc <Zigbee_CallBackProcessing+0x114>)
 80147c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80147cc:	08015125 	.word	0x08015125
 80147d0:	08015d79 	.word	0x08015d79
 80147d4:	080151dd 	.word	0x080151dd
 80147d8:	08015d79 	.word	0x08015d79
 80147dc:	08015d79 	.word	0x08015d79
 80147e0:	08015d79 	.word	0x08015d79
 80147e4:	08015239 	.word	0x08015239
 80147e8:	08015d79 	.word	0x08015d79
 80147ec:	08015295 	.word	0x08015295
 80147f0:	08015d79 	.word	0x08015d79
 80147f4:	08015d79 	.word	0x08015d79
 80147f8:	08015d79 	.word	0x08015d79
 80147fc:	08015d79 	.word	0x08015d79
 8014800:	08015d79 	.word	0x08015d79
 8014804:	08015d79 	.word	0x08015d79
 8014808:	08015d79 	.word	0x08015d79
 801480c:	08015d79 	.word	0x08015d79
 8014810:	08015d79 	.word	0x08015d79
 8014814:	08015d79 	.word	0x08015d79
 8014818:	08015d79 	.word	0x08015d79
 801481c:	08015d79 	.word	0x08015d79
 8014820:	08015d79 	.word	0x08015d79
 8014824:	08015d79 	.word	0x08015d79
 8014828:	08015181 	.word	0x08015181
 801482c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8014830:	2b24      	cmp	r3, #36	@ 0x24
 8014832:	f201 82a1 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 8014836:	a201      	add	r2, pc, #4	@ (adr r2, 801483c <Zigbee_CallBackProcessing+0x184>)
 8014838:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801483c:	080153ab 	.word	0x080153ab
 8014840:	08015d79 	.word	0x08015d79
 8014844:	08015403 	.word	0x08015403
 8014848:	08015d79 	.word	0x08015d79
 801484c:	0801545b 	.word	0x0801545b
 8014850:	08015d79 	.word	0x08015d79
 8014854:	080154b3 	.word	0x080154b3
 8014858:	08015d79 	.word	0x08015d79
 801485c:	0801550b 	.word	0x0801550b
 8014860:	08015d79 	.word	0x08015d79
 8014864:	08015563 	.word	0x08015563
 8014868:	08015d79 	.word	0x08015d79
 801486c:	080155bb 	.word	0x080155bb
 8014870:	08015d79 	.word	0x08015d79
 8014874:	08015611 	.word	0x08015611
 8014878:	08015d79 	.word	0x08015d79
 801487c:	08015d79 	.word	0x08015d79
 8014880:	08015d79 	.word	0x08015d79
 8014884:	080152f1 	.word	0x080152f1
 8014888:	08015d79 	.word	0x08015d79
 801488c:	0801565b 	.word	0x0801565b
 8014890:	08015d79 	.word	0x08015d79
 8014894:	080156cd 	.word	0x080156cd
 8014898:	08015d79 	.word	0x08015d79
 801489c:	08015727 	.word	0x08015727
 80148a0:	08015d79 	.word	0x08015d79
 80148a4:	08015781 	.word	0x08015781
 80148a8:	08015d79 	.word	0x08015d79
 80148ac:	080157db 	.word	0x080157db
 80148b0:	08015d79 	.word	0x08015d79
 80148b4:	08015835 	.word	0x08015835
 80148b8:	08015d79 	.word	0x08015d79
 80148bc:	0801588f 	.word	0x0801588f
 80148c0:	08015d79 	.word	0x08015d79
 80148c4:	080158e9 	.word	0x080158e9
 80148c8:	08015d79 	.word	0x08015d79
 80148cc:	08015943 	.word	0x08015943
 80148d0:	3b0d      	subs	r3, #13
 80148d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80148d4:	f201 8250 	bhi.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 80148d8:	a201      	add	r2, pc, #4	@ (adr r2, 80148e0 <Zigbee_CallBackProcessing+0x228>)
 80148da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148de:	bf00      	nop
 80148e0:	080149f1 	.word	0x080149f1
 80148e4:	08015d79 	.word	0x08015d79
 80148e8:	08015d79 	.word	0x08015d79
 80148ec:	08015d79 	.word	0x08015d79
 80148f0:	08015d79 	.word	0x08015d79
 80148f4:	08014a57 	.word	0x08014a57
 80148f8:	08015d79 	.word	0x08015d79
 80148fc:	08015d79 	.word	0x08015d79
 8014900:	08015d79 	.word	0x08015d79
 8014904:	08015d79 	.word	0x08015d79
 8014908:	08015d79 	.word	0x08015d79
 801490c:	08015d79 	.word	0x08015d79
 8014910:	08015d79 	.word	0x08015d79
 8014914:	08014acb 	.word	0x08014acb
 8014918:	08015d79 	.word	0x08015d79
 801491c:	08015d79 	.word	0x08015d79
 8014920:	08014b27 	.word	0x08014b27
 8014924:	08015d79 	.word	0x08015d79
 8014928:	08014b8f 	.word	0x08014b8f
 801492c:	08015d79 	.word	0x08015d79
 8014930:	08014bf7 	.word	0x08014bf7
 8014934:	08015d79 	.word	0x08015d79
 8014938:	08014c5f 	.word	0x08014c5f
 801493c:	08015d79 	.word	0x08015d79
 8014940:	08015d79 	.word	0x08015d79
 8014944:	08014d39 	.word	0x08014d39
 8014948:	08015d79 	.word	0x08015d79
 801494c:	08015d79 	.word	0x08015d79
 8014950:	08014da1 	.word	0x08014da1
 8014954:	08015d79 	.word	0x08015d79
 8014958:	08014e09 	.word	0x08014e09
 801495c:	08015d79 	.word	0x08015d79
 8014960:	08015d79 	.word	0x08015d79
 8014964:	08015d79 	.word	0x08015d79
 8014968:	08014e27 	.word	0x08014e27
 801496c:	08015d79 	.word	0x08015d79
 8014970:	08015d79 	.word	0x08015d79
 8014974:	08015d79 	.word	0x08015d79
 8014978:	08014e8f 	.word	0x08014e8f
 801497c:	08015d79 	.word	0x08015d79
 8014980:	08015d79 	.word	0x08015d79
 8014984:	08015d79 	.word	0x08015d79
 8014988:	08015d79 	.word	0x08015d79
 801498c:	08015d79 	.word	0x08015d79
 8014990:	08014edf 	.word	0x08014edf
 8014994:	08015d79 	.word	0x08015d79
 8014998:	08014f37 	.word	0x08014f37
 801499c:	08015d79 	.word	0x08015d79
 80149a0:	08014f8f 	.word	0x08014f8f
 80149a4:	08015d0d 	.word	0x08015d0d
 80149a8:	08015d79 	.word	0x08015d79
 80149ac:	08015d79 	.word	0x08015d79
 80149b0:	08015d79 	.word	0x08015d79
 80149b4:	08015d79 	.word	0x08015d79
 80149b8:	08015d79 	.word	0x08015d79
 80149bc:	08015d79 	.word	0x08015d79
 80149c0:	08015d79 	.word	0x08015d79
 80149c4:	08015d79 	.word	0x08015d79
 80149c8:	08015d79 	.word	0x08015d79
 80149cc:	08015d79 	.word	0x08015d79
 80149d0:	08015d79 	.word	0x08015d79
 80149d4:	08015d79 	.word	0x08015d79
 80149d8:	08014cc7 	.word	0x08014cc7
 80149dc:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 80149e0:	f081 81ca 	bcs.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
 80149e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80149e8:	f63f af20 	bhi.w	801482c <Zigbee_CallBackProcessing+0x174>
 80149ec:	f001 b9c4 	b.w	8015d78 <Zigbee_CallBackProcessing+0x16c0>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 80149f0:	4bbb      	ldr	r3, [pc, #748]	@ (8014ce0 <Zigbee_CallBackProcessing+0x628>)
 80149f2:	2200      	movs	r2, #0
 80149f4:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 80149f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80149fa:	685b      	ldr	r3, [r3, #4]
 80149fc:	2b01      	cmp	r3, #1
 80149fe:	d006      	beq.n	8014a0e <Zigbee_CallBackProcessing+0x356>
 8014a00:	4bb8      	ldr	r3, [pc, #736]	@ (8014ce4 <Zigbee_CallBackProcessing+0x62c>)
 8014a02:	4ab9      	ldr	r2, [pc, #740]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014a04:	f640 6129 	movw	r1, #3625	@ 0xe29
 8014a08:	48b8      	ldr	r0, [pc, #736]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014a0a:	f002 f88d 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8014a0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a12:	689b      	ldr	r3, [r3, #8]
 8014a14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014a18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	f001 81af 	beq.w	8015d80 <Zigbee_CallBackProcessing+0x16c8>
 8014a22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	f001 81a9 	beq.w	8015d80 <Zigbee_CallBackProcessing+0x16c8>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8014a2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a32:	681a      	ldr	r2, [r3, #0]
 8014a34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a38:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014a3c:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 8014a3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014a42:	685a      	ldr	r2, [r3, #4]
 8014a44:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a48:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	4610      	mov	r0, r2
 8014a50:	4798      	blx	r3
            }
            break;
 8014a52:	f001 b995 	b.w	8015d80 <Zigbee_CallBackProcessing+0x16c8>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 8014a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a5a:	685b      	ldr	r3, [r3, #4]
 8014a5c:	2b03      	cmp	r3, #3
 8014a5e:	d006      	beq.n	8014a6e <Zigbee_CallBackProcessing+0x3b6>
 8014a60:	4ba3      	ldr	r3, [pc, #652]	@ (8014cf0 <Zigbee_CallBackProcessing+0x638>)
 8014a62:	4aa1      	ldr	r2, [pc, #644]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014a64:	f640 6138 	movw	r1, #3640	@ 0xe38
 8014a68:	48a0      	ldr	r0, [pc, #640]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014a6a:	f002 f85d 	bl	8016b28 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 8014a6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a72:	691a      	ldr	r2, [r3, #16]
 8014a74:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a78:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014a7c:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8014a7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014a82:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	685d      	ldr	r5, [r3, #4]
 8014a8a:	4b95      	ldr	r3, [pc, #596]	@ (8014ce0 <Zigbee_CallBackProcessing+0x628>)
 8014a8c:	6818      	ldr	r0, [r3, #0]
 8014a8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a92:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 8014a94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014a98:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 8014a9a:	461e      	mov	r6, r3
 8014a9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014aa0:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	689b      	ldr	r3, [r3, #8]
 8014aa8:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014aac:	f2a2 1421 	subw	r4, r2, #289	@ 0x121
 8014ab0:	4632      	mov	r2, r6
 8014ab2:	47a8      	blx	r5
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 8014ab8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014abc:	f2a3 1321 	subw	r3, r3, #289	@ 0x121
 8014ac0:	781b      	ldrb	r3, [r3, #0]
 8014ac2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8014ac6:	f001 b9b2 	b.w	8015e2e <Zigbee_CallBackProcessing+0x1776>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 8014aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ace:	685b      	ldr	r3, [r3, #4]
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d006      	beq.n	8014ae2 <Zigbee_CallBackProcessing+0x42a>
 8014ad4:	4b83      	ldr	r3, [pc, #524]	@ (8014ce4 <Zigbee_CallBackProcessing+0x62c>)
 8014ad6:	4a84      	ldr	r2, [pc, #528]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014ad8:	f640 6144 	movw	r1, #3652	@ 0xe44
 8014adc:	4883      	ldr	r0, [pc, #524]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014ade:	f002 f823 	bl	8016b28 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 8014ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ae6:	689a      	ldr	r2, [r3, #8]
 8014ae8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014aec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014af0:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 8014af2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014af6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014afa:	681b      	ldr	r3, [r3, #0]
 8014afc:	681b      	ldr	r3, [r3, #0]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	f001 8140 	beq.w	8015d84 <Zigbee_CallBackProcessing+0x16cc>
                timer->callback(NULL, timer->arg);
 8014b04:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b08:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 8014b14:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8014b18:	6812      	ldr	r2, [r2, #0]
 8014b1a:	6852      	ldr	r2, [r2, #4]
 8014b1c:	4611      	mov	r1, r2
 8014b1e:	2000      	movs	r0, #0
 8014b20:	4798      	blx	r3
            }
            break;
 8014b22:	f001 b92f 	b.w	8015d84 <Zigbee_CallBackProcessing+0x16cc>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 8014b26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b2a:	685b      	ldr	r3, [r3, #4]
 8014b2c:	2b02      	cmp	r3, #2
 8014b2e:	d006      	beq.n	8014b3e <Zigbee_CallBackProcessing+0x486>
 8014b30:	4b70      	ldr	r3, [pc, #448]	@ (8014cf4 <Zigbee_CallBackProcessing+0x63c>)
 8014b32:	4a6d      	ldr	r2, [pc, #436]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014b34:	f640 614d 	movw	r1, #3661	@ 0xe4d
 8014b38:	486c      	ldr	r0, [pc, #432]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014b3a:	f001 fff5 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014b3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b42:	68db      	ldr	r3, [r3, #12]
 8014b44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	f001 811b 	beq.w	8015d88 <Zigbee_CallBackProcessing+0x16d0>
 8014b52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f001 8115 	beq.w	8015d88 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b62:	681a      	ldr	r2, [r3, #0]
 8014b64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b68:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014b6c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b72:	689b      	ldr	r3, [r3, #8]
 8014b74:	b2da      	uxtb	r2, r3
 8014b76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014b7a:	6859      	ldr	r1, [r3, #4]
 8014b7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014b80:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8014b84:	681b      	ldr	r3, [r3, #0]
 8014b86:	4610      	mov	r0, r2
 8014b88:	4798      	blx	r3
            }
            break;
 8014b8a:	f001 b8fd 	b.w	8015d88 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 8014b8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014b92:	685b      	ldr	r3, [r3, #4]
 8014b94:	2b02      	cmp	r3, #2
 8014b96:	d006      	beq.n	8014ba6 <Zigbee_CallBackProcessing+0x4ee>
 8014b98:	4b56      	ldr	r3, [pc, #344]	@ (8014cf4 <Zigbee_CallBackProcessing+0x63c>)
 8014b9a:	4a53      	ldr	r2, [pc, #332]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014b9c:	f640 6158 	movw	r1, #3672	@ 0xe58
 8014ba0:	4852      	ldr	r0, [pc, #328]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014ba2:	f001 ffc1 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014ba6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	f001 80e9 	beq.w	8015d8c <Zigbee_CallBackProcessing+0x16d4>
 8014bba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bbe:	681b      	ldr	r3, [r3, #0]
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	f001 80e3 	beq.w	8015d8c <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 8014bc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014bca:	681a      	ldr	r2, [r3, #0]
 8014bcc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014bd0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014bd4:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 8014bd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014bda:	689b      	ldr	r3, [r3, #8]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014be2:	685a      	ldr	r2, [r3, #4]
 8014be4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014be8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8014bec:	681b      	ldr	r3, [r3, #0]
 8014bee:	4611      	mov	r1, r2
 8014bf0:	4798      	blx	r3
            }
            break;
 8014bf2:	f001 b8cb 	b.w	8015d8c <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 8014bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014bfa:	685b      	ldr	r3, [r3, #4]
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d006      	beq.n	8014c0e <Zigbee_CallBackProcessing+0x556>
 8014c00:	4b3c      	ldr	r3, [pc, #240]	@ (8014cf4 <Zigbee_CallBackProcessing+0x63c>)
 8014c02:	4a39      	ldr	r2, [pc, #228]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014c04:	f640 6163 	movw	r1, #3683	@ 0xe63
 8014c08:	4838      	ldr	r0, [pc, #224]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014c0a:	f001 ff8d 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014c0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014c18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c1c:	2b00      	cmp	r3, #0
 8014c1e:	f001 80b7 	beq.w	8015d90 <Zigbee_CallBackProcessing+0x16d8>
 8014c22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c26:	681b      	ldr	r3, [r3, #0]
 8014c28:	2b00      	cmp	r3, #0
 8014c2a:	f001 80b1 	beq.w	8015d90 <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014c2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c32:	681a      	ldr	r2, [r3, #0]
 8014c34:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014c3c:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014c3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c42:	689b      	ldr	r3, [r3, #8]
 8014c44:	b2da      	uxtb	r2, r3
 8014c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c4a:	6859      	ldr	r1, [r3, #4]
 8014c4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014c50:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	4610      	mov	r0, r2
 8014c58:	4798      	blx	r3
            }
            break;
 8014c5a:	f001 b899 	b.w	8015d90 <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 8014c5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c62:	685b      	ldr	r3, [r3, #4]
 8014c64:	2b02      	cmp	r3, #2
 8014c66:	d006      	beq.n	8014c76 <Zigbee_CallBackProcessing+0x5be>
 8014c68:	4b22      	ldr	r3, [pc, #136]	@ (8014cf4 <Zigbee_CallBackProcessing+0x63c>)
 8014c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014c6c:	f640 616e 	movw	r1, #3694	@ 0xe6e
 8014c70:	481e      	ldr	r0, [pc, #120]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014c72:	f001 ff59 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014c76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014c7a:	68db      	ldr	r3, [r3, #12]
 8014c7c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014c80:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	f001 8085 	beq.w	8015d94 <Zigbee_CallBackProcessing+0x16dc>
 8014c8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	f001 807f 	beq.w	8015d94 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014c96:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014c9a:	681a      	ldr	r2, [r3, #0]
 8014c9c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014ca0:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014ca4:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014ca6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014caa:	689b      	ldr	r3, [r3, #8]
 8014cac:	b2da      	uxtb	r2, r3
 8014cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014cb2:	6859      	ldr	r1, [r3, #4]
 8014cb4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014cb8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	4610      	mov	r0, r2
 8014cc0:	4798      	blx	r3
            }
            break;
 8014cc2:	f001 b867 	b.w	8015d94 <Zigbee_CallBackProcessing+0x16dc>

        case MSG_M0TOM4_STARTUP_FINDBIND_EP_CB:
            assert(p_notification->Size == 2);
 8014cc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014cca:	685b      	ldr	r3, [r3, #4]
 8014ccc:	2b02      	cmp	r3, #2
 8014cce:	d013      	beq.n	8014cf8 <Zigbee_CallBackProcessing+0x640>
 8014cd0:	4b08      	ldr	r3, [pc, #32]	@ (8014cf4 <Zigbee_CallBackProcessing+0x63c>)
 8014cd2:	4a05      	ldr	r2, [pc, #20]	@ (8014ce8 <Zigbee_CallBackProcessing+0x630>)
 8014cd4:	f640 6179 	movw	r1, #3705	@ 0xe79
 8014cd8:	4804      	ldr	r0, [pc, #16]	@ (8014cec <Zigbee_CallBackProcessing+0x634>)
 8014cda:	f001 ff25 	bl	8016b28 <__assert_func>
 8014cde:	bf00      	nop
 8014ce0:	20001a28 	.word	0x20001a28
 8014ce4:	080184fc 	.word	0x080184fc
 8014ce8:	08018de8 	.word	0x08018de8
 8014cec:	0801845c 	.word	0x0801845c
 8014cf0:	08018518 	.word	0x08018518
 8014cf4:	08018534 	.word	0x08018534
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014cf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014cfc:	68db      	ldr	r3, [r3, #12]
 8014cfe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014d02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	f001 8046 	beq.w	8015d98 <Zigbee_CallBackProcessing+0x16e0>
 8014d0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	f001 8040 	beq.w	8015d98 <Zigbee_CallBackProcessing+0x16e0>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014d18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014d20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d24:	689b      	ldr	r3, [r3, #8]
 8014d26:	b2da      	uxtb	r2, r3
 8014d28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d2c:	6859      	ldr	r1, [r3, #4]
 8014d2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014d30:	4610      	mov	r0, r2
 8014d32:	4798      	blx	r3
            }
            break;
 8014d34:	f001 b830 	b.w	8015d98 <Zigbee_CallBackProcessing+0x16e0>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 8014d38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	2b02      	cmp	r3, #2
 8014d40:	d006      	beq.n	8014d50 <Zigbee_CallBackProcessing+0x698>
 8014d42:	4bc0      	ldr	r3, [pc, #768]	@ (8015044 <Zigbee_CallBackProcessing+0x98c>)
 8014d44:	4ac0      	ldr	r2, [pc, #768]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014d46:	f640 6184 	movw	r1, #3716	@ 0xe84
 8014d4a:	48c0      	ldr	r0, [pc, #768]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014d4c:	f001 feec 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d54:	68db      	ldr	r3, [r3, #12]
 8014d56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014d5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d5e:	2b00      	cmp	r3, #0
 8014d60:	f001 801c 	beq.w	8015d9c <Zigbee_CallBackProcessing+0x16e4>
 8014d64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d68:	681b      	ldr	r3, [r3, #0]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	f001 8016 	beq.w	8015d9c <Zigbee_CallBackProcessing+0x16e4>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 8014d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d74:	681a      	ldr	r2, [r3, #0]
 8014d76:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d7a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014d7e:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 8014d80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014d84:	689b      	ldr	r3, [r3, #8]
 8014d86:	b2da      	uxtb	r2, r3
 8014d88:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014d8c:	6859      	ldr	r1, [r3, #4]
 8014d8e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8014d96:	681b      	ldr	r3, [r3, #0]
 8014d98:	4610      	mov	r0, r2
 8014d9a:	4798      	blx	r3
            }
            break;
 8014d9c:	f000 bffe 	b.w	8015d9c <Zigbee_CallBackProcessing+0x16e4>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 8014da0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014da4:	685b      	ldr	r3, [r3, #4]
 8014da6:	2b02      	cmp	r3, #2
 8014da8:	d006      	beq.n	8014db8 <Zigbee_CallBackProcessing+0x700>
 8014daa:	4ba6      	ldr	r3, [pc, #664]	@ (8015044 <Zigbee_CallBackProcessing+0x98c>)
 8014dac:	4aa6      	ldr	r2, [pc, #664]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014dae:	f640 618f 	movw	r1, #3727	@ 0xe8f
 8014db2:	48a6      	ldr	r0, [pc, #664]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014db4:	f001 feb8 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014db8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014dbc:	68db      	ldr	r3, [r3, #12]
 8014dbe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014dc2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	f000 87ea 	beq.w	8015da0 <Zigbee_CallBackProcessing+0x16e8>
 8014dcc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	f000 87e4 	beq.w	8015da0 <Zigbee_CallBackProcessing+0x16e8>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 8014dd8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014de2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014de6:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 8014de8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014dec:	689b      	ldr	r3, [r3, #8]
 8014dee:	b2da      	uxtb	r2, r3
 8014df0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014df4:	6859      	ldr	r1, [r3, #4]
 8014df6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014dfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	4610      	mov	r0, r2
 8014e02:	4798      	blx	r3
            }
            break;
 8014e04:	f000 bfcc 	b.w	8015da0 <Zigbee_CallBackProcessing+0x16e8>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 8014e08:	4b91      	ldr	r3, [pc, #580]	@ (8015050 <Zigbee_CallBackProcessing+0x998>)
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	f000 87c9 	beq.w	8015da4 <Zigbee_CallBackProcessing+0x16ec>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 8014e12:	4b8f      	ldr	r3, [pc, #572]	@ (8015050 <Zigbee_CallBackProcessing+0x998>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	4a8f      	ldr	r2, [pc, #572]	@ (8015054 <Zigbee_CallBackProcessing+0x99c>)
 8014e18:	6812      	ldr	r2, [r2, #0]
 8014e1a:	498f      	ldr	r1, [pc, #572]	@ (8015058 <Zigbee_CallBackProcessing+0x9a0>)
 8014e1c:	6809      	ldr	r1, [r1, #0]
 8014e1e:	4610      	mov	r0, r2
 8014e20:	4798      	blx	r3
            }
            break;
 8014e22:	f000 bfbf 	b.w	8015da4 <Zigbee_CallBackProcessing+0x16ec>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 8014e26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e2a:	685b      	ldr	r3, [r3, #4]
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	d006      	beq.n	8014e3e <Zigbee_CallBackProcessing+0x786>
 8014e30:	4b84      	ldr	r3, [pc, #528]	@ (8015044 <Zigbee_CallBackProcessing+0x98c>)
 8014e32:	4a85      	ldr	r2, [pc, #532]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014e34:	f44f 616a 	mov.w	r1, #3744	@ 0xea0
 8014e38:	4884      	ldr	r0, [pc, #528]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014e3a:	f001 fe75 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e42:	68db      	ldr	r3, [r3, #12]
 8014e44:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014e48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	f000 87ab 	beq.w	8015da8 <Zigbee_CallBackProcessing+0x16f0>
 8014e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	f000 87a5 	beq.w	8015da8 <Zigbee_CallBackProcessing+0x16f0>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8014e5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e68:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014e6c:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 8014e6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e72:	689b      	ldr	r3, [r3, #8]
 8014e74:	4618      	mov	r0, r3
 8014e76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014e7a:	685a      	ldr	r2, [r3, #4]
 8014e7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8014e80:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8014e84:	681b      	ldr	r3, [r3, #0]
 8014e86:	4611      	mov	r1, r2
 8014e88:	4798      	blx	r3
            }
            break;
 8014e8a:	f000 bf8d 	b.w	8015da8 <Zigbee_CallBackProcessing+0x16f0>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 8014e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014e92:	685b      	ldr	r3, [r3, #4]
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d006      	beq.n	8014ea6 <Zigbee_CallBackProcessing+0x7ee>
 8014e98:	4b70      	ldr	r3, [pc, #448]	@ (801505c <Zigbee_CallBackProcessing+0x9a4>)
 8014e9a:	4a6b      	ldr	r2, [pc, #428]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014e9c:	f640 61ab 	movw	r1, #3755	@ 0xeab
 8014ea0:	486a      	ldr	r0, [pc, #424]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014ea2:	f001 fe41 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 8014ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014eaa:	689b      	ldr	r3, [r3, #8]
 8014eac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014eb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	f000 8779 	beq.w	8015dac <Zigbee_CallBackProcessing+0x16f4>
 8014eba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	f000 8773 	beq.w	8015dac <Zigbee_CallBackProcessing+0x16f4>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 8014ec6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	637b      	str	r3, [r7, #52]	@ 0x34
                callback(info->arg);
 8014ece:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014ed2:	685a      	ldr	r2, [r3, #4]
 8014ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ed6:	4610      	mov	r0, r2
 8014ed8:	4798      	blx	r3
            }
            break;
 8014eda:	f000 bf67 	b.w	8015dac <Zigbee_CallBackProcessing+0x16f4>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 8014ede:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	2b02      	cmp	r3, #2
 8014ee6:	d006      	beq.n	8014ef6 <Zigbee_CallBackProcessing+0x83e>
 8014ee8:	4b56      	ldr	r3, [pc, #344]	@ (8015044 <Zigbee_CallBackProcessing+0x98c>)
 8014eea:	4a57      	ldr	r2, [pc, #348]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014eec:	f640 61b7 	movw	r1, #3767	@ 0xeb7
 8014ef0:	4856      	ldr	r0, [pc, #344]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014ef2:	f001 fe19 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014efa:	68db      	ldr	r3, [r3, #12]
 8014efc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014f00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	f000 8753 	beq.w	8015db0 <Zigbee_CallBackProcessing+0x16f8>
 8014f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f0e:	681b      	ldr	r3, [r3, #0]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	f000 874d 	beq.w	8015db0 <Zigbee_CallBackProcessing+0x16f8>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 8014f16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 8014f1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f22:	689b      	ldr	r3, [r3, #8]
 8014f24:	4618      	mov	r0, r3
 8014f26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f2a:	685a      	ldr	r2, [r3, #4]
 8014f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f2e:	4611      	mov	r1, r2
 8014f30:	4798      	blx	r3
            }
            break;
 8014f32:	f000 bf3d 	b.w	8015db0 <Zigbee_CallBackProcessing+0x16f8>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 8014f36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f3a:	685b      	ldr	r3, [r3, #4]
 8014f3c:	2b02      	cmp	r3, #2
 8014f3e:	d006      	beq.n	8014f4e <Zigbee_CallBackProcessing+0x896>
 8014f40:	4b40      	ldr	r3, [pc, #256]	@ (8015044 <Zigbee_CallBackProcessing+0x98c>)
 8014f42:	4a41      	ldr	r2, [pc, #260]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014f44:	f640 61c3 	movw	r1, #3779	@ 0xec3
 8014f48:	4840      	ldr	r0, [pc, #256]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014f4a:	f001 fded 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014f4e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f52:	68db      	ldr	r3, [r3, #12]
 8014f54:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014f58:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	f000 8729 	beq.w	8015db4 <Zigbee_CallBackProcessing+0x16fc>
 8014f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	f000 8723 	beq.w	8015db4 <Zigbee_CallBackProcessing+0x16fc>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 8014f6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	63fb      	str	r3, [r7, #60]	@ 0x3c
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 8014f76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f7a:	689b      	ldr	r3, [r3, #8]
 8014f7c:	4618      	mov	r0, r3
 8014f7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014f82:	685a      	ldr	r2, [r3, #4]
 8014f84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f86:	4611      	mov	r1, r2
 8014f88:	4798      	blx	r3
            }
            break;
 8014f8a:	f000 bf13 	b.w	8015db4 <Zigbee_CallBackProcessing+0x16fc>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 8014f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014f92:	685b      	ldr	r3, [r3, #4]
 8014f94:	2b02      	cmp	r3, #2
 8014f96:	d006      	beq.n	8014fa6 <Zigbee_CallBackProcessing+0x8ee>
 8014f98:	4b2a      	ldr	r3, [pc, #168]	@ (8015044 <Zigbee_CallBackProcessing+0x98c>)
 8014f9a:	4a2b      	ldr	r2, [pc, #172]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014f9c:	f640 61cf 	movw	r1, #3791	@ 0xecf
 8014fa0:	482a      	ldr	r0, [pc, #168]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014fa2:	f001 fdc1 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014fa6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014faa:	68db      	ldr	r3, [r3, #12]
 8014fac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8014fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	f000 86ff 	beq.w	8015db8 <Zigbee_CallBackProcessing+0x1700>
 8014fba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fbe:	681b      	ldr	r3, [r3, #0]
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	f000 86f9 	beq.w	8015db8 <Zigbee_CallBackProcessing+0x1700>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8014fc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	643b      	str	r3, [r7, #64]	@ 0x40
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 8014fce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014fd2:	689b      	ldr	r3, [r3, #8]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8014fda:	685a      	ldr	r2, [r3, #4]
 8014fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014fde:	4611      	mov	r1, r2
 8014fe0:	4798      	blx	r3
            }
            break;
 8014fe2:	f000 bee9 	b.w	8015db8 <Zigbee_CallBackProcessing+0x1700>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 8014fe6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8014fea:	685b      	ldr	r3, [r3, #4]
 8014fec:	2b02      	cmp	r3, #2
 8014fee:	d006      	beq.n	8014ffe <Zigbee_CallBackProcessing+0x946>
 8014ff0:	4b14      	ldr	r3, [pc, #80]	@ (8015044 <Zigbee_CallBackProcessing+0x98c>)
 8014ff2:	4a15      	ldr	r2, [pc, #84]	@ (8015048 <Zigbee_CallBackProcessing+0x990>)
 8014ff4:	f640 61da 	movw	r1, #3802	@ 0xeda
 8014ff8:	4814      	ldr	r0, [pc, #80]	@ (801504c <Zigbee_CallBackProcessing+0x994>)
 8014ffa:	f001 fd95 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8014ffe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015002:	68db      	ldr	r3, [r3, #12]
 8015004:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015008:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801500c:	2b00      	cmp	r3, #0
 801500e:	f000 86d5 	beq.w	8015dbc <Zigbee_CallBackProcessing+0x1704>
 8015012:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	2b00      	cmp	r3, #0
 801501a:	f000 86cf 	beq.w	8015dbc <Zigbee_CallBackProcessing+0x1704>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 801501e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8015028:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801502c:	689b      	ldr	r3, [r3, #8]
 801502e:	4618      	mov	r0, r3
 8015030:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015034:	685a      	ldr	r2, [r3, #4]
 8015036:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 801503a:	4611      	mov	r1, r2
 801503c:	4798      	blx	r3
            }
            break;
 801503e:	f000 bebd 	b.w	8015dbc <Zigbee_CallBackProcessing+0x1704>
 8015042:	bf00      	nop
 8015044:	08018534 	.word	0x08018534
 8015048:	08018de8 	.word	0x08018de8
 801504c:	0801845c 	.word	0x0801845c
 8015050:	20001a18 	.word	0x20001a18
 8015054:	20001a28 	.word	0x20001a28
 8015058:	20001a1c 	.word	0x20001a1c
 801505c:	080184fc 	.word	0x080184fc

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 8015060:	2300      	movs	r3, #0
 8015062:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

            assert(p_notification->Size == 2);
 8015066:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801506a:	685b      	ldr	r3, [r3, #4]
 801506c:	2b02      	cmp	r3, #2
 801506e:	d006      	beq.n	801507e <Zigbee_CallBackProcessing+0x9c6>
 8015070:	4bc6      	ldr	r3, [pc, #792]	@ (801538c <Zigbee_CallBackProcessing+0xcd4>)
 8015072:	4ac7      	ldr	r2, [pc, #796]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 8015074:	f640 61ea 	movw	r1, #3818	@ 0xeea
 8015078:	48c6      	ldr	r0, [pc, #792]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 801507a:	f001 fd55 	bl	8016b28 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 801507e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015082:	689b      	ldr	r3, [r3, #8]
 8015084:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 8015088:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (aps_filter_cb->callback != NULL) {
 8015092:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8015096:	685b      	ldr	r3, [r3, #4]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d00b      	beq.n	80150b4 <Zigbee_CallBackProcessing+0x9fc>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 801509c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80150a0:	685b      	ldr	r3, [r3, #4]
 80150a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80150a6:	6892      	ldr	r2, [r2, #8]
 80150a8:	4611      	mov	r1, r2
 80150aa:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80150ae:	4798      	blx	r3
 80150b0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 80150b4:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80150b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80150bc:	60da      	str	r2, [r3, #12]
            break;
 80150be:	f000 beb6 	b.w	8015e2e <Zigbee_CallBackProcessing+0x1776>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 80150c2:	2300      	movs	r3, #0
 80150c4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            assert(p_notification->Size == 2);
 80150c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80150cc:	685b      	ldr	r3, [r3, #4]
 80150ce:	2b02      	cmp	r3, #2
 80150d0:	d006      	beq.n	80150e0 <Zigbee_CallBackProcessing+0xa28>
 80150d2:	4bae      	ldr	r3, [pc, #696]	@ (801538c <Zigbee_CallBackProcessing+0xcd4>)
 80150d4:	4aae      	ldr	r2, [pc, #696]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 80150d6:	f640 61fb 	movw	r1, #3835	@ 0xefb
 80150da:	48ae      	ldr	r0, [pc, #696]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 80150dc:	f001 fd24 	bl	8016b28 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 80150e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80150e4:	689b      	ldr	r3, [r3, #8]
 80150e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 80150ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80150ee:	68db      	ldr	r3, [r3, #12]
 80150f0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            if (aps_filter_cb->callback != NULL) {
 80150f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d00b      	beq.n	8015116 <Zigbee_CallBackProcessing+0xa5e>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 80150fe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8015102:	685b      	ldr	r3, [r3, #4]
 8015104:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8015108:	6892      	ldr	r2, [r2, #8]
 801510a:	4611      	mov	r1, r2
 801510c:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 8015110:	4798      	blx	r3
 8015112:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015116:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801511a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801511e:	60da      	str	r2, [r3, #12]
            break;
 8015120:	f000 be85 	b.w	8015e2e <Zigbee_CallBackProcessing+0x1776>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 8015124:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015128:	685b      	ldr	r3, [r3, #4]
 801512a:	2b02      	cmp	r3, #2
 801512c:	d006      	beq.n	801513c <Zigbee_CallBackProcessing+0xa84>
 801512e:	4b97      	ldr	r3, [pc, #604]	@ (801538c <Zigbee_CallBackProcessing+0xcd4>)
 8015130:	4a97      	ldr	r2, [pc, #604]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 8015132:	f640 7107 	movw	r1, #3847	@ 0xf07
 8015136:	4897      	ldr	r0, [pc, #604]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 8015138:	f001 fcf6 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801513c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015140:	68db      	ldr	r3, [r3, #12]
 8015142:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015146:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801514a:	2b00      	cmp	r3, #0
 801514c:	f000 8638 	beq.w	8015dc0 <Zigbee_CallBackProcessing+0x1708>
 8015150:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	f000 8632 	beq.w	8015dc0 <Zigbee_CallBackProcessing+0x1708>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 801515c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015160:	681b      	ldr	r3, [r3, #0]
 8015162:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 8015166:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801516a:	689b      	ldr	r3, [r3, #8]
 801516c:	4618      	mov	r0, r3
 801516e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015172:	685a      	ldr	r2, [r3, #4]
 8015174:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8015178:	4611      	mov	r1, r2
 801517a:	4798      	blx	r3
            }
            break;
 801517c:	f000 be20 	b.w	8015dc0 <Zigbee_CallBackProcessing+0x1708>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 8015180:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015184:	685b      	ldr	r3, [r3, #4]
 8015186:	2b02      	cmp	r3, #2
 8015188:	d006      	beq.n	8015198 <Zigbee_CallBackProcessing+0xae0>
 801518a:	4b80      	ldr	r3, [pc, #512]	@ (801538c <Zigbee_CallBackProcessing+0xcd4>)
 801518c:	4a80      	ldr	r2, [pc, #512]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 801518e:	f640 7113 	movw	r1, #3859	@ 0xf13
 8015192:	4880      	ldr	r0, [pc, #512]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 8015194:	f001 fcc8 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015198:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801519c:	68db      	ldr	r3, [r3, #12]
 801519e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80151a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	f000 860c 	beq.w	8015dc4 <Zigbee_CallBackProcessing+0x170c>
 80151ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	f000 8606 	beq.w	8015dc4 <Zigbee_CallBackProcessing+0x170c>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 80151b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 80151c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80151c6:	689b      	ldr	r3, [r3, #8]
 80151c8:	4618      	mov	r0, r3
 80151ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80151ce:	685a      	ldr	r2, [r3, #4]
 80151d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80151d4:	4611      	mov	r1, r2
 80151d6:	4798      	blx	r3
            }
            break;
 80151d8:	f000 bdf4 	b.w	8015dc4 <Zigbee_CallBackProcessing+0x170c>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 80151dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80151e0:	685b      	ldr	r3, [r3, #4]
 80151e2:	2b02      	cmp	r3, #2
 80151e4:	d006      	beq.n	80151f4 <Zigbee_CallBackProcessing+0xb3c>
 80151e6:	4b69      	ldr	r3, [pc, #420]	@ (801538c <Zigbee_CallBackProcessing+0xcd4>)
 80151e8:	4a69      	ldr	r2, [pc, #420]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 80151ea:	f640 711f 	movw	r1, #3871	@ 0xf1f
 80151ee:	4869      	ldr	r0, [pc, #420]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 80151f0:	f001 fc9a 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80151f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80151f8:	68db      	ldr	r3, [r3, #12]
 80151fa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80151fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015202:	2b00      	cmp	r3, #0
 8015204:	f000 85e0 	beq.w	8015dc8 <Zigbee_CallBackProcessing+0x1710>
 8015208:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801520c:	681b      	ldr	r3, [r3, #0]
 801520e:	2b00      	cmp	r3, #0
 8015210:	f000 85da 	beq.w	8015dc8 <Zigbee_CallBackProcessing+0x1710>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 8015214:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 801521e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015222:	689b      	ldr	r3, [r3, #8]
 8015224:	4618      	mov	r0, r3
 8015226:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801522a:	685a      	ldr	r2, [r3, #4]
 801522c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8015230:	4611      	mov	r1, r2
 8015232:	4798      	blx	r3
            }
            break;
 8015234:	f000 bdc8 	b.w	8015dc8 <Zigbee_CallBackProcessing+0x1710>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 8015238:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801523c:	685b      	ldr	r3, [r3, #4]
 801523e:	2b02      	cmp	r3, #2
 8015240:	d006      	beq.n	8015250 <Zigbee_CallBackProcessing+0xb98>
 8015242:	4b52      	ldr	r3, [pc, #328]	@ (801538c <Zigbee_CallBackProcessing+0xcd4>)
 8015244:	4a52      	ldr	r2, [pc, #328]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 8015246:	f640 712a 	movw	r1, #3882	@ 0xf2a
 801524a:	4852      	ldr	r0, [pc, #328]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 801524c:	f001 fc6c 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015250:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015254:	68db      	ldr	r3, [r3, #12]
 8015256:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801525a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801525e:	2b00      	cmp	r3, #0
 8015260:	f000 85b4 	beq.w	8015dcc <Zigbee_CallBackProcessing+0x1714>
 8015264:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015268:	681b      	ldr	r3, [r3, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	f000 85ae 	beq.w	8015dcc <Zigbee_CallBackProcessing+0x1714>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 8015270:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015274:	681b      	ldr	r3, [r3, #0]
 8015276:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 801527a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801527e:	689b      	ldr	r3, [r3, #8]
 8015280:	4618      	mov	r0, r3
 8015282:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015286:	685a      	ldr	r2, [r3, #4]
 8015288:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 801528c:	4611      	mov	r1, r2
 801528e:	4798      	blx	r3
            }
            break;
 8015290:	f000 bd9c 	b.w	8015dcc <Zigbee_CallBackProcessing+0x1714>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 8015294:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015298:	685b      	ldr	r3, [r3, #4]
 801529a:	2b02      	cmp	r3, #2
 801529c:	d006      	beq.n	80152ac <Zigbee_CallBackProcessing+0xbf4>
 801529e:	4b3b      	ldr	r3, [pc, #236]	@ (801538c <Zigbee_CallBackProcessing+0xcd4>)
 80152a0:	4a3b      	ldr	r2, [pc, #236]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 80152a2:	f640 7135 	movw	r1, #3893	@ 0xf35
 80152a6:	483b      	ldr	r0, [pc, #236]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 80152a8:	f001 fc3e 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80152ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80152b0:	68db      	ldr	r3, [r3, #12]
 80152b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80152b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	f000 8588 	beq.w	8015dd0 <Zigbee_CallBackProcessing+0x1718>
 80152c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	f000 8582 	beq.w	8015dd0 <Zigbee_CallBackProcessing+0x1718>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 80152cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 80152d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80152da:	689b      	ldr	r3, [r3, #8]
 80152dc:	4618      	mov	r0, r3
 80152de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80152e2:	685a      	ldr	r2, [r3, #4]
 80152e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80152e8:	4611      	mov	r1, r2
 80152ea:	4798      	blx	r3
            }
            break;
 80152ec:	f000 bd70 	b.w	8015dd0 <Zigbee_CallBackProcessing+0x1718>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 80152f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80152f4:	685b      	ldr	r3, [r3, #4]
 80152f6:	2b03      	cmp	r3, #3
 80152f8:	d006      	beq.n	8015308 <Zigbee_CallBackProcessing+0xc50>
 80152fa:	4b27      	ldr	r3, [pc, #156]	@ (8015398 <Zigbee_CallBackProcessing+0xce0>)
 80152fc:	4a24      	ldr	r2, [pc, #144]	@ (8015390 <Zigbee_CallBackProcessing+0xcd8>)
 80152fe:	f640 7143 	movw	r1, #3907	@ 0xf43
 8015302:	4824      	ldr	r0, [pc, #144]	@ (8015394 <Zigbee_CallBackProcessing+0xcdc>)
 8015304:	f001 fc10 	bl	8016b28 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 8015308:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801530c:	691b      	ldr	r3, [r3, #16]
 801530e:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8015310:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015312:	2b00      	cmp	r3, #0
 8015314:	f000 855e 	beq.w	8015dd4 <Zigbee_CallBackProcessing+0x171c>
 8015318:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801531a:	685b      	ldr	r3, [r3, #4]
 801531c:	2b00      	cmp	r3, #0
 801531e:	f000 8559 	beq.w	8015dd4 <Zigbee_CallBackProcessing+0x171c>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8015322:	2300      	movs	r3, #0
 8015324:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8015328:	e02a      	b.n	8015380 <Zigbee_CallBackProcessing+0xcc8>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 801532a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 801532e:	4613      	mov	r3, r2
 8015330:	005b      	lsls	r3, r3, #1
 8015332:	4413      	add	r3, r2
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	4a19      	ldr	r2, [pc, #100]	@ (801539c <Zigbee_CallBackProcessing+0xce4>)
 8015338:	4413      	add	r3, r2
 801533a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801533c:	429a      	cmp	r2, r3
 801533e:	d119      	bne.n	8015374 <Zigbee_CallBackProcessing+0xcbc>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 8015340:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	2b00      	cmp	r3, #0
 8015346:	d02d      	beq.n	80153a4 <Zigbee_CallBackProcessing+0xcec>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 8015348:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801534c:	689b      	ldr	r3, [r3, #8]
 801534e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 8015350:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015354:	68db      	ldr	r3, [r3, #12]
 8015356:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 801535a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	673b      	str	r3, [r7, #112]	@ 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 8015360:	4b0f      	ldr	r3, [pc, #60]	@ (80153a0 <Zigbee_CallBackProcessing+0xce8>)
 8015362:	6818      	ldr	r0, [r3, #0]
 8015364:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8015366:	689b      	ldr	r3, [r3, #8]
 8015368:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 801536c:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 801536e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8015370:	47a0      	blx	r4
                    break;
 8015372:	e018      	b.n	80153a6 <Zigbee_CallBackProcessing+0xcee>
                        continue;
 8015374:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 8015376:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 801537a:	3301      	adds	r3, #1
 801537c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8015380:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8015384:	2b07      	cmp	r3, #7
 8015386:	d9d0      	bls.n	801532a <Zigbee_CallBackProcessing+0xc72>
                }
            }
            break;
 8015388:	f000 bd24 	b.w	8015dd4 <Zigbee_CallBackProcessing+0x171c>
 801538c:	08018534 	.word	0x08018534
 8015390:	08018de8 	.word	0x08018de8
 8015394:	0801845c 	.word	0x0801845c
 8015398:	08018518 	.word	0x08018518
 801539c:	20001bbc 	.word	0x20001bbc
 80153a0:	20001a28 	.word	0x20001a28
                        break;
 80153a4:	bf00      	nop
            break;
 80153a6:	f000 bd15 	b.w	8015dd4 <Zigbee_CallBackProcessing+0x171c>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 80153aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	2b02      	cmp	r3, #2
 80153b2:	d006      	beq.n	80153c2 <Zigbee_CallBackProcessing+0xd0a>
 80153b4:	4bbf      	ldr	r3, [pc, #764]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 80153b6:	4ac0      	ldr	r2, [pc, #768]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 80153b8:	f44f 6176 	mov.w	r1, #3936	@ 0xf60
 80153bc:	48bf      	ldr	r0, [pc, #764]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 80153be:	f001 fbb3 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80153c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80153cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	f000 8501 	beq.w	8015dd8 <Zigbee_CallBackProcessing+0x1720>
 80153d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153da:	681b      	ldr	r3, [r3, #0]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	f000 84fb 	beq.w	8015dd8 <Zigbee_CallBackProcessing+0x1720>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 80153e2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	653b      	str	r3, [r7, #80]	@ 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 80153ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80153ee:	689b      	ldr	r3, [r3, #8]
 80153f0:	4618      	mov	r0, r3
 80153f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80153f6:	685a      	ldr	r2, [r3, #4]
 80153f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80153fa:	4611      	mov	r1, r2
 80153fc:	4798      	blx	r3
            }
            break;
 80153fe:	f000 bceb 	b.w	8015dd8 <Zigbee_CallBackProcessing+0x1720>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 8015402:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015406:	685b      	ldr	r3, [r3, #4]
 8015408:	2b02      	cmp	r3, #2
 801540a:	d006      	beq.n	801541a <Zigbee_CallBackProcessing+0xd62>
 801540c:	4ba9      	ldr	r3, [pc, #676]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 801540e:	4aaa      	ldr	r2, [pc, #680]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 8015410:	f640 716b 	movw	r1, #3947	@ 0xf6b
 8015414:	48a9      	ldr	r0, [pc, #676]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 8015416:	f001 fb87 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801541a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015424:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015428:	2b00      	cmp	r3, #0
 801542a:	f000 84d7 	beq.w	8015ddc <Zigbee_CallBackProcessing+0x1724>
 801542e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	2b00      	cmp	r3, #0
 8015436:	f000 84d1 	beq.w	8015ddc <Zigbee_CallBackProcessing+0x1724>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 801543a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	657b      	str	r3, [r7, #84]	@ 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 8015442:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015446:	689b      	ldr	r3, [r3, #8]
 8015448:	4618      	mov	r0, r3
 801544a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801544e:	685a      	ldr	r2, [r3, #4]
 8015450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015452:	4611      	mov	r1, r2
 8015454:	4798      	blx	r3
            }
            break;
 8015456:	f000 bcc1 	b.w	8015ddc <Zigbee_CallBackProcessing+0x1724>

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 801545a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801545e:	685b      	ldr	r3, [r3, #4]
 8015460:	2b02      	cmp	r3, #2
 8015462:	d006      	beq.n	8015472 <Zigbee_CallBackProcessing+0xdba>
 8015464:	4b93      	ldr	r3, [pc, #588]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 8015466:	4a94      	ldr	r2, [pc, #592]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 8015468:	f640 7176 	movw	r1, #3958	@ 0xf76
 801546c:	4893      	ldr	r0, [pc, #588]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 801546e:	f001 fb5b 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015472:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801547c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015480:	2b00      	cmp	r3, #0
 8015482:	f000 84ad 	beq.w	8015de0 <Zigbee_CallBackProcessing+0x1728>
 8015486:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801548a:	681b      	ldr	r3, [r3, #0]
 801548c:	2b00      	cmp	r3, #0
 801548e:	f000 84a7 	beq.w	8015de0 <Zigbee_CallBackProcessing+0x1728>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 8015492:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	65bb      	str	r3, [r7, #88]	@ 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 801549a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801549e:	689b      	ldr	r3, [r3, #8]
 80154a0:	4618      	mov	r0, r3
 80154a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154a6:	685a      	ldr	r2, [r3, #4]
 80154a8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80154aa:	4611      	mov	r1, r2
 80154ac:	4798      	blx	r3
            }
            break;
 80154ae:	f000 bc97 	b.w	8015de0 <Zigbee_CallBackProcessing+0x1728>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 80154b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80154b6:	685b      	ldr	r3, [r3, #4]
 80154b8:	2b02      	cmp	r3, #2
 80154ba:	d006      	beq.n	80154ca <Zigbee_CallBackProcessing+0xe12>
 80154bc:	4b7d      	ldr	r3, [pc, #500]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 80154be:	4a7e      	ldr	r2, [pc, #504]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 80154c0:	f640 7181 	movw	r1, #3969	@ 0xf81
 80154c4:	487d      	ldr	r0, [pc, #500]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 80154c6:	f001 fb2f 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80154ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80154d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154d8:	2b00      	cmp	r3, #0
 80154da:	f000 8483 	beq.w	8015de4 <Zigbee_CallBackProcessing+0x172c>
 80154de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	f000 847d 	beq.w	8015de4 <Zigbee_CallBackProcessing+0x172c>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 80154ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 80154f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80154f6:	689b      	ldr	r3, [r3, #8]
 80154f8:	4618      	mov	r0, r3
 80154fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80154fe:	685a      	ldr	r2, [r3, #4]
 8015500:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8015502:	4611      	mov	r1, r2
 8015504:	4798      	blx	r3
            }
            break;
 8015506:	f000 bc6d 	b.w	8015de4 <Zigbee_CallBackProcessing+0x172c>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 801550a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801550e:	685b      	ldr	r3, [r3, #4]
 8015510:	2b02      	cmp	r3, #2
 8015512:	d006      	beq.n	8015522 <Zigbee_CallBackProcessing+0xe6a>
 8015514:	4b67      	ldr	r3, [pc, #412]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 8015516:	4a68      	ldr	r2, [pc, #416]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 8015518:	f640 718c 	movw	r1, #3980	@ 0xf8c
 801551c:	4867      	ldr	r0, [pc, #412]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 801551e:	f001 fb03 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015522:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801552c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015530:	2b00      	cmp	r3, #0
 8015532:	f000 8459 	beq.w	8015de8 <Zigbee_CallBackProcessing+0x1730>
 8015536:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	2b00      	cmp	r3, #0
 801553e:	f000 8453 	beq.w	8015de8 <Zigbee_CallBackProcessing+0x1730>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 8015542:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	663b      	str	r3, [r7, #96]	@ 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 801554a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801554e:	689b      	ldr	r3, [r3, #8]
 8015550:	4618      	mov	r0, r3
 8015552:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015556:	685a      	ldr	r2, [r3, #4]
 8015558:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801555a:	4611      	mov	r1, r2
 801555c:	4798      	blx	r3
            }
            break;
 801555e:	f000 bc43 	b.w	8015de8 <Zigbee_CallBackProcessing+0x1730>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 8015562:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015566:	685b      	ldr	r3, [r3, #4]
 8015568:	2b02      	cmp	r3, #2
 801556a:	d006      	beq.n	801557a <Zigbee_CallBackProcessing+0xec2>
 801556c:	4b51      	ldr	r3, [pc, #324]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 801556e:	4a52      	ldr	r2, [pc, #328]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 8015570:	f640 7197 	movw	r1, #3991	@ 0xf97
 8015574:	4851      	ldr	r0, [pc, #324]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 8015576:	f001 fad7 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801557a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801557e:	68db      	ldr	r3, [r3, #12]
 8015580:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015584:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015588:	2b00      	cmp	r3, #0
 801558a:	f000 842f 	beq.w	8015dec <Zigbee_CallBackProcessing+0x1734>
 801558e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015592:	681b      	ldr	r3, [r3, #0]
 8015594:	2b00      	cmp	r3, #0
 8015596:	f000 8429 	beq.w	8015dec <Zigbee_CallBackProcessing+0x1734>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 801559a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801559e:	681b      	ldr	r3, [r3, #0]
 80155a0:	667b      	str	r3, [r7, #100]	@ 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 80155a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80155a6:	689b      	ldr	r3, [r3, #8]
 80155a8:	4618      	mov	r0, r3
 80155aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155ae:	685a      	ldr	r2, [r3, #4]
 80155b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80155b2:	4611      	mov	r1, r2
 80155b4:	4798      	blx	r3
            }
            break;
 80155b6:	f000 bc19 	b.w	8015dec <Zigbee_CallBackProcessing+0x1734>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 80155ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80155be:	685b      	ldr	r3, [r3, #4]
 80155c0:	2b02      	cmp	r3, #2
 80155c2:	d006      	beq.n	80155d2 <Zigbee_CallBackProcessing+0xf1a>
 80155c4:	4b3b      	ldr	r3, [pc, #236]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 80155c6:	4a3c      	ldr	r2, [pc, #240]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 80155c8:	f640 71a2 	movw	r1, #4002	@ 0xfa2
 80155cc:	483b      	ldr	r0, [pc, #236]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 80155ce:	f001 faab 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80155d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80155d6:	68db      	ldr	r3, [r3, #12]
 80155d8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80155dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	f000 8405 	beq.w	8015df0 <Zigbee_CallBackProcessing+0x1738>
 80155e6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	f000 83ff 	beq.w	8015df0 <Zigbee_CallBackProcessing+0x1738>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 80155f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80155f6:	681b      	ldr	r3, [r3, #0]
 80155f8:	66bb      	str	r3, [r7, #104]	@ 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 80155fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80155fe:	689b      	ldr	r3, [r3, #8]
 8015600:	4618      	mov	r0, r3
 8015602:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015606:	685a      	ldr	r2, [r3, #4]
 8015608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801560a:	4611      	mov	r1, r2
 801560c:	4798      	blx	r3
            }
            break;
 801560e:	e3ef      	b.n	8015df0 <Zigbee_CallBackProcessing+0x1738>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 8015610:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015614:	685b      	ldr	r3, [r3, #4]
 8015616:	2b01      	cmp	r3, #1
 8015618:	d006      	beq.n	8015628 <Zigbee_CallBackProcessing+0xf70>
 801561a:	4b29      	ldr	r3, [pc, #164]	@ (80156c0 <Zigbee_CallBackProcessing+0x1008>)
 801561c:	4a26      	ldr	r2, [pc, #152]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 801561e:	f640 71af 	movw	r1, #4015	@ 0xfaf
 8015622:	4826      	ldr	r0, [pc, #152]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 8015624:	f001 fa80 	bl	8016b28 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 8015628:	4b26      	ldr	r3, [pc, #152]	@ (80156c4 <Zigbee_CallBackProcessing+0x100c>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	2b00      	cmp	r3, #0
 801562e:	f000 83e1 	beq.w	8015df4 <Zigbee_CallBackProcessing+0x173c>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 8015632:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015636:	689b      	ldr	r3, [r3, #8]
 8015638:	66fb      	str	r3, [r7, #108]	@ 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 801563a:	4b22      	ldr	r3, [pc, #136]	@ (80156c4 <Zigbee_CallBackProcessing+0x100c>)
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	4a22      	ldr	r2, [pc, #136]	@ (80156c8 <Zigbee_CallBackProcessing+0x1010>)
 8015640:	6812      	ldr	r2, [r2, #0]
 8015642:	4611      	mov	r1, r2
 8015644:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8015646:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 8015648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801564a:	781b      	ldrb	r3, [r3, #0]
 801564c:	2b85      	cmp	r3, #133	@ 0x85
 801564e:	f040 83d1 	bne.w	8015df4 <Zigbee_CallBackProcessing+0x173c>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 8015652:	4b1c      	ldr	r3, [pc, #112]	@ (80156c4 <Zigbee_CallBackProcessing+0x100c>)
 8015654:	2200      	movs	r2, #0
 8015656:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 8015658:	e3cc      	b.n	8015df4 <Zigbee_CallBackProcessing+0x173c>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 801565a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801565e:	685b      	ldr	r3, [r3, #4]
 8015660:	2b02      	cmp	r3, #2
 8015662:	d006      	beq.n	8015672 <Zigbee_CallBackProcessing+0xfba>
 8015664:	4b13      	ldr	r3, [pc, #76]	@ (80156b4 <Zigbee_CallBackProcessing+0xffc>)
 8015666:	4a14      	ldr	r2, [pc, #80]	@ (80156b8 <Zigbee_CallBackProcessing+0x1000>)
 8015668:	f640 71bd 	movw	r1, #4029	@ 0xfbd
 801566c:	4813      	ldr	r0, [pc, #76]	@ (80156bc <Zigbee_CallBackProcessing+0x1004>)
 801566e:	f001 fa5b 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015672:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015676:	68db      	ldr	r3, [r3, #12]
 8015678:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801567c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015680:	2b00      	cmp	r3, #0
 8015682:	f000 83b9 	beq.w	8015df8 <Zigbee_CallBackProcessing+0x1740>
 8015686:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	2b00      	cmp	r3, #0
 801568e:	f000 83b3 	beq.w	8015df8 <Zigbee_CallBackProcessing+0x1740>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 8015692:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 801569c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80156a0:	689b      	ldr	r3, [r3, #8]
 80156a2:	4618      	mov	r0, r3
 80156a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156a8:	685a      	ldr	r2, [r3, #4]
 80156aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80156ae:	4611      	mov	r1, r2
 80156b0:	4798      	blx	r3
            }
            break;
 80156b2:	e3a1      	b.n	8015df8 <Zigbee_CallBackProcessing+0x1740>
 80156b4:	08018534 	.word	0x08018534
 80156b8:	08018de8 	.word	0x08018de8
 80156bc:	0801845c 	.word	0x0801845c
 80156c0:	080184fc 	.word	0x080184fc
 80156c4:	20001a20 	.word	0x20001a20
 80156c8:	20001a24 	.word	0x20001a24

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 80156cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80156d0:	685b      	ldr	r3, [r3, #4]
 80156d2:	2b02      	cmp	r3, #2
 80156d4:	d006      	beq.n	80156e4 <Zigbee_CallBackProcessing+0x102c>
 80156d6:	4bc8      	ldr	r3, [pc, #800]	@ (80159f8 <Zigbee_CallBackProcessing+0x1340>)
 80156d8:	4ac8      	ldr	r2, [pc, #800]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 80156da:	f640 71c8 	movw	r1, #4040	@ 0xfc8
 80156de:	48c8      	ldr	r0, [pc, #800]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 80156e0:	f001 fa22 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80156e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80156ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	f000 8382 	beq.w	8015dfc <Zigbee_CallBackProcessing+0x1744>
 80156f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	f000 837c 	beq.w	8015dfc <Zigbee_CallBackProcessing+0x1744>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 8015704:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 801570e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015712:	689b      	ldr	r3, [r3, #8]
 8015714:	4618      	mov	r0, r3
 8015716:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801571a:	685a      	ldr	r2, [r3, #4]
 801571c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8015720:	4611      	mov	r1, r2
 8015722:	4798      	blx	r3
            }
            break;
 8015724:	e36a      	b.n	8015dfc <Zigbee_CallBackProcessing+0x1744>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 8015726:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801572a:	685b      	ldr	r3, [r3, #4]
 801572c:	2b02      	cmp	r3, #2
 801572e:	d006      	beq.n	801573e <Zigbee_CallBackProcessing+0x1086>
 8015730:	4bb1      	ldr	r3, [pc, #708]	@ (80159f8 <Zigbee_CallBackProcessing+0x1340>)
 8015732:	4ab2      	ldr	r2, [pc, #712]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 8015734:	f640 71d3 	movw	r1, #4051	@ 0xfd3
 8015738:	48b1      	ldr	r0, [pc, #708]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 801573a:	f001 f9f5 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801573e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015742:	68db      	ldr	r3, [r3, #12]
 8015744:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015748:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801574c:	2b00      	cmp	r3, #0
 801574e:	f000 8357 	beq.w	8015e00 <Zigbee_CallBackProcessing+0x1748>
 8015752:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	2b00      	cmp	r3, #0
 801575a:	f000 8351 	beq.w	8015e00 <Zigbee_CallBackProcessing+0x1748>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 801575e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015762:	681b      	ldr	r3, [r3, #0]
 8015764:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 8015768:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801576c:	689b      	ldr	r3, [r3, #8]
 801576e:	4618      	mov	r0, r3
 8015770:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015774:	685a      	ldr	r2, [r3, #4]
 8015776:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801577a:	4611      	mov	r1, r2
 801577c:	4798      	blx	r3
            }
            break;
 801577e:	e33f      	b.n	8015e00 <Zigbee_CallBackProcessing+0x1748>

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 8015780:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015784:	685b      	ldr	r3, [r3, #4]
 8015786:	2b02      	cmp	r3, #2
 8015788:	d006      	beq.n	8015798 <Zigbee_CallBackProcessing+0x10e0>
 801578a:	4b9b      	ldr	r3, [pc, #620]	@ (80159f8 <Zigbee_CallBackProcessing+0x1340>)
 801578c:	4a9b      	ldr	r2, [pc, #620]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 801578e:	f640 71de 	movw	r1, #4062	@ 0xfde
 8015792:	489b      	ldr	r0, [pc, #620]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 8015794:	f001 f9c8 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015798:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80157a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	f000 832c 	beq.w	8015e04 <Zigbee_CallBackProcessing+0x174c>
 80157ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157b0:	681b      	ldr	r3, [r3, #0]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	f000 8326 	beq.w	8015e04 <Zigbee_CallBackProcessing+0x174c>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 80157b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157bc:	681b      	ldr	r3, [r3, #0]
 80157be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 80157c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157c6:	689b      	ldr	r3, [r3, #8]
 80157c8:	4618      	mov	r0, r3
 80157ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80157ce:	685a      	ldr	r2, [r3, #4]
 80157d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80157d4:	4611      	mov	r1, r2
 80157d6:	4798      	blx	r3
            }
            break;
 80157d8:	e314      	b.n	8015e04 <Zigbee_CallBackProcessing+0x174c>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 80157da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157de:	685b      	ldr	r3, [r3, #4]
 80157e0:	2b02      	cmp	r3, #2
 80157e2:	d006      	beq.n	80157f2 <Zigbee_CallBackProcessing+0x113a>
 80157e4:	4b84      	ldr	r3, [pc, #528]	@ (80159f8 <Zigbee_CallBackProcessing+0x1340>)
 80157e6:	4a85      	ldr	r2, [pc, #532]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 80157e8:	f640 71e9 	movw	r1, #4073	@ 0xfe9
 80157ec:	4884      	ldr	r0, [pc, #528]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 80157ee:	f001 f99b 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80157f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80157f6:	68db      	ldr	r3, [r3, #12]
 80157f8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80157fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015800:	2b00      	cmp	r3, #0
 8015802:	f000 8301 	beq.w	8015e08 <Zigbee_CallBackProcessing+0x1750>
 8015806:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2b00      	cmp	r3, #0
 801580e:	f000 82fb 	beq.w	8015e08 <Zigbee_CallBackProcessing+0x1750>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 8015812:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 801581c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015820:	689b      	ldr	r3, [r3, #8]
 8015822:	4618      	mov	r0, r3
 8015824:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015828:	685a      	ldr	r2, [r3, #4]
 801582a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801582e:	4611      	mov	r1, r2
 8015830:	4798      	blx	r3
            }
            break;
 8015832:	e2e9      	b.n	8015e08 <Zigbee_CallBackProcessing+0x1750>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 8015834:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015838:	685b      	ldr	r3, [r3, #4]
 801583a:	2b02      	cmp	r3, #2
 801583c:	d006      	beq.n	801584c <Zigbee_CallBackProcessing+0x1194>
 801583e:	4b6e      	ldr	r3, [pc, #440]	@ (80159f8 <Zigbee_CallBackProcessing+0x1340>)
 8015840:	4a6e      	ldr	r2, [pc, #440]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 8015842:	f640 71f4 	movw	r1, #4084	@ 0xff4
 8015846:	486e      	ldr	r0, [pc, #440]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 8015848:	f001 f96e 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 801584c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015856:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801585a:	2b00      	cmp	r3, #0
 801585c:	f000 82d6 	beq.w	8015e0c <Zigbee_CallBackProcessing+0x1754>
 8015860:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015864:	681b      	ldr	r3, [r3, #0]
 8015866:	2b00      	cmp	r3, #0
 8015868:	f000 82d0 	beq.w	8015e0c <Zigbee_CallBackProcessing+0x1754>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 801586c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015870:	681b      	ldr	r3, [r3, #0]
 8015872:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 8015876:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801587a:	689b      	ldr	r3, [r3, #8]
 801587c:	4618      	mov	r0, r3
 801587e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015882:	685a      	ldr	r2, [r3, #4]
 8015884:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8015888:	4611      	mov	r1, r2
 801588a:	4798      	blx	r3
            }
            break;
 801588c:	e2be      	b.n	8015e0c <Zigbee_CallBackProcessing+0x1754>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 801588e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015892:	685b      	ldr	r3, [r3, #4]
 8015894:	2b02      	cmp	r3, #2
 8015896:	d006      	beq.n	80158a6 <Zigbee_CallBackProcessing+0x11ee>
 8015898:	4b57      	ldr	r3, [pc, #348]	@ (80159f8 <Zigbee_CallBackProcessing+0x1340>)
 801589a:	4a58      	ldr	r2, [pc, #352]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 801589c:	f640 71ff 	movw	r1, #4095	@ 0xfff
 80158a0:	4857      	ldr	r0, [pc, #348]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 80158a2:	f001 f941 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 80158a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 80158b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f000 82ab 	beq.w	8015e10 <Zigbee_CallBackProcessing+0x1758>
 80158ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	f000 82a5 	beq.w	8015e10 <Zigbee_CallBackProcessing+0x1758>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 80158c6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 80158d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158d4:	689b      	ldr	r3, [r3, #8]
 80158d6:	4618      	mov	r0, r3
 80158d8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80158dc:	685a      	ldr	r2, [r3, #4]
 80158de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80158e2:	4611      	mov	r1, r2
 80158e4:	4798      	blx	r3
            }
            break;
 80158e6:	e293      	b.n	8015e10 <Zigbee_CallBackProcessing+0x1758>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 80158e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	2b02      	cmp	r3, #2
 80158f0:	d006      	beq.n	8015900 <Zigbee_CallBackProcessing+0x1248>
 80158f2:	4b41      	ldr	r3, [pc, #260]	@ (80159f8 <Zigbee_CallBackProcessing+0x1340>)
 80158f4:	4a41      	ldr	r2, [pc, #260]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 80158f6:	f241 010a 	movw	r1, #4106	@ 0x100a
 80158fa:	4841      	ldr	r0, [pc, #260]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 80158fc:	f001 f914 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015900:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015904:	68db      	ldr	r3, [r3, #12]
 8015906:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 801590a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801590e:	2b00      	cmp	r3, #0
 8015910:	f000 8280 	beq.w	8015e14 <Zigbee_CallBackProcessing+0x175c>
 8015914:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015918:	681b      	ldr	r3, [r3, #0]
 801591a:	2b00      	cmp	r3, #0
 801591c:	f000 827a 	beq.w	8015e14 <Zigbee_CallBackProcessing+0x175c>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 8015920:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015924:	681b      	ldr	r3, [r3, #0]
 8015926:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 801592a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801592e:	689b      	ldr	r3, [r3, #8]
 8015930:	4618      	mov	r0, r3
 8015932:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015936:	685a      	ldr	r2, [r3, #4]
 8015938:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801593c:	4611      	mov	r1, r2
 801593e:	4798      	blx	r3
            }
            break;
 8015940:	e268      	b.n	8015e14 <Zigbee_CallBackProcessing+0x175c>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 8015942:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	2b03      	cmp	r3, #3
 801594a:	d006      	beq.n	801595a <Zigbee_CallBackProcessing+0x12a2>
 801594c:	4b2d      	ldr	r3, [pc, #180]	@ (8015a04 <Zigbee_CallBackProcessing+0x134c>)
 801594e:	4a2b      	ldr	r2, [pc, #172]	@ (80159fc <Zigbee_CallBackProcessing+0x1344>)
 8015950:	f241 0118 	movw	r1, #4120	@ 0x1018
 8015954:	482a      	ldr	r0, [pc, #168]	@ (8015a00 <Zigbee_CallBackProcessing+0x1348>)
 8015956:	f001 f8e7 	bl	8016b28 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 801595a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 801595e:	691b      	ldr	r3, [r3, #16]
 8015960:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 8015964:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015968:	2b00      	cmp	r3, #0
 801596a:	f000 8255 	beq.w	8015e18 <Zigbee_CallBackProcessing+0x1760>
 801596e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8015972:	685b      	ldr	r3, [r3, #4]
 8015974:	2b00      	cmp	r3, #0
 8015976:	f000 824f 	beq.w	8015e18 <Zigbee_CallBackProcessing+0x1760>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 801597a:	2300      	movs	r3, #0
 801597c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8015980:	e032      	b.n	80159e8 <Zigbee_CallBackProcessing+0x1330>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 8015982:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8015986:	4613      	mov	r3, r2
 8015988:	005b      	lsls	r3, r3, #1
 801598a:	4413      	add	r3, r2
 801598c:	009b      	lsls	r3, r3, #2
 801598e:	4a1e      	ldr	r2, [pc, #120]	@ (8015a08 <Zigbee_CallBackProcessing+0x1350>)
 8015990:	4413      	add	r3, r2
 8015992:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8015996:	429a      	cmp	r2, r3
 8015998:	d120      	bne.n	80159dc <Zigbee_CallBackProcessing+0x1324>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 801599a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801599e:	681b      	ldr	r3, [r3, #0]
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d026      	beq.n	80159f2 <Zigbee_CallBackProcessing+0x133a>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 80159a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159a8:	689b      	ldr	r3, [r3, #8]
 80159aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 80159ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80159b2:	68db      	ldr	r3, [r3, #12]
 80159b4:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 80159b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80159bc:	685b      	ldr	r3, [r3, #4]
 80159be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 80159c2:	4b12      	ldr	r3, [pc, #72]	@ (8015a0c <Zigbee_CallBackProcessing+0x1354>)
 80159c4:	6818      	ldr	r0, [r3, #0]
 80159c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80159ca:	689b      	ldr	r3, [r3, #8]
 80159cc:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 80159d0:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 80159d4:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 80159d8:	47a0      	blx	r4
                    break;
 80159da:	e00b      	b.n	80159f4 <Zigbee_CallBackProcessing+0x133c>
                        continue;
 80159dc:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 80159de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159e2:	3301      	adds	r3, #1
 80159e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80159e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80159ec:	2b07      	cmp	r3, #7
 80159ee:	d9c8      	bls.n	8015982 <Zigbee_CallBackProcessing+0x12ca>
                }
            }
            break;
 80159f0:	e212      	b.n	8015e18 <Zigbee_CallBackProcessing+0x1760>
                        break;
 80159f2:	bf00      	nop
            break;
 80159f4:	e210      	b.n	8015e18 <Zigbee_CallBackProcessing+0x1760>
 80159f6:	bf00      	nop
 80159f8:	08018534 	.word	0x08018534
 80159fc:	08018de8 	.word	0x08018de8
 8015a00:	0801845c 	.word	0x0801845c
 8015a04:	08018518 	.word	0x08018518
 8015a08:	20001bbc 	.word	0x20001bbc
 8015a0c:	20001a28 	.word	0x20001a28
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8015a10:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a14:	685b      	ldr	r3, [r3, #4]
 8015a16:	2b02      	cmp	r3, #2
 8015a18:	d006      	beq.n	8015a28 <Zigbee_CallBackProcessing+0x1370>
 8015a1a:	4bc6      	ldr	r3, [pc, #792]	@ (8015d34 <Zigbee_CallBackProcessing+0x167c>)
 8015a1c:	4ac6      	ldr	r2, [pc, #792]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015a1e:	f241 0139 	movw	r1, #4153	@ 0x1039
 8015a22:	48c6      	ldr	r0, [pc, #792]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015a24:	f001 f880 	bl	8016b28 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015a28:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a2c:	689b      	ldr	r3, [r3, #8]
 8015a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            cb_arg = (void *)p_notification->Data[1];
 8015a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 8015a3c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 8015a40:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 8015a44:	f7ee fd04 	bl	8004450 <zcl_cluster_data_ind>
 8015a48:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015a4c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8015a50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a54:	60da      	str	r2, [r3, #12]
            break;
 8015a56:	e1ea      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 8015a58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a5c:	685b      	ldr	r3, [r3, #4]
 8015a5e:	2b02      	cmp	r3, #2
 8015a60:	d006      	beq.n	8015a70 <Zigbee_CallBackProcessing+0x13b8>
 8015a62:	4bb4      	ldr	r3, [pc, #720]	@ (8015d34 <Zigbee_CallBackProcessing+0x167c>)
 8015a64:	4ab4      	ldr	r2, [pc, #720]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015a66:	f241 0148 	movw	r1, #4168	@ 0x1048
 8015a6a:	48b4      	ldr	r0, [pc, #720]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015a6c:	f001 f85c 	bl	8016b28 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 8015a70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a74:	689b      	ldr	r3, [r3, #8]
 8015a76:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            cb_arg = (void *)p_notification->Data[1];
 8015a7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a7e:	68db      	ldr	r3, [r3, #12]
 8015a80:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 8015a84:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 8015a88:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8015a8c:	f7ee fcfa 	bl	8004484 <zcl_cluster_alarm_data_ind>
 8015a90:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015a94:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8015a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015a9c:	60da      	str	r2, [r3, #12]
            break;
 8015a9e:	e1c6      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 8015aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015aa4:	685b      	ldr	r3, [r3, #4]
 8015aa6:	2b02      	cmp	r3, #2
 8015aa8:	d006      	beq.n	8015ab8 <Zigbee_CallBackProcessing+0x1400>
 8015aaa:	4ba2      	ldr	r3, [pc, #648]	@ (8015d34 <Zigbee_CallBackProcessing+0x167c>)
 8015aac:	4aa2      	ldr	r2, [pc, #648]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015aae:	f241 0152 	movw	r1, #4178	@ 0x1052
 8015ab2:	48a2      	ldr	r0, [pc, #648]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015ab4:	f001 f838 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015ab8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015abc:	68db      	ldr	r3, [r3, #12]
 8015abe:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015ac2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	f000 81a8 	beq.w	8015e1c <Zigbee_CallBackProcessing+0x1764>
 8015acc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	f000 81a2 	beq.w	8015e1c <Zigbee_CallBackProcessing+0x1764>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 8015ad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 8015ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ae6:	689b      	ldr	r3, [r3, #8]
 8015ae8:	4618      	mov	r0, r3
 8015aea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015aee:	685a      	ldr	r2, [r3, #4]
 8015af0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8015af4:	4611      	mov	r1, r2
 8015af6:	4798      	blx	r3
            }
            break;
 8015af8:	e190      	b.n	8015e1c <Zigbee_CallBackProcessing+0x1764>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 8015afa:	2300      	movs	r3, #0
 8015afc:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            assert(p_notification->Size == 2);
 8015b00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b04:	685b      	ldr	r3, [r3, #4]
 8015b06:	2b02      	cmp	r3, #2
 8015b08:	d006      	beq.n	8015b18 <Zigbee_CallBackProcessing+0x1460>
 8015b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8015d34 <Zigbee_CallBackProcessing+0x167c>)
 8015b0c:	4a8a      	ldr	r2, [pc, #552]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015b0e:	f44f 5183 	mov.w	r1, #4192	@ 0x1060
 8015b12:	488a      	ldr	r0, [pc, #552]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015b14:	f001 f808 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015b18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b1c:	68db      	ldr	r3, [r3, #12]
 8015b1e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 8015b22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	d026      	beq.n	8015b78 <Zigbee_CallBackProcessing+0x14c0>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 8015b2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b2e:	689b      	ldr	r3, [r3, #8]
 8015b30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

                if (info->callback != NULL) {
 8015b34:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	2b00      	cmp	r3, #0
 8015b3c:	d00f      	beq.n	8015b5e <Zigbee_CallBackProcessing+0x14a6>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 8015b3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    err = callback(zcl_rsp, info->arg);
 8015b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b4c:	685a      	ldr	r2, [r3, #4]
 8015b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8015b52:	4611      	mov	r1, r2
 8015b54:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8015b58:	4798      	blx	r3
 8015b5a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 8015b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015b62:	7a1b      	ldrb	r3, [r3, #8]
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d007      	beq.n	8015b78 <Zigbee_CallBackProcessing+0x14c0>
 8015b68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8015b6c:	785b      	ldrb	r3, [r3, #1]
 8015b6e:	2b94      	cmp	r3, #148	@ 0x94
 8015b70:	d002      	beq.n	8015b78 <Zigbee_CallBackProcessing+0x14c0>
                    /* Don't free the callback yet */
                    info = NULL;
 8015b72:	2300      	movs	r3, #0
 8015b74:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 8015b78:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8015b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b80:	60da      	str	r2, [r3, #12]
            break;
 8015b82:	e154      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 8015b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	2b02      	cmp	r3, #2
 8015b8c:	d006      	beq.n	8015b9c <Zigbee_CallBackProcessing+0x14e4>
 8015b8e:	4b69      	ldr	r3, [pc, #420]	@ (8015d34 <Zigbee_CallBackProcessing+0x167c>)
 8015b90:	4a69      	ldr	r2, [pc, #420]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015b92:	f241 0178 	movw	r1, #4216	@ 0x1078
 8015b96:	4869      	ldr	r0, [pc, #420]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015b98:	f000 ffc6 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015ba0:	68db      	ldr	r3, [r3, #12]
 8015ba2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015ba6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015baa:	2b00      	cmp	r3, #0
 8015bac:	f000 8138 	beq.w	8015e20 <Zigbee_CallBackProcessing+0x1768>
 8015bb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	2b00      	cmp	r3, #0
 8015bb8:	f000 8132 	beq.w	8015e20 <Zigbee_CallBackProcessing+0x1768>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 8015bbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 8015bc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015bca:	689b      	ldr	r3, [r3, #8]
 8015bcc:	4618      	mov	r0, r3
 8015bce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015bd2:	685a      	ldr	r2, [r3, #4]
 8015bd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8015bd8:	4611      	mov	r1, r2
 8015bda:	4798      	blx	r3
            }
            break;
 8015bdc:	e120      	b.n	8015e20 <Zigbee_CallBackProcessing+0x1768>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 8015bde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015be2:	685b      	ldr	r3, [r3, #4]
 8015be4:	2b02      	cmp	r3, #2
 8015be6:	d006      	beq.n	8015bf6 <Zigbee_CallBackProcessing+0x153e>
 8015be8:	4b52      	ldr	r3, [pc, #328]	@ (8015d34 <Zigbee_CallBackProcessing+0x167c>)
 8015bea:	4a53      	ldr	r2, [pc, #332]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015bec:	f241 0183 	movw	r1, #4227	@ 0x1083
 8015bf0:	4852      	ldr	r0, [pc, #328]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015bf2:	f000 ff99 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015c00:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	f000 810d 	beq.w	8015e24 <Zigbee_CallBackProcessing+0x176c>
 8015c0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f000 8107 	beq.w	8015e24 <Zigbee_CallBackProcessing+0x176c>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 8015c16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 8015c20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c24:	689b      	ldr	r3, [r3, #8]
 8015c26:	4618      	mov	r0, r3
 8015c28:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c2c:	685a      	ldr	r2, [r3, #4]
 8015c2e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8015c32:	4611      	mov	r1, r2
 8015c34:	4798      	blx	r3
            }
            break;
 8015c36:	e0f5      	b.n	8015e24 <Zigbee_CallBackProcessing+0x176c>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 8015c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c3c:	685b      	ldr	r3, [r3, #4]
 8015c3e:	2b02      	cmp	r3, #2
 8015c40:	d006      	beq.n	8015c50 <Zigbee_CallBackProcessing+0x1598>
 8015c42:	4b3c      	ldr	r3, [pc, #240]	@ (8015d34 <Zigbee_CallBackProcessing+0x167c>)
 8015c44:	4a3c      	ldr	r2, [pc, #240]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015c46:	f241 018e 	movw	r1, #4238	@ 0x108e
 8015c4a:	483c      	ldr	r0, [pc, #240]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015c4c:	f000 ff6c 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 8015c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c54:	68db      	ldr	r3, [r3, #12]
 8015c56:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015c5a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	f000 80e2 	beq.w	8015e28 <Zigbee_CallBackProcessing+0x1770>
 8015c64:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	f000 80dc 	beq.w	8015e28 <Zigbee_CallBackProcessing+0x1770>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 8015c70:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 8015c7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c7e:	689b      	ldr	r3, [r3, #8]
 8015c80:	4618      	mov	r0, r3
 8015c82:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015c86:	685a      	ldr	r2, [r3, #4]
 8015c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8015c8c:	4611      	mov	r1, r2
 8015c8e:	4798      	blx	r3
            }
            break;
 8015c90:	e0ca      	b.n	8015e28 <Zigbee_CallBackProcessing+0x1770>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 8015c92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015c96:	685b      	ldr	r3, [r3, #4]
 8015c98:	2b05      	cmp	r3, #5
 8015c9a:	d006      	beq.n	8015caa <Zigbee_CallBackProcessing+0x15f2>
 8015c9c:	4b28      	ldr	r3, [pc, #160]	@ (8015d40 <Zigbee_CallBackProcessing+0x1688>)
 8015c9e:	4a26      	ldr	r2, [pc, #152]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015ca0:	f241 0199 	movw	r1, #4249	@ 0x1099
 8015ca4:	4825      	ldr	r0, [pc, #148]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015ca6:	f000 ff3f 	bl	8016b28 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 8015caa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015cae:	699b      	ldr	r3, [r3, #24]
 8015cb0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 8015cb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	f000 80b7 	beq.w	8015e2c <Zigbee_CallBackProcessing+0x1774>
 8015cbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	f000 80b1 	beq.w	8015e2c <Zigbee_CallBackProcessing+0x1774>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 8015cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015cce:	f103 0108 	add.w	r1, r3, #8
 8015cd2:	463b      	mov	r3, r7
 8015cd4:	2208      	movs	r2, #8
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	f7fd fc14 	bl	8013504 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 8015cdc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 8015ce6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015cea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015cee:	691b      	ldr	r3, [r3, #16]
 8015cf0:	b29a      	uxth	r2, r3
 8015cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015cf6:	695b      	ldr	r3, [r3, #20]
 8015cf8:	b2dd      	uxtb	r5, r3
 8015cfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015cfe:	685b      	ldr	r3, [r3, #4]
 8015d00:	9300      	str	r3, [sp, #0]
 8015d02:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 8015d06:	462b      	mov	r3, r5
 8015d08:	47a0      	blx	r4
            }
            break;
 8015d0a:	e08f      	b.n	8015e2c <Zigbee_CallBackProcessing+0x1774>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 8015d0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d10:	685b      	ldr	r3, [r3, #4]
 8015d12:	2b03      	cmp	r3, #3
 8015d14:	d006      	beq.n	8015d24 <Zigbee_CallBackProcessing+0x166c>
 8015d16:	4b0b      	ldr	r3, [pc, #44]	@ (8015d44 <Zigbee_CallBackProcessing+0x168c>)
 8015d18:	4a07      	ldr	r2, [pc, #28]	@ (8015d38 <Zigbee_CallBackProcessing+0x1680>)
 8015d1a:	f241 01aa 	movw	r1, #4266	@ 0x10aa
 8015d1e:	4807      	ldr	r0, [pc, #28]	@ (8015d3c <Zigbee_CallBackProcessing+0x1684>)
 8015d20:	f000 ff02 	bl	8016b28 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 8015d24:	4b08      	ldr	r3, [pc, #32]	@ (8015d48 <Zigbee_CallBackProcessing+0x1690>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d10f      	bne.n	8015d4c <Zigbee_CallBackProcessing+0x1694>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 8015d2c:	2381      	movs	r3, #129	@ 0x81
 8015d2e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                break;
 8015d32:	e07c      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
 8015d34:	08018534 	.word	0x08018534
 8015d38:	08018de8 	.word	0x08018de8
 8015d3c:	0801845c 	.word	0x0801845c
 8015d40:	08018550 	.word	0x08018550
 8015d44:	08018518 	.word	0x08018518
 8015d48:	20001a14 	.word	0x20001a14
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 8015d4c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d50:	689b      	ldr	r3, [r3, #8]
 8015d52:	64bb      	str	r3, [r7, #72]	@ 0x48
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 8015d54:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d58:	68db      	ldr	r3, [r3, #12]
 8015d5a:	647b      	str	r3, [r7, #68]	@ 0x44
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8015d5c:	4b3f      	ldr	r3, [pc, #252]	@ (8015e5c <Zigbee_CallBackProcessing+0x17a4>)
 8015d5e:	681c      	ldr	r4, [r3, #0]
 8015d60:	4b3f      	ldr	r3, [pc, #252]	@ (8015e60 <Zigbee_CallBackProcessing+0x17a8>)
 8015d62:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 8015d64:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015d68:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 8015d6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015d6c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8015d6e:	47a0      	blx	r4
 8015d70:	4603      	mov	r3, r0
 8015d72:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 8015d76:	e05a      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
        }

        default:
            status = HAL_ERROR;
 8015d78:	2301      	movs	r3, #1
 8015d7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8015d7e:	e056      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d80:	bf00      	nop
 8015d82:	e054      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d84:	bf00      	nop
 8015d86:	e052      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d88:	bf00      	nop
 8015d8a:	e050      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d8c:	bf00      	nop
 8015d8e:	e04e      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d90:	bf00      	nop
 8015d92:	e04c      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d94:	bf00      	nop
 8015d96:	e04a      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d98:	bf00      	nop
 8015d9a:	e048      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015d9c:	bf00      	nop
 8015d9e:	e046      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015da0:	bf00      	nop
 8015da2:	e044      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015da4:	bf00      	nop
 8015da6:	e042      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015da8:	bf00      	nop
 8015daa:	e040      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dac:	bf00      	nop
 8015dae:	e03e      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015db0:	bf00      	nop
 8015db2:	e03c      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015db4:	bf00      	nop
 8015db6:	e03a      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015db8:	bf00      	nop
 8015dba:	e038      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dbc:	bf00      	nop
 8015dbe:	e036      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dc0:	bf00      	nop
 8015dc2:	e034      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dc4:	bf00      	nop
 8015dc6:	e032      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dc8:	bf00      	nop
 8015dca:	e030      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dcc:	bf00      	nop
 8015dce:	e02e      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dd0:	bf00      	nop
 8015dd2:	e02c      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dd4:	bf00      	nop
 8015dd6:	e02a      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dd8:	bf00      	nop
 8015dda:	e028      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015ddc:	bf00      	nop
 8015dde:	e026      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015de0:	bf00      	nop
 8015de2:	e024      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015de4:	bf00      	nop
 8015de6:	e022      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015de8:	bf00      	nop
 8015dea:	e020      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dec:	bf00      	nop
 8015dee:	e01e      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015df0:	bf00      	nop
 8015df2:	e01c      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015df4:	bf00      	nop
 8015df6:	e01a      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015df8:	bf00      	nop
 8015dfa:	e018      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015dfc:	bf00      	nop
 8015dfe:	e016      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e00:	bf00      	nop
 8015e02:	e014      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e04:	bf00      	nop
 8015e06:	e012      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e08:	bf00      	nop
 8015e0a:	e010      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e0c:	bf00      	nop
 8015e0e:	e00e      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e10:	bf00      	nop
 8015e12:	e00c      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e14:	bf00      	nop
 8015e16:	e00a      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e18:	bf00      	nop
 8015e1a:	e008      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e1c:	bf00      	nop
 8015e1e:	e006      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e20:	bf00      	nop
 8015e22:	e004      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e24:	bf00      	nop
 8015e26:	e002      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e28:	bf00      	nop
 8015e2a:	e000      	b.n	8015e2e <Zigbee_CallBackProcessing+0x1776>
            break;
 8015e2c:	bf00      	nop
    }

    if (info != NULL) {
 8015e2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8015e32:	2b00      	cmp	r3, #0
 8015e34:	d003      	beq.n	8015e3e <Zigbee_CallBackProcessing+0x1786>
        zb_ipc_m4_cb_info_free(info);
 8015e36:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8015e3a:	f7fd fb9f 	bl	801357c <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 8015e3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8015e42:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8015e46:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 8015e48:	f7fc fc9e 	bl	8012788 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 8015e4c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8015e56:	46bd      	mov	sp, r7
 8015e58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015e5a:	bf00      	nop
 8015e5c:	20001a14 	.word	0x20001a14
 8015e60:	20001a28 	.word	0x20001a28

08015e64 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 8015e64:	b590      	push	{r4, r7, lr}
 8015e66:	b089      	sub	sp, #36	@ 0x24
 8015e68:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 8015e6e:	f7f3 fb09 	bl	8009484 <ZIGBEE_Get_M0RequestPayloadBuffer>
 8015e72:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	681b      	ldr	r3, [r3, #0]
 8015e78:	2b09      	cmp	r3, #9
 8015e7a:	d046      	beq.n	8015f0a <Zigbee_M0RequestProcessing+0xa6>
 8015e7c:	2b09      	cmp	r3, #9
 8015e7e:	d864      	bhi.n	8015f4a <Zigbee_M0RequestProcessing+0xe6>
 8015e80:	2b07      	cmp	r3, #7
 8015e82:	d002      	beq.n	8015e8a <Zigbee_M0RequestProcessing+0x26>
 8015e84:	2b08      	cmp	r3, #8
 8015e86:	d01e      	beq.n	8015ec6 <Zigbee_M0RequestProcessing+0x62>
 8015e88:	e05f      	b.n	8015f4a <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	685b      	ldr	r3, [r3, #4]
 8015e8e:	2b01      	cmp	r3, #1
 8015e90:	d006      	beq.n	8015ea0 <Zigbee_M0RequestProcessing+0x3c>
 8015e92:	4b33      	ldr	r3, [pc, #204]	@ (8015f60 <Zigbee_M0RequestProcessing+0xfc>)
 8015e94:	4a33      	ldr	r2, [pc, #204]	@ (8015f64 <Zigbee_M0RequestProcessing+0x100>)
 8015e96:	f241 01d1 	movw	r1, #4305	@ 0x10d1
 8015e9a:	4833      	ldr	r0, [pc, #204]	@ (8015f68 <Zigbee_M0RequestProcessing+0x104>)
 8015e9c:	f000 fe44 	bl	8016b28 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 8015ea0:	68fb      	ldr	r3, [r7, #12]
 8015ea2:	689b      	ldr	r3, [r3, #8]
 8015ea4:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 8015ea6:	4b31      	ldr	r3, [pc, #196]	@ (8015f6c <Zigbee_M0RequestProcessing+0x108>)
 8015ea8:	685b      	ldr	r3, [r3, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d050      	beq.n	8015f50 <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 8015eae:	4b2f      	ldr	r3, [pc, #188]	@ (8015f6c <Zigbee_M0RequestProcessing+0x108>)
 8015eb0:	685c      	ldr	r4, [r3, #4]
 8015eb2:	4b2e      	ldr	r3, [pc, #184]	@ (8015f6c <Zigbee_M0RequestProcessing+0x108>)
 8015eb4:	6818      	ldr	r0, [r3, #0]
 8015eb6:	4b2e      	ldr	r3, [pc, #184]	@ (8015f70 <Zigbee_M0RequestProcessing+0x10c>)
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	9300      	str	r3, [sp, #0]
 8015ebc:	683b      	ldr	r3, [r7, #0]
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	2100      	movs	r1, #0
 8015ec2:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 8015ec4:	e044      	b.n	8015f50 <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 8015ec6:	68fb      	ldr	r3, [r7, #12]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	2b01      	cmp	r3, #1
 8015ecc:	d006      	beq.n	8015edc <Zigbee_M0RequestProcessing+0x78>
 8015ece:	4b24      	ldr	r3, [pc, #144]	@ (8015f60 <Zigbee_M0RequestProcessing+0xfc>)
 8015ed0:	4a24      	ldr	r2, [pc, #144]	@ (8015f64 <Zigbee_M0RequestProcessing+0x100>)
 8015ed2:	f241 01e1 	movw	r1, #4321	@ 0x10e1
 8015ed6:	4824      	ldr	r0, [pc, #144]	@ (8015f68 <Zigbee_M0RequestProcessing+0x104>)
 8015ed8:	f000 fe26 	bl	8016b28 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	689b      	ldr	r3, [r3, #8]
 8015ee0:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	3304      	adds	r3, #4
 8015ee6:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 8015ee8:	6878      	ldr	r0, [r7, #4]
 8015eea:	f000 fe3b 	bl	8016b64 <malloc>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 8015ef2:	693b      	ldr	r3, [r7, #16]
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d004      	beq.n	8015f02 <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 8015ef8:	6879      	ldr	r1, [r7, #4]
 8015efa:	6938      	ldr	r0, [r7, #16]
 8015efc:	f000 f83c 	bl	8015f78 <zb_malloc_track>
 8015f00:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 8015f02:	693a      	ldr	r2, [r7, #16]
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	60da      	str	r2, [r3, #12]
            break;
 8015f08:	e023      	b.n	8015f52 <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 8015f0a:	68fb      	ldr	r3, [r7, #12]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	2b01      	cmp	r3, #1
 8015f10:	d006      	beq.n	8015f20 <Zigbee_M0RequestProcessing+0xbc>
 8015f12:	4b13      	ldr	r3, [pc, #76]	@ (8015f60 <Zigbee_M0RequestProcessing+0xfc>)
 8015f14:	4a13      	ldr	r2, [pc, #76]	@ (8015f64 <Zigbee_M0RequestProcessing+0x100>)
 8015f16:	f241 01f5 	movw	r1, #4341	@ 0x10f5
 8015f1a:	4813      	ldr	r0, [pc, #76]	@ (8015f68 <Zigbee_M0RequestProcessing+0x104>)
 8015f1c:	f000 fe04 	bl	8016b28 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	689b      	ldr	r3, [r3, #8]
 8015f24:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 8015f26:	68bb      	ldr	r3, [r7, #8]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d106      	bne.n	8015f3a <Zigbee_M0RequestProcessing+0xd6>
 8015f2c:	4b11      	ldr	r3, [pc, #68]	@ (8015f74 <Zigbee_M0RequestProcessing+0x110>)
 8015f2e:	4a0d      	ldr	r2, [pc, #52]	@ (8015f64 <Zigbee_M0RequestProcessing+0x100>)
 8015f30:	f241 01f7 	movw	r1, #4343	@ 0x10f7
 8015f34:	480c      	ldr	r0, [pc, #48]	@ (8015f68 <Zigbee_M0RequestProcessing+0x104>)
 8015f36:	f000 fdf7 	bl	8016b28 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 8015f3a:	68b8      	ldr	r0, [r7, #8]
 8015f3c:	f000 f838 	bl	8015fb0 <zb_malloc_untrack>
 8015f40:	60b8      	str	r0, [r7, #8]
            free(ptr);
 8015f42:	68b8      	ldr	r0, [r7, #8]
 8015f44:	f000 fe16 	bl	8016b74 <free>
            break;
 8015f48:	e003      	b.n	8015f52 <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 8015f4a:	2301      	movs	r3, #1
 8015f4c:	75fb      	strb	r3, [r7, #23]
            break;
 8015f4e:	e000      	b.n	8015f52 <Zigbee_M0RequestProcessing+0xee>
            break;
 8015f50:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 8015f52:	f7fc fc33 	bl	80127bc <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 8015f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	371c      	adds	r7, #28
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd90      	pop	{r4, r7, pc}
 8015f60:	0801856c 	.word	0x0801856c
 8015f64:	08018e04 	.word	0x08018e04
 8015f68:	0801845c 	.word	0x0801845c
 8015f6c:	20001a28 	.word	0x20001a28
 8015f70:	08018bb8 	.word	0x08018bb8
 8015f74:	08018584 	.word	0x08018584

08015f78 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b085      	sub	sp, #20
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	683a      	ldr	r2, [r7, #0]
 8015f86:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	3304      	adds	r3, #4
 8015f8c:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 8015f8e:	4b07      	ldr	r3, [pc, #28]	@ (8015fac <zb_malloc_track+0x34>)
 8015f90:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	4413      	add	r3, r2
 8015f98:	4a04      	ldr	r2, [pc, #16]	@ (8015fac <zb_malloc_track+0x34>)
 8015f9a:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8015fa0:	4618      	mov	r0, r3
 8015fa2:	3714      	adds	r7, #20
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015faa:	4770      	bx	lr
 8015fac:	20001a28 	.word	0x20001a28

08015fb0 <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 8015fb0:	b480      	push	{r7}
 8015fb2:	b085      	sub	sp, #20
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	3b04      	subs	r3, #4
 8015fbc:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 8015fc4:	4b07      	ldr	r3, [pc, #28]	@ (8015fe4 <zb_malloc_untrack+0x34>)
 8015fc6:	f8d3 200d 	ldr.w	r2, [r3, #13]
 8015fca:	68bb      	ldr	r3, [r7, #8]
 8015fcc:	1ad3      	subs	r3, r2, r3
 8015fce:	4a05      	ldr	r2, [pc, #20]	@ (8015fe4 <zb_malloc_untrack+0x34>)
 8015fd0:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 8015fd4:	68fb      	ldr	r3, [r7, #12]
#endif
}
 8015fd6:	4618      	mov	r0, r3
 8015fd8:	3714      	adds	r7, #20
 8015fda:	46bd      	mov	sp, r7
 8015fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fe0:	4770      	bx	lr
 8015fe2:	bf00      	nop
 8015fe4:	20001a28 	.word	0x20001a28

08015fe8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	681b      	ldr	r3, [r3, #0]
 8015ff4:	4a22      	ldr	r2, [pc, #136]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8015ff6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	4a20      	ldr	r2, [pc, #128]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8015ffe:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	689b      	ldr	r3, [r3, #8]
 8016004:	4a1e      	ldr	r2, [pc, #120]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8016006:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	68db      	ldr	r3, [r3, #12]
 801600c:	4a1c      	ldr	r2, [pc, #112]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 801600e:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	691b      	ldr	r3, [r3, #16]
 8016014:	4a1a      	ldr	r2, [pc, #104]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8016016:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	695b      	ldr	r3, [r3, #20]
 801601c:	4a18      	ldr	r2, [pc, #96]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 801601e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	699b      	ldr	r3, [r3, #24]
 8016024:	4a16      	ldr	r2, [pc, #88]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8016026:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	69db      	ldr	r3, [r3, #28]
 801602c:	4a14      	ldr	r2, [pc, #80]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 801602e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	6a1b      	ldr	r3, [r3, #32]
 8016034:	4a12      	ldr	r2, [pc, #72]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8016036:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801603c:	4a10      	ldr	r2, [pc, #64]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 801603e:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016044:	4a0e      	ldr	r2, [pc, #56]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8016046:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8016048:	4b0e      	ldr	r3, [pc, #56]	@ (8016084 <UTIL_LCD_SetFuncDriver+0x9c>)
 801604a:	2200      	movs	r2, #0
 801604c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 801604e:	4b0d      	ldr	r3, [pc, #52]	@ (8016084 <UTIL_LCD_SetFuncDriver+0x9c>)
 8016050:	2200      	movs	r2, #0
 8016052:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8016054:	4b0a      	ldr	r3, [pc, #40]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8016056:	69db      	ldr	r3, [r3, #28]
 8016058:	4a0b      	ldr	r2, [pc, #44]	@ (8016088 <UTIL_LCD_SetFuncDriver+0xa0>)
 801605a:	4611      	mov	r1, r2
 801605c:	2000      	movs	r0, #0
 801605e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8016060:	4b07      	ldr	r3, [pc, #28]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 8016062:	6a1b      	ldr	r3, [r3, #32]
 8016064:	4a09      	ldr	r2, [pc, #36]	@ (801608c <UTIL_LCD_SetFuncDriver+0xa4>)
 8016066:	4611      	mov	r1, r2
 8016068:	2000      	movs	r0, #0
 801606a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 801606c:	4b04      	ldr	r3, [pc, #16]	@ (8016080 <UTIL_LCD_SetFuncDriver+0x98>)
 801606e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016070:	4a07      	ldr	r2, [pc, #28]	@ (8016090 <UTIL_LCD_SetFuncDriver+0xa8>)
 8016072:	4611      	mov	r1, r2
 8016074:	2000      	movs	r0, #0
 8016076:	4798      	blx	r3
}
 8016078:	bf00      	nop
 801607a:	3708      	adds	r7, #8
 801607c:	46bd      	mov	sp, r7
 801607e:	bd80      	pop	{r7, pc}
 8016080:	20001c5c 	.word	0x20001c5c
 8016084:	20001c1c 	.word	0x20001c1c
 8016088:	20001c30 	.word	0x20001c30
 801608c:	20001c34 	.word	0x20001c34
 8016090:	20001c38 	.word	0x20001c38

08016094 <UTIL_LCD_SetDevice>:
/**
  * @brief  Set the LCD instance to be used.
  * @param  Device  LCD instance
  */
void UTIL_LCD_SetDevice(uint32_t Device)
{
 8016094:	b580      	push	{r7, lr}
 8016096:	b082      	sub	sp, #8
 8016098:	af00      	add	r7, sp, #0
 801609a:	6078      	str	r0, [r7, #4]
  DrawProp->LcdDevice = Device;
 801609c:	4a09      	ldr	r2, [pc, #36]	@ (80160c4 <UTIL_LCD_SetDevice+0x30>)
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	6113      	str	r3, [r2, #16]
  FuncDriver.GetXSize(Device, &DrawProp->LcdXsize);
 80160a2:	4b09      	ldr	r3, [pc, #36]	@ (80160c8 <UTIL_LCD_SetDevice+0x34>)
 80160a4:	69db      	ldr	r3, [r3, #28]
 80160a6:	4a09      	ldr	r2, [pc, #36]	@ (80160cc <UTIL_LCD_SetDevice+0x38>)
 80160a8:	4611      	mov	r1, r2
 80160aa:	6878      	ldr	r0, [r7, #4]
 80160ac:	4798      	blx	r3
  FuncDriver.GetYSize(Device, &DrawProp->LcdYsize);
 80160ae:	4b06      	ldr	r3, [pc, #24]	@ (80160c8 <UTIL_LCD_SetDevice+0x34>)
 80160b0:	6a1b      	ldr	r3, [r3, #32]
 80160b2:	4a07      	ldr	r2, [pc, #28]	@ (80160d0 <UTIL_LCD_SetDevice+0x3c>)
 80160b4:	4611      	mov	r1, r2
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	4798      	blx	r3
}
 80160ba:	bf00      	nop
 80160bc:	3708      	adds	r7, #8
 80160be:	46bd      	mov	sp, r7
 80160c0:	bd80      	pop	{r7, pc}
 80160c2:	bf00      	nop
 80160c4:	20001c1c 	.word	0x20001c1c
 80160c8:	20001c5c 	.word	0x20001c5c
 80160cc:	20001c30 	.word	0x20001c30
 80160d0:	20001c34 	.word	0x20001c34

080160d4 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 80160d4:	b480      	push	{r7}
 80160d6:	b083      	sub	sp, #12
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 80160dc:	4b06      	ldr	r3, [pc, #24]	@ (80160f8 <UTIL_LCD_SetTextColor+0x24>)
 80160de:	68db      	ldr	r3, [r3, #12]
 80160e0:	4a05      	ldr	r2, [pc, #20]	@ (80160f8 <UTIL_LCD_SetTextColor+0x24>)
 80160e2:	015b      	lsls	r3, r3, #5
 80160e4:	4413      	add	r3, r2
 80160e6:	687a      	ldr	r2, [r7, #4]
 80160e8:	601a      	str	r2, [r3, #0]
}
 80160ea:	bf00      	nop
 80160ec:	370c      	adds	r7, #12
 80160ee:	46bd      	mov	sp, r7
 80160f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f4:	4770      	bx	lr
 80160f6:	bf00      	nop
 80160f8:	20001c1c 	.word	0x20001c1c

080160fc <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 80160fc:	b480      	push	{r7}
 80160fe:	b083      	sub	sp, #12
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8016104:	4b06      	ldr	r3, [pc, #24]	@ (8016120 <UTIL_LCD_SetBackColor+0x24>)
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	4a05      	ldr	r2, [pc, #20]	@ (8016120 <UTIL_LCD_SetBackColor+0x24>)
 801610a:	015b      	lsls	r3, r3, #5
 801610c:	4413      	add	r3, r2
 801610e:	3304      	adds	r3, #4
 8016110:	687a      	ldr	r2, [r7, #4]
 8016112:	601a      	str	r2, [r3, #0]
}
 8016114:	bf00      	nop
 8016116:	370c      	adds	r7, #12
 8016118:	46bd      	mov	sp, r7
 801611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611e:	4770      	bx	lr
 8016120:	20001c1c 	.word	0x20001c1c

08016124 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8016124:	b480      	push	{r7}
 8016126:	b083      	sub	sp, #12
 8016128:	af00      	add	r7, sp, #0
 801612a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 801612c:	4b06      	ldr	r3, [pc, #24]	@ (8016148 <UTIL_LCD_SetFont+0x24>)
 801612e:	68db      	ldr	r3, [r3, #12]
 8016130:	4a05      	ldr	r2, [pc, #20]	@ (8016148 <UTIL_LCD_SetFont+0x24>)
 8016132:	015b      	lsls	r3, r3, #5
 8016134:	4413      	add	r3, r2
 8016136:	3308      	adds	r3, #8
 8016138:	687a      	ldr	r2, [r7, #4]
 801613a:	601a      	str	r2, [r3, #0]
}
 801613c:	bf00      	nop
 801613e:	370c      	adds	r7, #12
 8016140:	46bd      	mov	sp, r7
 8016142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016146:	4770      	bx	lr
 8016148:	20001c1c 	.word	0x20001c1c

0801614c <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 801614c:	b480      	push	{r7}
 801614e:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 8016150:	4b05      	ldr	r3, [pc, #20]	@ (8016168 <UTIL_LCD_GetFont+0x1c>)
 8016152:	68db      	ldr	r3, [r3, #12]
 8016154:	4a04      	ldr	r2, [pc, #16]	@ (8016168 <UTIL_LCD_GetFont+0x1c>)
 8016156:	015b      	lsls	r3, r3, #5
 8016158:	4413      	add	r3, r2
 801615a:	3308      	adds	r3, #8
 801615c:	681b      	ldr	r3, [r3, #0]
}
 801615e:	4618      	mov	r0, r3
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr
 8016168:	20001c1c 	.word	0x20001c1c

0801616c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 801616c:	b590      	push	{r4, r7, lr}
 801616e:	b087      	sub	sp, #28
 8016170:	af02      	add	r7, sp, #8
 8016172:	60f8      	str	r0, [r7, #12]
 8016174:	60b9      	str	r1, [r7, #8]
 8016176:	607a      	str	r2, [r7, #4]
 8016178:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 801617a:	4b08      	ldr	r3, [pc, #32]	@ (801619c <UTIL_LCD_FillRGBRect+0x30>)
 801617c:	685c      	ldr	r4, [r3, #4]
 801617e:	4b08      	ldr	r3, [pc, #32]	@ (80161a0 <UTIL_LCD_FillRGBRect+0x34>)
 8016180:	6918      	ldr	r0, [r3, #16]
 8016182:	6a3b      	ldr	r3, [r7, #32]
 8016184:	9301      	str	r3, [sp, #4]
 8016186:	683b      	ldr	r3, [r7, #0]
 8016188:	9300      	str	r3, [sp, #0]
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	68ba      	ldr	r2, [r7, #8]
 801618e:	68f9      	ldr	r1, [r7, #12]
 8016190:	47a0      	blx	r4
}
 8016192:	bf00      	nop
 8016194:	3714      	adds	r7, #20
 8016196:	46bd      	mov	sp, r7
 8016198:	bd90      	pop	{r4, r7, pc}
 801619a:	bf00      	nop
 801619c:	20001c5c 	.word	0x20001c5c
 80161a0:	20001c1c 	.word	0x20001c1c

080161a4 <UTIL_LCD_ClearStringLine>:
/**
  * @brief  Clears the selected line in currently active layer.
  * @param  Line  Line to be cleared
  */
void UTIL_LCD_ClearStringLine(uint32_t Line)
{
 80161a4:	b590      	push	{r4, r7, lr}
 80161a6:	b085      	sub	sp, #20
 80161a8:	af02      	add	r7, sp, #8
 80161aa:	6078      	str	r0, [r7, #4]
  /* Draw rectangle with background color */
  UTIL_LCD_FillRect(0, (Line * DrawProp[DrawProp->LcdLayer].pFont->Height), DrawProp->LcdXsize, DrawProp[DrawProp->LcdLayer].pFont->Height, DrawProp[DrawProp->LcdLayer].BackColor);
 80161ac:	4b13      	ldr	r3, [pc, #76]	@ (80161fc <UTIL_LCD_ClearStringLine+0x58>)
 80161ae:	68db      	ldr	r3, [r3, #12]
 80161b0:	4a12      	ldr	r2, [pc, #72]	@ (80161fc <UTIL_LCD_ClearStringLine+0x58>)
 80161b2:	015b      	lsls	r3, r3, #5
 80161b4:	4413      	add	r3, r2
 80161b6:	3308      	adds	r3, #8
 80161b8:	681b      	ldr	r3, [r3, #0]
 80161ba:	88db      	ldrh	r3, [r3, #6]
 80161bc:	461a      	mov	r2, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	fb03 f102 	mul.w	r1, r3, r2
 80161c4:	4b0d      	ldr	r3, [pc, #52]	@ (80161fc <UTIL_LCD_ClearStringLine+0x58>)
 80161c6:	695a      	ldr	r2, [r3, #20]
 80161c8:	4b0c      	ldr	r3, [pc, #48]	@ (80161fc <UTIL_LCD_ClearStringLine+0x58>)
 80161ca:	68db      	ldr	r3, [r3, #12]
 80161cc:	480b      	ldr	r0, [pc, #44]	@ (80161fc <UTIL_LCD_ClearStringLine+0x58>)
 80161ce:	015b      	lsls	r3, r3, #5
 80161d0:	4403      	add	r3, r0
 80161d2:	3308      	adds	r3, #8
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	88db      	ldrh	r3, [r3, #6]
 80161d8:	461c      	mov	r4, r3
 80161da:	4b08      	ldr	r3, [pc, #32]	@ (80161fc <UTIL_LCD_ClearStringLine+0x58>)
 80161dc:	68db      	ldr	r3, [r3, #12]
 80161de:	4807      	ldr	r0, [pc, #28]	@ (80161fc <UTIL_LCD_ClearStringLine+0x58>)
 80161e0:	015b      	lsls	r3, r3, #5
 80161e2:	4403      	add	r3, r0
 80161e4:	3304      	adds	r3, #4
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	9300      	str	r3, [sp, #0]
 80161ea:	4623      	mov	r3, r4
 80161ec:	2000      	movs	r0, #0
 80161ee:	f000 f8eb 	bl	80163c8 <UTIL_LCD_FillRect>
}
 80161f2:	bf00      	nop
 80161f4:	370c      	adds	r7, #12
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd90      	pop	{r4, r7, pc}
 80161fa:	bf00      	nop
 80161fc:	20001c1c 	.word	0x20001c1c

08016200 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	60f8      	str	r0, [r7, #12]
 8016208:	60b9      	str	r1, [r7, #8]
 801620a:	4613      	mov	r3, r2
 801620c:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801620e:	4b16      	ldr	r3, [pc, #88]	@ (8016268 <UTIL_LCD_DisplayChar+0x68>)
 8016210:	68db      	ldr	r3, [r3, #12]
 8016212:	4a15      	ldr	r2, [pc, #84]	@ (8016268 <UTIL_LCD_DisplayChar+0x68>)
 8016214:	015b      	lsls	r3, r3, #5
 8016216:	4413      	add	r3, r2
 8016218:	3308      	adds	r3, #8
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	681a      	ldr	r2, [r3, #0]
 801621e:	79fb      	ldrb	r3, [r7, #7]
 8016220:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8016222:	4911      	ldr	r1, [pc, #68]	@ (8016268 <UTIL_LCD_DisplayChar+0x68>)
 8016224:	68c9      	ldr	r1, [r1, #12]
 8016226:	4810      	ldr	r0, [pc, #64]	@ (8016268 <UTIL_LCD_DisplayChar+0x68>)
 8016228:	0149      	lsls	r1, r1, #5
 801622a:	4401      	add	r1, r0
 801622c:	3108      	adds	r1, #8
 801622e:	6809      	ldr	r1, [r1, #0]
 8016230:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8016232:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 8016236:	4b0c      	ldr	r3, [pc, #48]	@ (8016268 <UTIL_LCD_DisplayChar+0x68>)
 8016238:	68db      	ldr	r3, [r3, #12]
 801623a:	480b      	ldr	r0, [pc, #44]	@ (8016268 <UTIL_LCD_DisplayChar+0x68>)
 801623c:	015b      	lsls	r3, r3, #5
 801623e:	4403      	add	r3, r0
 8016240:	3308      	adds	r3, #8
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	889b      	ldrh	r3, [r3, #4]
 8016246:	3307      	adds	r3, #7
 8016248:	2b00      	cmp	r3, #0
 801624a:	da00      	bge.n	801624e <UTIL_LCD_DisplayChar+0x4e>
 801624c:	3307      	adds	r3, #7
 801624e:	10db      	asrs	r3, r3, #3
 8016250:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8016254:	4413      	add	r3, r2
 8016256:	461a      	mov	r2, r3
 8016258:	68b9      	ldr	r1, [r7, #8]
 801625a:	68f8      	ldr	r0, [r7, #12]
 801625c:	f000 f8ee 	bl	801643c <DrawChar>
}
 8016260:	bf00      	nop
 8016262:	3710      	adds	r7, #16
 8016264:	46bd      	mov	sp, r7
 8016266:	bd80      	pop	{r7, pc}
 8016268:	20001c1c 	.word	0x20001c1c

0801626c <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b08a      	sub	sp, #40	@ 0x28
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	60b9      	str	r1, [r7, #8]
 8016276:	607a      	str	r2, [r7, #4]
 8016278:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 801627a:	2301      	movs	r3, #1
 801627c:	627b      	str	r3, [r7, #36]	@ 0x24
 801627e:	2300      	movs	r3, #0
 8016280:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8016282:	2300      	movs	r3, #0
 8016284:	61fb      	str	r3, [r7, #28]
 8016286:	2300      	movs	r3, #0
 8016288:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 801628e:	e002      	b.n	8016296 <UTIL_LCD_DisplayStringAt+0x2a>
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	3301      	adds	r3, #1
 8016294:	61fb      	str	r3, [r7, #28]
 8016296:	69bb      	ldr	r3, [r7, #24]
 8016298:	1c5a      	adds	r2, r3, #1
 801629a:	61ba      	str	r2, [r7, #24]
 801629c:	781b      	ldrb	r3, [r3, #0]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d1f6      	bne.n	8016290 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80162a2:	4b48      	ldr	r3, [pc, #288]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 80162a4:	695b      	ldr	r3, [r3, #20]
 80162a6:	4a47      	ldr	r2, [pc, #284]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 80162a8:	68d2      	ldr	r2, [r2, #12]
 80162aa:	4946      	ldr	r1, [pc, #280]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 80162ac:	0152      	lsls	r2, r2, #5
 80162ae:	440a      	add	r2, r1
 80162b0:	3208      	adds	r2, #8
 80162b2:	6812      	ldr	r2, [r2, #0]
 80162b4:	8892      	ldrh	r2, [r2, #4]
 80162b6:	fbb3 f3f2 	udiv	r3, r3, r2
 80162ba:	617b      	str	r3, [r7, #20]

  switch (Mode)
 80162bc:	78fb      	ldrb	r3, [r7, #3]
 80162be:	2b03      	cmp	r3, #3
 80162c0:	d018      	beq.n	80162f4 <UTIL_LCD_DisplayStringAt+0x88>
 80162c2:	2b03      	cmp	r3, #3
 80162c4:	dc2a      	bgt.n	801631c <UTIL_LCD_DisplayStringAt+0xb0>
 80162c6:	2b01      	cmp	r3, #1
 80162c8:	d002      	beq.n	80162d0 <UTIL_LCD_DisplayStringAt+0x64>
 80162ca:	2b02      	cmp	r3, #2
 80162cc:	d015      	beq.n	80162fa <UTIL_LCD_DisplayStringAt+0x8e>
 80162ce:	e025      	b.n	801631c <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 80162d0:	697a      	ldr	r2, [r7, #20]
 80162d2:	69fb      	ldr	r3, [r7, #28]
 80162d4:	1ad3      	subs	r3, r2, r3
 80162d6:	4a3b      	ldr	r2, [pc, #236]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 80162d8:	68d2      	ldr	r2, [r2, #12]
 80162da:	493a      	ldr	r1, [pc, #232]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 80162dc:	0152      	lsls	r2, r2, #5
 80162de:	440a      	add	r2, r1
 80162e0:	3208      	adds	r2, #8
 80162e2:	6812      	ldr	r2, [r2, #0]
 80162e4:	8892      	ldrh	r2, [r2, #4]
 80162e6:	fb02 f303 	mul.w	r3, r2, r3
 80162ea:	085b      	lsrs	r3, r3, #1
 80162ec:	68fa      	ldr	r2, [r7, #12]
 80162ee:	4413      	add	r3, r2
 80162f0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80162f2:	e016      	b.n	8016322 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80162f8:	e013      	b.n	8016322 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 80162fa:	697a      	ldr	r2, [r7, #20]
 80162fc:	69fb      	ldr	r3, [r7, #28]
 80162fe:	1ad3      	subs	r3, r2, r3
 8016300:	4a30      	ldr	r2, [pc, #192]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 8016302:	68d2      	ldr	r2, [r2, #12]
 8016304:	492f      	ldr	r1, [pc, #188]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 8016306:	0152      	lsls	r2, r2, #5
 8016308:	440a      	add	r2, r1
 801630a:	3208      	adds	r2, #8
 801630c:	6812      	ldr	r2, [r2, #0]
 801630e:	8892      	ldrh	r2, [r2, #4]
 8016310:	fb03 f202 	mul.w	r2, r3, r2
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	1ad3      	subs	r3, r2, r3
 8016318:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801631a:	e002      	b.n	8016322 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8016320:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8016322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016324:	2b00      	cmp	r3, #0
 8016326:	d003      	beq.n	8016330 <UTIL_LCD_DisplayStringAt+0xc4>
 8016328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801632a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801632e:	d31b      	bcc.n	8016368 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8016330:	2301      	movs	r3, #1
 8016332:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8016334:	e018      	b.n	8016368 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	781b      	ldrb	r3, [r3, #0]
 801633a:	461a      	mov	r2, r3
 801633c:	68b9      	ldr	r1, [r7, #8]
 801633e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016340:	f7ff ff5e 	bl	8016200 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 8016344:	4b1f      	ldr	r3, [pc, #124]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	4a1e      	ldr	r2, [pc, #120]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 801634a:	015b      	lsls	r3, r3, #5
 801634c:	4413      	add	r3, r2
 801634e:	3308      	adds	r3, #8
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	889b      	ldrh	r3, [r3, #4]
 8016354:	461a      	mov	r2, r3
 8016356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016358:	4413      	add	r3, r2
 801635a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	3301      	adds	r3, #1
 8016360:	607b      	str	r3, [r7, #4]
    i++;
 8016362:	6a3b      	ldr	r3, [r7, #32]
 8016364:	3301      	adds	r3, #1
 8016366:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	781b      	ldrb	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	bf14      	ite	ne
 8016370:	2301      	movne	r3, #1
 8016372:	2300      	moveq	r3, #0
 8016374:	b2da      	uxtb	r2, r3
 8016376:	4b13      	ldr	r3, [pc, #76]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 8016378:	6959      	ldr	r1, [r3, #20]
 801637a:	4b12      	ldr	r3, [pc, #72]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 801637c:	68db      	ldr	r3, [r3, #12]
 801637e:	4811      	ldr	r0, [pc, #68]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 8016380:	015b      	lsls	r3, r3, #5
 8016382:	4403      	add	r3, r0
 8016384:	3308      	adds	r3, #8
 8016386:	681b      	ldr	r3, [r3, #0]
 8016388:	889b      	ldrh	r3, [r3, #4]
 801638a:	4618      	mov	r0, r3
 801638c:	6a3b      	ldr	r3, [r7, #32]
 801638e:	fb00 f303 	mul.w	r3, r0, r3
 8016392:	1acb      	subs	r3, r1, r3
 8016394:	b29b      	uxth	r3, r3
 8016396:	490b      	ldr	r1, [pc, #44]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 8016398:	68c9      	ldr	r1, [r1, #12]
 801639a:	480a      	ldr	r0, [pc, #40]	@ (80163c4 <UTIL_LCD_DisplayStringAt+0x158>)
 801639c:	0149      	lsls	r1, r1, #5
 801639e:	4401      	add	r1, r0
 80163a0:	3108      	adds	r1, #8
 80163a2:	6809      	ldr	r1, [r1, #0]
 80163a4:	8889      	ldrh	r1, [r1, #4]
 80163a6:	428b      	cmp	r3, r1
 80163a8:	bf2c      	ite	cs
 80163aa:	2301      	movcs	r3, #1
 80163ac:	2300      	movcc	r3, #0
 80163ae:	b2db      	uxtb	r3, r3
 80163b0:	4013      	ands	r3, r2
 80163b2:	b2db      	uxtb	r3, r3
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d1be      	bne.n	8016336 <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 80163b8:	bf00      	nop
 80163ba:	bf00      	nop
 80163bc:	3728      	adds	r7, #40	@ 0x28
 80163be:	46bd      	mov	sp, r7
 80163c0:	bd80      	pop	{r7, pc}
 80163c2:	bf00      	nop
 80163c4:	20001c1c 	.word	0x20001c1c

080163c8 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80163c8:	b590      	push	{r4, r7, lr}
 80163ca:	b087      	sub	sp, #28
 80163cc:	af02      	add	r7, sp, #8
 80163ce:	60f8      	str	r0, [r7, #12]
 80163d0:	60b9      	str	r1, [r7, #8]
 80163d2:	607a      	str	r2, [r7, #4]
 80163d4:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80163d6:	4b17      	ldr	r3, [pc, #92]	@ (8016434 <UTIL_LCD_FillRect+0x6c>)
 80163d8:	69db      	ldr	r3, [r3, #28]
 80163da:	2b02      	cmp	r3, #2
 80163dc:	d11a      	bne.n	8016414 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80163de:	4b16      	ldr	r3, [pc, #88]	@ (8016438 <UTIL_LCD_FillRect+0x70>)
 80163e0:	691c      	ldr	r4, [r3, #16]
 80163e2:	4b14      	ldr	r3, [pc, #80]	@ (8016434 <UTIL_LCD_FillRect+0x6c>)
 80163e4:	6918      	ldr	r0, [r3, #16]
 80163e6:	6a3b      	ldr	r3, [r7, #32]
 80163e8:	08db      	lsrs	r3, r3, #3
 80163ea:	f003 021f 	and.w	r2, r3, #31
 80163ee:	6a3b      	ldr	r3, [r7, #32]
 80163f0:	0a9b      	lsrs	r3, r3, #10
 80163f2:	015b      	lsls	r3, r3, #5
 80163f4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80163f8:	431a      	orrs	r2, r3
 80163fa:	6a3b      	ldr	r3, [r7, #32]
 80163fc:	0cdb      	lsrs	r3, r3, #19
 80163fe:	02db      	lsls	r3, r3, #11
 8016400:	b29b      	uxth	r3, r3
 8016402:	4313      	orrs	r3, r2
 8016404:	9301      	str	r3, [sp, #4]
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	9300      	str	r3, [sp, #0]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	68ba      	ldr	r2, [r7, #8]
 801640e:	68f9      	ldr	r1, [r7, #12]
 8016410:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 8016412:	e00b      	b.n	801642c <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8016414:	4b08      	ldr	r3, [pc, #32]	@ (8016438 <UTIL_LCD_FillRect+0x70>)
 8016416:	691c      	ldr	r4, [r3, #16]
 8016418:	4b06      	ldr	r3, [pc, #24]	@ (8016434 <UTIL_LCD_FillRect+0x6c>)
 801641a:	6918      	ldr	r0, [r3, #16]
 801641c:	6a3b      	ldr	r3, [r7, #32]
 801641e:	9301      	str	r3, [sp, #4]
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	9300      	str	r3, [sp, #0]
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	68ba      	ldr	r2, [r7, #8]
 8016428:	68f9      	ldr	r1, [r7, #12]
 801642a:	47a0      	blx	r4
}
 801642c:	bf00      	nop
 801642e:	3714      	adds	r7, #20
 8016430:	46bd      	mov	sp, r7
 8016432:	bd90      	pop	{r4, r7, pc}
 8016434:	20001c1c 	.word	0x20001c1c
 8016438:	20001c5c 	.word	0x20001c5c

0801643c <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 801643c:	b580      	push	{r7, lr}
 801643e:	b0b2      	sub	sp, #200	@ 0xc8
 8016440:	af02      	add	r7, sp, #8
 8016442:	60f8      	str	r0, [r7, #12]
 8016444:	60b9      	str	r1, [r7, #8]
 8016446:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8016448:	2300      	movs	r3, #0
 801644a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801644e:	2300      	movs	r3, #0
 8016450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8016454:	4ba5      	ldr	r3, [pc, #660]	@ (80166ec <DrawChar+0x2b0>)
 8016456:	68db      	ldr	r3, [r3, #12]
 8016458:	4aa4      	ldr	r2, [pc, #656]	@ (80166ec <DrawChar+0x2b0>)
 801645a:	015b      	lsls	r3, r3, #5
 801645c:	4413      	add	r3, r2
 801645e:	3308      	adds	r3, #8
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	88db      	ldrh	r3, [r3, #6]
 8016464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8016468:	4ba0      	ldr	r3, [pc, #640]	@ (80166ec <DrawChar+0x2b0>)
 801646a:	68db      	ldr	r3, [r3, #12]
 801646c:	4a9f      	ldr	r2, [pc, #636]	@ (80166ec <DrawChar+0x2b0>)
 801646e:	015b      	lsls	r3, r3, #5
 8016470:	4413      	add	r3, r2
 8016472:	3308      	adds	r3, #8
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	889b      	ldrh	r3, [r3, #4]
 8016478:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 801647c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016480:	3307      	adds	r3, #7
 8016482:	f023 0207 	bic.w	r2, r3, #7
 8016486:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801648a:	1ad3      	subs	r3, r2, r3
 801648c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8016490:	2300      	movs	r3, #0
 8016492:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8016496:	e11c      	b.n	80166d2 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8016498:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801649c:	3307      	adds	r3, #7
 801649e:	08db      	lsrs	r3, r3, #3
 80164a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80164a4:	fb02 f303 	mul.w	r3, r2, r3
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	4413      	add	r3, r2
 80164ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 80164b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80164b4:	3307      	adds	r3, #7
 80164b6:	08db      	lsrs	r3, r3, #3
 80164b8:	2b01      	cmp	r3, #1
 80164ba:	d002      	beq.n	80164c2 <DrawChar+0x86>
 80164bc:	2b02      	cmp	r3, #2
 80164be:	d006      	beq.n	80164ce <DrawChar+0x92>
 80164c0:	e011      	b.n	80164e6 <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80164c2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80164c6:	781b      	ldrb	r3, [r3, #0]
 80164c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80164cc:	e01d      	b.n	801650a <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80164ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80164d2:	781b      	ldrb	r3, [r3, #0]
 80164d4:	021b      	lsls	r3, r3, #8
 80164d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80164da:	3201      	adds	r2, #1
 80164dc:	7812      	ldrb	r2, [r2, #0]
 80164de:	4313      	orrs	r3, r2
 80164e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80164e4:	e011      	b.n	801650a <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80164e6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80164ea:	781b      	ldrb	r3, [r3, #0]
 80164ec:	041a      	lsls	r2, r3, #16
 80164ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80164f2:	3301      	adds	r3, #1
 80164f4:	781b      	ldrb	r3, [r3, #0]
 80164f6:	021b      	lsls	r3, r3, #8
 80164f8:	4313      	orrs	r3, r2
 80164fa:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80164fe:	3202      	adds	r2, #2
 8016500:	7812      	ldrb	r2, [r2, #0]
 8016502:	4313      	orrs	r3, r2
 8016504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 8016508:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 801650a:	4b78      	ldr	r3, [pc, #480]	@ (80166ec <DrawChar+0x2b0>)
 801650c:	68db      	ldr	r3, [r3, #12]
 801650e:	4a77      	ldr	r2, [pc, #476]	@ (80166ec <DrawChar+0x2b0>)
 8016510:	015b      	lsls	r3, r3, #5
 8016512:	4413      	add	r3, r2
 8016514:	331c      	adds	r3, #28
 8016516:	681b      	ldr	r3, [r3, #0]
 8016518:	2b02      	cmp	r3, #2
 801651a:	f040 808c 	bne.w	8016636 <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 801651e:	2300      	movs	r3, #0
 8016520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016524:	e074      	b.n	8016610 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 8016526:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801652a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801652e:	1ad2      	subs	r2, r2, r3
 8016530:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8016534:	4413      	add	r3, r2
 8016536:	3b01      	subs	r3, #1
 8016538:	2201      	movs	r2, #1
 801653a:	fa02 f303 	lsl.w	r3, r2, r3
 801653e:	461a      	mov	r2, r3
 8016540:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8016544:	4013      	ands	r3, r2
 8016546:	2b00      	cmp	r3, #0
 8016548:	d02d      	beq.n	80165a6 <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 801654a:	4b68      	ldr	r3, [pc, #416]	@ (80166ec <DrawChar+0x2b0>)
 801654c:	68db      	ldr	r3, [r3, #12]
 801654e:	4a67      	ldr	r2, [pc, #412]	@ (80166ec <DrawChar+0x2b0>)
 8016550:	015b      	lsls	r3, r3, #5
 8016552:	4413      	add	r3, r2
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	08db      	lsrs	r3, r3, #3
 8016558:	b29b      	uxth	r3, r3
 801655a:	f003 031f 	and.w	r3, r3, #31
 801655e:	b29a      	uxth	r2, r3
 8016560:	4b62      	ldr	r3, [pc, #392]	@ (80166ec <DrawChar+0x2b0>)
 8016562:	68db      	ldr	r3, [r3, #12]
 8016564:	4961      	ldr	r1, [pc, #388]	@ (80166ec <DrawChar+0x2b0>)
 8016566:	015b      	lsls	r3, r3, #5
 8016568:	440b      	add	r3, r1
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	0a9b      	lsrs	r3, r3, #10
 801656e:	b29b      	uxth	r3, r3
 8016570:	015b      	lsls	r3, r3, #5
 8016572:	b29b      	uxth	r3, r3
 8016574:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016578:	b29b      	uxth	r3, r3
 801657a:	4313      	orrs	r3, r2
 801657c:	b29a      	uxth	r2, r3
 801657e:	4b5b      	ldr	r3, [pc, #364]	@ (80166ec <DrawChar+0x2b0>)
 8016580:	68db      	ldr	r3, [r3, #12]
 8016582:	495a      	ldr	r1, [pc, #360]	@ (80166ec <DrawChar+0x2b0>)
 8016584:	015b      	lsls	r3, r3, #5
 8016586:	440b      	add	r3, r1
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	0cdb      	lsrs	r3, r3, #19
 801658c:	b29b      	uxth	r3, r3
 801658e:	02db      	lsls	r3, r3, #11
 8016590:	b29b      	uxth	r3, r3
 8016592:	4313      	orrs	r3, r2
 8016594:	b29a      	uxth	r2, r3
 8016596:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801659a:	005b      	lsls	r3, r3, #1
 801659c:	33c0      	adds	r3, #192	@ 0xc0
 801659e:	443b      	add	r3, r7
 80165a0:	f823 2c4c 	strh.w	r2, [r3, #-76]
 80165a4:	e02f      	b.n	8016606 <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 80165a6:	4b51      	ldr	r3, [pc, #324]	@ (80166ec <DrawChar+0x2b0>)
 80165a8:	68db      	ldr	r3, [r3, #12]
 80165aa:	4a50      	ldr	r2, [pc, #320]	@ (80166ec <DrawChar+0x2b0>)
 80165ac:	015b      	lsls	r3, r3, #5
 80165ae:	4413      	add	r3, r2
 80165b0:	3304      	adds	r3, #4
 80165b2:	681b      	ldr	r3, [r3, #0]
 80165b4:	08db      	lsrs	r3, r3, #3
 80165b6:	b29b      	uxth	r3, r3
 80165b8:	f003 031f 	and.w	r3, r3, #31
 80165bc:	b29a      	uxth	r2, r3
 80165be:	4b4b      	ldr	r3, [pc, #300]	@ (80166ec <DrawChar+0x2b0>)
 80165c0:	68db      	ldr	r3, [r3, #12]
 80165c2:	494a      	ldr	r1, [pc, #296]	@ (80166ec <DrawChar+0x2b0>)
 80165c4:	015b      	lsls	r3, r3, #5
 80165c6:	440b      	add	r3, r1
 80165c8:	3304      	adds	r3, #4
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	0a9b      	lsrs	r3, r3, #10
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	015b      	lsls	r3, r3, #5
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80165d8:	b29b      	uxth	r3, r3
 80165da:	4313      	orrs	r3, r2
 80165dc:	b29a      	uxth	r2, r3
 80165de:	4b43      	ldr	r3, [pc, #268]	@ (80166ec <DrawChar+0x2b0>)
 80165e0:	68db      	ldr	r3, [r3, #12]
 80165e2:	4942      	ldr	r1, [pc, #264]	@ (80166ec <DrawChar+0x2b0>)
 80165e4:	015b      	lsls	r3, r3, #5
 80165e6:	440b      	add	r3, r1
 80165e8:	3304      	adds	r3, #4
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	0cdb      	lsrs	r3, r3, #19
 80165ee:	b29b      	uxth	r3, r3
 80165f0:	02db      	lsls	r3, r3, #11
 80165f2:	b29b      	uxth	r3, r3
 80165f4:	4313      	orrs	r3, r2
 80165f6:	b29a      	uxth	r2, r3
 80165f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80165fc:	005b      	lsls	r3, r3, #1
 80165fe:	33c0      	adds	r3, #192	@ 0xc0
 8016600:	443b      	add	r3, r7
 8016602:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 8016606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801660a:	3301      	adds	r3, #1
 801660c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8016610:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8016614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8016618:	429a      	cmp	r2, r3
 801661a:	d384      	bcc.n	8016526 <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 801661c:	68b9      	ldr	r1, [r7, #8]
 801661e:	1c4b      	adds	r3, r1, #1
 8016620:	60bb      	str	r3, [r7, #8]
 8016622:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 8016626:	2301      	movs	r3, #1
 8016628:	9300      	str	r3, [sp, #0]
 801662a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801662e:	68f8      	ldr	r0, [r7, #12]
 8016630:	f7ff fd9c 	bl	801616c <UTIL_LCD_FillRGBRect>
 8016634:	e048      	b.n	80166c8 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 8016636:	2300      	movs	r3, #0
 8016638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801663c:	e032      	b.n	80166a4 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 801663e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8016642:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016646:	1ad2      	subs	r2, r2, r3
 8016648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801664c:	4413      	add	r3, r2
 801664e:	3b01      	subs	r3, #1
 8016650:	2201      	movs	r2, #1
 8016652:	fa02 f303 	lsl.w	r3, r2, r3
 8016656:	461a      	mov	r2, r3
 8016658:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801665c:	4013      	ands	r3, r2
 801665e:	2b00      	cmp	r3, #0
 8016660:	d00d      	beq.n	801667e <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8016662:	4b22      	ldr	r3, [pc, #136]	@ (80166ec <DrawChar+0x2b0>)
 8016664:	68db      	ldr	r3, [r3, #12]
 8016666:	4a21      	ldr	r2, [pc, #132]	@ (80166ec <DrawChar+0x2b0>)
 8016668:	015b      	lsls	r3, r3, #5
 801666a:	4413      	add	r3, r2
 801666c:	681a      	ldr	r2, [r3, #0]
 801666e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016672:	009b      	lsls	r3, r3, #2
 8016674:	33c0      	adds	r3, #192	@ 0xc0
 8016676:	443b      	add	r3, r7
 8016678:	f843 2cac 	str.w	r2, [r3, #-172]
 801667c:	e00d      	b.n	801669a <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 801667e:	4b1b      	ldr	r3, [pc, #108]	@ (80166ec <DrawChar+0x2b0>)
 8016680:	68db      	ldr	r3, [r3, #12]
 8016682:	4a1a      	ldr	r2, [pc, #104]	@ (80166ec <DrawChar+0x2b0>)
 8016684:	015b      	lsls	r3, r3, #5
 8016686:	4413      	add	r3, r2
 8016688:	3304      	adds	r3, #4
 801668a:	681a      	ldr	r2, [r3, #0]
 801668c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8016690:	009b      	lsls	r3, r3, #2
 8016692:	33c0      	adds	r3, #192	@ 0xc0
 8016694:	443b      	add	r3, r7
 8016696:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 801669a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801669e:	3301      	adds	r3, #1
 80166a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80166a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80166a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d3c6      	bcc.n	801663e <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 80166b0:	68b9      	ldr	r1, [r7, #8]
 80166b2:	1c4b      	adds	r3, r1, #1
 80166b4:	60bb      	str	r3, [r7, #8]
 80166b6:	f107 0214 	add.w	r2, r7, #20
 80166ba:	2301      	movs	r3, #1
 80166bc:	9300      	str	r3, [sp, #0]
 80166be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80166c2:	68f8      	ldr	r0, [r7, #12]
 80166c4:	f7ff fd52 	bl	801616c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80166c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80166cc:	3301      	adds	r3, #1
 80166ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80166d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80166d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80166da:	429a      	cmp	r2, r3
 80166dc:	f4ff aedc 	bcc.w	8016498 <DrawChar+0x5c>
    }
  }
}
 80166e0:	bf00      	nop
 80166e2:	bf00      	nop
 80166e4:	37c0      	adds	r7, #192	@ 0xc0
 80166e6:	46bd      	mov	sp, r7
 80166e8:	bd80      	pop	{r7, pc}
 80166ea:	bf00      	nop
 80166ec:	20001c1c 	.word	0x20001c1c

080166f0 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 80166f0:	b480      	push	{r7}
 80166f2:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80166f4:	4b05      	ldr	r3, [pc, #20]	@ (801670c <UTIL_LPM_Init+0x1c>)
 80166f6:	2200      	movs	r2, #0
 80166f8:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80166fa:	4b05      	ldr	r3, [pc, #20]	@ (8016710 <UTIL_LPM_Init+0x20>)
 80166fc:	2200      	movs	r2, #0
 80166fe:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016700:	bf00      	nop
 8016702:	46bd      	mov	sp, r7
 8016704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016708:	4770      	bx	lr
 801670a:	bf00      	nop
 801670c:	20001c88 	.word	0x20001c88
 8016710:	20001c8c 	.word	0x20001c8c

08016714 <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8016714:	b480      	push	{r7}
 8016716:	b087      	sub	sp, #28
 8016718:	af00      	add	r7, sp, #0
 801671a:	6078      	str	r0, [r7, #4]
 801671c:	460b      	mov	r3, r1
 801671e:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016720:	f3ef 8310 	mrs	r3, PRIMASK
 8016724:	613b      	str	r3, [r7, #16]
  return(result);
 8016726:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8016728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801672a:	b672      	cpsid	i
}
 801672c:	bf00      	nop
  
  switch(state)
 801672e:	78fb      	ldrb	r3, [r7, #3]
 8016730:	2b00      	cmp	r3, #0
 8016732:	d008      	beq.n	8016746 <UTIL_LPM_SetOffMode+0x32>
 8016734:	2b01      	cmp	r3, #1
 8016736:	d10e      	bne.n	8016756 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8016738:	4b0d      	ldr	r3, [pc, #52]	@ (8016770 <UTIL_LPM_SetOffMode+0x5c>)
 801673a:	681a      	ldr	r2, [r3, #0]
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	4313      	orrs	r3, r2
 8016740:	4a0b      	ldr	r2, [pc, #44]	@ (8016770 <UTIL_LPM_SetOffMode+0x5c>)
 8016742:	6013      	str	r3, [r2, #0]
      break;
 8016744:	e008      	b.n	8016758 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	43da      	mvns	r2, r3
 801674a:	4b09      	ldr	r3, [pc, #36]	@ (8016770 <UTIL_LPM_SetOffMode+0x5c>)
 801674c:	681b      	ldr	r3, [r3, #0]
 801674e:	4013      	ands	r3, r2
 8016750:	4a07      	ldr	r2, [pc, #28]	@ (8016770 <UTIL_LPM_SetOffMode+0x5c>)
 8016752:	6013      	str	r3, [r2, #0]
      break;
 8016754:	e000      	b.n	8016758 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8016756:	bf00      	nop
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	f383 8810 	msr	PRIMASK, r3
}
 8016762:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016764:	bf00      	nop
 8016766:	371c      	adds	r7, #28
 8016768:	46bd      	mov	sp, r7
 801676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801676e:	4770      	bx	lr
 8016770:	20001c8c 	.word	0x20001c8c

08016774 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 8016774:	b580      	push	{r7, lr}
 8016776:	b090      	sub	sp, #64	@ 0x40
 8016778:	af00      	add	r7, sp, #0
 801677a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801677c:	4b73      	ldr	r3, [pc, #460]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 8016782:	4b72      	ldr	r3, [pc, #456]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 8016784:	681a      	ldr	r2, [r3, #0]
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	4013      	ands	r3, r2
 801678a:	4a70      	ldr	r2, [pc, #448]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 801678c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801678e:	4b70      	ldr	r3, [pc, #448]	@ (8016950 <UTIL_SEQ_Run+0x1dc>)
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8016794:	4b6f      	ldr	r3, [pc, #444]	@ (8016954 <UTIL_SEQ_Run+0x1e0>)
 8016796:	681b      	ldr	r3, [r3, #0]
 8016798:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801679a:	4b6f      	ldr	r3, [pc, #444]	@ (8016958 <UTIL_SEQ_Run+0x1e4>)
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 80167a0:	4b6e      	ldr	r3, [pc, #440]	@ (801695c <UTIL_SEQ_Run+0x1e8>)
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80167a6:	e08d      	b.n	80168c4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 80167a8:	2300      	movs	r3, #0
 80167aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80167ac:	e002      	b.n	80167b4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 80167ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167b0:	3301      	adds	r3, #1
 80167b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 80167b4:	4a6a      	ldr	r2, [pc, #424]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 80167b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167b8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80167bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167be:	401a      	ands	r2, r3
 80167c0:	4b62      	ldr	r3, [pc, #392]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	4013      	ands	r3, r2
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d0f1      	beq.n	80167ae <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 80167ca:	4a65      	ldr	r2, [pc, #404]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 80167cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167ce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80167d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80167d4:	401a      	ands	r2, r3
 80167d6:	4b5d      	ldr	r3, [pc, #372]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	4013      	ands	r3, r2
 80167dc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 80167de:	4a60      	ldr	r2, [pc, #384]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 80167e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167e2:	00db      	lsls	r3, r3, #3
 80167e4:	4413      	add	r3, r2
 80167e6:	685a      	ldr	r2, [r3, #4]
 80167e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167ea:	4013      	ands	r3, r2
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d106      	bne.n	80167fe <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80167f0:	4a5b      	ldr	r2, [pc, #364]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 80167f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80167f4:	00db      	lsls	r3, r3, #3
 80167f6:	4413      	add	r3, r2
 80167f8:	f04f 32ff 	mov.w	r2, #4294967295
 80167fc:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 80167fe:	4a58      	ldr	r2, [pc, #352]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 8016800:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016802:	00db      	lsls	r3, r3, #3
 8016804:	4413      	add	r3, r2
 8016806:	685a      	ldr	r2, [r3, #4]
 8016808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801680a:	4013      	ands	r3, r2
 801680c:	4618      	mov	r0, r3
 801680e:	f000 f973 	bl	8016af8 <SEQ_BitPosition>
 8016812:	4603      	mov	r3, r0
 8016814:	461a      	mov	r2, r3
 8016816:	4b53      	ldr	r3, [pc, #332]	@ (8016964 <UTIL_SEQ_Run+0x1f0>)
 8016818:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801681a:	4a51      	ldr	r2, [pc, #324]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 801681c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801681e:	00db      	lsls	r3, r3, #3
 8016820:	4413      	add	r3, r2
 8016822:	685a      	ldr	r2, [r3, #4]
 8016824:	4b4f      	ldr	r3, [pc, #316]	@ (8016964 <UTIL_SEQ_Run+0x1f0>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	2101      	movs	r1, #1
 801682a:	fa01 f303 	lsl.w	r3, r1, r3
 801682e:	43db      	mvns	r3, r3
 8016830:	401a      	ands	r2, r3
 8016832:	494b      	ldr	r1, [pc, #300]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 8016834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016836:	00db      	lsls	r3, r3, #3
 8016838:	440b      	add	r3, r1
 801683a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801683c:	f3ef 8310 	mrs	r3, PRIMASK
 8016840:	61bb      	str	r3, [r7, #24]
  return(result);
 8016842:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016844:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8016846:	b672      	cpsid	i
}
 8016848:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801684a:	4b46      	ldr	r3, [pc, #280]	@ (8016964 <UTIL_SEQ_Run+0x1f0>)
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	2201      	movs	r2, #1
 8016850:	fa02 f303 	lsl.w	r3, r2, r3
 8016854:	43da      	mvns	r2, r3
 8016856:	4b3e      	ldr	r3, [pc, #248]	@ (8016950 <UTIL_SEQ_Run+0x1dc>)
 8016858:	681b      	ldr	r3, [r3, #0]
 801685a:	4013      	ands	r3, r2
 801685c:	4a3c      	ldr	r2, [pc, #240]	@ (8016950 <UTIL_SEQ_Run+0x1dc>)
 801685e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016860:	2302      	movs	r3, #2
 8016862:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016864:	e013      	b.n	801688e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8016866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016868:	3b01      	subs	r3, #1
 801686a:	4a3d      	ldr	r2, [pc, #244]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 801686c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016870:	4b3c      	ldr	r3, [pc, #240]	@ (8016964 <UTIL_SEQ_Run+0x1f0>)
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2201      	movs	r2, #1
 8016876:	fa02 f303 	lsl.w	r3, r2, r3
 801687a:	43da      	mvns	r2, r3
 801687c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801687e:	3b01      	subs	r3, #1
 8016880:	400a      	ands	r2, r1
 8016882:	4937      	ldr	r1, [pc, #220]	@ (8016960 <UTIL_SEQ_Run+0x1ec>)
 8016884:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801688a:	3b01      	subs	r3, #1
 801688c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801688e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016890:	2b00      	cmp	r3, #0
 8016892:	d1e8      	bne.n	8016866 <UTIL_SEQ_Run+0xf2>
 8016894:	6a3b      	ldr	r3, [r7, #32]
 8016896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016898:	697b      	ldr	r3, [r7, #20]
 801689a:	f383 8810 	msr	PRIMASK, r3
}
 801689e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 80168a0:	4b30      	ldr	r3, [pc, #192]	@ (8016964 <UTIL_SEQ_Run+0x1f0>)
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	4a30      	ldr	r2, [pc, #192]	@ (8016968 <UTIL_SEQ_Run+0x1f4>)
 80168a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80168aa:	4798      	blx	r3

    local_taskset = TaskSet;
 80168ac:	4b28      	ldr	r3, [pc, #160]	@ (8016950 <UTIL_SEQ_Run+0x1dc>)
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 80168b2:	4b28      	ldr	r3, [pc, #160]	@ (8016954 <UTIL_SEQ_Run+0x1e0>)
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 80168b8:	4b27      	ldr	r3, [pc, #156]	@ (8016958 <UTIL_SEQ_Run+0x1e4>)
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 80168be:	4b27      	ldr	r3, [pc, #156]	@ (801695c <UTIL_SEQ_Run+0x1e8>)
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80168c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80168c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80168c8:	401a      	ands	r2, r3
 80168ca:	4b20      	ldr	r3, [pc, #128]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	4013      	ands	r3, r2
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d005      	beq.n	80168e0 <UTIL_SEQ_Run+0x16c>
 80168d4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80168d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80168d8:	4013      	ands	r3, r2
 80168da:	2b00      	cmp	r3, #0
 80168dc:	f43f af64 	beq.w	80167a8 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80168e0:	4b20      	ldr	r3, [pc, #128]	@ (8016964 <UTIL_SEQ_Run+0x1f0>)
 80168e2:	f04f 32ff 	mov.w	r2, #4294967295
 80168e6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80168e8:	f000 f8f8 	bl	8016adc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80168ec:	f3ef 8310 	mrs	r3, PRIMASK
 80168f0:	613b      	str	r3, [r7, #16]
  return(result);
 80168f2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 80168f4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 80168f6:	b672      	cpsid	i
}
 80168f8:	bf00      	nop
  local_taskset = TaskSet;
 80168fa:	4b15      	ldr	r3, [pc, #84]	@ (8016950 <UTIL_SEQ_Run+0x1dc>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8016900:	4b14      	ldr	r3, [pc, #80]	@ (8016954 <UTIL_SEQ_Run+0x1e0>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 8016906:	4b14      	ldr	r3, [pc, #80]	@ (8016958 <UTIL_SEQ_Run+0x1e4>)
 8016908:	681b      	ldr	r3, [r3, #0]
 801690a:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801690c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801690e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016910:	401a      	ands	r2, r3
 8016912:	4b0e      	ldr	r3, [pc, #56]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	4013      	ands	r3, r2
 8016918:	2b00      	cmp	r3, #0
 801691a:	d107      	bne.n	801692c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801691c:	4b0f      	ldr	r3, [pc, #60]	@ (801695c <UTIL_SEQ_Run+0x1e8>)
 801691e:	681a      	ldr	r2, [r3, #0]
 8016920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016922:	4013      	ands	r3, r2
 8016924:	2b00      	cmp	r3, #0
 8016926:	d101      	bne.n	801692c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8016928:	f7f0 fc82 	bl	8007230 <UTIL_SEQ_Idle>
 801692c:	69fb      	ldr	r3, [r7, #28]
 801692e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	f383 8810 	msr	PRIMASK, r3
}
 8016936:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8016938:	f000 f8d7 	bl	8016aea <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801693c:	4a03      	ldr	r2, [pc, #12]	@ (801694c <UTIL_SEQ_Run+0x1d8>)
 801693e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016940:	6013      	str	r3, [r2, #0]

  return;
 8016942:	bf00      	nop
}
 8016944:	3740      	adds	r7, #64	@ 0x40
 8016946:	46bd      	mov	sp, r7
 8016948:	bd80      	pop	{r7, pc}
 801694a:	bf00      	nop
 801694c:	200000b0 	.word	0x200000b0
 8016950:	20001c90 	.word	0x20001c90
 8016954:	20001c94 	.word	0x20001c94
 8016958:	200000ac 	.word	0x200000ac
 801695c:	20001c98 	.word	0x20001c98
 8016960:	20001d20 	.word	0x20001d20
 8016964:	20001c9c 	.word	0x20001c9c
 8016968:	20001ca0 	.word	0x20001ca0

0801696c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801696c:	b580      	push	{r7, lr}
 801696e:	b088      	sub	sp, #32
 8016970:	af00      	add	r7, sp, #0
 8016972:	60f8      	str	r0, [r7, #12]
 8016974:	60b9      	str	r1, [r7, #8]
 8016976:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016978:	f3ef 8310 	mrs	r3, PRIMASK
 801697c:	617b      	str	r3, [r7, #20]
  return(result);
 801697e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016980:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016982:	b672      	cpsid	i
}
 8016984:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016986:	68f8      	ldr	r0, [r7, #12]
 8016988:	f000 f8b6 	bl	8016af8 <SEQ_BitPosition>
 801698c:	4603      	mov	r3, r0
 801698e:	4619      	mov	r1, r3
 8016990:	4a06      	ldr	r2, [pc, #24]	@ (80169ac <UTIL_SEQ_RegTask+0x40>)
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016998:	69fb      	ldr	r3, [r7, #28]
 801699a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801699c:	69bb      	ldr	r3, [r7, #24]
 801699e:	f383 8810 	msr	PRIMASK, r3
}
 80169a2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 80169a4:	bf00      	nop
}
 80169a6:	3720      	adds	r7, #32
 80169a8:	46bd      	mov	sp, r7
 80169aa:	bd80      	pop	{r7, pc}
 80169ac:	20001ca0 	.word	0x20001ca0

080169b0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 80169b0:	b480      	push	{r7}
 80169b2:	b087      	sub	sp, #28
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	6078      	str	r0, [r7, #4]
 80169b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169ba:	f3ef 8310 	mrs	r3, PRIMASK
 80169be:	60fb      	str	r3, [r7, #12]
  return(result);
 80169c0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80169c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80169c4:	b672      	cpsid	i
}
 80169c6:	bf00      	nop

  TaskSet |= TaskId_bm;
 80169c8:	4b0d      	ldr	r3, [pc, #52]	@ (8016a00 <UTIL_SEQ_SetTask+0x50>)
 80169ca:	681a      	ldr	r2, [r3, #0]
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	4313      	orrs	r3, r2
 80169d0:	4a0b      	ldr	r2, [pc, #44]	@ (8016a00 <UTIL_SEQ_SetTask+0x50>)
 80169d2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80169d4:	4a0b      	ldr	r2, [pc, #44]	@ (8016a04 <UTIL_SEQ_SetTask+0x54>)
 80169d6:	683b      	ldr	r3, [r7, #0]
 80169d8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	431a      	orrs	r2, r3
 80169e0:	4908      	ldr	r1, [pc, #32]	@ (8016a04 <UTIL_SEQ_SetTask+0x54>)
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169ec:	693b      	ldr	r3, [r7, #16]
 80169ee:	f383 8810 	msr	PRIMASK, r3
}
 80169f2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80169f4:	bf00      	nop
}
 80169f6:	371c      	adds	r7, #28
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr
 8016a00:	20001c90 	.word	0x20001c90
 8016a04:	20001d20 	.word	0x20001d20

08016a08 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016a08:	b480      	push	{r7}
 8016a0a:	b087      	sub	sp, #28
 8016a0c:	af00      	add	r7, sp, #0
 8016a0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a10:	f3ef 8310 	mrs	r3, PRIMASK
 8016a14:	60fb      	str	r3, [r7, #12]
  return(result);
 8016a16:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016a18:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016a1a:	b672      	cpsid	i
}
 8016a1c:	bf00      	nop

  EvtSet |= EvtId_bm;
 8016a1e:	4b09      	ldr	r3, [pc, #36]	@ (8016a44 <UTIL_SEQ_SetEvt+0x3c>)
 8016a20:	681a      	ldr	r2, [r3, #0]
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	4313      	orrs	r3, r2
 8016a26:	4a07      	ldr	r2, [pc, #28]	@ (8016a44 <UTIL_SEQ_SetEvt+0x3c>)
 8016a28:	6013      	str	r3, [r2, #0]
 8016a2a:	697b      	ldr	r3, [r7, #20]
 8016a2c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016a2e:	693b      	ldr	r3, [r7, #16]
 8016a30:	f383 8810 	msr	PRIMASK, r3
}
 8016a34:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016a36:	bf00      	nop
}
 8016a38:	371c      	adds	r7, #28
 8016a3a:	46bd      	mov	sp, r7
 8016a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a40:	4770      	bx	lr
 8016a42:	bf00      	nop
 8016a44:	20001c94 	.word	0x20001c94

08016a48 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8016a48:	b580      	push	{r7, lr}
 8016a4a:	b088      	sub	sp, #32
 8016a4c:	af00      	add	r7, sp, #0
 8016a4e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8016a50:	4b1f      	ldr	r3, [pc, #124]	@ (8016ad0 <UTIL_SEQ_WaitEvt+0x88>)
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8016a56:	4b1e      	ldr	r3, [pc, #120]	@ (8016ad0 <UTIL_SEQ_WaitEvt+0x88>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016a5e:	d102      	bne.n	8016a66 <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8016a60:	2300      	movs	r3, #0
 8016a62:	61fb      	str	r3, [r7, #28]
 8016a64:	e005      	b.n	8016a72 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8016a66:	4b1a      	ldr	r3, [pc, #104]	@ (8016ad0 <UTIL_SEQ_WaitEvt+0x88>)
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	2201      	movs	r2, #1
 8016a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8016a70:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8016a72:	4b18      	ldr	r3, [pc, #96]	@ (8016ad4 <UTIL_SEQ_WaitEvt+0x8c>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016a78:	4a16      	ldr	r2, [pc, #88]	@ (8016ad4 <UTIL_SEQ_WaitEvt+0x8c>)
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8016a7e:	e003      	b.n	8016a88 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8016a80:	6879      	ldr	r1, [r7, #4]
 8016a82:	69f8      	ldr	r0, [r7, #28]
 8016a84:	f7f0 fbdc 	bl	8007240 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8016a88:	4b13      	ldr	r3, [pc, #76]	@ (8016ad8 <UTIL_SEQ_WaitEvt+0x90>)
 8016a8a:	681a      	ldr	r2, [r3, #0]
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	4013      	ands	r3, r2
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d0f5      	beq.n	8016a80 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8016a94:	4a0e      	ldr	r2, [pc, #56]	@ (8016ad0 <UTIL_SEQ_WaitEvt+0x88>)
 8016a96:	69bb      	ldr	r3, [r7, #24]
 8016a98:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016a9a:	f3ef 8310 	mrs	r3, PRIMASK
 8016a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8016aa0:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016aa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016aa4:	b672      	cpsid	i
}
 8016aa6:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016aa8:	687b      	ldr	r3, [r7, #4]
 8016aaa:	43da      	mvns	r2, r3
 8016aac:	4b0a      	ldr	r3, [pc, #40]	@ (8016ad8 <UTIL_SEQ_WaitEvt+0x90>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4013      	ands	r3, r2
 8016ab2:	4a09      	ldr	r2, [pc, #36]	@ (8016ad8 <UTIL_SEQ_WaitEvt+0x90>)
 8016ab4:	6013      	str	r3, [r2, #0]
 8016ab6:	693b      	ldr	r3, [r7, #16]
 8016ab8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016aba:	68fb      	ldr	r3, [r7, #12]
 8016abc:	f383 8810 	msr	PRIMASK, r3
}
 8016ac0:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8016ac2:	4a04      	ldr	r2, [pc, #16]	@ (8016ad4 <UTIL_SEQ_WaitEvt+0x8c>)
 8016ac4:	697b      	ldr	r3, [r7, #20]
 8016ac6:	6013      	str	r3, [r2, #0]
  return;
 8016ac8:	bf00      	nop
}
 8016aca:	3720      	adds	r7, #32
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}
 8016ad0:	20001c9c 	.word	0x20001c9c
 8016ad4:	20001c98 	.word	0x20001c98
 8016ad8:	20001c94 	.word	0x20001c94

08016adc <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8016adc:	b480      	push	{r7}
 8016ade:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016ae0:	bf00      	nop
}
 8016ae2:	46bd      	mov	sp, r7
 8016ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ae8:	4770      	bx	lr

08016aea <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8016aea:	b480      	push	{r7}
 8016aec:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016aee:	bf00      	nop
}
 8016af0:	46bd      	mov	sp, r7
 8016af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af6:	4770      	bx	lr

08016af8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016af8:	b480      	push	{r7}
 8016afa:	b085      	sub	sp, #20
 8016afc:	af00      	add	r7, sp, #0
 8016afe:	6078      	str	r0, [r7, #4]
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8016b04:	68fb      	ldr	r3, [r7, #12]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d101      	bne.n	8016b0e <SEQ_BitPosition+0x16>
    return 32U;
 8016b0a:	2320      	movs	r3, #32
 8016b0c:	e003      	b.n	8016b16 <SEQ_BitPosition+0x1e>
  return __builtin_clz(value);
 8016b0e:	68fb      	ldr	r3, [r7, #12]
 8016b10:	fab3 f383 	clz	r3, r3
 8016b14:	b2db      	uxtb	r3, r3
  return (uint8_t)(31 -__CLZ( Value ));
 8016b16:	f1c3 031f 	rsb	r3, r3, #31
 8016b1a:	b2db      	uxtb	r3, r3
}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3714      	adds	r7, #20
 8016b20:	46bd      	mov	sp, r7
 8016b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b26:	4770      	bx	lr

08016b28 <__assert_func>:
 8016b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016b2a:	4614      	mov	r4, r2
 8016b2c:	461a      	mov	r2, r3
 8016b2e:	4b09      	ldr	r3, [pc, #36]	@ (8016b54 <__assert_func+0x2c>)
 8016b30:	681b      	ldr	r3, [r3, #0]
 8016b32:	4605      	mov	r5, r0
 8016b34:	68d8      	ldr	r0, [r3, #12]
 8016b36:	b954      	cbnz	r4, 8016b4e <__assert_func+0x26>
 8016b38:	4b07      	ldr	r3, [pc, #28]	@ (8016b58 <__assert_func+0x30>)
 8016b3a:	461c      	mov	r4, r3
 8016b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016b40:	9100      	str	r1, [sp, #0]
 8016b42:	462b      	mov	r3, r5
 8016b44:	4905      	ldr	r1, [pc, #20]	@ (8016b5c <__assert_func+0x34>)
 8016b46:	f000 f96f 	bl	8016e28 <fiprintf>
 8016b4a:	f000 fb28 	bl	801719e <abort>
 8016b4e:	4b04      	ldr	r3, [pc, #16]	@ (8016b60 <__assert_func+0x38>)
 8016b50:	e7f4      	b.n	8016b3c <__assert_func+0x14>
 8016b52:	bf00      	nop
 8016b54:	200000c0 	.word	0x200000c0
 8016b58:	080192cf 	.word	0x080192cf
 8016b5c:	080192a1 	.word	0x080192a1
 8016b60:	08019294 	.word	0x08019294

08016b64 <malloc>:
 8016b64:	4b02      	ldr	r3, [pc, #8]	@ (8016b70 <malloc+0xc>)
 8016b66:	4601      	mov	r1, r0
 8016b68:	6818      	ldr	r0, [r3, #0]
 8016b6a:	f000 b82d 	b.w	8016bc8 <_malloc_r>
 8016b6e:	bf00      	nop
 8016b70:	200000c0 	.word	0x200000c0

08016b74 <free>:
 8016b74:	4b02      	ldr	r3, [pc, #8]	@ (8016b80 <free+0xc>)
 8016b76:	4601      	mov	r1, r0
 8016b78:	6818      	ldr	r0, [r3, #0]
 8016b7a:	f000 bb17 	b.w	80171ac <_free_r>
 8016b7e:	bf00      	nop
 8016b80:	200000c0 	.word	0x200000c0

08016b84 <sbrk_aligned>:
 8016b84:	b570      	push	{r4, r5, r6, lr}
 8016b86:	4e0f      	ldr	r6, [pc, #60]	@ (8016bc4 <sbrk_aligned+0x40>)
 8016b88:	460c      	mov	r4, r1
 8016b8a:	6831      	ldr	r1, [r6, #0]
 8016b8c:	4605      	mov	r5, r0
 8016b8e:	b911      	cbnz	r1, 8016b96 <sbrk_aligned+0x12>
 8016b90:	f000 faa6 	bl	80170e0 <_sbrk_r>
 8016b94:	6030      	str	r0, [r6, #0]
 8016b96:	4621      	mov	r1, r4
 8016b98:	4628      	mov	r0, r5
 8016b9a:	f000 faa1 	bl	80170e0 <_sbrk_r>
 8016b9e:	1c43      	adds	r3, r0, #1
 8016ba0:	d103      	bne.n	8016baa <sbrk_aligned+0x26>
 8016ba2:	f04f 34ff 	mov.w	r4, #4294967295
 8016ba6:	4620      	mov	r0, r4
 8016ba8:	bd70      	pop	{r4, r5, r6, pc}
 8016baa:	1cc4      	adds	r4, r0, #3
 8016bac:	f024 0403 	bic.w	r4, r4, #3
 8016bb0:	42a0      	cmp	r0, r4
 8016bb2:	d0f8      	beq.n	8016ba6 <sbrk_aligned+0x22>
 8016bb4:	1a21      	subs	r1, r4, r0
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	f000 fa92 	bl	80170e0 <_sbrk_r>
 8016bbc:	3001      	adds	r0, #1
 8016bbe:	d1f2      	bne.n	8016ba6 <sbrk_aligned+0x22>
 8016bc0:	e7ef      	b.n	8016ba2 <sbrk_aligned+0x1e>
 8016bc2:	bf00      	nop
 8016bc4:	20001d30 	.word	0x20001d30

08016bc8 <_malloc_r>:
 8016bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016bcc:	1ccd      	adds	r5, r1, #3
 8016bce:	f025 0503 	bic.w	r5, r5, #3
 8016bd2:	3508      	adds	r5, #8
 8016bd4:	2d0c      	cmp	r5, #12
 8016bd6:	bf38      	it	cc
 8016bd8:	250c      	movcc	r5, #12
 8016bda:	2d00      	cmp	r5, #0
 8016bdc:	4606      	mov	r6, r0
 8016bde:	db01      	blt.n	8016be4 <_malloc_r+0x1c>
 8016be0:	42a9      	cmp	r1, r5
 8016be2:	d904      	bls.n	8016bee <_malloc_r+0x26>
 8016be4:	230c      	movs	r3, #12
 8016be6:	6033      	str	r3, [r6, #0]
 8016be8:	2000      	movs	r0, #0
 8016bea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016bee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8016cc4 <_malloc_r+0xfc>
 8016bf2:	f000 f869 	bl	8016cc8 <__malloc_lock>
 8016bf6:	f8d8 3000 	ldr.w	r3, [r8]
 8016bfa:	461c      	mov	r4, r3
 8016bfc:	bb44      	cbnz	r4, 8016c50 <_malloc_r+0x88>
 8016bfe:	4629      	mov	r1, r5
 8016c00:	4630      	mov	r0, r6
 8016c02:	f7ff ffbf 	bl	8016b84 <sbrk_aligned>
 8016c06:	1c43      	adds	r3, r0, #1
 8016c08:	4604      	mov	r4, r0
 8016c0a:	d158      	bne.n	8016cbe <_malloc_r+0xf6>
 8016c0c:	f8d8 4000 	ldr.w	r4, [r8]
 8016c10:	4627      	mov	r7, r4
 8016c12:	2f00      	cmp	r7, #0
 8016c14:	d143      	bne.n	8016c9e <_malloc_r+0xd6>
 8016c16:	2c00      	cmp	r4, #0
 8016c18:	d04b      	beq.n	8016cb2 <_malloc_r+0xea>
 8016c1a:	6823      	ldr	r3, [r4, #0]
 8016c1c:	4639      	mov	r1, r7
 8016c1e:	4630      	mov	r0, r6
 8016c20:	eb04 0903 	add.w	r9, r4, r3
 8016c24:	f000 fa5c 	bl	80170e0 <_sbrk_r>
 8016c28:	4581      	cmp	r9, r0
 8016c2a:	d142      	bne.n	8016cb2 <_malloc_r+0xea>
 8016c2c:	6821      	ldr	r1, [r4, #0]
 8016c2e:	1a6d      	subs	r5, r5, r1
 8016c30:	4629      	mov	r1, r5
 8016c32:	4630      	mov	r0, r6
 8016c34:	f7ff ffa6 	bl	8016b84 <sbrk_aligned>
 8016c38:	3001      	adds	r0, #1
 8016c3a:	d03a      	beq.n	8016cb2 <_malloc_r+0xea>
 8016c3c:	6823      	ldr	r3, [r4, #0]
 8016c3e:	442b      	add	r3, r5
 8016c40:	6023      	str	r3, [r4, #0]
 8016c42:	f8d8 3000 	ldr.w	r3, [r8]
 8016c46:	685a      	ldr	r2, [r3, #4]
 8016c48:	bb62      	cbnz	r2, 8016ca4 <_malloc_r+0xdc>
 8016c4a:	f8c8 7000 	str.w	r7, [r8]
 8016c4e:	e00f      	b.n	8016c70 <_malloc_r+0xa8>
 8016c50:	6822      	ldr	r2, [r4, #0]
 8016c52:	1b52      	subs	r2, r2, r5
 8016c54:	d420      	bmi.n	8016c98 <_malloc_r+0xd0>
 8016c56:	2a0b      	cmp	r2, #11
 8016c58:	d917      	bls.n	8016c8a <_malloc_r+0xc2>
 8016c5a:	1961      	adds	r1, r4, r5
 8016c5c:	42a3      	cmp	r3, r4
 8016c5e:	6025      	str	r5, [r4, #0]
 8016c60:	bf18      	it	ne
 8016c62:	6059      	strne	r1, [r3, #4]
 8016c64:	6863      	ldr	r3, [r4, #4]
 8016c66:	bf08      	it	eq
 8016c68:	f8c8 1000 	streq.w	r1, [r8]
 8016c6c:	5162      	str	r2, [r4, r5]
 8016c6e:	604b      	str	r3, [r1, #4]
 8016c70:	4630      	mov	r0, r6
 8016c72:	f000 f82f 	bl	8016cd4 <__malloc_unlock>
 8016c76:	f104 000b 	add.w	r0, r4, #11
 8016c7a:	1d23      	adds	r3, r4, #4
 8016c7c:	f020 0007 	bic.w	r0, r0, #7
 8016c80:	1ac2      	subs	r2, r0, r3
 8016c82:	bf1c      	itt	ne
 8016c84:	1a1b      	subne	r3, r3, r0
 8016c86:	50a3      	strne	r3, [r4, r2]
 8016c88:	e7af      	b.n	8016bea <_malloc_r+0x22>
 8016c8a:	6862      	ldr	r2, [r4, #4]
 8016c8c:	42a3      	cmp	r3, r4
 8016c8e:	bf0c      	ite	eq
 8016c90:	f8c8 2000 	streq.w	r2, [r8]
 8016c94:	605a      	strne	r2, [r3, #4]
 8016c96:	e7eb      	b.n	8016c70 <_malloc_r+0xa8>
 8016c98:	4623      	mov	r3, r4
 8016c9a:	6864      	ldr	r4, [r4, #4]
 8016c9c:	e7ae      	b.n	8016bfc <_malloc_r+0x34>
 8016c9e:	463c      	mov	r4, r7
 8016ca0:	687f      	ldr	r7, [r7, #4]
 8016ca2:	e7b6      	b.n	8016c12 <_malloc_r+0x4a>
 8016ca4:	461a      	mov	r2, r3
 8016ca6:	685b      	ldr	r3, [r3, #4]
 8016ca8:	42a3      	cmp	r3, r4
 8016caa:	d1fb      	bne.n	8016ca4 <_malloc_r+0xdc>
 8016cac:	2300      	movs	r3, #0
 8016cae:	6053      	str	r3, [r2, #4]
 8016cb0:	e7de      	b.n	8016c70 <_malloc_r+0xa8>
 8016cb2:	230c      	movs	r3, #12
 8016cb4:	6033      	str	r3, [r6, #0]
 8016cb6:	4630      	mov	r0, r6
 8016cb8:	f000 f80c 	bl	8016cd4 <__malloc_unlock>
 8016cbc:	e794      	b.n	8016be8 <_malloc_r+0x20>
 8016cbe:	6005      	str	r5, [r0, #0]
 8016cc0:	e7d6      	b.n	8016c70 <_malloc_r+0xa8>
 8016cc2:	bf00      	nop
 8016cc4:	20001d34 	.word	0x20001d34

08016cc8 <__malloc_lock>:
 8016cc8:	4801      	ldr	r0, [pc, #4]	@ (8016cd0 <__malloc_lock+0x8>)
 8016cca:	f000 ba56 	b.w	801717a <__retarget_lock_acquire_recursive>
 8016cce:	bf00      	nop
 8016cd0:	20001e78 	.word	0x20001e78

08016cd4 <__malloc_unlock>:
 8016cd4:	4801      	ldr	r0, [pc, #4]	@ (8016cdc <__malloc_unlock+0x8>)
 8016cd6:	f000 ba51 	b.w	801717c <__retarget_lock_release_recursive>
 8016cda:	bf00      	nop
 8016cdc:	20001e78 	.word	0x20001e78

08016ce0 <std>:
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	b510      	push	{r4, lr}
 8016ce4:	4604      	mov	r4, r0
 8016ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8016cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016cee:	6083      	str	r3, [r0, #8]
 8016cf0:	8181      	strh	r1, [r0, #12]
 8016cf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8016cf4:	81c2      	strh	r2, [r0, #14]
 8016cf6:	6183      	str	r3, [r0, #24]
 8016cf8:	4619      	mov	r1, r3
 8016cfa:	2208      	movs	r2, #8
 8016cfc:	305c      	adds	r0, #92	@ 0x5c
 8016cfe:	f000 f9a5 	bl	801704c <memset>
 8016d02:	4b0d      	ldr	r3, [pc, #52]	@ (8016d38 <std+0x58>)
 8016d04:	6263      	str	r3, [r4, #36]	@ 0x24
 8016d06:	4b0d      	ldr	r3, [pc, #52]	@ (8016d3c <std+0x5c>)
 8016d08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8016d0a:	4b0d      	ldr	r3, [pc, #52]	@ (8016d40 <std+0x60>)
 8016d0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8016d0e:	4b0d      	ldr	r3, [pc, #52]	@ (8016d44 <std+0x64>)
 8016d10:	6323      	str	r3, [r4, #48]	@ 0x30
 8016d12:	4b0d      	ldr	r3, [pc, #52]	@ (8016d48 <std+0x68>)
 8016d14:	6224      	str	r4, [r4, #32]
 8016d16:	429c      	cmp	r4, r3
 8016d18:	d006      	beq.n	8016d28 <std+0x48>
 8016d1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8016d1e:	4294      	cmp	r4, r2
 8016d20:	d002      	beq.n	8016d28 <std+0x48>
 8016d22:	33d0      	adds	r3, #208	@ 0xd0
 8016d24:	429c      	cmp	r4, r3
 8016d26:	d105      	bne.n	8016d34 <std+0x54>
 8016d28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8016d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d30:	f000 ba22 	b.w	8017178 <__retarget_lock_init_recursive>
 8016d34:	bd10      	pop	{r4, pc}
 8016d36:	bf00      	nop
 8016d38:	08016f55 	.word	0x08016f55
 8016d3c:	08016f77 	.word	0x08016f77
 8016d40:	08016faf 	.word	0x08016faf
 8016d44:	08016fd3 	.word	0x08016fd3
 8016d48:	20001d38 	.word	0x20001d38

08016d4c <stdio_exit_handler>:
 8016d4c:	4a02      	ldr	r2, [pc, #8]	@ (8016d58 <stdio_exit_handler+0xc>)
 8016d4e:	4903      	ldr	r1, [pc, #12]	@ (8016d5c <stdio_exit_handler+0x10>)
 8016d50:	4803      	ldr	r0, [pc, #12]	@ (8016d60 <stdio_exit_handler+0x14>)
 8016d52:	f000 b87b 	b.w	8016e4c <_fwalk_sglue>
 8016d56:	bf00      	nop
 8016d58:	200000b4 	.word	0x200000b4
 8016d5c:	08017b99 	.word	0x08017b99
 8016d60:	200000c4 	.word	0x200000c4

08016d64 <cleanup_stdio>:
 8016d64:	6841      	ldr	r1, [r0, #4]
 8016d66:	4b0c      	ldr	r3, [pc, #48]	@ (8016d98 <cleanup_stdio+0x34>)
 8016d68:	4299      	cmp	r1, r3
 8016d6a:	b510      	push	{r4, lr}
 8016d6c:	4604      	mov	r4, r0
 8016d6e:	d001      	beq.n	8016d74 <cleanup_stdio+0x10>
 8016d70:	f000 ff12 	bl	8017b98 <_fflush_r>
 8016d74:	68a1      	ldr	r1, [r4, #8]
 8016d76:	4b09      	ldr	r3, [pc, #36]	@ (8016d9c <cleanup_stdio+0x38>)
 8016d78:	4299      	cmp	r1, r3
 8016d7a:	d002      	beq.n	8016d82 <cleanup_stdio+0x1e>
 8016d7c:	4620      	mov	r0, r4
 8016d7e:	f000 ff0b 	bl	8017b98 <_fflush_r>
 8016d82:	68e1      	ldr	r1, [r4, #12]
 8016d84:	4b06      	ldr	r3, [pc, #24]	@ (8016da0 <cleanup_stdio+0x3c>)
 8016d86:	4299      	cmp	r1, r3
 8016d88:	d004      	beq.n	8016d94 <cleanup_stdio+0x30>
 8016d8a:	4620      	mov	r0, r4
 8016d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d90:	f000 bf02 	b.w	8017b98 <_fflush_r>
 8016d94:	bd10      	pop	{r4, pc}
 8016d96:	bf00      	nop
 8016d98:	20001d38 	.word	0x20001d38
 8016d9c:	20001da0 	.word	0x20001da0
 8016da0:	20001e08 	.word	0x20001e08

08016da4 <global_stdio_init.part.0>:
 8016da4:	b510      	push	{r4, lr}
 8016da6:	4b0b      	ldr	r3, [pc, #44]	@ (8016dd4 <global_stdio_init.part.0+0x30>)
 8016da8:	4c0b      	ldr	r4, [pc, #44]	@ (8016dd8 <global_stdio_init.part.0+0x34>)
 8016daa:	4a0c      	ldr	r2, [pc, #48]	@ (8016ddc <global_stdio_init.part.0+0x38>)
 8016dac:	601a      	str	r2, [r3, #0]
 8016dae:	4620      	mov	r0, r4
 8016db0:	2200      	movs	r2, #0
 8016db2:	2104      	movs	r1, #4
 8016db4:	f7ff ff94 	bl	8016ce0 <std>
 8016db8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8016dbc:	2201      	movs	r2, #1
 8016dbe:	2109      	movs	r1, #9
 8016dc0:	f7ff ff8e 	bl	8016ce0 <std>
 8016dc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8016dc8:	2202      	movs	r2, #2
 8016dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016dce:	2112      	movs	r1, #18
 8016dd0:	f7ff bf86 	b.w	8016ce0 <std>
 8016dd4:	20001e70 	.word	0x20001e70
 8016dd8:	20001d38 	.word	0x20001d38
 8016ddc:	08016d4d 	.word	0x08016d4d

08016de0 <__sfp_lock_acquire>:
 8016de0:	4801      	ldr	r0, [pc, #4]	@ (8016de8 <__sfp_lock_acquire+0x8>)
 8016de2:	f000 b9ca 	b.w	801717a <__retarget_lock_acquire_recursive>
 8016de6:	bf00      	nop
 8016de8:	20001e79 	.word	0x20001e79

08016dec <__sfp_lock_release>:
 8016dec:	4801      	ldr	r0, [pc, #4]	@ (8016df4 <__sfp_lock_release+0x8>)
 8016dee:	f000 b9c5 	b.w	801717c <__retarget_lock_release_recursive>
 8016df2:	bf00      	nop
 8016df4:	20001e79 	.word	0x20001e79

08016df8 <__sinit>:
 8016df8:	b510      	push	{r4, lr}
 8016dfa:	4604      	mov	r4, r0
 8016dfc:	f7ff fff0 	bl	8016de0 <__sfp_lock_acquire>
 8016e00:	6a23      	ldr	r3, [r4, #32]
 8016e02:	b11b      	cbz	r3, 8016e0c <__sinit+0x14>
 8016e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e08:	f7ff bff0 	b.w	8016dec <__sfp_lock_release>
 8016e0c:	4b04      	ldr	r3, [pc, #16]	@ (8016e20 <__sinit+0x28>)
 8016e0e:	6223      	str	r3, [r4, #32]
 8016e10:	4b04      	ldr	r3, [pc, #16]	@ (8016e24 <__sinit+0x2c>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d1f5      	bne.n	8016e04 <__sinit+0xc>
 8016e18:	f7ff ffc4 	bl	8016da4 <global_stdio_init.part.0>
 8016e1c:	e7f2      	b.n	8016e04 <__sinit+0xc>
 8016e1e:	bf00      	nop
 8016e20:	08016d65 	.word	0x08016d65
 8016e24:	20001e70 	.word	0x20001e70

08016e28 <fiprintf>:
 8016e28:	b40e      	push	{r1, r2, r3}
 8016e2a:	b503      	push	{r0, r1, lr}
 8016e2c:	4601      	mov	r1, r0
 8016e2e:	ab03      	add	r3, sp, #12
 8016e30:	4805      	ldr	r0, [pc, #20]	@ (8016e48 <fiprintf+0x20>)
 8016e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e36:	6800      	ldr	r0, [r0, #0]
 8016e38:	9301      	str	r3, [sp, #4]
 8016e3a:	f000 fb83 	bl	8017544 <_vfiprintf_r>
 8016e3e:	b002      	add	sp, #8
 8016e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e44:	b003      	add	sp, #12
 8016e46:	4770      	bx	lr
 8016e48:	200000c0 	.word	0x200000c0

08016e4c <_fwalk_sglue>:
 8016e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e50:	4607      	mov	r7, r0
 8016e52:	4688      	mov	r8, r1
 8016e54:	4614      	mov	r4, r2
 8016e56:	2600      	movs	r6, #0
 8016e58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016e5c:	f1b9 0901 	subs.w	r9, r9, #1
 8016e60:	d505      	bpl.n	8016e6e <_fwalk_sglue+0x22>
 8016e62:	6824      	ldr	r4, [r4, #0]
 8016e64:	2c00      	cmp	r4, #0
 8016e66:	d1f7      	bne.n	8016e58 <_fwalk_sglue+0xc>
 8016e68:	4630      	mov	r0, r6
 8016e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e6e:	89ab      	ldrh	r3, [r5, #12]
 8016e70:	2b01      	cmp	r3, #1
 8016e72:	d907      	bls.n	8016e84 <_fwalk_sglue+0x38>
 8016e74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016e78:	3301      	adds	r3, #1
 8016e7a:	d003      	beq.n	8016e84 <_fwalk_sglue+0x38>
 8016e7c:	4629      	mov	r1, r5
 8016e7e:	4638      	mov	r0, r7
 8016e80:	47c0      	blx	r8
 8016e82:	4306      	orrs	r6, r0
 8016e84:	3568      	adds	r5, #104	@ 0x68
 8016e86:	e7e9      	b.n	8016e5c <_fwalk_sglue+0x10>

08016e88 <iprintf>:
 8016e88:	b40f      	push	{r0, r1, r2, r3}
 8016e8a:	b507      	push	{r0, r1, r2, lr}
 8016e8c:	4906      	ldr	r1, [pc, #24]	@ (8016ea8 <iprintf+0x20>)
 8016e8e:	ab04      	add	r3, sp, #16
 8016e90:	6808      	ldr	r0, [r1, #0]
 8016e92:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e96:	6881      	ldr	r1, [r0, #8]
 8016e98:	9301      	str	r3, [sp, #4]
 8016e9a:	f000 fb53 	bl	8017544 <_vfiprintf_r>
 8016e9e:	b003      	add	sp, #12
 8016ea0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ea4:	b004      	add	sp, #16
 8016ea6:	4770      	bx	lr
 8016ea8:	200000c0 	.word	0x200000c0

08016eac <sniprintf>:
 8016eac:	b40c      	push	{r2, r3}
 8016eae:	b530      	push	{r4, r5, lr}
 8016eb0:	4b17      	ldr	r3, [pc, #92]	@ (8016f10 <sniprintf+0x64>)
 8016eb2:	1e0c      	subs	r4, r1, #0
 8016eb4:	681d      	ldr	r5, [r3, #0]
 8016eb6:	b09d      	sub	sp, #116	@ 0x74
 8016eb8:	da08      	bge.n	8016ecc <sniprintf+0x20>
 8016eba:	238b      	movs	r3, #139	@ 0x8b
 8016ebc:	602b      	str	r3, [r5, #0]
 8016ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8016ec2:	b01d      	add	sp, #116	@ 0x74
 8016ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016ec8:	b002      	add	sp, #8
 8016eca:	4770      	bx	lr
 8016ecc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016ed0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8016ed4:	bf14      	ite	ne
 8016ed6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8016eda:	4623      	moveq	r3, r4
 8016edc:	9304      	str	r3, [sp, #16]
 8016ede:	9307      	str	r3, [sp, #28]
 8016ee0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016ee4:	9002      	str	r0, [sp, #8]
 8016ee6:	9006      	str	r0, [sp, #24]
 8016ee8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016eec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016eee:	ab21      	add	r3, sp, #132	@ 0x84
 8016ef0:	a902      	add	r1, sp, #8
 8016ef2:	4628      	mov	r0, r5
 8016ef4:	9301      	str	r3, [sp, #4]
 8016ef6:	f000 f9ff 	bl	80172f8 <_svfiprintf_r>
 8016efa:	1c43      	adds	r3, r0, #1
 8016efc:	bfbc      	itt	lt
 8016efe:	238b      	movlt	r3, #139	@ 0x8b
 8016f00:	602b      	strlt	r3, [r5, #0]
 8016f02:	2c00      	cmp	r4, #0
 8016f04:	d0dd      	beq.n	8016ec2 <sniprintf+0x16>
 8016f06:	9b02      	ldr	r3, [sp, #8]
 8016f08:	2200      	movs	r2, #0
 8016f0a:	701a      	strb	r2, [r3, #0]
 8016f0c:	e7d9      	b.n	8016ec2 <sniprintf+0x16>
 8016f0e:	bf00      	nop
 8016f10:	200000c0 	.word	0x200000c0

08016f14 <siprintf>:
 8016f14:	b40e      	push	{r1, r2, r3}
 8016f16:	b500      	push	{lr}
 8016f18:	b09c      	sub	sp, #112	@ 0x70
 8016f1a:	ab1d      	add	r3, sp, #116	@ 0x74
 8016f1c:	9002      	str	r0, [sp, #8]
 8016f1e:	9006      	str	r0, [sp, #24]
 8016f20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8016f24:	4809      	ldr	r0, [pc, #36]	@ (8016f4c <siprintf+0x38>)
 8016f26:	9107      	str	r1, [sp, #28]
 8016f28:	9104      	str	r1, [sp, #16]
 8016f2a:	4909      	ldr	r1, [pc, #36]	@ (8016f50 <siprintf+0x3c>)
 8016f2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f30:	9105      	str	r1, [sp, #20]
 8016f32:	6800      	ldr	r0, [r0, #0]
 8016f34:	9301      	str	r3, [sp, #4]
 8016f36:	a902      	add	r1, sp, #8
 8016f38:	f000 f9de 	bl	80172f8 <_svfiprintf_r>
 8016f3c:	9b02      	ldr	r3, [sp, #8]
 8016f3e:	2200      	movs	r2, #0
 8016f40:	701a      	strb	r2, [r3, #0]
 8016f42:	b01c      	add	sp, #112	@ 0x70
 8016f44:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f48:	b003      	add	sp, #12
 8016f4a:	4770      	bx	lr
 8016f4c:	200000c0 	.word	0x200000c0
 8016f50:	ffff0208 	.word	0xffff0208

08016f54 <__sread>:
 8016f54:	b510      	push	{r4, lr}
 8016f56:	460c      	mov	r4, r1
 8016f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f5c:	f000 f8ae 	bl	80170bc <_read_r>
 8016f60:	2800      	cmp	r0, #0
 8016f62:	bfab      	itete	ge
 8016f64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8016f66:	89a3      	ldrhlt	r3, [r4, #12]
 8016f68:	181b      	addge	r3, r3, r0
 8016f6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8016f6e:	bfac      	ite	ge
 8016f70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8016f72:	81a3      	strhlt	r3, [r4, #12]
 8016f74:	bd10      	pop	{r4, pc}

08016f76 <__swrite>:
 8016f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016f7a:	461f      	mov	r7, r3
 8016f7c:	898b      	ldrh	r3, [r1, #12]
 8016f7e:	05db      	lsls	r3, r3, #23
 8016f80:	4605      	mov	r5, r0
 8016f82:	460c      	mov	r4, r1
 8016f84:	4616      	mov	r6, r2
 8016f86:	d505      	bpl.n	8016f94 <__swrite+0x1e>
 8016f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016f8c:	2302      	movs	r3, #2
 8016f8e:	2200      	movs	r2, #0
 8016f90:	f000 f882 	bl	8017098 <_lseek_r>
 8016f94:	89a3      	ldrh	r3, [r4, #12]
 8016f96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016f9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8016f9e:	81a3      	strh	r3, [r4, #12]
 8016fa0:	4632      	mov	r2, r6
 8016fa2:	463b      	mov	r3, r7
 8016fa4:	4628      	mov	r0, r5
 8016fa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016faa:	f000 b8a9 	b.w	8017100 <_write_r>

08016fae <__sseek>:
 8016fae:	b510      	push	{r4, lr}
 8016fb0:	460c      	mov	r4, r1
 8016fb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fb6:	f000 f86f 	bl	8017098 <_lseek_r>
 8016fba:	1c43      	adds	r3, r0, #1
 8016fbc:	89a3      	ldrh	r3, [r4, #12]
 8016fbe:	bf15      	itete	ne
 8016fc0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8016fc2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8016fc6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8016fca:	81a3      	strheq	r3, [r4, #12]
 8016fcc:	bf18      	it	ne
 8016fce:	81a3      	strhne	r3, [r4, #12]
 8016fd0:	bd10      	pop	{r4, pc}

08016fd2 <__sclose>:
 8016fd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016fd6:	f000 b84f 	b.w	8017078 <_close_r>

08016fda <_vsniprintf_r>:
 8016fda:	b530      	push	{r4, r5, lr}
 8016fdc:	4614      	mov	r4, r2
 8016fde:	2c00      	cmp	r4, #0
 8016fe0:	b09b      	sub	sp, #108	@ 0x6c
 8016fe2:	4605      	mov	r5, r0
 8016fe4:	461a      	mov	r2, r3
 8016fe6:	da05      	bge.n	8016ff4 <_vsniprintf_r+0x1a>
 8016fe8:	238b      	movs	r3, #139	@ 0x8b
 8016fea:	6003      	str	r3, [r0, #0]
 8016fec:	f04f 30ff 	mov.w	r0, #4294967295
 8016ff0:	b01b      	add	sp, #108	@ 0x6c
 8016ff2:	bd30      	pop	{r4, r5, pc}
 8016ff4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8016ff8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8016ffc:	bf14      	ite	ne
 8016ffe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8017002:	4623      	moveq	r3, r4
 8017004:	9302      	str	r3, [sp, #8]
 8017006:	9305      	str	r3, [sp, #20]
 8017008:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801700c:	9100      	str	r1, [sp, #0]
 801700e:	9104      	str	r1, [sp, #16]
 8017010:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017014:	4669      	mov	r1, sp
 8017016:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017018:	f000 f96e 	bl	80172f8 <_svfiprintf_r>
 801701c:	1c43      	adds	r3, r0, #1
 801701e:	bfbc      	itt	lt
 8017020:	238b      	movlt	r3, #139	@ 0x8b
 8017022:	602b      	strlt	r3, [r5, #0]
 8017024:	2c00      	cmp	r4, #0
 8017026:	d0e3      	beq.n	8016ff0 <_vsniprintf_r+0x16>
 8017028:	9b00      	ldr	r3, [sp, #0]
 801702a:	2200      	movs	r2, #0
 801702c:	701a      	strb	r2, [r3, #0]
 801702e:	e7df      	b.n	8016ff0 <_vsniprintf_r+0x16>

08017030 <vsniprintf>:
 8017030:	b507      	push	{r0, r1, r2, lr}
 8017032:	9300      	str	r3, [sp, #0]
 8017034:	4613      	mov	r3, r2
 8017036:	460a      	mov	r2, r1
 8017038:	4601      	mov	r1, r0
 801703a:	4803      	ldr	r0, [pc, #12]	@ (8017048 <vsniprintf+0x18>)
 801703c:	6800      	ldr	r0, [r0, #0]
 801703e:	f7ff ffcc 	bl	8016fda <_vsniprintf_r>
 8017042:	b003      	add	sp, #12
 8017044:	f85d fb04 	ldr.w	pc, [sp], #4
 8017048:	200000c0 	.word	0x200000c0

0801704c <memset>:
 801704c:	4402      	add	r2, r0
 801704e:	4603      	mov	r3, r0
 8017050:	4293      	cmp	r3, r2
 8017052:	d100      	bne.n	8017056 <memset+0xa>
 8017054:	4770      	bx	lr
 8017056:	f803 1b01 	strb.w	r1, [r3], #1
 801705a:	e7f9      	b.n	8017050 <memset+0x4>

0801705c <strchr>:
 801705c:	b2c9      	uxtb	r1, r1
 801705e:	4603      	mov	r3, r0
 8017060:	4618      	mov	r0, r3
 8017062:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017066:	b112      	cbz	r2, 801706e <strchr+0x12>
 8017068:	428a      	cmp	r2, r1
 801706a:	d1f9      	bne.n	8017060 <strchr+0x4>
 801706c:	4770      	bx	lr
 801706e:	2900      	cmp	r1, #0
 8017070:	bf18      	it	ne
 8017072:	2000      	movne	r0, #0
 8017074:	4770      	bx	lr
	...

08017078 <_close_r>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	4d06      	ldr	r5, [pc, #24]	@ (8017094 <_close_r+0x1c>)
 801707c:	2300      	movs	r3, #0
 801707e:	4604      	mov	r4, r0
 8017080:	4608      	mov	r0, r1
 8017082:	602b      	str	r3, [r5, #0]
 8017084:	f7f1 fdde 	bl	8008c44 <_close>
 8017088:	1c43      	adds	r3, r0, #1
 801708a:	d102      	bne.n	8017092 <_close_r+0x1a>
 801708c:	682b      	ldr	r3, [r5, #0]
 801708e:	b103      	cbz	r3, 8017092 <_close_r+0x1a>
 8017090:	6023      	str	r3, [r4, #0]
 8017092:	bd38      	pop	{r3, r4, r5, pc}
 8017094:	20001e74 	.word	0x20001e74

08017098 <_lseek_r>:
 8017098:	b538      	push	{r3, r4, r5, lr}
 801709a:	4d07      	ldr	r5, [pc, #28]	@ (80170b8 <_lseek_r+0x20>)
 801709c:	4604      	mov	r4, r0
 801709e:	4608      	mov	r0, r1
 80170a0:	4611      	mov	r1, r2
 80170a2:	2200      	movs	r2, #0
 80170a4:	602a      	str	r2, [r5, #0]
 80170a6:	461a      	mov	r2, r3
 80170a8:	f7f1 fdf3 	bl	8008c92 <_lseek>
 80170ac:	1c43      	adds	r3, r0, #1
 80170ae:	d102      	bne.n	80170b6 <_lseek_r+0x1e>
 80170b0:	682b      	ldr	r3, [r5, #0]
 80170b2:	b103      	cbz	r3, 80170b6 <_lseek_r+0x1e>
 80170b4:	6023      	str	r3, [r4, #0]
 80170b6:	bd38      	pop	{r3, r4, r5, pc}
 80170b8:	20001e74 	.word	0x20001e74

080170bc <_read_r>:
 80170bc:	b538      	push	{r3, r4, r5, lr}
 80170be:	4d07      	ldr	r5, [pc, #28]	@ (80170dc <_read_r+0x20>)
 80170c0:	4604      	mov	r4, r0
 80170c2:	4608      	mov	r0, r1
 80170c4:	4611      	mov	r1, r2
 80170c6:	2200      	movs	r2, #0
 80170c8:	602a      	str	r2, [r5, #0]
 80170ca:	461a      	mov	r2, r3
 80170cc:	f7f1 fd9d 	bl	8008c0a <_read>
 80170d0:	1c43      	adds	r3, r0, #1
 80170d2:	d102      	bne.n	80170da <_read_r+0x1e>
 80170d4:	682b      	ldr	r3, [r5, #0]
 80170d6:	b103      	cbz	r3, 80170da <_read_r+0x1e>
 80170d8:	6023      	str	r3, [r4, #0]
 80170da:	bd38      	pop	{r3, r4, r5, pc}
 80170dc:	20001e74 	.word	0x20001e74

080170e0 <_sbrk_r>:
 80170e0:	b538      	push	{r3, r4, r5, lr}
 80170e2:	4d06      	ldr	r5, [pc, #24]	@ (80170fc <_sbrk_r+0x1c>)
 80170e4:	2300      	movs	r3, #0
 80170e6:	4604      	mov	r4, r0
 80170e8:	4608      	mov	r0, r1
 80170ea:	602b      	str	r3, [r5, #0]
 80170ec:	f7f1 fdde 	bl	8008cac <_sbrk>
 80170f0:	1c43      	adds	r3, r0, #1
 80170f2:	d102      	bne.n	80170fa <_sbrk_r+0x1a>
 80170f4:	682b      	ldr	r3, [r5, #0]
 80170f6:	b103      	cbz	r3, 80170fa <_sbrk_r+0x1a>
 80170f8:	6023      	str	r3, [r4, #0]
 80170fa:	bd38      	pop	{r3, r4, r5, pc}
 80170fc:	20001e74 	.word	0x20001e74

08017100 <_write_r>:
 8017100:	b538      	push	{r3, r4, r5, lr}
 8017102:	4d07      	ldr	r5, [pc, #28]	@ (8017120 <_write_r+0x20>)
 8017104:	4604      	mov	r4, r0
 8017106:	4608      	mov	r0, r1
 8017108:	4611      	mov	r1, r2
 801710a:	2200      	movs	r2, #0
 801710c:	602a      	str	r2, [r5, #0]
 801710e:	461a      	mov	r2, r3
 8017110:	f7fb fcae 	bl	8012a70 <_write>
 8017114:	1c43      	adds	r3, r0, #1
 8017116:	d102      	bne.n	801711e <_write_r+0x1e>
 8017118:	682b      	ldr	r3, [r5, #0]
 801711a:	b103      	cbz	r3, 801711e <_write_r+0x1e>
 801711c:	6023      	str	r3, [r4, #0]
 801711e:	bd38      	pop	{r3, r4, r5, pc}
 8017120:	20001e74 	.word	0x20001e74

08017124 <__errno>:
 8017124:	4b01      	ldr	r3, [pc, #4]	@ (801712c <__errno+0x8>)
 8017126:	6818      	ldr	r0, [r3, #0]
 8017128:	4770      	bx	lr
 801712a:	bf00      	nop
 801712c:	200000c0 	.word	0x200000c0

08017130 <__libc_init_array>:
 8017130:	b570      	push	{r4, r5, r6, lr}
 8017132:	4d0d      	ldr	r5, [pc, #52]	@ (8017168 <__libc_init_array+0x38>)
 8017134:	4c0d      	ldr	r4, [pc, #52]	@ (801716c <__libc_init_array+0x3c>)
 8017136:	1b64      	subs	r4, r4, r5
 8017138:	10a4      	asrs	r4, r4, #2
 801713a:	2600      	movs	r6, #0
 801713c:	42a6      	cmp	r6, r4
 801713e:	d109      	bne.n	8017154 <__libc_init_array+0x24>
 8017140:	4d0b      	ldr	r5, [pc, #44]	@ (8017170 <__libc_init_array+0x40>)
 8017142:	4c0c      	ldr	r4, [pc, #48]	@ (8017174 <__libc_init_array+0x44>)
 8017144:	f000 fefc 	bl	8017f40 <_init>
 8017148:	1b64      	subs	r4, r4, r5
 801714a:	10a4      	asrs	r4, r4, #2
 801714c:	2600      	movs	r6, #0
 801714e:	42a6      	cmp	r6, r4
 8017150:	d105      	bne.n	801715e <__libc_init_array+0x2e>
 8017152:	bd70      	pop	{r4, r5, r6, pc}
 8017154:	f855 3b04 	ldr.w	r3, [r5], #4
 8017158:	4798      	blx	r3
 801715a:	3601      	adds	r6, #1
 801715c:	e7ee      	b.n	801713c <__libc_init_array+0xc>
 801715e:	f855 3b04 	ldr.w	r3, [r5], #4
 8017162:	4798      	blx	r3
 8017164:	3601      	adds	r6, #1
 8017166:	e7f2      	b.n	801714e <__libc_init_array+0x1e>
 8017168:	0801930c 	.word	0x0801930c
 801716c:	0801930c 	.word	0x0801930c
 8017170:	0801930c 	.word	0x0801930c
 8017174:	08019310 	.word	0x08019310

08017178 <__retarget_lock_init_recursive>:
 8017178:	4770      	bx	lr

0801717a <__retarget_lock_acquire_recursive>:
 801717a:	4770      	bx	lr

0801717c <__retarget_lock_release_recursive>:
 801717c:	4770      	bx	lr

0801717e <__aeabi_memcpy>:
 801717e:	f000 b800 	b.w	8017182 <memcpy>

08017182 <memcpy>:
 8017182:	440a      	add	r2, r1
 8017184:	4291      	cmp	r1, r2
 8017186:	f100 33ff 	add.w	r3, r0, #4294967295
 801718a:	d100      	bne.n	801718e <memcpy+0xc>
 801718c:	4770      	bx	lr
 801718e:	b510      	push	{r4, lr}
 8017190:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017194:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017198:	4291      	cmp	r1, r2
 801719a:	d1f9      	bne.n	8017190 <memcpy+0xe>
 801719c:	bd10      	pop	{r4, pc}

0801719e <abort>:
 801719e:	b508      	push	{r3, lr}
 80171a0:	2006      	movs	r0, #6
 80171a2:	f000 fdf7 	bl	8017d94 <raise>
 80171a6:	2001      	movs	r0, #1
 80171a8:	f7f1 fd24 	bl	8008bf4 <_exit>

080171ac <_free_r>:
 80171ac:	b538      	push	{r3, r4, r5, lr}
 80171ae:	4605      	mov	r5, r0
 80171b0:	2900      	cmp	r1, #0
 80171b2:	d041      	beq.n	8017238 <_free_r+0x8c>
 80171b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80171b8:	1f0c      	subs	r4, r1, #4
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	bfb8      	it	lt
 80171be:	18e4      	addlt	r4, r4, r3
 80171c0:	f7ff fd82 	bl	8016cc8 <__malloc_lock>
 80171c4:	4a1d      	ldr	r2, [pc, #116]	@ (801723c <_free_r+0x90>)
 80171c6:	6813      	ldr	r3, [r2, #0]
 80171c8:	b933      	cbnz	r3, 80171d8 <_free_r+0x2c>
 80171ca:	6063      	str	r3, [r4, #4]
 80171cc:	6014      	str	r4, [r2, #0]
 80171ce:	4628      	mov	r0, r5
 80171d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171d4:	f7ff bd7e 	b.w	8016cd4 <__malloc_unlock>
 80171d8:	42a3      	cmp	r3, r4
 80171da:	d908      	bls.n	80171ee <_free_r+0x42>
 80171dc:	6820      	ldr	r0, [r4, #0]
 80171de:	1821      	adds	r1, r4, r0
 80171e0:	428b      	cmp	r3, r1
 80171e2:	bf01      	itttt	eq
 80171e4:	6819      	ldreq	r1, [r3, #0]
 80171e6:	685b      	ldreq	r3, [r3, #4]
 80171e8:	1809      	addeq	r1, r1, r0
 80171ea:	6021      	streq	r1, [r4, #0]
 80171ec:	e7ed      	b.n	80171ca <_free_r+0x1e>
 80171ee:	461a      	mov	r2, r3
 80171f0:	685b      	ldr	r3, [r3, #4]
 80171f2:	b10b      	cbz	r3, 80171f8 <_free_r+0x4c>
 80171f4:	42a3      	cmp	r3, r4
 80171f6:	d9fa      	bls.n	80171ee <_free_r+0x42>
 80171f8:	6811      	ldr	r1, [r2, #0]
 80171fa:	1850      	adds	r0, r2, r1
 80171fc:	42a0      	cmp	r0, r4
 80171fe:	d10b      	bne.n	8017218 <_free_r+0x6c>
 8017200:	6820      	ldr	r0, [r4, #0]
 8017202:	4401      	add	r1, r0
 8017204:	1850      	adds	r0, r2, r1
 8017206:	4283      	cmp	r3, r0
 8017208:	6011      	str	r1, [r2, #0]
 801720a:	d1e0      	bne.n	80171ce <_free_r+0x22>
 801720c:	6818      	ldr	r0, [r3, #0]
 801720e:	685b      	ldr	r3, [r3, #4]
 8017210:	6053      	str	r3, [r2, #4]
 8017212:	4408      	add	r0, r1
 8017214:	6010      	str	r0, [r2, #0]
 8017216:	e7da      	b.n	80171ce <_free_r+0x22>
 8017218:	d902      	bls.n	8017220 <_free_r+0x74>
 801721a:	230c      	movs	r3, #12
 801721c:	602b      	str	r3, [r5, #0]
 801721e:	e7d6      	b.n	80171ce <_free_r+0x22>
 8017220:	6820      	ldr	r0, [r4, #0]
 8017222:	1821      	adds	r1, r4, r0
 8017224:	428b      	cmp	r3, r1
 8017226:	bf04      	itt	eq
 8017228:	6819      	ldreq	r1, [r3, #0]
 801722a:	685b      	ldreq	r3, [r3, #4]
 801722c:	6063      	str	r3, [r4, #4]
 801722e:	bf04      	itt	eq
 8017230:	1809      	addeq	r1, r1, r0
 8017232:	6021      	streq	r1, [r4, #0]
 8017234:	6054      	str	r4, [r2, #4]
 8017236:	e7ca      	b.n	80171ce <_free_r+0x22>
 8017238:	bd38      	pop	{r3, r4, r5, pc}
 801723a:	bf00      	nop
 801723c:	20001d34 	.word	0x20001d34

08017240 <__ssputs_r>:
 8017240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017244:	688e      	ldr	r6, [r1, #8]
 8017246:	461f      	mov	r7, r3
 8017248:	42be      	cmp	r6, r7
 801724a:	680b      	ldr	r3, [r1, #0]
 801724c:	4682      	mov	sl, r0
 801724e:	460c      	mov	r4, r1
 8017250:	4690      	mov	r8, r2
 8017252:	d82d      	bhi.n	80172b0 <__ssputs_r+0x70>
 8017254:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017258:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801725c:	d026      	beq.n	80172ac <__ssputs_r+0x6c>
 801725e:	6965      	ldr	r5, [r4, #20]
 8017260:	6909      	ldr	r1, [r1, #16]
 8017262:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017266:	eba3 0901 	sub.w	r9, r3, r1
 801726a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801726e:	1c7b      	adds	r3, r7, #1
 8017270:	444b      	add	r3, r9
 8017272:	106d      	asrs	r5, r5, #1
 8017274:	429d      	cmp	r5, r3
 8017276:	bf38      	it	cc
 8017278:	461d      	movcc	r5, r3
 801727a:	0553      	lsls	r3, r2, #21
 801727c:	d527      	bpl.n	80172ce <__ssputs_r+0x8e>
 801727e:	4629      	mov	r1, r5
 8017280:	f7ff fca2 	bl	8016bc8 <_malloc_r>
 8017284:	4606      	mov	r6, r0
 8017286:	b360      	cbz	r0, 80172e2 <__ssputs_r+0xa2>
 8017288:	6921      	ldr	r1, [r4, #16]
 801728a:	464a      	mov	r2, r9
 801728c:	f7ff ff79 	bl	8017182 <memcpy>
 8017290:	89a3      	ldrh	r3, [r4, #12]
 8017292:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801729a:	81a3      	strh	r3, [r4, #12]
 801729c:	6126      	str	r6, [r4, #16]
 801729e:	6165      	str	r5, [r4, #20]
 80172a0:	444e      	add	r6, r9
 80172a2:	eba5 0509 	sub.w	r5, r5, r9
 80172a6:	6026      	str	r6, [r4, #0]
 80172a8:	60a5      	str	r5, [r4, #8]
 80172aa:	463e      	mov	r6, r7
 80172ac:	42be      	cmp	r6, r7
 80172ae:	d900      	bls.n	80172b2 <__ssputs_r+0x72>
 80172b0:	463e      	mov	r6, r7
 80172b2:	6820      	ldr	r0, [r4, #0]
 80172b4:	4632      	mov	r2, r6
 80172b6:	4641      	mov	r1, r8
 80172b8:	f000 fd2a 	bl	8017d10 <memmove>
 80172bc:	68a3      	ldr	r3, [r4, #8]
 80172be:	1b9b      	subs	r3, r3, r6
 80172c0:	60a3      	str	r3, [r4, #8]
 80172c2:	6823      	ldr	r3, [r4, #0]
 80172c4:	4433      	add	r3, r6
 80172c6:	6023      	str	r3, [r4, #0]
 80172c8:	2000      	movs	r0, #0
 80172ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ce:	462a      	mov	r2, r5
 80172d0:	f000 fd7c 	bl	8017dcc <_realloc_r>
 80172d4:	4606      	mov	r6, r0
 80172d6:	2800      	cmp	r0, #0
 80172d8:	d1e0      	bne.n	801729c <__ssputs_r+0x5c>
 80172da:	6921      	ldr	r1, [r4, #16]
 80172dc:	4650      	mov	r0, sl
 80172de:	f7ff ff65 	bl	80171ac <_free_r>
 80172e2:	230c      	movs	r3, #12
 80172e4:	f8ca 3000 	str.w	r3, [sl]
 80172e8:	89a3      	ldrh	r3, [r4, #12]
 80172ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80172ee:	81a3      	strh	r3, [r4, #12]
 80172f0:	f04f 30ff 	mov.w	r0, #4294967295
 80172f4:	e7e9      	b.n	80172ca <__ssputs_r+0x8a>
	...

080172f8 <_svfiprintf_r>:
 80172f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172fc:	4698      	mov	r8, r3
 80172fe:	898b      	ldrh	r3, [r1, #12]
 8017300:	061b      	lsls	r3, r3, #24
 8017302:	b09d      	sub	sp, #116	@ 0x74
 8017304:	4607      	mov	r7, r0
 8017306:	460d      	mov	r5, r1
 8017308:	4614      	mov	r4, r2
 801730a:	d510      	bpl.n	801732e <_svfiprintf_r+0x36>
 801730c:	690b      	ldr	r3, [r1, #16]
 801730e:	b973      	cbnz	r3, 801732e <_svfiprintf_r+0x36>
 8017310:	2140      	movs	r1, #64	@ 0x40
 8017312:	f7ff fc59 	bl	8016bc8 <_malloc_r>
 8017316:	6028      	str	r0, [r5, #0]
 8017318:	6128      	str	r0, [r5, #16]
 801731a:	b930      	cbnz	r0, 801732a <_svfiprintf_r+0x32>
 801731c:	230c      	movs	r3, #12
 801731e:	603b      	str	r3, [r7, #0]
 8017320:	f04f 30ff 	mov.w	r0, #4294967295
 8017324:	b01d      	add	sp, #116	@ 0x74
 8017326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801732a:	2340      	movs	r3, #64	@ 0x40
 801732c:	616b      	str	r3, [r5, #20]
 801732e:	2300      	movs	r3, #0
 8017330:	9309      	str	r3, [sp, #36]	@ 0x24
 8017332:	2320      	movs	r3, #32
 8017334:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017338:	f8cd 800c 	str.w	r8, [sp, #12]
 801733c:	2330      	movs	r3, #48	@ 0x30
 801733e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80174dc <_svfiprintf_r+0x1e4>
 8017342:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017346:	f04f 0901 	mov.w	r9, #1
 801734a:	4623      	mov	r3, r4
 801734c:	469a      	mov	sl, r3
 801734e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017352:	b10a      	cbz	r2, 8017358 <_svfiprintf_r+0x60>
 8017354:	2a25      	cmp	r2, #37	@ 0x25
 8017356:	d1f9      	bne.n	801734c <_svfiprintf_r+0x54>
 8017358:	ebba 0b04 	subs.w	fp, sl, r4
 801735c:	d00b      	beq.n	8017376 <_svfiprintf_r+0x7e>
 801735e:	465b      	mov	r3, fp
 8017360:	4622      	mov	r2, r4
 8017362:	4629      	mov	r1, r5
 8017364:	4638      	mov	r0, r7
 8017366:	f7ff ff6b 	bl	8017240 <__ssputs_r>
 801736a:	3001      	adds	r0, #1
 801736c:	f000 80a7 	beq.w	80174be <_svfiprintf_r+0x1c6>
 8017370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017372:	445a      	add	r2, fp
 8017374:	9209      	str	r2, [sp, #36]	@ 0x24
 8017376:	f89a 3000 	ldrb.w	r3, [sl]
 801737a:	2b00      	cmp	r3, #0
 801737c:	f000 809f 	beq.w	80174be <_svfiprintf_r+0x1c6>
 8017380:	2300      	movs	r3, #0
 8017382:	f04f 32ff 	mov.w	r2, #4294967295
 8017386:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801738a:	f10a 0a01 	add.w	sl, sl, #1
 801738e:	9304      	str	r3, [sp, #16]
 8017390:	9307      	str	r3, [sp, #28]
 8017392:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017396:	931a      	str	r3, [sp, #104]	@ 0x68
 8017398:	4654      	mov	r4, sl
 801739a:	2205      	movs	r2, #5
 801739c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80173a0:	484e      	ldr	r0, [pc, #312]	@ (80174dc <_svfiprintf_r+0x1e4>)
 80173a2:	f7ee fcc5 	bl	8005d30 <memchr>
 80173a6:	9a04      	ldr	r2, [sp, #16]
 80173a8:	b9d8      	cbnz	r0, 80173e2 <_svfiprintf_r+0xea>
 80173aa:	06d0      	lsls	r0, r2, #27
 80173ac:	bf44      	itt	mi
 80173ae:	2320      	movmi	r3, #32
 80173b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173b4:	0711      	lsls	r1, r2, #28
 80173b6:	bf44      	itt	mi
 80173b8:	232b      	movmi	r3, #43	@ 0x2b
 80173ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80173be:	f89a 3000 	ldrb.w	r3, [sl]
 80173c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80173c4:	d015      	beq.n	80173f2 <_svfiprintf_r+0xfa>
 80173c6:	9a07      	ldr	r2, [sp, #28]
 80173c8:	4654      	mov	r4, sl
 80173ca:	2000      	movs	r0, #0
 80173cc:	f04f 0c0a 	mov.w	ip, #10
 80173d0:	4621      	mov	r1, r4
 80173d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80173d6:	3b30      	subs	r3, #48	@ 0x30
 80173d8:	2b09      	cmp	r3, #9
 80173da:	d94b      	bls.n	8017474 <_svfiprintf_r+0x17c>
 80173dc:	b1b0      	cbz	r0, 801740c <_svfiprintf_r+0x114>
 80173de:	9207      	str	r2, [sp, #28]
 80173e0:	e014      	b.n	801740c <_svfiprintf_r+0x114>
 80173e2:	eba0 0308 	sub.w	r3, r0, r8
 80173e6:	fa09 f303 	lsl.w	r3, r9, r3
 80173ea:	4313      	orrs	r3, r2
 80173ec:	9304      	str	r3, [sp, #16]
 80173ee:	46a2      	mov	sl, r4
 80173f0:	e7d2      	b.n	8017398 <_svfiprintf_r+0xa0>
 80173f2:	9b03      	ldr	r3, [sp, #12]
 80173f4:	1d19      	adds	r1, r3, #4
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	9103      	str	r1, [sp, #12]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	bfbb      	ittet	lt
 80173fe:	425b      	neglt	r3, r3
 8017400:	f042 0202 	orrlt.w	r2, r2, #2
 8017404:	9307      	strge	r3, [sp, #28]
 8017406:	9307      	strlt	r3, [sp, #28]
 8017408:	bfb8      	it	lt
 801740a:	9204      	strlt	r2, [sp, #16]
 801740c:	7823      	ldrb	r3, [r4, #0]
 801740e:	2b2e      	cmp	r3, #46	@ 0x2e
 8017410:	d10a      	bne.n	8017428 <_svfiprintf_r+0x130>
 8017412:	7863      	ldrb	r3, [r4, #1]
 8017414:	2b2a      	cmp	r3, #42	@ 0x2a
 8017416:	d132      	bne.n	801747e <_svfiprintf_r+0x186>
 8017418:	9b03      	ldr	r3, [sp, #12]
 801741a:	1d1a      	adds	r2, r3, #4
 801741c:	681b      	ldr	r3, [r3, #0]
 801741e:	9203      	str	r2, [sp, #12]
 8017420:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017424:	3402      	adds	r4, #2
 8017426:	9305      	str	r3, [sp, #20]
 8017428:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80174ec <_svfiprintf_r+0x1f4>
 801742c:	7821      	ldrb	r1, [r4, #0]
 801742e:	2203      	movs	r2, #3
 8017430:	4650      	mov	r0, sl
 8017432:	f7ee fc7d 	bl	8005d30 <memchr>
 8017436:	b138      	cbz	r0, 8017448 <_svfiprintf_r+0x150>
 8017438:	9b04      	ldr	r3, [sp, #16]
 801743a:	eba0 000a 	sub.w	r0, r0, sl
 801743e:	2240      	movs	r2, #64	@ 0x40
 8017440:	4082      	lsls	r2, r0
 8017442:	4313      	orrs	r3, r2
 8017444:	3401      	adds	r4, #1
 8017446:	9304      	str	r3, [sp, #16]
 8017448:	f814 1b01 	ldrb.w	r1, [r4], #1
 801744c:	4824      	ldr	r0, [pc, #144]	@ (80174e0 <_svfiprintf_r+0x1e8>)
 801744e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8017452:	2206      	movs	r2, #6
 8017454:	f7ee fc6c 	bl	8005d30 <memchr>
 8017458:	2800      	cmp	r0, #0
 801745a:	d036      	beq.n	80174ca <_svfiprintf_r+0x1d2>
 801745c:	4b21      	ldr	r3, [pc, #132]	@ (80174e4 <_svfiprintf_r+0x1ec>)
 801745e:	bb1b      	cbnz	r3, 80174a8 <_svfiprintf_r+0x1b0>
 8017460:	9b03      	ldr	r3, [sp, #12]
 8017462:	3307      	adds	r3, #7
 8017464:	f023 0307 	bic.w	r3, r3, #7
 8017468:	3308      	adds	r3, #8
 801746a:	9303      	str	r3, [sp, #12]
 801746c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801746e:	4433      	add	r3, r6
 8017470:	9309      	str	r3, [sp, #36]	@ 0x24
 8017472:	e76a      	b.n	801734a <_svfiprintf_r+0x52>
 8017474:	fb0c 3202 	mla	r2, ip, r2, r3
 8017478:	460c      	mov	r4, r1
 801747a:	2001      	movs	r0, #1
 801747c:	e7a8      	b.n	80173d0 <_svfiprintf_r+0xd8>
 801747e:	2300      	movs	r3, #0
 8017480:	3401      	adds	r4, #1
 8017482:	9305      	str	r3, [sp, #20]
 8017484:	4619      	mov	r1, r3
 8017486:	f04f 0c0a 	mov.w	ip, #10
 801748a:	4620      	mov	r0, r4
 801748c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017490:	3a30      	subs	r2, #48	@ 0x30
 8017492:	2a09      	cmp	r2, #9
 8017494:	d903      	bls.n	801749e <_svfiprintf_r+0x1a6>
 8017496:	2b00      	cmp	r3, #0
 8017498:	d0c6      	beq.n	8017428 <_svfiprintf_r+0x130>
 801749a:	9105      	str	r1, [sp, #20]
 801749c:	e7c4      	b.n	8017428 <_svfiprintf_r+0x130>
 801749e:	fb0c 2101 	mla	r1, ip, r1, r2
 80174a2:	4604      	mov	r4, r0
 80174a4:	2301      	movs	r3, #1
 80174a6:	e7f0      	b.n	801748a <_svfiprintf_r+0x192>
 80174a8:	ab03      	add	r3, sp, #12
 80174aa:	9300      	str	r3, [sp, #0]
 80174ac:	462a      	mov	r2, r5
 80174ae:	4b0e      	ldr	r3, [pc, #56]	@ (80174e8 <_svfiprintf_r+0x1f0>)
 80174b0:	a904      	add	r1, sp, #16
 80174b2:	4638      	mov	r0, r7
 80174b4:	f3af 8000 	nop.w
 80174b8:	1c42      	adds	r2, r0, #1
 80174ba:	4606      	mov	r6, r0
 80174bc:	d1d6      	bne.n	801746c <_svfiprintf_r+0x174>
 80174be:	89ab      	ldrh	r3, [r5, #12]
 80174c0:	065b      	lsls	r3, r3, #25
 80174c2:	f53f af2d 	bmi.w	8017320 <_svfiprintf_r+0x28>
 80174c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80174c8:	e72c      	b.n	8017324 <_svfiprintf_r+0x2c>
 80174ca:	ab03      	add	r3, sp, #12
 80174cc:	9300      	str	r3, [sp, #0]
 80174ce:	462a      	mov	r2, r5
 80174d0:	4b05      	ldr	r3, [pc, #20]	@ (80174e8 <_svfiprintf_r+0x1f0>)
 80174d2:	a904      	add	r1, sp, #16
 80174d4:	4638      	mov	r0, r7
 80174d6:	f000 f9bb 	bl	8017850 <_printf_i>
 80174da:	e7ed      	b.n	80174b8 <_svfiprintf_r+0x1c0>
 80174dc:	080192d0 	.word	0x080192d0
 80174e0:	080192da 	.word	0x080192da
 80174e4:	00000000 	.word	0x00000000
 80174e8:	08017241 	.word	0x08017241
 80174ec:	080192d6 	.word	0x080192d6

080174f0 <__sfputc_r>:
 80174f0:	6893      	ldr	r3, [r2, #8]
 80174f2:	3b01      	subs	r3, #1
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	b410      	push	{r4}
 80174f8:	6093      	str	r3, [r2, #8]
 80174fa:	da08      	bge.n	801750e <__sfputc_r+0x1e>
 80174fc:	6994      	ldr	r4, [r2, #24]
 80174fe:	42a3      	cmp	r3, r4
 8017500:	db01      	blt.n	8017506 <__sfputc_r+0x16>
 8017502:	290a      	cmp	r1, #10
 8017504:	d103      	bne.n	801750e <__sfputc_r+0x1e>
 8017506:	f85d 4b04 	ldr.w	r4, [sp], #4
 801750a:	f000 bb6d 	b.w	8017be8 <__swbuf_r>
 801750e:	6813      	ldr	r3, [r2, #0]
 8017510:	1c58      	adds	r0, r3, #1
 8017512:	6010      	str	r0, [r2, #0]
 8017514:	7019      	strb	r1, [r3, #0]
 8017516:	4608      	mov	r0, r1
 8017518:	f85d 4b04 	ldr.w	r4, [sp], #4
 801751c:	4770      	bx	lr

0801751e <__sfputs_r>:
 801751e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017520:	4606      	mov	r6, r0
 8017522:	460f      	mov	r7, r1
 8017524:	4614      	mov	r4, r2
 8017526:	18d5      	adds	r5, r2, r3
 8017528:	42ac      	cmp	r4, r5
 801752a:	d101      	bne.n	8017530 <__sfputs_r+0x12>
 801752c:	2000      	movs	r0, #0
 801752e:	e007      	b.n	8017540 <__sfputs_r+0x22>
 8017530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017534:	463a      	mov	r2, r7
 8017536:	4630      	mov	r0, r6
 8017538:	f7ff ffda 	bl	80174f0 <__sfputc_r>
 801753c:	1c43      	adds	r3, r0, #1
 801753e:	d1f3      	bne.n	8017528 <__sfputs_r+0xa>
 8017540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017544 <_vfiprintf_r>:
 8017544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017548:	460d      	mov	r5, r1
 801754a:	b09d      	sub	sp, #116	@ 0x74
 801754c:	4614      	mov	r4, r2
 801754e:	4698      	mov	r8, r3
 8017550:	4606      	mov	r6, r0
 8017552:	b118      	cbz	r0, 801755c <_vfiprintf_r+0x18>
 8017554:	6a03      	ldr	r3, [r0, #32]
 8017556:	b90b      	cbnz	r3, 801755c <_vfiprintf_r+0x18>
 8017558:	f7ff fc4e 	bl	8016df8 <__sinit>
 801755c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801755e:	07d9      	lsls	r1, r3, #31
 8017560:	d405      	bmi.n	801756e <_vfiprintf_r+0x2a>
 8017562:	89ab      	ldrh	r3, [r5, #12]
 8017564:	059a      	lsls	r2, r3, #22
 8017566:	d402      	bmi.n	801756e <_vfiprintf_r+0x2a>
 8017568:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801756a:	f7ff fe06 	bl	801717a <__retarget_lock_acquire_recursive>
 801756e:	89ab      	ldrh	r3, [r5, #12]
 8017570:	071b      	lsls	r3, r3, #28
 8017572:	d501      	bpl.n	8017578 <_vfiprintf_r+0x34>
 8017574:	692b      	ldr	r3, [r5, #16]
 8017576:	b99b      	cbnz	r3, 80175a0 <_vfiprintf_r+0x5c>
 8017578:	4629      	mov	r1, r5
 801757a:	4630      	mov	r0, r6
 801757c:	f000 fb72 	bl	8017c64 <__swsetup_r>
 8017580:	b170      	cbz	r0, 80175a0 <_vfiprintf_r+0x5c>
 8017582:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017584:	07dc      	lsls	r4, r3, #31
 8017586:	d504      	bpl.n	8017592 <_vfiprintf_r+0x4e>
 8017588:	f04f 30ff 	mov.w	r0, #4294967295
 801758c:	b01d      	add	sp, #116	@ 0x74
 801758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017592:	89ab      	ldrh	r3, [r5, #12]
 8017594:	0598      	lsls	r0, r3, #22
 8017596:	d4f7      	bmi.n	8017588 <_vfiprintf_r+0x44>
 8017598:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801759a:	f7ff fdef 	bl	801717c <__retarget_lock_release_recursive>
 801759e:	e7f3      	b.n	8017588 <_vfiprintf_r+0x44>
 80175a0:	2300      	movs	r3, #0
 80175a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80175a4:	2320      	movs	r3, #32
 80175a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80175aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80175ae:	2330      	movs	r3, #48	@ 0x30
 80175b0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8017760 <_vfiprintf_r+0x21c>
 80175b4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80175b8:	f04f 0901 	mov.w	r9, #1
 80175bc:	4623      	mov	r3, r4
 80175be:	469a      	mov	sl, r3
 80175c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80175c4:	b10a      	cbz	r2, 80175ca <_vfiprintf_r+0x86>
 80175c6:	2a25      	cmp	r2, #37	@ 0x25
 80175c8:	d1f9      	bne.n	80175be <_vfiprintf_r+0x7a>
 80175ca:	ebba 0b04 	subs.w	fp, sl, r4
 80175ce:	d00b      	beq.n	80175e8 <_vfiprintf_r+0xa4>
 80175d0:	465b      	mov	r3, fp
 80175d2:	4622      	mov	r2, r4
 80175d4:	4629      	mov	r1, r5
 80175d6:	4630      	mov	r0, r6
 80175d8:	f7ff ffa1 	bl	801751e <__sfputs_r>
 80175dc:	3001      	adds	r0, #1
 80175de:	f000 80a7 	beq.w	8017730 <_vfiprintf_r+0x1ec>
 80175e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80175e4:	445a      	add	r2, fp
 80175e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80175e8:	f89a 3000 	ldrb.w	r3, [sl]
 80175ec:	2b00      	cmp	r3, #0
 80175ee:	f000 809f 	beq.w	8017730 <_vfiprintf_r+0x1ec>
 80175f2:	2300      	movs	r3, #0
 80175f4:	f04f 32ff 	mov.w	r2, #4294967295
 80175f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80175fc:	f10a 0a01 	add.w	sl, sl, #1
 8017600:	9304      	str	r3, [sp, #16]
 8017602:	9307      	str	r3, [sp, #28]
 8017604:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017608:	931a      	str	r3, [sp, #104]	@ 0x68
 801760a:	4654      	mov	r4, sl
 801760c:	2205      	movs	r2, #5
 801760e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017612:	4853      	ldr	r0, [pc, #332]	@ (8017760 <_vfiprintf_r+0x21c>)
 8017614:	f7ee fb8c 	bl	8005d30 <memchr>
 8017618:	9a04      	ldr	r2, [sp, #16]
 801761a:	b9d8      	cbnz	r0, 8017654 <_vfiprintf_r+0x110>
 801761c:	06d1      	lsls	r1, r2, #27
 801761e:	bf44      	itt	mi
 8017620:	2320      	movmi	r3, #32
 8017622:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017626:	0713      	lsls	r3, r2, #28
 8017628:	bf44      	itt	mi
 801762a:	232b      	movmi	r3, #43	@ 0x2b
 801762c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017630:	f89a 3000 	ldrb.w	r3, [sl]
 8017634:	2b2a      	cmp	r3, #42	@ 0x2a
 8017636:	d015      	beq.n	8017664 <_vfiprintf_r+0x120>
 8017638:	9a07      	ldr	r2, [sp, #28]
 801763a:	4654      	mov	r4, sl
 801763c:	2000      	movs	r0, #0
 801763e:	f04f 0c0a 	mov.w	ip, #10
 8017642:	4621      	mov	r1, r4
 8017644:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017648:	3b30      	subs	r3, #48	@ 0x30
 801764a:	2b09      	cmp	r3, #9
 801764c:	d94b      	bls.n	80176e6 <_vfiprintf_r+0x1a2>
 801764e:	b1b0      	cbz	r0, 801767e <_vfiprintf_r+0x13a>
 8017650:	9207      	str	r2, [sp, #28]
 8017652:	e014      	b.n	801767e <_vfiprintf_r+0x13a>
 8017654:	eba0 0308 	sub.w	r3, r0, r8
 8017658:	fa09 f303 	lsl.w	r3, r9, r3
 801765c:	4313      	orrs	r3, r2
 801765e:	9304      	str	r3, [sp, #16]
 8017660:	46a2      	mov	sl, r4
 8017662:	e7d2      	b.n	801760a <_vfiprintf_r+0xc6>
 8017664:	9b03      	ldr	r3, [sp, #12]
 8017666:	1d19      	adds	r1, r3, #4
 8017668:	681b      	ldr	r3, [r3, #0]
 801766a:	9103      	str	r1, [sp, #12]
 801766c:	2b00      	cmp	r3, #0
 801766e:	bfbb      	ittet	lt
 8017670:	425b      	neglt	r3, r3
 8017672:	f042 0202 	orrlt.w	r2, r2, #2
 8017676:	9307      	strge	r3, [sp, #28]
 8017678:	9307      	strlt	r3, [sp, #28]
 801767a:	bfb8      	it	lt
 801767c:	9204      	strlt	r2, [sp, #16]
 801767e:	7823      	ldrb	r3, [r4, #0]
 8017680:	2b2e      	cmp	r3, #46	@ 0x2e
 8017682:	d10a      	bne.n	801769a <_vfiprintf_r+0x156>
 8017684:	7863      	ldrb	r3, [r4, #1]
 8017686:	2b2a      	cmp	r3, #42	@ 0x2a
 8017688:	d132      	bne.n	80176f0 <_vfiprintf_r+0x1ac>
 801768a:	9b03      	ldr	r3, [sp, #12]
 801768c:	1d1a      	adds	r2, r3, #4
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	9203      	str	r2, [sp, #12]
 8017692:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8017696:	3402      	adds	r4, #2
 8017698:	9305      	str	r3, [sp, #20]
 801769a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8017770 <_vfiprintf_r+0x22c>
 801769e:	7821      	ldrb	r1, [r4, #0]
 80176a0:	2203      	movs	r2, #3
 80176a2:	4650      	mov	r0, sl
 80176a4:	f7ee fb44 	bl	8005d30 <memchr>
 80176a8:	b138      	cbz	r0, 80176ba <_vfiprintf_r+0x176>
 80176aa:	9b04      	ldr	r3, [sp, #16]
 80176ac:	eba0 000a 	sub.w	r0, r0, sl
 80176b0:	2240      	movs	r2, #64	@ 0x40
 80176b2:	4082      	lsls	r2, r0
 80176b4:	4313      	orrs	r3, r2
 80176b6:	3401      	adds	r4, #1
 80176b8:	9304      	str	r3, [sp, #16]
 80176ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176be:	4829      	ldr	r0, [pc, #164]	@ (8017764 <_vfiprintf_r+0x220>)
 80176c0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80176c4:	2206      	movs	r2, #6
 80176c6:	f7ee fb33 	bl	8005d30 <memchr>
 80176ca:	2800      	cmp	r0, #0
 80176cc:	d03f      	beq.n	801774e <_vfiprintf_r+0x20a>
 80176ce:	4b26      	ldr	r3, [pc, #152]	@ (8017768 <_vfiprintf_r+0x224>)
 80176d0:	bb1b      	cbnz	r3, 801771a <_vfiprintf_r+0x1d6>
 80176d2:	9b03      	ldr	r3, [sp, #12]
 80176d4:	3307      	adds	r3, #7
 80176d6:	f023 0307 	bic.w	r3, r3, #7
 80176da:	3308      	adds	r3, #8
 80176dc:	9303      	str	r3, [sp, #12]
 80176de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176e0:	443b      	add	r3, r7
 80176e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80176e4:	e76a      	b.n	80175bc <_vfiprintf_r+0x78>
 80176e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80176ea:	460c      	mov	r4, r1
 80176ec:	2001      	movs	r0, #1
 80176ee:	e7a8      	b.n	8017642 <_vfiprintf_r+0xfe>
 80176f0:	2300      	movs	r3, #0
 80176f2:	3401      	adds	r4, #1
 80176f4:	9305      	str	r3, [sp, #20]
 80176f6:	4619      	mov	r1, r3
 80176f8:	f04f 0c0a 	mov.w	ip, #10
 80176fc:	4620      	mov	r0, r4
 80176fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017702:	3a30      	subs	r2, #48	@ 0x30
 8017704:	2a09      	cmp	r2, #9
 8017706:	d903      	bls.n	8017710 <_vfiprintf_r+0x1cc>
 8017708:	2b00      	cmp	r3, #0
 801770a:	d0c6      	beq.n	801769a <_vfiprintf_r+0x156>
 801770c:	9105      	str	r1, [sp, #20]
 801770e:	e7c4      	b.n	801769a <_vfiprintf_r+0x156>
 8017710:	fb0c 2101 	mla	r1, ip, r1, r2
 8017714:	4604      	mov	r4, r0
 8017716:	2301      	movs	r3, #1
 8017718:	e7f0      	b.n	80176fc <_vfiprintf_r+0x1b8>
 801771a:	ab03      	add	r3, sp, #12
 801771c:	9300      	str	r3, [sp, #0]
 801771e:	462a      	mov	r2, r5
 8017720:	4b12      	ldr	r3, [pc, #72]	@ (801776c <_vfiprintf_r+0x228>)
 8017722:	a904      	add	r1, sp, #16
 8017724:	4630      	mov	r0, r6
 8017726:	f3af 8000 	nop.w
 801772a:	4607      	mov	r7, r0
 801772c:	1c78      	adds	r0, r7, #1
 801772e:	d1d6      	bne.n	80176de <_vfiprintf_r+0x19a>
 8017730:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8017732:	07d9      	lsls	r1, r3, #31
 8017734:	d405      	bmi.n	8017742 <_vfiprintf_r+0x1fe>
 8017736:	89ab      	ldrh	r3, [r5, #12]
 8017738:	059a      	lsls	r2, r3, #22
 801773a:	d402      	bmi.n	8017742 <_vfiprintf_r+0x1fe>
 801773c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801773e:	f7ff fd1d 	bl	801717c <__retarget_lock_release_recursive>
 8017742:	89ab      	ldrh	r3, [r5, #12]
 8017744:	065b      	lsls	r3, r3, #25
 8017746:	f53f af1f 	bmi.w	8017588 <_vfiprintf_r+0x44>
 801774a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801774c:	e71e      	b.n	801758c <_vfiprintf_r+0x48>
 801774e:	ab03      	add	r3, sp, #12
 8017750:	9300      	str	r3, [sp, #0]
 8017752:	462a      	mov	r2, r5
 8017754:	4b05      	ldr	r3, [pc, #20]	@ (801776c <_vfiprintf_r+0x228>)
 8017756:	a904      	add	r1, sp, #16
 8017758:	4630      	mov	r0, r6
 801775a:	f000 f879 	bl	8017850 <_printf_i>
 801775e:	e7e4      	b.n	801772a <_vfiprintf_r+0x1e6>
 8017760:	080192d0 	.word	0x080192d0
 8017764:	080192da 	.word	0x080192da
 8017768:	00000000 	.word	0x00000000
 801776c:	0801751f 	.word	0x0801751f
 8017770:	080192d6 	.word	0x080192d6

08017774 <_printf_common>:
 8017774:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017778:	4616      	mov	r6, r2
 801777a:	4698      	mov	r8, r3
 801777c:	688a      	ldr	r2, [r1, #8]
 801777e:	690b      	ldr	r3, [r1, #16]
 8017780:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8017784:	4293      	cmp	r3, r2
 8017786:	bfb8      	it	lt
 8017788:	4613      	movlt	r3, r2
 801778a:	6033      	str	r3, [r6, #0]
 801778c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8017790:	4607      	mov	r7, r0
 8017792:	460c      	mov	r4, r1
 8017794:	b10a      	cbz	r2, 801779a <_printf_common+0x26>
 8017796:	3301      	adds	r3, #1
 8017798:	6033      	str	r3, [r6, #0]
 801779a:	6823      	ldr	r3, [r4, #0]
 801779c:	0699      	lsls	r1, r3, #26
 801779e:	bf42      	ittt	mi
 80177a0:	6833      	ldrmi	r3, [r6, #0]
 80177a2:	3302      	addmi	r3, #2
 80177a4:	6033      	strmi	r3, [r6, #0]
 80177a6:	6825      	ldr	r5, [r4, #0]
 80177a8:	f015 0506 	ands.w	r5, r5, #6
 80177ac:	d106      	bne.n	80177bc <_printf_common+0x48>
 80177ae:	f104 0a19 	add.w	sl, r4, #25
 80177b2:	68e3      	ldr	r3, [r4, #12]
 80177b4:	6832      	ldr	r2, [r6, #0]
 80177b6:	1a9b      	subs	r3, r3, r2
 80177b8:	42ab      	cmp	r3, r5
 80177ba:	dc26      	bgt.n	801780a <_printf_common+0x96>
 80177bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80177c0:	6822      	ldr	r2, [r4, #0]
 80177c2:	3b00      	subs	r3, #0
 80177c4:	bf18      	it	ne
 80177c6:	2301      	movne	r3, #1
 80177c8:	0692      	lsls	r2, r2, #26
 80177ca:	d42b      	bmi.n	8017824 <_printf_common+0xb0>
 80177cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80177d0:	4641      	mov	r1, r8
 80177d2:	4638      	mov	r0, r7
 80177d4:	47c8      	blx	r9
 80177d6:	3001      	adds	r0, #1
 80177d8:	d01e      	beq.n	8017818 <_printf_common+0xa4>
 80177da:	6823      	ldr	r3, [r4, #0]
 80177dc:	6922      	ldr	r2, [r4, #16]
 80177de:	f003 0306 	and.w	r3, r3, #6
 80177e2:	2b04      	cmp	r3, #4
 80177e4:	bf02      	ittt	eq
 80177e6:	68e5      	ldreq	r5, [r4, #12]
 80177e8:	6833      	ldreq	r3, [r6, #0]
 80177ea:	1aed      	subeq	r5, r5, r3
 80177ec:	68a3      	ldr	r3, [r4, #8]
 80177ee:	bf0c      	ite	eq
 80177f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80177f4:	2500      	movne	r5, #0
 80177f6:	4293      	cmp	r3, r2
 80177f8:	bfc4      	itt	gt
 80177fa:	1a9b      	subgt	r3, r3, r2
 80177fc:	18ed      	addgt	r5, r5, r3
 80177fe:	2600      	movs	r6, #0
 8017800:	341a      	adds	r4, #26
 8017802:	42b5      	cmp	r5, r6
 8017804:	d11a      	bne.n	801783c <_printf_common+0xc8>
 8017806:	2000      	movs	r0, #0
 8017808:	e008      	b.n	801781c <_printf_common+0xa8>
 801780a:	2301      	movs	r3, #1
 801780c:	4652      	mov	r2, sl
 801780e:	4641      	mov	r1, r8
 8017810:	4638      	mov	r0, r7
 8017812:	47c8      	blx	r9
 8017814:	3001      	adds	r0, #1
 8017816:	d103      	bne.n	8017820 <_printf_common+0xac>
 8017818:	f04f 30ff 	mov.w	r0, #4294967295
 801781c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017820:	3501      	adds	r5, #1
 8017822:	e7c6      	b.n	80177b2 <_printf_common+0x3e>
 8017824:	18e1      	adds	r1, r4, r3
 8017826:	1c5a      	adds	r2, r3, #1
 8017828:	2030      	movs	r0, #48	@ 0x30
 801782a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801782e:	4422      	add	r2, r4
 8017830:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8017834:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8017838:	3302      	adds	r3, #2
 801783a:	e7c7      	b.n	80177cc <_printf_common+0x58>
 801783c:	2301      	movs	r3, #1
 801783e:	4622      	mov	r2, r4
 8017840:	4641      	mov	r1, r8
 8017842:	4638      	mov	r0, r7
 8017844:	47c8      	blx	r9
 8017846:	3001      	adds	r0, #1
 8017848:	d0e6      	beq.n	8017818 <_printf_common+0xa4>
 801784a:	3601      	adds	r6, #1
 801784c:	e7d9      	b.n	8017802 <_printf_common+0x8e>
	...

08017850 <_printf_i>:
 8017850:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017854:	7e0f      	ldrb	r7, [r1, #24]
 8017856:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8017858:	2f78      	cmp	r7, #120	@ 0x78
 801785a:	4691      	mov	r9, r2
 801785c:	4680      	mov	r8, r0
 801785e:	460c      	mov	r4, r1
 8017860:	469a      	mov	sl, r3
 8017862:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8017866:	d807      	bhi.n	8017878 <_printf_i+0x28>
 8017868:	2f62      	cmp	r7, #98	@ 0x62
 801786a:	d80a      	bhi.n	8017882 <_printf_i+0x32>
 801786c:	2f00      	cmp	r7, #0
 801786e:	f000 80d2 	beq.w	8017a16 <_printf_i+0x1c6>
 8017872:	2f58      	cmp	r7, #88	@ 0x58
 8017874:	f000 80b9 	beq.w	80179ea <_printf_i+0x19a>
 8017878:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801787c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8017880:	e03a      	b.n	80178f8 <_printf_i+0xa8>
 8017882:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8017886:	2b15      	cmp	r3, #21
 8017888:	d8f6      	bhi.n	8017878 <_printf_i+0x28>
 801788a:	a101      	add	r1, pc, #4	@ (adr r1, 8017890 <_printf_i+0x40>)
 801788c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017890:	080178e9 	.word	0x080178e9
 8017894:	080178fd 	.word	0x080178fd
 8017898:	08017879 	.word	0x08017879
 801789c:	08017879 	.word	0x08017879
 80178a0:	08017879 	.word	0x08017879
 80178a4:	08017879 	.word	0x08017879
 80178a8:	080178fd 	.word	0x080178fd
 80178ac:	08017879 	.word	0x08017879
 80178b0:	08017879 	.word	0x08017879
 80178b4:	08017879 	.word	0x08017879
 80178b8:	08017879 	.word	0x08017879
 80178bc:	080179fd 	.word	0x080179fd
 80178c0:	08017927 	.word	0x08017927
 80178c4:	080179b7 	.word	0x080179b7
 80178c8:	08017879 	.word	0x08017879
 80178cc:	08017879 	.word	0x08017879
 80178d0:	08017a1f 	.word	0x08017a1f
 80178d4:	08017879 	.word	0x08017879
 80178d8:	08017927 	.word	0x08017927
 80178dc:	08017879 	.word	0x08017879
 80178e0:	08017879 	.word	0x08017879
 80178e4:	080179bf 	.word	0x080179bf
 80178e8:	6833      	ldr	r3, [r6, #0]
 80178ea:	1d1a      	adds	r2, r3, #4
 80178ec:	681b      	ldr	r3, [r3, #0]
 80178ee:	6032      	str	r2, [r6, #0]
 80178f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80178f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80178f8:	2301      	movs	r3, #1
 80178fa:	e09d      	b.n	8017a38 <_printf_i+0x1e8>
 80178fc:	6833      	ldr	r3, [r6, #0]
 80178fe:	6820      	ldr	r0, [r4, #0]
 8017900:	1d19      	adds	r1, r3, #4
 8017902:	6031      	str	r1, [r6, #0]
 8017904:	0606      	lsls	r6, r0, #24
 8017906:	d501      	bpl.n	801790c <_printf_i+0xbc>
 8017908:	681d      	ldr	r5, [r3, #0]
 801790a:	e003      	b.n	8017914 <_printf_i+0xc4>
 801790c:	0645      	lsls	r5, r0, #25
 801790e:	d5fb      	bpl.n	8017908 <_printf_i+0xb8>
 8017910:	f9b3 5000 	ldrsh.w	r5, [r3]
 8017914:	2d00      	cmp	r5, #0
 8017916:	da03      	bge.n	8017920 <_printf_i+0xd0>
 8017918:	232d      	movs	r3, #45	@ 0x2d
 801791a:	426d      	negs	r5, r5
 801791c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017920:	4859      	ldr	r0, [pc, #356]	@ (8017a88 <_printf_i+0x238>)
 8017922:	230a      	movs	r3, #10
 8017924:	e011      	b.n	801794a <_printf_i+0xfa>
 8017926:	6821      	ldr	r1, [r4, #0]
 8017928:	6833      	ldr	r3, [r6, #0]
 801792a:	0608      	lsls	r0, r1, #24
 801792c:	f853 5b04 	ldr.w	r5, [r3], #4
 8017930:	d402      	bmi.n	8017938 <_printf_i+0xe8>
 8017932:	0649      	lsls	r1, r1, #25
 8017934:	bf48      	it	mi
 8017936:	b2ad      	uxthmi	r5, r5
 8017938:	2f6f      	cmp	r7, #111	@ 0x6f
 801793a:	4853      	ldr	r0, [pc, #332]	@ (8017a88 <_printf_i+0x238>)
 801793c:	6033      	str	r3, [r6, #0]
 801793e:	bf14      	ite	ne
 8017940:	230a      	movne	r3, #10
 8017942:	2308      	moveq	r3, #8
 8017944:	2100      	movs	r1, #0
 8017946:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801794a:	6866      	ldr	r6, [r4, #4]
 801794c:	60a6      	str	r6, [r4, #8]
 801794e:	2e00      	cmp	r6, #0
 8017950:	bfa2      	ittt	ge
 8017952:	6821      	ldrge	r1, [r4, #0]
 8017954:	f021 0104 	bicge.w	r1, r1, #4
 8017958:	6021      	strge	r1, [r4, #0]
 801795a:	b90d      	cbnz	r5, 8017960 <_printf_i+0x110>
 801795c:	2e00      	cmp	r6, #0
 801795e:	d04b      	beq.n	80179f8 <_printf_i+0x1a8>
 8017960:	4616      	mov	r6, r2
 8017962:	fbb5 f1f3 	udiv	r1, r5, r3
 8017966:	fb03 5711 	mls	r7, r3, r1, r5
 801796a:	5dc7      	ldrb	r7, [r0, r7]
 801796c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017970:	462f      	mov	r7, r5
 8017972:	42bb      	cmp	r3, r7
 8017974:	460d      	mov	r5, r1
 8017976:	d9f4      	bls.n	8017962 <_printf_i+0x112>
 8017978:	2b08      	cmp	r3, #8
 801797a:	d10b      	bne.n	8017994 <_printf_i+0x144>
 801797c:	6823      	ldr	r3, [r4, #0]
 801797e:	07df      	lsls	r7, r3, #31
 8017980:	d508      	bpl.n	8017994 <_printf_i+0x144>
 8017982:	6923      	ldr	r3, [r4, #16]
 8017984:	6861      	ldr	r1, [r4, #4]
 8017986:	4299      	cmp	r1, r3
 8017988:	bfde      	ittt	le
 801798a:	2330      	movle	r3, #48	@ 0x30
 801798c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017990:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017994:	1b92      	subs	r2, r2, r6
 8017996:	6122      	str	r2, [r4, #16]
 8017998:	f8cd a000 	str.w	sl, [sp]
 801799c:	464b      	mov	r3, r9
 801799e:	aa03      	add	r2, sp, #12
 80179a0:	4621      	mov	r1, r4
 80179a2:	4640      	mov	r0, r8
 80179a4:	f7ff fee6 	bl	8017774 <_printf_common>
 80179a8:	3001      	adds	r0, #1
 80179aa:	d14a      	bne.n	8017a42 <_printf_i+0x1f2>
 80179ac:	f04f 30ff 	mov.w	r0, #4294967295
 80179b0:	b004      	add	sp, #16
 80179b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179b6:	6823      	ldr	r3, [r4, #0]
 80179b8:	f043 0320 	orr.w	r3, r3, #32
 80179bc:	6023      	str	r3, [r4, #0]
 80179be:	4833      	ldr	r0, [pc, #204]	@ (8017a8c <_printf_i+0x23c>)
 80179c0:	2778      	movs	r7, #120	@ 0x78
 80179c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80179c6:	6823      	ldr	r3, [r4, #0]
 80179c8:	6831      	ldr	r1, [r6, #0]
 80179ca:	061f      	lsls	r7, r3, #24
 80179cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80179d0:	d402      	bmi.n	80179d8 <_printf_i+0x188>
 80179d2:	065f      	lsls	r7, r3, #25
 80179d4:	bf48      	it	mi
 80179d6:	b2ad      	uxthmi	r5, r5
 80179d8:	6031      	str	r1, [r6, #0]
 80179da:	07d9      	lsls	r1, r3, #31
 80179dc:	bf44      	itt	mi
 80179de:	f043 0320 	orrmi.w	r3, r3, #32
 80179e2:	6023      	strmi	r3, [r4, #0]
 80179e4:	b11d      	cbz	r5, 80179ee <_printf_i+0x19e>
 80179e6:	2310      	movs	r3, #16
 80179e8:	e7ac      	b.n	8017944 <_printf_i+0xf4>
 80179ea:	4827      	ldr	r0, [pc, #156]	@ (8017a88 <_printf_i+0x238>)
 80179ec:	e7e9      	b.n	80179c2 <_printf_i+0x172>
 80179ee:	6823      	ldr	r3, [r4, #0]
 80179f0:	f023 0320 	bic.w	r3, r3, #32
 80179f4:	6023      	str	r3, [r4, #0]
 80179f6:	e7f6      	b.n	80179e6 <_printf_i+0x196>
 80179f8:	4616      	mov	r6, r2
 80179fa:	e7bd      	b.n	8017978 <_printf_i+0x128>
 80179fc:	6833      	ldr	r3, [r6, #0]
 80179fe:	6825      	ldr	r5, [r4, #0]
 8017a00:	6961      	ldr	r1, [r4, #20]
 8017a02:	1d18      	adds	r0, r3, #4
 8017a04:	6030      	str	r0, [r6, #0]
 8017a06:	062e      	lsls	r6, r5, #24
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	d501      	bpl.n	8017a10 <_printf_i+0x1c0>
 8017a0c:	6019      	str	r1, [r3, #0]
 8017a0e:	e002      	b.n	8017a16 <_printf_i+0x1c6>
 8017a10:	0668      	lsls	r0, r5, #25
 8017a12:	d5fb      	bpl.n	8017a0c <_printf_i+0x1bc>
 8017a14:	8019      	strh	r1, [r3, #0]
 8017a16:	2300      	movs	r3, #0
 8017a18:	6123      	str	r3, [r4, #16]
 8017a1a:	4616      	mov	r6, r2
 8017a1c:	e7bc      	b.n	8017998 <_printf_i+0x148>
 8017a1e:	6833      	ldr	r3, [r6, #0]
 8017a20:	1d1a      	adds	r2, r3, #4
 8017a22:	6032      	str	r2, [r6, #0]
 8017a24:	681e      	ldr	r6, [r3, #0]
 8017a26:	6862      	ldr	r2, [r4, #4]
 8017a28:	2100      	movs	r1, #0
 8017a2a:	4630      	mov	r0, r6
 8017a2c:	f7ee f980 	bl	8005d30 <memchr>
 8017a30:	b108      	cbz	r0, 8017a36 <_printf_i+0x1e6>
 8017a32:	1b80      	subs	r0, r0, r6
 8017a34:	6060      	str	r0, [r4, #4]
 8017a36:	6863      	ldr	r3, [r4, #4]
 8017a38:	6123      	str	r3, [r4, #16]
 8017a3a:	2300      	movs	r3, #0
 8017a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8017a40:	e7aa      	b.n	8017998 <_printf_i+0x148>
 8017a42:	6923      	ldr	r3, [r4, #16]
 8017a44:	4632      	mov	r2, r6
 8017a46:	4649      	mov	r1, r9
 8017a48:	4640      	mov	r0, r8
 8017a4a:	47d0      	blx	sl
 8017a4c:	3001      	adds	r0, #1
 8017a4e:	d0ad      	beq.n	80179ac <_printf_i+0x15c>
 8017a50:	6823      	ldr	r3, [r4, #0]
 8017a52:	079b      	lsls	r3, r3, #30
 8017a54:	d413      	bmi.n	8017a7e <_printf_i+0x22e>
 8017a56:	68e0      	ldr	r0, [r4, #12]
 8017a58:	9b03      	ldr	r3, [sp, #12]
 8017a5a:	4298      	cmp	r0, r3
 8017a5c:	bfb8      	it	lt
 8017a5e:	4618      	movlt	r0, r3
 8017a60:	e7a6      	b.n	80179b0 <_printf_i+0x160>
 8017a62:	2301      	movs	r3, #1
 8017a64:	4632      	mov	r2, r6
 8017a66:	4649      	mov	r1, r9
 8017a68:	4640      	mov	r0, r8
 8017a6a:	47d0      	blx	sl
 8017a6c:	3001      	adds	r0, #1
 8017a6e:	d09d      	beq.n	80179ac <_printf_i+0x15c>
 8017a70:	3501      	adds	r5, #1
 8017a72:	68e3      	ldr	r3, [r4, #12]
 8017a74:	9903      	ldr	r1, [sp, #12]
 8017a76:	1a5b      	subs	r3, r3, r1
 8017a78:	42ab      	cmp	r3, r5
 8017a7a:	dcf2      	bgt.n	8017a62 <_printf_i+0x212>
 8017a7c:	e7eb      	b.n	8017a56 <_printf_i+0x206>
 8017a7e:	2500      	movs	r5, #0
 8017a80:	f104 0619 	add.w	r6, r4, #25
 8017a84:	e7f5      	b.n	8017a72 <_printf_i+0x222>
 8017a86:	bf00      	nop
 8017a88:	080192e1 	.word	0x080192e1
 8017a8c:	080192f2 	.word	0x080192f2

08017a90 <__sflush_r>:
 8017a90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a98:	0716      	lsls	r6, r2, #28
 8017a9a:	4605      	mov	r5, r0
 8017a9c:	460c      	mov	r4, r1
 8017a9e:	d454      	bmi.n	8017b4a <__sflush_r+0xba>
 8017aa0:	684b      	ldr	r3, [r1, #4]
 8017aa2:	2b00      	cmp	r3, #0
 8017aa4:	dc02      	bgt.n	8017aac <__sflush_r+0x1c>
 8017aa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	dd48      	ble.n	8017b3e <__sflush_r+0xae>
 8017aac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017aae:	2e00      	cmp	r6, #0
 8017ab0:	d045      	beq.n	8017b3e <__sflush_r+0xae>
 8017ab2:	2300      	movs	r3, #0
 8017ab4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8017ab8:	682f      	ldr	r7, [r5, #0]
 8017aba:	6a21      	ldr	r1, [r4, #32]
 8017abc:	602b      	str	r3, [r5, #0]
 8017abe:	d030      	beq.n	8017b22 <__sflush_r+0x92>
 8017ac0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8017ac2:	89a3      	ldrh	r3, [r4, #12]
 8017ac4:	0759      	lsls	r1, r3, #29
 8017ac6:	d505      	bpl.n	8017ad4 <__sflush_r+0x44>
 8017ac8:	6863      	ldr	r3, [r4, #4]
 8017aca:	1ad2      	subs	r2, r2, r3
 8017acc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8017ace:	b10b      	cbz	r3, 8017ad4 <__sflush_r+0x44>
 8017ad0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017ad2:	1ad2      	subs	r2, r2, r3
 8017ad4:	2300      	movs	r3, #0
 8017ad6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8017ad8:	6a21      	ldr	r1, [r4, #32]
 8017ada:	4628      	mov	r0, r5
 8017adc:	47b0      	blx	r6
 8017ade:	1c43      	adds	r3, r0, #1
 8017ae0:	89a3      	ldrh	r3, [r4, #12]
 8017ae2:	d106      	bne.n	8017af2 <__sflush_r+0x62>
 8017ae4:	6829      	ldr	r1, [r5, #0]
 8017ae6:	291d      	cmp	r1, #29
 8017ae8:	d82b      	bhi.n	8017b42 <__sflush_r+0xb2>
 8017aea:	4a2a      	ldr	r2, [pc, #168]	@ (8017b94 <__sflush_r+0x104>)
 8017aec:	410a      	asrs	r2, r1
 8017aee:	07d6      	lsls	r6, r2, #31
 8017af0:	d427      	bmi.n	8017b42 <__sflush_r+0xb2>
 8017af2:	2200      	movs	r2, #0
 8017af4:	6062      	str	r2, [r4, #4]
 8017af6:	04d9      	lsls	r1, r3, #19
 8017af8:	6922      	ldr	r2, [r4, #16]
 8017afa:	6022      	str	r2, [r4, #0]
 8017afc:	d504      	bpl.n	8017b08 <__sflush_r+0x78>
 8017afe:	1c42      	adds	r2, r0, #1
 8017b00:	d101      	bne.n	8017b06 <__sflush_r+0x76>
 8017b02:	682b      	ldr	r3, [r5, #0]
 8017b04:	b903      	cbnz	r3, 8017b08 <__sflush_r+0x78>
 8017b06:	6560      	str	r0, [r4, #84]	@ 0x54
 8017b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017b0a:	602f      	str	r7, [r5, #0]
 8017b0c:	b1b9      	cbz	r1, 8017b3e <__sflush_r+0xae>
 8017b0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017b12:	4299      	cmp	r1, r3
 8017b14:	d002      	beq.n	8017b1c <__sflush_r+0x8c>
 8017b16:	4628      	mov	r0, r5
 8017b18:	f7ff fb48 	bl	80171ac <_free_r>
 8017b1c:	2300      	movs	r3, #0
 8017b1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8017b20:	e00d      	b.n	8017b3e <__sflush_r+0xae>
 8017b22:	2301      	movs	r3, #1
 8017b24:	4628      	mov	r0, r5
 8017b26:	47b0      	blx	r6
 8017b28:	4602      	mov	r2, r0
 8017b2a:	1c50      	adds	r0, r2, #1
 8017b2c:	d1c9      	bne.n	8017ac2 <__sflush_r+0x32>
 8017b2e:	682b      	ldr	r3, [r5, #0]
 8017b30:	2b00      	cmp	r3, #0
 8017b32:	d0c6      	beq.n	8017ac2 <__sflush_r+0x32>
 8017b34:	2b1d      	cmp	r3, #29
 8017b36:	d001      	beq.n	8017b3c <__sflush_r+0xac>
 8017b38:	2b16      	cmp	r3, #22
 8017b3a:	d11e      	bne.n	8017b7a <__sflush_r+0xea>
 8017b3c:	602f      	str	r7, [r5, #0]
 8017b3e:	2000      	movs	r0, #0
 8017b40:	e022      	b.n	8017b88 <__sflush_r+0xf8>
 8017b42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b46:	b21b      	sxth	r3, r3
 8017b48:	e01b      	b.n	8017b82 <__sflush_r+0xf2>
 8017b4a:	690f      	ldr	r7, [r1, #16]
 8017b4c:	2f00      	cmp	r7, #0
 8017b4e:	d0f6      	beq.n	8017b3e <__sflush_r+0xae>
 8017b50:	0793      	lsls	r3, r2, #30
 8017b52:	680e      	ldr	r6, [r1, #0]
 8017b54:	bf08      	it	eq
 8017b56:	694b      	ldreq	r3, [r1, #20]
 8017b58:	600f      	str	r7, [r1, #0]
 8017b5a:	bf18      	it	ne
 8017b5c:	2300      	movne	r3, #0
 8017b5e:	eba6 0807 	sub.w	r8, r6, r7
 8017b62:	608b      	str	r3, [r1, #8]
 8017b64:	f1b8 0f00 	cmp.w	r8, #0
 8017b68:	dde9      	ble.n	8017b3e <__sflush_r+0xae>
 8017b6a:	6a21      	ldr	r1, [r4, #32]
 8017b6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017b6e:	4643      	mov	r3, r8
 8017b70:	463a      	mov	r2, r7
 8017b72:	4628      	mov	r0, r5
 8017b74:	47b0      	blx	r6
 8017b76:	2800      	cmp	r0, #0
 8017b78:	dc08      	bgt.n	8017b8c <__sflush_r+0xfc>
 8017b7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017b7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017b82:	81a3      	strh	r3, [r4, #12]
 8017b84:	f04f 30ff 	mov.w	r0, #4294967295
 8017b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b8c:	4407      	add	r7, r0
 8017b8e:	eba8 0800 	sub.w	r8, r8, r0
 8017b92:	e7e7      	b.n	8017b64 <__sflush_r+0xd4>
 8017b94:	dfbffffe 	.word	0xdfbffffe

08017b98 <_fflush_r>:
 8017b98:	b538      	push	{r3, r4, r5, lr}
 8017b9a:	690b      	ldr	r3, [r1, #16]
 8017b9c:	4605      	mov	r5, r0
 8017b9e:	460c      	mov	r4, r1
 8017ba0:	b913      	cbnz	r3, 8017ba8 <_fflush_r+0x10>
 8017ba2:	2500      	movs	r5, #0
 8017ba4:	4628      	mov	r0, r5
 8017ba6:	bd38      	pop	{r3, r4, r5, pc}
 8017ba8:	b118      	cbz	r0, 8017bb2 <_fflush_r+0x1a>
 8017baa:	6a03      	ldr	r3, [r0, #32]
 8017bac:	b90b      	cbnz	r3, 8017bb2 <_fflush_r+0x1a>
 8017bae:	f7ff f923 	bl	8016df8 <__sinit>
 8017bb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d0f3      	beq.n	8017ba2 <_fflush_r+0xa>
 8017bba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017bbc:	07d0      	lsls	r0, r2, #31
 8017bbe:	d404      	bmi.n	8017bca <_fflush_r+0x32>
 8017bc0:	0599      	lsls	r1, r3, #22
 8017bc2:	d402      	bmi.n	8017bca <_fflush_r+0x32>
 8017bc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017bc6:	f7ff fad8 	bl	801717a <__retarget_lock_acquire_recursive>
 8017bca:	4628      	mov	r0, r5
 8017bcc:	4621      	mov	r1, r4
 8017bce:	f7ff ff5f 	bl	8017a90 <__sflush_r>
 8017bd2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017bd4:	07da      	lsls	r2, r3, #31
 8017bd6:	4605      	mov	r5, r0
 8017bd8:	d4e4      	bmi.n	8017ba4 <_fflush_r+0xc>
 8017bda:	89a3      	ldrh	r3, [r4, #12]
 8017bdc:	059b      	lsls	r3, r3, #22
 8017bde:	d4e1      	bmi.n	8017ba4 <_fflush_r+0xc>
 8017be0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017be2:	f7ff facb 	bl	801717c <__retarget_lock_release_recursive>
 8017be6:	e7dd      	b.n	8017ba4 <_fflush_r+0xc>

08017be8 <__swbuf_r>:
 8017be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017bea:	460e      	mov	r6, r1
 8017bec:	4614      	mov	r4, r2
 8017bee:	4605      	mov	r5, r0
 8017bf0:	b118      	cbz	r0, 8017bfa <__swbuf_r+0x12>
 8017bf2:	6a03      	ldr	r3, [r0, #32]
 8017bf4:	b90b      	cbnz	r3, 8017bfa <__swbuf_r+0x12>
 8017bf6:	f7ff f8ff 	bl	8016df8 <__sinit>
 8017bfa:	69a3      	ldr	r3, [r4, #24]
 8017bfc:	60a3      	str	r3, [r4, #8]
 8017bfe:	89a3      	ldrh	r3, [r4, #12]
 8017c00:	071a      	lsls	r2, r3, #28
 8017c02:	d501      	bpl.n	8017c08 <__swbuf_r+0x20>
 8017c04:	6923      	ldr	r3, [r4, #16]
 8017c06:	b943      	cbnz	r3, 8017c1a <__swbuf_r+0x32>
 8017c08:	4621      	mov	r1, r4
 8017c0a:	4628      	mov	r0, r5
 8017c0c:	f000 f82a 	bl	8017c64 <__swsetup_r>
 8017c10:	b118      	cbz	r0, 8017c1a <__swbuf_r+0x32>
 8017c12:	f04f 37ff 	mov.w	r7, #4294967295
 8017c16:	4638      	mov	r0, r7
 8017c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c1a:	6823      	ldr	r3, [r4, #0]
 8017c1c:	6922      	ldr	r2, [r4, #16]
 8017c1e:	1a98      	subs	r0, r3, r2
 8017c20:	6963      	ldr	r3, [r4, #20]
 8017c22:	b2f6      	uxtb	r6, r6
 8017c24:	4283      	cmp	r3, r0
 8017c26:	4637      	mov	r7, r6
 8017c28:	dc05      	bgt.n	8017c36 <__swbuf_r+0x4e>
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	4628      	mov	r0, r5
 8017c2e:	f7ff ffb3 	bl	8017b98 <_fflush_r>
 8017c32:	2800      	cmp	r0, #0
 8017c34:	d1ed      	bne.n	8017c12 <__swbuf_r+0x2a>
 8017c36:	68a3      	ldr	r3, [r4, #8]
 8017c38:	3b01      	subs	r3, #1
 8017c3a:	60a3      	str	r3, [r4, #8]
 8017c3c:	6823      	ldr	r3, [r4, #0]
 8017c3e:	1c5a      	adds	r2, r3, #1
 8017c40:	6022      	str	r2, [r4, #0]
 8017c42:	701e      	strb	r6, [r3, #0]
 8017c44:	6962      	ldr	r2, [r4, #20]
 8017c46:	1c43      	adds	r3, r0, #1
 8017c48:	429a      	cmp	r2, r3
 8017c4a:	d004      	beq.n	8017c56 <__swbuf_r+0x6e>
 8017c4c:	89a3      	ldrh	r3, [r4, #12]
 8017c4e:	07db      	lsls	r3, r3, #31
 8017c50:	d5e1      	bpl.n	8017c16 <__swbuf_r+0x2e>
 8017c52:	2e0a      	cmp	r6, #10
 8017c54:	d1df      	bne.n	8017c16 <__swbuf_r+0x2e>
 8017c56:	4621      	mov	r1, r4
 8017c58:	4628      	mov	r0, r5
 8017c5a:	f7ff ff9d 	bl	8017b98 <_fflush_r>
 8017c5e:	2800      	cmp	r0, #0
 8017c60:	d0d9      	beq.n	8017c16 <__swbuf_r+0x2e>
 8017c62:	e7d6      	b.n	8017c12 <__swbuf_r+0x2a>

08017c64 <__swsetup_r>:
 8017c64:	b538      	push	{r3, r4, r5, lr}
 8017c66:	4b29      	ldr	r3, [pc, #164]	@ (8017d0c <__swsetup_r+0xa8>)
 8017c68:	4605      	mov	r5, r0
 8017c6a:	6818      	ldr	r0, [r3, #0]
 8017c6c:	460c      	mov	r4, r1
 8017c6e:	b118      	cbz	r0, 8017c78 <__swsetup_r+0x14>
 8017c70:	6a03      	ldr	r3, [r0, #32]
 8017c72:	b90b      	cbnz	r3, 8017c78 <__swsetup_r+0x14>
 8017c74:	f7ff f8c0 	bl	8016df8 <__sinit>
 8017c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c7c:	0719      	lsls	r1, r3, #28
 8017c7e:	d422      	bmi.n	8017cc6 <__swsetup_r+0x62>
 8017c80:	06da      	lsls	r2, r3, #27
 8017c82:	d407      	bmi.n	8017c94 <__swsetup_r+0x30>
 8017c84:	2209      	movs	r2, #9
 8017c86:	602a      	str	r2, [r5, #0]
 8017c88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017c8c:	81a3      	strh	r3, [r4, #12]
 8017c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8017c92:	e033      	b.n	8017cfc <__swsetup_r+0x98>
 8017c94:	0758      	lsls	r0, r3, #29
 8017c96:	d512      	bpl.n	8017cbe <__swsetup_r+0x5a>
 8017c98:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8017c9a:	b141      	cbz	r1, 8017cae <__swsetup_r+0x4a>
 8017c9c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8017ca0:	4299      	cmp	r1, r3
 8017ca2:	d002      	beq.n	8017caa <__swsetup_r+0x46>
 8017ca4:	4628      	mov	r0, r5
 8017ca6:	f7ff fa81 	bl	80171ac <_free_r>
 8017caa:	2300      	movs	r3, #0
 8017cac:	6363      	str	r3, [r4, #52]	@ 0x34
 8017cae:	89a3      	ldrh	r3, [r4, #12]
 8017cb0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8017cb4:	81a3      	strh	r3, [r4, #12]
 8017cb6:	2300      	movs	r3, #0
 8017cb8:	6063      	str	r3, [r4, #4]
 8017cba:	6923      	ldr	r3, [r4, #16]
 8017cbc:	6023      	str	r3, [r4, #0]
 8017cbe:	89a3      	ldrh	r3, [r4, #12]
 8017cc0:	f043 0308 	orr.w	r3, r3, #8
 8017cc4:	81a3      	strh	r3, [r4, #12]
 8017cc6:	6923      	ldr	r3, [r4, #16]
 8017cc8:	b94b      	cbnz	r3, 8017cde <__swsetup_r+0x7a>
 8017cca:	89a3      	ldrh	r3, [r4, #12]
 8017ccc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8017cd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017cd4:	d003      	beq.n	8017cde <__swsetup_r+0x7a>
 8017cd6:	4621      	mov	r1, r4
 8017cd8:	4628      	mov	r0, r5
 8017cda:	f000 f8cb 	bl	8017e74 <__smakebuf_r>
 8017cde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ce2:	f013 0201 	ands.w	r2, r3, #1
 8017ce6:	d00a      	beq.n	8017cfe <__swsetup_r+0x9a>
 8017ce8:	2200      	movs	r2, #0
 8017cea:	60a2      	str	r2, [r4, #8]
 8017cec:	6962      	ldr	r2, [r4, #20]
 8017cee:	4252      	negs	r2, r2
 8017cf0:	61a2      	str	r2, [r4, #24]
 8017cf2:	6922      	ldr	r2, [r4, #16]
 8017cf4:	b942      	cbnz	r2, 8017d08 <__swsetup_r+0xa4>
 8017cf6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8017cfa:	d1c5      	bne.n	8017c88 <__swsetup_r+0x24>
 8017cfc:	bd38      	pop	{r3, r4, r5, pc}
 8017cfe:	0799      	lsls	r1, r3, #30
 8017d00:	bf58      	it	pl
 8017d02:	6962      	ldrpl	r2, [r4, #20]
 8017d04:	60a2      	str	r2, [r4, #8]
 8017d06:	e7f4      	b.n	8017cf2 <__swsetup_r+0x8e>
 8017d08:	2000      	movs	r0, #0
 8017d0a:	e7f7      	b.n	8017cfc <__swsetup_r+0x98>
 8017d0c:	200000c0 	.word	0x200000c0

08017d10 <memmove>:
 8017d10:	4288      	cmp	r0, r1
 8017d12:	b510      	push	{r4, lr}
 8017d14:	eb01 0402 	add.w	r4, r1, r2
 8017d18:	d902      	bls.n	8017d20 <memmove+0x10>
 8017d1a:	4284      	cmp	r4, r0
 8017d1c:	4623      	mov	r3, r4
 8017d1e:	d807      	bhi.n	8017d30 <memmove+0x20>
 8017d20:	1e43      	subs	r3, r0, #1
 8017d22:	42a1      	cmp	r1, r4
 8017d24:	d008      	beq.n	8017d38 <memmove+0x28>
 8017d26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017d2e:	e7f8      	b.n	8017d22 <memmove+0x12>
 8017d30:	4402      	add	r2, r0
 8017d32:	4601      	mov	r1, r0
 8017d34:	428a      	cmp	r2, r1
 8017d36:	d100      	bne.n	8017d3a <memmove+0x2a>
 8017d38:	bd10      	pop	{r4, pc}
 8017d3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017d3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017d42:	e7f7      	b.n	8017d34 <memmove+0x24>

08017d44 <_raise_r>:
 8017d44:	291f      	cmp	r1, #31
 8017d46:	b538      	push	{r3, r4, r5, lr}
 8017d48:	4605      	mov	r5, r0
 8017d4a:	460c      	mov	r4, r1
 8017d4c:	d904      	bls.n	8017d58 <_raise_r+0x14>
 8017d4e:	2316      	movs	r3, #22
 8017d50:	6003      	str	r3, [r0, #0]
 8017d52:	f04f 30ff 	mov.w	r0, #4294967295
 8017d56:	bd38      	pop	{r3, r4, r5, pc}
 8017d58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8017d5a:	b112      	cbz	r2, 8017d62 <_raise_r+0x1e>
 8017d5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017d60:	b94b      	cbnz	r3, 8017d76 <_raise_r+0x32>
 8017d62:	4628      	mov	r0, r5
 8017d64:	f000 f830 	bl	8017dc8 <_getpid_r>
 8017d68:	4622      	mov	r2, r4
 8017d6a:	4601      	mov	r1, r0
 8017d6c:	4628      	mov	r0, r5
 8017d6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017d72:	f000 b817 	b.w	8017da4 <_kill_r>
 8017d76:	2b01      	cmp	r3, #1
 8017d78:	d00a      	beq.n	8017d90 <_raise_r+0x4c>
 8017d7a:	1c59      	adds	r1, r3, #1
 8017d7c:	d103      	bne.n	8017d86 <_raise_r+0x42>
 8017d7e:	2316      	movs	r3, #22
 8017d80:	6003      	str	r3, [r0, #0]
 8017d82:	2001      	movs	r0, #1
 8017d84:	e7e7      	b.n	8017d56 <_raise_r+0x12>
 8017d86:	2100      	movs	r1, #0
 8017d88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8017d8c:	4620      	mov	r0, r4
 8017d8e:	4798      	blx	r3
 8017d90:	2000      	movs	r0, #0
 8017d92:	e7e0      	b.n	8017d56 <_raise_r+0x12>

08017d94 <raise>:
 8017d94:	4b02      	ldr	r3, [pc, #8]	@ (8017da0 <raise+0xc>)
 8017d96:	4601      	mov	r1, r0
 8017d98:	6818      	ldr	r0, [r3, #0]
 8017d9a:	f7ff bfd3 	b.w	8017d44 <_raise_r>
 8017d9e:	bf00      	nop
 8017da0:	200000c0 	.word	0x200000c0

08017da4 <_kill_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4d07      	ldr	r5, [pc, #28]	@ (8017dc4 <_kill_r+0x20>)
 8017da8:	2300      	movs	r3, #0
 8017daa:	4604      	mov	r4, r0
 8017dac:	4608      	mov	r0, r1
 8017dae:	4611      	mov	r1, r2
 8017db0:	602b      	str	r3, [r5, #0]
 8017db2:	f7f0 ff0f 	bl	8008bd4 <_kill>
 8017db6:	1c43      	adds	r3, r0, #1
 8017db8:	d102      	bne.n	8017dc0 <_kill_r+0x1c>
 8017dba:	682b      	ldr	r3, [r5, #0]
 8017dbc:	b103      	cbz	r3, 8017dc0 <_kill_r+0x1c>
 8017dbe:	6023      	str	r3, [r4, #0]
 8017dc0:	bd38      	pop	{r3, r4, r5, pc}
 8017dc2:	bf00      	nop
 8017dc4:	20001e74 	.word	0x20001e74

08017dc8 <_getpid_r>:
 8017dc8:	f7f0 befc 	b.w	8008bc4 <_getpid>

08017dcc <_realloc_r>:
 8017dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017dd0:	4680      	mov	r8, r0
 8017dd2:	4615      	mov	r5, r2
 8017dd4:	460c      	mov	r4, r1
 8017dd6:	b921      	cbnz	r1, 8017de2 <_realloc_r+0x16>
 8017dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017ddc:	4611      	mov	r1, r2
 8017dde:	f7fe bef3 	b.w	8016bc8 <_malloc_r>
 8017de2:	b92a      	cbnz	r2, 8017df0 <_realloc_r+0x24>
 8017de4:	f7ff f9e2 	bl	80171ac <_free_r>
 8017de8:	2400      	movs	r4, #0
 8017dea:	4620      	mov	r0, r4
 8017dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017df0:	f000 f89e 	bl	8017f30 <_malloc_usable_size_r>
 8017df4:	4285      	cmp	r5, r0
 8017df6:	4606      	mov	r6, r0
 8017df8:	d802      	bhi.n	8017e00 <_realloc_r+0x34>
 8017dfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017dfe:	d8f4      	bhi.n	8017dea <_realloc_r+0x1e>
 8017e00:	4629      	mov	r1, r5
 8017e02:	4640      	mov	r0, r8
 8017e04:	f7fe fee0 	bl	8016bc8 <_malloc_r>
 8017e08:	4607      	mov	r7, r0
 8017e0a:	2800      	cmp	r0, #0
 8017e0c:	d0ec      	beq.n	8017de8 <_realloc_r+0x1c>
 8017e0e:	42b5      	cmp	r5, r6
 8017e10:	462a      	mov	r2, r5
 8017e12:	4621      	mov	r1, r4
 8017e14:	bf28      	it	cs
 8017e16:	4632      	movcs	r2, r6
 8017e18:	f7ff f9b3 	bl	8017182 <memcpy>
 8017e1c:	4621      	mov	r1, r4
 8017e1e:	4640      	mov	r0, r8
 8017e20:	f7ff f9c4 	bl	80171ac <_free_r>
 8017e24:	463c      	mov	r4, r7
 8017e26:	e7e0      	b.n	8017dea <_realloc_r+0x1e>

08017e28 <__swhatbuf_r>:
 8017e28:	b570      	push	{r4, r5, r6, lr}
 8017e2a:	460c      	mov	r4, r1
 8017e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e30:	2900      	cmp	r1, #0
 8017e32:	b096      	sub	sp, #88	@ 0x58
 8017e34:	4615      	mov	r5, r2
 8017e36:	461e      	mov	r6, r3
 8017e38:	da0d      	bge.n	8017e56 <__swhatbuf_r+0x2e>
 8017e3a:	89a3      	ldrh	r3, [r4, #12]
 8017e3c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8017e40:	f04f 0100 	mov.w	r1, #0
 8017e44:	bf14      	ite	ne
 8017e46:	2340      	movne	r3, #64	@ 0x40
 8017e48:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8017e4c:	2000      	movs	r0, #0
 8017e4e:	6031      	str	r1, [r6, #0]
 8017e50:	602b      	str	r3, [r5, #0]
 8017e52:	b016      	add	sp, #88	@ 0x58
 8017e54:	bd70      	pop	{r4, r5, r6, pc}
 8017e56:	466a      	mov	r2, sp
 8017e58:	f000 f848 	bl	8017eec <_fstat_r>
 8017e5c:	2800      	cmp	r0, #0
 8017e5e:	dbec      	blt.n	8017e3a <__swhatbuf_r+0x12>
 8017e60:	9901      	ldr	r1, [sp, #4]
 8017e62:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017e66:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017e6a:	4259      	negs	r1, r3
 8017e6c:	4159      	adcs	r1, r3
 8017e6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e72:	e7eb      	b.n	8017e4c <__swhatbuf_r+0x24>

08017e74 <__smakebuf_r>:
 8017e74:	898b      	ldrh	r3, [r1, #12]
 8017e76:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e78:	079d      	lsls	r5, r3, #30
 8017e7a:	4606      	mov	r6, r0
 8017e7c:	460c      	mov	r4, r1
 8017e7e:	d507      	bpl.n	8017e90 <__smakebuf_r+0x1c>
 8017e80:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8017e84:	6023      	str	r3, [r4, #0]
 8017e86:	6123      	str	r3, [r4, #16]
 8017e88:	2301      	movs	r3, #1
 8017e8a:	6163      	str	r3, [r4, #20]
 8017e8c:	b003      	add	sp, #12
 8017e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e90:	ab01      	add	r3, sp, #4
 8017e92:	466a      	mov	r2, sp
 8017e94:	f7ff ffc8 	bl	8017e28 <__swhatbuf_r>
 8017e98:	9f00      	ldr	r7, [sp, #0]
 8017e9a:	4605      	mov	r5, r0
 8017e9c:	4639      	mov	r1, r7
 8017e9e:	4630      	mov	r0, r6
 8017ea0:	f7fe fe92 	bl	8016bc8 <_malloc_r>
 8017ea4:	b948      	cbnz	r0, 8017eba <__smakebuf_r+0x46>
 8017ea6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017eaa:	059a      	lsls	r2, r3, #22
 8017eac:	d4ee      	bmi.n	8017e8c <__smakebuf_r+0x18>
 8017eae:	f023 0303 	bic.w	r3, r3, #3
 8017eb2:	f043 0302 	orr.w	r3, r3, #2
 8017eb6:	81a3      	strh	r3, [r4, #12]
 8017eb8:	e7e2      	b.n	8017e80 <__smakebuf_r+0xc>
 8017eba:	89a3      	ldrh	r3, [r4, #12]
 8017ebc:	6020      	str	r0, [r4, #0]
 8017ebe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ec2:	81a3      	strh	r3, [r4, #12]
 8017ec4:	9b01      	ldr	r3, [sp, #4]
 8017ec6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017eca:	b15b      	cbz	r3, 8017ee4 <__smakebuf_r+0x70>
 8017ecc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ed0:	4630      	mov	r0, r6
 8017ed2:	f000 f81d 	bl	8017f10 <_isatty_r>
 8017ed6:	b128      	cbz	r0, 8017ee4 <__smakebuf_r+0x70>
 8017ed8:	89a3      	ldrh	r3, [r4, #12]
 8017eda:	f023 0303 	bic.w	r3, r3, #3
 8017ede:	f043 0301 	orr.w	r3, r3, #1
 8017ee2:	81a3      	strh	r3, [r4, #12]
 8017ee4:	89a3      	ldrh	r3, [r4, #12]
 8017ee6:	431d      	orrs	r5, r3
 8017ee8:	81a5      	strh	r5, [r4, #12]
 8017eea:	e7cf      	b.n	8017e8c <__smakebuf_r+0x18>

08017eec <_fstat_r>:
 8017eec:	b538      	push	{r3, r4, r5, lr}
 8017eee:	4d07      	ldr	r5, [pc, #28]	@ (8017f0c <_fstat_r+0x20>)
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	4604      	mov	r4, r0
 8017ef4:	4608      	mov	r0, r1
 8017ef6:	4611      	mov	r1, r2
 8017ef8:	602b      	str	r3, [r5, #0]
 8017efa:	f7f0 feaf 	bl	8008c5c <_fstat>
 8017efe:	1c43      	adds	r3, r0, #1
 8017f00:	d102      	bne.n	8017f08 <_fstat_r+0x1c>
 8017f02:	682b      	ldr	r3, [r5, #0]
 8017f04:	b103      	cbz	r3, 8017f08 <_fstat_r+0x1c>
 8017f06:	6023      	str	r3, [r4, #0]
 8017f08:	bd38      	pop	{r3, r4, r5, pc}
 8017f0a:	bf00      	nop
 8017f0c:	20001e74 	.word	0x20001e74

08017f10 <_isatty_r>:
 8017f10:	b538      	push	{r3, r4, r5, lr}
 8017f12:	4d06      	ldr	r5, [pc, #24]	@ (8017f2c <_isatty_r+0x1c>)
 8017f14:	2300      	movs	r3, #0
 8017f16:	4604      	mov	r4, r0
 8017f18:	4608      	mov	r0, r1
 8017f1a:	602b      	str	r3, [r5, #0]
 8017f1c:	f7f0 feae 	bl	8008c7c <_isatty>
 8017f20:	1c43      	adds	r3, r0, #1
 8017f22:	d102      	bne.n	8017f2a <_isatty_r+0x1a>
 8017f24:	682b      	ldr	r3, [r5, #0]
 8017f26:	b103      	cbz	r3, 8017f2a <_isatty_r+0x1a>
 8017f28:	6023      	str	r3, [r4, #0]
 8017f2a:	bd38      	pop	{r3, r4, r5, pc}
 8017f2c:	20001e74 	.word	0x20001e74

08017f30 <_malloc_usable_size_r>:
 8017f30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f34:	1f18      	subs	r0, r3, #4
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	bfbc      	itt	lt
 8017f3a:	580b      	ldrlt	r3, [r1, r0]
 8017f3c:	18c0      	addlt	r0, r0, r3
 8017f3e:	4770      	bx	lr

08017f40 <_init>:
 8017f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f42:	bf00      	nop
 8017f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f46:	bc08      	pop	{r3}
 8017f48:	469e      	mov	lr, r3
 8017f4a:	4770      	bx	lr

08017f4c <_fini>:
 8017f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f4e:	bf00      	nop
 8017f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f52:	bc08      	pop	{r3}
 8017f54:	469e      	mov	lr, r3
 8017f56:	4770      	bx	lr
